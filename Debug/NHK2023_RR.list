
NHK2023_RR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016c3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e50  08016e3c  08016e3c  00026e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019c8c  08019c8c  00030080  2**0
                  CONTENTS
  4 .ARM          00000008  08019c8c  08019c8c  00029c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019c94  08019c94  00030080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019c94  08019c94  00029c94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019c98  08019c98  00029c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08019c9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c8e0  20000080  08019d1c  00030080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c960  08019d1c  0003c960  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004b8b5  00000000  00000000  000300ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000089ea  00000000  00000000  0007b963  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002788  00000000  00000000  00084350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000025d8  00000000  00000000  00086ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000393bd  00000000  00000000  000890b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003c7cf  00000000  00000000  000c246d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012b14d  00000000  00000000  000fec3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00229d89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ac9c  00000000  00000000  00229ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000080 	.word	0x20000080
 800021c:	00000000 	.word	0x00000000
 8000220:	08016e24 	.word	0x08016e24

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000084 	.word	0x20000084
 800023c:	08016e24 	.word	0x08016e24

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96e 	b.w	80005d4 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468c      	mov	ip, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	f040 8083 	bne.w	8000426 <__udivmoddi4+0x116>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d947      	bls.n	80003b6 <__udivmoddi4+0xa6>
 8000326:	fab2 f282 	clz	r2, r2
 800032a:	b142      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032c:	f1c2 0020 	rsb	r0, r2, #32
 8000330:	fa24 f000 	lsr.w	r0, r4, r0
 8000334:	4091      	lsls	r1, r2
 8000336:	4097      	lsls	r7, r2
 8000338:	ea40 0c01 	orr.w	ip, r0, r1
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbbc f6f8 	udiv	r6, ip, r8
 8000348:	fa1f fe87 	uxth.w	lr, r7
 800034c:	fb08 c116 	mls	r1, r8, r6, ip
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb06 f10e 	mul.w	r1, r6, lr
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000362:	f080 8119 	bcs.w	8000598 <__udivmoddi4+0x288>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8116 	bls.w	8000598 <__udivmoddi4+0x288>
 800036c:	3e02      	subs	r6, #2
 800036e:	443b      	add	r3, r7
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0f8 	udiv	r0, r3, r8
 8000378:	fb08 3310 	mls	r3, r8, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fe0e 	mul.w	lr, r0, lr
 8000384:	45a6      	cmp	lr, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8105 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000392:	45a6      	cmp	lr, r4
 8000394:	f240 8102 	bls.w	800059c <__udivmoddi4+0x28c>
 8000398:	3802      	subs	r0, #2
 800039a:	443c      	add	r4, r7
 800039c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	2600      	movs	r6, #0
 80003a6:	b11d      	cbz	r5, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c5 4300 	strd	r4, r3, [r5]
 80003b0:	4631      	mov	r1, r6
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	b902      	cbnz	r2, 80003ba <__udivmoddi4+0xaa>
 80003b8:	deff      	udf	#255	; 0xff
 80003ba:	fab2 f282 	clz	r2, r2
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d150      	bne.n	8000464 <__udivmoddi4+0x154>
 80003c2:	1bcb      	subs	r3, r1, r7
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	fa1f f887 	uxth.w	r8, r7
 80003cc:	2601      	movs	r6, #1
 80003ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80003d2:	0c21      	lsrs	r1, r4, #16
 80003d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003dc:	fb08 f30c 	mul.w	r3, r8, ip
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0xe4>
 80003e4:	1879      	adds	r1, r7, r1
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0xe2>
 80003ec:	428b      	cmp	r3, r1
 80003ee:	f200 80e9 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1ac9      	subs	r1, r1, r3
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000400:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x10c>
 800040c:	193c      	adds	r4, r7, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x10a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80d9 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e7bf      	b.n	80003a6 <__udivmoddi4+0x96>
 8000426:	428b      	cmp	r3, r1
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x12e>
 800042a:	2d00      	cmp	r5, #0
 800042c:	f000 80b1 	beq.w	8000592 <__udivmoddi4+0x282>
 8000430:	2600      	movs	r6, #0
 8000432:	e9c5 0100 	strd	r0, r1, [r5]
 8000436:	4630      	mov	r0, r6
 8000438:	4631      	mov	r1, r6
 800043a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043e:	fab3 f683 	clz	r6, r3
 8000442:	2e00      	cmp	r6, #0
 8000444:	d14a      	bne.n	80004dc <__udivmoddi4+0x1cc>
 8000446:	428b      	cmp	r3, r1
 8000448:	d302      	bcc.n	8000450 <__udivmoddi4+0x140>
 800044a:	4282      	cmp	r2, r0
 800044c:	f200 80b8 	bhi.w	80005c0 <__udivmoddi4+0x2b0>
 8000450:	1a84      	subs	r4, r0, r2
 8000452:	eb61 0103 	sbc.w	r1, r1, r3
 8000456:	2001      	movs	r0, #1
 8000458:	468c      	mov	ip, r1
 800045a:	2d00      	cmp	r5, #0
 800045c:	d0a8      	beq.n	80003b0 <__udivmoddi4+0xa0>
 800045e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000464:	f1c2 0320 	rsb	r3, r2, #32
 8000468:	fa20 f603 	lsr.w	r6, r0, r3
 800046c:	4097      	lsls	r7, r2
 800046e:	fa01 f002 	lsl.w	r0, r1, r2
 8000472:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000476:	40d9      	lsrs	r1, r3
 8000478:	4330      	orrs	r0, r6
 800047a:	0c03      	lsrs	r3, r0, #16
 800047c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000480:	fa1f f887 	uxth.w	r8, r7
 8000484:	fb0e 1116 	mls	r1, lr, r6, r1
 8000488:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800048c:	fb06 f108 	mul.w	r1, r6, r8
 8000490:	4299      	cmp	r1, r3
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d909      	bls.n	80004ac <__udivmoddi4+0x19c>
 8000498:	18fb      	adds	r3, r7, r3
 800049a:	f106 3cff 	add.w	ip, r6, #4294967295
 800049e:	f080 808d 	bcs.w	80005bc <__udivmoddi4+0x2ac>
 80004a2:	4299      	cmp	r1, r3
 80004a4:	f240 808a 	bls.w	80005bc <__udivmoddi4+0x2ac>
 80004a8:	3e02      	subs	r6, #2
 80004aa:	443b      	add	r3, r7
 80004ac:	1a5b      	subs	r3, r3, r1
 80004ae:	b281      	uxth	r1, r0
 80004b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb00 f308 	mul.w	r3, r0, r8
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x1c4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ca:	d273      	bcs.n	80005b4 <__udivmoddi4+0x2a4>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	d971      	bls.n	80005b4 <__udivmoddi4+0x2a4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	4439      	add	r1, r7
 80004d4:	1acb      	subs	r3, r1, r3
 80004d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004da:	e778      	b.n	80003ce <__udivmoddi4+0xbe>
 80004dc:	f1c6 0c20 	rsb	ip, r6, #32
 80004e0:	fa03 f406 	lsl.w	r4, r3, r6
 80004e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e8:	431c      	orrs	r4, r3
 80004ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ee:	fa01 f306 	lsl.w	r3, r1, r6
 80004f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004fa:	431f      	orrs	r7, r3
 80004fc:	0c3b      	lsrs	r3, r7, #16
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fa1f f884 	uxth.w	r8, r4
 8000506:	fb0e 1119 	mls	r1, lr, r9, r1
 800050a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800050e:	fb09 fa08 	mul.w	sl, r9, r8
 8000512:	458a      	cmp	sl, r1
 8000514:	fa02 f206 	lsl.w	r2, r2, r6
 8000518:	fa00 f306 	lsl.w	r3, r0, r6
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x220>
 800051e:	1861      	adds	r1, r4, r1
 8000520:	f109 30ff 	add.w	r0, r9, #4294967295
 8000524:	d248      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 8000526:	458a      	cmp	sl, r1
 8000528:	d946      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800052a:	f1a9 0902 	sub.w	r9, r9, #2
 800052e:	4421      	add	r1, r4
 8000530:	eba1 010a 	sub.w	r1, r1, sl
 8000534:	b2bf      	uxth	r7, r7
 8000536:	fbb1 f0fe 	udiv	r0, r1, lr
 800053a:	fb0e 1110 	mls	r1, lr, r0, r1
 800053e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000542:	fb00 f808 	mul.w	r8, r0, r8
 8000546:	45b8      	cmp	r8, r7
 8000548:	d907      	bls.n	800055a <__udivmoddi4+0x24a>
 800054a:	19e7      	adds	r7, r4, r7
 800054c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000550:	d22e      	bcs.n	80005b0 <__udivmoddi4+0x2a0>
 8000552:	45b8      	cmp	r8, r7
 8000554:	d92c      	bls.n	80005b0 <__udivmoddi4+0x2a0>
 8000556:	3802      	subs	r0, #2
 8000558:	4427      	add	r7, r4
 800055a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800055e:	eba7 0708 	sub.w	r7, r7, r8
 8000562:	fba0 8902 	umull	r8, r9, r0, r2
 8000566:	454f      	cmp	r7, r9
 8000568:	46c6      	mov	lr, r8
 800056a:	4649      	mov	r1, r9
 800056c:	d31a      	bcc.n	80005a4 <__udivmoddi4+0x294>
 800056e:	d017      	beq.n	80005a0 <__udivmoddi4+0x290>
 8000570:	b15d      	cbz	r5, 800058a <__udivmoddi4+0x27a>
 8000572:	ebb3 020e 	subs.w	r2, r3, lr
 8000576:	eb67 0701 	sbc.w	r7, r7, r1
 800057a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800057e:	40f2      	lsrs	r2, r6
 8000580:	ea4c 0202 	orr.w	r2, ip, r2
 8000584:	40f7      	lsrs	r7, r6
 8000586:	e9c5 2700 	strd	r2, r7, [r5]
 800058a:	2600      	movs	r6, #0
 800058c:	4631      	mov	r1, r6
 800058e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000592:	462e      	mov	r6, r5
 8000594:	4628      	mov	r0, r5
 8000596:	e70b      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000598:	4606      	mov	r6, r0
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0x60>
 800059c:	4618      	mov	r0, r3
 800059e:	e6fd      	b.n	800039c <__udivmoddi4+0x8c>
 80005a0:	4543      	cmp	r3, r8
 80005a2:	d2e5      	bcs.n	8000570 <__udivmoddi4+0x260>
 80005a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a8:	eb69 0104 	sbc.w	r1, r9, r4
 80005ac:	3801      	subs	r0, #1
 80005ae:	e7df      	b.n	8000570 <__udivmoddi4+0x260>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e7d2      	b.n	800055a <__udivmoddi4+0x24a>
 80005b4:	4660      	mov	r0, ip
 80005b6:	e78d      	b.n	80004d4 <__udivmoddi4+0x1c4>
 80005b8:	4681      	mov	r9, r0
 80005ba:	e7b9      	b.n	8000530 <__udivmoddi4+0x220>
 80005bc:	4666      	mov	r6, ip
 80005be:	e775      	b.n	80004ac <__udivmoddi4+0x19c>
 80005c0:	4630      	mov	r0, r6
 80005c2:	e74a      	b.n	800045a <__udivmoddi4+0x14a>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	4439      	add	r1, r7
 80005ca:	e713      	b.n	80003f4 <__udivmoddi4+0xe4>
 80005cc:	3802      	subs	r0, #2
 80005ce:	443c      	add	r4, r7
 80005d0:	e724      	b.n	800041c <__udivmoddi4+0x10c>
 80005d2:	bf00      	nop

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005d8:	b480      	push	{r7}
 80005da:	b085      	sub	sp, #20
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <vApplicationGetIdleTaskMemory+0x2c>)
 80005e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	4a06      	ldr	r2, [pc, #24]	; (8000608 <vApplicationGetIdleTaskMemory+0x30>)
 80005ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005f6:	bf00      	nop
 80005f8:	3714      	adds	r7, #20
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	2000009c 	.word	0x2000009c
 8000608:	200000f0 	.word	0x200000f0

0800060c <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	4a07      	ldr	r2, [pc, #28]	; (8000638 <vApplicationGetTimerTaskMemory+0x2c>)
 800061c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4a06      	ldr	r2, [pc, #24]	; (800063c <vApplicationGetTimerTaskMemory+0x30>)
 8000622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800062a:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr
 8000638:	200002f0 	.word	0x200002f0
 800063c:	20000344 	.word	0x20000344

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000646:	f001 fa4e 	bl	8001ae6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064a:	f000 f85d 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064e:	f000 fbe3 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000652:	f000 fba7 	bl	8000da4 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000656:	f000 fb45 	bl	8000ce4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 800065a:	f000 f96d 	bl	8000938 <MX_CAN1_Init>
  MX_I2C1_Init();
 800065e:	f000 f9a1 	bl	80009a4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000662:	f000 fa39 	bl	8000ad8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000666:	f000 f8e9 	bl	800083c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 800066a:	f000 fb6b 	bl	8000d44 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800066e:	f000 f9d9 	bl	8000a24 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000672:	f000 fa8b 	bl	8000b8c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000676:	f000 fadf 	bl	8000c38 <MX_TIM4_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 800067a:	4b1d      	ldr	r3, [pc, #116]	; (80006f0 <main+0xb0>)
 800067c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800068e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f008 f824 	bl	80086e2 <osThreadCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	4a15      	ldr	r2, [pc, #84]	; (80006f4 <main+0xb4>)
 800069e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorTask */
  osThreadStaticDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256, SensorTaskBuffer, &SensorTaskControlBlock);
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <main+0xb8>)
 80006a2:	f107 0420 	add.w	r4, r7, #32
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 80006b4:	f107 0320 	add.w	r3, r7, #32
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f008 f811 	bl	80086e2 <osThreadCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a0e      	ldr	r2, [pc, #56]	; (80006fc <main+0xbc>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerTask */
  osThreadStaticDef(ControllerTask, StartControllerTask, osPriorityNormal, 0, 512, ControllerTaskBuffer, &ControllerTaskControlBlock);
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <main+0xc0>)
 80006c8:	1d3c      	adds	r4, r7, #4
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(ControllerTask), NULL);
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f008 f800 	bl	80086e2 <osThreadCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a07      	ldr	r2, [pc, #28]	; (8000704 <main+0xc4>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f007 ffe4 	bl	80086b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0xac>
 80006ee:	bf00      	nop
 80006f0:	08016e64 	.word	0x08016e64
 80006f4:	20004788 	.word	0x20004788
 80006f8:	08016e80 	.word	0x08016e80
 80006fc:	20004784 	.word	0x20004784
 8000700:	08016e9c 	.word	0x08016e9c
 8000704:	200048b0 	.word	0x200048b0

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b0b8      	sub	sp, #224	; 0xe0
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f015 fb62 	bl	8015de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2290      	movs	r2, #144	; 0x90
 8000732:	2100      	movs	r1, #0
 8000734:	4618      	mov	r0, r3
 8000736:	f015 fb53 	bl	8015de0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800073a:	f004 f8bd 	bl	80048b8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800073e:	4b3d      	ldr	r3, [pc, #244]	; (8000834 <SystemClock_Config+0x12c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a3c      	ldr	r2, [pc, #240]	; (8000834 <SystemClock_Config+0x12c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <SystemClock_Config+0x12c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000756:	4b38      	ldr	r3, [pc, #224]	; (8000838 <SystemClock_Config+0x130>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800075e:	4a36      	ldr	r2, [pc, #216]	; (8000838 <SystemClock_Config+0x130>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	4b34      	ldr	r3, [pc, #208]	; (8000838 <SystemClock_Config+0x130>)
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076e:	603b      	str	r3, [r7, #0]
 8000770:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000772:	2301      	movs	r3, #1
 8000774:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000778:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800077c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000780:	2302      	movs	r3, #2
 8000782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000786:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800078a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800078e:	2304      	movs	r3, #4
 8000790:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000794:	2360      	movs	r3, #96	; 0x60
 8000796:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007b0:	4618      	mov	r0, r3
 80007b2:	f004 f8e1 	bl	8004978 <HAL_RCC_OscConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007bc:	f000 fc64 	bl	8001088 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007c0:	f004 f88a 	bl	80048d8 <HAL_PWREx_EnableOverDrive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ca:	f000 fc5d 	bl	8001088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ce:	230f      	movs	r3, #15
 80007d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007f2:	2103      	movs	r1, #3
 80007f4:	4618      	mov	r0, r3
 80007f6:	f004 fb6d 	bl	8004ed4 <HAL_RCC_ClockConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000800:	f000 fc42 	bl	8001088 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 8000804:	f44f 4392 	mov.w	r3, #18688	; 0x4900
 8000808:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800080a:	2300      	movs	r3, #0
 800080c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800080e:	2300      	movs	r3, #0
 8000810:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000812:	2300      	movs	r3, #0
 8000814:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000816:	f107 0308 	add.w	r3, r7, #8
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fd8e 	bl	800533c <HAL_RCCEx_PeriphCLKConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000826:	f000 fc2f 	bl	8001088 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	37e0      	adds	r7, #224	; 0xe0
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800084e:	4b37      	ldr	r3, [pc, #220]	; (800092c <MX_ADC1_Init+0xf0>)
 8000850:	4a37      	ldr	r2, [pc, #220]	; (8000930 <MX_ADC1_Init+0xf4>)
 8000852:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000854:	4b35      	ldr	r3, [pc, #212]	; (800092c <MX_ADC1_Init+0xf0>)
 8000856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800085a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085c:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_ADC1_Init+0xf0>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_ADC1_Init+0xf0>)
 8000864:	2201      	movs	r2, #1
 8000866:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000868:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_ADC1_Init+0xf0>)
 800086a:	2201      	movs	r2, #1
 800086c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086e:	4b2f      	ldr	r3, [pc, #188]	; (800092c <MX_ADC1_Init+0xf0>)
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_ADC1_Init+0xf0>)
 8000878:	2200      	movs	r2, #0
 800087a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_ADC1_Init+0xf0>)
 800087e:	4a2d      	ldr	r2, [pc, #180]	; (8000934 <MX_ADC1_Init+0xf8>)
 8000880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_ADC1_Init+0xf0>)
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000888:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC1_Init+0xf0>)
 800088a:	2204      	movs	r2, #4
 800088c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_ADC1_Init+0xf0>)
 8000890:	2201      	movs	r2, #1
 8000892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000896:	4b25      	ldr	r3, [pc, #148]	; (800092c <MX_ADC1_Init+0xf0>)
 8000898:	2201      	movs	r2, #1
 800089a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089c:	4823      	ldr	r0, [pc, #140]	; (800092c <MX_ADC1_Init+0xf0>)
 800089e:	f001 f973 	bl	8001b88 <HAL_ADC_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008a8:	f000 fbee 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80008ac:	2303      	movs	r3, #3
 80008ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008b0:	2301      	movs	r3, #1
 80008b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80008b4:	2307      	movs	r3, #7
 80008b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b8:	463b      	mov	r3, r7
 80008ba:	4619      	mov	r1, r3
 80008bc:	481b      	ldr	r0, [pc, #108]	; (800092c <MX_ADC1_Init+0xf0>)
 80008be:	f001 f9a7 	bl	8001c10 <HAL_ADC_ConfigChannel>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008c8:	f000 fbde 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80008cc:	2305      	movs	r3, #5
 80008ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008d0:	2302      	movs	r3, #2
 80008d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80008d4:	2305      	movs	r3, #5
 80008d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d8:	463b      	mov	r3, r7
 80008da:	4619      	mov	r1, r3
 80008dc:	4813      	ldr	r0, [pc, #76]	; (800092c <MX_ADC1_Init+0xf0>)
 80008de:	f001 f997 	bl	8001c10 <HAL_ADC_ConfigChannel>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80008e8:	f000 fbce 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80008ec:	2306      	movs	r3, #6
 80008ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008f0:	2303      	movs	r3, #3
 80008f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	4619      	mov	r1, r3
 80008f8:	480c      	ldr	r0, [pc, #48]	; (800092c <MX_ADC1_Init+0xf0>)
 80008fa:	f001 f989 	bl	8001c10 <HAL_ADC_ConfigChannel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000904:	f000 fbc0 	bl	8001088 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000908:	2309      	movs	r3, #9
 800090a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800090c:	2304      	movs	r3, #4
 800090e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_ADC1_Init+0xf0>)
 8000916:	f001 f97b 	bl	8001c10 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000920:	f000 fbb2 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	3710      	adds	r7, #16
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20004a0c 	.word	0x20004a0c
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_CAN1_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_CAN1_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_CAN1_Init+0x64>)
 8000944:	2206      	movs	r2, #6
 8000946:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_CAN1_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_CAN1_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_CAN1_Init+0x64>)
 8000956:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800095a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_CAN1_Init+0x64>)
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_CAN1_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_CAN1_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_CAN1_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_CAN1_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_CAN1_Init+0x64>)
 800097c:	2200      	movs	r2, #0
 800097e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_CAN1_Init+0x64>)
 8000982:	2201      	movs	r2, #1
 8000984:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_CAN1_Init+0x64>)
 8000988:	f001 fb92 	bl	80020b0 <HAL_CAN_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000992:	f000 fb79 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20005824 	.word	0x20005824
 80009a0:	40006400 	.word	0x40006400

080009a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009aa:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <MX_I2C1_Init+0x78>)
 80009ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b0:	4a1b      	ldr	r2, [pc, #108]	; (8000a20 <MX_I2C1_Init+0x7c>)
 80009b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009ba:	4b17      	ldr	r3, [pc, #92]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009bc:	2201      	movs	r2, #1
 80009be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c0:	4b15      	ldr	r3, [pc, #84]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009c6:	4b14      	ldr	r3, [pc, #80]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009cc:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d2:	4b11      	ldr	r3, [pc, #68]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009da:	2200      	movs	r2, #0
 80009dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009de:	480e      	ldr	r0, [pc, #56]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009e0:	f003 fe42 	bl	8004668 <HAL_I2C_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009ea:	f000 fb4d 	bl	8001088 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <MX_I2C1_Init+0x74>)
 80009f2:	f003 fec9 	bl	8004788 <HAL_I2CEx_ConfigAnalogFilter>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009fc:	f000 fb44 	bl	8001088 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a00:	2100      	movs	r1, #0
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_I2C1_Init+0x74>)
 8000a04:	f003 ff0b 	bl	800481e <HAL_I2CEx_ConfigDigitalFilter>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a0e:	f000 fb3b 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200048b4 	.word	0x200048b4
 8000a1c:	40005400 	.word	0x40005400
 8000a20:	20303e5d 	.word	0x20303e5d

08000a24 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b08c      	sub	sp, #48	; 0x30
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2224      	movs	r2, #36	; 0x24
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f015 f9d4 	bl	8015de0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a42:	4b23      	ldr	r3, [pc, #140]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a44:	4a23      	ldr	r2, [pc, #140]	; (8000ad4 <MX_TIM1_Init+0xb0>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a48:	4b21      	ldr	r3, [pc, #132]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a76:	2301      	movs	r3, #1
 8000a78:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a86:	2301      	movs	r3, #1
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000a9a:	f005 f9a9 	bl	8005df0 <HAL_TIM_Encoder_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000aa4:	f000 faf0 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_TIM1_Init+0xac>)
 8000aba:	f005 ff99 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000ac4:	f000 fae0 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	3730      	adds	r7, #48	; 0x30
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20004ab4 	.word	0x20004ab4
 8000ad4:	40010000 	.word	0x40010000

08000ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aea:	463b      	mov	r3, r7
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000afc:	4b21      	ldr	r3, [pc, #132]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000afe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b02:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b0a:	4b1e      	ldr	r3, [pc, #120]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920000;
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b12:	4a1d      	ldr	r2, [pc, #116]	; (8000b88 <MX_TIM2_Init+0xb0>)
 8000b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b16:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000b22:	4818      	ldr	r0, [pc, #96]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b24:	f005 f90c 	bl	8005d40 <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b2e:	f000 faab 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4810      	ldr	r0, [pc, #64]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b42:	f005 ff55 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b4c:	f000 fa9c 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	; 0x60
 8000b52:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	463b      	mov	r3, r7
 8000b62:	220c      	movs	r2, #12
 8000b64:	4619      	mov	r1, r3
 8000b66:	4807      	ldr	r0, [pc, #28]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b68:	f005 fb08 	bl	800617c <HAL_TIM_PWM_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b72:	f000 fa89 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b76:	4803      	ldr	r0, [pc, #12]	; (8000b84 <MX_TIM2_Init+0xac>)
 8000b78:	f000 fcce 	bl	8001518 <HAL_TIM_MspPostInit>

}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	200057d8 	.word	0x200057d8
 8000b88:	001d4c00 	.word	0x001d4c00

08000b8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b08c      	sub	sp, #48	; 0x30
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2224      	movs	r2, #36	; 0x24
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f015 f920 	bl	8015de0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000baa:	4b21      	ldr	r3, [pc, #132]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <MX_TIM3_Init+0xa8>)
 8000bae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be8:	2301      	movs	r3, #1
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480d      	ldr	r0, [pc, #52]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000bfc:	f005 f8f8 	bl	8005df0 <HAL_TIM_Encoder_Init>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000c06:	f000 fa3f 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	; (8000c30 <MX_TIM3_Init+0xa4>)
 8000c18:	f005 feea 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000c22:	f000 fa31 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3730      	adds	r7, #48	; 0x30
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20004960 	.word	0x20004960
 8000c34:	40000400 	.word	0x40000400

08000c38 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	; 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	2224      	movs	r2, #36	; 0x24
 8000c44:	2100      	movs	r1, #0
 8000c46:	4618      	mov	r0, r3
 8000c48:	f015 f8ca 	bl	8015de0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c56:	4b21      	ldr	r3, [pc, #132]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c58:	4a21      	ldr	r2, [pc, #132]	; (8000ce0 <MX_TIM4_Init+0xa8>)
 8000c5a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c5c:	4b1f      	ldr	r3, [pc, #124]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b1a      	ldr	r3, [pc, #104]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c94:	2301      	movs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480d      	ldr	r0, [pc, #52]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000ca8:	f005 f8a2 	bl	8005df0 <HAL_TIM_Encoder_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000cb2:	f000 f9e9 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM4_Init+0xa4>)
 8000cc4:	f005 fe94 	bl	80069f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000cce:	f000 f9db 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3730      	adds	r7, #48	; 0x30
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200047e0 	.word	0x200047e0
 8000ce0:	40000800 	.word	0x40000800

08000ce4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <MX_USART3_UART_Init+0x5c>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cee:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART3_UART_Init+0x58>)
 8000d28:	f005 ff0e 	bl	8006b48 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d32:	f000 f9a9 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	2000482c 	.word	0x2000482c
 8000d40:	40004800 	.word	0x40004800

08000d44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d4a:	4a15      	ldr	r2, [pc, #84]	; (8000da0 <MX_USART6_UART_Init+0x5c>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b0b      	ldr	r3, [pc, #44]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_USART6_UART_Init+0x58>)
 8000d88:	f005 fede 	bl	8006b48 <HAL_UART_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000d92:	f000 f979 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20005300 	.word	0x20005300
 8000da0:	40011400 	.word	0x40011400

08000da4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000daa:	4b1a      	ldr	r3, [pc, #104]	; (8000e14 <MX_DMA_Init+0x70>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a19      	ldr	r2, [pc, #100]	; (8000e14 <MX_DMA_Init+0x70>)
 8000db0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b17      	ldr	r3, [pc, #92]	; (8000e14 <MX_DMA_Init+0x70>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dc2:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <MX_DMA_Init+0x70>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a13      	ldr	r2, [pc, #76]	; (8000e14 <MX_DMA_Init+0x70>)
 8000dc8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_DMA_Init+0x70>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2105      	movs	r1, #5
 8000dde:	200e      	movs	r0, #14
 8000de0:	f001 fd52 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000de4:	200e      	movs	r0, #14
 8000de6:	f001 fd6b 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000dea:	2200      	movs	r2, #0
 8000dec:	2105      	movs	r1, #5
 8000dee:	2038      	movs	r0, #56	; 0x38
 8000df0:	f001 fd4a 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000df4:	2038      	movs	r0, #56	; 0x38
 8000df6:	f001 fd63 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	2105      	movs	r1, #5
 8000dfe:	2045      	movs	r0, #69	; 0x45
 8000e00:	f001 fd42 	bl	8002888 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e04:	2045      	movs	r0, #69	; 0x45
 8000e06:	f001 fd5b 	bl	80028c0 <HAL_NVIC_EnableIRQ>

}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2e:	4b79      	ldr	r3, [pc, #484]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a78      	ldr	r2, [pc, #480]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e34:	f043 0310 	orr.w	r3, r3, #16
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b76      	ldr	r3, [pc, #472]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0310 	and.w	r3, r3, #16
 8000e42:	623b      	str	r3, [r7, #32]
 8000e44:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e46:	4b73      	ldr	r3, [pc, #460]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a72      	ldr	r2, [pc, #456]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b70      	ldr	r3, [pc, #448]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	61fb      	str	r3, [r7, #28]
 8000e5c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e5e:	4b6d      	ldr	r3, [pc, #436]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	4a6c      	ldr	r2, [pc, #432]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e64:	f043 0320 	orr.w	r3, r3, #32
 8000e68:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6a:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	f003 0320 	and.w	r3, r3, #32
 8000e72:	61bb      	str	r3, [r7, #24]
 8000e74:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e76:	4b67      	ldr	r3, [pc, #412]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	4a66      	ldr	r2, [pc, #408]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e80:	6313      	str	r3, [r2, #48]	; 0x30
 8000e82:	4b64      	ldr	r3, [pc, #400]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8e:	4b61      	ldr	r3, [pc, #388]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	4a60      	ldr	r2, [pc, #384]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9a:	4b5e      	ldr	r3, [pc, #376]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ea6:	4b5b      	ldr	r3, [pc, #364]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	4a5a      	ldr	r2, [pc, #360]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000eac:	f043 0302 	orr.w	r3, r3, #2
 8000eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb2:	4b58      	ldr	r3, [pc, #352]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	f003 0302 	and.w	r3, r3, #2
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebe:	4b55      	ldr	r3, [pc, #340]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a54      	ldr	r2, [pc, #336]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b52      	ldr	r3, [pc, #328]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed6:	4b4f      	ldr	r3, [pc, #316]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a4e      	ldr	r2, [pc, #312]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000edc:	f043 0308 	orr.w	r3, r3, #8
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b4c      	ldr	r3, [pc, #304]	; (8001014 <MX_GPIO_Init+0x1fc>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0308 	and.w	r3, r3, #8
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000ef4:	4848      	ldr	r0, [pc, #288]	; (8001018 <MX_GPIO_Init+0x200>)
 8000ef6:	f003 fb9d 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000efa:	2200      	movs	r2, #0
 8000efc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000f00:	4846      	ldr	r0, [pc, #280]	; (800101c <MX_GPIO_Init+0x204>)
 8000f02:	f003 fb97 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000f06:	2200      	movs	r2, #0
 8000f08:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000f0c:	4844      	ldr	r0, [pc, #272]	; (8001020 <MX_GPIO_Init+0x208>)
 8000f0e:	f003 fb91 	bl	8004634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Limit4_Pin Limit5_Pin Limit2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = Limit4_Pin|Limit5_Pin|Limit2_Pin|BUTTON1_Pin;
 8000f12:	f240 4334 	movw	r3, #1076	; 0x434
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	483f      	ldr	r0, [pc, #252]	; (8001024 <MX_GPIO_Init+0x20c>)
 8000f28:	f003 f9d8 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000f2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f32:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4839      	ldr	r0, [pc, #228]	; (8001028 <MX_GPIO_Init+0x210>)
 8000f44:	f003 f9ca 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit3_Pin */
  GPIO_InitStruct.Pin = Limit3_Pin;
 8000f48:	2304      	movs	r3, #4
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Limit3_GPIO_Port, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4830      	ldr	r0, [pc, #192]	; (800101c <MX_GPIO_Init+0x204>)
 8000f5c:	f003 f9be 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000f60:	f244 0381 	movw	r3, #16513	; 0x4081
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f66:	2301      	movs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f76:	4619      	mov	r1, r3
 8000f78:	4827      	ldr	r0, [pc, #156]	; (8001018 <MX_GPIO_Init+0x200>)
 8000f7a:	f003 f9af 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8000f7e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f84:	2301      	movs	r3, #1
 8000f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f94:	4619      	mov	r1, r3
 8000f96:	4821      	ldr	r0, [pc, #132]	; (800101c <MX_GPIO_Init+0x204>)
 8000f98:	f003 f9a0 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit1_Pin Limit4G2_Pin Limit5G3_Pin BUTTON2_Pin
                           USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Limit1_Pin|Limit4G2_Pin|Limit5G3_Pin|BUTTON2_Pin
 8000f9c:	239e      	movs	r3, #158	; 0x9e
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
                          |USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	481c      	ldr	r0, [pc, #112]	; (8001020 <MX_GPIO_Init+0x208>)
 8000fb0:	f003 f994 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pin : Laser_Pin */
  GPIO_InitStruct.Pin = Laser_Pin;
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Laser_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4817      	ldr	r0, [pc, #92]	; (8001024 <MX_GPIO_Init+0x20c>)
 8000fc8:	f003 f988 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin USB_PowerSwitchOn_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin;
 8000fcc:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480e      	ldr	r0, [pc, #56]	; (8001020 <MX_GPIO_Init+0x208>)
 8000fe6:	f003 f979 	bl	80042dc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ffc:	230a      	movs	r3, #10
 8000ffe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001000:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001004:	4619      	mov	r1, r3
 8001006:	4809      	ldr	r0, [pc, #36]	; (800102c <MX_GPIO_Init+0x214>)
 8001008:	f003 f968 	bl	80042dc <HAL_GPIO_Init>

}
 800100c:	bf00      	nop
 800100e:	3738      	adds	r7, #56	; 0x38
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40021400 	.word	0x40021400
 8001020:	40021800 	.word	0x40021800
 8001024:	40021000 	.word	0x40021000
 8001028:	40020800 	.word	0x40020800
 800102c:	40020000 	.word	0x40020000

08001030 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001038:	f006 fd92 	bl	8007b60 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f007 fb9c 	bl	800877a <osDelay>
 8001042:	e7fb      	b.n	800103c <StartDefaultTask+0xc>

08001044 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800104c:	2001      	movs	r0, #1
 800104e:	f007 fb94 	bl	800877a <osDelay>
 8001052:	e7fb      	b.n	800104c <StartSensorTask+0x8>

08001054 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800105c:	2001      	movs	r0, #1
 800105e:	f007 fb8c 	bl	800877a <osDelay>
 8001062:	e7fb      	b.n	800105c <StartControllerTask+0x8>

08001064 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001076:	f000 fd43 	bl	8001b00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800107a:	bf00      	nop
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40001c00 	.word	0x40001c00

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <HAL_MspInit+0x4c>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	6413      	str	r3, [r2, #64]	; 0x40
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b2:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <HAL_MspInit+0x4c>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	4a0a      	ldr	r2, [pc, #40]	; (80010e0 <HAL_MspInit+0x4c>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6453      	str	r3, [r2, #68]	; 0x44
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	210f      	movs	r1, #15
 80010ce:	f06f 0001 	mvn.w	r0, #1
 80010d2:	f001 fbd9 	bl	8002888 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a39      	ldr	r2, [pc, #228]	; (80011e8 <HAL_ADC_MspInit+0x104>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d16c      	bne.n	80011e0 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	4b39      	ldr	r3, [pc, #228]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a38      	ldr	r2, [pc, #224]	; (80011ec <HAL_ADC_MspInit+0x108>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b36      	ldr	r3, [pc, #216]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	4b33      	ldr	r3, [pc, #204]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a32      	ldr	r2, [pc, #200]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b30      	ldr	r3, [pc, #192]	; (80011ec <HAL_ADC_MspInit+0x108>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001136:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	4a2c      	ldr	r2, [pc, #176]	; (80011ec <HAL_ADC_MspInit+0x108>)
 800113c:	f043 0302 	orr.w	r3, r3, #2
 8001140:	6313      	str	r3, [r2, #48]	; 0x30
 8001142:	4b2a      	ldr	r3, [pc, #168]	; (80011ec <HAL_ADC_MspInit+0x108>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	f003 0302 	and.w	r3, r3, #2
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800114e:	2368      	movs	r3, #104	; 0x68
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001152:	2303      	movs	r3, #3
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	4823      	ldr	r0, [pc, #140]	; (80011f0 <HAL_ADC_MspInit+0x10c>)
 8001162:	f003 f8bb 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800116a:	2303      	movs	r3, #3
 800116c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	481e      	ldr	r0, [pc, #120]	; (80011f4 <HAL_ADC_MspInit+0x110>)
 800117a:	f003 f8af 	bl	80042dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001180:	4a1e      	ldr	r2, [pc, #120]	; (80011fc <HAL_ADC_MspInit+0x118>)
 8001182:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001184:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 8001198:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800119e:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011a4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011ac:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011ae:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011b4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011bc:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011c6:	f001 fb89 	bl	80028dc <HAL_DMA_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80011d0:	f7ff ff5a 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a08      	ldr	r2, [pc, #32]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011d8:	639a      	str	r2, [r3, #56]	; 0x38
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_ADC_MspInit+0x114>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011e0:	bf00      	nop
 80011e2:	3728      	adds	r7, #40	; 0x28
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40012000 	.word	0x40012000
 80011ec:	40023800 	.word	0x40023800
 80011f0:	40020000 	.word	0x40020000
 80011f4:	40020400 	.word	0x40020400
 80011f8:	20004a54 	.word	0x20004a54
 80011fc:	40026410 	.word	0x40026410

08001200 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a23      	ldr	r2, [pc, #140]	; (80012ac <HAL_CAN_MspInit+0xac>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d13f      	bne.n	80012a2 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 8001228:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	613b      	str	r3, [r7, #16]
 8001238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a1c      	ldr	r2, [pc, #112]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 8001240:	f043 0308 	orr.w	r3, r3, #8
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_CAN_MspInit+0xb0>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0308 	and.w	r3, r3, #8
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001252:	2303      	movs	r3, #3
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001262:	2309      	movs	r3, #9
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	4811      	ldr	r0, [pc, #68]	; (80012b4 <HAL_CAN_MspInit+0xb4>)
 800126e:	f003 f835 	bl	80042dc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2013      	movs	r0, #19
 8001278:	f001 fb06 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800127c:	2013      	movs	r0, #19
 800127e:	f001 fb1f 	bl	80028c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2014      	movs	r0, #20
 8001288:	f001 fafe 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800128c:	2014      	movs	r0, #20
 800128e:	f001 fb17 	bl	80028c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2015      	movs	r0, #21
 8001298:	f001 faf6 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800129c:	2015      	movs	r0, #21
 800129e:	f001 fb0f 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40006400 	.word	0x40006400
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020c00 	.word	0x40020c00

080012b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_I2C_MspInit+0x7c>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d128      	bne.n	800132c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_I2C_MspInit+0x80>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a16      	ldr	r2, [pc, #88]	; (8001338 <HAL_I2C_MspInit+0x80>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_I2C_MspInit+0x80>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001304:	2304      	movs	r3, #4
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_I2C_MspInit+0x84>)
 8001310:	f002 ffe4 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <HAL_I2C_MspInit+0x80>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	4a07      	ldr	r2, [pc, #28]	; (8001338 <HAL_I2C_MspInit+0x80>)
 800131a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800131e:	6413      	str	r3, [r2, #64]	; 0x40
 8001320:	4b05      	ldr	r3, [pc, #20]	; (8001338 <HAL_I2C_MspInit+0x80>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800132c:	bf00      	nop
 800132e:	3728      	adds	r7, #40	; 0x28
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40005400 	.word	0x40005400
 8001338:	40023800 	.word	0x40023800
 800133c:	40020400 	.word	0x40020400

08001340 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a46      	ldr	r2, [pc, #280]	; (8001478 <HAL_TIM_Encoder_MspInit+0x138>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d129      	bne.n	80013b6 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001362:	4b46      	ldr	r3, [pc, #280]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a45      	ldr	r2, [pc, #276]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001368:	f043 0301 	orr.w	r3, r3, #1
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b43      	ldr	r3, [pc, #268]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800137a:	4b40      	ldr	r3, [pc, #256]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a3f      	ldr	r2, [pc, #252]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	61fb      	str	r3, [r7, #28]
 8001390:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001392:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013a4:	2301      	movs	r3, #1
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ac:	4619      	mov	r1, r3
 80013ae:	4834      	ldr	r0, [pc, #208]	; (8001480 <HAL_TIM_Encoder_MspInit+0x140>)
 80013b0:	f002 ff94 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013b4:	e05b      	b.n	800146e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a32      	ldr	r2, [pc, #200]	; (8001484 <HAL_TIM_Encoder_MspInit+0x144>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d128      	bne.n	8001412 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c0:	4b2e      	ldr	r3, [pc, #184]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013c6:	f043 0302 	orr.w	r3, r3, #2
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	61bb      	str	r3, [r7, #24]
 80013d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	6313      	str	r3, [r2, #48]	; 0x30
 80013e4:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 80013f0:	2330      	movs	r3, #48	; 0x30
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2302      	movs	r3, #2
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fc:	2300      	movs	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001400:	2302      	movs	r3, #2
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001404:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001408:	4619      	mov	r1, r3
 800140a:	481f      	ldr	r0, [pc, #124]	; (8001488 <HAL_TIM_Encoder_MspInit+0x148>)
 800140c:	f002 ff66 	bl	80042dc <HAL_GPIO_Init>
}
 8001410:	e02d      	b.n	800146e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_TIM_Encoder_MspInit+0x14c>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d128      	bne.n	800146e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800141c:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001422:	f043 0304 	orr.w	r3, r3, #4
 8001426:	6413      	str	r3, [r2, #64]	; 0x40
 8001428:	4b14      	ldr	r3, [pc, #80]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	613b      	str	r3, [r7, #16]
 8001432:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	4a10      	ldr	r2, [pc, #64]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 800143a:	f043 0308 	orr.w	r3, r3, #8
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	4b0e      	ldr	r3, [pc, #56]	; (800147c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001444:	f003 0308 	and.w	r3, r3, #8
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 800144c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001452:	2302      	movs	r3, #2
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2300      	movs	r3, #0
 800145c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800145e:	2302      	movs	r3, #2
 8001460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001466:	4619      	mov	r1, r3
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <HAL_TIM_Encoder_MspInit+0x150>)
 800146a:	f002 ff37 	bl	80042dc <HAL_GPIO_Init>
}
 800146e:	bf00      	nop
 8001470:	3738      	adds	r7, #56	; 0x38
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40010000 	.word	0x40010000
 800147c:	40023800 	.word	0x40023800
 8001480:	40021000 	.word	0x40021000
 8001484:	40000400 	.word	0x40000400
 8001488:	40020400 	.word	0x40020400
 800148c:	40000800 	.word	0x40000800
 8001490:	40020c00 	.word	0x40020c00

08001494 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d127      	bne.n	8001506 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6413      	str	r3, [r2, #64]	; 0x40
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a0f      	ldr	r2, [pc, #60]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_PWM_MspInit+0x7c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ea:	2302      	movs	r3, #2
 80014ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ee:	2300      	movs	r3, #0
 80014f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f2:	2300      	movs	r3, #0
 80014f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014f6:	2301      	movs	r3, #1
 80014f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <HAL_TIM_PWM_MspInit+0x80>)
 8001502:	f002 feeb 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020000 	.word	0x40020000

08001518 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 030c 	add.w	r3, r7, #12
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001538:	d11c      	bne.n	8001574 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <HAL_TIM_MspPostInit+0x64>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a0f      	ldr	r2, [pc, #60]	; (800157c <HAL_TIM_MspPostInit+0x64>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <HAL_TIM_MspPostInit+0x64>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ESC_Pin;
 8001552:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001556:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001564:	2301      	movs	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4619      	mov	r1, r3
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <HAL_TIM_MspPostInit+0x68>)
 8001570:	f002 feb4 	bl	80042dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40020400 	.word	0x40020400

08001584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	; 0x30
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a61      	ldr	r2, [pc, #388]	; (8001728 <HAL_UART_MspInit+0x1a4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d15f      	bne.n	8001666 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015a6:	4b61      	ldr	r3, [pc, #388]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a60      	ldr	r2, [pc, #384]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b5e      	ldr	r3, [pc, #376]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ba:	61bb      	str	r3, [r7, #24]
 80015bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015be:	4b5b      	ldr	r3, [pc, #364]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a5a      	ldr	r2, [pc, #360]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_UART_MspInit+0x1a8>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015dc:	2302      	movs	r3, #2
 80015de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015e8:	2307      	movs	r3, #7
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ec:	f107 031c 	add.w	r3, r7, #28
 80015f0:	4619      	mov	r1, r3
 80015f2:	484f      	ldr	r0, [pc, #316]	; (8001730 <HAL_UART_MspInit+0x1ac>)
 80015f4:	f002 fe72 	bl	80042dc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80015f8:	4b4e      	ldr	r3, [pc, #312]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 80015fa:	4a4f      	ldr	r2, [pc, #316]	; (8001738 <HAL_UART_MspInit+0x1b4>)
 80015fc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80015fe:	4b4d      	ldr	r3, [pc, #308]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001600:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001604:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001606:	4b4b      	ldr	r3, [pc, #300]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800160c:	4b49      	ldr	r3, [pc, #292]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 800160e:	2200      	movs	r2, #0
 8001610:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001612:	4b48      	ldr	r3, [pc, #288]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001614:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001618:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800161a:	4b46      	ldr	r3, [pc, #280]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 800161c:	2200      	movs	r2, #0
 800161e:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001620:	4b44      	ldr	r3, [pc, #272]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001622:	2200      	movs	r2, #0
 8001624:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001628:	2200      	movs	r2, #0
 800162a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800162c:	4b41      	ldr	r3, [pc, #260]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 800162e:	2200      	movs	r2, #0
 8001630:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001632:	4b40      	ldr	r3, [pc, #256]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001634:	2200      	movs	r2, #0
 8001636:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001638:	483e      	ldr	r0, [pc, #248]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 800163a:	f001 f94f 	bl	80028dc <HAL_DMA_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001644:	f7ff fd20 	bl	8001088 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a3a      	ldr	r2, [pc, #232]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 800164c:	66da      	str	r2, [r3, #108]	; 0x6c
 800164e:	4a39      	ldr	r2, [pc, #228]	; (8001734 <HAL_UART_MspInit+0x1b0>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2105      	movs	r1, #5
 8001658:	2027      	movs	r0, #39	; 0x27
 800165a:	f001 f915 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800165e:	2027      	movs	r0, #39	; 0x27
 8001660:	f001 f92e 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001664:	e05b      	b.n	800171e <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART6)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a34      	ldr	r2, [pc, #208]	; (800173c <HAL_UART_MspInit+0x1b8>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d156      	bne.n	800171e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <HAL_UART_MspInit+0x1a8>)
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	4a2d      	ldr	r2, [pc, #180]	; (800172c <HAL_UART_MspInit+0x1a8>)
 8001676:	f043 0320 	orr.w	r3, r3, #32
 800167a:	6453      	str	r3, [r2, #68]	; 0x44
 800167c:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_UART_MspInit+0x1a8>)
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 0320 	and.w	r3, r3, #32
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <HAL_UART_MspInit+0x1a8>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a27      	ldr	r2, [pc, #156]	; (800172c <HAL_UART_MspInit+0x1a8>)
 800168e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <HAL_UART_MspInit+0x1a8>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80016a0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a6:	2302      	movs	r3, #2
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ae:	2303      	movs	r3, #3
 80016b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80016b2:	2308      	movs	r3, #8
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4820      	ldr	r0, [pc, #128]	; (8001740 <HAL_UART_MspInit+0x1bc>)
 80016be:	f002 fe0d 	bl	80042dc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016c4:	4a20      	ldr	r2, [pc, #128]	; (8001748 <HAL_UART_MspInit+0x1c4>)
 80016c6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80016c8:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016ca:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80016ce:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016d2:	2240      	movs	r2, #64	; 0x40
 80016d4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016d8:	2200      	movs	r2, #0
 80016da:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016dc:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016e2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e4:	4b17      	ldr	r3, [pc, #92]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ea:	4b16      	ldr	r3, [pc, #88]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001702:	4810      	ldr	r0, [pc, #64]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 8001704:	f001 f8ea 	bl	80028dc <HAL_DMA_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800170e:	f7ff fcbb 	bl	8001088 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 8001716:	66da      	str	r2, [r3, #108]	; 0x6c
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <HAL_UART_MspInit+0x1c0>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800171e:	bf00      	nop
 8001720:	3730      	adds	r7, #48	; 0x30
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40004800 	.word	0x40004800
 800172c:	40023800 	.word	0x40023800
 8001730:	40020c00 	.word	0x40020c00
 8001734:	20004900 	.word	0x20004900
 8001738:	40026058 	.word	0x40026058
 800173c:	40011400 	.word	0x40011400
 8001740:	40021800 	.word	0x40021800
 8001744:	200049ac 	.word	0x200049ac
 8001748:	400264a0 	.word	0x400264a0

0800174c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001758:	2300      	movs	r3, #0
 800175a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	202c      	movs	r0, #44	; 0x2c
 8001762:	f001 f891 	bl	8002888 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001766:	202c      	movs	r0, #44	; 0x2c
 8001768:	f001 f8aa 	bl	80028c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 800176c:	4b1f      	ldr	r3, [pc, #124]	; (80017ec <HAL_InitTick+0xa0>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <HAL_InitTick+0xa0>)
 8001772:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b1c      	ldr	r3, [pc, #112]	; (80017ec <HAL_InitTick+0xa0>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001784:	f107 0210 	add.w	r2, r7, #16
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4611      	mov	r1, r2
 800178e:	4618      	mov	r0, r3
 8001790:	f003 fda2 	bl	80052d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001794:	f003 fd78 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8001798:	4603      	mov	r3, r0
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <HAL_InitTick+0xa4>)
 80017a2:	fba2 2303 	umull	r2, r3, r2, r3
 80017a6:	0c9b      	lsrs	r3, r3, #18
 80017a8:	3b01      	subs	r3, #1
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_InitTick+0xa8>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <HAL_InitTick+0xac>)
 80017b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <HAL_InitTick+0xa8>)
 80017b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017b8:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 80017ba:	4a0e      	ldr	r2, [pc, #56]	; (80017f4 <HAL_InitTick+0xa8>)
 80017bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017be:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 80017c0:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <HAL_InitTick+0xa8>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c6:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_InitTick+0xa8>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 80017cc:	4809      	ldr	r0, [pc, #36]	; (80017f4 <HAL_InitTick+0xa8>)
 80017ce:	f004 f9dd 	bl	8005b8c <HAL_TIM_Base_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d104      	bne.n	80017e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 80017d8:	4806      	ldr	r0, [pc, #24]	; (80017f4 <HAL_InitTick+0xa8>)
 80017da:	f004 fa39 	bl	8005c50 <HAL_TIM_Base_Start_IT>
 80017de:	4603      	mov	r3, r0
 80017e0:	e000      	b.n	80017e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3730      	adds	r7, #48	; 0x30
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40023800 	.word	0x40023800
 80017f0:	431bde83 	.word	0x431bde83
 80017f4:	2000604c 	.word	0x2000604c
 80017f8:	40001c00 	.word	0x40001c00

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800182c:	4802      	ldr	r0, [pc, #8]	; (8001838 <DMA1_Stream3_IRQHandler+0x10>)
 800182e:	f001 f995 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20004900 	.word	0x20004900

0800183c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001840:	4802      	ldr	r0, [pc, #8]	; (800184c <CAN1_TX_IRQHandler+0x10>)
 8001842:	f000 fd30 	bl	80022a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20005824 	.word	0x20005824

08001850 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001854:	4802      	ldr	r0, [pc, #8]	; (8001860 <CAN1_RX0_IRQHandler+0x10>)
 8001856:	f000 fd26 	bl	80022a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	20005824 	.word	0x20005824

08001864 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001868:	4802      	ldr	r0, [pc, #8]	; (8001874 <CAN1_RX1_IRQHandler+0x10>)
 800186a:	f000 fd1c 	bl	80022a6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20005824 	.word	0x20005824

08001878 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800187c:	4802      	ldr	r0, [pc, #8]	; (8001888 <USART3_IRQHandler+0x10>)
 800187e:	f005 f9b1 	bl	8006be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000482c 	.word	0x2000482c

0800188c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001892:	f004 fb53 	bl	8005f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000604c 	.word	0x2000604c

080018a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA2_Stream0_IRQHandler+0x10>)
 80018a6:	f001 f959 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20004a54 	.word	0x20004a54

080018b4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <ETH_IRQHandler+0x10>)
 80018ba:	f001 ff6d 	bl	8003798 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	200079c0 	.word	0x200079c0

080018c8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA2_Stream6_IRQHandler+0x10>)
 80018ce:	f001 f945 	bl	8002b5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200049ac 	.word	0x200049ac

080018dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
	return 1;
 80018e0:	2301      	movs	r3, #1
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_kill>:

int _kill(int pid, int sig)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018f6:	4b05      	ldr	r3, [pc, #20]	; (800190c <_kill+0x20>)
 80018f8:	2216      	movs	r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
	return -1;
 80018fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr
 800190c:	2000c94c 	.word	0x2000c94c

08001910 <_exit>:

void _exit (int status)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001918:	f04f 31ff 	mov.w	r1, #4294967295
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f7ff ffe5 	bl	80018ec <_kill>
	while (1) {}		/* Make sure we hang here */
 8001922:	e7fe      	b.n	8001922 <_exit+0x12>

08001924 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001930:	2300      	movs	r3, #0
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e00a      	b.n	800194c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001936:	f3af 8000 	nop.w
 800193a:	4601      	mov	r1, r0
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	60ba      	str	r2, [r7, #8]
 8001942:	b2ca      	uxtb	r2, r1
 8001944:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	3301      	adds	r3, #1
 800194a:	617b      	str	r3, [r7, #20]
 800194c:	697a      	ldr	r2, [r7, #20]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	429a      	cmp	r2, r3
 8001952:	dbf0      	blt.n	8001936 <_read+0x12>
	}

return len;
 8001954:	687b      	ldr	r3, [r7, #4]
}
 8001956:	4618      	mov	r0, r3
 8001958:	3718      	adds	r7, #24
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e009      	b.n	8001984 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	1c5a      	adds	r2, r3, #1
 8001974:	60ba      	str	r2, [r7, #8]
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf1      	blt.n	8001970 <_write+0x12>
	}
	return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_close>:

int _close(int file)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
	return -1;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b083      	sub	sp, #12
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
 80019b6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019be:	605a      	str	r2, [r3, #4]
	return 0;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr

080019ce <_isatty>:

int _isatty(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
	return 1;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	60f8      	str	r0, [r7, #12]
 80019ec:	60b9      	str	r1, [r7, #8]
 80019ee:	607a      	str	r2, [r7, #4]
	return 0;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b087      	sub	sp, #28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a08:	4a14      	ldr	r2, [pc, #80]	; (8001a5c <_sbrk+0x5c>)
 8001a0a:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <_sbrk+0x60>)
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a14:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <_sbrk+0x64>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d102      	bne.n	8001a22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <_sbrk+0x64>)
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <_sbrk+0x68>)
 8001a20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a22:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <_sbrk+0x64>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4413      	add	r3, r2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d205      	bcs.n	8001a3c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <_sbrk+0x6c>)
 8001a32:	220c      	movs	r2, #12
 8001a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a36:	f04f 33ff 	mov.w	r3, #4294967295
 8001a3a:	e009      	b.n	8001a50 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a3c:	4b09      	ldr	r3, [pc, #36]	; (8001a64 <_sbrk+0x64>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a42:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <_sbrk+0x64>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a06      	ldr	r2, [pc, #24]	; (8001a64 <_sbrk+0x64>)
 8001a4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	371c      	adds	r7, #28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	20080000 	.word	0x20080000
 8001a60:	00000400 	.word	0x00000400
 8001a64:	20000744 	.word	0x20000744
 8001a68:	2000c960 	.word	0x2000c960
 8001a6c:	2000c94c 	.word	0x2000c94c

08001a70 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001abe:	f7ff ffd7 	bl	8001a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f014 f94d 	bl	8015d60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7fe fdbb 	bl	8000640 <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ad8:	08019c9c 	.word	0x08019c9c
  ldr r2, =_sbss
 8001adc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ae0:	2000c960 	.word	0x2000c960

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>

08001ae6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aea:	2003      	movs	r0, #3
 8001aec:	f000 fec1 	bl	8002872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001af0:	200f      	movs	r0, #15
 8001af2:	f7ff fe2b 	bl	800174c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001af6:	f7ff facd 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b04:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_IncTick+0x20>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	461a      	mov	r2, r3
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x24>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4413      	add	r3, r2
 8001b10:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <HAL_IncTick+0x24>)
 8001b12:	6013      	str	r3, [r2, #0]
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20006098 	.word	0x20006098

08001b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <HAL_GetTick+0x14>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	20006098 	.word	0x20006098

08001b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b48:	f7ff ffee 	bl	8001b28 <HAL_GetTick>
 8001b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b58:	d005      	beq.n	8001b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_Delay+0x44>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffde 	bl	8001b28 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d8f7      	bhi.n	8001b68 <HAL_Delay+0x28>
  {
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	3710      	adds	r7, #16
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e031      	b.n	8001c02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f7ff fa9c 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f003 0310 	and.w	r3, r3, #16
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d116      	bne.n	8001bf4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <HAL_ADC_Init+0x84>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	f043 0202 	orr.w	r2, r3, #2
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f000 f970 	bl	8001ebc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	f023 0303 	bic.w	r3, r3, #3
 8001bea:	f043 0201 	orr.w	r2, r3, #1
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf2:	e001      	b.n	8001bf8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	ffffeefd 	.word	0xffffeefd

08001c10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d101      	bne.n	8001c2c <HAL_ADC_ConfigChannel+0x1c>
 8001c28:	2302      	movs	r3, #2
 8001c2a:	e136      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x28a>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	d93a      	bls.n	8001cb2 <HAL_ADC_ConfigChannel+0xa2>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c44:	d035      	beq.n	8001cb2 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	4613      	mov	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	4413      	add	r3, r2
 8001c5a:	3b1e      	subs	r3, #30
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43da      	mvns	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	400a      	ands	r2, r1
 8001c6a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a8d      	ldr	r2, [pc, #564]	; (8001ea8 <HAL_ADC_ConfigChannel+0x298>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10a      	bne.n	8001c8c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68d9      	ldr	r1, [r3, #12]
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	061a      	lsls	r2, r3, #24
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c8a:	e035      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68d9      	ldr	r1, [r3, #12]
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689a      	ldr	r2, [r3, #8]
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4403      	add	r3, r0
 8001ca4:	3b1e      	subs	r3, #30
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb0:	e022      	b.n	8001cf8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6919      	ldr	r1, [r3, #16]
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	2207      	movs	r2, #7
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43da      	mvns	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	400a      	ands	r2, r1
 8001cd4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6919      	ldr	r1, [r3, #16]
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	4603      	mov	r3, r0
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	4403      	add	r3, r0
 8001cee:	409a      	lsls	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2b06      	cmp	r3, #6
 8001cfe:	d824      	bhi.n	8001d4a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685a      	ldr	r2, [r3, #4]
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	4413      	add	r3, r2
 8001d10:	3b05      	subs	r3, #5
 8001d12:	221f      	movs	r2, #31
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	400a      	ands	r2, r1
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4618      	mov	r0, r3
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685a      	ldr	r2, [r3, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	4413      	add	r3, r2
 8001d3a:	3b05      	subs	r3, #5
 8001d3c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	430a      	orrs	r2, r1
 8001d46:	635a      	str	r2, [r3, #52]	; 0x34
 8001d48:	e04c      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d824      	bhi.n	8001d9c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	3b23      	subs	r3, #35	; 0x23
 8001d64:	221f      	movs	r2, #31
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	400a      	ands	r2, r1
 8001d72:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	4613      	mov	r3, r2
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	3b23      	subs	r3, #35	; 0x23
 8001d8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	430a      	orrs	r2, r1
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
 8001d9a:	e023      	b.n	8001de4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b41      	subs	r3, #65	; 0x41
 8001dae:	221f      	movs	r2, #31
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43da      	mvns	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	400a      	ands	r2, r1
 8001dbc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	3b41      	subs	r3, #65	; 0x41
 8001dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a30      	ldr	r2, [pc, #192]	; (8001eac <HAL_ADC_ConfigChannel+0x29c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1f4>
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df6:	d105      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a2c      	ldr	r2, [pc, #176]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001dfe:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e02:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a28      	ldr	r2, [pc, #160]	; (8001eac <HAL_ADC_ConfigChannel+0x29c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d10f      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x21e>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b12      	cmp	r3, #18
 8001e14:	d10b      	bne.n	8001e2e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e16:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e20:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e22:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e28:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e2c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_ADC_ConfigChannel+0x29c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d12b      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x280>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1a      	ldr	r2, [pc, #104]	; (8001ea8 <HAL_ADC_ConfigChannel+0x298>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d003      	beq.n	8001e4a <HAL_ADC_ConfigChannel+0x23a>
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b11      	cmp	r3, #17
 8001e48:	d122      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a18      	ldr	r2, [pc, #96]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e50:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e54:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <HAL_ADC_ConfigChannel+0x2a0>)
 8001e5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e60:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_ADC_ConfigChannel+0x298>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d111      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e6c:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a11      	ldr	r2, [pc, #68]	; (8001eb8 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0c9a      	lsrs	r2, r3, #18
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e82:	e002      	b.n	8001e8a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f9      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3714      	adds	r7, #20
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	10000012 	.word	0x10000012
 8001eac:	40012000 	.word	0x40012000
 8001eb0:	40012300 	.word	0x40012300
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	431bde83 	.word	0x431bde83

08001ebc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ec4:	4b78      	ldr	r3, [pc, #480]	; (80020a8 <ADC_Init+0x1ec>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a77      	ldr	r2, [pc, #476]	; (80020a8 <ADC_Init+0x1ec>)
 8001eca:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001ece:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001ed0:	4b75      	ldr	r3, [pc, #468]	; (80020a8 <ADC_Init+0x1ec>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4973      	ldr	r1, [pc, #460]	; (80020a8 <ADC_Init+0x1ec>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6859      	ldr	r1, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	021a      	lsls	r2, r3, #8
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	6859      	ldr	r1, [r3, #4]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	430a      	orrs	r2, r1
 8001f22:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	689a      	ldr	r2, [r3, #8]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f32:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6899      	ldr	r1, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4a:	4a58      	ldr	r2, [pc, #352]	; (80020ac <ADC_Init+0x1f0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d022      	beq.n	8001f96 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f5e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	689a      	ldr	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	6899      	ldr	r1, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e00f      	b.n	8001fb6 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fb4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 0202 	bic.w	r2, r2, #2
 8001fc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6899      	ldr	r1, [r3, #8]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	005a      	lsls	r2, r3, #1
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d01b      	beq.n	800201c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	685a      	ldr	r2, [r3, #4]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ff2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002002:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	3b01      	subs	r3, #1
 8002010:	035a      	lsls	r2, r3, #13
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	e007      	b.n	800202c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	685a      	ldr	r2, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800203a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	3b01      	subs	r3, #1
 8002048:	051a      	lsls	r2, r3, #20
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002060:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6899      	ldr	r1, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800206e:	025a      	lsls	r2, r3, #9
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	689a      	ldr	r2, [r3, #8]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002086:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	029a      	lsls	r2, r3, #10
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40012300 	.word	0x40012300
 80020ac:	0f000001 	.word	0x0f000001

080020b0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0ed      	b.n	800229e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d102      	bne.n	80020d4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff f896 	bl	8001200 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f042 0201 	orr.w	r2, r2, #1
 80020e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020e4:	f7ff fd20 	bl	8001b28 <HAL_GetTick>
 80020e8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020ea:	e012      	b.n	8002112 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020ec:	f7ff fd1c 	bl	8001b28 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b0a      	cmp	r3, #10
 80020f8:	d90b      	bls.n	8002112 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2205      	movs	r2, #5
 800210a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0c5      	b.n	800229e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d0e5      	beq.n	80020ec <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0202 	bic.w	r2, r2, #2
 800212e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002130:	f7ff fcfa 	bl	8001b28 <HAL_GetTick>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002136:	e012      	b.n	800215e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002138:	f7ff fcf6 	bl	8001b28 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b0a      	cmp	r3, #10
 8002144:	d90b      	bls.n	800215e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2205      	movs	r2, #5
 8002156:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e09f      	b.n	800229e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1e5      	bne.n	8002138 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7e1b      	ldrb	r3, [r3, #24]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d108      	bne.n	8002186 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	e007      	b.n	8002196 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002194:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	7e5b      	ldrb	r3, [r3, #25]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d108      	bne.n	80021b0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	7e9b      	ldrb	r3, [r3, #26]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d108      	bne.n	80021da <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0220 	orr.w	r2, r2, #32
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e007      	b.n	80021ea <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0220 	bic.w	r2, r2, #32
 80021e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	7edb      	ldrb	r3, [r3, #27]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d108      	bne.n	8002204 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f022 0210 	bic.w	r2, r2, #16
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	e007      	b.n	8002214 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f042 0210 	orr.w	r2, r2, #16
 8002212:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	7f1b      	ldrb	r3, [r3, #28]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d108      	bne.n	800222e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f042 0208 	orr.w	r2, r2, #8
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	e007      	b.n	800223e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0208 	bic.w	r2, r2, #8
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	7f5b      	ldrb	r3, [r3, #29]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d108      	bne.n	8002258 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f042 0204 	orr.w	r2, r2, #4
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	e007      	b.n	8002268 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 0204 	bic.w	r2, r2, #4
 8002266:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	691b      	ldr	r3, [r3, #16]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	ea42 0103 	orr.w	r1, r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	1e5a      	subs	r2, r3, #1
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b08a      	sub	sp, #40	; 0x28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80022ae:	2300      	movs	r3, #0
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d07c      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d023      	beq.n	800233e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2201      	movs	r2, #1
 80022fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d003      	beq.n	8002310 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f000 f983 	bl	8002614 <HAL_CAN_TxMailbox0CompleteCallback>
 800230e:	e016      	b.n	800233e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	d004      	beq.n	8002324 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
 8002322:	e00c      	b.n	800233e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d004      	beq.n	8002338 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
 8002336:	e002      	b.n	800233e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f989 	bl	8002650 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d024      	beq.n	8002392 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f963 	bl	8002628 <HAL_CAN_TxMailbox1CompleteCallback>
 8002362:	e016      	b.n	8002392 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e00c      	b.n	8002392 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e002      	b.n	8002392 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f969 	bl	8002664 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d024      	beq.n	80023e6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f943 	bl	800263c <HAL_CAN_TxMailbox2CompleteCallback>
 80023b6:	e016      	b.n	80023e6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e00c      	b.n	80023e6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	e002      	b.n	80023e6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f949 	bl	8002678 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f003 0308 	and.w	r3, r3, #8
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00c      	beq.n	800240a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d007      	beq.n	800240a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002400:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2210      	movs	r2, #16
 8002408:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d006      	beq.n	800242c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2208      	movs	r2, #8
 8002424:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f93a 	bl	80026a0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f921 	bl	800268c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f003 0310 	and.w	r3, r3, #16
 800245a:	2b00      	cmp	r3, #0
 800245c:	d007      	beq.n	800246e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002464:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2210      	movs	r2, #16
 800246c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f003 0320 	and.w	r3, r3, #32
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00b      	beq.n	8002490 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d006      	beq.n	8002490 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2208      	movs	r2, #8
 8002488:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f91c 	bl	80026c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	d009      	beq.n	80024ae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	f003 0303 	and.w	r3, r3, #3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d002      	beq.n	80024ae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f000 f903 	bl	80026b4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00b      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d006      	beq.n	80024d0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2210      	movs	r2, #16
 80024c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 f906 	bl	80026dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80024d0:	6a3b      	ldr	r3, [r7, #32]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d006      	beq.n	80024f2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2208      	movs	r2, #8
 80024ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8ff 	bl	80026f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d07b      	beq.n	80025f4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80024fc:	69fb      	ldr	r3, [r7, #28]
 80024fe:	f003 0304 	and.w	r3, r3, #4
 8002502:	2b00      	cmp	r3, #0
 8002504:	d072      	beq.n	80025ec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800251a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251c:	f043 0301 	orr.w	r3, r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	f043 0302 	orr.w	r3, r3, #2
 800253c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002560:	2b00      	cmp	r3, #0
 8002562:	d043      	beq.n	80025ec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d03e      	beq.n	80025ec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002574:	2b60      	cmp	r3, #96	; 0x60
 8002576:	d02b      	beq.n	80025d0 <HAL_CAN_IRQHandler+0x32a>
 8002578:	2b60      	cmp	r3, #96	; 0x60
 800257a:	d82e      	bhi.n	80025da <HAL_CAN_IRQHandler+0x334>
 800257c:	2b50      	cmp	r3, #80	; 0x50
 800257e:	d022      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x320>
 8002580:	2b50      	cmp	r3, #80	; 0x50
 8002582:	d82a      	bhi.n	80025da <HAL_CAN_IRQHandler+0x334>
 8002584:	2b40      	cmp	r3, #64	; 0x40
 8002586:	d019      	beq.n	80025bc <HAL_CAN_IRQHandler+0x316>
 8002588:	2b40      	cmp	r3, #64	; 0x40
 800258a:	d826      	bhi.n	80025da <HAL_CAN_IRQHandler+0x334>
 800258c:	2b30      	cmp	r3, #48	; 0x30
 800258e:	d010      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x30c>
 8002590:	2b30      	cmp	r3, #48	; 0x30
 8002592:	d822      	bhi.n	80025da <HAL_CAN_IRQHandler+0x334>
 8002594:	2b10      	cmp	r3, #16
 8002596:	d002      	beq.n	800259e <HAL_CAN_IRQHandler+0x2f8>
 8002598:	2b20      	cmp	r3, #32
 800259a:	d005      	beq.n	80025a8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800259c:	e01d      	b.n	80025da <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	f043 0308 	orr.w	r3, r3, #8
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025a6:	e019      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	f043 0310 	orr.w	r3, r3, #16
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025b0:	e014      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	f043 0320 	orr.w	r3, r3, #32
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ba:	e00f      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80025bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025c2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025c4:	e00a      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025ce:	e005      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025d8:	e000      	b.n	80025dc <HAL_CAN_IRQHandler+0x336>
            break;
 80025da:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2204      	movs	r2, #4
 80025f2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	431a      	orrs	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f87c 	bl	8002704 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800260c:	bf00      	nop
 800260e:	3728      	adds	r7, #40	; 0x28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80026e4:	bf00      	nop
 80026e6:	370c      	adds	r7, #12
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr

080026f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002734:	4013      	ands	r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <__NVIC_SetPriorityGrouping+0x44>)
 8002742:	4313      	orrs	r3, r2
 8002744:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002746:	4a04      	ldr	r2, [pc, #16]	; (8002758 <__NVIC_SetPriorityGrouping+0x40>)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	60d3      	str	r3, [r2, #12]
}
 800274c:	bf00      	nop
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	e000ed00 	.word	0xe000ed00
 800275c:	05fa0000 	.word	0x05fa0000

08002760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002764:	4b04      	ldr	r3, [pc, #16]	; (8002778 <__NVIC_GetPriorityGrouping+0x18>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	f003 0307 	and.w	r3, r3, #7
}
 800276e:	4618      	mov	r0, r3
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	e000ed00 	.word	0xe000ed00

0800277c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278a:	2b00      	cmp	r3, #0
 800278c:	db0b      	blt.n	80027a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	f003 021f 	and.w	r2, r3, #31
 8002794:	4907      	ldr	r1, [pc, #28]	; (80027b4 <__NVIC_EnableIRQ+0x38>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	2001      	movs	r0, #1
 800279e:	fa00 f202 	lsl.w	r2, r0, r2
 80027a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000e100 	.word	0xe000e100

080027b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	db0a      	blt.n	80027e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	b2da      	uxtb	r2, r3
 80027d0:	490c      	ldr	r1, [pc, #48]	; (8002804 <__NVIC_SetPriority+0x4c>)
 80027d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d6:	0112      	lsls	r2, r2, #4
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	440b      	add	r3, r1
 80027dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027e0:	e00a      	b.n	80027f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	b2da      	uxtb	r2, r3
 80027e6:	4908      	ldr	r1, [pc, #32]	; (8002808 <__NVIC_SetPriority+0x50>)
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	f003 030f 	and.w	r3, r3, #15
 80027ee:	3b04      	subs	r3, #4
 80027f0:	0112      	lsls	r2, r2, #4
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	440b      	add	r3, r1
 80027f6:	761a      	strb	r2, [r3, #24]
}
 80027f8:	bf00      	nop
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr
 8002804:	e000e100 	.word	0xe000e100
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800280c:	b480      	push	{r7}
 800280e:	b089      	sub	sp, #36	; 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	bf28      	it	cs
 800282a:	2304      	movcs	r3, #4
 800282c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3304      	adds	r3, #4
 8002832:	2b06      	cmp	r3, #6
 8002834:	d902      	bls.n	800283c <NVIC_EncodePriority+0x30>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	3b03      	subs	r3, #3
 800283a:	e000      	b.n	800283e <NVIC_EncodePriority+0x32>
 800283c:	2300      	movs	r3, #0
 800283e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002840:	f04f 32ff 	mov.w	r2, #4294967295
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43da      	mvns	r2, r3
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	401a      	ands	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002854:	f04f 31ff 	mov.w	r1, #4294967295
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	fa01 f303 	lsl.w	r3, r1, r3
 800285e:	43d9      	mvns	r1, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002864:	4313      	orrs	r3, r2
         );
}
 8002866:	4618      	mov	r0, r3
 8002868:	3724      	adds	r7, #36	; 0x24
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b082      	sub	sp, #8
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f7ff ff4c 	bl	8002718 <__NVIC_SetPriorityGrouping>
}
 8002880:	bf00      	nop
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	4603      	mov	r3, r0
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800289a:	f7ff ff61 	bl	8002760 <__NVIC_GetPriorityGrouping>
 800289e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	6978      	ldr	r0, [r7, #20]
 80028a6:	f7ff ffb1 	bl	800280c <NVIC_EncodePriority>
 80028aa:	4602      	mov	r2, r0
 80028ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff ff80 	bl	80027b8 <__NVIC_SetPriority>
}
 80028b8:	bf00      	nop
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff ff54 	bl	800277c <__NVIC_EnableIRQ>
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e4:	2300      	movs	r3, #0
 80028e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028e8:	f7ff f91e 	bl	8001b28 <HAL_GetTick>
 80028ec:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e099      	b.n	8002a2c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002918:	e00f      	b.n	800293a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800291a:	f7ff f905 	bl	8001b28 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b05      	cmp	r3, #5
 8002926:	d908      	bls.n	800293a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2220      	movs	r2, #32
 800292c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2203      	movs	r2, #3
 8002932:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e078      	b.n	8002a2c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1e8      	bne.n	800291a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_DMA_Init+0x158>)
 8002954:	4013      	ands	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002966:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002972:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800297e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b04      	cmp	r3, #4
 8002992:	d107      	bne.n	80029a4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299c:	4313      	orrs	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f023 0307 	bic.w	r3, r3, #7
 80029ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	d117      	bne.n	80029fe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	697a      	ldr	r2, [r7, #20]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00e      	beq.n	80029fe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f000 fa7b 	bl	8002edc <DMA_CheckFifoParam>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d008      	beq.n	80029fe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2240      	movs	r2, #64	; 0x40
 80029f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029fa:	2301      	movs	r3, #1
 80029fc:	e016      	b.n	8002a2c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 fa32 	bl	8002e70 <DMA_CalcBaseAndBitshift>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a14:	223f      	movs	r2, #63	; 0x3f
 8002a16:	409a      	lsls	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	e010803f 	.word	0xe010803f

08002a38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b084      	sub	sp, #16
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a44:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a46:	f7ff f86f 	bl	8001b28 <HAL_GetTick>
 8002a4a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d008      	beq.n	8002a6a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2280      	movs	r2, #128	; 0x80
 8002a5c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e052      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0216 	bic.w	r2, r2, #22
 8002a78:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a88:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d103      	bne.n	8002a9a <HAL_DMA_Abort+0x62>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d007      	beq.n	8002aaa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0208 	bic.w	r2, r2, #8
 8002aa8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aba:	e013      	b.n	8002ae4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002abc:	f7ff f834 	bl	8001b28 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d90c      	bls.n	8002ae4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	e015      	b.n	8002b10 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1e4      	bne.n	8002abc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af6:	223f      	movs	r2, #63	; 0x3f
 8002af8:	409a      	lsls	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d004      	beq.n	8002b36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2280      	movs	r2, #128	; 0x80
 8002b30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e00c      	b.n	8002b50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 0201 	bic.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b68:	4b92      	ldr	r3, [pc, #584]	; (8002db4 <HAL_DMA_IRQHandler+0x258>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a92      	ldr	r2, [pc, #584]	; (8002db8 <HAL_DMA_IRQHandler+0x25c>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	0a9b      	lsrs	r3, r3, #10
 8002b74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b86:	2208      	movs	r2, #8
 8002b88:	409a      	lsls	r2, r3
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01a      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	2208      	movs	r2, #8
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bcc:	2201      	movs	r2, #1
 8002bce:	409a      	lsls	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d012      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf6:	f043 0202 	orr.w	r2, r3, #2
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c02:	2204      	movs	r2, #4
 8002c04:	409a      	lsls	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d012      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00b      	beq.n	8002c34 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2c:	f043 0204 	orr.w	r2, r3, #4
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2210      	movs	r2, #16
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d043      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d03c      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c56:	2210      	movs	r2, #16
 8002c58:	409a      	lsls	r2, r3
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d018      	beq.n	8002c9e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d108      	bne.n	8002c8c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d024      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	4798      	blx	r3
 8002c8a:	e01f      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d01b      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	4798      	blx	r3
 8002c9c:	e016      	b.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d107      	bne.n	8002cbc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f022 0208 	bic.w	r2, r2, #8
 8002cba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d003      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 808e 	beq.w	8002dfa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	f000 8086 	beq.w	8002dfa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	409a      	lsls	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b05      	cmp	r3, #5
 8002d04:	d136      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0216 	bic.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695a      	ldr	r2, [r3, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <HAL_DMA_IRQHandler+0x1da>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d007      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0208 	bic.w	r2, r2, #8
 8002d44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4a:	223f      	movs	r2, #63	; 0x3f
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07d      	beq.n	8002e66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	4798      	blx	r3
        }
        return;
 8002d72:	e078      	b.n	8002e66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d01c      	beq.n	8002dbc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d108      	bne.n	8002da2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d030      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e02b      	b.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d027      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	4798      	blx	r3
 8002db2:	e022      	b.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
 8002db4:	20000000 	.word	0x20000000
 8002db8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0210 	bic.w	r2, r2, #16
 8002dd8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d032      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d022      	beq.n	8002e54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2205      	movs	r2, #5
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d307      	bcc.n	8002e42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f2      	bne.n	8002e26 <HAL_DMA_IRQHandler+0x2ca>
 8002e40:	e000      	b.n	8002e44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e42:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	4798      	blx	r3
 8002e64:	e000      	b.n	8002e68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e66:	bf00      	nop
    }
  }
}
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop

08002e70 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	3b10      	subs	r3, #16
 8002e80:	4a13      	ldr	r2, [pc, #76]	; (8002ed0 <DMA_CalcBaseAndBitshift+0x60>)
 8002e82:	fba2 2303 	umull	r2, r3, r2, r3
 8002e86:	091b      	lsrs	r3, r3, #4
 8002e88:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e8a:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <DMA_CalcBaseAndBitshift+0x64>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	4413      	add	r3, r2
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d908      	bls.n	8002eb0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b0c      	ldr	r3, [pc, #48]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	1d1a      	adds	r2, r3, #4
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	659a      	str	r2, [r3, #88]	; 0x58
 8002eae:	e006      	b.n	8002ebe <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb8:	4013      	ands	r3, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3714      	adds	r7, #20
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	aaaaaaab 	.word	0xaaaaaaab
 8002ed4:	08019a0c 	.word	0x08019a0c
 8002ed8:	fffffc00 	.word	0xfffffc00

08002edc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d11f      	bne.n	8002f36 <DMA_CheckFifoParam+0x5a>
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	d856      	bhi.n	8002faa <DMA_CheckFifoParam+0xce>
 8002efc:	a201      	add	r2, pc, #4	; (adr r2, 8002f04 <DMA_CheckFifoParam+0x28>)
 8002efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f02:	bf00      	nop
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f27 	.word	0x08002f27
 8002f0c:	08002f15 	.word	0x08002f15
 8002f10:	08002fab 	.word	0x08002fab
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d046      	beq.n	8002fae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f24:	e043      	b.n	8002fae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f2e:	d140      	bne.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f34:	e03d      	b.n	8002fb2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f3e:	d121      	bne.n	8002f84 <DMA_CheckFifoParam+0xa8>
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	d837      	bhi.n	8002fb6 <DMA_CheckFifoParam+0xda>
 8002f46:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <DMA_CheckFifoParam+0x70>)
 8002f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4c:	08002f5d 	.word	0x08002f5d
 8002f50:	08002f63 	.word	0x08002f63
 8002f54:	08002f5d 	.word	0x08002f5d
 8002f58:	08002f75 	.word	0x08002f75
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f60:	e030      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d025      	beq.n	8002fba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f72:	e022      	b.n	8002fba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f7c:	d11f      	bne.n	8002fbe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f82:	e01c      	b.n	8002fbe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d903      	bls.n	8002f92 <DMA_CheckFifoParam+0xb6>
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d003      	beq.n	8002f98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f90:	e018      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
      break;
 8002f96:	e015      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00e      	beq.n	8002fc2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8002fa8:	e00b      	b.n	8002fc2 <DMA_CheckFifoParam+0xe6>
      break;
 8002faa:	bf00      	nop
 8002fac:	e00a      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fae:	bf00      	nop
 8002fb0:	e008      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb2:	bf00      	nop
 8002fb4:	e006      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fb6:	bf00      	nop
 8002fb8:	e004      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fba:	bf00      	nop
 8002fbc:	e002      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002fbe:	bf00      	nop
 8002fc0:	e000      	b.n	8002fc4 <DMA_CheckFifoParam+0xe8>
      break;
 8002fc2:	bf00      	nop
    }
  } 
  
  return status; 
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop

08002fd4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8002fe4:	4ba9      	ldr	r3, [pc, #676]	; (800328c <HAL_ETH_Init+0x2b8>)
 8002fe6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002fec:	2300      	movs	r3, #0
 8002fee:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e181      	b.n	80032fe <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003000:	b2db      	uxtb	r3, r3
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f004 ff04 	bl	8007e1c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003014:	4b9e      	ldr	r3, [pc, #632]	; (8003290 <HAL_ETH_Init+0x2bc>)
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	4a9d      	ldr	r2, [pc, #628]	; (8003290 <HAL_ETH_Init+0x2bc>)
 800301a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301e:	6453      	str	r3, [r2, #68]	; 0x44
 8003020:	4b9b      	ldr	r3, [pc, #620]	; (8003290 <HAL_ETH_Init+0x2bc>)
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003028:	60bb      	str	r3, [r7, #8]
 800302a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800302c:	4b99      	ldr	r3, [pc, #612]	; (8003294 <HAL_ETH_Init+0x2c0>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	4a98      	ldr	r2, [pc, #608]	; (8003294 <HAL_ETH_Init+0x2c0>)
 8003032:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003036:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003038:	4b96      	ldr	r3, [pc, #600]	; (8003294 <HAL_ETH_Init+0x2c0>)
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a1b      	ldr	r3, [r3, #32]
 8003040:	4994      	ldr	r1, [pc, #592]	; (8003294 <HAL_ETH_Init+0x2c0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f042 0201 	orr.w	r2, r2, #1
 8003058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800305c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800305e:	f7fe fd63 	bl	8001b28 <HAL_GetTick>
 8003062:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003064:	e011      	b.n	800308a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003066:	f7fe fd5f 	bl	8001b28 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003074:	d909      	bls.n	800308a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2203      	movs	r2, #3
 800307a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e139      	b.n	80032fe <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e4      	bne.n	8003066 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	f023 031c 	bic.w	r3, r3, #28
 80030aa:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80030ac:	f002 f8e0 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 80030b0:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	4a78      	ldr	r2, [pc, #480]	; (8003298 <HAL_ETH_Init+0x2c4>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d908      	bls.n	80030cc <HAL_ETH_Init+0xf8>
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	4a77      	ldr	r2, [pc, #476]	; (800329c <HAL_ETH_Init+0x2c8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d804      	bhi.n	80030cc <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e027      	b.n	800311c <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	4a73      	ldr	r2, [pc, #460]	; (800329c <HAL_ETH_Init+0x2c8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d908      	bls.n	80030e6 <HAL_ETH_Init+0x112>
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	4a6d      	ldr	r2, [pc, #436]	; (800328c <HAL_ETH_Init+0x2b8>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d204      	bcs.n	80030e6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f043 030c 	orr.w	r3, r3, #12
 80030e2:	61fb      	str	r3, [r7, #28]
 80030e4:	e01a      	b.n	800311c <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	4a68      	ldr	r2, [pc, #416]	; (800328c <HAL_ETH_Init+0x2b8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d303      	bcc.n	80030f6 <HAL_ETH_Init+0x122>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4a6b      	ldr	r2, [pc, #428]	; (80032a0 <HAL_ETH_Init+0x2cc>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d911      	bls.n	800311a <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	4a69      	ldr	r2, [pc, #420]	; (80032a0 <HAL_ETH_Init+0x2cc>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d908      	bls.n	8003110 <HAL_ETH_Init+0x13c>
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	4a68      	ldr	r2, [pc, #416]	; (80032a4 <HAL_ETH_Init+0x2d0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d804      	bhi.n	8003110 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f043 0304 	orr.w	r3, r3, #4
 800310c:	61fb      	str	r3, [r7, #28]
 800310e:	e005      	b.n	800311c <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f043 0310 	orr.w	r3, r3, #16
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	e000      	b.n	800311c <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800311a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003124:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003128:	2100      	movs	r1, #0
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 fc17 	bl	800395e <HAL_ETH_WritePHYRegister>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800313a:	6939      	ldr	r1, [r7, #16]
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fdcd 	bl	8003cdc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0d7      	b.n	80032fe <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800314e:	20ff      	movs	r0, #255	; 0xff
 8003150:	f7fe fcf6 	bl	8001b40 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	f000 80a5 	beq.w	80032a8 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800315e:	f7fe fce3 	bl	8001b28 <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003164:	f107 030c 	add.w	r3, r7, #12
 8003168:	461a      	mov	r2, r3
 800316a:	2101      	movs	r1, #1
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fb8e 	bl	800388e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003172:	f7fe fcd9 	bl	8001b28 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003180:	4293      	cmp	r3, r2
 8003182:	d90f      	bls.n	80031a4 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003188:	6939      	ldr	r1, [r7, #16]
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fda6 	bl	8003cdc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e0ac      	b.n	80032fe <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f003 0304 	and.w	r3, r3, #4
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0da      	beq.n	8003164 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80031ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031b2:	2100      	movs	r1, #0
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f000 fbd2 	bl	800395e <HAL_ETH_WritePHYRegister>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d00b      	beq.n	80031d8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031c4:	6939      	ldr	r1, [r7, #16]
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fd88 	bl	8003cdc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80031d4:	2301      	movs	r3, #1
 80031d6:	e092      	b.n	80032fe <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d8:	f7fe fca6 	bl	8001b28 <HAL_GetTick>
 80031dc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80031de:	f107 030c 	add.w	r3, r7, #12
 80031e2:	461a      	mov	r2, r3
 80031e4:	2101      	movs	r1, #1
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fb51 	bl	800388e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80031ec:	f7fe fc9c 	bl	8001b28 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d90f      	bls.n	800321e <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003202:	6939      	ldr	r1, [r7, #16]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fd69 	bl	8003cdc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e06f      	b.n	80032fe <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0da      	beq.n	80031de <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003228:	f107 030c 	add.w	r3, r7, #12
 800322c:	461a      	mov	r2, r3
 800322e:	2110      	movs	r1, #16
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fb2c 	bl	800388e <HAL_ETH_ReadPHYRegister>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00b      	beq.n	8003254 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003240:	6939      	ldr	r1, [r7, #16]
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fd4a 	bl	8003cdc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003250:	2301      	movs	r3, #1
 8003252:	e054      	b.n	80032fe <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0304 	and.w	r3, r3, #4
 800325a:	2b00      	cmp	r3, #0
 800325c:	d004      	beq.n	8003268 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003264:	60da      	str	r2, [r3, #12]
 8003266:	e002      	b.n	800326e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2200      	movs	r2, #0
 800327c:	609a      	str	r2, [r3, #8]
 800327e:	e035      	b.n	80032ec <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	e030      	b.n	80032ec <HAL_ETH_Init+0x318>
 800328a:	bf00      	nop
 800328c:	03938700 	.word	0x03938700
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	01312cff 	.word	0x01312cff
 800329c:	02160ebf 	.word	0x02160ebf
 80032a0:	05f5e0ff 	.word	0x05f5e0ff
 80032a4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	08db      	lsrs	r3, r3, #3
 80032ae:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	085b      	lsrs	r3, r3, #1
 80032b6:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	2100      	movs	r1, #0
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 fb4c 	bl	800395e <HAL_ETH_WritePHYRegister>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00b      	beq.n	80032e4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80032d0:	6939      	ldr	r1, [r7, #16]
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fd02 	bl	8003cdc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e00c      	b.n	80032fe <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80032e4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80032e8:	f7fe fc2a 	bl	8001b40 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80032ec:	6939      	ldr	r1, [r7, #16]
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f000 fcf4 	bl	8003cdc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop

08003308 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_ETH_DMATxDescListInit+0x20>
 8003324:	2302      	movs	r3, #2
 8003326:	e052      	b.n	80033ce <HAL_ETH_DMATxDescListInit+0xc6>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e030      	b.n	80033a6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	015b      	lsls	r3, r3, #5
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4413      	add	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003354:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800335c:	fb02 f303 	mul.w	r3, r2, r3
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	4413      	add	r3, r2
 8003364:	461a      	mov	r2, r3
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	3b01      	subs	r3, #1
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	429a      	cmp	r2, r3
 8003386:	d208      	bcs.n	800339a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	3301      	adds	r3, #1
 800338c:	015b      	lsls	r3, r3, #5
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4413      	add	r3, r2
 8003392:	461a      	mov	r2, r3
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	60da      	str	r2, [r3, #12]
 8003398:	e002      	b.n	80033a0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	3301      	adds	r3, #1
 80033a4:	617b      	str	r3, [r7, #20]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d3ca      	bcc.n	8003344 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6819      	ldr	r1, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	f241 0310 	movw	r3, #4112	; 0x1010
 80033b8:	440b      	add	r3, r1
 80033ba:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80033da:	b480      	push	{r7}
 80033dc:	b087      	sub	sp, #28
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ETH_DMARxDescListInit+0x20>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e056      	b.n	80034a8 <HAL_ETH_DMARxDescListInit+0xce>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2202      	movs	r2, #2
 8003406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	68ba      	ldr	r2, [r7, #8]
 800340e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003410:	2300      	movs	r3, #0
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	e034      	b.n	8003480 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	015b      	lsls	r3, r3, #5
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	4413      	add	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003426:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800342e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	4413      	add	r3, r2
 800343e:	461a      	mov	r2, r3
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d105      	bne.n	8003458 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	3b01      	subs	r3, #1
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	429a      	cmp	r2, r3
 8003460:	d208      	bcs.n	8003474 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	3301      	adds	r3, #1
 8003466:	015b      	lsls	r3, r3, #5
 8003468:	68ba      	ldr	r2, [r7, #8]
 800346a:	4413      	add	r3, r2
 800346c:	461a      	mov	r2, r3
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]
 8003472:	e002      	b.n	800347a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	3301      	adds	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	429a      	cmp	r2, r3
 8003486:	d3c6      	bcc.n	8003416 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6819      	ldr	r1, [r3, #0]
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	f241 030c 	movw	r3, #4108	; 0x100c
 8003492:	440b      	add	r3, r1
 8003494:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	371c      	adds	r7, #28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	617b      	str	r3, [r7, #20]
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	2300      	movs	r3, #0
 80034c8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_ETH_TransmitFrame+0x24>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0cd      	b.n	8003674 <HAL_ETH_TransmitFrame+0x1c0>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80034fe:	2301      	movs	r3, #1
 8003500:	e0b8      	b.n	8003674 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	da09      	bge.n	8003520 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2212      	movs	r2, #18
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0a9      	b.n	8003674 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003526:	4293      	cmp	r3, r2
 8003528:	d915      	bls.n	8003556 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	4a54      	ldr	r2, [pc, #336]	; (8003680 <HAL_ETH_TransmitFrame+0x1cc>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	4b51      	ldr	r3, [pc, #324]	; (8003680 <HAL_ETH_TransmitFrame+0x1cc>)
 800353a:	fba3 1302 	umull	r1, r3, r3, r2
 800353e:	0a9b      	lsrs	r3, r3, #10
 8003540:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d005      	beq.n	800355a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	e001      	b.n	800355a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003556:	2301      	movs	r3, #1
 8003558:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	2b01      	cmp	r3, #1
 800355e:	d11c      	bne.n	800359a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800356e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800357a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800358a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	461a      	mov	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	62da      	str	r2, [r3, #44]	; 0x2c
 8003598:	e04b      	b.n	8003632 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	e044      	b.n	800362a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035aa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035ae:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d107      	bne.n	80035c6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80035c4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ca:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80035ce:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d116      	bne.n	8003608 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80035e8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	4a25      	ldr	r2, [pc, #148]	; (8003684 <HAL_ETH_TransmitFrame+0x1d0>)
 80035ee:	fb02 f203 	mul.w	r2, r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80035fa:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003606:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003616:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	461a      	mov	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	3301      	adds	r3, #1
 8003628:	613b      	str	r3, [r7, #16]
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	429a      	cmp	r2, r3
 8003630:	d3b6      	bcc.n	80035a0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	f241 0314 	movw	r3, #4116	; 0x1014
 800363a:	4413      	add	r3, r2
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0304 	and.w	r3, r3, #4
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00d      	beq.n	8003662 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f241 0314 	movw	r3, #4116	; 0x1014
 800364e:	4413      	add	r3, r2
 8003650:	2204      	movs	r2, #4
 8003652:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	f241 0304 	movw	r3, #4100	; 0x1004
 800365c:	4413      	add	r3, r2
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	ac02b00b 	.word	0xac02b00b
 8003684:	fffffa0c 	.word	0xfffffa0c

08003688 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800369a:	2b01      	cmp	r3, #1
 800369c:	d101      	bne.n	80036a2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800369e:	2302      	movs	r3, #2
 80036a0:	e074      	b.n	800378c <HAL_ETH_GetReceivedFrame_IT+0x104>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80036b2:	e05a      	b.n	800376a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	3301      	adds	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036c8:	d10d      	bne.n	80036e6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	461a      	mov	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
 80036e4:	e041      	b.n	800376a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10b      	bne.n	800370c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
 800370a:	e02e      	b.n	800376a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	2b01      	cmp	r3, #1
 8003724:	d103      	bne.n	800372e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	0c1b      	lsrs	r3, r3, #16
 8003736:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800373a:	1f1a      	subs	r2, r3, #4
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	461a      	mov	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003766:	2300      	movs	r3, #0
 8003768:	e010      	b.n	800378c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	db02      	blt.n	800377a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2b03      	cmp	r3, #3
 8003778:	d99c      	bls.n	80036b4 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f241 0314 	movw	r3, #4116	; 0x1014
 80037a8:	4413      	add	r3, r2
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037b0:	2b40      	cmp	r3, #64	; 0x40
 80037b2:	d112      	bne.n	80037da <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f004 fbf1 	bl	8007f9c <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	f241 0314 	movw	r3, #4116	; 0x1014
 80037c2:	4413      	add	r3, r2
 80037c4:	2240      	movs	r2, #64	; 0x40
 80037c6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037d8:	e01b      	b.n	8003812 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	f241 0314 	movw	r3, #4116	; 0x1014
 80037e2:	4413      	add	r3, r2
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0301 	and.w	r3, r3, #1
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d111      	bne.n	8003812 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f839 	bl	8003866 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80037fc:	4413      	add	r3, r2
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	f241 0314 	movw	r3, #4116	; 0x1014
 800381a:	4413      	add	r3, r2
 800381c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003820:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	f241 0314 	movw	r3, #4116	; 0x1014
 800382a:	4413      	add	r3, r2
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003836:	d112      	bne.n	800385e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f81e 	bl	800387a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	f241 0314 	movw	r3, #4116	; 0x1014
 8003846:	4413      	add	r3, r2
 8003848:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800384c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800386e:	bf00      	nop
 8003870:	370c      	adds	r7, #12
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr

0800387a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b086      	sub	sp, #24
 8003892:	af00      	add	r7, sp, #0
 8003894:	60f8      	str	r0, [r7, #12]
 8003896:	460b      	mov	r3, r1
 8003898:	607a      	str	r2, [r7, #4]
 800389a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b82      	cmp	r3, #130	; 0x82
 80038ae:	d101      	bne.n	80038b4 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80038b0:	2302      	movs	r3, #2
 80038b2:	e050      	b.n	8003956 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2282      	movs	r2, #130	; 0x82
 80038b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 031c 	and.w	r3, r3, #28
 80038ca:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8a1b      	ldrh	r3, [r3, #16]
 80038d0:	02db      	lsls	r3, r3, #11
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80038da:	897b      	ldrh	r3, [r7, #10]
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	f023 0302 	bic.w	r3, r3, #2
 80038ee:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f043 0301 	orr.w	r3, r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003900:	f7fe f912 	bl	8001b28 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003906:	e015      	b.n	8003934 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003908:	f7fe f90e 	bl	8001b28 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003916:	d309      	bcc.n	800392c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003928:	2303      	movs	r3, #3
 800392a:	e014      	b.n	8003956 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691b      	ldr	r3, [r3, #16]
 8003932:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 0301 	and.w	r3, r3, #1
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1e4      	bne.n	8003908 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	b29b      	uxth	r3, r3
 8003946:	461a      	mov	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3718      	adds	r7, #24
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b086      	sub	sp, #24
 8003962:	af00      	add	r7, sp, #0
 8003964:	60f8      	str	r0, [r7, #12]
 8003966:	460b      	mov	r3, r1
 8003968:	607a      	str	r2, [r7, #4]
 800396a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800396c:	2300      	movs	r3, #0
 800396e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b42      	cmp	r3, #66	; 0x42
 800397e:	d101      	bne.n	8003984 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003980:	2302      	movs	r3, #2
 8003982:	e04e      	b.n	8003a22 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2242      	movs	r2, #66	; 0x42
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 031c 	and.w	r3, r3, #28
 800399a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8a1b      	ldrh	r3, [r3, #16]
 80039a0:	02db      	lsls	r3, r3, #11
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80039aa:	897b      	ldrh	r3, [r7, #10]
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80039b2:	697a      	ldr	r2, [r7, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f043 0302 	orr.w	r3, r3, #2
 80039be:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80039da:	f7fe f8a5 	bl	8001b28 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80039e0:	e015      	b.n	8003a0e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80039e2:	f7fe f8a1 	bl	8001b28 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f0:	d309      	bcc.n	8003a06 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2201      	movs	r2, #1
 80039f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e00d      	b.n	8003a22 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e4      	bne.n	80039e2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3718      	adds	r7, #24
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}

08003a2a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_ETH_Start+0x16>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e01f      	b.n	8003a80 <HAL_ETH_Start+0x56>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 fb45 	bl	80040e0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 fb7c 	bl	8004154 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f000 fc13 	bl	8004288 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 fbb0 	bl	80041c8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003a68:	6878      	ldr	r0, [r7, #4]
 8003a6a:	f000 fbdd 	bl	8004228 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2201      	movs	r2, #1
 8003a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003a7e:	2300      	movs	r3, #0
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b082      	sub	sp, #8
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d101      	bne.n	8003a9e <HAL_ETH_Stop+0x16>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e01f      	b.n	8003ade <HAL_ETH_Stop+0x56>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2202      	movs	r2, #2
 8003aaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 fba2 	bl	80041f8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fbcf 	bl	8004258 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fb67 	bl	800418e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fbe1 	bl	8004288 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 fb27 	bl	800411a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3708      	adds	r7, #8
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}
	...

08003ae8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d101      	bne.n	8003b04 <HAL_ETH_ConfigMAC+0x1c>
 8003b00:	2302      	movs	r3, #2
 8003b02:	e0e4      	b.n	8003cce <HAL_ETH_ConfigMAC+0x1e6>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80b1 	beq.w	8003c7e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4b6c      	ldr	r3, [pc, #432]	; (8003cd8 <HAL_ETH_ConfigMAC+0x1f0>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003b34:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003b3a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003b40:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003b46:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003b4c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003b52:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003b58:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003b5e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003b64:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003b6a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003b70:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003b76:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003b78:	68fa      	ldr	r2, [r7, #12]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003b8e:	2001      	movs	r0, #1
 8003b90:	f7fd ffd6 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003ba4:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003baa:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8003bb0:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003bb6:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003bbc:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8003bc2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8003bce:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003bd0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bda:	2001      	movs	r0, #1
 8003bdc:	f7fd ffb0 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003bf0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003bfa:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003c18:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003c1e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003c24:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003c2a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003c30:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c48:	2001      	movs	r0, #1
 8003c4a:	f7fd ff79 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c6e:	2001      	movs	r0, #1
 8003c70:	f7fd ff66 	bl	8001b40 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	61da      	str	r2, [r3, #28]
 8003c7c:	e01e      	b.n	8003cbc <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003c8c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f7fd ff46 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3710      	adds	r7, #16
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	ff20810f 	.word	0xff20810f

08003cdc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b0b0      	sub	sp, #192	; 0xc0
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d00:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003d02:	2300      	movs	r3, #0
 8003d04:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003d06:	2300      	movs	r3, #0
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003d12:	2300      	movs	r3, #0
 8003d14:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003d16:	2300      	movs	r3, #0
 8003d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003d22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d26:	663b      	str	r3, [r7, #96]	; 0x60
 8003d28:	e001      	b.n	8003d2e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003d2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d32:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003d34:	2300      	movs	r3, #0
 8003d36:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003d40:	2300      	movs	r3, #0
 8003d42:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003d44:	2300      	movs	r3, #0
 8003d46:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003d48:	2340      	movs	r3, #64	; 0x40
 8003d4a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003db0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003db4:	4bab      	ldr	r3, [pc, #684]	; (8004064 <ETH_MACDMAConfig+0x388>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003dbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003dbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003dc0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003dc4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003dc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003dc8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003dce:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003dd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003dd2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003dd6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003ddc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003de0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003de2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003de4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003de6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003de8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003dec:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003dee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003df0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8003df2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003df6:	4313      	orrs	r3, r2
 8003df8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e04:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fd fe95 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e1e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e20:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e24:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003e26:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003e28:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003e2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003e2e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003e30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003e34:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003e3a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003e3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003e40:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003e44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003e4c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003e4e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f7fd fe70 	bl	8001b40 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e68:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003e72:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003e7c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8003e88:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e8c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003e90:	4013      	ands	r3, r2
 8003e92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003e96:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e9a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003e9c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003ea0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003ea2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003ea6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003ea8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003eac:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003eae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003eb2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003eb8:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8003eba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ecc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fd fe31 	bl	8001b40 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ee6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ee8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003eec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f02:	2001      	movs	r0, #1
 8003f04:	f7fd fe1c 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f10:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003f12:	2300      	movs	r3, #0
 8003f14:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003f16:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f1a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003f20:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f24:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003f26:	2300      	movs	r3, #0
 8003f28:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003f32:	2300      	movs	r3, #0
 8003f34:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003f36:	2304      	movs	r3, #4
 8003f38:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003f3a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003f40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003f46:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f4a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003f52:	2380      	movs	r3, #128	; 0x80
 8003f54:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	f241 0318 	movw	r3, #4120	; 0x1018
 8003f66:	4413      	add	r3, r2
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8003f6e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <ETH_MACDMAConfig+0x38c>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f7a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003f7c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f7e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003f80:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003f82:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003f84:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003f86:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003f88:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003f8a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003f8c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003f8e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003f90:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003f92:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003f96:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003f9a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003f9c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fae:	4413      	add	r3, r2
 8003fb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fb4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fbe:	4413      	add	r3, r2
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003fc6:	2001      	movs	r0, #1
 8003fc8:	f7fd fdba 	bl	8001b40 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	f241 0318 	movw	r3, #4120	; 0x1018
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003fda:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003fe0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003fe4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003fe8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003fea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003fec:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8003fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003ff2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8003ff6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004014:	2001      	movs	r0, #1
 8004016:	f7fd fd93 	bl	8001b40 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004022:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004026:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10d      	bne.n	800404c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	f241 031c 	movw	r3, #4124	; 0x101c
 8004038:	4413      	add	r3, r2
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6811      	ldr	r1, [r2, #0]
 8004040:	4a0a      	ldr	r2, [pc, #40]	; (800406c <ETH_MACDMAConfig+0x390>)
 8004042:	431a      	orrs	r2, r3
 8004044:	f241 031c 	movw	r3, #4124	; 0x101c
 8004048:	440b      	add	r3, r1
 800404a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	461a      	mov	r2, r3
 8004052:	2100      	movs	r1, #0
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f80b 	bl	8004070 <ETH_MACAddressConfig>
}
 800405a:	bf00      	nop
 800405c:	37c0      	adds	r7, #192	; 0xc0
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	ff20810f 	.word	0xff20810f
 8004068:	f8de3f23 	.word	0xf8de3f23
 800406c:	00010040 	.word	0x00010040

08004070 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	3305      	adds	r3, #5
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	021b      	lsls	r3, r3, #8
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	3204      	adds	r2, #4
 8004088:	7812      	ldrb	r2, [r2, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	4b11      	ldr	r3, [pc, #68]	; (80040d8 <ETH_MACAddressConfig+0x68>)
 8004092:	4413      	add	r3, r2
 8004094:	461a      	mov	r2, r3
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3303      	adds	r3, #3
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	061a      	lsls	r2, r3, #24
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	3302      	adds	r3, #2
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	041b      	lsls	r3, r3, #16
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	3301      	adds	r3, #1
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	021b      	lsls	r3, r3, #8
 80040b4:	4313      	orrs	r3, r2
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	7812      	ldrb	r2, [r2, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	4b06      	ldr	r3, [pc, #24]	; (80040dc <ETH_MACAddressConfig+0x6c>)
 80040c2:	4413      	add	r3, r2
 80040c4:	461a      	mov	r2, r3
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6013      	str	r3, [r2, #0]
}
 80040ca:	bf00      	nop
 80040cc:	371c      	adds	r7, #28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	40028040 	.word	0x40028040
 80040dc:	40028044 	.word	0x40028044

080040e0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80040e8:	2300      	movs	r3, #0
 80040ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0208 	orr.w	r2, r2, #8
 80040fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004104:	2001      	movs	r0, #1
 8004106:	f7fd fd1b 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	601a      	str	r2, [r3, #0]
}
 8004112:	bf00      	nop
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800411a:	b580      	push	{r7, lr}
 800411c:	b084      	sub	sp, #16
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 0208 	bic.w	r2, r2, #8
 8004134:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800413e:	2001      	movs	r0, #1
 8004140:	f7fd fcfe 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]
}
 800414c:	bf00      	nop
 800414e:	3710      	adds	r7, #16
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0204 	orr.w	r2, r2, #4
 800416e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004178:	2001      	movs	r0, #1
 800417a:	f7fd fce1 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]
}
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004196:	2300      	movs	r3, #0
 8004198:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0204 	bic.w	r2, r2, #4
 80041a8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80041b2:	2001      	movs	r0, #1
 80041b4:	f7fd fcc4 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	f241 0318 	movw	r3, #4120	; 0x1018
 80041d8:	4413      	add	r3, r2
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6811      	ldr	r1, [r2, #0]
 80041e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80041e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80041e8:	440b      	add	r3, r1
 80041ea:	601a      	str	r2, [r3, #0]
}
 80041ec:	bf00      	nop
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	f241 0318 	movw	r3, #4120	; 0x1018
 8004208:	4413      	add	r3, r2
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	6811      	ldr	r1, [r2, #0]
 8004210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004214:	f241 0318 	movw	r3, #4120	; 0x1018
 8004218:	440b      	add	r3, r1
 800421a:	601a      	str	r2, [r3, #0]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	f241 0318 	movw	r3, #4120	; 0x1018
 8004238:	4413      	add	r3, r2
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6811      	ldr	r1, [r2, #0]
 8004240:	f043 0202 	orr.w	r2, r3, #2
 8004244:	f241 0318 	movw	r3, #4120	; 0x1018
 8004248:	440b      	add	r3, r1
 800424a:	601a      	str	r2, [r3, #0]
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	f241 0318 	movw	r3, #4120	; 0x1018
 8004268:	4413      	add	r3, r2
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	6811      	ldr	r1, [r2, #0]
 8004270:	f023 0202 	bic.w	r2, r3, #2
 8004274:	f241 0318 	movw	r3, #4120	; 0x1018
 8004278:	440b      	add	r3, r1
 800427a:	601a      	str	r2, [r3, #0]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	f241 0318 	movw	r3, #4120	; 0x1018
 800429c:	4413      	add	r3, r2
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6811      	ldr	r1, [r2, #0]
 80042a4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80042a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80042ac:	440b      	add	r3, r1
 80042ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80042b8:	4413      	add	r3, r2
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7fd fc3e 	bl	8001b40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6819      	ldr	r1, [r3, #0]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f241 0318 	movw	r3, #4120	; 0x1018
 80042ce:	440b      	add	r3, r1
 80042d0:	601a      	str	r2, [r3, #0]
}
 80042d2:	bf00      	nop
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
	...

080042dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042dc:	b480      	push	{r7}
 80042de:	b089      	sub	sp, #36	; 0x24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80042f6:	2300      	movs	r3, #0
 80042f8:	61fb      	str	r3, [r7, #28]
 80042fa:	e175      	b.n	80045e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042fc:	2201      	movs	r2, #1
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4013      	ands	r3, r2
 800430e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004310:	693a      	ldr	r2, [r7, #16]
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	429a      	cmp	r2, r3
 8004316:	f040 8164 	bne.w	80045e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f003 0303 	and.w	r3, r3, #3
 8004322:	2b01      	cmp	r3, #1
 8004324:	d005      	beq.n	8004332 <HAL_GPIO_Init+0x56>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d130      	bne.n	8004394 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	2203      	movs	r2, #3
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43db      	mvns	r3, r3
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	4013      	ands	r3, r2
 8004348:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	fa02 f303 	lsl.w	r3, r2, r3
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69ba      	ldr	r2, [r7, #24]
 8004360:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004368:	2201      	movs	r2, #1
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	fa02 f303 	lsl.w	r3, r2, r3
 8004370:	43db      	mvns	r3, r3
 8004372:	69ba      	ldr	r2, [r7, #24]
 8004374:	4013      	ands	r3, r2
 8004376:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	091b      	lsrs	r3, r3, #4
 800437e:	f003 0201 	and.w	r2, r3, #1
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	fa02 f303 	lsl.w	r3, r2, r3
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4313      	orrs	r3, r2
 800438c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f003 0303 	and.w	r3, r3, #3
 800439c:	2b03      	cmp	r3, #3
 800439e:	d017      	beq.n	80043d0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2203      	movs	r2, #3
 80043ac:	fa02 f303 	lsl.w	r3, r2, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	69ba      	ldr	r2, [r7, #24]
 80043b4:	4013      	ands	r3, r2
 80043b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	69fb      	ldr	r3, [r7, #28]
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d123      	bne.n	8004424 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	08da      	lsrs	r2, r3, #3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3208      	adds	r2, #8
 80043e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f003 0307 	and.w	r3, r3, #7
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	220f      	movs	r2, #15
 80043f4:	fa02 f303 	lsl.w	r3, r2, r3
 80043f8:	43db      	mvns	r3, r3
 80043fa:	69ba      	ldr	r2, [r7, #24]
 80043fc:	4013      	ands	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	691a      	ldr	r2, [r3, #16]
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	4313      	orrs	r3, r2
 8004414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	08da      	lsrs	r2, r3, #3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	3208      	adds	r2, #8
 800441e:	69b9      	ldr	r1, [r7, #24]
 8004420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	005b      	lsls	r3, r3, #1
 800442e:	2203      	movs	r2, #3
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f003 0203 	and.w	r2, r3, #3
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	005b      	lsls	r3, r3, #1
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 80be 	beq.w	80045e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004466:	4b66      	ldr	r3, [pc, #408]	; (8004600 <HAL_GPIO_Init+0x324>)
 8004468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446a:	4a65      	ldr	r2, [pc, #404]	; (8004600 <HAL_GPIO_Init+0x324>)
 800446c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004470:	6453      	str	r3, [r2, #68]	; 0x44
 8004472:	4b63      	ldr	r3, [pc, #396]	; (8004600 <HAL_GPIO_Init+0x324>)
 8004474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004476:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800447a:	60fb      	str	r3, [r7, #12]
 800447c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800447e:	4a61      	ldr	r2, [pc, #388]	; (8004604 <HAL_GPIO_Init+0x328>)
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	089b      	lsrs	r3, r3, #2
 8004484:	3302      	adds	r3, #2
 8004486:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800448a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	220f      	movs	r2, #15
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43db      	mvns	r3, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4013      	ands	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_GPIO_Init+0x32c>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d037      	beq.n	800451a <HAL_GPIO_Init+0x23e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a57      	ldr	r2, [pc, #348]	; (800460c <HAL_GPIO_Init+0x330>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d031      	beq.n	8004516 <HAL_GPIO_Init+0x23a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a56      	ldr	r2, [pc, #344]	; (8004610 <HAL_GPIO_Init+0x334>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d02b      	beq.n	8004512 <HAL_GPIO_Init+0x236>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a55      	ldr	r2, [pc, #340]	; (8004614 <HAL_GPIO_Init+0x338>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d025      	beq.n	800450e <HAL_GPIO_Init+0x232>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a54      	ldr	r2, [pc, #336]	; (8004618 <HAL_GPIO_Init+0x33c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d01f      	beq.n	800450a <HAL_GPIO_Init+0x22e>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a53      	ldr	r2, [pc, #332]	; (800461c <HAL_GPIO_Init+0x340>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d019      	beq.n	8004506 <HAL_GPIO_Init+0x22a>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_GPIO_Init+0x344>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d013      	beq.n	8004502 <HAL_GPIO_Init+0x226>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a51      	ldr	r2, [pc, #324]	; (8004624 <HAL_GPIO_Init+0x348>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00d      	beq.n	80044fe <HAL_GPIO_Init+0x222>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a50      	ldr	r2, [pc, #320]	; (8004628 <HAL_GPIO_Init+0x34c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <HAL_GPIO_Init+0x21e>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a4f      	ldr	r2, [pc, #316]	; (800462c <HAL_GPIO_Init+0x350>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d101      	bne.n	80044f6 <HAL_GPIO_Init+0x21a>
 80044f2:	2309      	movs	r3, #9
 80044f4:	e012      	b.n	800451c <HAL_GPIO_Init+0x240>
 80044f6:	230a      	movs	r3, #10
 80044f8:	e010      	b.n	800451c <HAL_GPIO_Init+0x240>
 80044fa:	2308      	movs	r3, #8
 80044fc:	e00e      	b.n	800451c <HAL_GPIO_Init+0x240>
 80044fe:	2307      	movs	r3, #7
 8004500:	e00c      	b.n	800451c <HAL_GPIO_Init+0x240>
 8004502:	2306      	movs	r3, #6
 8004504:	e00a      	b.n	800451c <HAL_GPIO_Init+0x240>
 8004506:	2305      	movs	r3, #5
 8004508:	e008      	b.n	800451c <HAL_GPIO_Init+0x240>
 800450a:	2304      	movs	r3, #4
 800450c:	e006      	b.n	800451c <HAL_GPIO_Init+0x240>
 800450e:	2303      	movs	r3, #3
 8004510:	e004      	b.n	800451c <HAL_GPIO_Init+0x240>
 8004512:	2302      	movs	r3, #2
 8004514:	e002      	b.n	800451c <HAL_GPIO_Init+0x240>
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_GPIO_Init+0x240>
 800451a:	2300      	movs	r3, #0
 800451c:	69fa      	ldr	r2, [r7, #28]
 800451e:	f002 0203 	and.w	r2, r2, #3
 8004522:	0092      	lsls	r2, r2, #2
 8004524:	4093      	lsls	r3, r2
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4313      	orrs	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800452c:	4935      	ldr	r1, [pc, #212]	; (8004604 <HAL_GPIO_Init+0x328>)
 800452e:	69fb      	ldr	r3, [r7, #28]
 8004530:	089b      	lsrs	r3, r3, #2
 8004532:	3302      	adds	r3, #2
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <HAL_GPIO_Init+0x354>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	43db      	mvns	r3, r3
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	4013      	ands	r3, r2
 8004548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004556:	69ba      	ldr	r2, [r7, #24]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4313      	orrs	r3, r2
 800455c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_GPIO_Init+0x354>)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004564:	4b32      	ldr	r3, [pc, #200]	; (8004630 <HAL_GPIO_Init+0x354>)
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	43db      	mvns	r3, r3
 800456e:	69ba      	ldr	r2, [r7, #24]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004580:	69ba      	ldr	r2, [r7, #24]
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004588:	4a29      	ldr	r2, [pc, #164]	; (8004630 <HAL_GPIO_Init+0x354>)
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800458e:	4b28      	ldr	r3, [pc, #160]	; (8004630 <HAL_GPIO_Init+0x354>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	43db      	mvns	r3, r3
 8004598:	69ba      	ldr	r2, [r7, #24]
 800459a:	4013      	ands	r3, r2
 800459c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045b2:	4a1f      	ldr	r2, [pc, #124]	; (8004630 <HAL_GPIO_Init+0x354>)
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045b8:	4b1d      	ldr	r3, [pc, #116]	; (8004630 <HAL_GPIO_Init+0x354>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	43db      	mvns	r3, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4013      	ands	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d003      	beq.n	80045dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045d4:	69ba      	ldr	r2, [r7, #24]
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045dc:	4a14      	ldr	r2, [pc, #80]	; (8004630 <HAL_GPIO_Init+0x354>)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b0f      	cmp	r3, #15
 80045ec:	f67f ae86 	bls.w	80042fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	bf00      	nop
 80045f4:	3724      	adds	r7, #36	; 0x24
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40023800 	.word	0x40023800
 8004604:	40013800 	.word	0x40013800
 8004608:	40020000 	.word	0x40020000
 800460c:	40020400 	.word	0x40020400
 8004610:	40020800 	.word	0x40020800
 8004614:	40020c00 	.word	0x40020c00
 8004618:	40021000 	.word	0x40021000
 800461c:	40021400 	.word	0x40021400
 8004620:	40021800 	.word	0x40021800
 8004624:	40021c00 	.word	0x40021c00
 8004628:	40022000 	.word	0x40022000
 800462c:	40022400 	.word	0x40022400
 8004630:	40013c00 	.word	0x40013c00

08004634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	807b      	strh	r3, [r7, #2]
 8004640:	4613      	mov	r3, r2
 8004642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004644:	787b      	ldrb	r3, [r7, #1]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004650:	e003      	b.n	800465a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004652:	887b      	ldrh	r3, [r7, #2]
 8004654:	041a      	lsls	r2, r3, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	619a      	str	r2, [r3, #24]
}
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
	...

08004668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d106      	bne.n	8004694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7fc fe12 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2224      	movs	r2, #36	; 0x24
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f022 0201 	bic.w	r2, r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	689a      	ldr	r2, [r3, #8]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80046c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d107      	bne.n	80046e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689a      	ldr	r2, [r3, #8]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	e006      	b.n	80046f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d104      	bne.n	8004702 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6859      	ldr	r1, [r3, #4]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	4b1d      	ldr	r3, [pc, #116]	; (8004784 <HAL_I2C_Init+0x11c>)
 800470e:	430b      	orrs	r3, r1
 8004710:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68da      	ldr	r2, [r3, #12]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004720:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	430a      	orrs	r2, r1
 800473a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	69d9      	ldr	r1, [r3, #28]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1a      	ldr	r2, [r3, #32]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	430a      	orrs	r2, r1
 800474a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	02008000 	.word	0x02008000

08004788 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b20      	cmp	r3, #32
 800479c:	d138      	bne.n	8004810 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d101      	bne.n	80047ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047a8:	2302      	movs	r3, #2
 80047aa:	e032      	b.n	8004812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2224      	movs	r2, #36	; 0x24
 80047b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6819      	ldr	r1, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	430a      	orrs	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800480c:	2300      	movs	r3, #0
 800480e:	e000      	b.n	8004812 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b20      	cmp	r3, #32
 8004832:	d139      	bne.n	80048a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800483e:	2302      	movs	r3, #2
 8004840:	e033      	b.n	80048aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2224      	movs	r2, #36	; 0x24
 800484e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0201 	bic.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004870:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	021b      	lsls	r3, r3, #8
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f042 0201 	orr.w	r2, r2, #1
 8004892:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2220      	movs	r2, #32
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a04      	ldr	r2, [pc, #16]	; (80048d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048c6:	6013      	str	r3, [r2, #0]
}
 80048c8:	bf00      	nop
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40007000 	.word	0x40007000

080048d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80048de:	2300      	movs	r3, #0
 80048e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048e2:	4b23      	ldr	r3, [pc, #140]	; (8004970 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	4a22      	ldr	r2, [pc, #136]	; (8004970 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6413      	str	r3, [r2, #64]	; 0x40
 80048ee:	4b20      	ldr	r3, [pc, #128]	; (8004970 <HAL_PWREx_EnableOverDrive+0x98>)
 80048f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048f6:	603b      	str	r3, [r7, #0]
 80048f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048fa:	4b1e      	ldr	r3, [pc, #120]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a1d      	ldr	r2, [pc, #116]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004906:	f7fd f90f 	bl	8001b28 <HAL_GetTick>
 800490a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800490c:	e009      	b.n	8004922 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800490e:	f7fd f90b 	bl	8001b28 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800491c:	d901      	bls.n	8004922 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e022      	b.n	8004968 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800492e:	d1ee      	bne.n	800490e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800493a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800493c:	f7fd f8f4 	bl	8001b28 <HAL_GetTick>
 8004940:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004942:	e009      	b.n	8004958 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004944:	f7fd f8f0 	bl	8001b28 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004952:	d901      	bls.n	8004958 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e007      	b.n	8004968 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004958:	4b06      	ldr	r3, [pc, #24]	; (8004974 <HAL_PWREx_EnableOverDrive+0x9c>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004960:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004964:	d1ee      	bne.n	8004944 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40023800 	.word	0x40023800
 8004974:	40007000 	.word	0x40007000

08004978 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b086      	sub	sp, #24
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004980:	2300      	movs	r3, #0
 8004982:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e29b      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8087 	beq.w	8004aaa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800499c:	4b96      	ldr	r3, [pc, #600]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	f003 030c 	and.w	r3, r3, #12
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d00c      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049a8:	4b93      	ldr	r3, [pc, #588]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f003 030c 	and.w	r3, r3, #12
 80049b0:	2b08      	cmp	r3, #8
 80049b2:	d112      	bne.n	80049da <HAL_RCC_OscConfig+0x62>
 80049b4:	4b90      	ldr	r3, [pc, #576]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049c0:	d10b      	bne.n	80049da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c2:	4b8d      	ldr	r3, [pc, #564]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d06c      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x130>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d168      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e275      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x7a>
 80049e4:	4b84      	ldr	r3, [pc, #528]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a83      	ldr	r2, [pc, #524]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	e02e      	b.n	8004a50 <HAL_RCC_OscConfig+0xd8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x9c>
 80049fa:	4b7f      	ldr	r3, [pc, #508]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a7e      	ldr	r2, [pc, #504]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a04:	6013      	str	r3, [r2, #0]
 8004a06:	4b7c      	ldr	r3, [pc, #496]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7b      	ldr	r2, [pc, #492]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a10:	6013      	str	r3, [r2, #0]
 8004a12:	e01d      	b.n	8004a50 <HAL_RCC_OscConfig+0xd8>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a1c:	d10c      	bne.n	8004a38 <HAL_RCC_OscConfig+0xc0>
 8004a1e:	4b76      	ldr	r3, [pc, #472]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a75      	ldr	r2, [pc, #468]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	4b73      	ldr	r3, [pc, #460]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a72      	ldr	r2, [pc, #456]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	e00b      	b.n	8004a50 <HAL_RCC_OscConfig+0xd8>
 8004a38:	4b6f      	ldr	r3, [pc, #444]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a6e      	ldr	r2, [pc, #440]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a42:	6013      	str	r3, [r2, #0]
 8004a44:	4b6c      	ldr	r3, [pc, #432]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a6b      	ldr	r2, [pc, #428]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d013      	beq.n	8004a80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fd f866 	bl	8001b28 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a60:	f7fd f862 	bl	8001b28 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b64      	cmp	r3, #100	; 0x64
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e229      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a72:	4b61      	ldr	r3, [pc, #388]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0xe8>
 8004a7e:	e014      	b.n	8004aaa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd f852 	bl	8001b28 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a88:	f7fd f84e 	bl	8001b28 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b64      	cmp	r3, #100	; 0x64
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e215      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a9a:	4b57      	ldr	r3, [pc, #348]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x110>
 8004aa6:	e000      	b.n	8004aaa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d069      	beq.n	8004b8a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004ab6:	4b50      	ldr	r3, [pc, #320]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 030c 	and.w	r3, r3, #12
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00b      	beq.n	8004ada <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ac2:	4b4d      	ldr	r3, [pc, #308]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d11c      	bne.n	8004b08 <HAL_RCC_OscConfig+0x190>
 8004ace:	4b4a      	ldr	r3, [pc, #296]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d116      	bne.n	8004b08 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ada:	4b47      	ldr	r3, [pc, #284]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d005      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17a>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d001      	beq.n	8004af2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e1e9      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af2:	4b41      	ldr	r3, [pc, #260]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	493d      	ldr	r1, [pc, #244]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b02:	4313      	orrs	r3, r2
 8004b04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b06:	e040      	b.n	8004b8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	68db      	ldr	r3, [r3, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d023      	beq.n	8004b58 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a38      	ldr	r2, [pc, #224]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b16:	f043 0301 	orr.w	r3, r3, #1
 8004b1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b1c:	f7fd f804 	bl	8001b28 <HAL_GetTick>
 8004b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	e008      	b.n	8004b36 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b24:	f7fd f800 	bl	8001b28 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	2b02      	cmp	r3, #2
 8004b30:	d901      	bls.n	8004b36 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004b32:	2303      	movs	r3, #3
 8004b34:	e1c7      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b36:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d0f0      	beq.n	8004b24 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b42:	4b2d      	ldr	r3, [pc, #180]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	4929      	ldr	r1, [pc, #164]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	600b      	str	r3, [r1, #0]
 8004b56:	e018      	b.n	8004b8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b58:	4b27      	ldr	r3, [pc, #156]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b5e:	f023 0301 	bic.w	r3, r3, #1
 8004b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fc ffe0 	bl	8001b28 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fc ffdc 	bl	8001b28 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1a3      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	4b1e      	ldr	r3, [pc, #120]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d038      	beq.n	8004c08 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d019      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b16      	ldr	r3, [pc, #88]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	4a15      	ldr	r2, [pc, #84]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	f043 0301 	orr.w	r3, r3, #1
 8004ba8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004baa:	f7fc ffbd 	bl	8001b28 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bb2:	f7fc ffb9 	bl	8001b28 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e180      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0f0      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x23a>
 8004bd0:	e01a      	b.n	8004c08 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bd2:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd6:	4a08      	ldr	r2, [pc, #32]	; (8004bf8 <HAL_RCC_OscConfig+0x280>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fc ffa3 	bl	8001b28 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004be4:	e00a      	b.n	8004bfc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be6:	f7fc ff9f 	bl	8001b28 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d903      	bls.n	8004bfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e166      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
 8004bf8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bfc:	4b92      	ldr	r3, [pc, #584]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1ee      	bne.n	8004be6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0304 	and.w	r3, r3, #4
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 80a4 	beq.w	8004d5e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b8c      	ldr	r3, [pc, #560]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10d      	bne.n	8004c3e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	4b89      	ldr	r3, [pc, #548]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a88      	ldr	r2, [pc, #544]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c2e:	4b86      	ldr	r3, [pc, #536]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c3e:	4b83      	ldr	r3, [pc, #524]	; (8004e4c <HAL_RCC_OscConfig+0x4d4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d118      	bne.n	8004c7c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004c4a:	4b80      	ldr	r3, [pc, #512]	; (8004e4c <HAL_RCC_OscConfig+0x4d4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a7f      	ldr	r2, [pc, #508]	; (8004e4c <HAL_RCC_OscConfig+0x4d4>)
 8004c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c56:	f7fc ff67 	bl	8001b28 <HAL_GetTick>
 8004c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c5c:	e008      	b.n	8004c70 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c5e:	f7fc ff63 	bl	8001b28 <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	2b64      	cmp	r3, #100	; 0x64
 8004c6a:	d901      	bls.n	8004c70 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	e12a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c70:	4b76      	ldr	r3, [pc, #472]	; (8004e4c <HAL_RCC_OscConfig+0x4d4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0f0      	beq.n	8004c5e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d106      	bne.n	8004c92 <HAL_RCC_OscConfig+0x31a>
 8004c84:	4b70      	ldr	r3, [pc, #448]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c88:	4a6f      	ldr	r2, [pc, #444]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c8a:	f043 0301 	orr.w	r3, r3, #1
 8004c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c90:	e02d      	b.n	8004cee <HAL_RCC_OscConfig+0x376>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10c      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x33c>
 8004c9a:	4b6b      	ldr	r3, [pc, #428]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004c9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c9e:	4a6a      	ldr	r2, [pc, #424]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ca6:	4b68      	ldr	r3, [pc, #416]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	4a67      	ldr	r2, [pc, #412]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cac:	f023 0304 	bic.w	r3, r3, #4
 8004cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004cb2:	e01c      	b.n	8004cee <HAL_RCC_OscConfig+0x376>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b05      	cmp	r3, #5
 8004cba:	d10c      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x35e>
 8004cbc:	4b62      	ldr	r3, [pc, #392]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cc0:	4a61      	ldr	r2, [pc, #388]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cc2:	f043 0304 	orr.w	r3, r3, #4
 8004cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004cc8:	4b5f      	ldr	r3, [pc, #380]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	4a5e      	ldr	r2, [pc, #376]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cce:	f043 0301 	orr.w	r3, r3, #1
 8004cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8004cd4:	e00b      	b.n	8004cee <HAL_RCC_OscConfig+0x376>
 8004cd6:	4b5c      	ldr	r3, [pc, #368]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cda:	4a5b      	ldr	r2, [pc, #364]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004cdc:	f023 0301 	bic.w	r3, r3, #1
 8004ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ce2:	4b59      	ldr	r3, [pc, #356]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ce6:	4a58      	ldr	r2, [pc, #352]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004ce8:	f023 0304 	bic.w	r3, r3, #4
 8004cec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d015      	beq.n	8004d22 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf6:	f7fc ff17 	bl	8001b28 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cfc:	e00a      	b.n	8004d14 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cfe:	f7fc ff13 	bl	8001b28 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0d8      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d14:	4b4c      	ldr	r3, [pc, #304]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d18:	f003 0302 	and.w	r3, r3, #2
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d0ee      	beq.n	8004cfe <HAL_RCC_OscConfig+0x386>
 8004d20:	e014      	b.n	8004d4c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d22:	f7fc ff01 	bl	8001b28 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d28:	e00a      	b.n	8004d40 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d2a:	f7fc fefd 	bl	8001b28 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e0c2      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d40:	4b41      	ldr	r3, [pc, #260]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1ee      	bne.n	8004d2a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d105      	bne.n	8004d5e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d52:	4b3d      	ldr	r3, [pc, #244]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 80ae 	beq.w	8004ec4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f003 030c 	and.w	r3, r3, #12
 8004d70:	2b08      	cmp	r3, #8
 8004d72:	d06d      	beq.n	8004e50 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	699b      	ldr	r3, [r3, #24]
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d14b      	bne.n	8004e14 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d7c:	4b32      	ldr	r3, [pc, #200]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a31      	ldr	r2, [pc, #196]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fc fece 	bl	8001b28 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d8e:	e008      	b.n	8004da2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d90:	f7fc feca 	bl	8001b28 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d901      	bls.n	8004da2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e091      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004da2:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d1f0      	bne.n	8004d90 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69da      	ldr	r2, [r3, #28]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	431a      	orrs	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	019b      	lsls	r3, r3, #6
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	085b      	lsrs	r3, r3, #1
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	061b      	lsls	r3, r3, #24
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	071b      	lsls	r3, r3, #28
 8004dda:	491b      	ldr	r1, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de0:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dec:	f7fc fe9c 	bl	8001b28 <HAL_GetTick>
 8004df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	e008      	b.n	8004e06 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df4:	f7fc fe98 	bl	8001b28 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d901      	bls.n	8004e06 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	e05f      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e06:	4b10      	ldr	r3, [pc, #64]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d0f0      	beq.n	8004df4 <HAL_RCC_OscConfig+0x47c>
 8004e12:	e057      	b.n	8004ec4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e14:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a0b      	ldr	r2, [pc, #44]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e20:	f7fc fe82 	bl	8001b28 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fc fe7e 	bl	8001b28 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e045      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b03      	ldr	r3, [pc, #12]	; (8004e48 <HAL_RCC_OscConfig+0x4d0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x4b0>
 8004e46:	e03d      	b.n	8004ec4 <HAL_RCC_OscConfig+0x54c>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004e50:	4b1f      	ldr	r3, [pc, #124]	; (8004ed0 <HAL_RCC_OscConfig+0x558>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	699b      	ldr	r3, [r3, #24]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d030      	beq.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d129      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d122      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e80:	4013      	ands	r3, r2
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d119      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e96:	085b      	lsrs	r3, r3, #1
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d10f      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d107      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d001      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3718      	adds	r7, #24
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800

08004ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d101      	bne.n	8004eec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e0d0      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eec:	4b6a      	ldr	r3, [pc, #424]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	683a      	ldr	r2, [r7, #0]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d910      	bls.n	8004f1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efa:	4b67      	ldr	r3, [pc, #412]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f023 020f 	bic.w	r2, r3, #15
 8004f02:	4965      	ldr	r1, [pc, #404]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f0a:	4b63      	ldr	r3, [pc, #396]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 030f 	and.w	r3, r3, #15
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d001      	beq.n	8004f1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e0b8      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 0302 	and.w	r3, r3, #2
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d020      	beq.n	8004f6a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0304 	and.w	r3, r3, #4
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d005      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f34:	4b59      	ldr	r3, [pc, #356]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a58      	ldr	r2, [pc, #352]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f3e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f4c:	4b53      	ldr	r3, [pc, #332]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	4a52      	ldr	r2, [pc, #328]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f56:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f58:	4b50      	ldr	r3, [pc, #320]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	494d      	ldr	r1, [pc, #308]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d040      	beq.n	8004ff8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d115      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e07f      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f96:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d109      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e073      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0302 	and.w	r3, r3, #2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e06b      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f023 0203 	bic.w	r2, r3, #3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4936      	ldr	r1, [pc, #216]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fc8:	f7fc fdae 	bl	8001b28 <HAL_GetTick>
 8004fcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fce:	e00a      	b.n	8004fe6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fd0:	f7fc fdaa 	bl	8001b28 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e053      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 020c 	and.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d1eb      	bne.n	8004fd0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ff8:	4b27      	ldr	r3, [pc, #156]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 030f 	and.w	r3, r3, #15
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	429a      	cmp	r2, r3
 8005004:	d210      	bcs.n	8005028 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005006:	4b24      	ldr	r3, [pc, #144]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f023 020f 	bic.w	r2, r3, #15
 800500e:	4922      	ldr	r1, [pc, #136]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	4313      	orrs	r3, r2
 8005014:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005016:	4b20      	ldr	r3, [pc, #128]	; (8005098 <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	683a      	ldr	r2, [r7, #0]
 8005020:	429a      	cmp	r2, r3
 8005022:	d001      	beq.n	8005028 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e032      	b.n	800508e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d008      	beq.n	8005046 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	4916      	ldr	r1, [pc, #88]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005042:	4313      	orrs	r3, r2
 8005044:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0308 	and.w	r3, r3, #8
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005052:	4b12      	ldr	r3, [pc, #72]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	490e      	ldr	r1, [pc, #56]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	4313      	orrs	r3, r2
 8005064:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005066:	f000 f821 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800506a:	4602      	mov	r2, r0
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_ClockConfig+0x1c8>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	091b      	lsrs	r3, r3, #4
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	490a      	ldr	r1, [pc, #40]	; (80050a0 <HAL_RCC_ClockConfig+0x1cc>)
 8005078:	5ccb      	ldrb	r3, [r1, r3]
 800507a:	fa22 f303 	lsr.w	r3, r2, r3
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005080:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005082:	4b09      	ldr	r3, [pc, #36]	; (80050a8 <HAL_RCC_ClockConfig+0x1d4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f7fc fb60 	bl	800174c <HAL_InitTick>

  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40023c00 	.word	0x40023c00
 800509c:	40023800 	.word	0x40023800
 80050a0:	080199f4 	.word	0x080199f4
 80050a4:	20000000 	.word	0x20000000
 80050a8:	20000004 	.word	0x20000004

080050ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80050b0:	b084      	sub	sp, #16
 80050b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	607b      	str	r3, [r7, #4]
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	2300      	movs	r3, #0
 80050be:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050c4:	4b67      	ldr	r3, [pc, #412]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f003 030c 	and.w	r3, r3, #12
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d00d      	beq.n	80050ec <HAL_RCC_GetSysClockFreq+0x40>
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	f200 80bd 	bhi.w	8005250 <HAL_RCC_GetSysClockFreq+0x1a4>
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d002      	beq.n	80050e0 <HAL_RCC_GetSysClockFreq+0x34>
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d003      	beq.n	80050e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80050de:	e0b7      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80050e2:	60bb      	str	r3, [r7, #8]
      break;
 80050e4:	e0b7      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050e6:	4b61      	ldr	r3, [pc, #388]	; (800526c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80050e8:	60bb      	str	r3, [r7, #8]
      break;
 80050ea:	e0b4      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050ec:	4b5d      	ldr	r3, [pc, #372]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050f4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80050f6:	4b5b      	ldr	r3, [pc, #364]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d04d      	beq.n	800519e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005102:	4b58      	ldr	r3, [pc, #352]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	461a      	mov	r2, r3
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	ea02 0800 	and.w	r8, r2, r0
 800511a:	ea03 0901 	and.w	r9, r3, r1
 800511e:	4640      	mov	r0, r8
 8005120:	4649      	mov	r1, r9
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	014b      	lsls	r3, r1, #5
 800512c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005130:	0142      	lsls	r2, r0, #5
 8005132:	4610      	mov	r0, r2
 8005134:	4619      	mov	r1, r3
 8005136:	ebb0 0008 	subs.w	r0, r0, r8
 800513a:	eb61 0109 	sbc.w	r1, r1, r9
 800513e:	f04f 0200 	mov.w	r2, #0
 8005142:	f04f 0300 	mov.w	r3, #0
 8005146:	018b      	lsls	r3, r1, #6
 8005148:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800514c:	0182      	lsls	r2, r0, #6
 800514e:	1a12      	subs	r2, r2, r0
 8005150:	eb63 0301 	sbc.w	r3, r3, r1
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	00d9      	lsls	r1, r3, #3
 800515e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005162:	00d0      	lsls	r0, r2, #3
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	eb12 0208 	adds.w	r2, r2, r8
 800516c:	eb43 0309 	adc.w	r3, r3, r9
 8005170:	f04f 0000 	mov.w	r0, #0
 8005174:	f04f 0100 	mov.w	r1, #0
 8005178:	0259      	lsls	r1, r3, #9
 800517a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800517e:	0250      	lsls	r0, r2, #9
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4610      	mov	r0, r2
 8005186:	4619      	mov	r1, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	461a      	mov	r2, r3
 800518c:	f04f 0300 	mov.w	r3, #0
 8005190:	f7fb f8a6 	bl	80002e0 <__aeabi_uldivmod>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4613      	mov	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	e04a      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800519e:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	099b      	lsrs	r3, r3, #6
 80051a4:	461a      	mov	r2, r3
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	ea02 0400 	and.w	r4, r2, r0
 80051b6:	ea03 0501 	and.w	r5, r3, r1
 80051ba:	4620      	mov	r0, r4
 80051bc:	4629      	mov	r1, r5
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	014b      	lsls	r3, r1, #5
 80051c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051cc:	0142      	lsls	r2, r0, #5
 80051ce:	4610      	mov	r0, r2
 80051d0:	4619      	mov	r1, r3
 80051d2:	1b00      	subs	r0, r0, r4
 80051d4:	eb61 0105 	sbc.w	r1, r1, r5
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	018b      	lsls	r3, r1, #6
 80051e2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051e6:	0182      	lsls	r2, r0, #6
 80051e8:	1a12      	subs	r2, r2, r0
 80051ea:	eb63 0301 	sbc.w	r3, r3, r1
 80051ee:	f04f 0000 	mov.w	r0, #0
 80051f2:	f04f 0100 	mov.w	r1, #0
 80051f6:	00d9      	lsls	r1, r3, #3
 80051f8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051fc:	00d0      	lsls	r0, r2, #3
 80051fe:	4602      	mov	r2, r0
 8005200:	460b      	mov	r3, r1
 8005202:	1912      	adds	r2, r2, r4
 8005204:	eb45 0303 	adc.w	r3, r5, r3
 8005208:	f04f 0000 	mov.w	r0, #0
 800520c:	f04f 0100 	mov.w	r1, #0
 8005210:	0299      	lsls	r1, r3, #10
 8005212:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005216:	0290      	lsls	r0, r2, #10
 8005218:	4602      	mov	r2, r0
 800521a:	460b      	mov	r3, r1
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f7fb f85a 	bl	80002e0 <__aeabi_uldivmod>
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4613      	mov	r3, r2
 8005232:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005234:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	0c1b      	lsrs	r3, r3, #16
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	3301      	adds	r3, #1
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	fbb2 f3f3 	udiv	r3, r2, r3
 800524c:	60bb      	str	r3, [r7, #8]
      break;
 800524e:	e002      	b.n	8005256 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005250:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005252:	60bb      	str	r3, [r7, #8]
      break;
 8005254:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005256:	68bb      	ldr	r3, [r7, #8]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005262:	bf00      	nop
 8005264:	40023800 	.word	0x40023800
 8005268:	00f42400 	.word	0x00f42400
 800526c:	007a1200 	.word	0x007a1200

08005270 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <HAL_RCC_GetHCLKFreq+0x14>)
 8005276:	681b      	ldr	r3, [r3, #0]
}
 8005278:	4618      	mov	r0, r3
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	20000000 	.word	0x20000000

08005288 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800528c:	f7ff fff0 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 8005290:	4602      	mov	r2, r0
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	0a9b      	lsrs	r3, r3, #10
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	4903      	ldr	r1, [pc, #12]	; (80052ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800529e:	5ccb      	ldrb	r3, [r1, r3]
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40023800 	.word	0x40023800
 80052ac:	08019a04 	.word	0x08019a04

080052b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052b4:	f7ff ffdc 	bl	8005270 <HAL_RCC_GetHCLKFreq>
 80052b8:	4602      	mov	r2, r0
 80052ba:	4b05      	ldr	r3, [pc, #20]	; (80052d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	0b5b      	lsrs	r3, r3, #13
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	4903      	ldr	r1, [pc, #12]	; (80052d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052c6:	5ccb      	ldrb	r3, [r1, r3]
 80052c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	40023800 	.word	0x40023800
 80052d4:	08019a04 	.word	0x08019a04

080052d8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	220f      	movs	r2, #15
 80052e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80052e8:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCC_GetClockConfig+0x5c>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0203 	and.w	r2, r3, #3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80052f4:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <HAL_RCC_GetClockConfig+0x5c>)
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_RCC_GetClockConfig+0x5c>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800530c:	4b09      	ldr	r3, [pc, #36]	; (8005334 <HAL_RCC_GetClockConfig+0x5c>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	08db      	lsrs	r3, r3, #3
 8005312:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800531a:	4b07      	ldr	r3, [pc, #28]	; (8005338 <HAL_RCC_GetClockConfig+0x60>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 020f 	and.w	r2, r3, #15
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	601a      	str	r2, [r3, #0]
}
 8005326:	bf00      	nop
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800
 8005338:	40023c00 	.word	0x40023c00

0800533c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b088      	sub	sp, #32
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005348:	2300      	movs	r3, #0
 800534a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800534c:	2300      	movs	r3, #0
 800534e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d012      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005364:	4b69      	ldr	r3, [pc, #420]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	4a68      	ldr	r2, [pc, #416]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800536e:	6093      	str	r3, [r2, #8]
 8005370:	4b66      	ldr	r3, [pc, #408]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005378:	4964      	ldr	r1, [pc, #400]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537a:	4313      	orrs	r3, r2
 800537c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005386:	2301      	movs	r3, #1
 8005388:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005392:	2b00      	cmp	r3, #0
 8005394:	d017      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005396:	4b5d      	ldr	r3, [pc, #372]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053a4:	4959      	ldr	r1, [pc, #356]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053a6:	4313      	orrs	r3, r2
 80053a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053b4:	d101      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80053c2:	2301      	movs	r3, #1
 80053c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d017      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053d2:	4b4e      	ldr	r3, [pc, #312]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	494a      	ldr	r1, [pc, #296]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053f0:	d101      	bne.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80053f2:	2301      	movs	r3, #1
 80053f4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80053fe:	2301      	movs	r3, #1
 8005400:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800540e:	2301      	movs	r3, #1
 8005410:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0320 	and.w	r3, r3, #32
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 808b 	beq.w	8005536 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005420:	4b3a      	ldr	r3, [pc, #232]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	4a39      	ldr	r2, [pc, #228]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800542a:	6413      	str	r3, [r2, #64]	; 0x40
 800542c:	4b37      	ldr	r3, [pc, #220]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800542e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	60bb      	str	r3, [r7, #8]
 8005436:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005438:	4b35      	ldr	r3, [pc, #212]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a34      	ldr	r2, [pc, #208]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800543e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005442:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005444:	f7fc fb70 	bl	8001b28 <HAL_GetTick>
 8005448:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800544a:	e008      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800544c:	f7fc fb6c 	bl	8001b28 <HAL_GetTick>
 8005450:	4602      	mov	r2, r0
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	1ad3      	subs	r3, r2, r3
 8005456:	2b64      	cmp	r3, #100	; 0x64
 8005458:	d901      	bls.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e38f      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800545e:	4b2c      	ldr	r3, [pc, #176]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0f0      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800546a:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800546e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005472:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d035      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	429a      	cmp	r2, r3
 8005486:	d02e      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005488:	4b20      	ldr	r3, [pc, #128]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800548a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005490:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005492:	4b1e      	ldr	r3, [pc, #120]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4a1d      	ldr	r2, [pc, #116]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800549e:	4b1b      	ldr	r3, [pc, #108]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a2:	4a1a      	ldr	r2, [pc, #104]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80054aa:	4a18      	ldr	r2, [pc, #96]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054b0:	4b16      	ldr	r3, [pc, #88]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054b4:	f003 0301 	and.w	r3, r3, #1
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d114      	bne.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054bc:	f7fc fb34 	bl	8001b28 <HAL_GetTick>
 80054c0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054c2:	e00a      	b.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80054c4:	f7fc fb30 	bl	8001b28 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d901      	bls.n	80054da <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e351      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054da:	4b0c      	ldr	r3, [pc, #48]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054de:	f003 0302 	and.w	r3, r3, #2
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0ee      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f2:	d111      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80054f4:	4b05      	ldr	r3, [pc, #20]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005500:	4b04      	ldr	r3, [pc, #16]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005502:	400b      	ands	r3, r1
 8005504:	4901      	ldr	r1, [pc, #4]	; (800550c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005506:	4313      	orrs	r3, r2
 8005508:	608b      	str	r3, [r1, #8]
 800550a:	e00b      	b.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800550c:	40023800 	.word	0x40023800
 8005510:	40007000 	.word	0x40007000
 8005514:	0ffffcff 	.word	0x0ffffcff
 8005518:	4bb3      	ldr	r3, [pc, #716]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4ab2      	ldr	r2, [pc, #712]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800551e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005522:	6093      	str	r3, [r2, #8]
 8005524:	4bb0      	ldr	r3, [pc, #704]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005526:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005530:	49ad      	ldr	r1, [pc, #692]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005532:	4313      	orrs	r3, r2
 8005534:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0310 	and.w	r3, r3, #16
 800553e:	2b00      	cmp	r3, #0
 8005540:	d010      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005542:	4ba9      	ldr	r3, [pc, #676]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005544:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005548:	4aa7      	ldr	r2, [pc, #668]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800554a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800554e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005552:	4ba5      	ldr	r3, [pc, #660]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005554:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800555c:	49a2      	ldr	r1, [pc, #648]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005570:	4b9d      	ldr	r3, [pc, #628]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800557e:	499a      	ldr	r1, [pc, #616]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00a      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005592:	4b95      	ldr	r3, [pc, #596]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a0:	4991      	ldr	r1, [pc, #580]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00a      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80055b4:	4b8c      	ldr	r3, [pc, #560]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c2:	4989      	ldr	r1, [pc, #548]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00a      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80055d6:	4b84      	ldr	r3, [pc, #528]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e4:	4980      	ldr	r1, [pc, #512]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e6:	4313      	orrs	r3, r2
 80055e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00a      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80055f8:	4b7b      	ldr	r3, [pc, #492]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	f023 0203 	bic.w	r2, r3, #3
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005606:	4978      	ldr	r1, [pc, #480]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005608:	4313      	orrs	r3, r2
 800560a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d00a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800561a:	4b73      	ldr	r3, [pc, #460]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005620:	f023 020c 	bic.w	r2, r3, #12
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005628:	496f      	ldr	r1, [pc, #444]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00a      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800563c:	4b6a      	ldr	r3, [pc, #424]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800563e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005642:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800564a:	4967      	ldr	r1, [pc, #412]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00a      	beq.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800565e:	4b62      	ldr	r3, [pc, #392]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005664:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566c:	495e      	ldr	r1, [pc, #376]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	4313      	orrs	r3, r2
 8005670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005680:	4b59      	ldr	r3, [pc, #356]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568e:	4956      	ldr	r1, [pc, #344]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005690:	4313      	orrs	r3, r2
 8005692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d00a      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80056a2:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b0:	494d      	ldr	r1, [pc, #308]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80056c4:	4b48      	ldr	r3, [pc, #288]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d2:	4945      	ldr	r1, [pc, #276]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d4:	4313      	orrs	r3, r2
 80056d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d00a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80056e6:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f4:	493c      	ldr	r1, [pc, #240]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00a      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005708:	4b37      	ldr	r3, [pc, #220]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800570a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005716:	4934      	ldr	r1, [pc, #208]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d011      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800572c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005730:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005738:	492b      	ldr	r1, [pc, #172]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573a:	4313      	orrs	r3, r2
 800573c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005748:	d101      	bne.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800574a:	2301      	movs	r3, #1
 800574c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0308 	and.w	r3, r3, #8
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800575a:	2301      	movs	r3, #1
 800575c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800576a:	4b1f      	ldr	r3, [pc, #124]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005770:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005778:	491b      	ldr	r1, [pc, #108]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00b      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800578c:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005792:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800579c:	4912      	ldr	r1, [pc, #72]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d00b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80057b0:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057b6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057c0:	4909      	ldr	r1, [pc, #36]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00f      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80057d4:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e4:	e002      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80057e6:	bf00      	nop
 80057e8:	40023800 	.word	0x40023800
 80057ec:	4986      	ldr	r1, [pc, #536]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005800:	4b81      	ldr	r3, [pc, #516]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005802:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005810:	497d      	ldr	r1, [pc, #500]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d006      	beq.n	800582c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 80d6 	beq.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800582c:	4b76      	ldr	r3, [pc, #472]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a75      	ldr	r2, [pc, #468]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005832:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005836:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005838:	f7fc f976 	bl	8001b28 <HAL_GetTick>
 800583c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800583e:	e008      	b.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005840:	f7fc f972 	bl	8001b28 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b64      	cmp	r3, #100	; 0x64
 800584c:	d901      	bls.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e195      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005852:	4b6d      	ldr	r3, [pc, #436]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1f0      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	d021      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x572>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800586e:	2b00      	cmp	r3, #0
 8005870:	d11d      	bne.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005872:	4b65      	ldr	r3, [pc, #404]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005874:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005880:	4b61      	ldr	r3, [pc, #388]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005886:	0e1b      	lsrs	r3, r3, #24
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	019a      	lsls	r2, r3, #6
 8005894:	693b      	ldr	r3, [r7, #16]
 8005896:	041b      	lsls	r3, r3, #16
 8005898:	431a      	orrs	r2, r3
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	061b      	lsls	r3, r3, #24
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	071b      	lsls	r3, r3, #28
 80058a6:	4958      	ldr	r1, [pc, #352]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d004      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058c2:	d00a      	beq.n	80058da <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d02e      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d8:	d129      	bne.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058da:	4b4b      	ldr	r3, [pc, #300]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0303 	and.w	r3, r3, #3
 80058e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058e8:	4b47      	ldr	r3, [pc, #284]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ee:	0f1b      	lsrs	r3, r3, #28
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	019a      	lsls	r2, r3, #6
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	041b      	lsls	r3, r3, #16
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	061b      	lsls	r3, r3, #24
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	071b      	lsls	r3, r3, #28
 800590e:	493e      	ldr	r1, [pc, #248]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005910:	4313      	orrs	r3, r2
 8005912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005916:	4b3c      	ldr	r3, [pc, #240]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800591c:	f023 021f 	bic.w	r2, r3, #31
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005924:	3b01      	subs	r3, #1
 8005926:	4938      	ldr	r1, [pc, #224]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d01d      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800593a:	4b33      	ldr	r3, [pc, #204]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800593c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005940:	0e1b      	lsrs	r3, r3, #24
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005948:	4b2f      	ldr	r3, [pc, #188]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800594a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800594e:	0f1b      	lsrs	r3, r3, #28
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	019a      	lsls	r2, r3, #6
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	041b      	lsls	r3, r3, #16
 8005962:	431a      	orrs	r2, r3
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	061b      	lsls	r3, r3, #24
 8005968:	431a      	orrs	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	071b      	lsls	r3, r3, #28
 800596e:	4926      	ldr	r1, [pc, #152]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d011      	beq.n	80059a6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	019a      	lsls	r2, r3, #6
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	041b      	lsls	r3, r3, #16
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	061b      	lsls	r3, r3, #24
 8005996:	431a      	orrs	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	071b      	lsls	r3, r3, #28
 800599e:	491a      	ldr	r1, [pc, #104]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a0:	4313      	orrs	r3, r2
 80059a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059a6:	4b18      	ldr	r3, [pc, #96]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a17      	ldr	r2, [pc, #92]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059b2:	f7fc f8b9 	bl	8001b28 <HAL_GetTick>
 80059b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059b8:	e008      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059ba:	f7fc f8b5 	bl	8001b28 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b64      	cmp	r3, #100	; 0x64
 80059c6:	d901      	bls.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e0d8      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0f0      	beq.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b01      	cmp	r3, #1
 80059dc:	f040 80ce 	bne.w	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e0:	4b09      	ldr	r3, [pc, #36]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a08      	ldr	r2, [pc, #32]	; (8005a08 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ec:	f7fc f89c 	bl	8001b28 <HAL_GetTick>
 80059f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f2:	e00b      	b.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f4:	f7fc f898 	bl	8001b28 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	2b64      	cmp	r3, #100	; 0x64
 8005a00:	d904      	bls.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e0bb      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a0c:	4b5e      	ldr	r3, [pc, #376]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a18:	d0ec      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d003      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d009      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d02e      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d12a      	bne.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a42:	4b51      	ldr	r3, [pc, #324]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	0c1b      	lsrs	r3, r3, #16
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a50:	4b4d      	ldr	r3, [pc, #308]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a56:	0f1b      	lsrs	r3, r3, #28
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	019a      	lsls	r2, r3, #6
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	041b      	lsls	r3, r3, #16
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	061b      	lsls	r3, r3, #24
 8005a70:	431a      	orrs	r2, r3
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	071b      	lsls	r3, r3, #28
 8005a76:	4944      	ldr	r1, [pc, #272]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a7e:	4b42      	ldr	r3, [pc, #264]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a84:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	021b      	lsls	r3, r3, #8
 8005a90:	493d      	ldr	r1, [pc, #244]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d022      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aa8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aac:	d11d      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005aae:	4b36      	ldr	r3, [pc, #216]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab4:	0e1b      	lsrs	r3, r3, #24
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005abc:	4b32      	ldr	r3, [pc, #200]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	0f1b      	lsrs	r3, r3, #28
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	019a      	lsls	r2, r3, #6
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	041b      	lsls	r3, r3, #16
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	061b      	lsls	r3, r3, #24
 8005adc:	431a      	orrs	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	4929      	ldr	r1, [pc, #164]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d028      	beq.n	8005b48 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005af6:	4b24      	ldr	r3, [pc, #144]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afc:	0e1b      	lsrs	r3, r3, #24
 8005afe:	f003 030f 	and.w	r3, r3, #15
 8005b02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b04:	4b20      	ldr	r3, [pc, #128]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	0c1b      	lsrs	r3, r3, #16
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	019a      	lsls	r2, r3, #6
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	061b      	lsls	r3, r3, #24
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	69db      	ldr	r3, [r3, #28]
 8005b28:	071b      	lsls	r3, r3, #28
 8005b2a:	4917      	ldr	r1, [pc, #92]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4911      	ldr	r1, [pc, #68]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b48:	4b0f      	ldr	r3, [pc, #60]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a0e      	ldr	r2, [pc, #56]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b54:	f7fb ffe8 	bl	8001b28 <HAL_GetTick>
 8005b58:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b5a:	e008      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b5c:	f7fb ffe4 	bl	8001b28 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	2b64      	cmp	r3, #100	; 0x64
 8005b68:	d901      	bls.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e007      	b.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b6e:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b7a:	d1ef      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3720      	adds	r7, #32
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	40023800 	.word	0x40023800

08005b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d101      	bne.n	8005b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e049      	b.n	8005c32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 f841 	bl	8005c3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681a      	ldr	r2, [r3, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	3304      	adds	r3, #4
 8005bc8:	4619      	mov	r1, r3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	f000 fc12 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
	...

08005c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d001      	beq.n	8005c68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	e054      	b.n	8005d12 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a26      	ldr	r2, [pc, #152]	; (8005d20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d022      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c92:	d01d      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a22      	ldr	r2, [pc, #136]	; (8005d24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d018      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a21      	ldr	r2, [pc, #132]	; (8005d28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1f      	ldr	r2, [pc, #124]	; (8005d2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a1e      	ldr	r2, [pc, #120]	; (8005d30 <HAL_TIM_Base_Start_IT+0xe0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d009      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <HAL_TIM_Base_Start_IT+0xe4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d004      	beq.n	8005cd0 <HAL_TIM_Base_Start_IT+0x80>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a1b      	ldr	r2, [pc, #108]	; (8005d38 <HAL_TIM_Base_Start_IT+0xe8>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d115      	bne.n	8005cfc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689a      	ldr	r2, [r3, #8]
 8005cd6:	4b19      	ldr	r3, [pc, #100]	; (8005d3c <HAL_TIM_Base_Start_IT+0xec>)
 8005cd8:	4013      	ands	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	2b06      	cmp	r3, #6
 8005ce0:	d015      	beq.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d011      	beq.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0201 	orr.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cfa:	e008      	b.n	8005d0e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0201 	orr.w	r2, r2, #1
 8005d0a:	601a      	str	r2, [r3, #0]
 8005d0c:	e000      	b.n	8005d10 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d0e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3714      	adds	r7, #20
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40010000 	.word	0x40010000
 8005d24:	40000400 	.word	0x40000400
 8005d28:	40000800 	.word	0x40000800
 8005d2c:	40000c00 	.word	0x40000c00
 8005d30:	40010400 	.word	0x40010400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40001800 	.word	0x40001800
 8005d3c:	00010007 	.word	0x00010007

08005d40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e049      	b.n	8005de6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d106      	bne.n	8005d6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7fb fb94 	bl	8001494 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	f000 fb38 	bl	80063f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005de4:	2300      	movs	r3, #0
}
 8005de6:	4618      	mov	r0, r3
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
	...

08005df0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e08f      	b.n	8005f24 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0a:	b2db      	uxtb	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d106      	bne.n	8005e1e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f7fb fa91 	bl	8001340 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6899      	ldr	r1, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	4b3e      	ldr	r3, [pc, #248]	; (8005f2c <HAL_TIM_Encoder_Init+0x13c>)
 8005e32:	400b      	ands	r3, r1
 8005e34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4610      	mov	r0, r2
 8005e42:	f000 fad7 	bl	80063f4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	699b      	ldr	r3, [r3, #24]
 8005e54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4b31      	ldr	r3, [pc, #196]	; (8005f30 <HAL_TIM_Encoder_Init+0x140>)
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	693a      	ldr	r2, [r7, #16]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	4b2b      	ldr	r3, [pc, #172]	; (8005f34 <HAL_TIM_Encoder_Init+0x144>)
 8005e86:	4013      	ands	r3, r2
 8005e88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e8a:	693a      	ldr	r2, [r7, #16]
 8005e8c:	4b2a      	ldr	r3, [pc, #168]	; (8005f38 <HAL_TIM_Encoder_Init+0x148>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	68da      	ldr	r2, [r3, #12]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	4313      	orrs	r3, r2
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	031b      	lsls	r3, r3, #12
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005ebe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005ec6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685a      	ldr	r2, [r3, #4]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	693a      	ldr	r2, [r7, #16]
 8005ee8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68fa      	ldr	r2, [r7, #12]
 8005ef0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2201      	movs	r2, #1
 8005f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	fffebff8 	.word	0xfffebff8
 8005f30:	fffffcfc 	.word	0xfffffcfc
 8005f34:	fffff3f3 	.word	0xfffff3f3
 8005f38:	ffff0f0f 	.word	0xffff0f0f

08005f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b082      	sub	sp, #8
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	f003 0302 	and.w	r3, r3, #2
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d122      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	f003 0302 	and.w	r3, r3, #2
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d11b      	bne.n	8005f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0202 	mvn.w	r2, #2
 8005f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d003      	beq.n	8005f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fa1a 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 8005f84:	e005      	b.n	8005f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fa0c 	bl	80063a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa1d 	bl	80063cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d122      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	f003 0304 	and.w	r3, r3, #4
 8005fb0:	2b04      	cmp	r3, #4
 8005fb2:	d11b      	bne.n	8005fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f06f 0204 	mvn.w	r2, #4
 8005fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2202      	movs	r2, #2
 8005fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d003      	beq.n	8005fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f9f0 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 8005fd8:	e005      	b.n	8005fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f9e2 	bl	80063a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f9f3 	bl	80063cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0308 	and.w	r3, r3, #8
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d122      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0308 	and.w	r3, r3, #8
 8006004:	2b08      	cmp	r3, #8
 8006006:	d11b      	bne.n	8006040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0208 	mvn.w	r2, #8
 8006010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2204      	movs	r2, #4
 8006016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	69db      	ldr	r3, [r3, #28]
 800601e:	f003 0303 	and.w	r3, r3, #3
 8006022:	2b00      	cmp	r3, #0
 8006024:	d003      	beq.n	800602e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 f9c6 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 800602c:	e005      	b.n	800603a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f9b8 	bl	80063a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 f9c9 	bl	80063cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b10      	cmp	r3, #16
 800604c:	d122      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f003 0310 	and.w	r3, r3, #16
 8006058:	2b10      	cmp	r3, #16
 800605a:	d11b      	bne.n	8006094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f06f 0210 	mvn.w	r2, #16
 8006064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2208      	movs	r2, #8
 800606a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69db      	ldr	r3, [r3, #28]
 8006072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 f99c 	bl	80063b8 <HAL_TIM_IC_CaptureCallback>
 8006080:	e005      	b.n	800608e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 f98e 	bl	80063a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f99f 	bl	80063cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	f003 0301 	and.w	r3, r3, #1
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d10e      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	68db      	ldr	r3, [r3, #12]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d107      	bne.n	80060c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f06f 0201 	mvn.w	r2, #1
 80060b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fa ffd2 	bl	8001064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d10e      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	2b80      	cmp	r3, #128	; 0x80
 80060da:	d107      	bne.n	80060ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fd1a 	bl	8006b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060fa:	d10e      	bne.n	800611a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006106:	2b80      	cmp	r3, #128	; 0x80
 8006108:	d107      	bne.n	800611a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fd0d 	bl	8006b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006124:	2b40      	cmp	r3, #64	; 0x40
 8006126:	d10e      	bne.n	8006146 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006132:	2b40      	cmp	r3, #64	; 0x40
 8006134:	d107      	bne.n	8006146 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800613e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f94d 	bl	80063e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	691b      	ldr	r3, [r3, #16]
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b20      	cmp	r3, #32
 8006152:	d10e      	bne.n	8006172 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	68db      	ldr	r3, [r3, #12]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b20      	cmp	r3, #32
 8006160:	d107      	bne.n	8006172 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f06f 0220 	mvn.w	r2, #32
 800616a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fccd 	bl	8006b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006172:	bf00      	nop
 8006174:	3708      	adds	r7, #8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
	...

0800617c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b086      	sub	sp, #24
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006188:	2300      	movs	r3, #0
 800618a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006196:	2302      	movs	r3, #2
 8006198:	e0ff      	b.n	800639a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2201      	movs	r2, #1
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b14      	cmp	r3, #20
 80061a6:	f200 80f0 	bhi.w	800638a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	08006205 	.word	0x08006205
 80061b4:	0800638b 	.word	0x0800638b
 80061b8:	0800638b 	.word	0x0800638b
 80061bc:	0800638b 	.word	0x0800638b
 80061c0:	08006245 	.word	0x08006245
 80061c4:	0800638b 	.word	0x0800638b
 80061c8:	0800638b 	.word	0x0800638b
 80061cc:	0800638b 	.word	0x0800638b
 80061d0:	08006287 	.word	0x08006287
 80061d4:	0800638b 	.word	0x0800638b
 80061d8:	0800638b 	.word	0x0800638b
 80061dc:	0800638b 	.word	0x0800638b
 80061e0:	080062c7 	.word	0x080062c7
 80061e4:	0800638b 	.word	0x0800638b
 80061e8:	0800638b 	.word	0x0800638b
 80061ec:	0800638b 	.word	0x0800638b
 80061f0:	08006309 	.word	0x08006309
 80061f4:	0800638b 	.word	0x0800638b
 80061f8:	0800638b 	.word	0x0800638b
 80061fc:	0800638b 	.word	0x0800638b
 8006200:	08006349 	.word	0x08006349
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68b9      	ldr	r1, [r7, #8]
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f992 	bl	8006534 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0208 	orr.w	r2, r2, #8
 800621e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f022 0204 	bic.w	r2, r2, #4
 800622e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6999      	ldr	r1, [r3, #24]
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	691a      	ldr	r2, [r3, #16]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	430a      	orrs	r2, r1
 8006240:	619a      	str	r2, [r3, #24]
      break;
 8006242:	e0a5      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	4618      	mov	r0, r3
 800624c:	f000 f9e4 	bl	8006618 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	699a      	ldr	r2, [r3, #24]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	699a      	ldr	r2, [r3, #24]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6999      	ldr	r1, [r3, #24]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	021a      	lsls	r2, r3, #8
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	430a      	orrs	r2, r1
 8006282:	619a      	str	r2, [r3, #24]
      break;
 8006284:	e084      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68b9      	ldr	r1, [r7, #8]
 800628c:	4618      	mov	r0, r3
 800628e:	f000 fa3b 	bl	8006708 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	69da      	ldr	r2, [r3, #28]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f042 0208 	orr.w	r2, r2, #8
 80062a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	69da      	ldr	r2, [r3, #28]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0204 	bic.w	r2, r2, #4
 80062b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69d9      	ldr	r1, [r3, #28]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	61da      	str	r2, [r3, #28]
      break;
 80062c4:	e064      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 fa91 	bl	80067f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69da      	ldr	r2, [r3, #28]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	69d9      	ldr	r1, [r3, #28]
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	021a      	lsls	r2, r3, #8
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	61da      	str	r2, [r3, #28]
      break;
 8006306:	e043      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	68b9      	ldr	r1, [r7, #8]
 800630e:	4618      	mov	r0, r3
 8006310:	f000 fac8 	bl	80068a4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0208 	orr.w	r2, r2, #8
 8006322:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0204 	bic.w	r2, r2, #4
 8006332:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006346:	e023      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68b9      	ldr	r1, [r7, #8]
 800634e:	4618      	mov	r0, r3
 8006350:	f000 fafa 	bl	8006948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006362:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006372:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	021a      	lsls	r2, r3, #8
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006388:	e002      	b.n	8006390 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	75fb      	strb	r3, [r7, #23]
      break;
 800638e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006398:	7dfb      	ldrb	r3, [r7, #23]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop

080063a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b083      	sub	sp, #12
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b085      	sub	sp, #20
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	4a40      	ldr	r2, [pc, #256]	; (8006508 <TIM_Base_SetConfig+0x114>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d013      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006412:	d00f      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a3d      	ldr	r2, [pc, #244]	; (800650c <TIM_Base_SetConfig+0x118>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d00b      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a3c      	ldr	r2, [pc, #240]	; (8006510 <TIM_Base_SetConfig+0x11c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d007      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a3b      	ldr	r2, [pc, #236]	; (8006514 <TIM_Base_SetConfig+0x120>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d003      	beq.n	8006434 <TIM_Base_SetConfig+0x40>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a3a      	ldr	r2, [pc, #232]	; (8006518 <TIM_Base_SetConfig+0x124>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d108      	bne.n	8006446 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	4a2f      	ldr	r2, [pc, #188]	; (8006508 <TIM_Base_SetConfig+0x114>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d02b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006454:	d027      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a2c      	ldr	r2, [pc, #176]	; (800650c <TIM_Base_SetConfig+0x118>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d023      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a2b      	ldr	r2, [pc, #172]	; (8006510 <TIM_Base_SetConfig+0x11c>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01f      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <TIM_Base_SetConfig+0x120>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d01b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a29      	ldr	r2, [pc, #164]	; (8006518 <TIM_Base_SetConfig+0x124>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d017      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a28      	ldr	r2, [pc, #160]	; (800651c <TIM_Base_SetConfig+0x128>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a27      	ldr	r2, [pc, #156]	; (8006520 <TIM_Base_SetConfig+0x12c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a26      	ldr	r2, [pc, #152]	; (8006524 <TIM_Base_SetConfig+0x130>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a25      	ldr	r2, [pc, #148]	; (8006528 <TIM_Base_SetConfig+0x134>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a24      	ldr	r2, [pc, #144]	; (800652c <TIM_Base_SetConfig+0x138>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_Base_SetConfig+0xb2>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a23      	ldr	r2, [pc, #140]	; (8006530 <TIM_Base_SetConfig+0x13c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d108      	bne.n	80064b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	689a      	ldr	r2, [r3, #8]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a0a      	ldr	r2, [pc, #40]	; (8006508 <TIM_Base_SetConfig+0x114>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d003      	beq.n	80064ec <TIM_Base_SetConfig+0xf8>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4a0c      	ldr	r2, [pc, #48]	; (8006518 <TIM_Base_SetConfig+0x124>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d103      	bne.n	80064f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	691a      	ldr	r2, [r3, #16]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	615a      	str	r2, [r3, #20]
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	40010000 	.word	0x40010000
 800650c:	40000400 	.word	0x40000400
 8006510:	40000800 	.word	0x40000800
 8006514:	40000c00 	.word	0x40000c00
 8006518:	40010400 	.word	0x40010400
 800651c:	40014000 	.word	0x40014000
 8006520:	40014400 	.word	0x40014400
 8006524:	40014800 	.word	0x40014800
 8006528:	40001800 	.word	0x40001800
 800652c:	40001c00 	.word	0x40001c00
 8006530:	40002000 	.word	0x40002000

08006534 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6a1b      	ldr	r3, [r3, #32]
 8006542:	f023 0201 	bic.w	r2, r3, #1
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a1b      	ldr	r3, [r3, #32]
 800654e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	699b      	ldr	r3, [r3, #24]
 800655a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4b2b      	ldr	r3, [pc, #172]	; (800660c <TIM_OC1_SetConfig+0xd8>)
 8006560:	4013      	ands	r3, r2
 8006562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f023 0303 	bic.w	r3, r3, #3
 800656a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	f023 0302 	bic.w	r3, r3, #2
 800657c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a21      	ldr	r2, [pc, #132]	; (8006610 <TIM_OC1_SetConfig+0xdc>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d003      	beq.n	8006598 <TIM_OC1_SetConfig+0x64>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a20      	ldr	r2, [pc, #128]	; (8006614 <TIM_OC1_SetConfig+0xe0>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d10c      	bne.n	80065b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	f023 0308 	bic.w	r3, r3, #8
 800659e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f023 0304 	bic.w	r3, r3, #4
 80065b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <TIM_OC1_SetConfig+0xdc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d003      	beq.n	80065c2 <TIM_OC1_SetConfig+0x8e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <TIM_OC1_SetConfig+0xe0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d111      	bne.n	80065e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	693a      	ldr	r2, [r7, #16]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	685a      	ldr	r2, [r3, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	621a      	str	r2, [r3, #32]
}
 8006600:	bf00      	nop
 8006602:	371c      	adds	r7, #28
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	fffeff8f 	.word	0xfffeff8f
 8006610:	40010000 	.word	0x40010000
 8006614:	40010400 	.word	0x40010400

08006618 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	f023 0210 	bic.w	r2, r3, #16
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a1b      	ldr	r3, [r3, #32]
 8006632:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	4b2e      	ldr	r3, [pc, #184]	; (80066fc <TIM_OC2_SetConfig+0xe4>)
 8006644:	4013      	ands	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	021b      	lsls	r3, r3, #8
 8006656:	68fa      	ldr	r2, [r7, #12]
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	f023 0320 	bic.w	r3, r3, #32
 8006662:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	4313      	orrs	r3, r2
 800666e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4a23      	ldr	r2, [pc, #140]	; (8006700 <TIM_OC2_SetConfig+0xe8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d003      	beq.n	8006680 <TIM_OC2_SetConfig+0x68>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	4a22      	ldr	r2, [pc, #136]	; (8006704 <TIM_OC2_SetConfig+0xec>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d10d      	bne.n	800669c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	011b      	lsls	r3, r3, #4
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	4313      	orrs	r3, r2
 8006692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800669a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a18      	ldr	r2, [pc, #96]	; (8006700 <TIM_OC2_SetConfig+0xe8>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_OC2_SetConfig+0x94>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a17      	ldr	r2, [pc, #92]	; (8006704 <TIM_OC2_SetConfig+0xec>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d113      	bne.n	80066d4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	695b      	ldr	r3, [r3, #20]
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	693a      	ldr	r2, [r7, #16]
 80066d0:	4313      	orrs	r3, r2
 80066d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	685a      	ldr	r2, [r3, #4]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	621a      	str	r2, [r3, #32]
}
 80066ee:	bf00      	nop
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	feff8fff 	.word	0xfeff8fff
 8006700:	40010000 	.word	0x40010000
 8006704:	40010400 	.word	0x40010400

08006708 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4b2d      	ldr	r3, [pc, #180]	; (80067e8 <TIM_OC3_SetConfig+0xe0>)
 8006734:	4013      	ands	r3, r2
 8006736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0303 	bic.w	r3, r3, #3
 800673e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4313      	orrs	r3, r2
 8006748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	021b      	lsls	r3, r3, #8
 8006758:	697a      	ldr	r2, [r7, #20]
 800675a:	4313      	orrs	r3, r2
 800675c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a22      	ldr	r2, [pc, #136]	; (80067ec <TIM_OC3_SetConfig+0xe4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d003      	beq.n	800676e <TIM_OC3_SetConfig+0x66>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	4a21      	ldr	r2, [pc, #132]	; (80067f0 <TIM_OC3_SetConfig+0xe8>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d10d      	bne.n	800678a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	4313      	orrs	r3, r2
 8006780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a17      	ldr	r2, [pc, #92]	; (80067ec <TIM_OC3_SetConfig+0xe4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d003      	beq.n	800679a <TIM_OC3_SetConfig+0x92>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a16      	ldr	r2, [pc, #88]	; (80067f0 <TIM_OC3_SetConfig+0xe8>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d113      	bne.n	80067c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	695b      	ldr	r3, [r3, #20]
 80067ae:	011b      	lsls	r3, r3, #4
 80067b0:	693a      	ldr	r2, [r7, #16]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	011b      	lsls	r3, r3, #4
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	fffeff8f 	.word	0xfffeff8f
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400

080067f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	69db      	ldr	r3, [r3, #28]
 800681a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800681c:	68fa      	ldr	r2, [r7, #12]
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <TIM_OC4_SetConfig+0xa4>)
 8006820:	4013      	ands	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800682a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	021b      	lsls	r3, r3, #8
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4313      	orrs	r3, r2
 8006836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800683e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	031b      	lsls	r3, r3, #12
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a13      	ldr	r2, [pc, #76]	; (800689c <TIM_OC4_SetConfig+0xa8>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d003      	beq.n	800685c <TIM_OC4_SetConfig+0x68>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a12      	ldr	r2, [pc, #72]	; (80068a0 <TIM_OC4_SetConfig+0xac>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d109      	bne.n	8006870 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006862:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	019b      	lsls	r3, r3, #6
 800686a:	697a      	ldr	r2, [r7, #20]
 800686c:	4313      	orrs	r3, r2
 800686e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	621a      	str	r2, [r3, #32]
}
 800688a:	bf00      	nop
 800688c:	371c      	adds	r7, #28
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	feff8fff 	.word	0xfeff8fff
 800689c:	40010000 	.word	0x40010000
 80068a0:	40010400 	.word	0x40010400

080068a4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b087      	sub	sp, #28
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a1b      	ldr	r3, [r3, #32]
 80068b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068cc:	68fa      	ldr	r2, [r7, #12]
 80068ce:	4b1b      	ldr	r3, [pc, #108]	; (800693c <TIM_OC5_SetConfig+0x98>)
 80068d0:	4013      	ands	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68fa      	ldr	r2, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	041b      	lsls	r3, r3, #16
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a12      	ldr	r2, [pc, #72]	; (8006940 <TIM_OC5_SetConfig+0x9c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC5_SetConfig+0x5e>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a11      	ldr	r2, [pc, #68]	; (8006944 <TIM_OC5_SetConfig+0xa0>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d109      	bne.n	8006916 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68fa      	ldr	r2, [r7, #12]
 8006920:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	685a      	ldr	r2, [r3, #4]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	621a      	str	r2, [r3, #32]
}
 8006930:	bf00      	nop
 8006932:	371c      	adds	r7, #28
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr
 800693c:	fffeff8f 	.word	0xfffeff8f
 8006940:	40010000 	.word	0x40010000
 8006944:	40010400 	.word	0x40010400

08006948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006970:	68fa      	ldr	r2, [r7, #12]
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <TIM_OC6_SetConfig+0x9c>)
 8006974:	4013      	ands	r3, r2
 8006976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	021b      	lsls	r3, r3, #8
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	4313      	orrs	r3, r2
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800698a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	051b      	lsls	r3, r3, #20
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	4313      	orrs	r3, r2
 8006996:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a13      	ldr	r2, [pc, #76]	; (80069e8 <TIM_OC6_SetConfig+0xa0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d003      	beq.n	80069a8 <TIM_OC6_SetConfig+0x60>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <TIM_OC6_SetConfig+0xa4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d109      	bne.n	80069bc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	695b      	ldr	r3, [r3, #20]
 80069b4:	029b      	lsls	r3, r3, #10
 80069b6:	697a      	ldr	r2, [r7, #20]
 80069b8:	4313      	orrs	r3, r2
 80069ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	693a      	ldr	r2, [r7, #16]
 80069d4:	621a      	str	r2, [r3, #32]
}
 80069d6:	bf00      	nop
 80069d8:	371c      	adds	r7, #28
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	feff8fff 	.word	0xfeff8fff
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40010400 	.word	0x40010400

080069f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b085      	sub	sp, #20
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e06d      	b.n	8006ae4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a30      	ldr	r2, [pc, #192]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d004      	beq.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a2f      	ldr	r2, [pc, #188]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d108      	bne.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006a42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68fa      	ldr	r2, [r7, #12]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a20      	ldr	r2, [pc, #128]	; (8006af0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d022      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a7a:	d01d      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a1d      	ldr	r2, [pc, #116]	; (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d018      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a1c      	ldr	r2, [pc, #112]	; (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d013      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1a      	ldr	r2, [pc, #104]	; (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d00e      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d009      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a16      	ldr	r2, [pc, #88]	; (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d004      	beq.n	8006ab8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d10c      	bne.n	8006ad2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006abe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	68ba      	ldr	r2, [r7, #8]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	68ba      	ldr	r2, [r7, #8]
 8006ad0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3714      	adds	r7, #20
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010400 	.word	0x40010400
 8006af8:	40000400 	.word	0x40000400
 8006afc:	40000800 	.word	0x40000800
 8006b00:	40000c00 	.word	0x40000c00
 8006b04:	40014000 	.word	0x40014000
 8006b08:	40001800 	.word	0x40001800

08006b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e040      	b.n	8006bdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d106      	bne.n	8006b70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f7fa fd0a 	bl	8001584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2224      	movs	r2, #36	; 0x24
 8006b74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fb36 	bl	80071f8 <UART_SetConfig>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d101      	bne.n	8006b96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e022      	b.n	8006bdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 fd8c 	bl	80076bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681a      	ldr	r2, [r3, #0]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f042 0201 	orr.w	r2, r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 fe13 	bl	8007800 <UART_CheckIdleState>
 8006bda:	4603      	mov	r3, r0
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3708      	adds	r7, #8
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b0ba      	sub	sp, #232	; 0xe8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c12:	4013      	ands	r3, r2
 8006c14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d115      	bne.n	8006c4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d00f      	beq.n	8006c4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d009      	beq.n	8006c4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	f000 82a4 	beq.w	800718a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	4798      	blx	r3
      }
      return;
 8006c4a:	e29e      	b.n	800718a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	f000 8117 	beq.w	8006e84 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006c56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d106      	bne.n	8006c70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006c62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006c66:	4b85      	ldr	r3, [pc, #532]	; (8006e7c <HAL_UART_IRQHandler+0x298>)
 8006c68:	4013      	ands	r3, r2
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 810a 	beq.w	8006e84 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c74:	f003 0301 	and.w	r3, r3, #1
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d011      	beq.n	8006ca0 <HAL_UART_IRQHandler+0xbc>
 8006c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00b      	beq.n	8006ca0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c96:	f043 0201 	orr.w	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ca4:	f003 0302 	and.w	r3, r3, #2
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d011      	beq.n	8006cd0 <HAL_UART_IRQHandler+0xec>
 8006cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00b      	beq.n	8006cd0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	2202      	movs	r2, #2
 8006cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cc6:	f043 0204 	orr.w	r2, r3, #4
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d011      	beq.n	8006d00 <HAL_UART_IRQHandler+0x11c>
 8006cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ce0:	f003 0301 	and.w	r3, r3, #1
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2204      	movs	r2, #4
 8006cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006cf6:	f043 0202 	orr.w	r2, r3, #2
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d017      	beq.n	8006d3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d10:	f003 0320 	and.w	r3, r3, #32
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d00b      	beq.n	8006d3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2208      	movs	r2, #8
 8006d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d32:	f043 0208 	orr.w	r2, r3, #8
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d012      	beq.n	8006d6e <HAL_UART_IRQHandler+0x18a>
 8006d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00c      	beq.n	8006d6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d64:	f043 0220 	orr.w	r2, r3, #32
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 820a 	beq.w	800718e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00d      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d8a:	f003 0320 	and.w	r3, r3, #32
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d005      	beq.n	8006dc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006dba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d04f      	beq.n	8006e66 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 fe27 	bl	8007a1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd6:	2b40      	cmp	r3, #64	; 0x40
 8006dd8:	d141      	bne.n	8006e5e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006df0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006df8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e06:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e16:	e841 2300 	strex	r3, r2, [r1]
 8006e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1d9      	bne.n	8006dda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d013      	beq.n	8006e56 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e32:	4a13      	ldr	r2, [pc, #76]	; (8006e80 <HAL_UART_IRQHandler+0x29c>)
 8006e34:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	f7fb fe6c 	bl	8002b18 <HAL_DMA_Abort_IT>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d017      	beq.n	8006e76 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e54:	e00f      	b.n	8006e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f000 f9ae 	bl	80071b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e5c:	e00b      	b.n	8006e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 f9aa 	bl	80071b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e64:	e007      	b.n	8006e76 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f9a6 	bl	80071b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006e74:	e18b      	b.n	800718e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e76:	bf00      	nop
    return;
 8006e78:	e189      	b.n	800718e <HAL_UART_IRQHandler+0x5aa>
 8006e7a:	bf00      	nop
 8006e7c:	04000120 	.word	0x04000120
 8006e80:	08007ae1 	.word	0x08007ae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	f040 8144 	bne.w	8007116 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e92:	f003 0310 	and.w	r3, r3, #16
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	f000 813d 	beq.w	8007116 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ea0:	f003 0310 	and.w	r3, r3, #16
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f000 8136 	beq.w	8007116 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2210      	movs	r2, #16
 8006eb0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	f040 80b2 	bne.w	8007026 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ece:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 815d 	beq.w	8007192 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ede:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	f080 8155 	bcs.w	8007192 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006eee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006efc:	f000 8085 	beq.w	800700a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f0c:	e853 3f00 	ldrex	r3, [r3]
 8006f10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	461a      	mov	r2, r3
 8006f26:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006f2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f32:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006f36:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006f3a:	e841 2300 	strex	r3, r2, [r1]
 8006f3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1da      	bne.n	8006f00 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	3308      	adds	r3, #8
 8006f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006f5c:	f023 0301 	bic.w	r3, r3, #1
 8006f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	3308      	adds	r3, #8
 8006f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006f6e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006f72:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006f76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006f7a:	e841 2300 	strex	r3, r2, [r1]
 8006f7e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1e1      	bne.n	8006f4a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	3308      	adds	r3, #8
 8006f8c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f90:	e853 3f00 	ldrex	r3, [r3]
 8006f94:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006faa:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006fac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d1e3      	bne.n	8006f86 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2220      	movs	r2, #32
 8006fc2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fd2:	e853 3f00 	ldrex	r3, [r3]
 8006fd6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fda:	f023 0310 	bic.w	r3, r3, #16
 8006fde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006fec:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ff2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ff4:	e841 2300 	strex	r3, r2, [r1]
 8006ff8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006ffa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d1e4      	bne.n	8006fca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007004:	4618      	mov	r0, r3
 8007006:	f7fb fd17 	bl	8002a38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007016:	b29b      	uxth	r3, r3
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	b29b      	uxth	r3, r3
 800701c:	4619      	mov	r1, r3
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 f8d4 	bl	80071cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007024:	e0b5      	b.n	8007192 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007032:	b29b      	uxth	r3, r3
 8007034:	1ad3      	subs	r3, r2, r3
 8007036:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007040:	b29b      	uxth	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 80a7 	beq.w	8007196 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8007048:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800704c:	2b00      	cmp	r3, #0
 800704e:	f000 80a2 	beq.w	8007196 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007062:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	461a      	mov	r2, r3
 8007070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007074:	647b      	str	r3, [r7, #68]	; 0x44
 8007076:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800707a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e4      	bne.n	8007052 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3308      	adds	r3, #8
 800708e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	e853 3f00 	ldrex	r3, [r3]
 8007096:	623b      	str	r3, [r7, #32]
   return(result);
 8007098:	6a3b      	ldr	r3, [r7, #32]
 800709a:	f023 0301 	bic.w	r3, r3, #1
 800709e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	3308      	adds	r3, #8
 80070a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80070ac:	633a      	str	r2, [r7, #48]	; 0x30
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070b4:	e841 2300 	strex	r3, r2, [r1]
 80070b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1e3      	bne.n	8007088 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2220      	movs	r2, #32
 80070c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f023 0310 	bic.w	r3, r3, #16
 80070e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	461a      	mov	r2, r3
 80070f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80070f4:	61fb      	str	r3, [r7, #28]
 80070f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f8:	69b9      	ldr	r1, [r7, #24]
 80070fa:	69fa      	ldr	r2, [r7, #28]
 80070fc:	e841 2300 	strex	r3, r2, [r1]
 8007100:	617b      	str	r3, [r7, #20]
   return(result);
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d1e4      	bne.n	80070d2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007108:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f85c 	bl	80071cc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007114:	e03f      	b.n	8007196 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800711a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00e      	beq.n	8007140 <HAL_UART_IRQHandler+0x55c>
 8007122:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800712a:	2b00      	cmp	r3, #0
 800712c:	d008      	beq.n	8007140 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007136:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f000 f853 	bl	80071e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800713e:	e02d      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00e      	beq.n	800716a <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800714c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007154:	2b00      	cmp	r3, #0
 8007156:	d008      	beq.n	800716a <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800715c:	2b00      	cmp	r3, #0
 800715e:	d01c      	beq.n	800719a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	4798      	blx	r3
    }
    return;
 8007168:	e017      	b.n	800719a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800716a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800716e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007172:	2b00      	cmp	r3, #0
 8007174:	d012      	beq.n	800719c <HAL_UART_IRQHandler+0x5b8>
 8007176:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800717a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00c      	beq.n	800719c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f000 fcc2 	bl	8007b0c <UART_EndTransmit_IT>
    return;
 8007188:	e008      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
      return;
 800718a:	bf00      	nop
 800718c:	e006      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
    return;
 800718e:	bf00      	nop
 8007190:	e004      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
      return;
 8007192:	bf00      	nop
 8007194:	e002      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
      return;
 8007196:	bf00      	nop
 8007198:	e000      	b.n	800719c <HAL_UART_IRQHandler+0x5b8>
    return;
 800719a:	bf00      	nop
  }

}
 800719c:	37e8      	adds	r7, #232	; 0xe8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
 80071a2:	bf00      	nop

080071a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	460b      	mov	r3, r1
 80071d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b088      	sub	sp, #32
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007200:	2300      	movs	r3, #0
 8007202:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	691b      	ldr	r3, [r3, #16]
 800720c:	431a      	orrs	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	431a      	orrs	r2, r3
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4ba7      	ldr	r3, [pc, #668]	; (80074c0 <UART_SetConfig+0x2c8>)
 8007224:	4013      	ands	r3, r2
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	6812      	ldr	r2, [r2, #0]
 800722a:	6979      	ldr	r1, [r7, #20]
 800722c:	430b      	orrs	r3, r1
 800722e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68da      	ldr	r2, [r3, #12]
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	430a      	orrs	r2, r1
 8007244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	699b      	ldr	r3, [r3, #24]
 800724a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	430a      	orrs	r2, r1
 8007268:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a95      	ldr	r2, [pc, #596]	; (80074c4 <UART_SetConfig+0x2cc>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d120      	bne.n	80072b6 <UART_SetConfig+0xbe>
 8007274:	4b94      	ldr	r3, [pc, #592]	; (80074c8 <UART_SetConfig+0x2d0>)
 8007276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800727a:	f003 0303 	and.w	r3, r3, #3
 800727e:	2b03      	cmp	r3, #3
 8007280:	d816      	bhi.n	80072b0 <UART_SetConfig+0xb8>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <UART_SetConfig+0x90>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	08007299 	.word	0x08007299
 800728c:	080072a5 	.word	0x080072a5
 8007290:	0800729f 	.word	0x0800729f
 8007294:	080072ab 	.word	0x080072ab
 8007298:	2301      	movs	r3, #1
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e14f      	b.n	800753e <UART_SetConfig+0x346>
 800729e:	2302      	movs	r3, #2
 80072a0:	77fb      	strb	r3, [r7, #31]
 80072a2:	e14c      	b.n	800753e <UART_SetConfig+0x346>
 80072a4:	2304      	movs	r3, #4
 80072a6:	77fb      	strb	r3, [r7, #31]
 80072a8:	e149      	b.n	800753e <UART_SetConfig+0x346>
 80072aa:	2308      	movs	r3, #8
 80072ac:	77fb      	strb	r3, [r7, #31]
 80072ae:	e146      	b.n	800753e <UART_SetConfig+0x346>
 80072b0:	2310      	movs	r3, #16
 80072b2:	77fb      	strb	r3, [r7, #31]
 80072b4:	e143      	b.n	800753e <UART_SetConfig+0x346>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a84      	ldr	r2, [pc, #528]	; (80074cc <UART_SetConfig+0x2d4>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d132      	bne.n	8007326 <UART_SetConfig+0x12e>
 80072c0:	4b81      	ldr	r3, [pc, #516]	; (80074c8 <UART_SetConfig+0x2d0>)
 80072c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072c6:	f003 030c 	and.w	r3, r3, #12
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d828      	bhi.n	8007320 <UART_SetConfig+0x128>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0xdc>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	08007309 	.word	0x08007309
 80072d8:	08007321 	.word	0x08007321
 80072dc:	08007321 	.word	0x08007321
 80072e0:	08007321 	.word	0x08007321
 80072e4:	08007315 	.word	0x08007315
 80072e8:	08007321 	.word	0x08007321
 80072ec:	08007321 	.word	0x08007321
 80072f0:	08007321 	.word	0x08007321
 80072f4:	0800730f 	.word	0x0800730f
 80072f8:	08007321 	.word	0x08007321
 80072fc:	08007321 	.word	0x08007321
 8007300:	08007321 	.word	0x08007321
 8007304:	0800731b 	.word	0x0800731b
 8007308:	2300      	movs	r3, #0
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e117      	b.n	800753e <UART_SetConfig+0x346>
 800730e:	2302      	movs	r3, #2
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e114      	b.n	800753e <UART_SetConfig+0x346>
 8007314:	2304      	movs	r3, #4
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e111      	b.n	800753e <UART_SetConfig+0x346>
 800731a:	2308      	movs	r3, #8
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e10e      	b.n	800753e <UART_SetConfig+0x346>
 8007320:	2310      	movs	r3, #16
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e10b      	b.n	800753e <UART_SetConfig+0x346>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a69      	ldr	r2, [pc, #420]	; (80074d0 <UART_SetConfig+0x2d8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d120      	bne.n	8007372 <UART_SetConfig+0x17a>
 8007330:	4b65      	ldr	r3, [pc, #404]	; (80074c8 <UART_SetConfig+0x2d0>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800733a:	2b30      	cmp	r3, #48	; 0x30
 800733c:	d013      	beq.n	8007366 <UART_SetConfig+0x16e>
 800733e:	2b30      	cmp	r3, #48	; 0x30
 8007340:	d814      	bhi.n	800736c <UART_SetConfig+0x174>
 8007342:	2b20      	cmp	r3, #32
 8007344:	d009      	beq.n	800735a <UART_SetConfig+0x162>
 8007346:	2b20      	cmp	r3, #32
 8007348:	d810      	bhi.n	800736c <UART_SetConfig+0x174>
 800734a:	2b00      	cmp	r3, #0
 800734c:	d002      	beq.n	8007354 <UART_SetConfig+0x15c>
 800734e:	2b10      	cmp	r3, #16
 8007350:	d006      	beq.n	8007360 <UART_SetConfig+0x168>
 8007352:	e00b      	b.n	800736c <UART_SetConfig+0x174>
 8007354:	2300      	movs	r3, #0
 8007356:	77fb      	strb	r3, [r7, #31]
 8007358:	e0f1      	b.n	800753e <UART_SetConfig+0x346>
 800735a:	2302      	movs	r3, #2
 800735c:	77fb      	strb	r3, [r7, #31]
 800735e:	e0ee      	b.n	800753e <UART_SetConfig+0x346>
 8007360:	2304      	movs	r3, #4
 8007362:	77fb      	strb	r3, [r7, #31]
 8007364:	e0eb      	b.n	800753e <UART_SetConfig+0x346>
 8007366:	2308      	movs	r3, #8
 8007368:	77fb      	strb	r3, [r7, #31]
 800736a:	e0e8      	b.n	800753e <UART_SetConfig+0x346>
 800736c:	2310      	movs	r3, #16
 800736e:	77fb      	strb	r3, [r7, #31]
 8007370:	e0e5      	b.n	800753e <UART_SetConfig+0x346>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a57      	ldr	r2, [pc, #348]	; (80074d4 <UART_SetConfig+0x2dc>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d120      	bne.n	80073be <UART_SetConfig+0x1c6>
 800737c:	4b52      	ldr	r3, [pc, #328]	; (80074c8 <UART_SetConfig+0x2d0>)
 800737e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007382:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007386:	2bc0      	cmp	r3, #192	; 0xc0
 8007388:	d013      	beq.n	80073b2 <UART_SetConfig+0x1ba>
 800738a:	2bc0      	cmp	r3, #192	; 0xc0
 800738c:	d814      	bhi.n	80073b8 <UART_SetConfig+0x1c0>
 800738e:	2b80      	cmp	r3, #128	; 0x80
 8007390:	d009      	beq.n	80073a6 <UART_SetConfig+0x1ae>
 8007392:	2b80      	cmp	r3, #128	; 0x80
 8007394:	d810      	bhi.n	80073b8 <UART_SetConfig+0x1c0>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <UART_SetConfig+0x1a8>
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d006      	beq.n	80073ac <UART_SetConfig+0x1b4>
 800739e:	e00b      	b.n	80073b8 <UART_SetConfig+0x1c0>
 80073a0:	2300      	movs	r3, #0
 80073a2:	77fb      	strb	r3, [r7, #31]
 80073a4:	e0cb      	b.n	800753e <UART_SetConfig+0x346>
 80073a6:	2302      	movs	r3, #2
 80073a8:	77fb      	strb	r3, [r7, #31]
 80073aa:	e0c8      	b.n	800753e <UART_SetConfig+0x346>
 80073ac:	2304      	movs	r3, #4
 80073ae:	77fb      	strb	r3, [r7, #31]
 80073b0:	e0c5      	b.n	800753e <UART_SetConfig+0x346>
 80073b2:	2308      	movs	r3, #8
 80073b4:	77fb      	strb	r3, [r7, #31]
 80073b6:	e0c2      	b.n	800753e <UART_SetConfig+0x346>
 80073b8:	2310      	movs	r3, #16
 80073ba:	77fb      	strb	r3, [r7, #31]
 80073bc:	e0bf      	b.n	800753e <UART_SetConfig+0x346>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a45      	ldr	r2, [pc, #276]	; (80074d8 <UART_SetConfig+0x2e0>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d125      	bne.n	8007414 <UART_SetConfig+0x21c>
 80073c8:	4b3f      	ldr	r3, [pc, #252]	; (80074c8 <UART_SetConfig+0x2d0>)
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80073d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073d6:	d017      	beq.n	8007408 <UART_SetConfig+0x210>
 80073d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073dc:	d817      	bhi.n	800740e <UART_SetConfig+0x216>
 80073de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e2:	d00b      	beq.n	80073fc <UART_SetConfig+0x204>
 80073e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e8:	d811      	bhi.n	800740e <UART_SetConfig+0x216>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <UART_SetConfig+0x1fe>
 80073ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f2:	d006      	beq.n	8007402 <UART_SetConfig+0x20a>
 80073f4:	e00b      	b.n	800740e <UART_SetConfig+0x216>
 80073f6:	2300      	movs	r3, #0
 80073f8:	77fb      	strb	r3, [r7, #31]
 80073fa:	e0a0      	b.n	800753e <UART_SetConfig+0x346>
 80073fc:	2302      	movs	r3, #2
 80073fe:	77fb      	strb	r3, [r7, #31]
 8007400:	e09d      	b.n	800753e <UART_SetConfig+0x346>
 8007402:	2304      	movs	r3, #4
 8007404:	77fb      	strb	r3, [r7, #31]
 8007406:	e09a      	b.n	800753e <UART_SetConfig+0x346>
 8007408:	2308      	movs	r3, #8
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e097      	b.n	800753e <UART_SetConfig+0x346>
 800740e:	2310      	movs	r3, #16
 8007410:	77fb      	strb	r3, [r7, #31]
 8007412:	e094      	b.n	800753e <UART_SetConfig+0x346>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a30      	ldr	r2, [pc, #192]	; (80074dc <UART_SetConfig+0x2e4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d125      	bne.n	800746a <UART_SetConfig+0x272>
 800741e:	4b2a      	ldr	r3, [pc, #168]	; (80074c8 <UART_SetConfig+0x2d0>)
 8007420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007424:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007428:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800742c:	d017      	beq.n	800745e <UART_SetConfig+0x266>
 800742e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007432:	d817      	bhi.n	8007464 <UART_SetConfig+0x26c>
 8007434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007438:	d00b      	beq.n	8007452 <UART_SetConfig+0x25a>
 800743a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800743e:	d811      	bhi.n	8007464 <UART_SetConfig+0x26c>
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <UART_SetConfig+0x254>
 8007444:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007448:	d006      	beq.n	8007458 <UART_SetConfig+0x260>
 800744a:	e00b      	b.n	8007464 <UART_SetConfig+0x26c>
 800744c:	2301      	movs	r3, #1
 800744e:	77fb      	strb	r3, [r7, #31]
 8007450:	e075      	b.n	800753e <UART_SetConfig+0x346>
 8007452:	2302      	movs	r3, #2
 8007454:	77fb      	strb	r3, [r7, #31]
 8007456:	e072      	b.n	800753e <UART_SetConfig+0x346>
 8007458:	2304      	movs	r3, #4
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e06f      	b.n	800753e <UART_SetConfig+0x346>
 800745e:	2308      	movs	r3, #8
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e06c      	b.n	800753e <UART_SetConfig+0x346>
 8007464:	2310      	movs	r3, #16
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e069      	b.n	800753e <UART_SetConfig+0x346>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a1c      	ldr	r2, [pc, #112]	; (80074e0 <UART_SetConfig+0x2e8>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d137      	bne.n	80074e4 <UART_SetConfig+0x2ec>
 8007474:	4b14      	ldr	r3, [pc, #80]	; (80074c8 <UART_SetConfig+0x2d0>)
 8007476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800747a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800747e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007482:	d017      	beq.n	80074b4 <UART_SetConfig+0x2bc>
 8007484:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007488:	d817      	bhi.n	80074ba <UART_SetConfig+0x2c2>
 800748a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800748e:	d00b      	beq.n	80074a8 <UART_SetConfig+0x2b0>
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007494:	d811      	bhi.n	80074ba <UART_SetConfig+0x2c2>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d003      	beq.n	80074a2 <UART_SetConfig+0x2aa>
 800749a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800749e:	d006      	beq.n	80074ae <UART_SetConfig+0x2b6>
 80074a0:	e00b      	b.n	80074ba <UART_SetConfig+0x2c2>
 80074a2:	2300      	movs	r3, #0
 80074a4:	77fb      	strb	r3, [r7, #31]
 80074a6:	e04a      	b.n	800753e <UART_SetConfig+0x346>
 80074a8:	2302      	movs	r3, #2
 80074aa:	77fb      	strb	r3, [r7, #31]
 80074ac:	e047      	b.n	800753e <UART_SetConfig+0x346>
 80074ae:	2304      	movs	r3, #4
 80074b0:	77fb      	strb	r3, [r7, #31]
 80074b2:	e044      	b.n	800753e <UART_SetConfig+0x346>
 80074b4:	2308      	movs	r3, #8
 80074b6:	77fb      	strb	r3, [r7, #31]
 80074b8:	e041      	b.n	800753e <UART_SetConfig+0x346>
 80074ba:	2310      	movs	r3, #16
 80074bc:	77fb      	strb	r3, [r7, #31]
 80074be:	e03e      	b.n	800753e <UART_SetConfig+0x346>
 80074c0:	efff69f3 	.word	0xefff69f3
 80074c4:	40011000 	.word	0x40011000
 80074c8:	40023800 	.word	0x40023800
 80074cc:	40004400 	.word	0x40004400
 80074d0:	40004800 	.word	0x40004800
 80074d4:	40004c00 	.word	0x40004c00
 80074d8:	40005000 	.word	0x40005000
 80074dc:	40011400 	.word	0x40011400
 80074e0:	40007800 	.word	0x40007800
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a71      	ldr	r2, [pc, #452]	; (80076b0 <UART_SetConfig+0x4b8>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d125      	bne.n	800753a <UART_SetConfig+0x342>
 80074ee:	4b71      	ldr	r3, [pc, #452]	; (80076b4 <UART_SetConfig+0x4bc>)
 80074f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80074fc:	d017      	beq.n	800752e <UART_SetConfig+0x336>
 80074fe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007502:	d817      	bhi.n	8007534 <UART_SetConfig+0x33c>
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007508:	d00b      	beq.n	8007522 <UART_SetConfig+0x32a>
 800750a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800750e:	d811      	bhi.n	8007534 <UART_SetConfig+0x33c>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <UART_SetConfig+0x324>
 8007514:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007518:	d006      	beq.n	8007528 <UART_SetConfig+0x330>
 800751a:	e00b      	b.n	8007534 <UART_SetConfig+0x33c>
 800751c:	2300      	movs	r3, #0
 800751e:	77fb      	strb	r3, [r7, #31]
 8007520:	e00d      	b.n	800753e <UART_SetConfig+0x346>
 8007522:	2302      	movs	r3, #2
 8007524:	77fb      	strb	r3, [r7, #31]
 8007526:	e00a      	b.n	800753e <UART_SetConfig+0x346>
 8007528:	2304      	movs	r3, #4
 800752a:	77fb      	strb	r3, [r7, #31]
 800752c:	e007      	b.n	800753e <UART_SetConfig+0x346>
 800752e:	2308      	movs	r3, #8
 8007530:	77fb      	strb	r3, [r7, #31]
 8007532:	e004      	b.n	800753e <UART_SetConfig+0x346>
 8007534:	2310      	movs	r3, #16
 8007536:	77fb      	strb	r3, [r7, #31]
 8007538:	e001      	b.n	800753e <UART_SetConfig+0x346>
 800753a:	2310      	movs	r3, #16
 800753c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007546:	d15a      	bne.n	80075fe <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007548:	7ffb      	ldrb	r3, [r7, #31]
 800754a:	2b08      	cmp	r3, #8
 800754c:	d827      	bhi.n	800759e <UART_SetConfig+0x3a6>
 800754e:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <UART_SetConfig+0x35c>)
 8007550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007554:	08007579 	.word	0x08007579
 8007558:	08007581 	.word	0x08007581
 800755c:	08007589 	.word	0x08007589
 8007560:	0800759f 	.word	0x0800759f
 8007564:	0800758f 	.word	0x0800758f
 8007568:	0800759f 	.word	0x0800759f
 800756c:	0800759f 	.word	0x0800759f
 8007570:	0800759f 	.word	0x0800759f
 8007574:	08007597 	.word	0x08007597
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fd fe86 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 800757c:	61b8      	str	r0, [r7, #24]
        break;
 800757e:	e013      	b.n	80075a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007580:	f7fd fe96 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 8007584:	61b8      	str	r0, [r7, #24]
        break;
 8007586:	e00f      	b.n	80075a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007588:	4b4b      	ldr	r3, [pc, #300]	; (80076b8 <UART_SetConfig+0x4c0>)
 800758a:	61bb      	str	r3, [r7, #24]
        break;
 800758c:	e00c      	b.n	80075a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800758e:	f7fd fd8d 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 8007592:	61b8      	str	r0, [r7, #24]
        break;
 8007594:	e008      	b.n	80075a8 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800759a:	61bb      	str	r3, [r7, #24]
        break;
 800759c:	e004      	b.n	80075a8 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	77bb      	strb	r3, [r7, #30]
        break;
 80075a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d074      	beq.n	8007698 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	005a      	lsls	r2, r3, #1
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	085b      	lsrs	r3, r3, #1
 80075b8:	441a      	add	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	2b0f      	cmp	r3, #15
 80075c8:	d916      	bls.n	80075f8 <UART_SetConfig+0x400>
 80075ca:	693b      	ldr	r3, [r7, #16]
 80075cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075d0:	d212      	bcs.n	80075f8 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075d2:	693b      	ldr	r3, [r7, #16]
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	f023 030f 	bic.w	r3, r3, #15
 80075da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	085b      	lsrs	r3, r3, #1
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	89fb      	ldrh	r3, [r7, #14]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	89fa      	ldrh	r2, [r7, #14]
 80075f4:	60da      	str	r2, [r3, #12]
 80075f6:	e04f      	b.n	8007698 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	77bb      	strb	r3, [r7, #30]
 80075fc:	e04c      	b.n	8007698 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80075fe:	7ffb      	ldrb	r3, [r7, #31]
 8007600:	2b08      	cmp	r3, #8
 8007602:	d828      	bhi.n	8007656 <UART_SetConfig+0x45e>
 8007604:	a201      	add	r2, pc, #4	; (adr r2, 800760c <UART_SetConfig+0x414>)
 8007606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760a:	bf00      	nop
 800760c:	08007631 	.word	0x08007631
 8007610:	08007639 	.word	0x08007639
 8007614:	08007641 	.word	0x08007641
 8007618:	08007657 	.word	0x08007657
 800761c:	08007647 	.word	0x08007647
 8007620:	08007657 	.word	0x08007657
 8007624:	08007657 	.word	0x08007657
 8007628:	08007657 	.word	0x08007657
 800762c:	0800764f 	.word	0x0800764f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007630:	f7fd fe2a 	bl	8005288 <HAL_RCC_GetPCLK1Freq>
 8007634:	61b8      	str	r0, [r7, #24]
        break;
 8007636:	e013      	b.n	8007660 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007638:	f7fd fe3a 	bl	80052b0 <HAL_RCC_GetPCLK2Freq>
 800763c:	61b8      	str	r0, [r7, #24]
        break;
 800763e:	e00f      	b.n	8007660 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007640:	4b1d      	ldr	r3, [pc, #116]	; (80076b8 <UART_SetConfig+0x4c0>)
 8007642:	61bb      	str	r3, [r7, #24]
        break;
 8007644:	e00c      	b.n	8007660 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007646:	f7fd fd31 	bl	80050ac <HAL_RCC_GetSysClockFreq>
 800764a:	61b8      	str	r0, [r7, #24]
        break;
 800764c:	e008      	b.n	8007660 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800764e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007652:	61bb      	str	r3, [r7, #24]
        break;
 8007654:	e004      	b.n	8007660 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	77bb      	strb	r3, [r7, #30]
        break;
 800765e:	bf00      	nop
    }

    if (pclk != 0U)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d018      	beq.n	8007698 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	085a      	lsrs	r2, r3, #1
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	441a      	add	r2, r3
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	fbb2 f3f3 	udiv	r3, r2, r3
 8007678:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b0f      	cmp	r3, #15
 800767e:	d909      	bls.n	8007694 <UART_SetConfig+0x49c>
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007686:	d205      	bcs.n	8007694 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	b29a      	uxth	r2, r3
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60da      	str	r2, [r3, #12]
 8007692:	e001      	b.n	8007698 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2200      	movs	r2, #0
 800769c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80076a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3720      	adds	r7, #32
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
 80076ae:	bf00      	nop
 80076b0:	40007c00 	.word	0x40007c00
 80076b4:	40023800 	.word	0x40023800
 80076b8:	00f42400 	.word	0x00f42400

080076bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00a      	beq.n	80076e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	430a      	orrs	r2, r1
 80076e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d00a      	beq.n	8007708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	430a      	orrs	r2, r1
 8007706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00a      	beq.n	800772a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	430a      	orrs	r2, r1
 8007728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	430a      	orrs	r2, r1
 800774a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01a      	beq.n	80077d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077ba:	d10a      	bne.n	80077d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d00a      	beq.n	80077f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685b      	ldr	r3, [r3, #4]
 80077e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	605a      	str	r2, [r3, #4]
  }
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af02      	add	r7, sp, #8
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007810:	f7fa f98a 	bl	8001b28 <HAL_GetTick>
 8007814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d10e      	bne.n	8007842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007828:	9300      	str	r3, [sp, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 f82d 	bl	8007892 <UART_WaitOnFlagUntilTimeout>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e023      	b.n	800788a <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b04      	cmp	r3, #4
 800784e:	d10e      	bne.n	800786e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 f817 	bl	8007892 <UART_WaitOnFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800786a:	2303      	movs	r3, #3
 800786c:	e00d      	b.n	800788a <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2220      	movs	r2, #32
 8007872:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2220      	movs	r2, #32
 8007878:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3710      	adds	r7, #16
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}

08007892 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007892:	b580      	push	{r7, lr}
 8007894:	b09c      	sub	sp, #112	; 0x70
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	603b      	str	r3, [r7, #0]
 800789e:	4613      	mov	r3, r2
 80078a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078a2:	e0a5      	b.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078aa:	f000 80a1 	beq.w	80079f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ae:	f7fa f93b 	bl	8001b28 <HAL_GetTick>
 80078b2:	4602      	mov	r2, r0
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	1ad3      	subs	r3, r2, r3
 80078b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80078ba:	429a      	cmp	r2, r3
 80078bc:	d302      	bcc.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80078be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d13e      	bne.n	8007942 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80078d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80078d8:	667b      	str	r3, [r7, #100]	; 0x64
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	461a      	mov	r2, r3
 80078e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80078e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80078e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80078ea:	e841 2300 	strex	r3, r2, [r1]
 80078ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80078f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1e6      	bne.n	80078c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	3308      	adds	r3, #8
 80078fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007908:	f023 0301 	bic.w	r3, r3, #1
 800790c:	663b      	str	r3, [r7, #96]	; 0x60
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3308      	adds	r3, #8
 8007914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007916:	64ba      	str	r2, [r7, #72]	; 0x48
 8007918:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800791c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e5      	bne.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2220      	movs	r2, #32
 800792e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2220      	movs	r2, #32
 8007934:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800793e:	2303      	movs	r3, #3
 8007940:	e067      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d04f      	beq.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800795a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800795e:	d147      	bne.n	80079f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007968:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800797e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007988:	637b      	str	r3, [r7, #52]	; 0x34
 800798a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800798e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	3308      	adds	r3, #8
 80079a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	613b      	str	r3, [r7, #16]
   return(result);
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80079bc:	623a      	str	r2, [r7, #32]
 80079be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e5      	bne.n	800799c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2220      	movs	r2, #32
 80079da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2220      	movs	r2, #32
 80079e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e010      	b.n	8007a12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	69da      	ldr	r2, [r3, #28]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	4013      	ands	r3, r2
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	bf0c      	ite	eq
 8007a00:	2301      	moveq	r3, #1
 8007a02:	2300      	movne	r3, #0
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	f43f af4a 	beq.w	80078a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3770      	adds	r7, #112	; 0x70
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a1a:	b480      	push	{r7}
 8007a1c:	b095      	sub	sp, #84	; 0x54
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	643b      	str	r3, [r7, #64]	; 0x40
 8007a42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3308      	adds	r3, #8
 8007a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	e853 3f00 	ldrex	r3, [r3]
 8007a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	3308      	adds	r3, #8
 8007a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a7c:	e841 2300 	strex	r3, r2, [r1]
 8007a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d1e5      	bne.n	8007a54 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d118      	bne.n	8007ac2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	f023 0310 	bic.w	r3, r3, #16
 8007aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aae:	61bb      	str	r3, [r7, #24]
 8007ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6979      	ldr	r1, [r7, #20]
 8007ab4:	69ba      	ldr	r2, [r7, #24]
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	613b      	str	r3, [r7, #16]
   return(result);
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e6      	bne.n	8007a90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007ad4:	bf00      	nop
 8007ad6:	3754      	adds	r7, #84	; 0x54
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007afe:	68f8      	ldr	r0, [r7, #12]
 8007b00:	f7ff fb5a 	bl	80071b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b04:	bf00      	nop
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b088      	sub	sp, #32
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b28:	61fb      	str	r3, [r7, #28]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	61bb      	str	r3, [r7, #24]
 8007b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	69ba      	ldr	r2, [r7, #24]
 8007b3a:	e841 2300 	strex	r3, r2, [r1]
 8007b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1e6      	bne.n	8007b14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fb26 	bl	80071a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b58:	bf00      	nop
 8007b5a:	3720      	adds	r7, #32
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007b60:	b5b0      	push	{r4, r5, r7, lr}
 8007b62:	b08e      	sub	sp, #56	; 0x38
 8007b64:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8007b66:	4ba0      	ldr	r3, [pc, #640]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007b68:	22c0      	movs	r2, #192	; 0xc0
 8007b6a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8007b6c:	4b9e      	ldr	r3, [pc, #632]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007b6e:	22a8      	movs	r2, #168	; 0xa8
 8007b70:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8007b72:	4b9d      	ldr	r3, [pc, #628]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8007b78:	4b9b      	ldr	r3, [pc, #620]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007b7a:	2214      	movs	r2, #20
 8007b7c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8007b7e:	4b9b      	ldr	r3, [pc, #620]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007b80:	22ff      	movs	r2, #255	; 0xff
 8007b82:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8007b84:	4b99      	ldr	r3, [pc, #612]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007b86:	22ff      	movs	r2, #255	; 0xff
 8007b88:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8007b8a:	4b98      	ldr	r3, [pc, #608]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007b8c:	22ff      	movs	r2, #255	; 0xff
 8007b8e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8007b90:	4b96      	ldr	r3, [pc, #600]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007b92:	2200      	movs	r2, #0
 8007b94:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8007b96:	4b96      	ldr	r3, [pc, #600]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007b98:	22c0      	movs	r2, #192	; 0xc0
 8007b9a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8007b9c:	4b94      	ldr	r3, [pc, #592]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007b9e:	22a8      	movs	r2, #168	; 0xa8
 8007ba0:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8007ba2:	4b93      	ldr	r3, [pc, #588]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007ba4:	2200      	movs	r2, #0
 8007ba6:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8007ba8:	4b91      	ldr	r3, [pc, #580]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007bae:	2100      	movs	r1, #0
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	f004 f9e3 	bl	800bf7c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8007bb6:	4b8c      	ldr	r3, [pc, #560]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	061a      	lsls	r2, r3, #24
 8007bbc:	4b8a      	ldr	r3, [pc, #552]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bbe:	785b      	ldrb	r3, [r3, #1]
 8007bc0:	041b      	lsls	r3, r3, #16
 8007bc2:	431a      	orrs	r2, r3
 8007bc4:	4b88      	ldr	r3, [pc, #544]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bc6:	789b      	ldrb	r3, [r3, #2]
 8007bc8:	021b      	lsls	r3, r3, #8
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	4a86      	ldr	r2, [pc, #536]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bce:	78d2      	ldrb	r2, [r2, #3]
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	061a      	lsls	r2, r3, #24
 8007bd4:	4b84      	ldr	r3, [pc, #528]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	0619      	lsls	r1, r3, #24
 8007bda:	4b83      	ldr	r3, [pc, #524]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bdc:	785b      	ldrb	r3, [r3, #1]
 8007bde:	041b      	lsls	r3, r3, #16
 8007be0:	4319      	orrs	r1, r3
 8007be2:	4b81      	ldr	r3, [pc, #516]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007be4:	789b      	ldrb	r3, [r3, #2]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	430b      	orrs	r3, r1
 8007bea:	497f      	ldr	r1, [pc, #508]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bec:	78c9      	ldrb	r1, [r1, #3]
 8007bee:	430b      	orrs	r3, r1
 8007bf0:	021b      	lsls	r3, r3, #8
 8007bf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	4b7b      	ldr	r3, [pc, #492]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	0619      	lsls	r1, r3, #24
 8007bfe:	4b7a      	ldr	r3, [pc, #488]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	041b      	lsls	r3, r3, #16
 8007c04:	4319      	orrs	r1, r3
 8007c06:	4b78      	ldr	r3, [pc, #480]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c08:	789b      	ldrb	r3, [r3, #2]
 8007c0a:	021b      	lsls	r3, r3, #8
 8007c0c:	430b      	orrs	r3, r1
 8007c0e:	4976      	ldr	r1, [pc, #472]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c10:	78c9      	ldrb	r1, [r1, #3]
 8007c12:	430b      	orrs	r3, r1
 8007c14:	0a1b      	lsrs	r3, r3, #8
 8007c16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007c1a:	431a      	orrs	r2, r3
 8007c1c:	4b72      	ldr	r3, [pc, #456]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	0619      	lsls	r1, r3, #24
 8007c22:	4b71      	ldr	r3, [pc, #452]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c24:	785b      	ldrb	r3, [r3, #1]
 8007c26:	041b      	lsls	r3, r3, #16
 8007c28:	4319      	orrs	r1, r3
 8007c2a:	4b6f      	ldr	r3, [pc, #444]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c2c:	789b      	ldrb	r3, [r3, #2]
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	430b      	orrs	r3, r1
 8007c32:	496d      	ldr	r1, [pc, #436]	; (8007de8 <MX_LWIP_Init+0x288>)
 8007c34:	78c9      	ldrb	r1, [r1, #3]
 8007c36:	430b      	orrs	r3, r1
 8007c38:	0e1b      	lsrs	r3, r3, #24
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	4a6d      	ldr	r2, [pc, #436]	; (8007df4 <MX_LWIP_Init+0x294>)
 8007c3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8007c40:	4b6a      	ldr	r3, [pc, #424]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	061a      	lsls	r2, r3, #24
 8007c46:	4b69      	ldr	r3, [pc, #420]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	041b      	lsls	r3, r3, #16
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	4b67      	ldr	r3, [pc, #412]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c50:	789b      	ldrb	r3, [r3, #2]
 8007c52:	021b      	lsls	r3, r3, #8
 8007c54:	4313      	orrs	r3, r2
 8007c56:	4a65      	ldr	r2, [pc, #404]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c58:	78d2      	ldrb	r2, [r2, #3]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	061a      	lsls	r2, r3, #24
 8007c5e:	4b63      	ldr	r3, [pc, #396]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	0619      	lsls	r1, r3, #24
 8007c64:	4b61      	ldr	r3, [pc, #388]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c66:	785b      	ldrb	r3, [r3, #1]
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	4319      	orrs	r1, r3
 8007c6c:	4b5f      	ldr	r3, [pc, #380]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c6e:	789b      	ldrb	r3, [r3, #2]
 8007c70:	021b      	lsls	r3, r3, #8
 8007c72:	430b      	orrs	r3, r1
 8007c74:	495d      	ldr	r1, [pc, #372]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c76:	78c9      	ldrb	r1, [r1, #3]
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	021b      	lsls	r3, r3, #8
 8007c7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c80:	431a      	orrs	r2, r3
 8007c82:	4b5a      	ldr	r3, [pc, #360]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	0619      	lsls	r1, r3, #24
 8007c88:	4b58      	ldr	r3, [pc, #352]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c8a:	785b      	ldrb	r3, [r3, #1]
 8007c8c:	041b      	lsls	r3, r3, #16
 8007c8e:	4319      	orrs	r1, r3
 8007c90:	4b56      	ldr	r3, [pc, #344]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c92:	789b      	ldrb	r3, [r3, #2]
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	430b      	orrs	r3, r1
 8007c98:	4954      	ldr	r1, [pc, #336]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007c9a:	78c9      	ldrb	r1, [r1, #3]
 8007c9c:	430b      	orrs	r3, r1
 8007c9e:	0a1b      	lsrs	r3, r3, #8
 8007ca0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007ca4:	431a      	orrs	r2, r3
 8007ca6:	4b51      	ldr	r3, [pc, #324]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007ca8:	781b      	ldrb	r3, [r3, #0]
 8007caa:	0619      	lsls	r1, r3, #24
 8007cac:	4b4f      	ldr	r3, [pc, #316]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007cae:	785b      	ldrb	r3, [r3, #1]
 8007cb0:	041b      	lsls	r3, r3, #16
 8007cb2:	4319      	orrs	r1, r3
 8007cb4:	4b4d      	ldr	r3, [pc, #308]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007cb6:	789b      	ldrb	r3, [r3, #2]
 8007cb8:	021b      	lsls	r3, r3, #8
 8007cba:	430b      	orrs	r3, r1
 8007cbc:	494b      	ldr	r1, [pc, #300]	; (8007dec <MX_LWIP_Init+0x28c>)
 8007cbe:	78c9      	ldrb	r1, [r1, #3]
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	0e1b      	lsrs	r3, r3, #24
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	4a4c      	ldr	r2, [pc, #304]	; (8007df8 <MX_LWIP_Init+0x298>)
 8007cc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8007cca:	4b49      	ldr	r3, [pc, #292]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007ccc:	781b      	ldrb	r3, [r3, #0]
 8007cce:	061a      	lsls	r2, r3, #24
 8007cd0:	4b47      	ldr	r3, [pc, #284]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	041b      	lsls	r3, r3, #16
 8007cd6:	431a      	orrs	r2, r3
 8007cd8:	4b45      	ldr	r3, [pc, #276]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007cda:	789b      	ldrb	r3, [r3, #2]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	4a43      	ldr	r2, [pc, #268]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007ce2:	78d2      	ldrb	r2, [r2, #3]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	061a      	lsls	r2, r3, #24
 8007ce8:	4b41      	ldr	r3, [pc, #260]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	0619      	lsls	r1, r3, #24
 8007cee:	4b40      	ldr	r3, [pc, #256]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007cf0:	785b      	ldrb	r3, [r3, #1]
 8007cf2:	041b      	lsls	r3, r3, #16
 8007cf4:	4319      	orrs	r1, r3
 8007cf6:	4b3e      	ldr	r3, [pc, #248]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007cf8:	789b      	ldrb	r3, [r3, #2]
 8007cfa:	021b      	lsls	r3, r3, #8
 8007cfc:	430b      	orrs	r3, r1
 8007cfe:	493c      	ldr	r1, [pc, #240]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d00:	78c9      	ldrb	r1, [r1, #3]
 8007d02:	430b      	orrs	r3, r1
 8007d04:	021b      	lsls	r3, r3, #8
 8007d06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	4b38      	ldr	r3, [pc, #224]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	0619      	lsls	r1, r3, #24
 8007d12:	4b37      	ldr	r3, [pc, #220]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d14:	785b      	ldrb	r3, [r3, #1]
 8007d16:	041b      	lsls	r3, r3, #16
 8007d18:	4319      	orrs	r1, r3
 8007d1a:	4b35      	ldr	r3, [pc, #212]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d1c:	789b      	ldrb	r3, [r3, #2]
 8007d1e:	021b      	lsls	r3, r3, #8
 8007d20:	430b      	orrs	r3, r1
 8007d22:	4933      	ldr	r1, [pc, #204]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d24:	78c9      	ldrb	r1, [r1, #3]
 8007d26:	430b      	orrs	r3, r1
 8007d28:	0a1b      	lsrs	r3, r3, #8
 8007d2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007d2e:	431a      	orrs	r2, r3
 8007d30:	4b2f      	ldr	r3, [pc, #188]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	0619      	lsls	r1, r3, #24
 8007d36:	4b2e      	ldr	r3, [pc, #184]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d38:	785b      	ldrb	r3, [r3, #1]
 8007d3a:	041b      	lsls	r3, r3, #16
 8007d3c:	4319      	orrs	r1, r3
 8007d3e:	4b2c      	ldr	r3, [pc, #176]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d40:	789b      	ldrb	r3, [r3, #2]
 8007d42:	021b      	lsls	r3, r3, #8
 8007d44:	430b      	orrs	r3, r1
 8007d46:	492a      	ldr	r1, [pc, #168]	; (8007df0 <MX_LWIP_Init+0x290>)
 8007d48:	78c9      	ldrb	r1, [r1, #3]
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	0e1b      	lsrs	r3, r3, #24
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <MX_LWIP_Init+0x29c>)
 8007d52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007d54:	4b2a      	ldr	r3, [pc, #168]	; (8007e00 <MX_LWIP_Init+0x2a0>)
 8007d56:	9302      	str	r3, [sp, #8]
 8007d58:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <MX_LWIP_Init+0x2a4>)
 8007d5a:	9301      	str	r3, [sp, #4]
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	9300      	str	r3, [sp, #0]
 8007d60:	4b26      	ldr	r3, [pc, #152]	; (8007dfc <MX_LWIP_Init+0x29c>)
 8007d62:	4a25      	ldr	r2, [pc, #148]	; (8007df8 <MX_LWIP_Init+0x298>)
 8007d64:	4923      	ldr	r1, [pc, #140]	; (8007df4 <MX_LWIP_Init+0x294>)
 8007d66:	4828      	ldr	r0, [pc, #160]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d68:	f004 fe8c 	bl	800ca84 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007d6c:	4826      	ldr	r0, [pc, #152]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d6e:	f005 f83b 	bl	800cde8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007d72:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d78:	089b      	lsrs	r3, r3, #2
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007d84:	4820      	ldr	r0, [pc, #128]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d86:	f005 f83f 	bl	800ce08 <netif_set_up>
 8007d8a:	e002      	b.n	8007d92 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007d8c:	481e      	ldr	r0, [pc, #120]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d8e:	f005 f8a7 	bl	800cee0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8007d92:	491e      	ldr	r1, [pc, #120]	; (8007e0c <MX_LWIP_Init+0x2ac>)
 8007d94:	481c      	ldr	r0, [pc, #112]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007d96:	f005 f939 	bl	800d00c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	623b      	str	r3, [r7, #32]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8007da2:	f107 0320 	add.w	r3, r7, #32
 8007da6:	2101      	movs	r1, #1
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fd97 	bl	80088dc <osSemaphoreCreate>
 8007dae:	4603      	mov	r3, r0
 8007db0:	4a17      	ldr	r2, [pc, #92]	; (8007e10 <MX_LWIP_Init+0x2b0>)
 8007db2:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8007db4:	4b17      	ldr	r3, [pc, #92]	; (8007e14 <MX_LWIP_Init+0x2b4>)
 8007db6:	4a14      	ldr	r2, [pc, #80]	; (8007e08 <MX_LWIP_Init+0x2a8>)
 8007db8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8007dba:	4b15      	ldr	r3, [pc, #84]	; (8007e10 <MX_LWIP_Init+0x2b0>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a15      	ldr	r2, [pc, #84]	; (8007e14 <MX_LWIP_Init+0x2b4>)
 8007dc0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8007dc2:	4b15      	ldr	r3, [pc, #84]	; (8007e18 <MX_LWIP_Init+0x2b8>)
 8007dc4:	1d3c      	adds	r4, r7, #4
 8007dc6:	461d      	mov	r5, r3
 8007dc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007dca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007dcc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007dd0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8007dd4:	1d3b      	adds	r3, r7, #4
 8007dd6:	490f      	ldr	r1, [pc, #60]	; (8007e14 <MX_LWIP_Init+0x2b4>)
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f000 fc82 	bl	80086e2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007dde:	bf00      	nop
 8007de0:	3728      	adds	r7, #40	; 0x28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bdb0      	pop	{r4, r5, r7, pc}
 8007de6:	bf00      	nop
 8007de8:	200060e4 	.word	0x200060e4
 8007dec:	200060e0 	.word	0x200060e0
 8007df0:	200060a4 	.word	0x200060a4
 8007df4:	200060dc 	.word	0x200060dc
 8007df8:	200060e8 	.word	0x200060e8
 8007dfc:	200060ec 	.word	0x200060ec
 8007e00:	0800beb9 	.word	0x0800beb9
 8007e04:	08008471 	.word	0x08008471
 8007e08:	200060a8 	.word	0x200060a8
 8007e0c:	08008555 	.word	0x08008555
 8007e10:	20000748 	.word	0x20000748
 8007e14:	2000609c 	.word	0x2000609c
 8007e18:	08016ec0 	.word	0x08016ec0

08007e1c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b08e      	sub	sp, #56	; 0x38
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e28:	2200      	movs	r2, #0
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	605a      	str	r2, [r3, #4]
 8007e2e:	609a      	str	r2, [r3, #8]
 8007e30:	60da      	str	r2, [r3, #12]
 8007e32:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a52      	ldr	r2, [pc, #328]	; (8007f84 <HAL_ETH_MspInit+0x168>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	f040 809e 	bne.w	8007f7c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007e40:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	4a50      	ldr	r2, [pc, #320]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e4c:	4b4e      	ldr	r3, [pc, #312]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e54:	623b      	str	r3, [r7, #32]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	4b4b      	ldr	r3, [pc, #300]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5c:	4a4a      	ldr	r2, [pc, #296]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e62:	6313      	str	r3, [r2, #48]	; 0x30
 8007e64:	4b48      	ldr	r3, [pc, #288]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e68:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e6c:	61fb      	str	r3, [r7, #28]
 8007e6e:	69fb      	ldr	r3, [r7, #28]
 8007e70:	4b45      	ldr	r3, [pc, #276]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e74:	4a44      	ldr	r2, [pc, #272]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007e7a:	6313      	str	r3, [r2, #48]	; 0x30
 8007e7c:	4b42      	ldr	r3, [pc, #264]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e84:	61bb      	str	r3, [r7, #24]
 8007e86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e88:	4b3f      	ldr	r3, [pc, #252]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e8c:	4a3e      	ldr	r2, [pc, #248]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e8e:	f043 0304 	orr.w	r3, r3, #4
 8007e92:	6313      	str	r3, [r2, #48]	; 0x30
 8007e94:	4b3c      	ldr	r3, [pc, #240]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	617b      	str	r3, [r7, #20]
 8007e9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ea0:	4b39      	ldr	r3, [pc, #228]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	4a38      	ldr	r2, [pc, #224]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ea6:	f043 0301 	orr.w	r3, r3, #1
 8007eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8007eac:	4b36      	ldr	r3, [pc, #216]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	f003 0301 	and.w	r3, r3, #1
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eb8:	4b33      	ldr	r3, [pc, #204]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ebc:	4a32      	ldr	r2, [pc, #200]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ebe:	f043 0302 	orr.w	r3, r3, #2
 8007ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8007ec4:	4b30      	ldr	r3, [pc, #192]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec8:	f003 0302 	and.w	r3, r3, #2
 8007ecc:	60fb      	str	r3, [r7, #12]
 8007ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007ed0:	4b2d      	ldr	r3, [pc, #180]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed4:	4a2c      	ldr	r2, [pc, #176]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007eda:	6313      	str	r3, [r2, #48]	; 0x30
 8007edc:	4b2a      	ldr	r3, [pc, #168]	; (8007f88 <HAL_ETH_MspInit+0x16c>)
 8007ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee4:	60bb      	str	r3, [r7, #8]
 8007ee6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMI_IMDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007ee8:	2332      	movs	r3, #50	; 0x32
 8007eea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007eec:	2302      	movs	r3, #2
 8007eee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ef4:	2303      	movs	r3, #3
 8007ef6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007ef8:	230b      	movs	r3, #11
 8007efa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f00:	4619      	mov	r1, r3
 8007f02:	4822      	ldr	r0, [pc, #136]	; (8007f8c <HAL_ETH_MspInit+0x170>)
 8007f04:	f7fc f9ea 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007f08:	2386      	movs	r3, #134	; 0x86
 8007f0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f0c:	2302      	movs	r3, #2
 8007f0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f10:	2300      	movs	r3, #0
 8007f12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f14:	2303      	movs	r3, #3
 8007f16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f18:	230b      	movs	r3, #11
 8007f1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f20:	4619      	mov	r1, r3
 8007f22:	481b      	ldr	r0, [pc, #108]	; (8007f90 <HAL_ETH_MspInit+0x174>)
 8007f24:	f7fc f9da 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f2e:	2302      	movs	r3, #2
 8007f30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f32:	2300      	movs	r3, #0
 8007f34:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f36:	2303      	movs	r3, #3
 8007f38:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f3a:	230b      	movs	r3, #11
 8007f3c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8007f3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f42:	4619      	mov	r1, r3
 8007f44:	4813      	ldr	r0, [pc, #76]	; (8007f94 <HAL_ETH_MspInit+0x178>)
 8007f46:	f7fc f9c9 	bl	80042dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXDO_Pin;
 8007f4a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f50:	2302      	movs	r3, #2
 8007f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f54:	2300      	movs	r3, #0
 8007f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007f5c:	230b      	movs	r3, #11
 8007f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f64:	4619      	mov	r1, r3
 8007f66:	480c      	ldr	r0, [pc, #48]	; (8007f98 <HAL_ETH_MspInit+0x17c>)
 8007f68:	f7fc f9b8 	bl	80042dc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	2105      	movs	r1, #5
 8007f70:	203d      	movs	r0, #61	; 0x3d
 8007f72:	f7fa fc89 	bl	8002888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007f76:	203d      	movs	r0, #61	; 0x3d
 8007f78:	f7fa fca2 	bl	80028c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	3738      	adds	r7, #56	; 0x38
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}
 8007f84:	40028000 	.word	0x40028000
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	40020800 	.word	0x40020800
 8007f90:	40020000 	.word	0x40020000
 8007f94:	40020400 	.word	0x40020400
 8007f98:	40021800 	.word	0x40021800

08007f9c <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b082      	sub	sp, #8
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8007fa4:	4b04      	ldr	r3, [pc, #16]	; (8007fb8 <HAL_ETH_RxCpltCallback+0x1c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fd17 	bl	80089dc <osSemaphoreRelease>
}
 8007fae:	bf00      	nop
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000074c 	.word	0x2000074c

08007fbc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8007fbc:	b5b0      	push	{r4, r5, r7, lr}
 8007fbe:	b090      	sub	sp, #64	; 0x40
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007fc8:	4b60      	ldr	r3, [pc, #384]	; (800814c <low_level_init+0x190>)
 8007fca:	4a61      	ldr	r2, [pc, #388]	; (8008150 <low_level_init+0x194>)
 8007fcc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8007fce:	4b5f      	ldr	r3, [pc, #380]	; (800814c <low_level_init+0x190>)
 8007fd0:	2201      	movs	r2, #1
 8007fd2:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8007fd4:	4b5d      	ldr	r3, [pc, #372]	; (800814c <low_level_init+0x190>)
 8007fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007fda:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8007fdc:	4b5b      	ldr	r3, [pc, #364]	; (800814c <low_level_init+0x190>)
 8007fde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007fe4:	4b59      	ldr	r3, [pc, #356]	; (800814c <low_level_init+0x190>)
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007fea:	2300      	movs	r3, #0
 8007fec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8007ff0:	2380      	movs	r3, #128	; 0x80
 8007ff2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007ff6:	23e1      	movs	r3, #225	; 0xe1
 8007ff8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8008002:	2300      	movs	r3, #0
 8008004:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008008:	2300      	movs	r3, #0
 800800a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800800e:	4a4f      	ldr	r2, [pc, #316]	; (800814c <low_level_init+0x190>)
 8008010:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008014:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8008016:	4b4d      	ldr	r3, [pc, #308]	; (800814c <low_level_init+0x190>)
 8008018:	2201      	movs	r2, #1
 800801a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800801c:	4b4b      	ldr	r3, [pc, #300]	; (800814c <low_level_init+0x190>)
 800801e:	2200      	movs	r2, #0
 8008020:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8008022:	4b4a      	ldr	r3, [pc, #296]	; (800814c <low_level_init+0x190>)
 8008024:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008028:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800802a:	4848      	ldr	r0, [pc, #288]	; (800814c <low_level_init+0x190>)
 800802c:	f7fa ffd2 	bl	8002fd4 <HAL_ETH_Init>
 8008030:	4603      	mov	r3, r0
 8008032:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8008036:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800803a:	2b00      	cmp	r3, #0
 800803c:	d108      	bne.n	8008050 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008044:	f043 0304 	orr.w	r3, r3, #4
 8008048:	b2da      	uxtb	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008050:	2304      	movs	r3, #4
 8008052:	4a40      	ldr	r2, [pc, #256]	; (8008154 <low_level_init+0x198>)
 8008054:	4940      	ldr	r1, [pc, #256]	; (8008158 <low_level_init+0x19c>)
 8008056:	483d      	ldr	r0, [pc, #244]	; (800814c <low_level_init+0x190>)
 8008058:	f7fb f956 	bl	8003308 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800805c:	2304      	movs	r3, #4
 800805e:	4a3f      	ldr	r2, [pc, #252]	; (800815c <low_level_init+0x1a0>)
 8008060:	493f      	ldr	r1, [pc, #252]	; (8008160 <low_level_init+0x1a4>)
 8008062:	483a      	ldr	r0, [pc, #232]	; (800814c <low_level_init+0x190>)
 8008064:	f7fb f9b9 	bl	80033da <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2206      	movs	r2, #6
 800806c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008070:	4b36      	ldr	r3, [pc, #216]	; (800814c <low_level_init+0x190>)
 8008072:	695b      	ldr	r3, [r3, #20]
 8008074:	781a      	ldrb	r2, [r3, #0]
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800807c:	4b33      	ldr	r3, [pc, #204]	; (800814c <low_level_init+0x190>)
 800807e:	695b      	ldr	r3, [r3, #20]
 8008080:	785a      	ldrb	r2, [r3, #1]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008088:	4b30      	ldr	r3, [pc, #192]	; (800814c <low_level_init+0x190>)
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	789a      	ldrb	r2, [r3, #2]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008094:	4b2d      	ldr	r3, [pc, #180]	; (800814c <low_level_init+0x190>)
 8008096:	695b      	ldr	r3, [r3, #20]
 8008098:	78da      	ldrb	r2, [r3, #3]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80080a0:	4b2a      	ldr	r3, [pc, #168]	; (800814c <low_level_init+0x190>)
 80080a2:	695b      	ldr	r3, [r3, #20]
 80080a4:	791a      	ldrb	r2, [r3, #4]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80080ac:	4b27      	ldr	r3, [pc, #156]	; (800814c <low_level_init+0x190>)
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	795a      	ldrb	r2, [r3, #5]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80080be:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80080c6:	f043 030a 	orr.w	r3, r3, #10
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80080d2:	2300      	movs	r3, #0
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080d6:	2300      	movs	r3, #0
 80080d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80080da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80080de:	2101      	movs	r1, #1
 80080e0:	4618      	mov	r0, r3
 80080e2:	f000 fbfb 	bl	80088dc <osSemaphoreCreate>
 80080e6:	4603      	mov	r3, r0
 80080e8:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <low_level_init+0x1a8>)
 80080ea:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80080ec:	4b1e      	ldr	r3, [pc, #120]	; (8008168 <low_level_init+0x1ac>)
 80080ee:	f107 040c 	add.w	r4, r7, #12
 80080f2:	461d      	mov	r5, r3
 80080f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008100:	f107 030c 	add.w	r3, r7, #12
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	4618      	mov	r0, r3
 8008108:	f000 faeb 	bl	80086e2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800810c:	480f      	ldr	r0, [pc, #60]	; (800814c <low_level_init+0x190>)
 800810e:	f7fb fc8c 	bl	8003a2a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8008112:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008116:	461a      	mov	r2, r3
 8008118:	211d      	movs	r1, #29
 800811a:	480c      	ldr	r0, [pc, #48]	; (800814c <low_level_init+0x190>)
 800811c:	f7fb fbb7 	bl	800388e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	f043 030b 	orr.w	r3, r3, #11
 8008126:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812a:	461a      	mov	r2, r3
 800812c:	211d      	movs	r1, #29
 800812e:	4807      	ldr	r0, [pc, #28]	; (800814c <low_level_init+0x190>)
 8008130:	f7fb fc15 	bl	800395e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8008134:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008138:	461a      	mov	r2, r3
 800813a:	211d      	movs	r1, #29
 800813c:	4803      	ldr	r0, [pc, #12]	; (800814c <low_level_init+0x190>)
 800813e:	f7fb fba6 	bl	800388e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8008142:	bf00      	nop
 8008144:	3740      	adds	r7, #64	; 0x40
 8008146:	46bd      	mov	sp, r7
 8008148:	bdb0      	pop	{r4, r5, r7, pc}
 800814a:	bf00      	nop
 800814c:	200079c0 	.word	0x200079c0
 8008150:	40028000 	.word	0x40028000
 8008154:	20007a08 	.word	0x20007a08
 8008158:	200060f0 	.word	0x200060f0
 800815c:	20006170 	.word	0x20006170
 8008160:	20007940 	.word	0x20007940
 8008164:	2000074c 	.word	0x2000074c
 8008168:	08016ee4 	.word	0x08016ee4

0800816c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	; 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008176:	4b4b      	ldr	r3, [pc, #300]	; (80082a4 <low_level_output+0x138>)
 8008178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800817e:	2300      	movs	r3, #0
 8008180:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8008182:	2300      	movs	r3, #0
 8008184:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008186:	2300      	movs	r3, #0
 8008188:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800818e:	4b45      	ldr	r3, [pc, #276]	; (80082a4 <low_level_output+0x138>)
 8008190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008192:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	623b      	str	r3, [r7, #32]
 800819c:	e05a      	b.n	8008254 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800819e:	69bb      	ldr	r3, [r7, #24]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da03      	bge.n	80081ae <low_level_output+0x42>
      {
        errval = ERR_USE;
 80081a6:	23f8      	movs	r3, #248	; 0xf8
 80081a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80081ac:	e05c      	b.n	8008268 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80081ae:	6a3b      	ldr	r3, [r7, #32]
 80081b0:	895b      	ldrh	r3, [r3, #10]
 80081b2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80081b4:	2300      	movs	r3, #0
 80081b6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80081b8:	e02f      	b.n	800821a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80081ba:	69fa      	ldr	r2, [r7, #28]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	18d0      	adds	r0, r2, r3
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	685a      	ldr	r2, [r3, #4]
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	18d1      	adds	r1, r2, r3
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80081ce:	1a9b      	subs	r3, r3, r2
 80081d0:	461a      	mov	r2, r3
 80081d2:	f00d fdf7 	bl	8015dc4 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	da03      	bge.n	80081ec <low_level_output+0x80>
        {
          errval = ERR_USE;
 80081e4:	23f8      	movs	r3, #248	; 0xf8
 80081e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80081ea:	e03d      	b.n	8008268 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4413      	add	r3, r2
 80081f8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80081fc:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008208:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800820a:	697a      	ldr	r2, [r7, #20]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008214:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8008216:	2300      	movs	r3, #0
 8008218:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	4413      	add	r3, r2
 8008220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008224:	4293      	cmp	r3, r2
 8008226:	d8c8      	bhi.n	80081ba <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008228:	69fa      	ldr	r2, [r7, #28]
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	18d0      	adds	r0, r2, r3
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	4413      	add	r3, r2
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	4619      	mov	r1, r3
 800823a:	f00d fdc3 	bl	8015dc4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800823e:	693a      	ldr	r2, [r7, #16]
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4413      	add	r3, r2
 8008244:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	623b      	str	r3, [r7, #32]
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1a1      	bne.n	800819e <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	4811      	ldr	r0, [pc, #68]	; (80082a4 <low_level_output+0x138>)
 800825e:	f7fb f929 	bl	80034b4 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008268:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <low_level_output+0x138>)
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	f241 0314 	movw	r3, #4116	; 0x1014
 8008270:	4413      	add	r3, r2
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <low_level_output+0x138>)
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	f241 0314 	movw	r3, #4116	; 0x1014
 8008284:	4413      	add	r3, r2
 8008286:	2220      	movs	r2, #32
 8008288:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <low_level_output+0x138>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	f241 0304 	movw	r3, #4100	; 0x1004
 8008292:	4413      	add	r3, r2
 8008294:	2200      	movs	r2, #0
 8008296:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008298:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800829c:	4618      	mov	r0, r3
 800829e:	3728      	adds	r7, #40	; 0x28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	200079c0 	.word	0x200079c0

080082a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08c      	sub	sp, #48	; 0x30
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80082b4:	2300      	movs	r3, #0
 80082b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80082bc:	2300      	movs	r3, #0
 80082be:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80082c4:	2300      	movs	r3, #0
 80082c6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80082c8:	2300      	movs	r3, #0
 80082ca:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80082cc:	484f      	ldr	r0, [pc, #316]	; (800840c <low_level_input+0x164>)
 80082ce:	f7fb f9db 	bl	8003688 <HAL_ETH_GetReceivedFrame_IT>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <low_level_input+0x34>

    return NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	e092      	b.n	8008402 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80082dc:	4b4b      	ldr	r3, [pc, #300]	; (800840c <low_level_input+0x164>)
 80082de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082e0:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80082e2:	4b4a      	ldr	r3, [pc, #296]	; (800840c <low_level_input+0x164>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80082e8:	89fb      	ldrh	r3, [r7, #14]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d007      	beq.n	80082fe <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80082ee:	89fb      	ldrh	r3, [r7, #14]
 80082f0:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80082f4:	4619      	mov	r1, r3
 80082f6:	2000      	movs	r0, #0
 80082f8:	f004 ff52 	bl	800d1a0 <pbuf_alloc>
 80082fc:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2b00      	cmp	r3, #0
 8008302:	d04b      	beq.n	800839c <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008304:	4b41      	ldr	r3, [pc, #260]	; (800840c <low_level_input+0x164>)
 8008306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008308:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800830e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008310:	62bb      	str	r3, [r7, #40]	; 0x28
 8008312:	e040      	b.n	8008396 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8008314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008316:	895b      	ldrh	r3, [r3, #10]
 8008318:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800831e:	e021      	b.n	8008364 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	69bb      	ldr	r3, [r7, #24]
 8008326:	18d0      	adds	r0, r2, r3
 8008328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	18d1      	adds	r1, r2, r3
 800832e:	69fa      	ldr	r2, [r7, #28]
 8008330:	f240 53f4 	movw	r3, #1524	; 0x5f4
 8008334:	1a9b      	subs	r3, r3, r2
 8008336:	461a      	mov	r2, r3
 8008338:	f00d fd44 	bl	8015dc4 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8008342:	6a3b      	ldr	r3, [r7, #32]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008348:	69fa      	ldr	r2, [r7, #28]
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	4413      	add	r3, r2
 800834e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008352:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8008354:	69ba      	ldr	r2, [r7, #24]
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	1ad3      	subs	r3, r2, r3
 800835a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800835e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008360:	2300      	movs	r3, #0
 8008362:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008364:	697a      	ldr	r2, [r7, #20]
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800836e:	4293      	cmp	r3, r2
 8008370:	d8d6      	bhi.n	8008320 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8008372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008374:	685a      	ldr	r2, [r3, #4]
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	18d0      	adds	r0, r2, r3
 800837a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	4413      	add	r3, r2
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4619      	mov	r1, r3
 8008384:	f00d fd1e 	bl	8015dc4 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008388:	69fa      	ldr	r2, [r7, #28]
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	62bb      	str	r3, [r7, #40]	; 0x28
 8008396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1bb      	bne.n	8008314 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800839c:	4b1b      	ldr	r3, [pc, #108]	; (800840c <low_level_input+0x164>)
 800839e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	e00b      	b.n	80083c0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	3301      	adds	r3, #1
 80083be:	613b      	str	r3, [r7, #16]
 80083c0:	4b12      	ldr	r3, [pc, #72]	; (800840c <low_level_input+0x164>)
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	693a      	ldr	r2, [r7, #16]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3ee      	bcc.n	80083a8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80083ca:	4b10      	ldr	r3, [pc, #64]	; (800840c <low_level_input+0x164>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80083d0:	4b0e      	ldr	r3, [pc, #56]	; (800840c <low_level_input+0x164>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	f241 0314 	movw	r3, #4116	; 0x1014
 80083d8:	4413      	add	r3, r2
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00d      	beq.n	8008400 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80083e4:	4b09      	ldr	r3, [pc, #36]	; (800840c <low_level_input+0x164>)
 80083e6:	681a      	ldr	r2, [r3, #0]
 80083e8:	f241 0314 	movw	r3, #4116	; 0x1014
 80083ec:	4413      	add	r3, r2
 80083ee:	2280      	movs	r2, #128	; 0x80
 80083f0:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80083f2:	4b06      	ldr	r3, [pc, #24]	; (800840c <low_level_input+0x164>)
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	f241 0308 	movw	r3, #4104	; 0x1008
 80083fa:	4413      	add	r3, r2
 80083fc:	2200      	movs	r2, #0
 80083fe:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008402:	4618      	mov	r0, r3
 8008404:	3730      	adds	r7, #48	; 0x30
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	200079c0 	.word	0x200079c0

08008410 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800841c:	4b12      	ldr	r3, [pc, #72]	; (8008468 <ethernetif_input+0x58>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f04f 31ff 	mov.w	r1, #4294967295
 8008424:	4618      	mov	r0, r3
 8008426:	f000 fa8b 	bl	8008940 <osSemaphoreWait>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d1f5      	bne.n	800841c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008430:	480e      	ldr	r0, [pc, #56]	; (800846c <ethernetif_input+0x5c>)
 8008432:	f00d fc35 	bl	8015ca0 <sys_mutex_lock>
        p = low_level_input( netif );
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	f7ff ff36 	bl	80082a8 <low_level_input>
 800843c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800843e:	68bb      	ldr	r3, [r7, #8]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	68f9      	ldr	r1, [r7, #12]
 800844a:	68b8      	ldr	r0, [r7, #8]
 800844c:	4798      	blx	r3
 800844e:	4603      	mov	r3, r0
 8008450:	2b00      	cmp	r3, #0
 8008452:	d002      	beq.n	800845a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008454:	68b8      	ldr	r0, [r7, #8]
 8008456:	f005 f987 	bl	800d768 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800845a:	4804      	ldr	r0, [pc, #16]	; (800846c <ethernetif_input+0x5c>)
 800845c:	f00d fc2f 	bl	8015cbe <sys_mutex_unlock>
      } while(p!=NULL);
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e4      	bne.n	8008430 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008466:	e7d9      	b.n	800841c <ethernetif_input+0xc>
 8008468:	2000074c 	.word	0x2000074c
 800846c:	20009218 	.word	0x20009218

08008470 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d106      	bne.n	800848c <ethernetif_init+0x1c>
 800847e:	4b0e      	ldr	r3, [pc, #56]	; (80084b8 <ethernetif_init+0x48>)
 8008480:	f240 2235 	movw	r2, #565	; 0x235
 8008484:	490d      	ldr	r1, [pc, #52]	; (80084bc <ethernetif_init+0x4c>)
 8008486:	480e      	ldr	r0, [pc, #56]	; (80084c0 <ethernetif_init+0x50>)
 8008488:	f00d fcb2 	bl	8015df0 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2273      	movs	r2, #115	; 0x73
 8008490:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2274      	movs	r2, #116	; 0x74
 8008498:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	4a09      	ldr	r2, [pc, #36]	; (80084c4 <ethernetif_init+0x54>)
 80084a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	4a08      	ldr	r2, [pc, #32]	; (80084c8 <ethernetif_init+0x58>)
 80084a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f7ff fd87 	bl	8007fbc <low_level_init>

  return ERR_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	08016f00 	.word	0x08016f00
 80084bc:	08016f1c 	.word	0x08016f1c
 80084c0:	08016f2c 	.word	0x08016f2c
 80084c4:	08013e4d 	.word	0x08013e4d
 80084c8:	0800816d 	.word	0x0800816d

080084cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80084d0:	f7f9 fb2a 	bl	8001b28 <HAL_GetTick>
 80084d4:	4603      	mov	r3, r0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	bd80      	pop	{r7, pc}
	...

080084dc <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80084ec:	f107 0308 	add.w	r3, r7, #8
 80084f0:	461a      	mov	r2, r3
 80084f2:	2101      	movs	r1, #1
 80084f4:	4816      	ldr	r0, [pc, #88]	; (8008550 <ethernetif_set_link+0x74>)
 80084f6:	f7fb f9ca 	bl	800388e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800850a:	f003 0304 	and.w	r3, r3, #4
 800850e:	2b00      	cmp	r3, #0
 8008510:	d108      	bne.n	8008524 <ethernetif_set_link+0x48>
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d005      	beq.n	8008524 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4618      	mov	r0, r3
 800851e:	f004 fd11 	bl	800cf44 <netif_set_link_up>
 8008522:	e011      	b.n	8008548 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800852c:	089b      	lsrs	r3, r3, #2
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	d007      	beq.n	8008548 <ethernetif_set_link+0x6c>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d104      	bne.n	8008548 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f004 fd32 	bl	800cfac <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008548:	20c8      	movs	r0, #200	; 0xc8
 800854a:	f000 f916 	bl	800877a <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800854e:	e7cd      	b.n	80084ec <ethernetif_set_link+0x10>
 8008550:	200079c0 	.word	0x200079c0

08008554 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800855c:	2300      	movs	r3, #0
 800855e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008560:	2300      	movs	r3, #0
 8008562:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800856a:	089b      	lsrs	r3, r3, #2
 800856c:	f003 0301 	and.w	r3, r3, #1
 8008570:	b2db      	uxtb	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d05d      	beq.n	8008632 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008576:	4b34      	ldr	r3, [pc, #208]	; (8008648 <ethernetif_update_config+0xf4>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d03f      	beq.n	80085fe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800857e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008582:	2100      	movs	r1, #0
 8008584:	4830      	ldr	r0, [pc, #192]	; (8008648 <ethernetif_update_config+0xf4>)
 8008586:	f7fb f9ea 	bl	800395e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800858a:	f7f9 facd 	bl	8001b28 <HAL_GetTick>
 800858e:	4603      	mov	r3, r0
 8008590:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	461a      	mov	r2, r3
 8008598:	2101      	movs	r1, #1
 800859a:	482b      	ldr	r0, [pc, #172]	; (8008648 <ethernetif_update_config+0xf4>)
 800859c:	f7fb f977 	bl	800388e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 80085a0:	f7f9 fac2 	bl	8001b28 <HAL_GetTick>
 80085a4:	4602      	mov	r2, r0
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80085ae:	d828      	bhi.n	8008602 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	f003 0320 	and.w	r3, r3, #32
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d0eb      	beq.n	8008592 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 80085ba:	f107 0308 	add.w	r3, r7, #8
 80085be:	461a      	mov	r2, r3
 80085c0:	2110      	movs	r1, #16
 80085c2:	4821      	ldr	r0, [pc, #132]	; (8008648 <ethernetif_update_config+0xf4>)
 80085c4:	f7fb f963 	bl	800388e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 0304 	and.w	r3, r3, #4
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d004      	beq.n	80085dc <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80085d2:	4b1d      	ldr	r3, [pc, #116]	; (8008648 <ethernetif_update_config+0xf4>)
 80085d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	e002      	b.n	80085e2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 80085dc:	4b1a      	ldr	r3, [pc, #104]	; (8008648 <ethernetif_update_config+0xf4>)
 80085de:	2200      	movs	r2, #0
 80085e0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	f003 0302 	and.w	r3, r3, #2
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d003      	beq.n	80085f4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 80085ec:	4b16      	ldr	r3, [pc, #88]	; (8008648 <ethernetif_update_config+0xf4>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	609a      	str	r2, [r3, #8]
 80085f2:	e016      	b.n	8008622 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 80085f4:	4b14      	ldr	r3, [pc, #80]	; (8008648 <ethernetif_update_config+0xf4>)
 80085f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085fa:	609a      	str	r2, [r3, #8]
 80085fc:	e011      	b.n	8008622 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 80085fe:	bf00      	nop
 8008600:	e000      	b.n	8008604 <ethernetif_update_config+0xb0>
          goto error;
 8008602:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008604:	4b10      	ldr	r3, [pc, #64]	; (8008648 <ethernetif_update_config+0xf4>)
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	08db      	lsrs	r3, r3, #3
 800860a:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800860c:	4b0e      	ldr	r3, [pc, #56]	; (8008648 <ethernetif_update_config+0xf4>)
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	085b      	lsrs	r3, r3, #1
 8008612:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008614:	4313      	orrs	r3, r2
 8008616:	b29b      	uxth	r3, r3
 8008618:	461a      	mov	r2, r3
 800861a:	2100      	movs	r1, #0
 800861c:	480a      	ldr	r0, [pc, #40]	; (8008648 <ethernetif_update_config+0xf4>)
 800861e:	f7fb f99e 	bl	800395e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008622:	2100      	movs	r1, #0
 8008624:	4808      	ldr	r0, [pc, #32]	; (8008648 <ethernetif_update_config+0xf4>)
 8008626:	f7fb fa5f 	bl	8003ae8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800862a:	4807      	ldr	r0, [pc, #28]	; (8008648 <ethernetif_update_config+0xf4>)
 800862c:	f7fb f9fd 	bl	8003a2a <HAL_ETH_Start>
 8008630:	e002      	b.n	8008638 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008632:	4805      	ldr	r0, [pc, #20]	; (8008648 <ethernetif_update_config+0xf4>)
 8008634:	f7fb fa28 	bl	8003a88 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f807 	bl	800864c <ethernetif_notify_conn_changed>
}
 800863e:	bf00      	nop
 8008640:	3710      	adds	r7, #16
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	200079c0 	.word	0x200079c0

0800864c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800864c:	b480      	push	{r7}
 800864e:	b083      	sub	sp, #12
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008654:	bf00      	nop
 8008656:	370c      	adds	r7, #12
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr

08008660 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008660:	b480      	push	{r7}
 8008662:	b085      	sub	sp, #20
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800866a:	2300      	movs	r3, #0
 800866c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800866e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008672:	2b84      	cmp	r3, #132	; 0x84
 8008674:	d005      	beq.n	8008682 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008676:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	4413      	add	r3, r2
 800867e:	3303      	adds	r3, #3
 8008680:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008682:	68fb      	ldr	r3, [r7, #12]
}
 8008684:	4618      	mov	r0, r3
 8008686:	3714      	adds	r7, #20
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008690:	b480      	push	{r7}
 8008692:	b083      	sub	sp, #12
 8008694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008696:	f3ef 8305 	mrs	r3, IPSR
 800869a:	607b      	str	r3, [r7, #4]
  return(result);
 800869c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf14      	ite	ne
 80086a2:	2301      	movne	r3, #1
 80086a4:	2300      	moveq	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80086b8:	f001 fd04 	bl	800a0c4 <vTaskStartScheduler>
  
  return osOK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80086c6:	f7ff ffe3 	bl	8008690 <inHandlerMode>
 80086ca:	4603      	mov	r3, r0
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d003      	beq.n	80086d8 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80086d0:	f001 fe1e 	bl	800a310 <xTaskGetTickCountFromISR>
 80086d4:	4603      	mov	r3, r0
 80086d6:	e002      	b.n	80086de <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80086d8:	f001 fe0a 	bl	800a2f0 <xTaskGetTickCount>
 80086dc:	4603      	mov	r3, r0
  }
}
 80086de:	4618      	mov	r0, r3
 80086e0:	bd80      	pop	{r7, pc}

080086e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80086e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80086e4:	b089      	sub	sp, #36	; 0x24
 80086e6:	af04      	add	r7, sp, #16
 80086e8:	6078      	str	r0, [r7, #4]
 80086ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	695b      	ldr	r3, [r3, #20]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d020      	beq.n	8008736 <osThreadCreate+0x54>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	699b      	ldr	r3, [r3, #24]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d01c      	beq.n	8008736 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685c      	ldr	r4, [r3, #4]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681d      	ldr	r5, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	691e      	ldr	r6, [r3, #16]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800870e:	4618      	mov	r0, r3
 8008710:	f7ff ffa6 	bl	8008660 <makeFreeRtosPriority>
 8008714:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800871e:	9202      	str	r2, [sp, #8]
 8008720:	9301      	str	r3, [sp, #4]
 8008722:	9100      	str	r1, [sp, #0]
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	4632      	mov	r2, r6
 8008728:	4629      	mov	r1, r5
 800872a:	4620      	mov	r0, r4
 800872c:	f001 faf8 	bl	8009d20 <xTaskCreateStatic>
 8008730:	4603      	mov	r3, r0
 8008732:	60fb      	str	r3, [r7, #12]
 8008734:	e01c      	b.n	8008770 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685c      	ldr	r4, [r3, #4]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008742:	b29e      	uxth	r6, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff ff88 	bl	8008660 <makeFreeRtosPriority>
 8008750:	4602      	mov	r2, r0
 8008752:	f107 030c 	add.w	r3, r7, #12
 8008756:	9301      	str	r3, [sp, #4]
 8008758:	9200      	str	r2, [sp, #0]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	4632      	mov	r2, r6
 800875e:	4629      	mov	r1, r5
 8008760:	4620      	mov	r0, r4
 8008762:	f001 fb40 	bl	8009de6 <xTaskCreate>
 8008766:	4603      	mov	r3, r0
 8008768:	2b01      	cmp	r3, #1
 800876a:	d001      	beq.n	8008770 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800876c:	2300      	movs	r3, #0
 800876e:	e000      	b.n	8008772 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008770:	68fb      	ldr	r3, [r7, #12]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800877a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b084      	sub	sp, #16
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d001      	beq.n	8008790 <osDelay+0x16>
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	e000      	b.n	8008792 <osDelay+0x18>
 8008790:	2301      	movs	r3, #1
 8008792:	4618      	mov	r0, r3
 8008794:	f001 fc60 	bl	800a058 <vTaskDelay>
  
  return osOK;
 8008798:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800879a:	4618      	mov	r0, r3
 800879c:	3710      	adds	r7, #16
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}

080087a2 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 80087a2:	b580      	push	{r7, lr}
 80087a4:	b082      	sub	sp, #8
 80087a6:	af00      	add	r7, sp, #0
 80087a8:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d007      	beq.n	80087c2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	4619      	mov	r1, r3
 80087b8:	2001      	movs	r0, #1
 80087ba:	f000 fc54 	bl	8009066 <xQueueCreateMutexStatic>
 80087be:	4603      	mov	r3, r0
 80087c0:	e003      	b.n	80087ca <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80087c2:	2001      	movs	r0, #1
 80087c4:	f000 fc37 	bl	8009036 <xQueueCreateMutex>
 80087c8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80087de:	2300      	movs	r3, #0
 80087e0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <osMutexWait+0x18>
    return osErrorParameter;
 80087e8:	2380      	movs	r3, #128	; 0x80
 80087ea:	e03a      	b.n	8008862 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f6:	d103      	bne.n	8008800 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80087f8:	f04f 33ff 	mov.w	r3, #4294967295
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	e009      	b.n	8008814 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d006      	beq.n	8008814 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d101      	bne.n	8008814 <osMutexWait+0x40>
      ticks = 1;
 8008810:	2301      	movs	r3, #1
 8008812:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008814:	f7ff ff3c 	bl	8008690 <inHandlerMode>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d017      	beq.n	800884e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800881e:	f107 0308 	add.w	r3, r7, #8
 8008822:	461a      	mov	r2, r3
 8008824:	2100      	movs	r1, #0
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f001 f86e 	bl	8009908 <xQueueReceiveFromISR>
 800882c:	4603      	mov	r3, r0
 800882e:	2b01      	cmp	r3, #1
 8008830:	d001      	beq.n	8008836 <osMutexWait+0x62>
      return osErrorOS;
 8008832:	23ff      	movs	r3, #255	; 0xff
 8008834:	e015      	b.n	8008862 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d011      	beq.n	8008860 <osMutexWait+0x8c>
 800883c:	4b0b      	ldr	r3, [pc, #44]	; (800886c <osMutexWait+0x98>)
 800883e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	f3bf 8f6f 	isb	sy
 800884c:	e008      	b.n	8008860 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800884e:	68f9      	ldr	r1, [r7, #12]
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 ff45 	bl	80096e0 <xQueueSemaphoreTake>
 8008856:	4603      	mov	r3, r0
 8008858:	2b01      	cmp	r3, #1
 800885a:	d001      	beq.n	8008860 <osMutexWait+0x8c>
    return osErrorOS;
 800885c:	23ff      	movs	r3, #255	; 0xff
 800885e:	e000      	b.n	8008862 <osMutexWait+0x8e>
  }
  
  return osOK;
 8008860:	2300      	movs	r3, #0
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008880:	f7ff ff06 	bl	8008690 <inHandlerMode>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d016      	beq.n	80088b8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800888a:	f107 0308 	add.w	r3, r7, #8
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fda9 	bl	80093e8 <xQueueGiveFromISR>
 8008896:	4603      	mov	r3, r0
 8008898:	2b01      	cmp	r3, #1
 800889a:	d001      	beq.n	80088a0 <osMutexRelease+0x30>
      return osErrorOS;
 800889c:	23ff      	movs	r3, #255	; 0xff
 800889e:	e017      	b.n	80088d0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d013      	beq.n	80088ce <osMutexRelease+0x5e>
 80088a6:	4b0c      	ldr	r3, [pc, #48]	; (80088d8 <osMutexRelease+0x68>)
 80088a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	f3bf 8f6f 	isb	sy
 80088b6:	e00a      	b.n	80088ce <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 80088b8:	2300      	movs	r3, #0
 80088ba:	2200      	movs	r2, #0
 80088bc:	2100      	movs	r1, #0
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f000 fbec 	bl	800909c <xQueueGenericSend>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d001      	beq.n	80088ce <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80088ca:	23ff      	movs	r3, #255	; 0xff
 80088cc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80088ce:	68fb      	ldr	r3, [r7, #12]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00f      	beq.n	800890e <osSemaphoreCreate+0x32>
    if (count == 1) {
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10a      	bne.n	800890a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2203      	movs	r2, #3
 80088fa:	9200      	str	r2, [sp, #0]
 80088fc:	2200      	movs	r2, #0
 80088fe:	2100      	movs	r1, #0
 8008900:	2001      	movs	r0, #1
 8008902:	f000 fa9b 	bl	8008e3c <xQueueGenericCreateStatic>
 8008906:	4603      	mov	r3, r0
 8008908:	e016      	b.n	8008938 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800890a:	2300      	movs	r3, #0
 800890c:	e014      	b.n	8008938 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	2b01      	cmp	r3, #1
 8008912:	d110      	bne.n	8008936 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008914:	2203      	movs	r2, #3
 8008916:	2100      	movs	r1, #0
 8008918:	2001      	movs	r0, #1
 800891a:	f000 fb11 	bl	8008f40 <xQueueGenericCreate>
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d005      	beq.n	8008932 <osSemaphoreCreate+0x56>
 8008926:	2300      	movs	r3, #0
 8008928:	2200      	movs	r2, #0
 800892a:	2100      	movs	r1, #0
 800892c:	68f8      	ldr	r0, [r7, #12]
 800892e:	f000 fbb5 	bl	800909c <xQueueGenericSend>
      return sema;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	e000      	b.n	8008938 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008936:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008938:	4618      	mov	r0, r3
 800893a:	3710      	adds	r7, #16
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b084      	sub	sp, #16
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800894a:	2300      	movs	r3, #0
 800894c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008954:	2380      	movs	r3, #128	; 0x80
 8008956:	e03a      	b.n	80089ce <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008958:	2300      	movs	r3, #0
 800895a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008962:	d103      	bne.n	800896c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008964:	f04f 33ff 	mov.w	r3, #4294967295
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	e009      	b.n	8008980 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d006      	beq.n	8008980 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d101      	bne.n	8008980 <osSemaphoreWait+0x40>
      ticks = 1;
 800897c:	2301      	movs	r3, #1
 800897e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008980:	f7ff fe86 	bl	8008690 <inHandlerMode>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	d017      	beq.n	80089ba <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800898a:	f107 0308 	add.w	r3, r7, #8
 800898e:	461a      	mov	r2, r3
 8008990:	2100      	movs	r1, #0
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 ffb8 	bl	8009908 <xQueueReceiveFromISR>
 8008998:	4603      	mov	r3, r0
 800899a:	2b01      	cmp	r3, #1
 800899c:	d001      	beq.n	80089a2 <osSemaphoreWait+0x62>
      return osErrorOS;
 800899e:	23ff      	movs	r3, #255	; 0xff
 80089a0:	e015      	b.n	80089ce <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d011      	beq.n	80089cc <osSemaphoreWait+0x8c>
 80089a8:	4b0b      	ldr	r3, [pc, #44]	; (80089d8 <osSemaphoreWait+0x98>)
 80089aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089ae:	601a      	str	r2, [r3, #0]
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	f3bf 8f6f 	isb	sy
 80089b8:	e008      	b.n	80089cc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80089ba:	68f9      	ldr	r1, [r7, #12]
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fe8f 	bl	80096e0 <xQueueSemaphoreTake>
 80089c2:	4603      	mov	r3, r0
 80089c4:	2b01      	cmp	r3, #1
 80089c6:	d001      	beq.n	80089cc <osSemaphoreWait+0x8c>
    return osErrorOS;
 80089c8:	23ff      	movs	r3, #255	; 0xff
 80089ca:	e000      	b.n	80089ce <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}
 80089d6:	bf00      	nop
 80089d8:	e000ed04 	.word	0xe000ed04

080089dc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80089e8:	2300      	movs	r3, #0
 80089ea:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80089ec:	f7ff fe50 	bl	8008690 <inHandlerMode>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d016      	beq.n	8008a24 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80089f6:	f107 0308 	add.w	r3, r7, #8
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fcf3 	bl	80093e8 <xQueueGiveFromISR>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d001      	beq.n	8008a0c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008a08:	23ff      	movs	r3, #255	; 0xff
 8008a0a:	e017      	b.n	8008a3c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d013      	beq.n	8008a3a <osSemaphoreRelease+0x5e>
 8008a12:	4b0c      	ldr	r3, [pc, #48]	; (8008a44 <osSemaphoreRelease+0x68>)
 8008a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a18:	601a      	str	r2, [r3, #0]
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	e00a      	b.n	8008a3a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008a24:	2300      	movs	r3, #0
 8008a26:	2200      	movs	r2, #0
 8008a28:	2100      	movs	r1, #0
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fb36 	bl	800909c <xQueueGenericSend>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d001      	beq.n	8008a3a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008a36:	23ff      	movs	r3, #255	; 0xff
 8008a38:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008a48:	b590      	push	{r4, r7, lr}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af02      	add	r7, sp, #8
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d011      	beq.n	8008a7e <osMessageCreate+0x36>
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d00d      	beq.n	8008a7e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6818      	ldr	r0, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6859      	ldr	r1, [r3, #4]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	2400      	movs	r4, #0
 8008a74:	9400      	str	r4, [sp, #0]
 8008a76:	f000 f9e1 	bl	8008e3c <xQueueGenericCreateStatic>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	e008      	b.n	8008a90 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6818      	ldr	r0, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	4619      	mov	r1, r3
 8008a8a:	f000 fa59 	bl	8008f40 <xQueueGenericCreate>
 8008a8e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd90      	pop	{r4, r7, pc}

08008a98 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <osMessagePut+0x1e>
    ticks = 1;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ab6:	f7ff fdeb 	bl	8008690 <inHandlerMode>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d018      	beq.n	8008af2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008ac0:	f107 0210 	add.w	r2, r7, #16
 8008ac4:	f107 0108 	add.w	r1, r7, #8
 8008ac8:	2300      	movs	r3, #0
 8008aca:	68f8      	ldr	r0, [r7, #12]
 8008acc:	f000 fbec 	bl	80092a8 <xQueueGenericSendFromISR>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b01      	cmp	r3, #1
 8008ad4:	d001      	beq.n	8008ada <osMessagePut+0x42>
      return osErrorOS;
 8008ad6:	23ff      	movs	r3, #255	; 0xff
 8008ad8:	e018      	b.n	8008b0c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d014      	beq.n	8008b0a <osMessagePut+0x72>
 8008ae0:	4b0c      	ldr	r3, [pc, #48]	; (8008b14 <osMessagePut+0x7c>)
 8008ae2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ae6:	601a      	str	r2, [r3, #0]
 8008ae8:	f3bf 8f4f 	dsb	sy
 8008aec:	f3bf 8f6f 	isb	sy
 8008af0:	e00b      	b.n	8008b0a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008af2:	f107 0108 	add.w	r1, r7, #8
 8008af6:	2300      	movs	r3, #0
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f000 face 	bl	800909c <xQueueGenericSend>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d001      	beq.n	8008b0a <osMessagePut+0x72>
      return osErrorOS;
 8008b06:	23ff      	movs	r3, #255	; 0xff
 8008b08:	e000      	b.n	8008b0c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	e000ed04 	.word	0xe000ed04

08008b18 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8008b18:	b590      	push	{r4, r7, lr}
 8008b1a:	b08b      	sub	sp, #44	; 0x2c
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d10a      	bne.n	8008b48 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8008b32:	2380      	movs	r3, #128	; 0x80
 8008b34:	617b      	str	r3, [r7, #20]
    return event;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	461c      	mov	r4, r3
 8008b3a:	f107 0314 	add.w	r3, r7, #20
 8008b3e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008b42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008b46:	e054      	b.n	8008bf2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d103      	bne.n	8008b60 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8008b58:	f04f 33ff 	mov.w	r3, #4294967295
 8008b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b5e:	e009      	b.n	8008b74 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d006      	beq.n	8008b74 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d101      	bne.n	8008b74 <osMessageGet+0x5c>
      ticks = 1;
 8008b70:	2301      	movs	r3, #1
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8008b74:	f7ff fd8c 	bl	8008690 <inHandlerMode>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d01c      	beq.n	8008bb8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8008b7e:	f107 0220 	add.w	r2, r7, #32
 8008b82:	f107 0314 	add.w	r3, r7, #20
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	68b8      	ldr	r0, [r7, #8]
 8008b8c:	f000 febc 	bl	8009908 <xQueueReceiveFromISR>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b01      	cmp	r3, #1
 8008b94:	d102      	bne.n	8008b9c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8008b96:	2310      	movs	r3, #16
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e001      	b.n	8008ba0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01d      	beq.n	8008be2 <osMessageGet+0xca>
 8008ba6:	4b15      	ldr	r3, [pc, #84]	; (8008bfc <osMessageGet+0xe4>)
 8008ba8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bac:	601a      	str	r2, [r3, #0]
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	f3bf 8f6f 	isb	sy
 8008bb6:	e014      	b.n	8008be2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8008bb8:	f107 0314 	add.w	r3, r7, #20
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	68b8      	ldr	r0, [r7, #8]
 8008bc4:	f000 fca6 	bl	8009514 <xQueueReceive>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	2b01      	cmp	r3, #1
 8008bcc:	d102      	bne.n	8008bd4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8008bce:	2310      	movs	r3, #16
 8008bd0:	617b      	str	r3, [r7, #20]
 8008bd2:	e006      	b.n	8008be2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8008bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d101      	bne.n	8008bde <osMessageGet+0xc6>
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e000      	b.n	8008be0 <osMessageGet+0xc8>
 8008bde:	2340      	movs	r3, #64	; 0x40
 8008be0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	461c      	mov	r4, r3
 8008be6:	f107 0314 	add.w	r3, r7, #20
 8008bea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8008bf2:	68f8      	ldr	r0, [r7, #12]
 8008bf4:	372c      	adds	r7, #44	; 0x2c
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd90      	pop	{r4, r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	e000ed04 	.word	0xe000ed04

08008c00 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c00:	b480      	push	{r7}
 8008c02:	b083      	sub	sp, #12
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f103 0208 	add.w	r2, r3, #8
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f04f 32ff 	mov.w	r2, #4294967295
 8008c18:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f103 0208 	add.w	r2, r3, #8
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f103 0208 	add.w	r2, r3, #8
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c5a:	b480      	push	{r7}
 8008c5c:	b085      	sub	sp, #20
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	683a      	ldr	r2, [r7, #0]
 8008c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	683a      	ldr	r2, [r7, #0]
 8008c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	1c5a      	adds	r2, r3, #1
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	601a      	str	r2, [r3, #0]
}
 8008c96:	bf00      	nop
 8008c98:	3714      	adds	r7, #20
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca0:	4770      	bx	lr

08008ca2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ca2:	b480      	push	{r7}
 8008ca4:	b085      	sub	sp, #20
 8008ca6:	af00      	add	r7, sp, #0
 8008ca8:	6078      	str	r0, [r7, #4]
 8008caa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cb8:	d103      	bne.n	8008cc2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e00c      	b.n	8008cdc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	3308      	adds	r3, #8
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	e002      	b.n	8008cd0 <vListInsert+0x2e>
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	60fb      	str	r3, [r7, #12]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68ba      	ldr	r2, [r7, #8]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d2f6      	bcs.n	8008cca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	685a      	ldr	r2, [r3, #4]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	68fa      	ldr	r2, [r7, #12]
 8008cf0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	683a      	ldr	r2, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	1c5a      	adds	r2, r3, #1
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
}
 8008d08:	bf00      	nop
 8008d0a:	3714      	adds	r7, #20
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6892      	ldr	r2, [r2, #8]
 8008d2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6852      	ldr	r2, [r2, #4]
 8008d34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	429a      	cmp	r2, r3
 8008d3e:	d103      	bne.n	8008d48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	1e5a      	subs	r2, r3, #1
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	681b      	ldr	r3, [r3, #0]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3714      	adds	r7, #20
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10c      	bne.n	8008d96 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	b672      	cpsid	i
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	b662      	cpsie	i
 8008d90:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d92:	bf00      	nop
 8008d94:	e7fe      	b.n	8008d94 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8008d96:	f002 fc89 	bl	800b6ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da2:	68f9      	ldr	r1, [r7, #12]
 8008da4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008da6:	fb01 f303 	mul.w	r3, r1, r3
 8008daa:	441a      	add	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2200      	movs	r2, #0
 8008db4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	3b01      	subs	r3, #1
 8008dc8:	68f9      	ldr	r1, [r7, #12]
 8008dca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dcc:	fb01 f303 	mul.w	r3, r1, r3
 8008dd0:	441a      	add	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	22ff      	movs	r2, #255	; 0xff
 8008dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	22ff      	movs	r2, #255	; 0xff
 8008de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d114      	bne.n	8008e16 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d01a      	beq.n	8008e2a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	3310      	adds	r3, #16
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 fc07 	bl	800a60c <xTaskRemoveFromEventList>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d012      	beq.n	8008e2a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e04:	4b0c      	ldr	r3, [pc, #48]	; (8008e38 <xQueueGenericReset+0xd0>)
 8008e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	f3bf 8f4f 	dsb	sy
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	e009      	b.n	8008e2a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3310      	adds	r3, #16
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f7ff fef0 	bl	8008c00 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	3324      	adds	r3, #36	; 0x24
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7ff feeb 	bl	8008c00 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e2a:	f002 fc73 	bl	800b714 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e2e:	2301      	movs	r3, #1
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	e000ed04 	.word	0xe000ed04

08008e3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b08e      	sub	sp, #56	; 0x38
 8008e40:	af02      	add	r7, sp, #8
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
 8008e48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10c      	bne.n	8008e6a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	b672      	cpsid	i
 8008e56:	f383 8811 	msr	BASEPRI, r3
 8008e5a:	f3bf 8f6f 	isb	sy
 8008e5e:	f3bf 8f4f 	dsb	sy
 8008e62:	b662      	cpsie	i
 8008e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e66:	bf00      	nop
 8008e68:	e7fe      	b.n	8008e68 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10c      	bne.n	8008e8a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d002      	beq.n	8008e96 <xQueueGenericCreateStatic+0x5a>
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d001      	beq.n	8008e9a <xQueueGenericCreateStatic+0x5e>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e000      	b.n	8008e9c <xQueueGenericCreateStatic+0x60>
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d10c      	bne.n	8008eba <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8008ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea4:	b672      	cpsid	i
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	b662      	cpsie	i
 8008eb4:	623b      	str	r3, [r7, #32]
}
 8008eb6:	bf00      	nop
 8008eb8:	e7fe      	b.n	8008eb8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <xQueueGenericCreateStatic+0x8a>
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d101      	bne.n	8008eca <xQueueGenericCreateStatic+0x8e>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e000      	b.n	8008ecc <xQueueGenericCreateStatic+0x90>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d10c      	bne.n	8008eea <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8008ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed4:	b672      	cpsid	i
 8008ed6:	f383 8811 	msr	BASEPRI, r3
 8008eda:	f3bf 8f6f 	isb	sy
 8008ede:	f3bf 8f4f 	dsb	sy
 8008ee2:	b662      	cpsie	i
 8008ee4:	61fb      	str	r3, [r7, #28]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eea:	2348      	movs	r3, #72	; 0x48
 8008eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b48      	cmp	r3, #72	; 0x48
 8008ef2:	d00c      	beq.n	8008f0e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	b672      	cpsid	i
 8008efa:	f383 8811 	msr	BASEPRI, r3
 8008efe:	f3bf 8f6f 	isb	sy
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	b662      	cpsie	i
 8008f08:	61bb      	str	r3, [r7, #24]
}
 8008f0a:	bf00      	nop
 8008f0c:	e7fe      	b.n	8008f0c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f0e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00d      	beq.n	8008f36 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f22:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	4613      	mov	r3, r2
 8008f2c:	687a      	ldr	r2, [r7, #4]
 8008f2e:	68b9      	ldr	r1, [r7, #8]
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 f847 	bl	8008fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3730      	adds	r7, #48	; 0x30
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08a      	sub	sp, #40	; 0x28
 8008f44:	af02      	add	r7, sp, #8
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	4613      	mov	r3, r2
 8008f4c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10c      	bne.n	8008f6e <xQueueGenericCreate+0x2e>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	b672      	cpsid	i
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	b662      	cpsie	i
 8008f68:	613b      	str	r3, [r7, #16]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	61fb      	str	r3, [r7, #28]
 8008f78:	e004      	b.n	8008f84 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	68ba      	ldr	r2, [r7, #8]
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	3348      	adds	r3, #72	; 0x48
 8008f88:	4618      	mov	r0, r3
 8008f8a:	f002 fcbb 	bl	800b904 <pvPortMalloc>
 8008f8e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d011      	beq.n	8008fba <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	3348      	adds	r3, #72	; 0x48
 8008f9e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008fa8:	79fa      	ldrb	r2, [r7, #7]
 8008faa:	69bb      	ldr	r3, [r7, #24]
 8008fac:	9300      	str	r3, [sp, #0]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	697a      	ldr	r2, [r7, #20]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f805 	bl	8008fc4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008fba:	69bb      	ldr	r3, [r7, #24]
	}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3720      	adds	r7, #32
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d103      	bne.n	8008fe0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	69ba      	ldr	r2, [r7, #24]
 8008fdc:	601a      	str	r2, [r3, #0]
 8008fde:	e002      	b.n	8008fe6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fe0:	69bb      	ldr	r3, [r7, #24]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	68fa      	ldr	r2, [r7, #12]
 8008fea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fec:	69bb      	ldr	r3, [r7, #24]
 8008fee:	68ba      	ldr	r2, [r7, #8]
 8008ff0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ff2:	2101      	movs	r1, #1
 8008ff4:	69b8      	ldr	r0, [r7, #24]
 8008ff6:	f7ff feb7 	bl	8008d68 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008ffa:	bf00      	nop
 8008ffc:	3710      	adds	r7, #16
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}

08009002 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009002:	b580      	push	{r7, lr}
 8009004:	b082      	sub	sp, #8
 8009006:	af00      	add	r7, sp, #0
 8009008:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00e      	beq.n	800902e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	2200      	movs	r2, #0
 800901a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2200      	movs	r2, #0
 8009020:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009022:	2300      	movs	r3, #0
 8009024:	2200      	movs	r2, #0
 8009026:	2100      	movs	r1, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f837 	bl	800909c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800902e:	bf00      	nop
 8009030:	3708      	adds	r7, #8
 8009032:	46bd      	mov	sp, r7
 8009034:	bd80      	pop	{r7, pc}

08009036 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009036:	b580      	push	{r7, lr}
 8009038:	b086      	sub	sp, #24
 800903a:	af00      	add	r7, sp, #0
 800903c:	4603      	mov	r3, r0
 800903e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009040:	2301      	movs	r3, #1
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	2300      	movs	r3, #0
 8009046:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009048:	79fb      	ldrb	r3, [r7, #7]
 800904a:	461a      	mov	r2, r3
 800904c:	6939      	ldr	r1, [r7, #16]
 800904e:	6978      	ldr	r0, [r7, #20]
 8009050:	f7ff ff76 	bl	8008f40 <xQueueGenericCreate>
 8009054:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f7ff ffd3 	bl	8009002 <prvInitialiseMutex>

		return xNewQueue;
 800905c:	68fb      	ldr	r3, [r7, #12]
	}
 800905e:	4618      	mov	r0, r3
 8009060:	3718      	adds	r7, #24
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009066:	b580      	push	{r7, lr}
 8009068:	b088      	sub	sp, #32
 800906a:	af02      	add	r7, sp, #8
 800906c:	4603      	mov	r3, r0
 800906e:	6039      	str	r1, [r7, #0]
 8009070:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009072:	2301      	movs	r3, #1
 8009074:	617b      	str	r3, [r7, #20]
 8009076:	2300      	movs	r3, #0
 8009078:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800907a:	79fb      	ldrb	r3, [r7, #7]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2200      	movs	r2, #0
 8009082:	6939      	ldr	r1, [r7, #16]
 8009084:	6978      	ldr	r0, [r7, #20]
 8009086:	f7ff fed9 	bl	8008e3c <xQueueGenericCreateStatic>
 800908a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f7ff ffb8 	bl	8009002 <prvInitialiseMutex>

		return xNewQueue;
 8009092:	68fb      	ldr	r3, [r7, #12]
	}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b08e      	sub	sp, #56	; 0x38
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80090aa:	2300      	movs	r3, #0
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d10c      	bne.n	80090d2 <xQueueGenericSend+0x36>
	__asm volatile
 80090b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090bc:	b672      	cpsid	i
 80090be:	f383 8811 	msr	BASEPRI, r3
 80090c2:	f3bf 8f6f 	isb	sy
 80090c6:	f3bf 8f4f 	dsb	sy
 80090ca:	b662      	cpsie	i
 80090cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090ce:	bf00      	nop
 80090d0:	e7fe      	b.n	80090d0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d103      	bne.n	80090e0 <xQueueGenericSend+0x44>
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <xQueueGenericSend+0x48>
 80090e0:	2301      	movs	r3, #1
 80090e2:	e000      	b.n	80090e6 <xQueueGenericSend+0x4a>
 80090e4:	2300      	movs	r3, #0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10c      	bne.n	8009104 <xQueueGenericSend+0x68>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	b672      	cpsid	i
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	b662      	cpsie	i
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d103      	bne.n	8009112 <xQueueGenericSend+0x76>
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	2b01      	cmp	r3, #1
 8009110:	d101      	bne.n	8009116 <xQueueGenericSend+0x7a>
 8009112:	2301      	movs	r3, #1
 8009114:	e000      	b.n	8009118 <xQueueGenericSend+0x7c>
 8009116:	2300      	movs	r3, #0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10c      	bne.n	8009136 <xQueueGenericSend+0x9a>
	__asm volatile
 800911c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009120:	b672      	cpsid	i
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	b662      	cpsie	i
 8009130:	623b      	str	r3, [r7, #32]
}
 8009132:	bf00      	nop
 8009134:	e7fe      	b.n	8009134 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009136:	f001 fc2d 	bl	800a994 <xTaskGetSchedulerState>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d102      	bne.n	8009146 <xQueueGenericSend+0xaa>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d101      	bne.n	800914a <xQueueGenericSend+0xae>
 8009146:	2301      	movs	r3, #1
 8009148:	e000      	b.n	800914c <xQueueGenericSend+0xb0>
 800914a:	2300      	movs	r3, #0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d10c      	bne.n	800916a <xQueueGenericSend+0xce>
	__asm volatile
 8009150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009154:	b672      	cpsid	i
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	b662      	cpsie	i
 8009164:	61fb      	str	r3, [r7, #28]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800916a:	f002 fa9f 	bl	800b6ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <xQueueGenericSend+0xe4>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	2b02      	cmp	r3, #2
 800917e:	d129      	bne.n	80091d4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009186:	f000 fc5d 	bl	8009a44 <prvCopyDataToQueue>
 800918a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800918c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	2b00      	cmp	r3, #0
 8009192:	d010      	beq.n	80091b6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009196:	3324      	adds	r3, #36	; 0x24
 8009198:	4618      	mov	r0, r3
 800919a:	f001 fa37 	bl	800a60c <xTaskRemoveFromEventList>
 800919e:	4603      	mov	r3, r0
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d013      	beq.n	80091cc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80091a4:	4b3f      	ldr	r3, [pc, #252]	; (80092a4 <xQueueGenericSend+0x208>)
 80091a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091aa:	601a      	str	r2, [r3, #0]
 80091ac:	f3bf 8f4f 	dsb	sy
 80091b0:	f3bf 8f6f 	isb	sy
 80091b4:	e00a      	b.n	80091cc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80091b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80091bc:	4b39      	ldr	r3, [pc, #228]	; (80092a4 <xQueueGenericSend+0x208>)
 80091be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c2:	601a      	str	r2, [r3, #0]
 80091c4:	f3bf 8f4f 	dsb	sy
 80091c8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80091cc:	f002 faa2 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e063      	b.n	800929c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d103      	bne.n	80091e2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091da:	f002 fa9b 	bl	800b714 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80091de:	2300      	movs	r3, #0
 80091e0:	e05c      	b.n	800929c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d106      	bne.n	80091f6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	4618      	mov	r0, r3
 80091ee:	f001 fa71 	bl	800a6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091f2:	2301      	movs	r3, #1
 80091f4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091f6:	f002 fa8d 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80091fa:	f000 ffcd 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80091fe:	f002 fa55 	bl	800b6ac <vPortEnterCritical>
 8009202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009204:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009208:	b25b      	sxtb	r3, r3
 800920a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800920e:	d103      	bne.n	8009218 <xQueueGenericSend+0x17c>
 8009210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009212:	2200      	movs	r2, #0
 8009214:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800921a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800921e:	b25b      	sxtb	r3, r3
 8009220:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009224:	d103      	bne.n	800922e <xQueueGenericSend+0x192>
 8009226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009228:	2200      	movs	r2, #0
 800922a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800922e:	f002 fa71 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009232:	1d3a      	adds	r2, r7, #4
 8009234:	f107 0314 	add.w	r3, r7, #20
 8009238:	4611      	mov	r1, r2
 800923a:	4618      	mov	r0, r3
 800923c:	f001 fa60 	bl	800a700 <xTaskCheckForTimeOut>
 8009240:	4603      	mov	r3, r0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d124      	bne.n	8009290 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009246:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009248:	f000 fcf4 	bl	8009c34 <prvIsQueueFull>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d018      	beq.n	8009284 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009254:	3310      	adds	r3, #16
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f001 f982 	bl	800a564 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009262:	f000 fc7f 	bl	8009b64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009266:	f000 ffa5 	bl	800a1b4 <xTaskResumeAll>
 800926a:	4603      	mov	r3, r0
 800926c:	2b00      	cmp	r3, #0
 800926e:	f47f af7c 	bne.w	800916a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8009272:	4b0c      	ldr	r3, [pc, #48]	; (80092a4 <xQueueGenericSend+0x208>)
 8009274:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009278:	601a      	str	r2, [r3, #0]
 800927a:	f3bf 8f4f 	dsb	sy
 800927e:	f3bf 8f6f 	isb	sy
 8009282:	e772      	b.n	800916a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009286:	f000 fc6d 	bl	8009b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800928a:	f000 ff93 	bl	800a1b4 <xTaskResumeAll>
 800928e:	e76c      	b.n	800916a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009292:	f000 fc67 	bl	8009b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009296:	f000 ff8d 	bl	800a1b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800929a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800929c:	4618      	mov	r0, r3
 800929e:	3738      	adds	r7, #56	; 0x38
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}
 80092a4:	e000ed04 	.word	0xe000ed04

080092a8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b08e      	sub	sp, #56	; 0x38
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	60b9      	str	r1, [r7, #8]
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80092ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d10c      	bne.n	80092da <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80092c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c4:	b672      	cpsid	i
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	b662      	cpsie	i
 80092d4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80092d6:	bf00      	nop
 80092d8:	e7fe      	b.n	80092d8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d103      	bne.n	80092e8 <xQueueGenericSendFromISR+0x40>
 80092e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d101      	bne.n	80092ec <xQueueGenericSendFromISR+0x44>
 80092e8:	2301      	movs	r3, #1
 80092ea:	e000      	b.n	80092ee <xQueueGenericSendFromISR+0x46>
 80092ec:	2300      	movs	r3, #0
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d10c      	bne.n	800930c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	b672      	cpsid	i
 80092f8:	f383 8811 	msr	BASEPRI, r3
 80092fc:	f3bf 8f6f 	isb	sy
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	b662      	cpsie	i
 8009306:	623b      	str	r3, [r7, #32]
}
 8009308:	bf00      	nop
 800930a:	e7fe      	b.n	800930a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	2b02      	cmp	r3, #2
 8009310:	d103      	bne.n	800931a <xQueueGenericSendFromISR+0x72>
 8009312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <xQueueGenericSendFromISR+0x76>
 800931a:	2301      	movs	r3, #1
 800931c:	e000      	b.n	8009320 <xQueueGenericSendFromISR+0x78>
 800931e:	2300      	movs	r3, #0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d10c      	bne.n	800933e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8009324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009328:	b672      	cpsid	i
 800932a:	f383 8811 	msr	BASEPRI, r3
 800932e:	f3bf 8f6f 	isb	sy
 8009332:	f3bf 8f4f 	dsb	sy
 8009336:	b662      	cpsie	i
 8009338:	61fb      	str	r3, [r7, #28]
}
 800933a:	bf00      	nop
 800933c:	e7fe      	b.n	800933c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800933e:	f002 fa9d 	bl	800b87c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009342:	f3ef 8211 	mrs	r2, BASEPRI
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	b672      	cpsid	i
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	b662      	cpsie	i
 800935a:	61ba      	str	r2, [r7, #24]
 800935c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800935e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009360:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936a:	429a      	cmp	r2, r3
 800936c:	d302      	bcc.n	8009374 <xQueueGenericSendFromISR+0xcc>
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	2b02      	cmp	r3, #2
 8009372:	d12c      	bne.n	80093ce <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800937a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	68b9      	ldr	r1, [r7, #8]
 8009382:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009384:	f000 fb5e 	bl	8009a44 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009388:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800938c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009390:	d112      	bne.n	80093b8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009396:	2b00      	cmp	r3, #0
 8009398:	d016      	beq.n	80093c8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	3324      	adds	r3, #36	; 0x24
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 f934 	bl	800a60c <xTaskRemoveFromEventList>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00e      	beq.n	80093c8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	601a      	str	r2, [r3, #0]
 80093b6:	e007      	b.n	80093c8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80093b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80093bc:	3301      	adds	r3, #1
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	b25a      	sxtb	r2, r3
 80093c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80093c8:	2301      	movs	r3, #1
 80093ca:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80093cc:	e001      	b.n	80093d2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80093ce:	2300      	movs	r3, #0
 80093d0:	637b      	str	r3, [r7, #52]	; 0x34
 80093d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80093dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80093de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3738      	adds	r7, #56	; 0x38
 80093e4:	46bd      	mov	sp, r7
 80093e6:	bd80      	pop	{r7, pc}

080093e8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	; 0x38
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d10c      	bne.n	8009416 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80093fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009400:	b672      	cpsid	i
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	b662      	cpsie	i
 8009410:	623b      	str	r3, [r7, #32]
}
 8009412:	bf00      	nop
 8009414:	e7fe      	b.n	8009414 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00c      	beq.n	8009438 <xQueueGiveFromISR+0x50>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009422:	b672      	cpsid	i
 8009424:	f383 8811 	msr	BASEPRI, r3
 8009428:	f3bf 8f6f 	isb	sy
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	b662      	cpsie	i
 8009432:	61fb      	str	r3, [r7, #28]
}
 8009434:	bf00      	nop
 8009436:	e7fe      	b.n	8009436 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d103      	bne.n	8009448 <xQueueGiveFromISR+0x60>
 8009440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009442:	689b      	ldr	r3, [r3, #8]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <xQueueGiveFromISR+0x64>
 8009448:	2301      	movs	r3, #1
 800944a:	e000      	b.n	800944e <xQueueGiveFromISR+0x66>
 800944c:	2300      	movs	r3, #0
 800944e:	2b00      	cmp	r3, #0
 8009450:	d10c      	bne.n	800946c <xQueueGiveFromISR+0x84>
	__asm volatile
 8009452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009456:	b672      	cpsid	i
 8009458:	f383 8811 	msr	BASEPRI, r3
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	f3bf 8f4f 	dsb	sy
 8009464:	b662      	cpsie	i
 8009466:	61bb      	str	r3, [r7, #24]
}
 8009468:	bf00      	nop
 800946a:	e7fe      	b.n	800946a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800946c:	f002 fa06 	bl	800b87c <vPortValidateInterruptPriority>
	__asm volatile
 8009470:	f3ef 8211 	mrs	r2, BASEPRI
 8009474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009478:	b672      	cpsid	i
 800947a:	f383 8811 	msr	BASEPRI, r3
 800947e:	f3bf 8f6f 	isb	sy
 8009482:	f3bf 8f4f 	dsb	sy
 8009486:	b662      	cpsie	i
 8009488:	617a      	str	r2, [r7, #20]
 800948a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800948c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800948e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800949c:	429a      	cmp	r2, r3
 800949e:	d22b      	bcs.n	80094f8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80094aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ac:	1c5a      	adds	r2, r3, #1
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80094b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ba:	d112      	bne.n	80094e2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d016      	beq.n	80094f2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094c6:	3324      	adds	r3, #36	; 0x24
 80094c8:	4618      	mov	r0, r3
 80094ca:	f001 f89f 	bl	800a60c <xTaskRemoveFromEventList>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d00e      	beq.n	80094f2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80094d4:	683b      	ldr	r3, [r7, #0]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d00b      	beq.n	80094f2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2201      	movs	r2, #1
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e007      	b.n	80094f2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80094e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094e6:	3301      	adds	r3, #1
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	b25a      	sxtb	r2, r3
 80094ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80094f2:	2301      	movs	r3, #1
 80094f4:	637b      	str	r3, [r7, #52]	; 0x34
 80094f6:	e001      	b.n	80094fc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80094f8:	2300      	movs	r3, #0
 80094fa:	637b      	str	r3, [r7, #52]	; 0x34
 80094fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094fe:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f383 8811 	msr	BASEPRI, r3
}
 8009506:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800950a:	4618      	mov	r0, r3
 800950c:	3738      	adds	r7, #56	; 0x38
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
	...

08009514 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b08c      	sub	sp, #48	; 0x30
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009520:	2300      	movs	r3, #0
 8009522:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10c      	bne.n	8009548 <xQueueReceive+0x34>
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009532:	b672      	cpsid	i
 8009534:	f383 8811 	msr	BASEPRI, r3
 8009538:	f3bf 8f6f 	isb	sy
 800953c:	f3bf 8f4f 	dsb	sy
 8009540:	b662      	cpsie	i
 8009542:	623b      	str	r3, [r7, #32]
}
 8009544:	bf00      	nop
 8009546:	e7fe      	b.n	8009546 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d103      	bne.n	8009556 <xQueueReceive+0x42>
 800954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <xQueueReceive+0x46>
 8009556:	2301      	movs	r3, #1
 8009558:	e000      	b.n	800955c <xQueueReceive+0x48>
 800955a:	2300      	movs	r3, #0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d10c      	bne.n	800957a <xQueueReceive+0x66>
	__asm volatile
 8009560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009564:	b672      	cpsid	i
 8009566:	f383 8811 	msr	BASEPRI, r3
 800956a:	f3bf 8f6f 	isb	sy
 800956e:	f3bf 8f4f 	dsb	sy
 8009572:	b662      	cpsie	i
 8009574:	61fb      	str	r3, [r7, #28]
}
 8009576:	bf00      	nop
 8009578:	e7fe      	b.n	8009578 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800957a:	f001 fa0b 	bl	800a994 <xTaskGetSchedulerState>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <xQueueReceive+0x76>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <xQueueReceive+0x7a>
 800958a:	2301      	movs	r3, #1
 800958c:	e000      	b.n	8009590 <xQueueReceive+0x7c>
 800958e:	2300      	movs	r3, #0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d10c      	bne.n	80095ae <xQueueReceive+0x9a>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	b672      	cpsid	i
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	b662      	cpsie	i
 80095a8:	61bb      	str	r3, [r7, #24]
}
 80095aa:	bf00      	nop
 80095ac:	e7fe      	b.n	80095ac <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80095ae:	f002 f87d 	bl	800b6ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80095b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d01f      	beq.n	80095fe <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80095be:	68b9      	ldr	r1, [r7, #8]
 80095c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095c2:	f000 faa9 	bl	8009b18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80095c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c8:	1e5a      	subs	r2, r3, #1
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d0:	691b      	ldr	r3, [r3, #16]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00f      	beq.n	80095f6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d8:	3310      	adds	r3, #16
 80095da:	4618      	mov	r0, r3
 80095dc:	f001 f816 	bl	800a60c <xTaskRemoveFromEventList>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d007      	beq.n	80095f6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80095e6:	4b3d      	ldr	r3, [pc, #244]	; (80096dc <xQueueReceive+0x1c8>)
 80095e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ec:	601a      	str	r2, [r3, #0]
 80095ee:	f3bf 8f4f 	dsb	sy
 80095f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80095f6:	f002 f88d 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e069      	b.n	80096d2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d103      	bne.n	800960c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009604:	f002 f886 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009608:	2300      	movs	r3, #0
 800960a:	e062      	b.n	80096d2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009612:	f107 0310 	add.w	r3, r7, #16
 8009616:	4618      	mov	r0, r3
 8009618:	f001 f85c 	bl	800a6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800961c:	2301      	movs	r3, #1
 800961e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009620:	f002 f878 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009624:	f000 fdb8 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009628:	f002 f840 	bl	800b6ac <vPortEnterCritical>
 800962c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009632:	b25b      	sxtb	r3, r3
 8009634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009638:	d103      	bne.n	8009642 <xQueueReceive+0x12e>
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	2200      	movs	r2, #0
 800963e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009648:	b25b      	sxtb	r3, r3
 800964a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800964e:	d103      	bne.n	8009658 <xQueueReceive+0x144>
 8009650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009652:	2200      	movs	r2, #0
 8009654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009658:	f002 f85c 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800965c:	1d3a      	adds	r2, r7, #4
 800965e:	f107 0310 	add.w	r3, r7, #16
 8009662:	4611      	mov	r1, r2
 8009664:	4618      	mov	r0, r3
 8009666:	f001 f84b 	bl	800a700 <xTaskCheckForTimeOut>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d123      	bne.n	80096b8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009672:	f000 fac9 	bl	8009c08 <prvIsQueueEmpty>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d017      	beq.n	80096ac <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800967c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967e:	3324      	adds	r3, #36	; 0x24
 8009680:	687a      	ldr	r2, [r7, #4]
 8009682:	4611      	mov	r1, r2
 8009684:	4618      	mov	r0, r3
 8009686:	f000 ff6d 	bl	800a564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800968a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800968c:	f000 fa6a 	bl	8009b64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009690:	f000 fd90 	bl	800a1b4 <xTaskResumeAll>
 8009694:	4603      	mov	r3, r0
 8009696:	2b00      	cmp	r3, #0
 8009698:	d189      	bne.n	80095ae <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800969a:	4b10      	ldr	r3, [pc, #64]	; (80096dc <xQueueReceive+0x1c8>)
 800969c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096a0:	601a      	str	r2, [r3, #0]
 80096a2:	f3bf 8f4f 	dsb	sy
 80096a6:	f3bf 8f6f 	isb	sy
 80096aa:	e780      	b.n	80095ae <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80096ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ae:	f000 fa59 	bl	8009b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80096b2:	f000 fd7f 	bl	800a1b4 <xTaskResumeAll>
 80096b6:	e77a      	b.n	80095ae <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80096b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096ba:	f000 fa53 	bl	8009b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80096be:	f000 fd79 	bl	800a1b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80096c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096c4:	f000 faa0 	bl	8009c08 <prvIsQueueEmpty>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f43f af6f 	beq.w	80095ae <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80096d0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3730      	adds	r7, #48	; 0x30
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	e000ed04 	.word	0xe000ed04

080096e0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b08e      	sub	sp, #56	; 0x38
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80096ea:	2300      	movs	r3, #0
 80096ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80096f2:	2300      	movs	r3, #0
 80096f4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80096f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80096fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009700:	b672      	cpsid	i
 8009702:	f383 8811 	msr	BASEPRI, r3
 8009706:	f3bf 8f6f 	isb	sy
 800970a:	f3bf 8f4f 	dsb	sy
 800970e:	b662      	cpsie	i
 8009710:	623b      	str	r3, [r7, #32]
}
 8009712:	bf00      	nop
 8009714:	e7fe      	b.n	8009714 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00c      	beq.n	8009738 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	b672      	cpsid	i
 8009724:	f383 8811 	msr	BASEPRI, r3
 8009728:	f3bf 8f6f 	isb	sy
 800972c:	f3bf 8f4f 	dsb	sy
 8009730:	b662      	cpsie	i
 8009732:	61fb      	str	r3, [r7, #28]
}
 8009734:	bf00      	nop
 8009736:	e7fe      	b.n	8009736 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009738:	f001 f92c 	bl	800a994 <xTaskGetSchedulerState>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <xQueueSemaphoreTake+0x68>
 8009742:	683b      	ldr	r3, [r7, #0]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d101      	bne.n	800974c <xQueueSemaphoreTake+0x6c>
 8009748:	2301      	movs	r3, #1
 800974a:	e000      	b.n	800974e <xQueueSemaphoreTake+0x6e>
 800974c:	2300      	movs	r3, #0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10c      	bne.n	800976c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	b672      	cpsid	i
 8009758:	f383 8811 	msr	BASEPRI, r3
 800975c:	f3bf 8f6f 	isb	sy
 8009760:	f3bf 8f4f 	dsb	sy
 8009764:	b662      	cpsie	i
 8009766:	61bb      	str	r3, [r7, #24]
}
 8009768:	bf00      	nop
 800976a:	e7fe      	b.n	800976a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800976c:	f001 ff9e 	bl	800b6ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009774:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009778:	2b00      	cmp	r3, #0
 800977a:	d024      	beq.n	80097c6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800977c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977e:	1e5a      	subs	r2, r3, #1
 8009780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009782:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d104      	bne.n	8009796 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800978c:	f001 fac8 	bl	800ad20 <pvTaskIncrementMutexHeldCount>
 8009790:	4602      	mov	r2, r0
 8009792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009794:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d00f      	beq.n	80097be <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	3310      	adds	r3, #16
 80097a2:	4618      	mov	r0, r3
 80097a4:	f000 ff32 	bl	800a60c <xTaskRemoveFromEventList>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d007      	beq.n	80097be <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097ae:	4b55      	ldr	r3, [pc, #340]	; (8009904 <xQueueSemaphoreTake+0x224>)
 80097b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b4:	601a      	str	r2, [r3, #0]
 80097b6:	f3bf 8f4f 	dsb	sy
 80097ba:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097be:	f001 ffa9 	bl	800b714 <vPortExitCritical>
				return pdPASS;
 80097c2:	2301      	movs	r3, #1
 80097c4:	e099      	b.n	80098fa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d113      	bne.n	80097f4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d00c      	beq.n	80097ec <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80097d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d6:	b672      	cpsid	i
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	b662      	cpsie	i
 80097e6:	617b      	str	r3, [r7, #20]
}
 80097e8:	bf00      	nop
 80097ea:	e7fe      	b.n	80097ea <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80097ec:	f001 ff92 	bl	800b714 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097f0:	2300      	movs	r3, #0
 80097f2:	e082      	b.n	80098fa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d106      	bne.n	8009808 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097fa:	f107 030c 	add.w	r3, r7, #12
 80097fe:	4618      	mov	r0, r3
 8009800:	f000 ff68 	bl	800a6d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009804:	2301      	movs	r3, #1
 8009806:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009808:	f001 ff84 	bl	800b714 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800980c:	f000 fcc4 	bl	800a198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009810:	f001 ff4c 	bl	800b6ac <vPortEnterCritical>
 8009814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009816:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d103      	bne.n	800982a <xQueueSemaphoreTake+0x14a>
 8009822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009830:	b25b      	sxtb	r3, r3
 8009832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009836:	d103      	bne.n	8009840 <xQueueSemaphoreTake+0x160>
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009840:	f001 ff68 	bl	800b714 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009844:	463a      	mov	r2, r7
 8009846:	f107 030c 	add.w	r3, r7, #12
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f000 ff57 	bl	800a700 <xTaskCheckForTimeOut>
 8009852:	4603      	mov	r3, r0
 8009854:	2b00      	cmp	r3, #0
 8009856:	d132      	bne.n	80098be <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009858:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800985a:	f000 f9d5 	bl	8009c08 <prvIsQueueEmpty>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d026      	beq.n	80098b2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d109      	bne.n	8009880 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800986c:	f001 ff1e 	bl	800b6ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	689b      	ldr	r3, [r3, #8]
 8009874:	4618      	mov	r0, r3
 8009876:	f001 f8ab 	bl	800a9d0 <xTaskPriorityInherit>
 800987a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800987c:	f001 ff4a 	bl	800b714 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009882:	3324      	adds	r3, #36	; 0x24
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	4611      	mov	r1, r2
 8009888:	4618      	mov	r0, r3
 800988a:	f000 fe6b 	bl	800a564 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800988e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009890:	f000 f968 	bl	8009b64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009894:	f000 fc8e 	bl	800a1b4 <xTaskResumeAll>
 8009898:	4603      	mov	r3, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f47f af66 	bne.w	800976c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80098a0:	4b18      	ldr	r3, [pc, #96]	; (8009904 <xQueueSemaphoreTake+0x224>)
 80098a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098a6:	601a      	str	r2, [r3, #0]
 80098a8:	f3bf 8f4f 	dsb	sy
 80098ac:	f3bf 8f6f 	isb	sy
 80098b0:	e75c      	b.n	800976c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80098b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098b4:	f000 f956 	bl	8009b64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80098b8:	f000 fc7c 	bl	800a1b4 <xTaskResumeAll>
 80098bc:	e756      	b.n	800976c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80098be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098c0:	f000 f950 	bl	8009b64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80098c4:	f000 fc76 	bl	800a1b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80098c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098ca:	f000 f99d 	bl	8009c08 <prvIsQueueEmpty>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	f43f af4b 	beq.w	800976c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00d      	beq.n	80098f8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80098dc:	f001 fee6 	bl	800b6ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80098e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80098e2:	f000 f897 	bl	8009a14 <prvGetDisinheritPriorityAfterTimeout>
 80098e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80098ee:	4618      	mov	r0, r3
 80098f0:	f001 f978 	bl	800abe4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80098f4:	f001 ff0e 	bl	800b714 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3738      	adds	r7, #56	; 0x38
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}
 8009902:	bf00      	nop
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08e      	sub	sp, #56	; 0x38
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991a:	2b00      	cmp	r3, #0
 800991c:	d10c      	bne.n	8009938 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800991e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009922:	b672      	cpsid	i
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	b662      	cpsie	i
 8009932:	623b      	str	r3, [r7, #32]
}
 8009934:	bf00      	nop
 8009936:	e7fe      	b.n	8009936 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <xQueueReceiveFromISR+0x3e>
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009942:	2b00      	cmp	r3, #0
 8009944:	d101      	bne.n	800994a <xQueueReceiveFromISR+0x42>
 8009946:	2301      	movs	r3, #1
 8009948:	e000      	b.n	800994c <xQueueReceiveFromISR+0x44>
 800994a:	2300      	movs	r3, #0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d10c      	bne.n	800996a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009954:	b672      	cpsid	i
 8009956:	f383 8811 	msr	BASEPRI, r3
 800995a:	f3bf 8f6f 	isb	sy
 800995e:	f3bf 8f4f 	dsb	sy
 8009962:	b662      	cpsie	i
 8009964:	61fb      	str	r3, [r7, #28]
}
 8009966:	bf00      	nop
 8009968:	e7fe      	b.n	8009968 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800996a:	f001 ff87 	bl	800b87c <vPortValidateInterruptPriority>
	__asm volatile
 800996e:	f3ef 8211 	mrs	r2, BASEPRI
 8009972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009976:	b672      	cpsid	i
 8009978:	f383 8811 	msr	BASEPRI, r3
 800997c:	f3bf 8f6f 	isb	sy
 8009980:	f3bf 8f4f 	dsb	sy
 8009984:	b662      	cpsie	i
 8009986:	61ba      	str	r2, [r7, #24]
 8009988:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800998a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d02f      	beq.n	80099fa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80099a4:	68b9      	ldr	r1, [r7, #8]
 80099a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a8:	f000 f8b6 	bl	8009b18 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	1e5a      	subs	r2, r3, #1
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80099b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099bc:	d112      	bne.n	80099e4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c0:	691b      	ldr	r3, [r3, #16]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d016      	beq.n	80099f4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	3310      	adds	r3, #16
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fe1e 	bl	800a60c <xTaskRemoveFromEventList>
 80099d0:	4603      	mov	r3, r0
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d00e      	beq.n	80099f4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	601a      	str	r2, [r3, #0]
 80099e2:	e007      	b.n	80099f4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80099e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80099e8:	3301      	adds	r3, #1
 80099ea:	b2db      	uxtb	r3, r3
 80099ec:	b25a      	sxtb	r2, r3
 80099ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80099f4:	2301      	movs	r3, #1
 80099f6:	637b      	str	r3, [r7, #52]	; 0x34
 80099f8:	e001      	b.n	80099fe <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	637b      	str	r3, [r7, #52]	; 0x34
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f383 8811 	msr	BASEPRI, r3
}
 8009a08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3738      	adds	r7, #56	; 0x38
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d006      	beq.n	8009a32 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f1c3 0307 	rsb	r3, r3, #7
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	e001      	b.n	8009a36 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009a32:	2300      	movs	r3, #0
 8009a34:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009a36:	68fb      	ldr	r3, [r7, #12]
	}
 8009a38:	4618      	mov	r0, r3
 8009a3a:	3714      	adds	r7, #20
 8009a3c:	46bd      	mov	sp, r7
 8009a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a42:	4770      	bx	lr

08009a44 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a58:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d10d      	bne.n	8009a7e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d14d      	bne.n	8009b06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f001 f82e 	bl	800aad0 <xTaskPriorityDisinherit>
 8009a74:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2200      	movs	r2, #0
 8009a7a:	609a      	str	r2, [r3, #8]
 8009a7c:	e043      	b.n	8009b06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d119      	bne.n	8009ab8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	6858      	ldr	r0, [r3, #4]
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	68b9      	ldr	r1, [r7, #8]
 8009a90:	f00c f998 	bl	8015dc4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	685a      	ldr	r2, [r3, #4]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9c:	441a      	add	r2, r3
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	685a      	ldr	r2, [r3, #4]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	689b      	ldr	r3, [r3, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d32b      	bcc.n	8009b06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	605a      	str	r2, [r3, #4]
 8009ab6:	e026      	b.n	8009b06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	68d8      	ldr	r0, [r3, #12]
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	f00c f97e 	bl	8015dc4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	68da      	ldr	r2, [r3, #12]
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad0:	425b      	negs	r3, r3
 8009ad2:	441a      	add	r2, r3
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	68da      	ldr	r2, [r3, #12]
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	429a      	cmp	r2, r3
 8009ae2:	d207      	bcs.n	8009af4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	689a      	ldr	r2, [r3, #8]
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aec:	425b      	negs	r3, r3
 8009aee:	441a      	add	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d105      	bne.n	8009b06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009b00:	693b      	ldr	r3, [r7, #16]
 8009b02:	3b01      	subs	r3, #1
 8009b04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	1c5a      	adds	r2, r3, #1
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009b0e:	697b      	ldr	r3, [r7, #20]
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3718      	adds	r7, #24
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d018      	beq.n	8009b5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68da      	ldr	r2, [r3, #12]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	441a      	add	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68da      	ldr	r2, [r3, #12]
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689b      	ldr	r3, [r3, #8]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d303      	bcc.n	8009b4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68d9      	ldr	r1, [r3, #12]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b54:	461a      	mov	r2, r3
 8009b56:	6838      	ldr	r0, [r7, #0]
 8009b58:	f00c f934 	bl	8015dc4 <memcpy>
	}
}
 8009b5c:	bf00      	nop
 8009b5e:	3708      	adds	r7, #8
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009b6c:	f001 fd9e 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b78:	e011      	b.n	8009b9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d012      	beq.n	8009ba8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	3324      	adds	r3, #36	; 0x24
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 fd40 	bl	800a60c <xTaskRemoveFromEventList>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009b92:	f000 fe1b 	bl	800a7cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009b96:	7bfb      	ldrb	r3, [r7, #15]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009b9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	dce9      	bgt.n	8009b7a <prvUnlockQueue+0x16>
 8009ba6:	e000      	b.n	8009baa <prvUnlockQueue+0x46>
					break;
 8009ba8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	22ff      	movs	r2, #255	; 0xff
 8009bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009bb2:	f001 fdaf 	bl	800b714 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009bb6:	f001 fd79 	bl	800b6ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bc0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009bc2:	e011      	b.n	8009be8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d012      	beq.n	8009bf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	3310      	adds	r3, #16
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f000 fd1b 	bl	800a60c <xTaskRemoveFromEventList>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d001      	beq.n	8009be0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009bdc:	f000 fdf6 	bl	800a7cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	3b01      	subs	r3, #1
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009be8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	dce9      	bgt.n	8009bc4 <prvUnlockQueue+0x60>
 8009bf0:	e000      	b.n	8009bf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009bf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	22ff      	movs	r2, #255	; 0xff
 8009bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009bfc:	f001 fd8a 	bl	800b714 <vPortExitCritical>
}
 8009c00:	bf00      	nop
 8009c02:	3710      	adds	r7, #16
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b084      	sub	sp, #16
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c10:	f001 fd4c 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d102      	bne.n	8009c22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	60fb      	str	r3, [r7, #12]
 8009c20:	e001      	b.n	8009c26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009c22:	2300      	movs	r3, #0
 8009c24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c26:	f001 fd75 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009c3c:	f001 fd36 	bl	800b6ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d102      	bne.n	8009c52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009c4c:	2301      	movs	r3, #1
 8009c4e:	60fb      	str	r3, [r7, #12]
 8009c50:	e001      	b.n	8009c56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009c52:	2300      	movs	r3, #0
 8009c54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009c56:	f001 fd5d 	bl	800b714 <vPortExitCritical>

	return xReturn;
 8009c5a:	68fb      	ldr	r3, [r7, #12]
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c6e:	2300      	movs	r3, #0
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e014      	b.n	8009c9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009c74:	4a0f      	ldr	r2, [pc, #60]	; (8009cb4 <vQueueAddToRegistry+0x50>)
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d10b      	bne.n	8009c98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009c80:	490c      	ldr	r1, [pc, #48]	; (8009cb4 <vQueueAddToRegistry+0x50>)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	683a      	ldr	r2, [r7, #0]
 8009c86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009c8a:	4a0a      	ldr	r2, [pc, #40]	; (8009cb4 <vQueueAddToRegistry+0x50>)
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	00db      	lsls	r3, r3, #3
 8009c90:	4413      	add	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009c96:	e006      	b.n	8009ca6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	60fb      	str	r3, [r7, #12]
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2b07      	cmp	r3, #7
 8009ca2:	d9e7      	bls.n	8009c74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop
 8009ca8:	3714      	adds	r7, #20
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr
 8009cb2:	bf00      	nop
 8009cb4:	200091d8 	.word	0x200091d8

08009cb8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b086      	sub	sp, #24
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009cc8:	f001 fcf0 	bl	800b6ac <vPortEnterCritical>
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cd2:	b25b      	sxtb	r3, r3
 8009cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd8:	d103      	bne.n	8009ce2 <vQueueWaitForMessageRestricted+0x2a>
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ce8:	b25b      	sxtb	r3, r3
 8009cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cee:	d103      	bne.n	8009cf8 <vQueueWaitForMessageRestricted+0x40>
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cf8:	f001 fd0c 	bl	800b714 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	3324      	adds	r3, #36	; 0x24
 8009d08:	687a      	ldr	r2, [r7, #4]
 8009d0a:	68b9      	ldr	r1, [r7, #8]
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f000 fc4f 	bl	800a5b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009d12:	6978      	ldr	r0, [r7, #20]
 8009d14:	f7ff ff26 	bl	8009b64 <prvUnlockQueue>
	}
 8009d18:	bf00      	nop
 8009d1a:	3718      	adds	r7, #24
 8009d1c:	46bd      	mov	sp, r7
 8009d1e:	bd80      	pop	{r7, pc}

08009d20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b08e      	sub	sp, #56	; 0x38
 8009d24:	af04      	add	r7, sp, #16
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10c      	bne.n	8009d4e <xTaskCreateStatic+0x2e>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	b672      	cpsid	i
 8009d3a:	f383 8811 	msr	BASEPRI, r3
 8009d3e:	f3bf 8f6f 	isb	sy
 8009d42:	f3bf 8f4f 	dsb	sy
 8009d46:	b662      	cpsie	i
 8009d48:	623b      	str	r3, [r7, #32]
}
 8009d4a:	bf00      	nop
 8009d4c:	e7fe      	b.n	8009d4c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8009d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d10c      	bne.n	8009d6e <xTaskCreateStatic+0x4e>
	__asm volatile
 8009d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d58:	b672      	cpsid	i
 8009d5a:	f383 8811 	msr	BASEPRI, r3
 8009d5e:	f3bf 8f6f 	isb	sy
 8009d62:	f3bf 8f4f 	dsb	sy
 8009d66:	b662      	cpsie	i
 8009d68:	61fb      	str	r3, [r7, #28]
}
 8009d6a:	bf00      	nop
 8009d6c:	e7fe      	b.n	8009d6c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009d6e:	2354      	movs	r3, #84	; 0x54
 8009d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b54      	cmp	r3, #84	; 0x54
 8009d76:	d00c      	beq.n	8009d92 <xTaskCreateStatic+0x72>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d7c:	b672      	cpsid	i
 8009d7e:	f383 8811 	msr	BASEPRI, r3
 8009d82:	f3bf 8f6f 	isb	sy
 8009d86:	f3bf 8f4f 	dsb	sy
 8009d8a:	b662      	cpsie	i
 8009d8c:	61bb      	str	r3, [r7, #24]
}
 8009d8e:	bf00      	nop
 8009d90:	e7fe      	b.n	8009d90 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009d92:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d01e      	beq.n	8009dd8 <xTaskCreateStatic+0xb8>
 8009d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d01b      	beq.n	8009dd8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009da8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	2202      	movs	r2, #2
 8009dae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009db2:	2300      	movs	r3, #0
 8009db4:	9303      	str	r3, [sp, #12]
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	9302      	str	r3, [sp, #8]
 8009dba:	f107 0314 	add.w	r3, r7, #20
 8009dbe:	9301      	str	r3, [sp, #4]
 8009dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	683b      	ldr	r3, [r7, #0]
 8009dc6:	687a      	ldr	r2, [r7, #4]
 8009dc8:	68b9      	ldr	r1, [r7, #8]
 8009dca:	68f8      	ldr	r0, [r7, #12]
 8009dcc:	f000 f850 	bl	8009e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009dd0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dd2:	f000 f8d7 	bl	8009f84 <prvAddNewTaskToReadyList>
 8009dd6:	e001      	b.n	8009ddc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009ddc:	697b      	ldr	r3, [r7, #20]
	}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3728      	adds	r7, #40	; 0x28
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}

08009de6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b08c      	sub	sp, #48	; 0x30
 8009dea:	af04      	add	r7, sp, #16
 8009dec:	60f8      	str	r0, [r7, #12]
 8009dee:	60b9      	str	r1, [r7, #8]
 8009df0:	603b      	str	r3, [r7, #0]
 8009df2:	4613      	mov	r3, r2
 8009df4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009df6:	88fb      	ldrh	r3, [r7, #6]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f001 fd82 	bl	800b904 <pvPortMalloc>
 8009e00:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d00e      	beq.n	8009e26 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009e08:	2054      	movs	r0, #84	; 0x54
 8009e0a:	f001 fd7b 	bl	800b904 <pvPortMalloc>
 8009e0e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	697a      	ldr	r2, [r7, #20]
 8009e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8009e1c:	e005      	b.n	8009e2a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009e1e:	6978      	ldr	r0, [r7, #20]
 8009e20:	f001 fe3a 	bl	800ba98 <vPortFree>
 8009e24:	e001      	b.n	8009e2a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d017      	beq.n	8009e60 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009e38:	88fa      	ldrh	r2, [r7, #6]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9303      	str	r3, [sp, #12]
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	9302      	str	r3, [sp, #8]
 8009e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e44:	9301      	str	r3, [sp, #4]
 8009e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	68b9      	ldr	r1, [r7, #8]
 8009e4e:	68f8      	ldr	r0, [r7, #12]
 8009e50:	f000 f80e 	bl	8009e70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009e54:	69f8      	ldr	r0, [r7, #28]
 8009e56:	f000 f895 	bl	8009f84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	61bb      	str	r3, [r7, #24]
 8009e5e:	e002      	b.n	8009e66 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009e60:	f04f 33ff 	mov.w	r3, #4294967295
 8009e64:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009e66:	69bb      	ldr	r3, [r7, #24]
	}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3720      	adds	r7, #32
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b088      	sub	sp, #32
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	60f8      	str	r0, [r7, #12]
 8009e78:	60b9      	str	r1, [r7, #8]
 8009e7a:	607a      	str	r2, [r7, #4]
 8009e7c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e82:	6879      	ldr	r1, [r7, #4]
 8009e84:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8009e88:	440b      	add	r3, r1
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	4413      	add	r3, r2
 8009e8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009e90:	69bb      	ldr	r3, [r7, #24]
 8009e92:	f023 0307 	bic.w	r3, r3, #7
 8009e96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	f003 0307 	and.w	r3, r3, #7
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d00c      	beq.n	8009ebc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	b672      	cpsid	i
 8009ea8:	f383 8811 	msr	BASEPRI, r3
 8009eac:	f3bf 8f6f 	isb	sy
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	b662      	cpsie	i
 8009eb6:	617b      	str	r3, [r7, #20]
}
 8009eb8:	bf00      	nop
 8009eba:	e7fe      	b.n	8009eba <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d01f      	beq.n	8009f02 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	61fb      	str	r3, [r7, #28]
 8009ec6:	e012      	b.n	8009eee <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ec8:	68ba      	ldr	r2, [r7, #8]
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	4413      	add	r3, r2
 8009ece:	7819      	ldrb	r1, [r3, #0]
 8009ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3334      	adds	r3, #52	; 0x34
 8009ed8:	460a      	mov	r2, r1
 8009eda:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009edc:	68ba      	ldr	r2, [r7, #8]
 8009ede:	69fb      	ldr	r3, [r7, #28]
 8009ee0:	4413      	add	r3, r2
 8009ee2:	781b      	ldrb	r3, [r3, #0]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d006      	beq.n	8009ef6 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	3301      	adds	r3, #1
 8009eec:	61fb      	str	r3, [r7, #28]
 8009eee:	69fb      	ldr	r3, [r7, #28]
 8009ef0:	2b0f      	cmp	r3, #15
 8009ef2:	d9e9      	bls.n	8009ec8 <prvInitialiseNewTask+0x58>
 8009ef4:	e000      	b.n	8009ef8 <prvInitialiseNewTask+0x88>
			{
				break;
 8009ef6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efa:	2200      	movs	r2, #0
 8009efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009f00:	e003      	b.n	8009f0a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f04:	2200      	movs	r2, #0
 8009f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f0c:	2b06      	cmp	r3, #6
 8009f0e:	d901      	bls.n	8009f14 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009f10:	2306      	movs	r3, #6
 8009f12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009f1e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	2200      	movs	r2, #0
 8009f24:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f28:	3304      	adds	r3, #4
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7fe fe88 	bl	8008c40 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f32:	3318      	adds	r3, #24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f7fe fe83 	bl	8008c40 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f42:	f1c3 0207 	rsb	r2, r3, #7
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f52:	2200      	movs	r2, #0
 8009f54:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	2200      	movs	r2, #0
 8009f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	68f9      	ldr	r1, [r7, #12]
 8009f62:	69b8      	ldr	r0, [r7, #24]
 8009f64:	f001 fa94 	bl	800b490 <pxPortInitialiseStack>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d002      	beq.n	8009f7a <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009f78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	3720      	adds	r7, #32
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b082      	sub	sp, #8
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009f8c:	f001 fb8e 	bl	800b6ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009f90:	4b2a      	ldr	r3, [pc, #168]	; (800a03c <prvAddNewTaskToReadyList+0xb8>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	3301      	adds	r3, #1
 8009f96:	4a29      	ldr	r2, [pc, #164]	; (800a03c <prvAddNewTaskToReadyList+0xb8>)
 8009f98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009f9a:	4b29      	ldr	r3, [pc, #164]	; (800a040 <prvAddNewTaskToReadyList+0xbc>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d109      	bne.n	8009fb6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009fa2:	4a27      	ldr	r2, [pc, #156]	; (800a040 <prvAddNewTaskToReadyList+0xbc>)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009fa8:	4b24      	ldr	r3, [pc, #144]	; (800a03c <prvAddNewTaskToReadyList+0xb8>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b01      	cmp	r3, #1
 8009fae:	d110      	bne.n	8009fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009fb0:	f000 fc30 	bl	800a814 <prvInitialiseTaskLists>
 8009fb4:	e00d      	b.n	8009fd2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009fb6:	4b23      	ldr	r3, [pc, #140]	; (800a044 <prvAddNewTaskToReadyList+0xc0>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d109      	bne.n	8009fd2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009fbe:	4b20      	ldr	r3, [pc, #128]	; (800a040 <prvAddNewTaskToReadyList+0xbc>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d802      	bhi.n	8009fd2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009fcc:	4a1c      	ldr	r2, [pc, #112]	; (800a040 <prvAddNewTaskToReadyList+0xbc>)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009fd2:	4b1d      	ldr	r3, [pc, #116]	; (800a048 <prvAddNewTaskToReadyList+0xc4>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	4a1b      	ldr	r2, [pc, #108]	; (800a048 <prvAddNewTaskToReadyList+0xc4>)
 8009fda:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	2201      	movs	r2, #1
 8009fe2:	409a      	lsls	r2, r3
 8009fe4:	4b19      	ldr	r3, [pc, #100]	; (800a04c <prvAddNewTaskToReadyList+0xc8>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	4a18      	ldr	r2, [pc, #96]	; (800a04c <prvAddNewTaskToReadyList+0xc8>)
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff2:	4613      	mov	r3, r2
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	4413      	add	r3, r2
 8009ff8:	009b      	lsls	r3, r3, #2
 8009ffa:	4a15      	ldr	r2, [pc, #84]	; (800a050 <prvAddNewTaskToReadyList+0xcc>)
 8009ffc:	441a      	add	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	3304      	adds	r3, #4
 800a002:	4619      	mov	r1, r3
 800a004:	4610      	mov	r0, r2
 800a006:	f7fe fe28 	bl	8008c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a00a:	f001 fb83 	bl	800b714 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a00e:	4b0d      	ldr	r3, [pc, #52]	; (800a044 <prvAddNewTaskToReadyList+0xc0>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00e      	beq.n	800a034 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a016:	4b0a      	ldr	r3, [pc, #40]	; (800a040 <prvAddNewTaskToReadyList+0xbc>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a020:	429a      	cmp	r2, r3
 800a022:	d207      	bcs.n	800a034 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a024:	4b0b      	ldr	r3, [pc, #44]	; (800a054 <prvAddNewTaskToReadyList+0xd0>)
 800a026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a02a:	601a      	str	r2, [r3, #0]
 800a02c:	f3bf 8f4f 	dsb	sy
 800a030:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a034:	bf00      	nop
 800a036:	3708      	adds	r7, #8
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}
 800a03c:	20000850 	.word	0x20000850
 800a040:	20000750 	.word	0x20000750
 800a044:	2000085c 	.word	0x2000085c
 800a048:	2000086c 	.word	0x2000086c
 800a04c:	20000858 	.word	0x20000858
 800a050:	20000754 	.word	0x20000754
 800a054:	e000ed04 	.word	0xe000ed04

0800a058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a060:	2300      	movs	r3, #0
 800a062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d019      	beq.n	800a09e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a06a:	4b14      	ldr	r3, [pc, #80]	; (800a0bc <vTaskDelay+0x64>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d00c      	beq.n	800a08c <vTaskDelay+0x34>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	b672      	cpsid	i
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	b662      	cpsie	i
 800a086:	60bb      	str	r3, [r7, #8]
}
 800a088:	bf00      	nop
 800a08a:	e7fe      	b.n	800a08a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a08c:	f000 f884 	bl	800a198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a090:	2100      	movs	r1, #0
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 fe58 	bl	800ad48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a098:	f000 f88c 	bl	800a1b4 <xTaskResumeAll>
 800a09c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d107      	bne.n	800a0b4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a0a4:	4b06      	ldr	r3, [pc, #24]	; (800a0c0 <vTaskDelay+0x68>)
 800a0a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0aa:	601a      	str	r2, [r3, #0]
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a0b4:	bf00      	nop
 800a0b6:	3710      	adds	r7, #16
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000878 	.word	0x20000878
 800a0c0:	e000ed04 	.word	0xe000ed04

0800a0c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b08a      	sub	sp, #40	; 0x28
 800a0c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a0d2:	463a      	mov	r2, r7
 800a0d4:	1d39      	adds	r1, r7, #4
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4618      	mov	r0, r3
 800a0dc:	f7f6 fa7c 	bl	80005d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a0e0:	6839      	ldr	r1, [r7, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	9202      	str	r2, [sp, #8]
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	460a      	mov	r2, r1
 800a0f2:	4923      	ldr	r1, [pc, #140]	; (800a180 <vTaskStartScheduler+0xbc>)
 800a0f4:	4823      	ldr	r0, [pc, #140]	; (800a184 <vTaskStartScheduler+0xc0>)
 800a0f6:	f7ff fe13 	bl	8009d20 <xTaskCreateStatic>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	4a22      	ldr	r2, [pc, #136]	; (800a188 <vTaskStartScheduler+0xc4>)
 800a0fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a100:	4b21      	ldr	r3, [pc, #132]	; (800a188 <vTaskStartScheduler+0xc4>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d002      	beq.n	800a10e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a108:	2301      	movs	r3, #1
 800a10a:	617b      	str	r3, [r7, #20]
 800a10c:	e001      	b.n	800a112 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a10e:	2300      	movs	r3, #0
 800a110:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	2b01      	cmp	r3, #1
 800a116:	d102      	bne.n	800a11e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a118:	f000 fe7c 	bl	800ae14 <xTimerCreateTimerTask>
 800a11c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d118      	bne.n	800a156 <vTaskStartScheduler+0x92>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	b672      	cpsid	i
 800a12a:	f383 8811 	msr	BASEPRI, r3
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f3bf 8f4f 	dsb	sy
 800a136:	b662      	cpsie	i
 800a138:	613b      	str	r3, [r7, #16]
}
 800a13a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a13c:	4b13      	ldr	r3, [pc, #76]	; (800a18c <vTaskStartScheduler+0xc8>)
 800a13e:	f04f 32ff 	mov.w	r2, #4294967295
 800a142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a144:	4b12      	ldr	r3, [pc, #72]	; (800a190 <vTaskStartScheduler+0xcc>)
 800a146:	2201      	movs	r2, #1
 800a148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a14a:	4b12      	ldr	r3, [pc, #72]	; (800a194 <vTaskStartScheduler+0xd0>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a150:	f001 fa2e 	bl	800b5b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a154:	e010      	b.n	800a178 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15c:	d10c      	bne.n	800a178 <vTaskStartScheduler+0xb4>
	__asm volatile
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	b672      	cpsid	i
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	b662      	cpsie	i
 800a172:	60fb      	str	r3, [r7, #12]
}
 800a174:	bf00      	nop
 800a176:	e7fe      	b.n	800a176 <vTaskStartScheduler+0xb2>
}
 800a178:	bf00      	nop
 800a17a:	3718      	adds	r7, #24
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	08016f54 	.word	0x08016f54
 800a184:	0800a7e5 	.word	0x0800a7e5
 800a188:	20000874 	.word	0x20000874
 800a18c:	20000870 	.word	0x20000870
 800a190:	2000085c 	.word	0x2000085c
 800a194:	20000854 	.word	0x20000854

0800a198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a198:	b480      	push	{r7}
 800a19a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a19c:	4b04      	ldr	r3, [pc, #16]	; (800a1b0 <vTaskSuspendAll+0x18>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3301      	adds	r3, #1
 800a1a2:	4a03      	ldr	r2, [pc, #12]	; (800a1b0 <vTaskSuspendAll+0x18>)
 800a1a4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a1a6:	bf00      	nop
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr
 800a1b0:	20000878 	.word	0x20000878

0800a1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b084      	sub	sp, #16
 800a1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a1c2:	4b42      	ldr	r3, [pc, #264]	; (800a2cc <xTaskResumeAll+0x118>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d10c      	bne.n	800a1e4 <xTaskResumeAll+0x30>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ce:	b672      	cpsid	i
 800a1d0:	f383 8811 	msr	BASEPRI, r3
 800a1d4:	f3bf 8f6f 	isb	sy
 800a1d8:	f3bf 8f4f 	dsb	sy
 800a1dc:	b662      	cpsie	i
 800a1de:	603b      	str	r3, [r7, #0]
}
 800a1e0:	bf00      	nop
 800a1e2:	e7fe      	b.n	800a1e2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a1e4:	f001 fa62 	bl	800b6ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a1e8:	4b38      	ldr	r3, [pc, #224]	; (800a2cc <xTaskResumeAll+0x118>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	3b01      	subs	r3, #1
 800a1ee:	4a37      	ldr	r2, [pc, #220]	; (800a2cc <xTaskResumeAll+0x118>)
 800a1f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a1f2:	4b36      	ldr	r3, [pc, #216]	; (800a2cc <xTaskResumeAll+0x118>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d161      	bne.n	800a2be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a1fa:	4b35      	ldr	r3, [pc, #212]	; (800a2d0 <xTaskResumeAll+0x11c>)
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d05d      	beq.n	800a2be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a202:	e02e      	b.n	800a262 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a204:	4b33      	ldr	r3, [pc, #204]	; (800a2d4 <xTaskResumeAll+0x120>)
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	68db      	ldr	r3, [r3, #12]
 800a20a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3318      	adds	r3, #24
 800a210:	4618      	mov	r0, r3
 800a212:	f7fe fd7f 	bl	8008d14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	3304      	adds	r3, #4
 800a21a:	4618      	mov	r0, r3
 800a21c:	f7fe fd7a 	bl	8008d14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	2201      	movs	r2, #1
 800a226:	409a      	lsls	r2, r3
 800a228:	4b2b      	ldr	r3, [pc, #172]	; (800a2d8 <xTaskResumeAll+0x124>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4313      	orrs	r3, r2
 800a22e:	4a2a      	ldr	r2, [pc, #168]	; (800a2d8 <xTaskResumeAll+0x124>)
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a236:	4613      	mov	r3, r2
 800a238:	009b      	lsls	r3, r3, #2
 800a23a:	4413      	add	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4a27      	ldr	r2, [pc, #156]	; (800a2dc <xTaskResumeAll+0x128>)
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	3304      	adds	r3, #4
 800a246:	4619      	mov	r1, r3
 800a248:	4610      	mov	r0, r2
 800a24a:	f7fe fd06 	bl	8008c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a252:	4b23      	ldr	r3, [pc, #140]	; (800a2e0 <xTaskResumeAll+0x12c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a25c:	4b21      	ldr	r3, [pc, #132]	; (800a2e4 <xTaskResumeAll+0x130>)
 800a25e:	2201      	movs	r2, #1
 800a260:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a262:	4b1c      	ldr	r3, [pc, #112]	; (800a2d4 <xTaskResumeAll+0x120>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1cc      	bne.n	800a204 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d001      	beq.n	800a274 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a270:	f000 fb70 	bl	800a954 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a274:	4b1c      	ldr	r3, [pc, #112]	; (800a2e8 <xTaskResumeAll+0x134>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d010      	beq.n	800a2a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a280:	f000 f858 	bl	800a334 <xTaskIncrementTick>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d002      	beq.n	800a290 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a28a:	4b16      	ldr	r3, [pc, #88]	; (800a2e4 <xTaskResumeAll+0x130>)
 800a28c:	2201      	movs	r2, #1
 800a28e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	3b01      	subs	r3, #1
 800a294:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d1f1      	bne.n	800a280 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a29c:	4b12      	ldr	r3, [pc, #72]	; (800a2e8 <xTaskResumeAll+0x134>)
 800a29e:	2200      	movs	r2, #0
 800a2a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a2a2:	4b10      	ldr	r3, [pc, #64]	; (800a2e4 <xTaskResumeAll+0x130>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d009      	beq.n	800a2be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a2ae:	4b0f      	ldr	r3, [pc, #60]	; (800a2ec <xTaskResumeAll+0x138>)
 800a2b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	f3bf 8f4f 	dsb	sy
 800a2ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2be:	f001 fa29 	bl	800b714 <vPortExitCritical>

	return xAlreadyYielded;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3710      	adds	r7, #16
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}
 800a2cc:	20000878 	.word	0x20000878
 800a2d0:	20000850 	.word	0x20000850
 800a2d4:	20000810 	.word	0x20000810
 800a2d8:	20000858 	.word	0x20000858
 800a2dc:	20000754 	.word	0x20000754
 800a2e0:	20000750 	.word	0x20000750
 800a2e4:	20000864 	.word	0x20000864
 800a2e8:	20000860 	.word	0x20000860
 800a2ec:	e000ed04 	.word	0xe000ed04

0800a2f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b083      	sub	sp, #12
 800a2f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a2f6:	4b05      	ldr	r3, [pc, #20]	; (800a30c <xTaskGetTickCount+0x1c>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a2fc:	687b      	ldr	r3, [r7, #4]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
 800a30a:	bf00      	nop
 800a30c:	20000854 	.word	0x20000854

0800a310 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b082      	sub	sp, #8
 800a314:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a316:	f001 fab1 	bl	800b87c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a31a:	2300      	movs	r3, #0
 800a31c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a31e:	4b04      	ldr	r3, [pc, #16]	; (800a330 <xTaskGetTickCountFromISR+0x20>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a324:	683b      	ldr	r3, [r7, #0]
}
 800a326:	4618      	mov	r0, r3
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000854 	.word	0x20000854

0800a334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b086      	sub	sp, #24
 800a338:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a33a:	2300      	movs	r3, #0
 800a33c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a33e:	4b4f      	ldr	r3, [pc, #316]	; (800a47c <xTaskIncrementTick+0x148>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	2b00      	cmp	r3, #0
 800a344:	f040 808a 	bne.w	800a45c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a348:	4b4d      	ldr	r3, [pc, #308]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3301      	adds	r3, #1
 800a34e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a350:	4a4b      	ldr	r2, [pc, #300]	; (800a480 <xTaskIncrementTick+0x14c>)
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d122      	bne.n	800a3a2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800a35c:	4b49      	ldr	r3, [pc, #292]	; (800a484 <xTaskIncrementTick+0x150>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00c      	beq.n	800a380 <xTaskIncrementTick+0x4c>
	__asm volatile
 800a366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a36a:	b672      	cpsid	i
 800a36c:	f383 8811 	msr	BASEPRI, r3
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	f3bf 8f4f 	dsb	sy
 800a378:	b662      	cpsie	i
 800a37a:	603b      	str	r3, [r7, #0]
}
 800a37c:	bf00      	nop
 800a37e:	e7fe      	b.n	800a37e <xTaskIncrementTick+0x4a>
 800a380:	4b40      	ldr	r3, [pc, #256]	; (800a484 <xTaskIncrementTick+0x150>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	60fb      	str	r3, [r7, #12]
 800a386:	4b40      	ldr	r3, [pc, #256]	; (800a488 <xTaskIncrementTick+0x154>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4a3e      	ldr	r2, [pc, #248]	; (800a484 <xTaskIncrementTick+0x150>)
 800a38c:	6013      	str	r3, [r2, #0]
 800a38e:	4a3e      	ldr	r2, [pc, #248]	; (800a488 <xTaskIncrementTick+0x154>)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6013      	str	r3, [r2, #0]
 800a394:	4b3d      	ldr	r3, [pc, #244]	; (800a48c <xTaskIncrementTick+0x158>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3301      	adds	r3, #1
 800a39a:	4a3c      	ldr	r2, [pc, #240]	; (800a48c <xTaskIncrementTick+0x158>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	f000 fad9 	bl	800a954 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3a2:	4b3b      	ldr	r3, [pc, #236]	; (800a490 <xTaskIncrementTick+0x15c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d348      	bcc.n	800a43e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3ac:	4b35      	ldr	r3, [pc, #212]	; (800a484 <xTaskIncrementTick+0x150>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d104      	bne.n	800a3c0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3b6:	4b36      	ldr	r3, [pc, #216]	; (800a490 <xTaskIncrementTick+0x15c>)
 800a3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a3bc:	601a      	str	r2, [r3, #0]
					break;
 800a3be:	e03e      	b.n	800a43e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3c0:	4b30      	ldr	r3, [pc, #192]	; (800a484 <xTaskIncrementTick+0x150>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d203      	bcs.n	800a3e0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a3d8:	4a2d      	ldr	r2, [pc, #180]	; (800a490 <xTaskIncrementTick+0x15c>)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a3de:	e02e      	b.n	800a43e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fe fc95 	bl	8008d14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d004      	beq.n	800a3fc <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	3318      	adds	r3, #24
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	f7fe fc8c 	bl	8008d14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	2201      	movs	r2, #1
 800a402:	409a      	lsls	r2, r3
 800a404:	4b23      	ldr	r3, [pc, #140]	; (800a494 <xTaskIncrementTick+0x160>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4313      	orrs	r3, r2
 800a40a:	4a22      	ldr	r2, [pc, #136]	; (800a494 <xTaskIncrementTick+0x160>)
 800a40c:	6013      	str	r3, [r2, #0]
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a412:	4613      	mov	r3, r2
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	4413      	add	r3, r2
 800a418:	009b      	lsls	r3, r3, #2
 800a41a:	4a1f      	ldr	r2, [pc, #124]	; (800a498 <xTaskIncrementTick+0x164>)
 800a41c:	441a      	add	r2, r3
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	3304      	adds	r3, #4
 800a422:	4619      	mov	r1, r3
 800a424:	4610      	mov	r0, r2
 800a426:	f7fe fc18 	bl	8008c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a42e:	4b1b      	ldr	r3, [pc, #108]	; (800a49c <xTaskIncrementTick+0x168>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a434:	429a      	cmp	r2, r3
 800a436:	d3b9      	bcc.n	800a3ac <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800a438:	2301      	movs	r3, #1
 800a43a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a43c:	e7b6      	b.n	800a3ac <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a43e:	4b17      	ldr	r3, [pc, #92]	; (800a49c <xTaskIncrementTick+0x168>)
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a444:	4914      	ldr	r1, [pc, #80]	; (800a498 <xTaskIncrementTick+0x164>)
 800a446:	4613      	mov	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	440b      	add	r3, r1
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d907      	bls.n	800a466 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800a456:	2301      	movs	r3, #1
 800a458:	617b      	str	r3, [r7, #20]
 800a45a:	e004      	b.n	800a466 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a45c:	4b10      	ldr	r3, [pc, #64]	; (800a4a0 <xTaskIncrementTick+0x16c>)
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	3301      	adds	r3, #1
 800a462:	4a0f      	ldr	r2, [pc, #60]	; (800a4a0 <xTaskIncrementTick+0x16c>)
 800a464:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a466:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <xTaskIncrementTick+0x170>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a472:	697b      	ldr	r3, [r7, #20]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3718      	adds	r7, #24
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	20000878 	.word	0x20000878
 800a480:	20000854 	.word	0x20000854
 800a484:	20000808 	.word	0x20000808
 800a488:	2000080c 	.word	0x2000080c
 800a48c:	20000868 	.word	0x20000868
 800a490:	20000870 	.word	0x20000870
 800a494:	20000858 	.word	0x20000858
 800a498:	20000754 	.word	0x20000754
 800a49c:	20000750 	.word	0x20000750
 800a4a0:	20000860 	.word	0x20000860
 800a4a4:	20000864 	.word	0x20000864

0800a4a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	b087      	sub	sp, #28
 800a4ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4ae:	4b28      	ldr	r3, [pc, #160]	; (800a550 <vTaskSwitchContext+0xa8>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d003      	beq.n	800a4be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4b6:	4b27      	ldr	r3, [pc, #156]	; (800a554 <vTaskSwitchContext+0xac>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4bc:	e041      	b.n	800a542 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a4be:	4b25      	ldr	r3, [pc, #148]	; (800a554 <vTaskSwitchContext+0xac>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c4:	4b24      	ldr	r3, [pc, #144]	; (800a558 <vTaskSwitchContext+0xb0>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	fab3 f383 	clz	r3, r3
 800a4d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a4d2:	7afb      	ldrb	r3, [r7, #11]
 800a4d4:	f1c3 031f 	rsb	r3, r3, #31
 800a4d8:	617b      	str	r3, [r7, #20]
 800a4da:	4920      	ldr	r1, [pc, #128]	; (800a55c <vTaskSwitchContext+0xb4>)
 800a4dc:	697a      	ldr	r2, [r7, #20]
 800a4de:	4613      	mov	r3, r2
 800a4e0:	009b      	lsls	r3, r3, #2
 800a4e2:	4413      	add	r3, r2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	440b      	add	r3, r1
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d10c      	bne.n	800a508 <vTaskSwitchContext+0x60>
	__asm volatile
 800a4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4f2:	b672      	cpsid	i
 800a4f4:	f383 8811 	msr	BASEPRI, r3
 800a4f8:	f3bf 8f6f 	isb	sy
 800a4fc:	f3bf 8f4f 	dsb	sy
 800a500:	b662      	cpsie	i
 800a502:	607b      	str	r3, [r7, #4]
}
 800a504:	bf00      	nop
 800a506:	e7fe      	b.n	800a506 <vTaskSwitchContext+0x5e>
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4613      	mov	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	009b      	lsls	r3, r3, #2
 800a512:	4a12      	ldr	r2, [pc, #72]	; (800a55c <vTaskSwitchContext+0xb4>)
 800a514:	4413      	add	r3, r2
 800a516:	613b      	str	r3, [r7, #16]
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	685b      	ldr	r3, [r3, #4]
 800a51c:	685a      	ldr	r2, [r3, #4]
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	605a      	str	r2, [r3, #4]
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	3308      	adds	r3, #8
 800a52a:	429a      	cmp	r2, r3
 800a52c:	d104      	bne.n	800a538 <vTaskSwitchContext+0x90>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	605a      	str	r2, [r3, #4]
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	4a08      	ldr	r2, [pc, #32]	; (800a560 <vTaskSwitchContext+0xb8>)
 800a540:	6013      	str	r3, [r2, #0]
}
 800a542:	bf00      	nop
 800a544:	371c      	adds	r7, #28
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
 800a54e:	bf00      	nop
 800a550:	20000878 	.word	0x20000878
 800a554:	20000864 	.word	0x20000864
 800a558:	20000858 	.word	0x20000858
 800a55c:	20000754 	.word	0x20000754
 800a560:	20000750 	.word	0x20000750

0800a564 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
 800a56c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d10c      	bne.n	800a58e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800a574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a578:	b672      	cpsid	i
 800a57a:	f383 8811 	msr	BASEPRI, r3
 800a57e:	f3bf 8f6f 	isb	sy
 800a582:	f3bf 8f4f 	dsb	sy
 800a586:	b662      	cpsie	i
 800a588:	60fb      	str	r3, [r7, #12]
}
 800a58a:	bf00      	nop
 800a58c:	e7fe      	b.n	800a58c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a58e:	4b07      	ldr	r3, [pc, #28]	; (800a5ac <vTaskPlaceOnEventList+0x48>)
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	3318      	adds	r3, #24
 800a594:	4619      	mov	r1, r3
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f7fe fb83 	bl	8008ca2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a59c:	2101      	movs	r1, #1
 800a59e:	6838      	ldr	r0, [r7, #0]
 800a5a0:	f000 fbd2 	bl	800ad48 <prvAddCurrentTaskToDelayedList>
}
 800a5a4:	bf00      	nop
 800a5a6:	3710      	adds	r7, #16
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	20000750 	.word	0x20000750

0800a5b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b086      	sub	sp, #24
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d10c      	bne.n	800a5dc <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800a5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c6:	b672      	cpsid	i
 800a5c8:	f383 8811 	msr	BASEPRI, r3
 800a5cc:	f3bf 8f6f 	isb	sy
 800a5d0:	f3bf 8f4f 	dsb	sy
 800a5d4:	b662      	cpsie	i
 800a5d6:	617b      	str	r3, [r7, #20]
}
 800a5d8:	bf00      	nop
 800a5da:	e7fe      	b.n	800a5da <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <vTaskPlaceOnEventListRestricted+0x58>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	3318      	adds	r3, #24
 800a5e2:	4619      	mov	r1, r3
 800a5e4:	68f8      	ldr	r0, [r7, #12]
 800a5e6:	f7fe fb38 	bl	8008c5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800a5f0:	f04f 33ff 	mov.w	r3, #4294967295
 800a5f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	68b8      	ldr	r0, [r7, #8]
 800a5fa:	f000 fba5 	bl	800ad48 <prvAddCurrentTaskToDelayedList>
	}
 800a5fe:	bf00      	nop
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	20000750 	.word	0x20000750

0800a60c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b086      	sub	sp, #24
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d10c      	bne.n	800a63c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800a622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a626:	b672      	cpsid	i
 800a628:	f383 8811 	msr	BASEPRI, r3
 800a62c:	f3bf 8f6f 	isb	sy
 800a630:	f3bf 8f4f 	dsb	sy
 800a634:	b662      	cpsie	i
 800a636:	60fb      	str	r3, [r7, #12]
}
 800a638:	bf00      	nop
 800a63a:	e7fe      	b.n	800a63a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	3318      	adds	r3, #24
 800a640:	4618      	mov	r0, r3
 800a642:	f7fe fb67 	bl	8008d14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a646:	4b1d      	ldr	r3, [pc, #116]	; (800a6bc <xTaskRemoveFromEventList+0xb0>)
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d11c      	bne.n	800a688 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fb5e 	bl	8008d14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a65c:	2201      	movs	r2, #1
 800a65e:	409a      	lsls	r2, r3
 800a660:	4b17      	ldr	r3, [pc, #92]	; (800a6c0 <xTaskRemoveFromEventList+0xb4>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4313      	orrs	r3, r2
 800a666:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <xTaskRemoveFromEventList+0xb4>)
 800a668:	6013      	str	r3, [r2, #0]
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66e:	4613      	mov	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4413      	add	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4a13      	ldr	r2, [pc, #76]	; (800a6c4 <xTaskRemoveFromEventList+0xb8>)
 800a678:	441a      	add	r2, r3
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	3304      	adds	r3, #4
 800a67e:	4619      	mov	r1, r3
 800a680:	4610      	mov	r0, r2
 800a682:	f7fe faea 	bl	8008c5a <vListInsertEnd>
 800a686:	e005      	b.n	800a694 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	3318      	adds	r3, #24
 800a68c:	4619      	mov	r1, r3
 800a68e:	480e      	ldr	r0, [pc, #56]	; (800a6c8 <xTaskRemoveFromEventList+0xbc>)
 800a690:	f7fe fae3 	bl	8008c5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a698:	4b0c      	ldr	r3, [pc, #48]	; (800a6cc <xTaskRemoveFromEventList+0xc0>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d905      	bls.n	800a6ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a6a2:	2301      	movs	r3, #1
 800a6a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a6a6:	4b0a      	ldr	r3, [pc, #40]	; (800a6d0 <xTaskRemoveFromEventList+0xc4>)
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	601a      	str	r2, [r3, #0]
 800a6ac:	e001      	b.n	800a6b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a6b2:	697b      	ldr	r3, [r7, #20]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3718      	adds	r7, #24
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}
 800a6bc:	20000878 	.word	0x20000878
 800a6c0:	20000858 	.word	0x20000858
 800a6c4:	20000754 	.word	0x20000754
 800a6c8:	20000810 	.word	0x20000810
 800a6cc:	20000750 	.word	0x20000750
 800a6d0:	20000864 	.word	0x20000864

0800a6d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <vTaskInternalSetTimeOutState+0x24>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6e4:	4b05      	ldr	r3, [pc, #20]	; (800a6fc <vTaskInternalSetTimeOutState+0x28>)
 800a6e6:	681a      	ldr	r2, [r3, #0]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	605a      	str	r2, [r3, #4]
}
 800a6ec:	bf00      	nop
 800a6ee:	370c      	adds	r7, #12
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr
 800a6f8:	20000868 	.word	0x20000868
 800a6fc:	20000854 	.word	0x20000854

0800a700 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b088      	sub	sp, #32
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
 800a708:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d10c      	bne.n	800a72a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800a710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a714:	b672      	cpsid	i
 800a716:	f383 8811 	msr	BASEPRI, r3
 800a71a:	f3bf 8f6f 	isb	sy
 800a71e:	f3bf 8f4f 	dsb	sy
 800a722:	b662      	cpsie	i
 800a724:	613b      	str	r3, [r7, #16]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d10c      	bne.n	800a74a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800a730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a734:	b672      	cpsid	i
 800a736:	f383 8811 	msr	BASEPRI, r3
 800a73a:	f3bf 8f6f 	isb	sy
 800a73e:	f3bf 8f4f 	dsb	sy
 800a742:	b662      	cpsie	i
 800a744:	60fb      	str	r3, [r7, #12]
}
 800a746:	bf00      	nop
 800a748:	e7fe      	b.n	800a748 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800a74a:	f000 ffaf 	bl	800b6ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a74e:	4b1d      	ldr	r3, [pc, #116]	; (800a7c4 <xTaskCheckForTimeOut+0xc4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	685b      	ldr	r3, [r3, #4]
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a766:	d102      	bne.n	800a76e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a768:	2300      	movs	r3, #0
 800a76a:	61fb      	str	r3, [r7, #28]
 800a76c:	e023      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681a      	ldr	r2, [r3, #0]
 800a772:	4b15      	ldr	r3, [pc, #84]	; (800a7c8 <xTaskCheckForTimeOut+0xc8>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	429a      	cmp	r2, r3
 800a778:	d007      	beq.n	800a78a <xTaskCheckForTimeOut+0x8a>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	69ba      	ldr	r2, [r7, #24]
 800a780:	429a      	cmp	r2, r3
 800a782:	d302      	bcc.n	800a78a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a784:	2301      	movs	r3, #1
 800a786:	61fb      	str	r3, [r7, #28]
 800a788:	e015      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	697a      	ldr	r2, [r7, #20]
 800a790:	429a      	cmp	r2, r3
 800a792:	d20b      	bcs.n	800a7ac <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	1ad2      	subs	r2, r2, r3
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f7ff ff97 	bl	800a6d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	61fb      	str	r3, [r7, #28]
 800a7aa:	e004      	b.n	800a7b6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a7b6:	f000 ffad 	bl	800b714 <vPortExitCritical>

	return xReturn;
 800a7ba:	69fb      	ldr	r3, [r7, #28]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3720      	adds	r7, #32
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20000854 	.word	0x20000854
 800a7c8:	20000868 	.word	0x20000868

0800a7cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7cc:	b480      	push	{r7}
 800a7ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7d0:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <vTaskMissedYield+0x14>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	601a      	str	r2, [r3, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000864 	.word	0x20000864

0800a7e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a7ec:	f000 f852 	bl	800a894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a7f0:	4b06      	ldr	r3, [pc, #24]	; (800a80c <prvIdleTask+0x28>)
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d9f9      	bls.n	800a7ec <prvIdleTask+0x8>
			{
				taskYIELD();
 800a7f8:	4b05      	ldr	r3, [pc, #20]	; (800a810 <prvIdleTask+0x2c>)
 800a7fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a808:	e7f0      	b.n	800a7ec <prvIdleTask+0x8>
 800a80a:	bf00      	nop
 800a80c:	20000754 	.word	0x20000754
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a814:	b580      	push	{r7, lr}
 800a816:	b082      	sub	sp, #8
 800a818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
 800a81e:	e00c      	b.n	800a83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a820:	687a      	ldr	r2, [r7, #4]
 800a822:	4613      	mov	r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	4413      	add	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4a12      	ldr	r2, [pc, #72]	; (800a874 <prvInitialiseTaskLists+0x60>)
 800a82c:	4413      	add	r3, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f7fe f9e6 	bl	8008c00 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	3301      	adds	r3, #1
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b06      	cmp	r3, #6
 800a83e:	d9ef      	bls.n	800a820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a840:	480d      	ldr	r0, [pc, #52]	; (800a878 <prvInitialiseTaskLists+0x64>)
 800a842:	f7fe f9dd 	bl	8008c00 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a846:	480d      	ldr	r0, [pc, #52]	; (800a87c <prvInitialiseTaskLists+0x68>)
 800a848:	f7fe f9da 	bl	8008c00 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a84c:	480c      	ldr	r0, [pc, #48]	; (800a880 <prvInitialiseTaskLists+0x6c>)
 800a84e:	f7fe f9d7 	bl	8008c00 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a852:	480c      	ldr	r0, [pc, #48]	; (800a884 <prvInitialiseTaskLists+0x70>)
 800a854:	f7fe f9d4 	bl	8008c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a858:	480b      	ldr	r0, [pc, #44]	; (800a888 <prvInitialiseTaskLists+0x74>)
 800a85a:	f7fe f9d1 	bl	8008c00 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a85e:	4b0b      	ldr	r3, [pc, #44]	; (800a88c <prvInitialiseTaskLists+0x78>)
 800a860:	4a05      	ldr	r2, [pc, #20]	; (800a878 <prvInitialiseTaskLists+0x64>)
 800a862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a864:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <prvInitialiseTaskLists+0x7c>)
 800a866:	4a05      	ldr	r2, [pc, #20]	; (800a87c <prvInitialiseTaskLists+0x68>)
 800a868:	601a      	str	r2, [r3, #0]
}
 800a86a:	bf00      	nop
 800a86c:	3708      	adds	r7, #8
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	20000754 	.word	0x20000754
 800a878:	200007e0 	.word	0x200007e0
 800a87c:	200007f4 	.word	0x200007f4
 800a880:	20000810 	.word	0x20000810
 800a884:	20000824 	.word	0x20000824
 800a888:	2000083c 	.word	0x2000083c
 800a88c:	20000808 	.word	0x20000808
 800a890:	2000080c 	.word	0x2000080c

0800a894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b082      	sub	sp, #8
 800a898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a89a:	e019      	b.n	800a8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a89c:	f000 ff06 	bl	800b6ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8a0:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <prvCheckTasksWaitingTermination+0x50>)
 800a8a2:	68db      	ldr	r3, [r3, #12]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7fe fa31 	bl	8008d14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <prvCheckTasksWaitingTermination+0x54>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	3b01      	subs	r3, #1
 800a8b8:	4a0b      	ldr	r2, [pc, #44]	; (800a8e8 <prvCheckTasksWaitingTermination+0x54>)
 800a8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a8bc:	4b0b      	ldr	r3, [pc, #44]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	3b01      	subs	r3, #1
 800a8c2:	4a0a      	ldr	r2, [pc, #40]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a8c6:	f000 ff25 	bl	800b714 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a8ca:	6878      	ldr	r0, [r7, #4]
 800a8cc:	f000 f810 	bl	800a8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a8d0:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <prvCheckTasksWaitingTermination+0x58>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d1e1      	bne.n	800a89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a8d8:	bf00      	nop
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	20000824 	.word	0x20000824
 800a8e8:	20000850 	.word	0x20000850
 800a8ec:	20000838 	.word	0x20000838

0800a8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b084      	sub	sp, #16
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d108      	bne.n	800a914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a906:	4618      	mov	r0, r3
 800a908:	f001 f8c6 	bl	800ba98 <vPortFree>
				vPortFree( pxTCB );
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f001 f8c3 	bl	800ba98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a912:	e01a      	b.n	800a94a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d103      	bne.n	800a926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f001 f8ba 	bl	800ba98 <vPortFree>
	}
 800a924:	e011      	b.n	800a94a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	d00c      	beq.n	800a94a <prvDeleteTCB+0x5a>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	b672      	cpsid	i
 800a936:	f383 8811 	msr	BASEPRI, r3
 800a93a:	f3bf 8f6f 	isb	sy
 800a93e:	f3bf 8f4f 	dsb	sy
 800a942:	b662      	cpsie	i
 800a944:	60fb      	str	r3, [r7, #12]
}
 800a946:	bf00      	nop
 800a948:	e7fe      	b.n	800a948 <prvDeleteTCB+0x58>
	}
 800a94a:	bf00      	nop
 800a94c:	3710      	adds	r7, #16
 800a94e:	46bd      	mov	sp, r7
 800a950:	bd80      	pop	{r7, pc}
	...

0800a954 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a95a:	4b0c      	ldr	r3, [pc, #48]	; (800a98c <prvResetNextTaskUnblockTime+0x38>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d104      	bne.n	800a96e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a964:	4b0a      	ldr	r3, [pc, #40]	; (800a990 <prvResetNextTaskUnblockTime+0x3c>)
 800a966:	f04f 32ff 	mov.w	r2, #4294967295
 800a96a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a96c:	e008      	b.n	800a980 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a96e:	4b07      	ldr	r3, [pc, #28]	; (800a98c <prvResetNextTaskUnblockTime+0x38>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	68db      	ldr	r3, [r3, #12]
 800a976:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a04      	ldr	r2, [pc, #16]	; (800a990 <prvResetNextTaskUnblockTime+0x3c>)
 800a97e:	6013      	str	r3, [r2, #0]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	20000808 	.word	0x20000808
 800a990:	20000870 	.word	0x20000870

0800a994 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a994:	b480      	push	{r7}
 800a996:	b083      	sub	sp, #12
 800a998:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a99a:	4b0b      	ldr	r3, [pc, #44]	; (800a9c8 <xTaskGetSchedulerState+0x34>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d102      	bne.n	800a9a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a9a2:	2301      	movs	r3, #1
 800a9a4:	607b      	str	r3, [r7, #4]
 800a9a6:	e008      	b.n	800a9ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a9a8:	4b08      	ldr	r3, [pc, #32]	; (800a9cc <xTaskGetSchedulerState+0x38>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a9b0:	2302      	movs	r3, #2
 800a9b2:	607b      	str	r3, [r7, #4]
 800a9b4:	e001      	b.n	800a9ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a9ba:	687b      	ldr	r3, [r7, #4]
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr
 800a9c8:	2000085c 	.word	0x2000085c
 800a9cc:	20000878 	.word	0x20000878

0800a9d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d069      	beq.n	800aaba <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9ea:	4b36      	ldr	r3, [pc, #216]	; (800aac4 <xTaskPriorityInherit+0xf4>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	429a      	cmp	r2, r3
 800a9f2:	d259      	bcs.n	800aaa8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	699b      	ldr	r3, [r3, #24]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	db06      	blt.n	800aa0a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9fc:	4b31      	ldr	r3, [pc, #196]	; (800aac4 <xTaskPriorityInherit+0xf4>)
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa02:	f1c3 0207 	rsb	r2, r3, #7
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800aa0a:	68bb      	ldr	r3, [r7, #8]
 800aa0c:	6959      	ldr	r1, [r3, #20]
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa12:	4613      	mov	r3, r2
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	4413      	add	r3, r2
 800aa18:	009b      	lsls	r3, r3, #2
 800aa1a:	4a2b      	ldr	r2, [pc, #172]	; (800aac8 <xTaskPriorityInherit+0xf8>)
 800aa1c:	4413      	add	r3, r2
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	d13a      	bne.n	800aa98 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	3304      	adds	r3, #4
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe f974 	bl	8008d14 <uxListRemove>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d115      	bne.n	800aa5e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa36:	4924      	ldr	r1, [pc, #144]	; (800aac8 <xTaskPriorityInherit+0xf8>)
 800aa38:	4613      	mov	r3, r2
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	4413      	add	r3, r2
 800aa3e:	009b      	lsls	r3, r3, #2
 800aa40:	440b      	add	r3, r1
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10a      	bne.n	800aa5e <xTaskPriorityInherit+0x8e>
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	2201      	movs	r2, #1
 800aa4e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa52:	43da      	mvns	r2, r3
 800aa54:	4b1d      	ldr	r3, [pc, #116]	; (800aacc <xTaskPriorityInherit+0xfc>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	4a1c      	ldr	r2, [pc, #112]	; (800aacc <xTaskPriorityInherit+0xfc>)
 800aa5c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <xTaskPriorityInherit+0xf4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	409a      	lsls	r2, r3
 800aa70:	4b16      	ldr	r3, [pc, #88]	; (800aacc <xTaskPriorityInherit+0xfc>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4313      	orrs	r3, r2
 800aa76:	4a15      	ldr	r2, [pc, #84]	; (800aacc <xTaskPriorityInherit+0xfc>)
 800aa78:	6013      	str	r3, [r2, #0]
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa7e:	4613      	mov	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	4413      	add	r3, r2
 800aa84:	009b      	lsls	r3, r3, #2
 800aa86:	4a10      	ldr	r2, [pc, #64]	; (800aac8 <xTaskPriorityInherit+0xf8>)
 800aa88:	441a      	add	r2, r3
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	3304      	adds	r3, #4
 800aa8e:	4619      	mov	r1, r3
 800aa90:	4610      	mov	r0, r2
 800aa92:	f7fe f8e2 	bl	8008c5a <vListInsertEnd>
 800aa96:	e004      	b.n	800aaa2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aa98:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <xTaskPriorityInherit+0xf4>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	60fb      	str	r3, [r7, #12]
 800aaa6:	e008      	b.n	800aaba <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <xTaskPriorityInherit+0xf4>)
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d201      	bcs.n	800aaba <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800aab6:	2301      	movs	r3, #1
 800aab8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800aaba:	68fb      	ldr	r3, [r7, #12]
	}
 800aabc:	4618      	mov	r0, r3
 800aabe:	3710      	adds	r7, #16
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20000750 	.word	0x20000750
 800aac8:	20000754 	.word	0x20000754
 800aacc:	20000858 	.word	0x20000858

0800aad0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b086      	sub	sp, #24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800aadc:	2300      	movs	r3, #0
 800aade:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d072      	beq.n	800abcc <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800aae6:	4b3c      	ldr	r3, [pc, #240]	; (800abd8 <xTaskPriorityDisinherit+0x108>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	693a      	ldr	r2, [r7, #16]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	d00c      	beq.n	800ab0a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800aaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf4:	b672      	cpsid	i
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	b662      	cpsie	i
 800ab04:	60fb      	str	r3, [r7, #12]
}
 800ab06:	bf00      	nop
 800ab08:	e7fe      	b.n	800ab08 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d10c      	bne.n	800ab2c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ab12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab16:	b672      	cpsid	i
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	b662      	cpsie	i
 800ab26:	60bb      	str	r3, [r7, #8]
}
 800ab28:	bf00      	nop
 800ab2a:	e7fe      	b.n	800ab2a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab30:	1e5a      	subs	r2, r3, #1
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d044      	beq.n	800abcc <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d140      	bne.n	800abcc <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab4a:	693b      	ldr	r3, [r7, #16]
 800ab4c:	3304      	adds	r3, #4
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe f8e0 	bl	8008d14 <uxListRemove>
 800ab54:	4603      	mov	r3, r0
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d115      	bne.n	800ab86 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800ab5a:	693b      	ldr	r3, [r7, #16]
 800ab5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab5e:	491f      	ldr	r1, [pc, #124]	; (800abdc <xTaskPriorityDisinherit+0x10c>)
 800ab60:	4613      	mov	r3, r2
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	4413      	add	r3, r2
 800ab66:	009b      	lsls	r3, r3, #2
 800ab68:	440b      	add	r3, r1
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xTaskPriorityDisinherit+0xb6>
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab74:	2201      	movs	r2, #1
 800ab76:	fa02 f303 	lsl.w	r3, r2, r3
 800ab7a:	43da      	mvns	r2, r3
 800ab7c:	4b18      	ldr	r3, [pc, #96]	; (800abe0 <xTaskPriorityDisinherit+0x110>)
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	4013      	ands	r3, r2
 800ab82:	4a17      	ldr	r2, [pc, #92]	; (800abe0 <xTaskPriorityDisinherit+0x110>)
 800ab84:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab92:	f1c3 0207 	rsb	r2, r3, #7
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab9e:	2201      	movs	r2, #1
 800aba0:	409a      	lsls	r2, r3
 800aba2:	4b0f      	ldr	r3, [pc, #60]	; (800abe0 <xTaskPriorityDisinherit+0x110>)
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	4313      	orrs	r3, r2
 800aba8:	4a0d      	ldr	r2, [pc, #52]	; (800abe0 <xTaskPriorityDisinherit+0x110>)
 800abaa:	6013      	str	r3, [r2, #0]
 800abac:	693b      	ldr	r3, [r7, #16]
 800abae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb0:	4613      	mov	r3, r2
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4a08      	ldr	r2, [pc, #32]	; (800abdc <xTaskPriorityDisinherit+0x10c>)
 800abba:	441a      	add	r2, r3
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	3304      	adds	r3, #4
 800abc0:	4619      	mov	r1, r3
 800abc2:	4610      	mov	r0, r2
 800abc4:	f7fe f849 	bl	8008c5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800abc8:	2301      	movs	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abcc:	697b      	ldr	r3, [r7, #20]
	}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20000750 	.word	0x20000750
 800abdc:	20000754 	.word	0x20000754
 800abe0:	20000858 	.word	0x20000858

0800abe4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
 800abec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800abf2:	2301      	movs	r3, #1
 800abf4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	f000 8087 	beq.w	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800abfe:	69bb      	ldr	r3, [r7, #24]
 800ac00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10c      	bne.n	800ac20 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800ac06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0a:	b672      	cpsid	i
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	b662      	cpsie	i
 800ac1a:	60fb      	str	r3, [r7, #12]
}
 800ac1c:	bf00      	nop
 800ac1e:	e7fe      	b.n	800ac1e <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac24:	683a      	ldr	r2, [r7, #0]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d902      	bls.n	800ac30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	61fb      	str	r3, [r7, #28]
 800ac2e:	e002      	b.n	800ac36 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ac30:	69bb      	ldr	r3, [r7, #24]
 800ac32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac34:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac3a:	69fa      	ldr	r2, [r7, #28]
 800ac3c:	429a      	cmp	r2, r3
 800ac3e:	d065      	beq.n	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ac40:	69bb      	ldr	r3, [r7, #24]
 800ac42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d160      	bne.n	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ac4a:	4b32      	ldr	r3, [pc, #200]	; (800ad14 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	69ba      	ldr	r2, [r7, #24]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d10c      	bne.n	800ac6e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800ac54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac58:	b672      	cpsid	i
 800ac5a:	f383 8811 	msr	BASEPRI, r3
 800ac5e:	f3bf 8f6f 	isb	sy
 800ac62:	f3bf 8f4f 	dsb	sy
 800ac66:	b662      	cpsie	i
 800ac68:	60bb      	str	r3, [r7, #8]
}
 800ac6a:	bf00      	nop
 800ac6c:	e7fe      	b.n	800ac6c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ac74:	69bb      	ldr	r3, [r7, #24]
 800ac76:	69fa      	ldr	r2, [r7, #28]
 800ac78:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ac7a:	69bb      	ldr	r3, [r7, #24]
 800ac7c:	699b      	ldr	r3, [r3, #24]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	db04      	blt.n	800ac8c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	f1c3 0207 	rsb	r2, r3, #7
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	6959      	ldr	r1, [r3, #20]
 800ac90:	693a      	ldr	r2, [r7, #16]
 800ac92:	4613      	mov	r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	009b      	lsls	r3, r3, #2
 800ac9a:	4a1f      	ldr	r2, [pc, #124]	; (800ad18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800ac9c:	4413      	add	r3, r2
 800ac9e:	4299      	cmp	r1, r3
 800aca0:	d134      	bne.n	800ad0c <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe f834 	bl	8008d14 <uxListRemove>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d115      	bne.n	800acde <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb6:	4918      	ldr	r1, [pc, #96]	; (800ad18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800acb8:	4613      	mov	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	4413      	add	r3, r2
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	440b      	add	r3, r1
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10a      	bne.n	800acde <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800accc:	2201      	movs	r2, #1
 800acce:	fa02 f303 	lsl.w	r3, r2, r3
 800acd2:	43da      	mvns	r2, r3
 800acd4:	4b11      	ldr	r3, [pc, #68]	; (800ad1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	4013      	ands	r3, r2
 800acda:	4a10      	ldr	r2, [pc, #64]	; (800ad1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800acdc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace2:	2201      	movs	r2, #1
 800ace4:	409a      	lsls	r2, r3
 800ace6:	4b0d      	ldr	r3, [pc, #52]	; (800ad1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	4313      	orrs	r3, r2
 800acec:	4a0b      	ldr	r2, [pc, #44]	; (800ad1c <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800acee:	6013      	str	r3, [r2, #0]
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf4:	4613      	mov	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	4413      	add	r3, r2
 800acfa:	009b      	lsls	r3, r3, #2
 800acfc:	4a06      	ldr	r2, [pc, #24]	; (800ad18 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800acfe:	441a      	add	r2, r3
 800ad00:	69bb      	ldr	r3, [r7, #24]
 800ad02:	3304      	adds	r3, #4
 800ad04:	4619      	mov	r1, r3
 800ad06:	4610      	mov	r0, r2
 800ad08:	f7fd ffa7 	bl	8008c5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad0c:	bf00      	nop
 800ad0e:	3720      	adds	r7, #32
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}
 800ad14:	20000750 	.word	0x20000750
 800ad18:	20000754 	.word	0x20000754
 800ad1c:	20000858 	.word	0x20000858

0800ad20 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ad20:	b480      	push	{r7}
 800ad22:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ad24:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d004      	beq.n	800ad36 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ad2c:	4b05      	ldr	r3, [pc, #20]	; (800ad44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ad32:	3201      	adds	r2, #1
 800ad34:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800ad36:	4b03      	ldr	r3, [pc, #12]	; (800ad44 <pvTaskIncrementMutexHeldCount+0x24>)
 800ad38:	681b      	ldr	r3, [r3, #0]
	}
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr
 800ad44:	20000750 	.word	0x20000750

0800ad48 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ad52:	4b29      	ldr	r3, [pc, #164]	; (800adf8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad58:	4b28      	ldr	r3, [pc, #160]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	3304      	adds	r3, #4
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fd ffd8 	bl	8008d14 <uxListRemove>
 800ad64:	4603      	mov	r3, r0
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d10b      	bne.n	800ad82 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800ad6a:	4b24      	ldr	r3, [pc, #144]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad70:	2201      	movs	r2, #1
 800ad72:	fa02 f303 	lsl.w	r3, r2, r3
 800ad76:	43da      	mvns	r2, r3
 800ad78:	4b21      	ldr	r3, [pc, #132]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4013      	ands	r3, r2
 800ad7e:	4a20      	ldr	r2, [pc, #128]	; (800ae00 <prvAddCurrentTaskToDelayedList+0xb8>)
 800ad80:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad88:	d10a      	bne.n	800ada0 <prvAddCurrentTaskToDelayedList+0x58>
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d007      	beq.n	800ada0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ad90:	4b1a      	ldr	r3, [pc, #104]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	481a      	ldr	r0, [pc, #104]	; (800ae04 <prvAddCurrentTaskToDelayedList+0xbc>)
 800ad9a:	f7fd ff5e 	bl	8008c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ad9e:	e026      	b.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4413      	add	r3, r2
 800ada6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ada8:	4b14      	ldr	r3, [pc, #80]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	68ba      	ldr	r2, [r7, #8]
 800adae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d209      	bcs.n	800adcc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adb8:	4b13      	ldr	r3, [pc, #76]	; (800ae08 <prvAddCurrentTaskToDelayedList+0xc0>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	3304      	adds	r3, #4
 800adc2:	4619      	mov	r1, r3
 800adc4:	4610      	mov	r0, r2
 800adc6:	f7fd ff6c 	bl	8008ca2 <vListInsert>
}
 800adca:	e010      	b.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800adcc:	4b0f      	ldr	r3, [pc, #60]	; (800ae0c <prvAddCurrentTaskToDelayedList+0xc4>)
 800adce:	681a      	ldr	r2, [r3, #0]
 800add0:	4b0a      	ldr	r3, [pc, #40]	; (800adfc <prvAddCurrentTaskToDelayedList+0xb4>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3304      	adds	r3, #4
 800add6:	4619      	mov	r1, r3
 800add8:	4610      	mov	r0, r2
 800adda:	f7fd ff62 	bl	8008ca2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800adde:	4b0c      	ldr	r3, [pc, #48]	; (800ae10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d202      	bcs.n	800adee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800ade8:	4a09      	ldr	r2, [pc, #36]	; (800ae10 <prvAddCurrentTaskToDelayedList+0xc8>)
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	6013      	str	r3, [r2, #0]
}
 800adee:	bf00      	nop
 800adf0:	3710      	adds	r7, #16
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20000854 	.word	0x20000854
 800adfc:	20000750 	.word	0x20000750
 800ae00:	20000858 	.word	0x20000858
 800ae04:	2000083c 	.word	0x2000083c
 800ae08:	2000080c 	.word	0x2000080c
 800ae0c:	20000808 	.word	0x20000808
 800ae10:	20000870 	.word	0x20000870

0800ae14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b08a      	sub	sp, #40	; 0x28
 800ae18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ae1e:	f000 faf7 	bl	800b410 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ae22:	4b1d      	ldr	r3, [pc, #116]	; (800ae98 <xTimerCreateTimerTask+0x84>)
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d021      	beq.n	800ae6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ae32:	1d3a      	adds	r2, r7, #4
 800ae34:	f107 0108 	add.w	r1, r7, #8
 800ae38:	f107 030c 	add.w	r3, r7, #12
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7f5 fbe5 	bl	800060c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	9202      	str	r2, [sp, #8]
 800ae4a:	9301      	str	r3, [sp, #4]
 800ae4c:	2302      	movs	r3, #2
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	2300      	movs	r3, #0
 800ae52:	460a      	mov	r2, r1
 800ae54:	4911      	ldr	r1, [pc, #68]	; (800ae9c <xTimerCreateTimerTask+0x88>)
 800ae56:	4812      	ldr	r0, [pc, #72]	; (800aea0 <xTimerCreateTimerTask+0x8c>)
 800ae58:	f7fe ff62 	bl	8009d20 <xTaskCreateStatic>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	4a11      	ldr	r2, [pc, #68]	; (800aea4 <xTimerCreateTimerTask+0x90>)
 800ae60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ae62:	4b10      	ldr	r3, [pc, #64]	; (800aea4 <xTimerCreateTimerTask+0x90>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d001      	beq.n	800ae6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10c      	bne.n	800ae8e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	b672      	cpsid	i
 800ae7a:	f383 8811 	msr	BASEPRI, r3
 800ae7e:	f3bf 8f6f 	isb	sy
 800ae82:	f3bf 8f4f 	dsb	sy
 800ae86:	b662      	cpsie	i
 800ae88:	613b      	str	r3, [r7, #16]
}
 800ae8a:	bf00      	nop
 800ae8c:	e7fe      	b.n	800ae8c <xTimerCreateTimerTask+0x78>
	return xReturn;
 800ae8e:	697b      	ldr	r3, [r7, #20]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3718      	adds	r7, #24
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}
 800ae98:	200008ac 	.word	0x200008ac
 800ae9c:	08016f5c 	.word	0x08016f5c
 800aea0:	0800afe5 	.word	0x0800afe5
 800aea4:	200008b0 	.word	0x200008b0

0800aea8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b08a      	sub	sp, #40	; 0x28
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	60f8      	str	r0, [r7, #12]
 800aeb0:	60b9      	str	r1, [r7, #8]
 800aeb2:	607a      	str	r2, [r7, #4]
 800aeb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10c      	bne.n	800aeda <xTimerGenericCommand+0x32>
	__asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec4:	b672      	cpsid	i
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	b662      	cpsie	i
 800aed4:	623b      	str	r3, [r7, #32]
}
 800aed6:	bf00      	nop
 800aed8:	e7fe      	b.n	800aed8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aeda:	4b1a      	ldr	r3, [pc, #104]	; (800af44 <xTimerGenericCommand+0x9c>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d02a      	beq.n	800af38 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2b05      	cmp	r3, #5
 800aef2:	dc18      	bgt.n	800af26 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aef4:	f7ff fd4e 	bl	800a994 <xTaskGetSchedulerState>
 800aef8:	4603      	mov	r3, r0
 800aefa:	2b02      	cmp	r3, #2
 800aefc:	d109      	bne.n	800af12 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800aefe:	4b11      	ldr	r3, [pc, #68]	; (800af44 <xTimerGenericCommand+0x9c>)
 800af00:	6818      	ldr	r0, [r3, #0]
 800af02:	f107 0114 	add.w	r1, r7, #20
 800af06:	2300      	movs	r3, #0
 800af08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af0a:	f7fe f8c7 	bl	800909c <xQueueGenericSend>
 800af0e:	6278      	str	r0, [r7, #36]	; 0x24
 800af10:	e012      	b.n	800af38 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800af12:	4b0c      	ldr	r3, [pc, #48]	; (800af44 <xTimerGenericCommand+0x9c>)
 800af14:	6818      	ldr	r0, [r3, #0]
 800af16:	f107 0114 	add.w	r1, r7, #20
 800af1a:	2300      	movs	r3, #0
 800af1c:	2200      	movs	r2, #0
 800af1e:	f7fe f8bd 	bl	800909c <xQueueGenericSend>
 800af22:	6278      	str	r0, [r7, #36]	; 0x24
 800af24:	e008      	b.n	800af38 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800af26:	4b07      	ldr	r3, [pc, #28]	; (800af44 <xTimerGenericCommand+0x9c>)
 800af28:	6818      	ldr	r0, [r3, #0]
 800af2a:	f107 0114 	add.w	r1, r7, #20
 800af2e:	2300      	movs	r3, #0
 800af30:	683a      	ldr	r2, [r7, #0]
 800af32:	f7fe f9b9 	bl	80092a8 <xQueueGenericSendFromISR>
 800af36:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800af38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3728      	adds	r7, #40	; 0x28
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200008ac 	.word	0x200008ac

0800af48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af52:	4b23      	ldr	r3, [pc, #140]	; (800afe0 <prvProcessExpiredTimer+0x98>)
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	68db      	ldr	r3, [r3, #12]
 800af58:	68db      	ldr	r3, [r3, #12]
 800af5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	3304      	adds	r3, #4
 800af60:	4618      	mov	r0, r3
 800af62:	f7fd fed7 	bl	8008d14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800af66:	697b      	ldr	r3, [r7, #20]
 800af68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800af6c:	f003 0304 	and.w	r3, r3, #4
 800af70:	2b00      	cmp	r3, #0
 800af72:	d024      	beq.n	800afbe <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	699a      	ldr	r2, [r3, #24]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	18d1      	adds	r1, r2, r3
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	683a      	ldr	r2, [r7, #0]
 800af80:	6978      	ldr	r0, [r7, #20]
 800af82:	f000 f8d3 	bl	800b12c <prvInsertTimerInActiveList>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d021      	beq.n	800afd0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800af8c:	2300      	movs	r3, #0
 800af8e:	9300      	str	r3, [sp, #0]
 800af90:	2300      	movs	r3, #0
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	2100      	movs	r1, #0
 800af96:	6978      	ldr	r0, [r7, #20]
 800af98:	f7ff ff86 	bl	800aea8 <xTimerGenericCommand>
 800af9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d115      	bne.n	800afd0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800afa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afa8:	b672      	cpsid	i
 800afaa:	f383 8811 	msr	BASEPRI, r3
 800afae:	f3bf 8f6f 	isb	sy
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	b662      	cpsie	i
 800afb8:	60fb      	str	r3, [r7, #12]
}
 800afba:	bf00      	nop
 800afbc:	e7fe      	b.n	800afbc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800afbe:	697b      	ldr	r3, [r7, #20]
 800afc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800afc4:	f023 0301 	bic.w	r3, r3, #1
 800afc8:	b2da      	uxtb	r2, r3
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	6a1b      	ldr	r3, [r3, #32]
 800afd4:	6978      	ldr	r0, [r7, #20]
 800afd6:	4798      	blx	r3
}
 800afd8:	bf00      	nop
 800afda:	3718      	adds	r7, #24
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}
 800afe0:	200008a4 	.word	0x200008a4

0800afe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b084      	sub	sp, #16
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 f857 	bl	800b0a4 <prvGetNextExpireTime>
 800aff6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	4619      	mov	r1, r3
 800affc:	68f8      	ldr	r0, [r7, #12]
 800affe:	f000 f803 	bl	800b008 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b002:	f000 f8d5 	bl	800b1b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b006:	e7f1      	b.n	800afec <prvTimerTask+0x8>

0800b008 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b084      	sub	sp, #16
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b012:	f7ff f8c1 	bl	800a198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b016:	f107 0308 	add.w	r3, r7, #8
 800b01a:	4618      	mov	r0, r3
 800b01c:	f000 f866 	bl	800b0ec <prvSampleTimeNow>
 800b020:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d130      	bne.n	800b08a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b028:	683b      	ldr	r3, [r7, #0]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d10a      	bne.n	800b044 <prvProcessTimerOrBlockTask+0x3c>
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	429a      	cmp	r2, r3
 800b034:	d806      	bhi.n	800b044 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b036:	f7ff f8bd 	bl	800a1b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b03a:	68f9      	ldr	r1, [r7, #12]
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f7ff ff83 	bl	800af48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b042:	e024      	b.n	800b08e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d008      	beq.n	800b05c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b04a:	4b13      	ldr	r3, [pc, #76]	; (800b098 <prvProcessTimerOrBlockTask+0x90>)
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d101      	bne.n	800b058 <prvProcessTimerOrBlockTask+0x50>
 800b054:	2301      	movs	r3, #1
 800b056:	e000      	b.n	800b05a <prvProcessTimerOrBlockTask+0x52>
 800b058:	2300      	movs	r3, #0
 800b05a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b05c:	4b0f      	ldr	r3, [pc, #60]	; (800b09c <prvProcessTimerOrBlockTask+0x94>)
 800b05e:	6818      	ldr	r0, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	683a      	ldr	r2, [r7, #0]
 800b068:	4619      	mov	r1, r3
 800b06a:	f7fe fe25 	bl	8009cb8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b06e:	f7ff f8a1 	bl	800a1b4 <xTaskResumeAll>
 800b072:	4603      	mov	r3, r0
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b078:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <prvProcessTimerOrBlockTask+0x98>)
 800b07a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b07e:	601a      	str	r2, [r3, #0]
 800b080:	f3bf 8f4f 	dsb	sy
 800b084:	f3bf 8f6f 	isb	sy
}
 800b088:	e001      	b.n	800b08e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b08a:	f7ff f893 	bl	800a1b4 <xTaskResumeAll>
}
 800b08e:	bf00      	nop
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	200008a8 	.word	0x200008a8
 800b09c:	200008ac 	.word	0x200008ac
 800b0a0:	e000ed04 	.word	0xe000ed04

0800b0a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b0ac:	4b0e      	ldr	r3, [pc, #56]	; (800b0e8 <prvGetNextExpireTime+0x44>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d101      	bne.n	800b0ba <prvGetNextExpireTime+0x16>
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	e000      	b.n	800b0bc <prvGetNextExpireTime+0x18>
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d105      	bne.n	800b0d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b0c8:	4b07      	ldr	r3, [pc, #28]	; (800b0e8 <prvGetNextExpireTime+0x44>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	68db      	ldr	r3, [r3, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	60fb      	str	r3, [r7, #12]
 800b0d2:	e001      	b.n	800b0d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	200008a4 	.word	0x200008a4

0800b0ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b084      	sub	sp, #16
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b0f4:	f7ff f8fc 	bl	800a2f0 <xTaskGetTickCount>
 800b0f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b0fa:	4b0b      	ldr	r3, [pc, #44]	; (800b128 <prvSampleTimeNow+0x3c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	68fa      	ldr	r2, [r7, #12]
 800b100:	429a      	cmp	r2, r3
 800b102:	d205      	bcs.n	800b110 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b104:	f000 f91e 	bl	800b344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2201      	movs	r2, #1
 800b10c:	601a      	str	r2, [r3, #0]
 800b10e:	e002      	b.n	800b116 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b116:	4a04      	ldr	r2, [pc, #16]	; (800b128 <prvSampleTimeNow+0x3c>)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b11c:	68fb      	ldr	r3, [r7, #12]
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3710      	adds	r7, #16
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	200008b4 	.word	0x200008b4

0800b12c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b086      	sub	sp, #24
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b13a:	2300      	movs	r3, #0
 800b13c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	68ba      	ldr	r2, [r7, #8]
 800b142:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b14a:	68ba      	ldr	r2, [r7, #8]
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d812      	bhi.n	800b178 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b152:	687a      	ldr	r2, [r7, #4]
 800b154:	683b      	ldr	r3, [r7, #0]
 800b156:	1ad2      	subs	r2, r2, r3
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	699b      	ldr	r3, [r3, #24]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d302      	bcc.n	800b166 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	617b      	str	r3, [r7, #20]
 800b164:	e01b      	b.n	800b19e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b166:	4b10      	ldr	r3, [pc, #64]	; (800b1a8 <prvInsertTimerInActiveList+0x7c>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	3304      	adds	r3, #4
 800b16e:	4619      	mov	r1, r3
 800b170:	4610      	mov	r0, r2
 800b172:	f7fd fd96 	bl	8008ca2 <vListInsert>
 800b176:	e012      	b.n	800b19e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d206      	bcs.n	800b18e <prvInsertTimerInActiveList+0x62>
 800b180:	68ba      	ldr	r2, [r7, #8]
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	429a      	cmp	r2, r3
 800b186:	d302      	bcc.n	800b18e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b188:	2301      	movs	r3, #1
 800b18a:	617b      	str	r3, [r7, #20]
 800b18c:	e007      	b.n	800b19e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b18e:	4b07      	ldr	r3, [pc, #28]	; (800b1ac <prvInsertTimerInActiveList+0x80>)
 800b190:	681a      	ldr	r2, [r3, #0]
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	3304      	adds	r3, #4
 800b196:	4619      	mov	r1, r3
 800b198:	4610      	mov	r0, r2
 800b19a:	f7fd fd82 	bl	8008ca2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b19e:	697b      	ldr	r3, [r7, #20]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3718      	adds	r7, #24
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}
 800b1a8:	200008a8 	.word	0x200008a8
 800b1ac:	200008a4 	.word	0x200008a4

0800b1b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b08c      	sub	sp, #48	; 0x30
 800b1b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b1b6:	e0b2      	b.n	800b31e <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f2c0 80ae 	blt.w	800b31c <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ce:	3304      	adds	r3, #4
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	f7fd fd9f 	bl	8008d14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b1d6:	1d3b      	adds	r3, r7, #4
 800b1d8:	4618      	mov	r0, r3
 800b1da:	f7ff ff87 	bl	800b0ec <prvSampleTimeNow>
 800b1de:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	2b09      	cmp	r3, #9
 800b1e4:	f200 809b 	bhi.w	800b31e <prvProcessReceivedCommands+0x16e>
 800b1e8:	a201      	add	r2, pc, #4	; (adr r2, 800b1f0 <prvProcessReceivedCommands+0x40>)
 800b1ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ee:	bf00      	nop
 800b1f0:	0800b219 	.word	0x0800b219
 800b1f4:	0800b219 	.word	0x0800b219
 800b1f8:	0800b219 	.word	0x0800b219
 800b1fc:	0800b291 	.word	0x0800b291
 800b200:	0800b2a5 	.word	0x0800b2a5
 800b204:	0800b2f3 	.word	0x0800b2f3
 800b208:	0800b219 	.word	0x0800b219
 800b20c:	0800b219 	.word	0x0800b219
 800b210:	0800b291 	.word	0x0800b291
 800b214:	0800b2a5 	.word	0x0800b2a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b21a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b21e:	f043 0301 	orr.w	r3, r3, #1
 800b222:	b2da      	uxtb	r2, r3
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b22a:	68fa      	ldr	r2, [r7, #12]
 800b22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	18d1      	adds	r1, r2, r3
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	6a3a      	ldr	r2, [r7, #32]
 800b236:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b238:	f7ff ff78 	bl	800b12c <prvInsertTimerInActiveList>
 800b23c:	4603      	mov	r3, r0
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d06d      	beq.n	800b31e <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b244:	6a1b      	ldr	r3, [r3, #32]
 800b246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b248:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b250:	f003 0304 	and.w	r3, r3, #4
 800b254:	2b00      	cmp	r3, #0
 800b256:	d062      	beq.n	800b31e <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b258:	68fa      	ldr	r2, [r7, #12]
 800b25a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	441a      	add	r2, r3
 800b260:	2300      	movs	r3, #0
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2300      	movs	r3, #0
 800b266:	2100      	movs	r1, #0
 800b268:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b26a:	f7ff fe1d 	bl	800aea8 <xTimerGenericCommand>
 800b26e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d153      	bne.n	800b31e <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800b276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27a:	b672      	cpsid	i
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	b662      	cpsie	i
 800b28a:	61bb      	str	r3, [r7, #24]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b296:	f023 0301 	bic.w	r3, r3, #1
 800b29a:	b2da      	uxtb	r2, r3
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b2a2:	e03c      	b.n	800b31e <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2aa:	f043 0301 	orr.w	r3, r3, #1
 800b2ae:	b2da      	uxtb	r2, r3
 800b2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2be:	699b      	ldr	r3, [r3, #24]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d10c      	bne.n	800b2de <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800b2c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c8:	b672      	cpsid	i
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	b662      	cpsie	i
 800b2d8:	617b      	str	r3, [r7, #20]
}
 800b2da:	bf00      	nop
 800b2dc:	e7fe      	b.n	800b2dc <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	699a      	ldr	r2, [r3, #24]
 800b2e2:	6a3b      	ldr	r3, [r7, #32]
 800b2e4:	18d1      	adds	r1, r2, r3
 800b2e6:	6a3b      	ldr	r3, [r7, #32]
 800b2e8:	6a3a      	ldr	r2, [r7, #32]
 800b2ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b2ec:	f7ff ff1e 	bl	800b12c <prvInsertTimerInActiveList>
					break;
 800b2f0:	e015      	b.n	800b31e <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b2f8:	f003 0302 	and.w	r3, r3, #2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d103      	bne.n	800b308 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800b300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b302:	f000 fbc9 	bl	800ba98 <vPortFree>
 800b306:	e00a      	b.n	800b31e <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b30e:	f023 0301 	bic.w	r3, r3, #1
 800b312:	b2da      	uxtb	r2, r3
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b31a:	e000      	b.n	800b31e <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b31c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b31e:	4b08      	ldr	r3, [pc, #32]	; (800b340 <prvProcessReceivedCommands+0x190>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f107 0108 	add.w	r1, r7, #8
 800b326:	2200      	movs	r2, #0
 800b328:	4618      	mov	r0, r3
 800b32a:	f7fe f8f3 	bl	8009514 <xQueueReceive>
 800b32e:	4603      	mov	r3, r0
 800b330:	2b00      	cmp	r3, #0
 800b332:	f47f af41 	bne.w	800b1b8 <prvProcessReceivedCommands+0x8>
	}
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	3728      	adds	r7, #40	; 0x28
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	200008ac 	.word	0x200008ac

0800b344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b088      	sub	sp, #32
 800b348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b34a:	e04a      	b.n	800b3e2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b34c:	4b2e      	ldr	r3, [pc, #184]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	68db      	ldr	r3, [r3, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b356:	4b2c      	ldr	r3, [pc, #176]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	68db      	ldr	r3, [r3, #12]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	3304      	adds	r3, #4
 800b364:	4618      	mov	r0, r3
 800b366:	f7fd fcd5 	bl	8008d14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	68f8      	ldr	r0, [r7, #12]
 800b370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b378:	f003 0304 	and.w	r3, r3, #4
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d030      	beq.n	800b3e2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	693a      	ldr	r2, [r7, #16]
 800b386:	4413      	add	r3, r2
 800b388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b38a:	68ba      	ldr	r2, [r7, #8]
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	429a      	cmp	r2, r3
 800b390:	d90e      	bls.n	800b3b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	68fa      	ldr	r2, [r7, #12]
 800b39c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b39e:	4b1a      	ldr	r3, [pc, #104]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b3a0:	681a      	ldr	r2, [r3, #0]
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	3304      	adds	r3, #4
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	4610      	mov	r0, r2
 800b3aa:	f7fd fc7a 	bl	8008ca2 <vListInsert>
 800b3ae:	e018      	b.n	800b3e2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	693a      	ldr	r2, [r7, #16]
 800b3b8:	2100      	movs	r1, #0
 800b3ba:	68f8      	ldr	r0, [r7, #12]
 800b3bc:	f7ff fd74 	bl	800aea8 <xTimerGenericCommand>
 800b3c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d10c      	bne.n	800b3e2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800b3c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3cc:	b672      	cpsid	i
 800b3ce:	f383 8811 	msr	BASEPRI, r3
 800b3d2:	f3bf 8f6f 	isb	sy
 800b3d6:	f3bf 8f4f 	dsb	sy
 800b3da:	b662      	cpsie	i
 800b3dc:	603b      	str	r3, [r7, #0]
}
 800b3de:	bf00      	nop
 800b3e0:	e7fe      	b.n	800b3e0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b3e2:	4b09      	ldr	r3, [pc, #36]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d1af      	bne.n	800b34c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b3f2:	4b06      	ldr	r3, [pc, #24]	; (800b40c <prvSwitchTimerLists+0xc8>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	4a04      	ldr	r2, [pc, #16]	; (800b408 <prvSwitchTimerLists+0xc4>)
 800b3f8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b3fa:	4a04      	ldr	r2, [pc, #16]	; (800b40c <prvSwitchTimerLists+0xc8>)
 800b3fc:	697b      	ldr	r3, [r7, #20]
 800b3fe:	6013      	str	r3, [r2, #0]
}
 800b400:	bf00      	nop
 800b402:	3718      	adds	r7, #24
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	200008a4 	.word	0x200008a4
 800b40c:	200008a8 	.word	0x200008a8

0800b410 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b082      	sub	sp, #8
 800b414:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b416:	f000 f949 	bl	800b6ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b41a:	4b15      	ldr	r3, [pc, #84]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d120      	bne.n	800b464 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b422:	4814      	ldr	r0, [pc, #80]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b424:	f7fd fbec 	bl	8008c00 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b428:	4813      	ldr	r0, [pc, #76]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b42a:	f7fd fbe9 	bl	8008c00 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b42e:	4b13      	ldr	r3, [pc, #76]	; (800b47c <prvCheckForValidListAndQueue+0x6c>)
 800b430:	4a10      	ldr	r2, [pc, #64]	; (800b474 <prvCheckForValidListAndQueue+0x64>)
 800b432:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <prvCheckForValidListAndQueue+0x70>)
 800b436:	4a10      	ldr	r2, [pc, #64]	; (800b478 <prvCheckForValidListAndQueue+0x68>)
 800b438:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b43a:	2300      	movs	r3, #0
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	4b11      	ldr	r3, [pc, #68]	; (800b484 <prvCheckForValidListAndQueue+0x74>)
 800b440:	4a11      	ldr	r2, [pc, #68]	; (800b488 <prvCheckForValidListAndQueue+0x78>)
 800b442:	210c      	movs	r1, #12
 800b444:	200a      	movs	r0, #10
 800b446:	f7fd fcf9 	bl	8008e3c <xQueueGenericCreateStatic>
 800b44a:	4603      	mov	r3, r0
 800b44c:	4a08      	ldr	r2, [pc, #32]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b44e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b450:	4b07      	ldr	r3, [pc, #28]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d005      	beq.n	800b464 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b458:	4b05      	ldr	r3, [pc, #20]	; (800b470 <prvCheckForValidListAndQueue+0x60>)
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	490b      	ldr	r1, [pc, #44]	; (800b48c <prvCheckForValidListAndQueue+0x7c>)
 800b45e:	4618      	mov	r0, r3
 800b460:	f7fe fc00 	bl	8009c64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b464:	f000 f956 	bl	800b714 <vPortExitCritical>
}
 800b468:	bf00      	nop
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	200008ac 	.word	0x200008ac
 800b474:	2000087c 	.word	0x2000087c
 800b478:	20000890 	.word	0x20000890
 800b47c:	200008a4 	.word	0x200008a4
 800b480:	200008a8 	.word	0x200008a8
 800b484:	20000930 	.word	0x20000930
 800b488:	200008b8 	.word	0x200008b8
 800b48c:	08016f64 	.word	0x08016f64

0800b490 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b490:	b480      	push	{r7}
 800b492:	b085      	sub	sp, #20
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	3b04      	subs	r3, #4
 800b4a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b4a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3b04      	subs	r3, #4
 800b4ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	f023 0201 	bic.w	r2, r3, #1
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	3b04      	subs	r3, #4
 800b4be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b4c0:	4a0c      	ldr	r2, [pc, #48]	; (800b4f4 <pxPortInitialiseStack+0x64>)
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	3b14      	subs	r3, #20
 800b4ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f06f 0202 	mvn.w	r2, #2
 800b4de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	3b20      	subs	r3, #32
 800b4e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b4e6:	68fb      	ldr	r3, [r7, #12]
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	3714      	adds	r7, #20
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f2:	4770      	bx	lr
 800b4f4:	0800b4f9 	.word	0x0800b4f9

0800b4f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b4fe:	2300      	movs	r3, #0
 800b500:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b502:	4b14      	ldr	r3, [pc, #80]	; (800b554 <prvTaskExitError+0x5c>)
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b50a:	d00c      	beq.n	800b526 <prvTaskExitError+0x2e>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	b672      	cpsid	i
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	b662      	cpsie	i
 800b520:	60fb      	str	r3, [r7, #12]
}
 800b522:	bf00      	nop
 800b524:	e7fe      	b.n	800b524 <prvTaskExitError+0x2c>
	__asm volatile
 800b526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b52a:	b672      	cpsid	i
 800b52c:	f383 8811 	msr	BASEPRI, r3
 800b530:	f3bf 8f6f 	isb	sy
 800b534:	f3bf 8f4f 	dsb	sy
 800b538:	b662      	cpsie	i
 800b53a:	60bb      	str	r3, [r7, #8]
}
 800b53c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b53e:	bf00      	nop
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d0fc      	beq.n	800b540 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b546:	bf00      	nop
 800b548:	bf00      	nop
 800b54a:	3714      	adds	r7, #20
 800b54c:	46bd      	mov	sp, r7
 800b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b552:	4770      	bx	lr
 800b554:	2000000c 	.word	0x2000000c
	...

0800b560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <pxCurrentTCBConst2>)
 800b562:	6819      	ldr	r1, [r3, #0]
 800b564:	6808      	ldr	r0, [r1, #0]
 800b566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56a:	f380 8809 	msr	PSP, r0
 800b56e:	f3bf 8f6f 	isb	sy
 800b572:	f04f 0000 	mov.w	r0, #0
 800b576:	f380 8811 	msr	BASEPRI, r0
 800b57a:	4770      	bx	lr
 800b57c:	f3af 8000 	nop.w

0800b580 <pxCurrentTCBConst2>:
 800b580:	20000750 	.word	0x20000750
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b584:	bf00      	nop
 800b586:	bf00      	nop

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	; (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	bf00      	nop
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b084      	sub	sp, #16
 800b5b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b5b6:	4b37      	ldr	r3, [pc, #220]	; (800b694 <xPortStartScheduler+0xe4>)
 800b5b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	22ff      	movs	r2, #255	; 0xff
 800b5c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b5d0:	78fb      	ldrb	r3, [r7, #3]
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b5d8:	b2da      	uxtb	r2, r3
 800b5da:	4b2f      	ldr	r3, [pc, #188]	; (800b698 <xPortStartScheduler+0xe8>)
 800b5dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b5de:	4b2f      	ldr	r3, [pc, #188]	; (800b69c <xPortStartScheduler+0xec>)
 800b5e0:	2207      	movs	r2, #7
 800b5e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5e4:	e009      	b.n	800b5fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800b5e6:	4b2d      	ldr	r3, [pc, #180]	; (800b69c <xPortStartScheduler+0xec>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	3b01      	subs	r3, #1
 800b5ec:	4a2b      	ldr	r2, [pc, #172]	; (800b69c <xPortStartScheduler+0xec>)
 800b5ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	b2db      	uxtb	r3, r3
 800b5f4:	005b      	lsls	r3, r3, #1
 800b5f6:	b2db      	uxtb	r3, r3
 800b5f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b5fa:	78fb      	ldrb	r3, [r7, #3]
 800b5fc:	b2db      	uxtb	r3, r3
 800b5fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b602:	2b80      	cmp	r3, #128	; 0x80
 800b604:	d0ef      	beq.n	800b5e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b606:	4b25      	ldr	r3, [pc, #148]	; (800b69c <xPortStartScheduler+0xec>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	f1c3 0307 	rsb	r3, r3, #7
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d00c      	beq.n	800b62c <xPortStartScheduler+0x7c>
	__asm volatile
 800b612:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b616:	b672      	cpsid	i
 800b618:	f383 8811 	msr	BASEPRI, r3
 800b61c:	f3bf 8f6f 	isb	sy
 800b620:	f3bf 8f4f 	dsb	sy
 800b624:	b662      	cpsie	i
 800b626:	60bb      	str	r3, [r7, #8]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b62c:	4b1b      	ldr	r3, [pc, #108]	; (800b69c <xPortStartScheduler+0xec>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	021b      	lsls	r3, r3, #8
 800b632:	4a1a      	ldr	r2, [pc, #104]	; (800b69c <xPortStartScheduler+0xec>)
 800b634:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b636:	4b19      	ldr	r3, [pc, #100]	; (800b69c <xPortStartScheduler+0xec>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b63e:	4a17      	ldr	r2, [pc, #92]	; (800b69c <xPortStartScheduler+0xec>)
 800b640:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	b2da      	uxtb	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b64a:	4b15      	ldr	r3, [pc, #84]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a14      	ldr	r2, [pc, #80]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b654:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b656:	4b12      	ldr	r3, [pc, #72]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a11      	ldr	r2, [pc, #68]	; (800b6a0 <xPortStartScheduler+0xf0>)
 800b65c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b660:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b662:	f000 f8dd 	bl	800b820 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b666:	4b0f      	ldr	r3, [pc, #60]	; (800b6a4 <xPortStartScheduler+0xf4>)
 800b668:	2200      	movs	r2, #0
 800b66a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b66c:	f000 f8fc 	bl	800b868 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b670:	4b0d      	ldr	r3, [pc, #52]	; (800b6a8 <xPortStartScheduler+0xf8>)
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a0c      	ldr	r2, [pc, #48]	; (800b6a8 <xPortStartScheduler+0xf8>)
 800b676:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b67a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b67c:	f7ff ff84 	bl	800b588 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b680:	f7fe ff12 	bl	800a4a8 <vTaskSwitchContext>
	prvTaskExitError();
 800b684:	f7ff ff38 	bl	800b4f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3710      	adds	r7, #16
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}
 800b692:	bf00      	nop
 800b694:	e000e400 	.word	0xe000e400
 800b698:	20000978 	.word	0x20000978
 800b69c:	2000097c 	.word	0x2000097c
 800b6a0:	e000ed20 	.word	0xe000ed20
 800b6a4:	2000000c 	.word	0x2000000c
 800b6a8:	e000ef34 	.word	0xe000ef34

0800b6ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b083      	sub	sp, #12
 800b6b0:	af00      	add	r7, sp, #0
	__asm volatile
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	b672      	cpsid	i
 800b6b8:	f383 8811 	msr	BASEPRI, r3
 800b6bc:	f3bf 8f6f 	isb	sy
 800b6c0:	f3bf 8f4f 	dsb	sy
 800b6c4:	b662      	cpsie	i
 800b6c6:	607b      	str	r3, [r7, #4]
}
 800b6c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b6ca:	4b10      	ldr	r3, [pc, #64]	; (800b70c <vPortEnterCritical+0x60>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	4a0e      	ldr	r2, [pc, #56]	; (800b70c <vPortEnterCritical+0x60>)
 800b6d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b6d4:	4b0d      	ldr	r3, [pc, #52]	; (800b70c <vPortEnterCritical+0x60>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2b01      	cmp	r3, #1
 800b6da:	d111      	bne.n	800b700 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b6dc:	4b0c      	ldr	r3, [pc, #48]	; (800b710 <vPortEnterCritical+0x64>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00c      	beq.n	800b700 <vPortEnterCritical+0x54>
	__asm volatile
 800b6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ea:	b672      	cpsid	i
 800b6ec:	f383 8811 	msr	BASEPRI, r3
 800b6f0:	f3bf 8f6f 	isb	sy
 800b6f4:	f3bf 8f4f 	dsb	sy
 800b6f8:	b662      	cpsie	i
 800b6fa:	603b      	str	r3, [r7, #0]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vPortEnterCritical+0x52>
	}
}
 800b700:	bf00      	nop
 800b702:	370c      	adds	r7, #12
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr
 800b70c:	2000000c 	.word	0x2000000c
 800b710:	e000ed04 	.word	0xe000ed04

0800b714 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b714:	b480      	push	{r7}
 800b716:	b083      	sub	sp, #12
 800b718:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b71a:	4b13      	ldr	r3, [pc, #76]	; (800b768 <vPortExitCritical+0x54>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d10c      	bne.n	800b73c <vPortExitCritical+0x28>
	__asm volatile
 800b722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b726:	b672      	cpsid	i
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	b662      	cpsie	i
 800b736:	607b      	str	r3, [r7, #4]
}
 800b738:	bf00      	nop
 800b73a:	e7fe      	b.n	800b73a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800b73c:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <vPortExitCritical+0x54>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	3b01      	subs	r3, #1
 800b742:	4a09      	ldr	r2, [pc, #36]	; (800b768 <vPortExitCritical+0x54>)
 800b744:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b746:	4b08      	ldr	r3, [pc, #32]	; (800b768 <vPortExitCritical+0x54>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d105      	bne.n	800b75a <vPortExitCritical+0x46>
 800b74e:	2300      	movs	r3, #0
 800b750:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	f383 8811 	msr	BASEPRI, r3
}
 800b758:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b75a:	bf00      	nop
 800b75c:	370c      	adds	r7, #12
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	2000000c 	.word	0x2000000c
 800b76c:	00000000 	.word	0x00000000

0800b770 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b770:	f3ef 8009 	mrs	r0, PSP
 800b774:	f3bf 8f6f 	isb	sy
 800b778:	4b15      	ldr	r3, [pc, #84]	; (800b7d0 <pxCurrentTCBConst>)
 800b77a:	681a      	ldr	r2, [r3, #0]
 800b77c:	f01e 0f10 	tst.w	lr, #16
 800b780:	bf08      	it	eq
 800b782:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b786:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b78a:	6010      	str	r0, [r2, #0]
 800b78c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b790:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b794:	b672      	cpsid	i
 800b796:	f380 8811 	msr	BASEPRI, r0
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	f3bf 8f6f 	isb	sy
 800b7a2:	b662      	cpsie	i
 800b7a4:	f7fe fe80 	bl	800a4a8 <vTaskSwitchContext>
 800b7a8:	f04f 0000 	mov.w	r0, #0
 800b7ac:	f380 8811 	msr	BASEPRI, r0
 800b7b0:	bc09      	pop	{r0, r3}
 800b7b2:	6819      	ldr	r1, [r3, #0]
 800b7b4:	6808      	ldr	r0, [r1, #0]
 800b7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	f01e 0f10 	tst.w	lr, #16
 800b7be:	bf08      	it	eq
 800b7c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b7c4:	f380 8809 	msr	PSP, r0
 800b7c8:	f3bf 8f6f 	isb	sy
 800b7cc:	4770      	bx	lr
 800b7ce:	bf00      	nop

0800b7d0 <pxCurrentTCBConst>:
 800b7d0:	20000750 	.word	0x20000750
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop

0800b7d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7e2:	b672      	cpsid	i
 800b7e4:	f383 8811 	msr	BASEPRI, r3
 800b7e8:	f3bf 8f6f 	isb	sy
 800b7ec:	f3bf 8f4f 	dsb	sy
 800b7f0:	b662      	cpsie	i
 800b7f2:	607b      	str	r3, [r7, #4]
}
 800b7f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b7f6:	f7fe fd9d 	bl	800a334 <xTaskIncrementTick>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b800:	4b06      	ldr	r3, [pc, #24]	; (800b81c <SysTick_Handler+0x44>)
 800b802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	2300      	movs	r3, #0
 800b80a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	f383 8811 	msr	BASEPRI, r3
}
 800b812:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b814:	bf00      	nop
 800b816:	3708      	adds	r7, #8
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}
 800b81c:	e000ed04 	.word	0xe000ed04

0800b820 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b820:	b480      	push	{r7}
 800b822:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b824:	4b0b      	ldr	r3, [pc, #44]	; (800b854 <vPortSetupTimerInterrupt+0x34>)
 800b826:	2200      	movs	r2, #0
 800b828:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b82a:	4b0b      	ldr	r3, [pc, #44]	; (800b858 <vPortSetupTimerInterrupt+0x38>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b830:	4b0a      	ldr	r3, [pc, #40]	; (800b85c <vPortSetupTimerInterrupt+0x3c>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	4a0a      	ldr	r2, [pc, #40]	; (800b860 <vPortSetupTimerInterrupt+0x40>)
 800b836:	fba2 2303 	umull	r2, r3, r2, r3
 800b83a:	099b      	lsrs	r3, r3, #6
 800b83c:	4a09      	ldr	r2, [pc, #36]	; (800b864 <vPortSetupTimerInterrupt+0x44>)
 800b83e:	3b01      	subs	r3, #1
 800b840:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <vPortSetupTimerInterrupt+0x34>)
 800b844:	2207      	movs	r2, #7
 800b846:	601a      	str	r2, [r3, #0]
}
 800b848:	bf00      	nop
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop
 800b854:	e000e010 	.word	0xe000e010
 800b858:	e000e018 	.word	0xe000e018
 800b85c:	20000000 	.word	0x20000000
 800b860:	10624dd3 	.word	0x10624dd3
 800b864:	e000e014 	.word	0xe000e014

0800b868 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b868:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b878 <vPortEnableVFP+0x10>
 800b86c:	6801      	ldr	r1, [r0, #0]
 800b86e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b872:	6001      	str	r1, [r0, #0]
 800b874:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b876:	bf00      	nop
 800b878:	e000ed88 	.word	0xe000ed88

0800b87c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b882:	f3ef 8305 	mrs	r3, IPSR
 800b886:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	2b0f      	cmp	r3, #15
 800b88c:	d916      	bls.n	800b8bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b88e:	4a19      	ldr	r2, [pc, #100]	; (800b8f4 <vPortValidateInterruptPriority+0x78>)
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	4413      	add	r3, r2
 800b894:	781b      	ldrb	r3, [r3, #0]
 800b896:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b898:	4b17      	ldr	r3, [pc, #92]	; (800b8f8 <vPortValidateInterruptPriority+0x7c>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	7afa      	ldrb	r2, [r7, #11]
 800b89e:	429a      	cmp	r2, r3
 800b8a0:	d20c      	bcs.n	800b8bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800b8a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8a6:	b672      	cpsid	i
 800b8a8:	f383 8811 	msr	BASEPRI, r3
 800b8ac:	f3bf 8f6f 	isb	sy
 800b8b0:	f3bf 8f4f 	dsb	sy
 800b8b4:	b662      	cpsie	i
 800b8b6:	607b      	str	r3, [r7, #4]
}
 800b8b8:	bf00      	nop
 800b8ba:	e7fe      	b.n	800b8ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b8bc:	4b0f      	ldr	r3, [pc, #60]	; (800b8fc <vPortValidateInterruptPriority+0x80>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b8c4:	4b0e      	ldr	r3, [pc, #56]	; (800b900 <vPortValidateInterruptPriority+0x84>)
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	429a      	cmp	r2, r3
 800b8ca:	d90c      	bls.n	800b8e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800b8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d0:	b672      	cpsid	i
 800b8d2:	f383 8811 	msr	BASEPRI, r3
 800b8d6:	f3bf 8f6f 	isb	sy
 800b8da:	f3bf 8f4f 	dsb	sy
 800b8de:	b662      	cpsie	i
 800b8e0:	603b      	str	r3, [r7, #0]
}
 800b8e2:	bf00      	nop
 800b8e4:	e7fe      	b.n	800b8e4 <vPortValidateInterruptPriority+0x68>
	}
 800b8e6:	bf00      	nop
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f0:	4770      	bx	lr
 800b8f2:	bf00      	nop
 800b8f4:	e000e3f0 	.word	0xe000e3f0
 800b8f8:	20000978 	.word	0x20000978
 800b8fc:	e000ed0c 	.word	0xe000ed0c
 800b900:	2000097c 	.word	0x2000097c

0800b904 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b90c:	2300      	movs	r3, #0
 800b90e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b910:	f7fe fc42 	bl	800a198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b914:	4b5b      	ldr	r3, [pc, #364]	; (800ba84 <pvPortMalloc+0x180>)
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b91c:	f000 f91a 	bl	800bb54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b920:	4b59      	ldr	r3, [pc, #356]	; (800ba88 <pvPortMalloc+0x184>)
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4013      	ands	r3, r2
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f040 8092 	bne.w	800ba52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01f      	beq.n	800b974 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800b934:	2208      	movs	r2, #8
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	4413      	add	r3, r2
 800b93a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b00      	cmp	r3, #0
 800b944:	d016      	beq.n	800b974 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f023 0307 	bic.w	r3, r3, #7
 800b94c:	3308      	adds	r3, #8
 800b94e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	f003 0307 	and.w	r3, r3, #7
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00c      	beq.n	800b974 <pvPortMalloc+0x70>
	__asm volatile
 800b95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95e:	b672      	cpsid	i
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	b662      	cpsie	i
 800b96e:	617b      	str	r3, [r7, #20]
}
 800b970:	bf00      	nop
 800b972:	e7fe      	b.n	800b972 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d06b      	beq.n	800ba52 <pvPortMalloc+0x14e>
 800b97a:	4b44      	ldr	r3, [pc, #272]	; (800ba8c <pvPortMalloc+0x188>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	687a      	ldr	r2, [r7, #4]
 800b980:	429a      	cmp	r2, r3
 800b982:	d866      	bhi.n	800ba52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b984:	4b42      	ldr	r3, [pc, #264]	; (800ba90 <pvPortMalloc+0x18c>)
 800b986:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b988:	4b41      	ldr	r3, [pc, #260]	; (800ba90 <pvPortMalloc+0x18c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b98e:	e004      	b.n	800b99a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800b990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b992:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	429a      	cmp	r2, r3
 800b9a2:	d903      	bls.n	800b9ac <pvPortMalloc+0xa8>
 800b9a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1f1      	bne.n	800b990 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9ac:	4b35      	ldr	r3, [pc, #212]	; (800ba84 <pvPortMalloc+0x180>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d04d      	beq.n	800ba52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9b6:	6a3b      	ldr	r3, [r7, #32]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2208      	movs	r2, #8
 800b9bc:	4413      	add	r3, r2
 800b9be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	6a3b      	ldr	r3, [r7, #32]
 800b9c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	685a      	ldr	r2, [r3, #4]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	1ad2      	subs	r2, r2, r3
 800b9d0:	2308      	movs	r3, #8
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d921      	bls.n	800ba1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	4413      	add	r3, r2
 800b9de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00c      	beq.n	800ba04 <pvPortMalloc+0x100>
	__asm volatile
 800b9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ee:	b672      	cpsid	i
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	b662      	cpsie	i
 800b9fe:	613b      	str	r3, [r7, #16]
}
 800ba00:	bf00      	nop
 800ba02:	e7fe      	b.n	800ba02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba06:	685a      	ldr	r2, [r3, #4]
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	1ad2      	subs	r2, r2, r3
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba16:	69b8      	ldr	r0, [r7, #24]
 800ba18:	f000 f8fe 	bl	800bc18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba1c:	4b1b      	ldr	r3, [pc, #108]	; (800ba8c <pvPortMalloc+0x188>)
 800ba1e:	681a      	ldr	r2, [r3, #0]
 800ba20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	1ad3      	subs	r3, r2, r3
 800ba26:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <pvPortMalloc+0x188>)
 800ba28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba2a:	4b18      	ldr	r3, [pc, #96]	; (800ba8c <pvPortMalloc+0x188>)
 800ba2c:	681a      	ldr	r2, [r3, #0]
 800ba2e:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <pvPortMalloc+0x190>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	429a      	cmp	r2, r3
 800ba34:	d203      	bcs.n	800ba3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba36:	4b15      	ldr	r3, [pc, #84]	; (800ba8c <pvPortMalloc+0x188>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a16      	ldr	r2, [pc, #88]	; (800ba94 <pvPortMalloc+0x190>)
 800ba3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba40:	685a      	ldr	r2, [r3, #4]
 800ba42:	4b11      	ldr	r3, [pc, #68]	; (800ba88 <pvPortMalloc+0x184>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	431a      	orrs	r2, r3
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba52:	f7fe fbaf 	bl	800a1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	f003 0307 	and.w	r3, r3, #7
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d00c      	beq.n	800ba7a <pvPortMalloc+0x176>
	__asm volatile
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	b672      	cpsid	i
 800ba66:	f383 8811 	msr	BASEPRI, r3
 800ba6a:	f3bf 8f6f 	isb	sy
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	b662      	cpsie	i
 800ba74:	60fb      	str	r3, [r7, #12]
}
 800ba76:	bf00      	nop
 800ba78:	e7fe      	b.n	800ba78 <pvPortMalloc+0x174>
	return pvReturn;
 800ba7a:	69fb      	ldr	r3, [r7, #28]
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3728      	adds	r7, #40	; 0x28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd80      	pop	{r7, pc}
 800ba84:	20004588 	.word	0x20004588
 800ba88:	20004594 	.word	0x20004594
 800ba8c:	2000458c 	.word	0x2000458c
 800ba90:	20004580 	.word	0x20004580
 800ba94:	20004590 	.word	0x20004590

0800ba98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d04c      	beq.n	800bb44 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800baaa:	2308      	movs	r3, #8
 800baac:	425b      	negs	r3, r3
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	4413      	add	r3, r2
 800bab2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bab8:	693b      	ldr	r3, [r7, #16]
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	4b23      	ldr	r3, [pc, #140]	; (800bb4c <vPortFree+0xb4>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4013      	ands	r3, r2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d10c      	bne.n	800bae0 <vPortFree+0x48>
	__asm volatile
 800bac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baca:	b672      	cpsid	i
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	b662      	cpsie	i
 800bada:	60fb      	str	r3, [r7, #12]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00c      	beq.n	800bb02 <vPortFree+0x6a>
	__asm volatile
 800bae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baec:	b672      	cpsid	i
 800baee:	f383 8811 	msr	BASEPRI, r3
 800baf2:	f3bf 8f6f 	isb	sy
 800baf6:	f3bf 8f4f 	dsb	sy
 800bafa:	b662      	cpsie	i
 800bafc:	60bb      	str	r3, [r7, #8]
}
 800bafe:	bf00      	nop
 800bb00:	e7fe      	b.n	800bb00 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	4b11      	ldr	r3, [pc, #68]	; (800bb4c <vPortFree+0xb4>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4013      	ands	r3, r2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d019      	beq.n	800bb44 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb10:	693b      	ldr	r3, [r7, #16]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d115      	bne.n	800bb44 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	685a      	ldr	r2, [r3, #4]
 800bb1c:	4b0b      	ldr	r3, [pc, #44]	; (800bb4c <vPortFree+0xb4>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	43db      	mvns	r3, r3
 800bb22:	401a      	ands	r2, r3
 800bb24:	693b      	ldr	r3, [r7, #16]
 800bb26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb28:	f7fe fb36 	bl	800a198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	685a      	ldr	r2, [r3, #4]
 800bb30:	4b07      	ldr	r3, [pc, #28]	; (800bb50 <vPortFree+0xb8>)
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	4413      	add	r3, r2
 800bb36:	4a06      	ldr	r2, [pc, #24]	; (800bb50 <vPortFree+0xb8>)
 800bb38:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb3a:	6938      	ldr	r0, [r7, #16]
 800bb3c:	f000 f86c 	bl	800bc18 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bb40:	f7fe fb38 	bl	800a1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb44:	bf00      	nop
 800bb46:	3718      	adds	r7, #24
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}
 800bb4c:	20004594 	.word	0x20004594
 800bb50:	2000458c 	.word	0x2000458c

0800bb54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bb5a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bb5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bb60:	4b27      	ldr	r3, [pc, #156]	; (800bc00 <prvHeapInit+0xac>)
 800bb62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	f003 0307 	and.w	r3, r3, #7
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3307      	adds	r3, #7
 800bb72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f023 0307 	bic.w	r3, r3, #7
 800bb7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	1ad3      	subs	r3, r2, r3
 800bb82:	4a1f      	ldr	r2, [pc, #124]	; (800bc00 <prvHeapInit+0xac>)
 800bb84:	4413      	add	r3, r2
 800bb86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bb8c:	4a1d      	ldr	r2, [pc, #116]	; (800bc04 <prvHeapInit+0xb0>)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bb92:	4b1c      	ldr	r3, [pc, #112]	; (800bc04 <prvHeapInit+0xb0>)
 800bb94:	2200      	movs	r2, #0
 800bb96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68ba      	ldr	r2, [r7, #8]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bba0:	2208      	movs	r2, #8
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	1a9b      	subs	r3, r3, r2
 800bba6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	f023 0307 	bic.w	r3, r3, #7
 800bbae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	4a15      	ldr	r2, [pc, #84]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbb6:	4b14      	ldr	r3, [pc, #80]	; (800bc08 <prvHeapInit+0xb4>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	2200      	movs	r2, #0
 800bbbc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bbbe:	4b12      	ldr	r3, [pc, #72]	; (800bc08 <prvHeapInit+0xb4>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	68fa      	ldr	r2, [r7, #12]
 800bbce:	1ad2      	subs	r2, r2, r3
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bbd4:	4b0c      	ldr	r3, [pc, #48]	; (800bc08 <prvHeapInit+0xb4>)
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbdc:	683b      	ldr	r3, [r7, #0]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	4a0a      	ldr	r2, [pc, #40]	; (800bc0c <prvHeapInit+0xb8>)
 800bbe2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	4a09      	ldr	r2, [pc, #36]	; (800bc10 <prvHeapInit+0xbc>)
 800bbea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bbec:	4b09      	ldr	r3, [pc, #36]	; (800bc14 <prvHeapInit+0xc0>)
 800bbee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bbf2:	601a      	str	r2, [r3, #0]
}
 800bbf4:	bf00      	nop
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr
 800bc00:	20000980 	.word	0x20000980
 800bc04:	20004580 	.word	0x20004580
 800bc08:	20004588 	.word	0x20004588
 800bc0c:	20004590 	.word	0x20004590
 800bc10:	2000458c 	.word	0x2000458c
 800bc14:	20004594 	.word	0x20004594

0800bc18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <prvInsertBlockIntoFreeList+0xac>)
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <prvInsertBlockIntoFreeList+0x14>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d8f7      	bhi.n	800bc26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	687a      	ldr	r2, [r7, #4]
 800bc44:	429a      	cmp	r2, r3
 800bc46:	d108      	bne.n	800bc5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	685a      	ldr	r2, [r3, #4]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	441a      	add	r2, r3
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	685b      	ldr	r3, [r3, #4]
 800bc62:	68ba      	ldr	r2, [r7, #8]
 800bc64:	441a      	add	r2, r3
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	429a      	cmp	r2, r3
 800bc6c:	d118      	bne.n	800bca0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d00d      	beq.n	800bc96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	685a      	ldr	r2, [r3, #4]
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	685b      	ldr	r3, [r3, #4]
 800bc84:	441a      	add	r2, r3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	681a      	ldr	r2, [r3, #0]
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
 800bc94:	e008      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bc96:	4b0c      	ldr	r3, [pc, #48]	; (800bcc8 <prvInsertBlockIntoFreeList+0xb0>)
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	601a      	str	r2, [r3, #0]
 800bc9e:	e003      	b.n	800bca8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d002      	beq.n	800bcb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcb6:	bf00      	nop
 800bcb8:	3714      	adds	r7, #20
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc0:	4770      	bx	lr
 800bcc2:	bf00      	nop
 800bcc4:	20004580 	.word	0x20004580
 800bcc8:	20004588 	.word	0x20004588

0800bccc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800bcd6:	f007 fa7b 	bl	80131d0 <sys_timeouts_sleeptime>
 800bcda:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bce2:	d10b      	bne.n	800bcfc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800bce4:	4813      	ldr	r0, [pc, #76]	; (800bd34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bce6:	f009 ffea 	bl	8015cbe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800bcea:	2200      	movs	r2, #0
 800bcec:	6839      	ldr	r1, [r7, #0]
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f009 ff5c 	bl	8015bac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bcf4:	480f      	ldr	r0, [pc, #60]	; (800bd34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bcf6:	f009 ffd3 	bl	8015ca0 <sys_mutex_lock>
    return;
 800bcfa:	e018      	b.n	800bd2e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d102      	bne.n	800bd08 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800bd02:	f007 fa2b 	bl	801315c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bd06:	e7e6      	b.n	800bcd6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800bd08:	480a      	ldr	r0, [pc, #40]	; (800bd34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd0a:	f009 ffd8 	bl	8015cbe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	6839      	ldr	r1, [r7, #0]
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f009 ff4a 	bl	8015bac <sys_arch_mbox_fetch>
 800bd18:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800bd1a:	4806      	ldr	r0, [pc, #24]	; (800bd34 <tcpip_timeouts_mbox_fetch+0x68>)
 800bd1c:	f009 ffc0 	bl	8015ca0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd26:	d102      	bne.n	800bd2e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800bd28:	f007 fa18 	bl	801315c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800bd2c:	e7d3      	b.n	800bcd6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800bd2e:	3710      	adds	r7, #16
 800bd30:	46bd      	mov	sp, r7
 800bd32:	bd80      	pop	{r7, pc}
 800bd34:	20009218 	.word	0x20009218

0800bd38 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800bd40:	4810      	ldr	r0, [pc, #64]	; (800bd84 <tcpip_thread+0x4c>)
 800bd42:	f009 ffad 	bl	8015ca0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800bd46:	4b10      	ldr	r3, [pc, #64]	; (800bd88 <tcpip_thread+0x50>)
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d005      	beq.n	800bd5a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800bd4e:	4b0e      	ldr	r3, [pc, #56]	; (800bd88 <tcpip_thread+0x50>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a0e      	ldr	r2, [pc, #56]	; (800bd8c <tcpip_thread+0x54>)
 800bd54:	6812      	ldr	r2, [r2, #0]
 800bd56:	4610      	mov	r0, r2
 800bd58:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bd5a:	f107 030c 	add.w	r3, r7, #12
 800bd5e:	4619      	mov	r1, r3
 800bd60:	480b      	ldr	r0, [pc, #44]	; (800bd90 <tcpip_thread+0x58>)
 800bd62:	f7ff ffb3 	bl	800bccc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d106      	bne.n	800bd7a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd6c:	4b09      	ldr	r3, [pc, #36]	; (800bd94 <tcpip_thread+0x5c>)
 800bd6e:	2291      	movs	r2, #145	; 0x91
 800bd70:	4909      	ldr	r1, [pc, #36]	; (800bd98 <tcpip_thread+0x60>)
 800bd72:	480a      	ldr	r0, [pc, #40]	; (800bd9c <tcpip_thread+0x64>)
 800bd74:	f00a f83c 	bl	8015df0 <iprintf>
      continue;
 800bd78:	e003      	b.n	800bd82 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f000 f80f 	bl	800bda0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800bd82:	e7ea      	b.n	800bd5a <tcpip_thread+0x22>
 800bd84:	20009218 	.word	0x20009218
 800bd88:	20004598 	.word	0x20004598
 800bd8c:	2000459c 	.word	0x2000459c
 800bd90:	200045a0 	.word	0x200045a0
 800bd94:	08016f6c 	.word	0x08016f6c
 800bd98:	08016f9c 	.word	0x08016f9c
 800bd9c:	08016fbc 	.word	0x08016fbc

0800bda0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b082      	sub	sp, #8
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d026      	beq.n	800bdfe <tcpip_thread_handle_msg+0x5e>
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	dc2b      	bgt.n	800be0c <tcpip_thread_handle_msg+0x6c>
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <tcpip_thread_handle_msg+0x1e>
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d015      	beq.n	800bde8 <tcpip_thread_handle_msg+0x48>
 800bdbc:	e026      	b.n	800be0c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	68db      	ldr	r3, [r3, #12]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	6850      	ldr	r0, [r2, #4]
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	6892      	ldr	r2, [r2, #8]
 800bdca:	4611      	mov	r1, r2
 800bdcc:	4798      	blx	r3
 800bdce:	4603      	mov	r3, r0
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d004      	beq.n	800bdde <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	685b      	ldr	r3, [r3, #4]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f001 fcc5 	bl	800d768 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	2009      	movs	r0, #9
 800bde2:	f000 fe1d 	bl	800ca20 <memp_free>
      break;
 800bde6:	e018      	b.n	800be1a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	687a      	ldr	r2, [r7, #4]
 800bdee:	6892      	ldr	r2, [r2, #8]
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bdf4:	6879      	ldr	r1, [r7, #4]
 800bdf6:	2008      	movs	r0, #8
 800bdf8:	f000 fe12 	bl	800ca20 <memp_free>
      break;
 800bdfc:	e00d      	b.n	800be1a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	6892      	ldr	r2, [r2, #8]
 800be06:	4610      	mov	r0, r2
 800be08:	4798      	blx	r3
      break;
 800be0a:	e006      	b.n	800be1a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800be0c:	4b05      	ldr	r3, [pc, #20]	; (800be24 <tcpip_thread_handle_msg+0x84>)
 800be0e:	22cf      	movs	r2, #207	; 0xcf
 800be10:	4905      	ldr	r1, [pc, #20]	; (800be28 <tcpip_thread_handle_msg+0x88>)
 800be12:	4806      	ldr	r0, [pc, #24]	; (800be2c <tcpip_thread_handle_msg+0x8c>)
 800be14:	f009 ffec 	bl	8015df0 <iprintf>
      break;
 800be18:	bf00      	nop
  }
}
 800be1a:	bf00      	nop
 800be1c:	3708      	adds	r7, #8
 800be1e:	46bd      	mov	sp, r7
 800be20:	bd80      	pop	{r7, pc}
 800be22:	bf00      	nop
 800be24:	08016f6c 	.word	0x08016f6c
 800be28:	08016f9c 	.word	0x08016f9c
 800be2c:	08016fbc 	.word	0x08016fbc

0800be30 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af00      	add	r7, sp, #0
 800be36:	60f8      	str	r0, [r7, #12]
 800be38:	60b9      	str	r1, [r7, #8]
 800be3a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800be3c:	481a      	ldr	r0, [pc, #104]	; (800bea8 <tcpip_inpkt+0x78>)
 800be3e:	f009 fef4 	bl	8015c2a <sys_mbox_valid>
 800be42:	4603      	mov	r3, r0
 800be44:	2b00      	cmp	r3, #0
 800be46:	d105      	bne.n	800be54 <tcpip_inpkt+0x24>
 800be48:	4b18      	ldr	r3, [pc, #96]	; (800beac <tcpip_inpkt+0x7c>)
 800be4a:	22fc      	movs	r2, #252	; 0xfc
 800be4c:	4918      	ldr	r1, [pc, #96]	; (800beb0 <tcpip_inpkt+0x80>)
 800be4e:	4819      	ldr	r0, [pc, #100]	; (800beb4 <tcpip_inpkt+0x84>)
 800be50:	f009 ffce 	bl	8015df0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800be54:	2009      	movs	r0, #9
 800be56:	f000 fd91 	bl	800c97c <memp_malloc>
 800be5a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800be62:	f04f 33ff 	mov.w	r3, #4294967295
 800be66:	e01a      	b.n	800be9e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	2200      	movs	r2, #0
 800be6c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	68fa      	ldr	r2, [r7, #12]
 800be72:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800be7a:	697b      	ldr	r3, [r7, #20]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800be80:	6979      	ldr	r1, [r7, #20]
 800be82:	4809      	ldr	r0, [pc, #36]	; (800bea8 <tcpip_inpkt+0x78>)
 800be84:	f009 fe78 	bl	8015b78 <sys_mbox_trypost>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d006      	beq.n	800be9c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800be8e:	6979      	ldr	r1, [r7, #20]
 800be90:	2009      	movs	r0, #9
 800be92:	f000 fdc5 	bl	800ca20 <memp_free>
    return ERR_MEM;
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	e000      	b.n	800be9e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800be9c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3718      	adds	r7, #24
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	200045a0 	.word	0x200045a0
 800beac:	08016f6c 	.word	0x08016f6c
 800beb0:	08016fe4 	.word	0x08016fe4
 800beb4:	08016fbc 	.word	0x08016fbc

0800beb8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bec8:	f003 0318 	and.w	r3, r3, #24
 800becc:	2b00      	cmp	r3, #0
 800bece:	d006      	beq.n	800bede <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800bed0:	4a08      	ldr	r2, [pc, #32]	; (800bef4 <tcpip_input+0x3c>)
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f7ff ffab 	bl	800be30 <tcpip_inpkt>
 800beda:	4603      	mov	r3, r0
 800bedc:	e005      	b.n	800beea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800bede:	4a06      	ldr	r2, [pc, #24]	; (800bef8 <tcpip_input+0x40>)
 800bee0:	6839      	ldr	r1, [r7, #0]
 800bee2:	6878      	ldr	r0, [r7, #4]
 800bee4:	f7ff ffa4 	bl	800be30 <tcpip_inpkt>
 800bee8:	4603      	mov	r3, r0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	08015989 	.word	0x08015989
 800bef8:	0801489d 	.word	0x0801489d

0800befc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	b084      	sub	sp, #16
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
 800bf04:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800bf06:	4819      	ldr	r0, [pc, #100]	; (800bf6c <tcpip_try_callback+0x70>)
 800bf08:	f009 fe8f 	bl	8015c2a <sys_mbox_valid>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <tcpip_try_callback+0x24>
 800bf12:	4b17      	ldr	r3, [pc, #92]	; (800bf70 <tcpip_try_callback+0x74>)
 800bf14:	f240 125d 	movw	r2, #349	; 0x15d
 800bf18:	4916      	ldr	r1, [pc, #88]	; (800bf74 <tcpip_try_callback+0x78>)
 800bf1a:	4817      	ldr	r0, [pc, #92]	; (800bf78 <tcpip_try_callback+0x7c>)
 800bf1c:	f009 ff68 	bl	8015df0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bf20:	2008      	movs	r0, #8
 800bf22:	f000 fd2b 	bl	800c97c <memp_malloc>
 800bf26:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d102      	bne.n	800bf34 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800bf2e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf32:	e017      	b.n	800bf64 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2201      	movs	r2, #1
 800bf38:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800bf46:	68f9      	ldr	r1, [r7, #12]
 800bf48:	4808      	ldr	r0, [pc, #32]	; (800bf6c <tcpip_try_callback+0x70>)
 800bf4a:	f009 fe15 	bl	8015b78 <sys_mbox_trypost>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d006      	beq.n	800bf62 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800bf54:	68f9      	ldr	r1, [r7, #12]
 800bf56:	2008      	movs	r0, #8
 800bf58:	f000 fd62 	bl	800ca20 <memp_free>
    return ERR_MEM;
 800bf5c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf60:	e000      	b.n	800bf64 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800bf62:	2300      	movs	r3, #0
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3710      	adds	r7, #16
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	200045a0 	.word	0x200045a0
 800bf70:	08016f6c 	.word	0x08016f6c
 800bf74:	08016fe4 	.word	0x08016fe4
 800bf78:	08016fbc 	.word	0x08016fbc

0800bf7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af02      	add	r7, sp, #8
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bf86:	f000 f871 	bl	800c06c <lwip_init>

  tcpip_init_done = initfunc;
 800bf8a:	4a17      	ldr	r2, [pc, #92]	; (800bfe8 <tcpip_init+0x6c>)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bf90:	4a16      	ldr	r2, [pc, #88]	; (800bfec <tcpip_init+0x70>)
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bf96:	2106      	movs	r1, #6
 800bf98:	4815      	ldr	r0, [pc, #84]	; (800bff0 <tcpip_init+0x74>)
 800bf9a:	f009 fdcb 	bl	8015b34 <sys_mbox_new>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d006      	beq.n	800bfb2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bfa4:	4b13      	ldr	r3, [pc, #76]	; (800bff4 <tcpip_init+0x78>)
 800bfa6:	f240 2261 	movw	r2, #609	; 0x261
 800bfaa:	4913      	ldr	r1, [pc, #76]	; (800bff8 <tcpip_init+0x7c>)
 800bfac:	4813      	ldr	r0, [pc, #76]	; (800bffc <tcpip_init+0x80>)
 800bfae:	f009 ff1f 	bl	8015df0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bfb2:	4813      	ldr	r0, [pc, #76]	; (800c000 <tcpip_init+0x84>)
 800bfb4:	f009 fe58 	bl	8015c68 <sys_mutex_new>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d006      	beq.n	800bfcc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bfbe:	4b0d      	ldr	r3, [pc, #52]	; (800bff4 <tcpip_init+0x78>)
 800bfc0:	f240 2265 	movw	r2, #613	; 0x265
 800bfc4:	490f      	ldr	r1, [pc, #60]	; (800c004 <tcpip_init+0x88>)
 800bfc6:	480d      	ldr	r0, [pc, #52]	; (800bffc <tcpip_init+0x80>)
 800bfc8:	f009 ff12 	bl	8015df0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	490c      	ldr	r1, [pc, #48]	; (800c008 <tcpip_init+0x8c>)
 800bfd8:	480c      	ldr	r0, [pc, #48]	; (800c00c <tcpip_init+0x90>)
 800bfda:	f009 fe7d 	bl	8015cd8 <sys_thread_new>
}
 800bfde:	bf00      	nop
 800bfe0:	3708      	adds	r7, #8
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	20004598 	.word	0x20004598
 800bfec:	2000459c 	.word	0x2000459c
 800bff0:	200045a0 	.word	0x200045a0
 800bff4:	08016f6c 	.word	0x08016f6c
 800bff8:	08016ff4 	.word	0x08016ff4
 800bffc:	08016fbc 	.word	0x08016fbc
 800c000:	20009218 	.word	0x20009218
 800c004:	08017018 	.word	0x08017018
 800c008:	0800bd39 	.word	0x0800bd39
 800c00c:	0801703c 	.word	0x0801703c

0800c010 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
 800c016:	4603      	mov	r3, r0
 800c018:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800c01a:	88fb      	ldrh	r3, [r7, #6]
 800c01c:	021b      	lsls	r3, r3, #8
 800c01e:	b21a      	sxth	r2, r3
 800c020:	88fb      	ldrh	r3, [r7, #6]
 800c022:	0a1b      	lsrs	r3, r3, #8
 800c024:	b29b      	uxth	r3, r3
 800c026:	b21b      	sxth	r3, r3
 800c028:	4313      	orrs	r3, r2
 800c02a:	b21b      	sxth	r3, r3
 800c02c:	b29b      	uxth	r3, r3
}
 800c02e:	4618      	mov	r0, r3
 800c030:	370c      	adds	r7, #12
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b083      	sub	sp, #12
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	061a      	lsls	r2, r3, #24
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	021b      	lsls	r3, r3, #8
 800c04a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c04e:	431a      	orrs	r2, r3
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c058:	431a      	orrs	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	0e1b      	lsrs	r3, r3, #24
 800c05e:	4313      	orrs	r3, r2
}
 800c060:	4618      	mov	r0, r3
 800c062:	370c      	adds	r7, #12
 800c064:	46bd      	mov	sp, r7
 800c066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06a:	4770      	bx	lr

0800c06c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b082      	sub	sp, #8
 800c070:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c072:	2300      	movs	r3, #0
 800c074:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c076:	f009 fde9 	bl	8015c4c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c07a:	f000 f8d5 	bl	800c228 <mem_init>
  memp_init();
 800c07e:	f000 fc31 	bl	800c8e4 <memp_init>
  pbuf_init();
  netif_init();
 800c082:	f000 fcf7 	bl	800ca74 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c086:	f007 f8db 	bl	8013240 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c08a:	f001 fe07 	bl	800dc9c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800c08e:	f007 f81d 	bl	80130cc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c092:	bf00      	nop
 800c094:	3708      	adds	r7, #8
 800c096:	46bd      	mov	sp, r7
 800c098:	bd80      	pop	{r7, pc}
	...

0800c09c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b083      	sub	sp, #12
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	4603      	mov	r3, r0
 800c0a4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800c0a6:	4b05      	ldr	r3, [pc, #20]	; (800c0bc <ptr_to_mem+0x20>)
 800c0a8:	681a      	ldr	r2, [r3, #0]
 800c0aa:	88fb      	ldrh	r3, [r7, #6]
 800c0ac:	4413      	add	r3, r2
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	200045a4 	.word	0x200045a4

0800c0c0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800c0c8:	4b05      	ldr	r3, [pc, #20]	; (800c0e0 <mem_to_ptr+0x20>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	1ad3      	subs	r3, r2, r3
 800c0d0:	b29b      	uxth	r3, r3
}
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	370c      	adds	r7, #12
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0dc:	4770      	bx	lr
 800c0de:	bf00      	nop
 800c0e0:	200045a4 	.word	0x200045a4

0800c0e4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c0e4:	b590      	push	{r4, r7, lr}
 800c0e6:	b085      	sub	sp, #20
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c0ec:	4b45      	ldr	r3, [pc, #276]	; (800c204 <plug_holes+0x120>)
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	429a      	cmp	r2, r3
 800c0f4:	d206      	bcs.n	800c104 <plug_holes+0x20>
 800c0f6:	4b44      	ldr	r3, [pc, #272]	; (800c208 <plug_holes+0x124>)
 800c0f8:	f240 12df 	movw	r2, #479	; 0x1df
 800c0fc:	4943      	ldr	r1, [pc, #268]	; (800c20c <plug_holes+0x128>)
 800c0fe:	4844      	ldr	r0, [pc, #272]	; (800c210 <plug_holes+0x12c>)
 800c100:	f009 fe76 	bl	8015df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c104:	4b43      	ldr	r3, [pc, #268]	; (800c214 <plug_holes+0x130>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d306      	bcc.n	800c11c <plug_holes+0x38>
 800c10e:	4b3e      	ldr	r3, [pc, #248]	; (800c208 <plug_holes+0x124>)
 800c110:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800c114:	4940      	ldr	r1, [pc, #256]	; (800c218 <plug_holes+0x134>)
 800c116:	483e      	ldr	r0, [pc, #248]	; (800c210 <plug_holes+0x12c>)
 800c118:	f009 fe6a 	bl	8015df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	791b      	ldrb	r3, [r3, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d006      	beq.n	800c132 <plug_holes+0x4e>
 800c124:	4b38      	ldr	r3, [pc, #224]	; (800c208 <plug_holes+0x124>)
 800c126:	f240 12e1 	movw	r2, #481	; 0x1e1
 800c12a:	493c      	ldr	r1, [pc, #240]	; (800c21c <plug_holes+0x138>)
 800c12c:	4838      	ldr	r0, [pc, #224]	; (800c210 <plug_holes+0x12c>)
 800c12e:	f009 fe5f 	bl	8015df0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	881b      	ldrh	r3, [r3, #0]
 800c136:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c13a:	d906      	bls.n	800c14a <plug_holes+0x66>
 800c13c:	4b32      	ldr	r3, [pc, #200]	; (800c208 <plug_holes+0x124>)
 800c13e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800c142:	4937      	ldr	r1, [pc, #220]	; (800c220 <plug_holes+0x13c>)
 800c144:	4832      	ldr	r0, [pc, #200]	; (800c210 <plug_holes+0x12c>)
 800c146:	f009 fe53 	bl	8015df0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	881b      	ldrh	r3, [r3, #0]
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff ffa4 	bl	800c09c <ptr_to_mem>
 800c154:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c156:	687a      	ldr	r2, [r7, #4]
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d024      	beq.n	800c1a8 <plug_holes+0xc4>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	791b      	ldrb	r3, [r3, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d120      	bne.n	800c1a8 <plug_holes+0xc4>
 800c166:	4b2b      	ldr	r3, [pc, #172]	; (800c214 <plug_holes+0x130>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	68fa      	ldr	r2, [r7, #12]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d01b      	beq.n	800c1a8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c170:	4b2c      	ldr	r3, [pc, #176]	; (800c224 <plug_holes+0x140>)
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	429a      	cmp	r2, r3
 800c178:	d102      	bne.n	800c180 <plug_holes+0x9c>
      lfree = mem;
 800c17a:	4a2a      	ldr	r2, [pc, #168]	; (800c224 <plug_holes+0x140>)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	881a      	ldrh	r2, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c190:	d00a      	beq.n	800c1a8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	4618      	mov	r0, r3
 800c198:	f7ff ff80 	bl	800c09c <ptr_to_mem>
 800c19c:	4604      	mov	r4, r0
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7ff ff8e 	bl	800c0c0 <mem_to_ptr>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	885b      	ldrh	r3, [r3, #2]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff ff75 	bl	800c09c <ptr_to_mem>
 800c1b2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c1b4:	68ba      	ldr	r2, [r7, #8]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	429a      	cmp	r2, r3
 800c1ba:	d01f      	beq.n	800c1fc <plug_holes+0x118>
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	791b      	ldrb	r3, [r3, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d11b      	bne.n	800c1fc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c1c4:	4b17      	ldr	r3, [pc, #92]	; (800c224 <plug_holes+0x140>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	687a      	ldr	r2, [r7, #4]
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d102      	bne.n	800c1d4 <plug_holes+0xf0>
      lfree = pmem;
 800c1ce:	4a15      	ldr	r2, [pc, #84]	; (800c224 <plug_holes+0x140>)
 800c1d0:	68bb      	ldr	r3, [r7, #8]
 800c1d2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	881a      	ldrh	r2, [r3, #0]
 800c1d8:	68bb      	ldr	r3, [r7, #8]
 800c1da:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c1e4:	d00a      	beq.n	800c1fc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	881b      	ldrh	r3, [r3, #0]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7ff ff56 	bl	800c09c <ptr_to_mem>
 800c1f0:	4604      	mov	r4, r0
 800c1f2:	68b8      	ldr	r0, [r7, #8]
 800c1f4:	f7ff ff64 	bl	800c0c0 <mem_to_ptr>
 800c1f8:	4603      	mov	r3, r0
 800c1fa:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800c1fc:	bf00      	nop
 800c1fe:	3714      	adds	r7, #20
 800c200:	46bd      	mov	sp, r7
 800c202:	bd90      	pop	{r4, r7, pc}
 800c204:	200045a4 	.word	0x200045a4
 800c208:	0801704c 	.word	0x0801704c
 800c20c:	0801707c 	.word	0x0801707c
 800c210:	08017094 	.word	0x08017094
 800c214:	200045a8 	.word	0x200045a8
 800c218:	080170bc 	.word	0x080170bc
 800c21c:	080170d8 	.word	0x080170d8
 800c220:	080170f4 	.word	0x080170f4
 800c224:	200045b0 	.word	0x200045b0

0800c228 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b082      	sub	sp, #8
 800c22c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c22e:	4b1f      	ldr	r3, [pc, #124]	; (800c2ac <mem_init+0x84>)
 800c230:	3303      	adds	r3, #3
 800c232:	f023 0303 	bic.w	r3, r3, #3
 800c236:	461a      	mov	r2, r3
 800c238:	4b1d      	ldr	r3, [pc, #116]	; (800c2b0 <mem_init+0x88>)
 800c23a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c23c:	4b1c      	ldr	r3, [pc, #112]	; (800c2b0 <mem_init+0x88>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c248:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800c256:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800c25a:	f7ff ff1f 	bl	800c09c <ptr_to_mem>
 800c25e:	4603      	mov	r3, r0
 800c260:	4a14      	ldr	r2, [pc, #80]	; (800c2b4 <mem_init+0x8c>)
 800c262:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c264:	4b13      	ldr	r3, [pc, #76]	; (800c2b4 <mem_init+0x8c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	2201      	movs	r2, #1
 800c26a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c26c:	4b11      	ldr	r3, [pc, #68]	; (800c2b4 <mem_init+0x8c>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c274:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c276:	4b0f      	ldr	r3, [pc, #60]	; (800c2b4 <mem_init+0x8c>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c27e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <mem_init+0x88>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4a0c      	ldr	r2, [pc, #48]	; (800c2b8 <mem_init+0x90>)
 800c286:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c288:	480c      	ldr	r0, [pc, #48]	; (800c2bc <mem_init+0x94>)
 800c28a:	f009 fced 	bl	8015c68 <sys_mutex_new>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d006      	beq.n	800c2a2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c294:	4b0a      	ldr	r3, [pc, #40]	; (800c2c0 <mem_init+0x98>)
 800c296:	f240 221f 	movw	r2, #543	; 0x21f
 800c29a:	490a      	ldr	r1, [pc, #40]	; (800c2c4 <mem_init+0x9c>)
 800c29c:	480a      	ldr	r0, [pc, #40]	; (800c2c8 <mem_init+0xa0>)
 800c29e:	f009 fda7 	bl	8015df0 <iprintf>
  }
}
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20009234 	.word	0x20009234
 800c2b0:	200045a4 	.word	0x200045a4
 800c2b4:	200045a8 	.word	0x200045a8
 800c2b8:	200045b0 	.word	0x200045b0
 800c2bc:	200045ac 	.word	0x200045ac
 800c2c0:	0801704c 	.word	0x0801704c
 800c2c4:	08017120 	.word	0x08017120
 800c2c8:	08017094 	.word	0x08017094

0800c2cc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b086      	sub	sp, #24
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f7ff fef3 	bl	800c0c0 <mem_to_ptr>
 800c2da:	4603      	mov	r3, r0
 800c2dc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	881b      	ldrh	r3, [r3, #0]
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7ff feda 	bl	800c09c <ptr_to_mem>
 800c2e8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	885b      	ldrh	r3, [r3, #2]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f7ff fed4 	bl	800c09c <ptr_to_mem>
 800c2f4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c2fe:	d818      	bhi.n	800c332 <mem_link_valid+0x66>
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	885b      	ldrh	r3, [r3, #2]
 800c304:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c308:	d813      	bhi.n	800c332 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800c30e:	8afa      	ldrh	r2, [r7, #22]
 800c310:	429a      	cmp	r2, r3
 800c312:	d004      	beq.n	800c31e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	8afa      	ldrh	r2, [r7, #22]
 800c31a:	429a      	cmp	r2, r3
 800c31c:	d109      	bne.n	800c332 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c31e:	4b08      	ldr	r3, [pc, #32]	; (800c340 <mem_link_valid+0x74>)
 800c320:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800c322:	693a      	ldr	r2, [r7, #16]
 800c324:	429a      	cmp	r2, r3
 800c326:	d006      	beq.n	800c336 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	885b      	ldrh	r3, [r3, #2]
 800c32c:	8afa      	ldrh	r2, [r7, #22]
 800c32e:	429a      	cmp	r2, r3
 800c330:	d001      	beq.n	800c336 <mem_link_valid+0x6a>
    return 0;
 800c332:	2300      	movs	r3, #0
 800c334:	e000      	b.n	800c338 <mem_link_valid+0x6c>
  }
  return 1;
 800c336:	2301      	movs	r3, #1
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3718      	adds	r7, #24
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	200045a8 	.word	0x200045a8

0800c344 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c344:	b580      	push	{r7, lr}
 800c346:	b088      	sub	sp, #32
 800c348:	af00      	add	r7, sp, #0
 800c34a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d070      	beq.n	800c434 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f003 0303 	and.w	r3, r3, #3
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d00d      	beq.n	800c378 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800c35c:	4b37      	ldr	r3, [pc, #220]	; (800c43c <mem_free+0xf8>)
 800c35e:	f240 2273 	movw	r2, #627	; 0x273
 800c362:	4937      	ldr	r1, [pc, #220]	; (800c440 <mem_free+0xfc>)
 800c364:	4837      	ldr	r0, [pc, #220]	; (800c444 <mem_free+0x100>)
 800c366:	f009 fd43 	bl	8015df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c36a:	f009 fcdb 	bl	8015d24 <sys_arch_protect>
 800c36e:	60f8      	str	r0, [r7, #12]
 800c370:	68f8      	ldr	r0, [r7, #12]
 800c372:	f009 fce5 	bl	8015d40 <sys_arch_unprotect>
    return;
 800c376:	e05e      	b.n	800c436 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	3b08      	subs	r3, #8
 800c37c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800c37e:	4b32      	ldr	r3, [pc, #200]	; (800c448 <mem_free+0x104>)
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	69fa      	ldr	r2, [r7, #28]
 800c384:	429a      	cmp	r2, r3
 800c386:	d306      	bcc.n	800c396 <mem_free+0x52>
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f103 020c 	add.w	r2, r3, #12
 800c38e:	4b2f      	ldr	r3, [pc, #188]	; (800c44c <mem_free+0x108>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	429a      	cmp	r2, r3
 800c394:	d90d      	bls.n	800c3b2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800c396:	4b29      	ldr	r3, [pc, #164]	; (800c43c <mem_free+0xf8>)
 800c398:	f240 227f 	movw	r2, #639	; 0x27f
 800c39c:	492c      	ldr	r1, [pc, #176]	; (800c450 <mem_free+0x10c>)
 800c39e:	4829      	ldr	r0, [pc, #164]	; (800c444 <mem_free+0x100>)
 800c3a0:	f009 fd26 	bl	8015df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c3a4:	f009 fcbe 	bl	8015d24 <sys_arch_protect>
 800c3a8:	6138      	str	r0, [r7, #16]
 800c3aa:	6938      	ldr	r0, [r7, #16]
 800c3ac:	f009 fcc8 	bl	8015d40 <sys_arch_unprotect>
    return;
 800c3b0:	e041      	b.n	800c436 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c3b2:	4828      	ldr	r0, [pc, #160]	; (800c454 <mem_free+0x110>)
 800c3b4:	f009 fc74 	bl	8015ca0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	791b      	ldrb	r3, [r3, #4]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d110      	bne.n	800c3e2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800c3c0:	4b1e      	ldr	r3, [pc, #120]	; (800c43c <mem_free+0xf8>)
 800c3c2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800c3c6:	4924      	ldr	r1, [pc, #144]	; (800c458 <mem_free+0x114>)
 800c3c8:	481e      	ldr	r0, [pc, #120]	; (800c444 <mem_free+0x100>)
 800c3ca:	f009 fd11 	bl	8015df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c3ce:	4821      	ldr	r0, [pc, #132]	; (800c454 <mem_free+0x110>)
 800c3d0:	f009 fc75 	bl	8015cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c3d4:	f009 fca6 	bl	8015d24 <sys_arch_protect>
 800c3d8:	6178      	str	r0, [r7, #20]
 800c3da:	6978      	ldr	r0, [r7, #20]
 800c3dc:	f009 fcb0 	bl	8015d40 <sys_arch_unprotect>
    return;
 800c3e0:	e029      	b.n	800c436 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800c3e2:	69f8      	ldr	r0, [r7, #28]
 800c3e4:	f7ff ff72 	bl	800c2cc <mem_link_valid>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d110      	bne.n	800c410 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800c3ee:	4b13      	ldr	r3, [pc, #76]	; (800c43c <mem_free+0xf8>)
 800c3f0:	f240 2295 	movw	r2, #661	; 0x295
 800c3f4:	4919      	ldr	r1, [pc, #100]	; (800c45c <mem_free+0x118>)
 800c3f6:	4813      	ldr	r0, [pc, #76]	; (800c444 <mem_free+0x100>)
 800c3f8:	f009 fcfa 	bl	8015df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800c3fc:	4815      	ldr	r0, [pc, #84]	; (800c454 <mem_free+0x110>)
 800c3fe:	f009 fc5e 	bl	8015cbe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c402:	f009 fc8f 	bl	8015d24 <sys_arch_protect>
 800c406:	61b8      	str	r0, [r7, #24]
 800c408:	69b8      	ldr	r0, [r7, #24]
 800c40a:	f009 fc99 	bl	8015d40 <sys_arch_unprotect>
    return;
 800c40e:	e012      	b.n	800c436 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800c410:	69fb      	ldr	r3, [r7, #28]
 800c412:	2200      	movs	r2, #0
 800c414:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c416:	4b12      	ldr	r3, [pc, #72]	; (800c460 <mem_free+0x11c>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	69fa      	ldr	r2, [r7, #28]
 800c41c:	429a      	cmp	r2, r3
 800c41e:	d202      	bcs.n	800c426 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c420:	4a0f      	ldr	r2, [pc, #60]	; (800c460 <mem_free+0x11c>)
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c426:	69f8      	ldr	r0, [r7, #28]
 800c428:	f7ff fe5c 	bl	800c0e4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c42c:	4809      	ldr	r0, [pc, #36]	; (800c454 <mem_free+0x110>)
 800c42e:	f009 fc46 	bl	8015cbe <sys_mutex_unlock>
 800c432:	e000      	b.n	800c436 <mem_free+0xf2>
    return;
 800c434:	bf00      	nop
}
 800c436:	3720      	adds	r7, #32
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}
 800c43c:	0801704c 	.word	0x0801704c
 800c440:	0801713c 	.word	0x0801713c
 800c444:	08017094 	.word	0x08017094
 800c448:	200045a4 	.word	0x200045a4
 800c44c:	200045a8 	.word	0x200045a8
 800c450:	08017160 	.word	0x08017160
 800c454:	200045ac 	.word	0x200045ac
 800c458:	0801717c 	.word	0x0801717c
 800c45c:	080171a4 	.word	0x080171a4
 800c460:	200045b0 	.word	0x200045b0

0800c464 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800c470:	887b      	ldrh	r3, [r7, #2]
 800c472:	3303      	adds	r3, #3
 800c474:	b29b      	uxth	r3, r3
 800c476:	f023 0303 	bic.w	r3, r3, #3
 800c47a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800c47c:	8bfb      	ldrh	r3, [r7, #30]
 800c47e:	2b0b      	cmp	r3, #11
 800c480:	d801      	bhi.n	800c486 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c482:	230c      	movs	r3, #12
 800c484:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800c486:	8bfb      	ldrh	r3, [r7, #30]
 800c488:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c48c:	d803      	bhi.n	800c496 <mem_trim+0x32>
 800c48e:	8bfa      	ldrh	r2, [r7, #30]
 800c490:	887b      	ldrh	r3, [r7, #2]
 800c492:	429a      	cmp	r2, r3
 800c494:	d201      	bcs.n	800c49a <mem_trim+0x36>
    return NULL;
 800c496:	2300      	movs	r3, #0
 800c498:	e0d8      	b.n	800c64c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c49a:	4b6e      	ldr	r3, [pc, #440]	; (800c654 <mem_trim+0x1f0>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d304      	bcc.n	800c4ae <mem_trim+0x4a>
 800c4a4:	4b6c      	ldr	r3, [pc, #432]	; (800c658 <mem_trim+0x1f4>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	429a      	cmp	r2, r3
 800c4ac:	d306      	bcc.n	800c4bc <mem_trim+0x58>
 800c4ae:	4b6b      	ldr	r3, [pc, #428]	; (800c65c <mem_trim+0x1f8>)
 800c4b0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c4b4:	496a      	ldr	r1, [pc, #424]	; (800c660 <mem_trim+0x1fc>)
 800c4b6:	486b      	ldr	r0, [pc, #428]	; (800c664 <mem_trim+0x200>)
 800c4b8:	f009 fc9a 	bl	8015df0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c4bc:	4b65      	ldr	r3, [pc, #404]	; (800c654 <mem_trim+0x1f0>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d304      	bcc.n	800c4d0 <mem_trim+0x6c>
 800c4c6:	4b64      	ldr	r3, [pc, #400]	; (800c658 <mem_trim+0x1f4>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	687a      	ldr	r2, [r7, #4]
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d307      	bcc.n	800c4e0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800c4d0:	f009 fc28 	bl	8015d24 <sys_arch_protect>
 800c4d4:	60b8      	str	r0, [r7, #8]
 800c4d6:	68b8      	ldr	r0, [r7, #8]
 800c4d8:	f009 fc32 	bl	8015d40 <sys_arch_unprotect>
    return rmem;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	e0b5      	b.n	800c64c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	3b08      	subs	r3, #8
 800c4e4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800c4e6:	69b8      	ldr	r0, [r7, #24]
 800c4e8:	f7ff fdea 	bl	800c0c0 <mem_to_ptr>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	881a      	ldrh	r2, [r3, #0]
 800c4f4:	8afb      	ldrh	r3, [r7, #22]
 800c4f6:	1ad3      	subs	r3, r2, r3
 800c4f8:	b29b      	uxth	r3, r3
 800c4fa:	3b08      	subs	r3, #8
 800c4fc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c4fe:	8bfa      	ldrh	r2, [r7, #30]
 800c500:	8abb      	ldrh	r3, [r7, #20]
 800c502:	429a      	cmp	r2, r3
 800c504:	d906      	bls.n	800c514 <mem_trim+0xb0>
 800c506:	4b55      	ldr	r3, [pc, #340]	; (800c65c <mem_trim+0x1f8>)
 800c508:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800c50c:	4956      	ldr	r1, [pc, #344]	; (800c668 <mem_trim+0x204>)
 800c50e:	4855      	ldr	r0, [pc, #340]	; (800c664 <mem_trim+0x200>)
 800c510:	f009 fc6e 	bl	8015df0 <iprintf>
  if (newsize > size) {
 800c514:	8bfa      	ldrh	r2, [r7, #30]
 800c516:	8abb      	ldrh	r3, [r7, #20]
 800c518:	429a      	cmp	r2, r3
 800c51a:	d901      	bls.n	800c520 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	e095      	b.n	800c64c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800c520:	8bfa      	ldrh	r2, [r7, #30]
 800c522:	8abb      	ldrh	r3, [r7, #20]
 800c524:	429a      	cmp	r2, r3
 800c526:	d101      	bne.n	800c52c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	e08f      	b.n	800c64c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c52c:	484f      	ldr	r0, [pc, #316]	; (800c66c <mem_trim+0x208>)
 800c52e:	f009 fbb7 	bl	8015ca0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	881b      	ldrh	r3, [r3, #0]
 800c536:	4618      	mov	r0, r3
 800c538:	f7ff fdb0 	bl	800c09c <ptr_to_mem>
 800c53c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	791b      	ldrb	r3, [r3, #4]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d13f      	bne.n	800c5c6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	881b      	ldrh	r3, [r3, #0]
 800c54a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c54e:	d106      	bne.n	800c55e <mem_trim+0xfa>
 800c550:	4b42      	ldr	r3, [pc, #264]	; (800c65c <mem_trim+0x1f8>)
 800c552:	f240 22f5 	movw	r2, #757	; 0x2f5
 800c556:	4946      	ldr	r1, [pc, #280]	; (800c670 <mem_trim+0x20c>)
 800c558:	4842      	ldr	r0, [pc, #264]	; (800c664 <mem_trim+0x200>)
 800c55a:	f009 fc49 	bl	8015df0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	881b      	ldrh	r3, [r3, #0]
 800c562:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c564:	8afa      	ldrh	r2, [r7, #22]
 800c566:	8bfb      	ldrh	r3, [r7, #30]
 800c568:	4413      	add	r3, r2
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	3308      	adds	r3, #8
 800c56e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800c570:	4b40      	ldr	r3, [pc, #256]	; (800c674 <mem_trim+0x210>)
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	693a      	ldr	r2, [r7, #16]
 800c576:	429a      	cmp	r2, r3
 800c578:	d106      	bne.n	800c588 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800c57a:	89fb      	ldrh	r3, [r7, #14]
 800c57c:	4618      	mov	r0, r3
 800c57e:	f7ff fd8d 	bl	800c09c <ptr_to_mem>
 800c582:	4603      	mov	r3, r0
 800c584:	4a3b      	ldr	r2, [pc, #236]	; (800c674 <mem_trim+0x210>)
 800c586:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c588:	89fb      	ldrh	r3, [r7, #14]
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff fd86 	bl	800c09c <ptr_to_mem>
 800c590:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2200      	movs	r2, #0
 800c596:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	89ba      	ldrh	r2, [r7, #12]
 800c59c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	8afa      	ldrh	r2, [r7, #22]
 800c5a2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c5a4:	69bb      	ldr	r3, [r7, #24]
 800c5a6:	89fa      	ldrh	r2, [r7, #14]
 800c5a8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5b2:	d047      	beq.n	800c644 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c5b4:	693b      	ldr	r3, [r7, #16]
 800c5b6:	881b      	ldrh	r3, [r3, #0]
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f7ff fd6f 	bl	800c09c <ptr_to_mem>
 800c5be:	4602      	mov	r2, r0
 800c5c0:	89fb      	ldrh	r3, [r7, #14]
 800c5c2:	8053      	strh	r3, [r2, #2]
 800c5c4:	e03e      	b.n	800c644 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c5c6:	8bfb      	ldrh	r3, [r7, #30]
 800c5c8:	f103 0214 	add.w	r2, r3, #20
 800c5cc:	8abb      	ldrh	r3, [r7, #20]
 800c5ce:	429a      	cmp	r2, r3
 800c5d0:	d838      	bhi.n	800c644 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c5d2:	8afa      	ldrh	r2, [r7, #22]
 800c5d4:	8bfb      	ldrh	r3, [r7, #30]
 800c5d6:	4413      	add	r3, r2
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	3308      	adds	r3, #8
 800c5dc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c5de:	69bb      	ldr	r3, [r7, #24]
 800c5e0:	881b      	ldrh	r3, [r3, #0]
 800c5e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5e6:	d106      	bne.n	800c5f6 <mem_trim+0x192>
 800c5e8:	4b1c      	ldr	r3, [pc, #112]	; (800c65c <mem_trim+0x1f8>)
 800c5ea:	f240 3216 	movw	r2, #790	; 0x316
 800c5ee:	4920      	ldr	r1, [pc, #128]	; (800c670 <mem_trim+0x20c>)
 800c5f0:	481c      	ldr	r0, [pc, #112]	; (800c664 <mem_trim+0x200>)
 800c5f2:	f009 fbfd 	bl	8015df0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c5f6:	89fb      	ldrh	r3, [r7, #14]
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	f7ff fd4f 	bl	800c09c <ptr_to_mem>
 800c5fe:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c600:	4b1c      	ldr	r3, [pc, #112]	; (800c674 <mem_trim+0x210>)
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	429a      	cmp	r2, r3
 800c608:	d202      	bcs.n	800c610 <mem_trim+0x1ac>
      lfree = mem2;
 800c60a:	4a1a      	ldr	r2, [pc, #104]	; (800c674 <mem_trim+0x210>)
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	2200      	movs	r2, #0
 800c614:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	881a      	ldrh	r2, [r3, #0]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	8afa      	ldrh	r2, [r7, #22]
 800c622:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c624:	69bb      	ldr	r3, [r7, #24]
 800c626:	89fa      	ldrh	r2, [r7, #14]
 800c628:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	881b      	ldrh	r3, [r3, #0]
 800c62e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c632:	d007      	beq.n	800c644 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	4618      	mov	r0, r3
 800c63a:	f7ff fd2f 	bl	800c09c <ptr_to_mem>
 800c63e:	4602      	mov	r2, r0
 800c640:	89fb      	ldrh	r3, [r7, #14]
 800c642:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c644:	4809      	ldr	r0, [pc, #36]	; (800c66c <mem_trim+0x208>)
 800c646:	f009 fb3a 	bl	8015cbe <sys_mutex_unlock>
  return rmem;
 800c64a:	687b      	ldr	r3, [r7, #4]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3720      	adds	r7, #32
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	200045a4 	.word	0x200045a4
 800c658:	200045a8 	.word	0x200045a8
 800c65c:	0801704c 	.word	0x0801704c
 800c660:	080171d8 	.word	0x080171d8
 800c664:	08017094 	.word	0x08017094
 800c668:	080171f0 	.word	0x080171f0
 800c66c:	200045ac 	.word	0x200045ac
 800c670:	08017210 	.word	0x08017210
 800c674:	200045b0 	.word	0x200045b0

0800c678 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b088      	sub	sp, #32
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	4603      	mov	r3, r0
 800c680:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c682:	88fb      	ldrh	r3, [r7, #6]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d101      	bne.n	800c68c <mem_malloc+0x14>
    return NULL;
 800c688:	2300      	movs	r3, #0
 800c68a:	e0e2      	b.n	800c852 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c68c:	88fb      	ldrh	r3, [r7, #6]
 800c68e:	3303      	adds	r3, #3
 800c690:	b29b      	uxth	r3, r3
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c698:	8bbb      	ldrh	r3, [r7, #28]
 800c69a:	2b0b      	cmp	r3, #11
 800c69c:	d801      	bhi.n	800c6a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c69e:	230c      	movs	r3, #12
 800c6a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c6a2:	8bbb      	ldrh	r3, [r7, #28]
 800c6a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c6a8:	d803      	bhi.n	800c6b2 <mem_malloc+0x3a>
 800c6aa:	8bba      	ldrh	r2, [r7, #28]
 800c6ac:	88fb      	ldrh	r3, [r7, #6]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d201      	bcs.n	800c6b6 <mem_malloc+0x3e>
    return NULL;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	e0cd      	b.n	800c852 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c6b6:	4869      	ldr	r0, [pc, #420]	; (800c85c <mem_malloc+0x1e4>)
 800c6b8:	f009 faf2 	bl	8015ca0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c6bc:	4b68      	ldr	r3, [pc, #416]	; (800c860 <mem_malloc+0x1e8>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fcfd 	bl	800c0c0 <mem_to_ptr>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	83fb      	strh	r3, [r7, #30]
 800c6ca:	e0b7      	b.n	800c83c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c6cc:	8bfb      	ldrh	r3, [r7, #30]
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	f7ff fce4 	bl	800c09c <ptr_to_mem>
 800c6d4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	791b      	ldrb	r3, [r3, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	f040 80a7 	bne.w	800c82e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	881b      	ldrh	r3, [r3, #0]
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	8bfb      	ldrh	r3, [r7, #30]
 800c6e8:	1ad3      	subs	r3, r2, r3
 800c6ea:	f1a3 0208 	sub.w	r2, r3, #8
 800c6ee:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	f0c0 809c 	bcc.w	800c82e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c6f6:	697b      	ldr	r3, [r7, #20]
 800c6f8:	881b      	ldrh	r3, [r3, #0]
 800c6fa:	461a      	mov	r2, r3
 800c6fc:	8bfb      	ldrh	r3, [r7, #30]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	f1a3 0208 	sub.w	r2, r3, #8
 800c704:	8bbb      	ldrh	r3, [r7, #28]
 800c706:	3314      	adds	r3, #20
 800c708:	429a      	cmp	r2, r3
 800c70a:	d333      	bcc.n	800c774 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c70c:	8bfa      	ldrh	r2, [r7, #30]
 800c70e:	8bbb      	ldrh	r3, [r7, #28]
 800c710:	4413      	add	r3, r2
 800c712:	b29b      	uxth	r3, r3
 800c714:	3308      	adds	r3, #8
 800c716:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c718:	8a7b      	ldrh	r3, [r7, #18]
 800c71a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c71e:	d106      	bne.n	800c72e <mem_malloc+0xb6>
 800c720:	4b50      	ldr	r3, [pc, #320]	; (800c864 <mem_malloc+0x1ec>)
 800c722:	f240 3287 	movw	r2, #903	; 0x387
 800c726:	4950      	ldr	r1, [pc, #320]	; (800c868 <mem_malloc+0x1f0>)
 800c728:	4850      	ldr	r0, [pc, #320]	; (800c86c <mem_malloc+0x1f4>)
 800c72a:	f009 fb61 	bl	8015df0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c72e:	8a7b      	ldrh	r3, [r7, #18]
 800c730:	4618      	mov	r0, r3
 800c732:	f7ff fcb3 	bl	800c09c <ptr_to_mem>
 800c736:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	2200      	movs	r2, #0
 800c73c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	881a      	ldrh	r2, [r3, #0]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	8bfa      	ldrh	r2, [r7, #30]
 800c74a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	8a7a      	ldrh	r2, [r7, #18]
 800c750:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c752:	697b      	ldr	r3, [r7, #20]
 800c754:	2201      	movs	r2, #1
 800c756:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	881b      	ldrh	r3, [r3, #0]
 800c75c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c760:	d00b      	beq.n	800c77a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	881b      	ldrh	r3, [r3, #0]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fc98 	bl	800c09c <ptr_to_mem>
 800c76c:	4602      	mov	r2, r0
 800c76e:	8a7b      	ldrh	r3, [r7, #18]
 800c770:	8053      	strh	r3, [r2, #2]
 800c772:	e002      	b.n	800c77a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2201      	movs	r2, #1
 800c778:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c77a:	4b39      	ldr	r3, [pc, #228]	; (800c860 <mem_malloc+0x1e8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	697a      	ldr	r2, [r7, #20]
 800c780:	429a      	cmp	r2, r3
 800c782:	d127      	bne.n	800c7d4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c784:	4b36      	ldr	r3, [pc, #216]	; (800c860 <mem_malloc+0x1e8>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c78a:	e005      	b.n	800c798 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c78c:	69bb      	ldr	r3, [r7, #24]
 800c78e:	881b      	ldrh	r3, [r3, #0]
 800c790:	4618      	mov	r0, r3
 800c792:	f7ff fc83 	bl	800c09c <ptr_to_mem>
 800c796:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c798:	69bb      	ldr	r3, [r7, #24]
 800c79a:	791b      	ldrb	r3, [r3, #4]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d004      	beq.n	800c7aa <mem_malloc+0x132>
 800c7a0:	4b33      	ldr	r3, [pc, #204]	; (800c870 <mem_malloc+0x1f8>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	69ba      	ldr	r2, [r7, #24]
 800c7a6:	429a      	cmp	r2, r3
 800c7a8:	d1f0      	bne.n	800c78c <mem_malloc+0x114>
          }
          lfree = cur;
 800c7aa:	4a2d      	ldr	r2, [pc, #180]	; (800c860 <mem_malloc+0x1e8>)
 800c7ac:	69bb      	ldr	r3, [r7, #24]
 800c7ae:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c7b0:	4b2b      	ldr	r3, [pc, #172]	; (800c860 <mem_malloc+0x1e8>)
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	4b2e      	ldr	r3, [pc, #184]	; (800c870 <mem_malloc+0x1f8>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d00b      	beq.n	800c7d4 <mem_malloc+0x15c>
 800c7bc:	4b28      	ldr	r3, [pc, #160]	; (800c860 <mem_malloc+0x1e8>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	791b      	ldrb	r3, [r3, #4]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d006      	beq.n	800c7d4 <mem_malloc+0x15c>
 800c7c6:	4b27      	ldr	r3, [pc, #156]	; (800c864 <mem_malloc+0x1ec>)
 800c7c8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c7cc:	4929      	ldr	r1, [pc, #164]	; (800c874 <mem_malloc+0x1fc>)
 800c7ce:	4827      	ldr	r0, [pc, #156]	; (800c86c <mem_malloc+0x1f4>)
 800c7d0:	f009 fb0e 	bl	8015df0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c7d4:	4821      	ldr	r0, [pc, #132]	; (800c85c <mem_malloc+0x1e4>)
 800c7d6:	f009 fa72 	bl	8015cbe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c7da:	8bba      	ldrh	r2, [r7, #28]
 800c7dc:	697b      	ldr	r3, [r7, #20]
 800c7de:	4413      	add	r3, r2
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	4a23      	ldr	r2, [pc, #140]	; (800c870 <mem_malloc+0x1f8>)
 800c7e4:	6812      	ldr	r2, [r2, #0]
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d906      	bls.n	800c7f8 <mem_malloc+0x180>
 800c7ea:	4b1e      	ldr	r3, [pc, #120]	; (800c864 <mem_malloc+0x1ec>)
 800c7ec:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c7f0:	4921      	ldr	r1, [pc, #132]	; (800c878 <mem_malloc+0x200>)
 800c7f2:	481e      	ldr	r0, [pc, #120]	; (800c86c <mem_malloc+0x1f4>)
 800c7f4:	f009 fafc 	bl	8015df0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	f003 0303 	and.w	r3, r3, #3
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d006      	beq.n	800c810 <mem_malloc+0x198>
 800c802:	4b18      	ldr	r3, [pc, #96]	; (800c864 <mem_malloc+0x1ec>)
 800c804:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c808:	491c      	ldr	r1, [pc, #112]	; (800c87c <mem_malloc+0x204>)
 800c80a:	4818      	ldr	r0, [pc, #96]	; (800c86c <mem_malloc+0x1f4>)
 800c80c:	f009 faf0 	bl	8015df0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c810:	697b      	ldr	r3, [r7, #20]
 800c812:	f003 0303 	and.w	r3, r3, #3
 800c816:	2b00      	cmp	r3, #0
 800c818:	d006      	beq.n	800c828 <mem_malloc+0x1b0>
 800c81a:	4b12      	ldr	r3, [pc, #72]	; (800c864 <mem_malloc+0x1ec>)
 800c81c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c820:	4917      	ldr	r1, [pc, #92]	; (800c880 <mem_malloc+0x208>)
 800c822:	4812      	ldr	r0, [pc, #72]	; (800c86c <mem_malloc+0x1f4>)
 800c824:	f009 fae4 	bl	8015df0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	3308      	adds	r3, #8
 800c82c:	e011      	b.n	800c852 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c82e:	8bfb      	ldrh	r3, [r7, #30]
 800c830:	4618      	mov	r0, r3
 800c832:	f7ff fc33 	bl	800c09c <ptr_to_mem>
 800c836:	4603      	mov	r3, r0
 800c838:	881b      	ldrh	r3, [r3, #0]
 800c83a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c83c:	8bfa      	ldrh	r2, [r7, #30]
 800c83e:	8bbb      	ldrh	r3, [r7, #28]
 800c840:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c844:	429a      	cmp	r2, r3
 800c846:	f4ff af41 	bcc.w	800c6cc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c84a:	4804      	ldr	r0, [pc, #16]	; (800c85c <mem_malloc+0x1e4>)
 800c84c:	f009 fa37 	bl	8015cbe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3720      	adds	r7, #32
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	200045ac 	.word	0x200045ac
 800c860:	200045b0 	.word	0x200045b0
 800c864:	0801704c 	.word	0x0801704c
 800c868:	08017210 	.word	0x08017210
 800c86c:	08017094 	.word	0x08017094
 800c870:	200045a8 	.word	0x200045a8
 800c874:	08017224 	.word	0x08017224
 800c878:	08017240 	.word	0x08017240
 800c87c:	08017270 	.word	0x08017270
 800c880:	080172a0 	.word	0x080172a0

0800c884 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c884:	b480      	push	{r7}
 800c886:	b085      	sub	sp, #20
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	689b      	ldr	r3, [r3, #8]
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	685b      	ldr	r3, [r3, #4]
 800c898:	3303      	adds	r3, #3
 800c89a:	f023 0303 	bic.w	r3, r3, #3
 800c89e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	60fb      	str	r3, [r7, #12]
 800c8a4:	e011      	b.n	800c8ca <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	689b      	ldr	r3, [r3, #8]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	68bb      	ldr	r3, [r7, #8]
 800c8ae:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	689b      	ldr	r3, [r3, #8]
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	881b      	ldrh	r3, [r3, #0]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	885b      	ldrh	r3, [r3, #2]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	4293      	cmp	r3, r2
 800c8d4:	dbe7      	blt.n	800c8a6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c8d6:	bf00      	nop
 800c8d8:	bf00      	nop
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	80fb      	strh	r3, [r7, #6]
 800c8ee:	e009      	b.n	800c904 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c8f0:	88fb      	ldrh	r3, [r7, #6]
 800c8f2:	4a08      	ldr	r2, [pc, #32]	; (800c914 <memp_init+0x30>)
 800c8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7ff ffc3 	bl	800c884 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c8fe:	88fb      	ldrh	r3, [r7, #6]
 800c900:	3301      	adds	r3, #1
 800c902:	80fb      	strh	r3, [r7, #6]
 800c904:	88fb      	ldrh	r3, [r7, #6]
 800c906:	2b0c      	cmp	r3, #12
 800c908:	d9f2      	bls.n	800c8f0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c90a:	bf00      	nop
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}
 800c914:	08019ab0 	.word	0x08019ab0

0800c918 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b084      	sub	sp, #16
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c920:	f009 fa00 	bl	8015d24 <sys_arch_protect>
 800c924:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	689b      	ldr	r3, [r3, #8]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d015      	beq.n	800c960 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	689b      	ldr	r3, [r3, #8]
 800c938:	68ba      	ldr	r2, [r7, #8]
 800c93a:	6812      	ldr	r2, [r2, #0]
 800c93c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c93e:	68bb      	ldr	r3, [r7, #8]
 800c940:	f003 0303 	and.w	r3, r3, #3
 800c944:	2b00      	cmp	r3, #0
 800c946:	d006      	beq.n	800c956 <do_memp_malloc_pool+0x3e>
 800c948:	4b09      	ldr	r3, [pc, #36]	; (800c970 <do_memp_malloc_pool+0x58>)
 800c94a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c94e:	4909      	ldr	r1, [pc, #36]	; (800c974 <do_memp_malloc_pool+0x5c>)
 800c950:	4809      	ldr	r0, [pc, #36]	; (800c978 <do_memp_malloc_pool+0x60>)
 800c952:	f009 fa4d 	bl	8015df0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c956:	68f8      	ldr	r0, [r7, #12]
 800c958:	f009 f9f2 	bl	8015d40 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	e003      	b.n	800c968 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f009 f9ed 	bl	8015d40 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c966:	2300      	movs	r3, #0
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	080172c4 	.word	0x080172c4
 800c974:	080172f4 	.word	0x080172f4
 800c978:	08017318 	.word	0x08017318

0800c97c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	4603      	mov	r3, r0
 800c984:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c986:	79fb      	ldrb	r3, [r7, #7]
 800c988:	2b0c      	cmp	r3, #12
 800c98a:	d908      	bls.n	800c99e <memp_malloc+0x22>
 800c98c:	4b0a      	ldr	r3, [pc, #40]	; (800c9b8 <memp_malloc+0x3c>)
 800c98e:	f240 1257 	movw	r2, #343	; 0x157
 800c992:	490a      	ldr	r1, [pc, #40]	; (800c9bc <memp_malloc+0x40>)
 800c994:	480a      	ldr	r0, [pc, #40]	; (800c9c0 <memp_malloc+0x44>)
 800c996:	f009 fa2b 	bl	8015df0 <iprintf>
 800c99a:	2300      	movs	r3, #0
 800c99c:	e008      	b.n	800c9b0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c99e:	79fb      	ldrb	r3, [r7, #7]
 800c9a0:	4a08      	ldr	r2, [pc, #32]	; (800c9c4 <memp_malloc+0x48>)
 800c9a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f7ff ffb6 	bl	800c918 <do_memp_malloc_pool>
 800c9ac:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
}
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	3710      	adds	r7, #16
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}
 800c9b8:	080172c4 	.word	0x080172c4
 800c9bc:	08017354 	.word	0x08017354
 800c9c0:	08017318 	.word	0x08017318
 800c9c4:	08019ab0 	.word	0x08019ab0

0800c9c8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	f003 0303 	and.w	r3, r3, #3
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d006      	beq.n	800c9ea <do_memp_free_pool+0x22>
 800c9dc:	4b0d      	ldr	r3, [pc, #52]	; (800ca14 <do_memp_free_pool+0x4c>)
 800c9de:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c9e2:	490d      	ldr	r1, [pc, #52]	; (800ca18 <do_memp_free_pool+0x50>)
 800c9e4:	480d      	ldr	r0, [pc, #52]	; (800ca1c <do_memp_free_pool+0x54>)
 800c9e6:	f009 fa03 	bl	8015df0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c9ea:	683b      	ldr	r3, [r7, #0]
 800c9ec:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c9ee:	f009 f999 	bl	8015d24 <sys_arch_protect>
 800c9f2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	689b      	ldr	r3, [r3, #8]
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	68fa      	ldr	r2, [r7, #12]
 800ca04:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ca06:	68b8      	ldr	r0, [r7, #8]
 800ca08:	f009 f99a 	bl	8015d40 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ca0c:	bf00      	nop
 800ca0e:	3710      	adds	r7, #16
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}
 800ca14:	080172c4 	.word	0x080172c4
 800ca18:	08017374 	.word	0x08017374
 800ca1c:	08017318 	.word	0x08017318

0800ca20 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	4603      	mov	r3, r0
 800ca28:	6039      	str	r1, [r7, #0]
 800ca2a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ca2c:	79fb      	ldrb	r3, [r7, #7]
 800ca2e:	2b0c      	cmp	r3, #12
 800ca30:	d907      	bls.n	800ca42 <memp_free+0x22>
 800ca32:	4b0c      	ldr	r3, [pc, #48]	; (800ca64 <memp_free+0x44>)
 800ca34:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800ca38:	490b      	ldr	r1, [pc, #44]	; (800ca68 <memp_free+0x48>)
 800ca3a:	480c      	ldr	r0, [pc, #48]	; (800ca6c <memp_free+0x4c>)
 800ca3c:	f009 f9d8 	bl	8015df0 <iprintf>
 800ca40:	e00c      	b.n	800ca5c <memp_free+0x3c>

  if (mem == NULL) {
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d008      	beq.n	800ca5a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ca48:	79fb      	ldrb	r3, [r7, #7]
 800ca4a:	4a09      	ldr	r2, [pc, #36]	; (800ca70 <memp_free+0x50>)
 800ca4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff ffb8 	bl	800c9c8 <do_memp_free_pool>
 800ca58:	e000      	b.n	800ca5c <memp_free+0x3c>
    return;
 800ca5a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	080172c4 	.word	0x080172c4
 800ca68:	08017394 	.word	0x08017394
 800ca6c:	08017318 	.word	0x08017318
 800ca70:	08019ab0 	.word	0x08019ab0

0800ca74 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ca74:	b480      	push	{r7}
 800ca76:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ca78:	bf00      	nop
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca80:	4770      	bx	lr
	...

0800ca84 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
 800ca90:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d108      	bne.n	800caaa <netif_add+0x26>
 800ca98:	4b57      	ldr	r3, [pc, #348]	; (800cbf8 <netif_add+0x174>)
 800ca9a:	f240 1227 	movw	r2, #295	; 0x127
 800ca9e:	4957      	ldr	r1, [pc, #348]	; (800cbfc <netif_add+0x178>)
 800caa0:	4857      	ldr	r0, [pc, #348]	; (800cc00 <netif_add+0x17c>)
 800caa2:	f009 f9a5 	bl	8015df0 <iprintf>
 800caa6:	2300      	movs	r3, #0
 800caa8:	e0a2      	b.n	800cbf0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800caaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caac:	2b00      	cmp	r3, #0
 800caae:	d108      	bne.n	800cac2 <netif_add+0x3e>
 800cab0:	4b51      	ldr	r3, [pc, #324]	; (800cbf8 <netif_add+0x174>)
 800cab2:	f44f 7294 	mov.w	r2, #296	; 0x128
 800cab6:	4953      	ldr	r1, [pc, #332]	; (800cc04 <netif_add+0x180>)
 800cab8:	4851      	ldr	r0, [pc, #324]	; (800cc00 <netif_add+0x17c>)
 800caba:	f009 f999 	bl	8015df0 <iprintf>
 800cabe:	2300      	movs	r3, #0
 800cac0:	e096      	b.n	800cbf0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800cac2:	68bb      	ldr	r3, [r7, #8]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d101      	bne.n	800cacc <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800cac8:	4b4f      	ldr	r3, [pc, #316]	; (800cc08 <netif_add+0x184>)
 800caca:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800cad2:	4b4d      	ldr	r3, [pc, #308]	; (800cc08 <netif_add+0x184>)
 800cad4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	d101      	bne.n	800cae0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800cadc:	4b4a      	ldr	r3, [pc, #296]	; (800cc08 <netif_add+0x184>)
 800cade:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2200      	movs	r2, #0
 800caea:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	2200      	movs	r2, #0
 800caf0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	4a45      	ldr	r2, [pc, #276]	; (800cc0c <netif_add+0x188>)
 800caf6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	2200      	movs	r2, #0
 800cafc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	6a3a      	ldr	r2, [r7, #32]
 800cb10:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800cb12:	4b3f      	ldr	r3, [pc, #252]	; (800cc10 <netif_add+0x18c>)
 800cb14:	781a      	ldrb	r2, [r3, #0]
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb20:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	68b9      	ldr	r1, [r7, #8]
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f000 f913 	bl	800cd54 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	4798      	blx	r3
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <netif_add+0xba>
    return NULL;
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	e058      	b.n	800cbf0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb44:	2bff      	cmp	r3, #255	; 0xff
 800cb46:	d103      	bne.n	800cb50 <netif_add+0xcc>
        netif->num = 0;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800cb50:	2300      	movs	r3, #0
 800cb52:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cb54:	4b2f      	ldr	r3, [pc, #188]	; (800cc14 <netif_add+0x190>)
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	617b      	str	r3, [r7, #20]
 800cb5a:	e02b      	b.n	800cbb4 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800cb5c:	697a      	ldr	r2, [r7, #20]
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	429a      	cmp	r2, r3
 800cb62:	d106      	bne.n	800cb72 <netif_add+0xee>
 800cb64:	4b24      	ldr	r3, [pc, #144]	; (800cbf8 <netif_add+0x174>)
 800cb66:	f240 128b 	movw	r2, #395	; 0x18b
 800cb6a:	492b      	ldr	r1, [pc, #172]	; (800cc18 <netif_add+0x194>)
 800cb6c:	4824      	ldr	r0, [pc, #144]	; (800cc00 <netif_add+0x17c>)
 800cb6e:	f009 f93f 	bl	8015df0 <iprintf>
        num_netifs++;
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	3301      	adds	r3, #1
 800cb76:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	2bff      	cmp	r3, #255	; 0xff
 800cb7c:	dd06      	ble.n	800cb8c <netif_add+0x108>
 800cb7e:	4b1e      	ldr	r3, [pc, #120]	; (800cbf8 <netif_add+0x174>)
 800cb80:	f240 128d 	movw	r2, #397	; 0x18d
 800cb84:	4925      	ldr	r1, [pc, #148]	; (800cc1c <netif_add+0x198>)
 800cb86:	481e      	ldr	r0, [pc, #120]	; (800cc00 <netif_add+0x17c>)
 800cb88:	f009 f932 	bl	8015df0 <iprintf>
        if (netif2->num == netif->num) {
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d108      	bne.n	800cbae <netif_add+0x12a>
          netif->num++;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cba2:	3301      	adds	r3, #1
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800cbac:	e005      	b.n	800cbba <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	617b      	str	r3, [r7, #20]
 800cbb4:	697b      	ldr	r3, [r7, #20]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1d0      	bne.n	800cb5c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d1be      	bne.n	800cb3e <netif_add+0xba>
  }
  if (netif->num == 254) {
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbc6:	2bfe      	cmp	r3, #254	; 0xfe
 800cbc8:	d103      	bne.n	800cbd2 <netif_add+0x14e>
    netif_num = 0;
 800cbca:	4b11      	ldr	r3, [pc, #68]	; (800cc10 <netif_add+0x18c>)
 800cbcc:	2200      	movs	r2, #0
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	e006      	b.n	800cbe0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cbd8:	3301      	adds	r3, #1
 800cbda:	b2da      	uxtb	r2, r3
 800cbdc:	4b0c      	ldr	r3, [pc, #48]	; (800cc10 <netif_add+0x18c>)
 800cbde:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cbe0:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <netif_add+0x190>)
 800cbe2:	681a      	ldr	r2, [r3, #0]
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cbe8:	4a0a      	ldr	r2, [pc, #40]	; (800cc14 <netif_add+0x190>)
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800cbee:	68fb      	ldr	r3, [r7, #12]
}
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	3718      	adds	r7, #24
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	080173b0 	.word	0x080173b0
 800cbfc:	08017444 	.word	0x08017444
 800cc00:	08017400 	.word	0x08017400
 800cc04:	08017460 	.word	0x08017460
 800cc08:	08019b24 	.word	0x08019b24
 800cc0c:	0800d02f 	.word	0x0800d02f
 800cc10:	200045e8 	.word	0x200045e8
 800cc14:	2000c920 	.word	0x2000c920
 800cc18:	08017484 	.word	0x08017484
 800cc1c:	08017498 	.word	0x08017498

0800cc20 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cc20:	b580      	push	{r7, lr}
 800cc22:	b082      	sub	sp, #8
 800cc24:	af00      	add	r7, sp, #0
 800cc26:	6078      	str	r0, [r7, #4]
 800cc28:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f002 fb7d 	bl	800f32c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f006 fc8d 	bl	8013554 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800cc3a:	bf00      	nop
 800cc3c:	3708      	adds	r7, #8
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d106      	bne.n	800cc64 <netif_do_set_ipaddr+0x20>
 800cc56:	4b1d      	ldr	r3, [pc, #116]	; (800cccc <netif_do_set_ipaddr+0x88>)
 800cc58:	f240 12cb 	movw	r2, #459	; 0x1cb
 800cc5c:	491c      	ldr	r1, [pc, #112]	; (800ccd0 <netif_do_set_ipaddr+0x8c>)
 800cc5e:	481d      	ldr	r0, [pc, #116]	; (800ccd4 <netif_do_set_ipaddr+0x90>)
 800cc60:	f009 f8c6 	bl	8015df0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d106      	bne.n	800cc78 <netif_do_set_ipaddr+0x34>
 800cc6a:	4b18      	ldr	r3, [pc, #96]	; (800cccc <netif_do_set_ipaddr+0x88>)
 800cc6c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800cc70:	4917      	ldr	r1, [pc, #92]	; (800ccd0 <netif_do_set_ipaddr+0x8c>)
 800cc72:	4818      	ldr	r0, [pc, #96]	; (800ccd4 <netif_do_set_ipaddr+0x90>)
 800cc74:	f009 f8bc 	bl	8015df0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800cc78:	68bb      	ldr	r3, [r7, #8]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d01c      	beq.n	800ccc0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	681a      	ldr	r2, [r3, #0]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800cc96:	f107 0314 	add.w	r3, r7, #20
 800cc9a:	4619      	mov	r1, r3
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f7ff ffbf 	bl	800cc20 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d002      	beq.n	800ccae <netif_do_set_ipaddr+0x6a>
 800cca8:	68bb      	ldr	r3, [r7, #8]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	e000      	b.n	800ccb0 <netif_do_set_ipaddr+0x6c>
 800ccae:	2300      	movs	r3, #0
 800ccb0:	68fa      	ldr	r2, [r7, #12]
 800ccb2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ccb4:	2101      	movs	r1, #1
 800ccb6:	68f8      	ldr	r0, [r7, #12]
 800ccb8:	f000 f8d2 	bl	800ce60 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800ccbc:	2301      	movs	r3, #1
 800ccbe:	e000      	b.n	800ccc2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800ccc0:	2300      	movs	r3, #0
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3718      	adds	r7, #24
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}
 800ccca:	bf00      	nop
 800cccc:	080173b0 	.word	0x080173b0
 800ccd0:	080174c8 	.word	0x080174c8
 800ccd4:	08017400 	.word	0x08017400

0800ccd8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b085      	sub	sp, #20
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	60f8      	str	r0, [r7, #12]
 800cce0:	60b9      	str	r1, [r7, #8]
 800cce2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800cce4:	68bb      	ldr	r3, [r7, #8]
 800cce6:	681a      	ldr	r2, [r3, #0]
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	3308      	adds	r3, #8
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d00a      	beq.n	800cd08 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <netif_do_set_netmask+0x26>
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	e000      	b.n	800cd00 <netif_do_set_netmask+0x28>
 800ccfe:	2300      	movs	r3, #0
 800cd00:	68fa      	ldr	r2, [r7, #12]
 800cd02:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800cd04:	2301      	movs	r3, #1
 800cd06:	e000      	b.n	800cd0a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3714      	adds	r7, #20
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b085      	sub	sp, #20
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	60f8      	str	r0, [r7, #12]
 800cd1e:	60b9      	str	r1, [r7, #8]
 800cd20:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	330c      	adds	r3, #12
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	429a      	cmp	r2, r3
 800cd2e:	d00a      	beq.n	800cd46 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d002      	beq.n	800cd3c <netif_do_set_gw+0x26>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	e000      	b.n	800cd3e <netif_do_set_gw+0x28>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800cd42:	2301      	movs	r3, #1
 800cd44:	e000      	b.n	800cd48 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3714      	adds	r7, #20
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd52:	4770      	bx	lr

0800cd54 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b088      	sub	sp, #32
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	60f8      	str	r0, [r7, #12]
 800cd5c:	60b9      	str	r1, [r7, #8]
 800cd5e:	607a      	str	r2, [r7, #4]
 800cd60:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800cd66:	2300      	movs	r3, #0
 800cd68:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800cd70:	4b1c      	ldr	r3, [pc, #112]	; (800cde4 <netif_set_addr+0x90>)
 800cd72:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d101      	bne.n	800cd7e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800cd7a:	4b1a      	ldr	r3, [pc, #104]	; (800cde4 <netif_set_addr+0x90>)
 800cd7c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d101      	bne.n	800cd88 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800cd84:	4b17      	ldr	r3, [pc, #92]	; (800cde4 <netif_set_addr+0x90>)
 800cd86:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d003      	beq.n	800cd96 <netif_set_addr+0x42>
 800cd8e:	68bb      	ldr	r3, [r7, #8]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d101      	bne.n	800cd9a <netif_set_addr+0x46>
 800cd96:	2301      	movs	r3, #1
 800cd98:	e000      	b.n	800cd9c <netif_set_addr+0x48>
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	617b      	str	r3, [r7, #20]
  if (remove) {
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d006      	beq.n	800cdb2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cda4:	f107 0310 	add.w	r3, r7, #16
 800cda8:	461a      	mov	r2, r3
 800cdaa:	68b9      	ldr	r1, [r7, #8]
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f7ff ff49 	bl	800cc44 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800cdb2:	69fa      	ldr	r2, [r7, #28]
 800cdb4:	6879      	ldr	r1, [r7, #4]
 800cdb6:	68f8      	ldr	r0, [r7, #12]
 800cdb8:	f7ff ff8e 	bl	800ccd8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800cdbc:	69ba      	ldr	r2, [r7, #24]
 800cdbe:	6839      	ldr	r1, [r7, #0]
 800cdc0:	68f8      	ldr	r0, [r7, #12]
 800cdc2:	f7ff ffa8 	bl	800cd16 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d106      	bne.n	800cdda <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800cdcc:	f107 0310 	add.w	r3, r7, #16
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	68b9      	ldr	r1, [r7, #8]
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7ff ff35 	bl	800cc44 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800cdda:	bf00      	nop
 800cddc:	3720      	adds	r7, #32
 800cdde:	46bd      	mov	sp, r7
 800cde0:	bd80      	pop	{r7, pc}
 800cde2:	bf00      	nop
 800cde4:	08019b24 	.word	0x08019b24

0800cde8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cdf0:	4a04      	ldr	r2, [pc, #16]	; (800ce04 <netif_set_default+0x1c>)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce00:	4770      	bx	lr
 800ce02:	bf00      	nop
 800ce04:	2000c924 	.word	0x2000c924

0800ce08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b082      	sub	sp, #8
 800ce0c:	af00      	add	r7, sp, #0
 800ce0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d107      	bne.n	800ce26 <netif_set_up+0x1e>
 800ce16:	4b0f      	ldr	r3, [pc, #60]	; (800ce54 <netif_set_up+0x4c>)
 800ce18:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ce1c:	490e      	ldr	r1, [pc, #56]	; (800ce58 <netif_set_up+0x50>)
 800ce1e:	480f      	ldr	r0, [pc, #60]	; (800ce5c <netif_set_up+0x54>)
 800ce20:	f008 ffe6 	bl	8015df0 <iprintf>
 800ce24:	e013      	b.n	800ce4e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce2c:	f003 0301 	and.w	r3, r3, #1
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d10c      	bne.n	800ce4e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce3a:	f043 0301 	orr.w	r3, r3, #1
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ce46:	2103      	movs	r1, #3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f000 f809 	bl	800ce60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	080173b0 	.word	0x080173b0
 800ce58:	08017538 	.word	0x08017538
 800ce5c:	08017400 	.word	0x08017400

0800ce60 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d106      	bne.n	800ce80 <netif_issue_reports+0x20>
 800ce72:	4b18      	ldr	r3, [pc, #96]	; (800ced4 <netif_issue_reports+0x74>)
 800ce74:	f240 326d 	movw	r2, #877	; 0x36d
 800ce78:	4917      	ldr	r1, [pc, #92]	; (800ced8 <netif_issue_reports+0x78>)
 800ce7a:	4818      	ldr	r0, [pc, #96]	; (800cedc <netif_issue_reports+0x7c>)
 800ce7c:	f008 ffb8 	bl	8015df0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce86:	f003 0304 	and.w	r3, r3, #4
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d01e      	beq.n	800cecc <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ce94:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d017      	beq.n	800cecc <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ce9c:	78fb      	ldrb	r3, [r7, #3]
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d013      	beq.n	800cece <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	3304      	adds	r3, #4
 800ceaa:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d00e      	beq.n	800cece <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ceb6:	f003 0308 	and.w	r3, r3, #8
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d007      	beq.n	800cece <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	3304      	adds	r3, #4
 800cec2:	4619      	mov	r1, r3
 800cec4:	6878      	ldr	r0, [r7, #4]
 800cec6:	f007 faaf 	bl	8014428 <etharp_request>
 800ceca:	e000      	b.n	800cece <netif_issue_reports+0x6e>
    return;
 800cecc:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800cece:	3708      	adds	r7, #8
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}
 800ced4:	080173b0 	.word	0x080173b0
 800ced8:	08017554 	.word	0x08017554
 800cedc:	08017400 	.word	0x08017400

0800cee0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b082      	sub	sp, #8
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d107      	bne.n	800cefe <netif_set_down+0x1e>
 800ceee:	4b12      	ldr	r3, [pc, #72]	; (800cf38 <netif_set_down+0x58>)
 800cef0:	f240 329b 	movw	r2, #923	; 0x39b
 800cef4:	4911      	ldr	r1, [pc, #68]	; (800cf3c <netif_set_down+0x5c>)
 800cef6:	4812      	ldr	r0, [pc, #72]	; (800cf40 <netif_set_down+0x60>)
 800cef8:	f008 ff7a 	bl	8015df0 <iprintf>
 800cefc:	e019      	b.n	800cf32 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf04:	f003 0301 	and.w	r3, r3, #1
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d012      	beq.n	800cf32 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf12:	f023 0301 	bic.w	r3, r3, #1
 800cf16:	b2da      	uxtb	r2, r3
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf24:	f003 0308 	and.w	r3, r3, #8
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d002      	beq.n	800cf32 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f006 fe39 	bl	8013ba4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cf32:	3708      	adds	r7, #8
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	080173b0 	.word	0x080173b0
 800cf3c:	08017578 	.word	0x08017578
 800cf40:	08017400 	.word	0x08017400

0800cf44 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d107      	bne.n	800cf62 <netif_set_link_up+0x1e>
 800cf52:	4b13      	ldr	r3, [pc, #76]	; (800cfa0 <netif_set_link_up+0x5c>)
 800cf54:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800cf58:	4912      	ldr	r1, [pc, #72]	; (800cfa4 <netif_set_link_up+0x60>)
 800cf5a:	4813      	ldr	r0, [pc, #76]	; (800cfa8 <netif_set_link_up+0x64>)
 800cf5c:	f008 ff48 	bl	8015df0 <iprintf>
 800cf60:	e01b      	b.n	800cf9a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf68:	f003 0304 	and.w	r3, r3, #4
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d114      	bne.n	800cf9a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cf76:	f043 0304 	orr.w	r3, r3, #4
 800cf7a:	b2da      	uxtb	r2, r3
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800cf82:	2103      	movs	r1, #3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f7ff ff6b 	bl	800ce60 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	69db      	ldr	r3, [r3, #28]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d003      	beq.n	800cf9a <netif_set_link_up+0x56>
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	69db      	ldr	r3, [r3, #28]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cf9a:	3708      	adds	r7, #8
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}
 800cfa0:	080173b0 	.word	0x080173b0
 800cfa4:	08017598 	.word	0x08017598
 800cfa8:	08017400 	.word	0x08017400

0800cfac <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b082      	sub	sp, #8
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d107      	bne.n	800cfca <netif_set_link_down+0x1e>
 800cfba:	4b11      	ldr	r3, [pc, #68]	; (800d000 <netif_set_link_down+0x54>)
 800cfbc:	f240 4206 	movw	r2, #1030	; 0x406
 800cfc0:	4910      	ldr	r1, [pc, #64]	; (800d004 <netif_set_link_down+0x58>)
 800cfc2:	4811      	ldr	r0, [pc, #68]	; (800d008 <netif_set_link_down+0x5c>)
 800cfc4:	f008 ff14 	bl	8015df0 <iprintf>
 800cfc8:	e017      	b.n	800cffa <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d010      	beq.n	800cffa <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cfde:	f023 0304 	bic.w	r3, r3, #4
 800cfe2:	b2da      	uxtb	r2, r3
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	69db      	ldr	r3, [r3, #28]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d003      	beq.n	800cffa <netif_set_link_down+0x4e>
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	69db      	ldr	r3, [r3, #28]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}
 800d000:	080173b0 	.word	0x080173b0
 800d004:	080175bc 	.word	0x080175bc
 800d008:	08017400 	.word	0x08017400

0800d00c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	61da      	str	r2, [r3, #28]
  }
}
 800d022:	bf00      	nop
 800d024:	370c      	adds	r7, #12
 800d026:	46bd      	mov	sp, r7
 800d028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02c:	4770      	bx	lr

0800d02e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800d02e:	b480      	push	{r7}
 800d030:	b085      	sub	sp, #20
 800d032:	af00      	add	r7, sp, #0
 800d034:	60f8      	str	r0, [r7, #12]
 800d036:	60b9      	str	r1, [r7, #8]
 800d038:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800d03a:	f06f 030b 	mvn.w	r3, #11
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3714      	adds	r7, #20
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
	...

0800d04c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	4603      	mov	r3, r0
 800d054:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800d056:	79fb      	ldrb	r3, [r7, #7]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d013      	beq.n	800d084 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800d05c:	4b0d      	ldr	r3, [pc, #52]	; (800d094 <netif_get_by_index+0x48>)
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	60fb      	str	r3, [r7, #12]
 800d062:	e00c      	b.n	800d07e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d06a:	3301      	adds	r3, #1
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	79fa      	ldrb	r2, [r7, #7]
 800d070:	429a      	cmp	r2, r3
 800d072:	d101      	bne.n	800d078 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	e006      	b.n	800d086 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	60fb      	str	r3, [r7, #12]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1ef      	bne.n	800d064 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800d084:	2300      	movs	r3, #0
}
 800d086:	4618      	mov	r0, r3
 800d088:	3714      	adds	r7, #20
 800d08a:	46bd      	mov	sp, r7
 800d08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d090:	4770      	bx	lr
 800d092:	bf00      	nop
 800d094:	2000c920 	.word	0x2000c920

0800d098 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800d09e:	f008 fe41 	bl	8015d24 <sys_arch_protect>
 800d0a2:	6038      	str	r0, [r7, #0]
 800d0a4:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <pbuf_free_ooseq+0x44>)
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	701a      	strb	r2, [r3, #0]
 800d0aa:	6838      	ldr	r0, [r7, #0]
 800d0ac:	f008 fe48 	bl	8015d40 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0b0:	4b0b      	ldr	r3, [pc, #44]	; (800d0e0 <pbuf_free_ooseq+0x48>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	607b      	str	r3, [r7, #4]
 800d0b6:	e00a      	b.n	800d0ce <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d003      	beq.n	800d0c8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800d0c0:	6878      	ldr	r0, [r7, #4]
 800d0c2:	f002 f971 	bl	800f3a8 <tcp_free_ooseq>
      return;
 800d0c6:	e005      	b.n	800d0d4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	68db      	ldr	r3, [r3, #12]
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d1f1      	bne.n	800d0b8 <pbuf_free_ooseq+0x20>
    }
  }
}
 800d0d4:	3708      	adds	r7, #8
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}
 800d0da:	bf00      	nop
 800d0dc:	2000c928 	.word	0x2000c928
 800d0e0:	2000c930 	.word	0x2000c930

0800d0e4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b082      	sub	sp, #8
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d0ec:	f7ff ffd4 	bl	800d098 <pbuf_free_ooseq>
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}

0800d0f8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d0fe:	f008 fe11 	bl	8015d24 <sys_arch_protect>
 800d102:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d104:	4b0f      	ldr	r3, [pc, #60]	; (800d144 <pbuf_pool_is_empty+0x4c>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d10a:	4b0e      	ldr	r3, [pc, #56]	; (800d144 <pbuf_pool_is_empty+0x4c>)
 800d10c:	2201      	movs	r2, #1
 800d10e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f008 fe15 	bl	8015d40 <sys_arch_unprotect>

  if (!queued) {
 800d116:	78fb      	ldrb	r3, [r7, #3]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d10f      	bne.n	800d13c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d11c:	2100      	movs	r1, #0
 800d11e:	480a      	ldr	r0, [pc, #40]	; (800d148 <pbuf_pool_is_empty+0x50>)
 800d120:	f7fe feec 	bl	800befc <tcpip_try_callback>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d008      	beq.n	800d13c <pbuf_pool_is_empty+0x44>
 800d12a:	f008 fdfb 	bl	8015d24 <sys_arch_protect>
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	4b04      	ldr	r3, [pc, #16]	; (800d144 <pbuf_pool_is_empty+0x4c>)
 800d132:	2200      	movs	r2, #0
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f008 fe02 	bl	8015d40 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}
 800d144:	2000c928 	.word	0x2000c928
 800d148:	0800d0e5 	.word	0x0800d0e5

0800d14c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	60b9      	str	r1, [r7, #8]
 800d156:	4611      	mov	r1, r2
 800d158:	461a      	mov	r2, r3
 800d15a:	460b      	mov	r3, r1
 800d15c:	80fb      	strh	r3, [r7, #6]
 800d15e:	4613      	mov	r3, r2
 800d160:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2200      	movs	r2, #0
 800d166:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	68ba      	ldr	r2, [r7, #8]
 800d16c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	88fa      	ldrh	r2, [r7, #6]
 800d172:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	88ba      	ldrh	r2, [r7, #4]
 800d178:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800d17a:	8b3b      	ldrh	r3, [r7, #24]
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	7f3a      	ldrb	r2, [r7, #28]
 800d186:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	2201      	movs	r2, #1
 800d18c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	73da      	strb	r2, [r3, #15]
}
 800d194:	bf00      	nop
 800d196:	3714      	adds	r7, #20
 800d198:	46bd      	mov	sp, r7
 800d19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19e:	4770      	bx	lr

0800d1a0 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	; 0x30
 800d1a4:	af02      	add	r7, sp, #8
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
 800d1aa:	460b      	mov	r3, r1
 800d1ac:	80bb      	strh	r3, [r7, #4]
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800d1b2:	79fb      	ldrb	r3, [r7, #7]
 800d1b4:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800d1b6:	887b      	ldrh	r3, [r7, #2]
 800d1b8:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d1bc:	d07f      	beq.n	800d2be <pbuf_alloc+0x11e>
 800d1be:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800d1c2:	f300 80c8 	bgt.w	800d356 <pbuf_alloc+0x1b6>
 800d1c6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d1ca:	d010      	beq.n	800d1ee <pbuf_alloc+0x4e>
 800d1cc:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800d1d0:	f300 80c1 	bgt.w	800d356 <pbuf_alloc+0x1b6>
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d002      	beq.n	800d1de <pbuf_alloc+0x3e>
 800d1d8:	2b41      	cmp	r3, #65	; 0x41
 800d1da:	f040 80bc 	bne.w	800d356 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800d1de:	887a      	ldrh	r2, [r7, #2]
 800d1e0:	88bb      	ldrh	r3, [r7, #4]
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	2000      	movs	r0, #0
 800d1e6:	f000 f8d1 	bl	800d38c <pbuf_alloc_reference>
 800d1ea:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800d1ec:	e0bd      	b.n	800d36a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800d1f6:	88bb      	ldrh	r3, [r7, #4]
 800d1f8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d1fa:	200c      	movs	r0, #12
 800d1fc:	f7ff fbbe 	bl	800c97c <memp_malloc>
 800d200:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	2b00      	cmp	r3, #0
 800d206:	d109      	bne.n	800d21c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800d208:	f7ff ff76 	bl	800d0f8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800d20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d002      	beq.n	800d218 <pbuf_alloc+0x78>
            pbuf_free(p);
 800d212:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d214:	f000 faa8 	bl	800d768 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800d218:	2300      	movs	r3, #0
 800d21a:	e0a7      	b.n	800d36c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800d21c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d21e:	3303      	adds	r3, #3
 800d220:	b29b      	uxth	r3, r3
 800d222:	f023 0303 	bic.w	r3, r3, #3
 800d226:	b29b      	uxth	r3, r3
 800d228:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800d22c:	b29b      	uxth	r3, r3
 800d22e:	8b7a      	ldrh	r2, [r7, #26]
 800d230:	4293      	cmp	r3, r2
 800d232:	bf28      	it	cs
 800d234:	4613      	movcs	r3, r2
 800d236:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800d238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d23a:	3310      	adds	r3, #16
 800d23c:	693a      	ldr	r2, [r7, #16]
 800d23e:	4413      	add	r3, r2
 800d240:	3303      	adds	r3, #3
 800d242:	f023 0303 	bic.w	r3, r3, #3
 800d246:	4618      	mov	r0, r3
 800d248:	89f9      	ldrh	r1, [r7, #14]
 800d24a:	8b7a      	ldrh	r2, [r7, #26]
 800d24c:	2300      	movs	r3, #0
 800d24e:	9301      	str	r3, [sp, #4]
 800d250:	887b      	ldrh	r3, [r7, #2]
 800d252:	9300      	str	r3, [sp, #0]
 800d254:	460b      	mov	r3, r1
 800d256:	4601      	mov	r1, r0
 800d258:	6938      	ldr	r0, [r7, #16]
 800d25a:	f7ff ff77 	bl	800d14c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d25e:	693b      	ldr	r3, [r7, #16]
 800d260:	685b      	ldr	r3, [r3, #4]
 800d262:	f003 0303 	and.w	r3, r3, #3
 800d266:	2b00      	cmp	r3, #0
 800d268:	d006      	beq.n	800d278 <pbuf_alloc+0xd8>
 800d26a:	4b42      	ldr	r3, [pc, #264]	; (800d374 <pbuf_alloc+0x1d4>)
 800d26c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d270:	4941      	ldr	r1, [pc, #260]	; (800d378 <pbuf_alloc+0x1d8>)
 800d272:	4842      	ldr	r0, [pc, #264]	; (800d37c <pbuf_alloc+0x1dc>)
 800d274:	f008 fdbc 	bl	8015df0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d278:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d27a:	3303      	adds	r3, #3
 800d27c:	f023 0303 	bic.w	r3, r3, #3
 800d280:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d284:	d106      	bne.n	800d294 <pbuf_alloc+0xf4>
 800d286:	4b3b      	ldr	r3, [pc, #236]	; (800d374 <pbuf_alloc+0x1d4>)
 800d288:	f44f 7281 	mov.w	r2, #258	; 0x102
 800d28c:	493c      	ldr	r1, [pc, #240]	; (800d380 <pbuf_alloc+0x1e0>)
 800d28e:	483b      	ldr	r0, [pc, #236]	; (800d37c <pbuf_alloc+0x1dc>)
 800d290:	f008 fdae 	bl	8015df0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800d294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800d29a:	693b      	ldr	r3, [r7, #16]
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24
 800d29e:	e002      	b.n	800d2a6 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	693a      	ldr	r2, [r7, #16]
 800d2a4:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800d2a6:	693b      	ldr	r3, [r7, #16]
 800d2a8:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800d2aa:	8b7a      	ldrh	r2, [r7, #26]
 800d2ac:	89fb      	ldrh	r3, [r7, #14]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800d2b6:	8b7b      	ldrh	r3, [r7, #26]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d19e      	bne.n	800d1fa <pbuf_alloc+0x5a>
      break;
 800d2bc:	e055      	b.n	800d36a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800d2be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d2c0:	3303      	adds	r3, #3
 800d2c2:	b29b      	uxth	r3, r3
 800d2c4:	f023 0303 	bic.w	r3, r3, #3
 800d2c8:	b29a      	uxth	r2, r3
 800d2ca:	88bb      	ldrh	r3, [r7, #4]
 800d2cc:	3303      	adds	r3, #3
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	f023 0303 	bic.w	r3, r3, #3
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	4413      	add	r3, r2
 800d2d8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800d2da:	8b3b      	ldrh	r3, [r7, #24]
 800d2dc:	3310      	adds	r3, #16
 800d2de:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2e0:	8b3a      	ldrh	r2, [r7, #24]
 800d2e2:	88bb      	ldrh	r3, [r7, #4]
 800d2e4:	3303      	adds	r3, #3
 800d2e6:	f023 0303 	bic.w	r3, r3, #3
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d306      	bcc.n	800d2fc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800d2ee:	8afa      	ldrh	r2, [r7, #22]
 800d2f0:	88bb      	ldrh	r3, [r7, #4]
 800d2f2:	3303      	adds	r3, #3
 800d2f4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d201      	bcs.n	800d300 <pbuf_alloc+0x160>
        return NULL;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	e035      	b.n	800d36c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800d300:	8afb      	ldrh	r3, [r7, #22]
 800d302:	4618      	mov	r0, r3
 800d304:	f7ff f9b8 	bl	800c678 <mem_malloc>
 800d308:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800d30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d101      	bne.n	800d314 <pbuf_alloc+0x174>
        return NULL;
 800d310:	2300      	movs	r3, #0
 800d312:	e02b      	b.n	800d36c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800d314:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d316:	3310      	adds	r3, #16
 800d318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d31a:	4413      	add	r3, r2
 800d31c:	3303      	adds	r3, #3
 800d31e:	f023 0303 	bic.w	r3, r3, #3
 800d322:	4618      	mov	r0, r3
 800d324:	88b9      	ldrh	r1, [r7, #4]
 800d326:	88ba      	ldrh	r2, [r7, #4]
 800d328:	2300      	movs	r3, #0
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	887b      	ldrh	r3, [r7, #2]
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	460b      	mov	r3, r1
 800d332:	4601      	mov	r1, r0
 800d334:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d336:	f7ff ff09 	bl	800d14c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33c:	685b      	ldr	r3, [r3, #4]
 800d33e:	f003 0303 	and.w	r3, r3, #3
 800d342:	2b00      	cmp	r3, #0
 800d344:	d010      	beq.n	800d368 <pbuf_alloc+0x1c8>
 800d346:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <pbuf_alloc+0x1d4>)
 800d348:	f44f 7291 	mov.w	r2, #290	; 0x122
 800d34c:	490d      	ldr	r1, [pc, #52]	; (800d384 <pbuf_alloc+0x1e4>)
 800d34e:	480b      	ldr	r0, [pc, #44]	; (800d37c <pbuf_alloc+0x1dc>)
 800d350:	f008 fd4e 	bl	8015df0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800d354:	e008      	b.n	800d368 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d356:	4b07      	ldr	r3, [pc, #28]	; (800d374 <pbuf_alloc+0x1d4>)
 800d358:	f240 1227 	movw	r2, #295	; 0x127
 800d35c:	490a      	ldr	r1, [pc, #40]	; (800d388 <pbuf_alloc+0x1e8>)
 800d35e:	4807      	ldr	r0, [pc, #28]	; (800d37c <pbuf_alloc+0x1dc>)
 800d360:	f008 fd46 	bl	8015df0 <iprintf>
      return NULL;
 800d364:	2300      	movs	r3, #0
 800d366:	e001      	b.n	800d36c <pbuf_alloc+0x1cc>
      break;
 800d368:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d36c:	4618      	mov	r0, r3
 800d36e:	3728      	adds	r7, #40	; 0x28
 800d370:	46bd      	mov	sp, r7
 800d372:	bd80      	pop	{r7, pc}
 800d374:	080175e0 	.word	0x080175e0
 800d378:	08017610 	.word	0x08017610
 800d37c:	08017640 	.word	0x08017640
 800d380:	08017668 	.word	0x08017668
 800d384:	0801769c 	.word	0x0801769c
 800d388:	080176c8 	.word	0x080176c8

0800d38c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b086      	sub	sp, #24
 800d390:	af02      	add	r7, sp, #8
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	460b      	mov	r3, r1
 800d396:	807b      	strh	r3, [r7, #2]
 800d398:	4613      	mov	r3, r2
 800d39a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800d39c:	883b      	ldrh	r3, [r7, #0]
 800d39e:	2b41      	cmp	r3, #65	; 0x41
 800d3a0:	d009      	beq.n	800d3b6 <pbuf_alloc_reference+0x2a>
 800d3a2:	883b      	ldrh	r3, [r7, #0]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d006      	beq.n	800d3b6 <pbuf_alloc_reference+0x2a>
 800d3a8:	4b0f      	ldr	r3, [pc, #60]	; (800d3e8 <pbuf_alloc_reference+0x5c>)
 800d3aa:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800d3ae:	490f      	ldr	r1, [pc, #60]	; (800d3ec <pbuf_alloc_reference+0x60>)
 800d3b0:	480f      	ldr	r0, [pc, #60]	; (800d3f0 <pbuf_alloc_reference+0x64>)
 800d3b2:	f008 fd1d 	bl	8015df0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d3b6:	200b      	movs	r0, #11
 800d3b8:	f7ff fae0 	bl	800c97c <memp_malloc>
 800d3bc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d101      	bne.n	800d3c8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	e00b      	b.n	800d3e0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800d3c8:	8879      	ldrh	r1, [r7, #2]
 800d3ca:	887a      	ldrh	r2, [r7, #2]
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	9301      	str	r3, [sp, #4]
 800d3d0:	883b      	ldrh	r3, [r7, #0]
 800d3d2:	9300      	str	r3, [sp, #0]
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	6879      	ldr	r1, [r7, #4]
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f7ff feb7 	bl	800d14c <pbuf_init_alloced_pbuf>
  return p;
 800d3de:	68fb      	ldr	r3, [r7, #12]
}
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}
 800d3e8:	080175e0 	.word	0x080175e0
 800d3ec:	080176e4 	.word	0x080176e4
 800d3f0:	08017640 	.word	0x08017640

0800d3f4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b088      	sub	sp, #32
 800d3f8:	af02      	add	r7, sp, #8
 800d3fa:	607b      	str	r3, [r7, #4]
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
 800d400:	460b      	mov	r3, r1
 800d402:	81bb      	strh	r3, [r7, #12]
 800d404:	4613      	mov	r3, r2
 800d406:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800d408:	7bfb      	ldrb	r3, [r7, #15]
 800d40a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d40c:	8a7b      	ldrh	r3, [r7, #18]
 800d40e:	3303      	adds	r3, #3
 800d410:	f023 0203 	bic.w	r2, r3, #3
 800d414:	89bb      	ldrh	r3, [r7, #12]
 800d416:	441a      	add	r2, r3
 800d418:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d901      	bls.n	800d422 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d41e:	2300      	movs	r3, #0
 800d420:	e018      	b.n	800d454 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800d422:	6a3b      	ldr	r3, [r7, #32]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d007      	beq.n	800d438 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d428:	8a7b      	ldrh	r3, [r7, #18]
 800d42a:	3303      	adds	r3, #3
 800d42c:	f023 0303 	bic.w	r3, r3, #3
 800d430:	6a3a      	ldr	r2, [r7, #32]
 800d432:	4413      	add	r3, r2
 800d434:	617b      	str	r3, [r7, #20]
 800d436:	e001      	b.n	800d43c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800d438:	2300      	movs	r3, #0
 800d43a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	89b9      	ldrh	r1, [r7, #12]
 800d440:	89ba      	ldrh	r2, [r7, #12]
 800d442:	2302      	movs	r3, #2
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	897b      	ldrh	r3, [r7, #10]
 800d448:	9300      	str	r3, [sp, #0]
 800d44a:	460b      	mov	r3, r1
 800d44c:	6979      	ldr	r1, [r7, #20]
 800d44e:	f7ff fe7d 	bl	800d14c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800d452:	687b      	ldr	r3, [r7, #4]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3718      	adds	r7, #24
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}

0800d45c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	460b      	mov	r3, r1
 800d466:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d106      	bne.n	800d47c <pbuf_realloc+0x20>
 800d46e:	4b3a      	ldr	r3, [pc, #232]	; (800d558 <pbuf_realloc+0xfc>)
 800d470:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800d474:	4939      	ldr	r1, [pc, #228]	; (800d55c <pbuf_realloc+0x100>)
 800d476:	483a      	ldr	r0, [pc, #232]	; (800d560 <pbuf_realloc+0x104>)
 800d478:	f008 fcba 	bl	8015df0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	891b      	ldrh	r3, [r3, #8]
 800d480:	887a      	ldrh	r2, [r7, #2]
 800d482:	429a      	cmp	r2, r3
 800d484:	d263      	bcs.n	800d54e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	891a      	ldrh	r2, [r3, #8]
 800d48a:	887b      	ldrh	r3, [r7, #2]
 800d48c:	1ad3      	subs	r3, r2, r3
 800d48e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d490:	887b      	ldrh	r3, [r7, #2]
 800d492:	817b      	strh	r3, [r7, #10]
  q = p;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d498:	e018      	b.n	800d4cc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	895b      	ldrh	r3, [r3, #10]
 800d49e:	897a      	ldrh	r2, [r7, #10]
 800d4a0:	1ad3      	subs	r3, r2, r3
 800d4a2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	891a      	ldrh	r2, [r3, #8]
 800d4a8:	893b      	ldrh	r3, [r7, #8]
 800d4aa:	1ad3      	subs	r3, r2, r3
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d106      	bne.n	800d4cc <pbuf_realloc+0x70>
 800d4be:	4b26      	ldr	r3, [pc, #152]	; (800d558 <pbuf_realloc+0xfc>)
 800d4c0:	f240 12af 	movw	r2, #431	; 0x1af
 800d4c4:	4927      	ldr	r1, [pc, #156]	; (800d564 <pbuf_realloc+0x108>)
 800d4c6:	4826      	ldr	r0, [pc, #152]	; (800d560 <pbuf_realloc+0x104>)
 800d4c8:	f008 fc92 	bl	8015df0 <iprintf>
  while (rem_len > q->len) {
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	895b      	ldrh	r3, [r3, #10]
 800d4d0:	897a      	ldrh	r2, [r7, #10]
 800d4d2:	429a      	cmp	r2, r3
 800d4d4:	d8e1      	bhi.n	800d49a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	7b1b      	ldrb	r3, [r3, #12]
 800d4da:	f003 030f 	and.w	r3, r3, #15
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d121      	bne.n	800d526 <pbuf_realloc+0xca>
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	895b      	ldrh	r3, [r3, #10]
 800d4e6:	897a      	ldrh	r2, [r7, #10]
 800d4e8:	429a      	cmp	r2, r3
 800d4ea:	d01c      	beq.n	800d526 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	7b5b      	ldrb	r3, [r3, #13]
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d116      	bne.n	800d526 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	685a      	ldr	r2, [r3, #4]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	b29a      	uxth	r2, r3
 800d502:	897b      	ldrh	r3, [r7, #10]
 800d504:	4413      	add	r3, r2
 800d506:	b29b      	uxth	r3, r3
 800d508:	4619      	mov	r1, r3
 800d50a:	68f8      	ldr	r0, [r7, #12]
 800d50c:	f7fe ffaa 	bl	800c464 <mem_trim>
 800d510:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d106      	bne.n	800d526 <pbuf_realloc+0xca>
 800d518:	4b0f      	ldr	r3, [pc, #60]	; (800d558 <pbuf_realloc+0xfc>)
 800d51a:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d51e:	4912      	ldr	r1, [pc, #72]	; (800d568 <pbuf_realloc+0x10c>)
 800d520:	480f      	ldr	r0, [pc, #60]	; (800d560 <pbuf_realloc+0x104>)
 800d522:	f008 fc65 	bl	8015df0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	897a      	ldrh	r2, [r7, #10]
 800d52a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	895a      	ldrh	r2, [r3, #10]
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d004      	beq.n	800d546 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 f911 	bl	800d768 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	e000      	b.n	800d550 <pbuf_realloc+0xf4>
    return;
 800d54e:	bf00      	nop

}
 800d550:	3710      	adds	r7, #16
 800d552:	46bd      	mov	sp, r7
 800d554:	bd80      	pop	{r7, pc}
 800d556:	bf00      	nop
 800d558:	080175e0 	.word	0x080175e0
 800d55c:	080176f8 	.word	0x080176f8
 800d560:	08017640 	.word	0x08017640
 800d564:	08017710 	.word	0x08017710
 800d568:	08017728 	.word	0x08017728

0800d56c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d56c:	b580      	push	{r7, lr}
 800d56e:	b086      	sub	sp, #24
 800d570:	af00      	add	r7, sp, #0
 800d572:	60f8      	str	r0, [r7, #12]
 800d574:	60b9      	str	r1, [r7, #8]
 800d576:	4613      	mov	r3, r2
 800d578:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d106      	bne.n	800d58e <pbuf_add_header_impl+0x22>
 800d580:	4b2b      	ldr	r3, [pc, #172]	; (800d630 <pbuf_add_header_impl+0xc4>)
 800d582:	f240 12df 	movw	r2, #479	; 0x1df
 800d586:	492b      	ldr	r1, [pc, #172]	; (800d634 <pbuf_add_header_impl+0xc8>)
 800d588:	482b      	ldr	r0, [pc, #172]	; (800d638 <pbuf_add_header_impl+0xcc>)
 800d58a:	f008 fc31 	bl	8015df0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d003      	beq.n	800d59c <pbuf_add_header_impl+0x30>
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d59a:	d301      	bcc.n	800d5a0 <pbuf_add_header_impl+0x34>
    return 1;
 800d59c:	2301      	movs	r3, #1
 800d59e:	e043      	b.n	800d628 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d101      	bne.n	800d5aa <pbuf_add_header_impl+0x3e>
    return 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	e03e      	b.n	800d628 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d5aa:	68bb      	ldr	r3, [r7, #8]
 800d5ac:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	891a      	ldrh	r2, [r3, #8]
 800d5b2:	8a7b      	ldrh	r3, [r7, #18]
 800d5b4:	4413      	add	r3, r2
 800d5b6:	b29b      	uxth	r3, r3
 800d5b8:	8a7a      	ldrh	r2, [r7, #18]
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d901      	bls.n	800d5c2 <pbuf_add_header_impl+0x56>
    return 1;
 800d5be:	2301      	movs	r3, #1
 800d5c0:	e032      	b.n	800d628 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	7b1b      	ldrb	r3, [r3, #12]
 800d5c6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d5c8:	8a3b      	ldrh	r3, [r7, #16]
 800d5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00c      	beq.n	800d5ec <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	685a      	ldr	r2, [r3, #4]
 800d5d6:	68bb      	ldr	r3, [r7, #8]
 800d5d8:	425b      	negs	r3, r3
 800d5da:	4413      	add	r3, r2
 800d5dc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3310      	adds	r3, #16
 800d5e2:	697a      	ldr	r2, [r7, #20]
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d20d      	bcs.n	800d604 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e01d      	b.n	800d628 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d5ec:	79fb      	ldrb	r3, [r7, #7]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d006      	beq.n	800d600 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	685a      	ldr	r2, [r3, #4]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	425b      	negs	r3, r3
 800d5fa:	4413      	add	r3, r2
 800d5fc:	617b      	str	r3, [r7, #20]
 800d5fe:	e001      	b.n	800d604 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d600:	2301      	movs	r3, #1
 800d602:	e011      	b.n	800d628 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	697a      	ldr	r2, [r7, #20]
 800d608:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d60a:	68fb      	ldr	r3, [r7, #12]
 800d60c:	895a      	ldrh	r2, [r3, #10]
 800d60e:	8a7b      	ldrh	r3, [r7, #18]
 800d610:	4413      	add	r3, r2
 800d612:	b29a      	uxth	r2, r3
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	891a      	ldrh	r2, [r3, #8]
 800d61c:	8a7b      	ldrh	r3, [r7, #18]
 800d61e:	4413      	add	r3, r2
 800d620:	b29a      	uxth	r2, r3
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	811a      	strh	r2, [r3, #8]


  return 0;
 800d626:	2300      	movs	r3, #0
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3718      	adds	r7, #24
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}
 800d630:	080175e0 	.word	0x080175e0
 800d634:	08017744 	.word	0x08017744
 800d638:	08017640 	.word	0x08017640

0800d63c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b082      	sub	sp, #8
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d646:	2200      	movs	r2, #0
 800d648:	6839      	ldr	r1, [r7, #0]
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff ff8e 	bl	800d56c <pbuf_add_header_impl>
 800d650:	4603      	mov	r3, r0
}
 800d652:	4618      	mov	r0, r3
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
	...

0800d65c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d106      	bne.n	800d67a <pbuf_remove_header+0x1e>
 800d66c:	4b20      	ldr	r3, [pc, #128]	; (800d6f0 <pbuf_remove_header+0x94>)
 800d66e:	f240 224b 	movw	r2, #587	; 0x24b
 800d672:	4920      	ldr	r1, [pc, #128]	; (800d6f4 <pbuf_remove_header+0x98>)
 800d674:	4820      	ldr	r0, [pc, #128]	; (800d6f8 <pbuf_remove_header+0x9c>)
 800d676:	f008 fbbb 	bl	8015df0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d003      	beq.n	800d688 <pbuf_remove_header+0x2c>
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d686:	d301      	bcc.n	800d68c <pbuf_remove_header+0x30>
    return 1;
 800d688:	2301      	movs	r3, #1
 800d68a:	e02c      	b.n	800d6e6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <pbuf_remove_header+0x3a>
    return 0;
 800d692:	2300      	movs	r3, #0
 800d694:	e027      	b.n	800d6e6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	895b      	ldrh	r3, [r3, #10]
 800d69e:	89fa      	ldrh	r2, [r7, #14]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d908      	bls.n	800d6b6 <pbuf_remove_header+0x5a>
 800d6a4:	4b12      	ldr	r3, [pc, #72]	; (800d6f0 <pbuf_remove_header+0x94>)
 800d6a6:	f240 2255 	movw	r2, #597	; 0x255
 800d6aa:	4914      	ldr	r1, [pc, #80]	; (800d6fc <pbuf_remove_header+0xa0>)
 800d6ac:	4812      	ldr	r0, [pc, #72]	; (800d6f8 <pbuf_remove_header+0x9c>)
 800d6ae:	f008 fb9f 	bl	8015df0 <iprintf>
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e017      	b.n	800d6e6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	685a      	ldr	r2, [r3, #4]
 800d6c0:	683b      	ldr	r3, [r7, #0]
 800d6c2:	441a      	add	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	895a      	ldrh	r2, [r3, #10]
 800d6cc:	89fb      	ldrh	r3, [r7, #14]
 800d6ce:	1ad3      	subs	r3, r2, r3
 800d6d0:	b29a      	uxth	r2, r3
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	891a      	ldrh	r2, [r3, #8]
 800d6da:	89fb      	ldrh	r3, [r7, #14]
 800d6dc:	1ad3      	subs	r3, r2, r3
 800d6de:	b29a      	uxth	r2, r3
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	080175e0 	.word	0x080175e0
 800d6f4:	08017744 	.word	0x08017744
 800d6f8:	08017640 	.word	0x08017640
 800d6fc:	08017750 	.word	0x08017750

0800d700 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b082      	sub	sp, #8
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
 800d708:	460b      	mov	r3, r1
 800d70a:	807b      	strh	r3, [r7, #2]
 800d70c:	4613      	mov	r3, r2
 800d70e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d710:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d714:	2b00      	cmp	r3, #0
 800d716:	da08      	bge.n	800d72a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d71c:	425b      	negs	r3, r3
 800d71e:	4619      	mov	r1, r3
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f7ff ff9b 	bl	800d65c <pbuf_remove_header>
 800d726:	4603      	mov	r3, r0
 800d728:	e007      	b.n	800d73a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d72a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d72e:	787a      	ldrb	r2, [r7, #1]
 800d730:	4619      	mov	r1, r3
 800d732:	6878      	ldr	r0, [r7, #4]
 800d734:	f7ff ff1a 	bl	800d56c <pbuf_add_header_impl>
 800d738:	4603      	mov	r3, r0
  }
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3708      	adds	r7, #8
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b082      	sub	sp, #8
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
 800d74a:	460b      	mov	r3, r1
 800d74c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d74e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d752:	2201      	movs	r2, #1
 800d754:	4619      	mov	r1, r3
 800d756:	6878      	ldr	r0, [r7, #4]
 800d758:	f7ff ffd2 	bl	800d700 <pbuf_header_impl>
 800d75c:	4603      	mov	r3, r0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
	...

0800d768 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10b      	bne.n	800d78e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <pbuf_free+0x22>
 800d77c:	4b3b      	ldr	r3, [pc, #236]	; (800d86c <pbuf_free+0x104>)
 800d77e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d782:	493b      	ldr	r1, [pc, #236]	; (800d870 <pbuf_free+0x108>)
 800d784:	483b      	ldr	r0, [pc, #236]	; (800d874 <pbuf_free+0x10c>)
 800d786:	f008 fb33 	bl	8015df0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d78a:	2300      	movs	r3, #0
 800d78c:	e069      	b.n	800d862 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d78e:	2300      	movs	r3, #0
 800d790:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d792:	e062      	b.n	800d85a <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d794:	f008 fac6 	bl	8015d24 <sys_arch_protect>
 800d798:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	7b9b      	ldrb	r3, [r3, #14]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <pbuf_free+0x48>
 800d7a2:	4b32      	ldr	r3, [pc, #200]	; (800d86c <pbuf_free+0x104>)
 800d7a4:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d7a8:	4933      	ldr	r1, [pc, #204]	; (800d878 <pbuf_free+0x110>)
 800d7aa:	4832      	ldr	r0, [pc, #200]	; (800d874 <pbuf_free+0x10c>)
 800d7ac:	f008 fb20 	bl	8015df0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	7b9b      	ldrb	r3, [r3, #14]
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	739a      	strb	r2, [r3, #14]
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	7b9b      	ldrb	r3, [r3, #14]
 800d7c0:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d7c2:	69b8      	ldr	r0, [r7, #24]
 800d7c4:	f008 fabc 	bl	8015d40 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d143      	bne.n	800d856 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	7b1b      	ldrb	r3, [r3, #12]
 800d7d8:	f003 030f 	and.w	r3, r3, #15
 800d7dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	7b5b      	ldrb	r3, [r3, #13]
 800d7e2:	f003 0302 	and.w	r3, r3, #2
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d011      	beq.n	800d80e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	691b      	ldr	r3, [r3, #16]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d106      	bne.n	800d804 <pbuf_free+0x9c>
 800d7f6:	4b1d      	ldr	r3, [pc, #116]	; (800d86c <pbuf_free+0x104>)
 800d7f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d7fc:	491f      	ldr	r1, [pc, #124]	; (800d87c <pbuf_free+0x114>)
 800d7fe:	481d      	ldr	r0, [pc, #116]	; (800d874 <pbuf_free+0x10c>)
 800d800:	f008 faf6 	bl	8015df0 <iprintf>
        pc->custom_free_function(p);
 800d804:	68bb      	ldr	r3, [r7, #8]
 800d806:	691b      	ldr	r3, [r3, #16]
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	4798      	blx	r3
 800d80c:	e01d      	b.n	800d84a <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d104      	bne.n	800d81e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d814:	6879      	ldr	r1, [r7, #4]
 800d816:	200c      	movs	r0, #12
 800d818:	f7ff f902 	bl	800ca20 <memp_free>
 800d81c:	e015      	b.n	800d84a <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d81e:	7bfb      	ldrb	r3, [r7, #15]
 800d820:	2b01      	cmp	r3, #1
 800d822:	d104      	bne.n	800d82e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d824:	6879      	ldr	r1, [r7, #4]
 800d826:	200b      	movs	r0, #11
 800d828:	f7ff f8fa 	bl	800ca20 <memp_free>
 800d82c:	e00d      	b.n	800d84a <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d82e:	7bfb      	ldrb	r3, [r7, #15]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d103      	bne.n	800d83c <pbuf_free+0xd4>
          mem_free(p);
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f7fe fd85 	bl	800c344 <mem_free>
 800d83a:	e006      	b.n	800d84a <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d83c:	4b0b      	ldr	r3, [pc, #44]	; (800d86c <pbuf_free+0x104>)
 800d83e:	f240 320f 	movw	r2, #783	; 0x30f
 800d842:	490f      	ldr	r1, [pc, #60]	; (800d880 <pbuf_free+0x118>)
 800d844:	480b      	ldr	r0, [pc, #44]	; (800d874 <pbuf_free+0x10c>)
 800d846:	f008 fad3 	bl	8015df0 <iprintf>
        }
      }
      count++;
 800d84a:	7ffb      	ldrb	r3, [r7, #31]
 800d84c:	3301      	adds	r3, #1
 800d84e:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d850:	693b      	ldr	r3, [r7, #16]
 800d852:	607b      	str	r3, [r7, #4]
 800d854:	e001      	b.n	800d85a <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d856:	2300      	movs	r3, #0
 800d858:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d199      	bne.n	800d794 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d860:	7ffb      	ldrb	r3, [r7, #31]
}
 800d862:	4618      	mov	r0, r3
 800d864:	3720      	adds	r7, #32
 800d866:	46bd      	mov	sp, r7
 800d868:	bd80      	pop	{r7, pc}
 800d86a:	bf00      	nop
 800d86c:	080175e0 	.word	0x080175e0
 800d870:	08017744 	.word	0x08017744
 800d874:	08017640 	.word	0x08017640
 800d878:	08017770 	.word	0x08017770
 800d87c:	08017788 	.word	0x08017788
 800d880:	080177ac 	.word	0x080177ac

0800d884 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d884:	b480      	push	{r7}
 800d886:	b085      	sub	sp, #20
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d890:	e005      	b.n	800d89e <pbuf_clen+0x1a>
    ++len;
 800d892:	89fb      	ldrh	r3, [r7, #14]
 800d894:	3301      	adds	r3, #1
 800d896:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d1f6      	bne.n	800d892 <pbuf_clen+0xe>
  }
  return len;
 800d8a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	3714      	adds	r7, #20
 800d8aa:	46bd      	mov	sp, r7
 800d8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b0:	4770      	bx	lr
	...

0800d8b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d016      	beq.n	800d8f0 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d8c2:	f008 fa2f 	bl	8015d24 <sys_arch_protect>
 800d8c6:	60f8      	str	r0, [r7, #12]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	7b9b      	ldrb	r3, [r3, #14]
 800d8cc:	3301      	adds	r3, #1
 800d8ce:	b2da      	uxtb	r2, r3
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	739a      	strb	r2, [r3, #14]
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f008 fa33 	bl	8015d40 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	7b9b      	ldrb	r3, [r3, #14]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <pbuf_ref+0x3c>
 800d8e2:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <pbuf_ref+0x44>)
 800d8e4:	f240 3242 	movw	r2, #834	; 0x342
 800d8e8:	4904      	ldr	r1, [pc, #16]	; (800d8fc <pbuf_ref+0x48>)
 800d8ea:	4805      	ldr	r0, [pc, #20]	; (800d900 <pbuf_ref+0x4c>)
 800d8ec:	f008 fa80 	bl	8015df0 <iprintf>
  }
}
 800d8f0:	bf00      	nop
 800d8f2:	3710      	adds	r7, #16
 800d8f4:	46bd      	mov	sp, r7
 800d8f6:	bd80      	pop	{r7, pc}
 800d8f8:	080175e0 	.word	0x080175e0
 800d8fc:	080177c0 	.word	0x080177c0
 800d900:	08017640 	.word	0x08017640

0800d904 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b084      	sub	sp, #16
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d002      	beq.n	800d91a <pbuf_cat+0x16>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d107      	bne.n	800d92a <pbuf_cat+0x26>
 800d91a:	4b20      	ldr	r3, [pc, #128]	; (800d99c <pbuf_cat+0x98>)
 800d91c:	f240 3259 	movw	r2, #857	; 0x359
 800d920:	491f      	ldr	r1, [pc, #124]	; (800d9a0 <pbuf_cat+0x9c>)
 800d922:	4820      	ldr	r0, [pc, #128]	; (800d9a4 <pbuf_cat+0xa0>)
 800d924:	f008 fa64 	bl	8015df0 <iprintf>
 800d928:	e034      	b.n	800d994 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	60fb      	str	r3, [r7, #12]
 800d92e:	e00a      	b.n	800d946 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	891a      	ldrh	r2, [r3, #8]
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	891b      	ldrh	r3, [r3, #8]
 800d938:	4413      	add	r3, r2
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	60fb      	str	r3, [r7, #12]
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d1f0      	bne.n	800d930 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	891a      	ldrh	r2, [r3, #8]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	895b      	ldrh	r3, [r3, #10]
 800d956:	429a      	cmp	r2, r3
 800d958:	d006      	beq.n	800d968 <pbuf_cat+0x64>
 800d95a:	4b10      	ldr	r3, [pc, #64]	; (800d99c <pbuf_cat+0x98>)
 800d95c:	f240 3262 	movw	r2, #866	; 0x362
 800d960:	4911      	ldr	r1, [pc, #68]	; (800d9a8 <pbuf_cat+0xa4>)
 800d962:	4810      	ldr	r0, [pc, #64]	; (800d9a4 <pbuf_cat+0xa0>)
 800d964:	f008 fa44 	bl	8015df0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d006      	beq.n	800d97e <pbuf_cat+0x7a>
 800d970:	4b0a      	ldr	r3, [pc, #40]	; (800d99c <pbuf_cat+0x98>)
 800d972:	f240 3263 	movw	r2, #867	; 0x363
 800d976:	490d      	ldr	r1, [pc, #52]	; (800d9ac <pbuf_cat+0xa8>)
 800d978:	480a      	ldr	r0, [pc, #40]	; (800d9a4 <pbuf_cat+0xa0>)
 800d97a:	f008 fa39 	bl	8015df0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	891a      	ldrh	r2, [r3, #8]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	891b      	ldrh	r3, [r3, #8]
 800d986:	4413      	add	r3, r2
 800d988:	b29a      	uxth	r2, r3
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	683a      	ldr	r2, [r7, #0]
 800d992:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	080175e0 	.word	0x080175e0
 800d9a0:	080177d4 	.word	0x080177d4
 800d9a4:	08017640 	.word	0x08017640
 800d9a8:	0801780c 	.word	0x0801780c
 800d9ac:	0801783c 	.word	0x0801783c

0800d9b0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b086      	sub	sp, #24
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	617b      	str	r3, [r7, #20]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d008      	beq.n	800d9da <pbuf_copy+0x2a>
 800d9c8:	683b      	ldr	r3, [r7, #0]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d005      	beq.n	800d9da <pbuf_copy+0x2a>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	891a      	ldrh	r2, [r3, #8]
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	891b      	ldrh	r3, [r3, #8]
 800d9d6:	429a      	cmp	r2, r3
 800d9d8:	d209      	bcs.n	800d9ee <pbuf_copy+0x3e>
 800d9da:	4b57      	ldr	r3, [pc, #348]	; (800db38 <pbuf_copy+0x188>)
 800d9dc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d9e0:	4956      	ldr	r1, [pc, #344]	; (800db3c <pbuf_copy+0x18c>)
 800d9e2:	4857      	ldr	r0, [pc, #348]	; (800db40 <pbuf_copy+0x190>)
 800d9e4:	f008 fa04 	bl	8015df0 <iprintf>
 800d9e8:	f06f 030f 	mvn.w	r3, #15
 800d9ec:	e09f      	b.n	800db2e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	895b      	ldrh	r3, [r3, #10]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	1ad2      	subs	r2, r2, r3
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	895b      	ldrh	r3, [r3, #10]
 800d9fc:	4619      	mov	r1, r3
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	1acb      	subs	r3, r1, r3
 800da02:	429a      	cmp	r2, r3
 800da04:	d306      	bcc.n	800da14 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	895b      	ldrh	r3, [r3, #10]
 800da0a:	461a      	mov	r2, r3
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	1ad3      	subs	r3, r2, r3
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	e005      	b.n	800da20 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	895b      	ldrh	r3, [r3, #10]
 800da18:	461a      	mov	r2, r3
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	697b      	ldr	r3, [r7, #20]
 800da26:	18d0      	adds	r0, r2, r3
 800da28:	683b      	ldr	r3, [r7, #0]
 800da2a:	685a      	ldr	r2, [r3, #4]
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	4413      	add	r3, r2
 800da30:	68fa      	ldr	r2, [r7, #12]
 800da32:	4619      	mov	r1, r3
 800da34:	f008 f9c6 	bl	8015dc4 <memcpy>
    offset_to += len;
 800da38:	697a      	ldr	r2, [r7, #20]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	4413      	add	r3, r2
 800da3e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	4413      	add	r3, r2
 800da46:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	895b      	ldrh	r3, [r3, #10]
 800da4c:	461a      	mov	r2, r3
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	4293      	cmp	r3, r2
 800da52:	d906      	bls.n	800da62 <pbuf_copy+0xb2>
 800da54:	4b38      	ldr	r3, [pc, #224]	; (800db38 <pbuf_copy+0x188>)
 800da56:	f240 32d9 	movw	r2, #985	; 0x3d9
 800da5a:	493a      	ldr	r1, [pc, #232]	; (800db44 <pbuf_copy+0x194>)
 800da5c:	4838      	ldr	r0, [pc, #224]	; (800db40 <pbuf_copy+0x190>)
 800da5e:	f008 f9c7 	bl	8015df0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	895b      	ldrh	r3, [r3, #10]
 800da66:	461a      	mov	r2, r3
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	4293      	cmp	r3, r2
 800da6c:	d906      	bls.n	800da7c <pbuf_copy+0xcc>
 800da6e:	4b32      	ldr	r3, [pc, #200]	; (800db38 <pbuf_copy+0x188>)
 800da70:	f240 32da 	movw	r2, #986	; 0x3da
 800da74:	4934      	ldr	r1, [pc, #208]	; (800db48 <pbuf_copy+0x198>)
 800da76:	4832      	ldr	r0, [pc, #200]	; (800db40 <pbuf_copy+0x190>)
 800da78:	f008 f9ba 	bl	8015df0 <iprintf>
    if (offset_from >= p_from->len) {
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	895b      	ldrh	r3, [r3, #10]
 800da80:	461a      	mov	r2, r3
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	4293      	cmp	r3, r2
 800da86:	d304      	bcc.n	800da92 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800da88:	2300      	movs	r3, #0
 800da8a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	895b      	ldrh	r3, [r3, #10]
 800da96:	461a      	mov	r2, r3
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	4293      	cmp	r3, r2
 800da9c:	d114      	bne.n	800dac8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800da9e:	2300      	movs	r3, #0
 800daa0:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d10c      	bne.n	800dac8 <pbuf_copy+0x118>
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d009      	beq.n	800dac8 <pbuf_copy+0x118>
 800dab4:	4b20      	ldr	r3, [pc, #128]	; (800db38 <pbuf_copy+0x188>)
 800dab6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800daba:	4924      	ldr	r1, [pc, #144]	; (800db4c <pbuf_copy+0x19c>)
 800dabc:	4820      	ldr	r0, [pc, #128]	; (800db40 <pbuf_copy+0x190>)
 800dabe:	f008 f997 	bl	8015df0 <iprintf>
 800dac2:	f06f 030f 	mvn.w	r3, #15
 800dac6:	e032      	b.n	800db2e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dac8:	683b      	ldr	r3, [r7, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d013      	beq.n	800daf6 <pbuf_copy+0x146>
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	895a      	ldrh	r2, [r3, #10]
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	891b      	ldrh	r3, [r3, #8]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	d10d      	bne.n	800daf6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d009      	beq.n	800daf6 <pbuf_copy+0x146>
 800dae2:	4b15      	ldr	r3, [pc, #84]	; (800db38 <pbuf_copy+0x188>)
 800dae4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800dae8:	4919      	ldr	r1, [pc, #100]	; (800db50 <pbuf_copy+0x1a0>)
 800daea:	4815      	ldr	r0, [pc, #84]	; (800db40 <pbuf_copy+0x190>)
 800daec:	f008 f980 	bl	8015df0 <iprintf>
 800daf0:	f06f 0305 	mvn.w	r3, #5
 800daf4:	e01b      	b.n	800db2e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d013      	beq.n	800db24 <pbuf_copy+0x174>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	895a      	ldrh	r2, [r3, #10]
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	891b      	ldrh	r3, [r3, #8]
 800db04:	429a      	cmp	r2, r3
 800db06:	d10d      	bne.n	800db24 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d009      	beq.n	800db24 <pbuf_copy+0x174>
 800db10:	4b09      	ldr	r3, [pc, #36]	; (800db38 <pbuf_copy+0x188>)
 800db12:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800db16:	490e      	ldr	r1, [pc, #56]	; (800db50 <pbuf_copy+0x1a0>)
 800db18:	4809      	ldr	r0, [pc, #36]	; (800db40 <pbuf_copy+0x190>)
 800db1a:	f008 f969 	bl	8015df0 <iprintf>
 800db1e:	f06f 0305 	mvn.w	r3, #5
 800db22:	e004      	b.n	800db2e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	2b00      	cmp	r3, #0
 800db28:	f47f af61 	bne.w	800d9ee <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800db2c:	2300      	movs	r3, #0
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3718      	adds	r7, #24
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	080175e0 	.word	0x080175e0
 800db3c:	08017888 	.word	0x08017888
 800db40:	08017640 	.word	0x08017640
 800db44:	080178b8 	.word	0x080178b8
 800db48:	080178d0 	.word	0x080178d0
 800db4c:	080178ec 	.word	0x080178ec
 800db50:	080178fc 	.word	0x080178fc

0800db54 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b088      	sub	sp, #32
 800db58:	af00      	add	r7, sp, #0
 800db5a:	60f8      	str	r0, [r7, #12]
 800db5c:	60b9      	str	r1, [r7, #8]
 800db5e:	4611      	mov	r1, r2
 800db60:	461a      	mov	r2, r3
 800db62:	460b      	mov	r3, r1
 800db64:	80fb      	strh	r3, [r7, #6]
 800db66:	4613      	mov	r3, r2
 800db68:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800db6a:	2300      	movs	r3, #0
 800db6c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800db6e:	2300      	movs	r3, #0
 800db70:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d108      	bne.n	800db8a <pbuf_copy_partial+0x36>
 800db78:	4b2b      	ldr	r3, [pc, #172]	; (800dc28 <pbuf_copy_partial+0xd4>)
 800db7a:	f240 420a 	movw	r2, #1034	; 0x40a
 800db7e:	492b      	ldr	r1, [pc, #172]	; (800dc2c <pbuf_copy_partial+0xd8>)
 800db80:	482b      	ldr	r0, [pc, #172]	; (800dc30 <pbuf_copy_partial+0xdc>)
 800db82:	f008 f935 	bl	8015df0 <iprintf>
 800db86:	2300      	movs	r3, #0
 800db88:	e04a      	b.n	800dc20 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d108      	bne.n	800dba2 <pbuf_copy_partial+0x4e>
 800db90:	4b25      	ldr	r3, [pc, #148]	; (800dc28 <pbuf_copy_partial+0xd4>)
 800db92:	f240 420b 	movw	r2, #1035	; 0x40b
 800db96:	4927      	ldr	r1, [pc, #156]	; (800dc34 <pbuf_copy_partial+0xe0>)
 800db98:	4825      	ldr	r0, [pc, #148]	; (800dc30 <pbuf_copy_partial+0xdc>)
 800db9a:	f008 f929 	bl	8015df0 <iprintf>
 800db9e:	2300      	movs	r3, #0
 800dba0:	e03e      	b.n	800dc20 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	61fb      	str	r3, [r7, #28]
 800dba6:	e034      	b.n	800dc12 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800dba8:	88bb      	ldrh	r3, [r7, #4]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d00a      	beq.n	800dbc4 <pbuf_copy_partial+0x70>
 800dbae:	69fb      	ldr	r3, [r7, #28]
 800dbb0:	895b      	ldrh	r3, [r3, #10]
 800dbb2:	88ba      	ldrh	r2, [r7, #4]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d305      	bcc.n	800dbc4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800dbb8:	69fb      	ldr	r3, [r7, #28]
 800dbba:	895b      	ldrh	r3, [r3, #10]
 800dbbc:	88ba      	ldrh	r2, [r7, #4]
 800dbbe:	1ad3      	subs	r3, r2, r3
 800dbc0:	80bb      	strh	r3, [r7, #4]
 800dbc2:	e023      	b.n	800dc0c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	895a      	ldrh	r2, [r3, #10]
 800dbc8:	88bb      	ldrh	r3, [r7, #4]
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dbce:	8b3a      	ldrh	r2, [r7, #24]
 800dbd0:	88fb      	ldrh	r3, [r7, #6]
 800dbd2:	429a      	cmp	r2, r3
 800dbd4:	d901      	bls.n	800dbda <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800dbd6:	88fb      	ldrh	r3, [r7, #6]
 800dbd8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800dbda:	8b7b      	ldrh	r3, [r7, #26]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	18d0      	adds	r0, r2, r3
 800dbe0:	69fb      	ldr	r3, [r7, #28]
 800dbe2:	685a      	ldr	r2, [r3, #4]
 800dbe4:	88bb      	ldrh	r3, [r7, #4]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	8b3a      	ldrh	r2, [r7, #24]
 800dbea:	4619      	mov	r1, r3
 800dbec:	f008 f8ea 	bl	8015dc4 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800dbf0:	8afa      	ldrh	r2, [r7, #22]
 800dbf2:	8b3b      	ldrh	r3, [r7, #24]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800dbf8:	8b7a      	ldrh	r2, [r7, #26]
 800dbfa:	8b3b      	ldrh	r3, [r7, #24]
 800dbfc:	4413      	add	r3, r2
 800dbfe:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800dc00:	88fa      	ldrh	r2, [r7, #6]
 800dc02:	8b3b      	ldrh	r3, [r7, #24]
 800dc04:	1ad3      	subs	r3, r2, r3
 800dc06:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc0c:	69fb      	ldr	r3, [r7, #28]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	61fb      	str	r3, [r7, #28]
 800dc12:	88fb      	ldrh	r3, [r7, #6]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <pbuf_copy_partial+0xca>
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1c4      	bne.n	800dba8 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800dc1e:	8afb      	ldrh	r3, [r7, #22]
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3720      	adds	r7, #32
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	080175e0 	.word	0x080175e0
 800dc2c:	08017928 	.word	0x08017928
 800dc30:	08017640 	.word	0x08017640
 800dc34:	08017948 	.word	0x08017948

0800dc38 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b084      	sub	sp, #16
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	4603      	mov	r3, r0
 800dc40:	603a      	str	r2, [r7, #0]
 800dc42:	71fb      	strb	r3, [r7, #7]
 800dc44:	460b      	mov	r3, r1
 800dc46:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800dc48:	683b      	ldr	r3, [r7, #0]
 800dc4a:	8919      	ldrh	r1, [r3, #8]
 800dc4c:	88ba      	ldrh	r2, [r7, #4]
 800dc4e:	79fb      	ldrb	r3, [r7, #7]
 800dc50:	4618      	mov	r0, r3
 800dc52:	f7ff faa5 	bl	800d1a0 <pbuf_alloc>
 800dc56:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d101      	bne.n	800dc62 <pbuf_clone+0x2a>
    return NULL;
 800dc5e:	2300      	movs	r3, #0
 800dc60:	e011      	b.n	800dc86 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800dc62:	6839      	ldr	r1, [r7, #0]
 800dc64:	68f8      	ldr	r0, [r7, #12]
 800dc66:	f7ff fea3 	bl	800d9b0 <pbuf_copy>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800dc6e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d006      	beq.n	800dc84 <pbuf_clone+0x4c>
 800dc76:	4b06      	ldr	r3, [pc, #24]	; (800dc90 <pbuf_clone+0x58>)
 800dc78:	f240 5224 	movw	r2, #1316	; 0x524
 800dc7c:	4905      	ldr	r1, [pc, #20]	; (800dc94 <pbuf_clone+0x5c>)
 800dc7e:	4806      	ldr	r0, [pc, #24]	; (800dc98 <pbuf_clone+0x60>)
 800dc80:	f008 f8b6 	bl	8015df0 <iprintf>
  return q;
 800dc84:	68fb      	ldr	r3, [r7, #12]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}
 800dc8e:	bf00      	nop
 800dc90:	080175e0 	.word	0x080175e0
 800dc94:	08017a54 	.word	0x08017a54
 800dc98:	08017640 	.word	0x08017640

0800dc9c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dc9c:	b580      	push	{r7, lr}
 800dc9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800dca0:	f008 f8be 	bl	8015e20 <rand>
 800dca4:	4603      	mov	r3, r0
 800dca6:	b29b      	uxth	r3, r3
 800dca8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800dcac:	b29b      	uxth	r3, r3
 800dcae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800dcb2:	b29a      	uxth	r2, r3
 800dcb4:	4b01      	ldr	r3, [pc, #4]	; (800dcbc <tcp_init+0x20>)
 800dcb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800dcb8:	bf00      	nop
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20000010 	.word	0x20000010

0800dcc0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b082      	sub	sp, #8
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	7d1b      	ldrb	r3, [r3, #20]
 800dccc:	2b01      	cmp	r3, #1
 800dcce:	d105      	bne.n	800dcdc <tcp_free+0x1c>
 800dcd0:	4b06      	ldr	r3, [pc, #24]	; (800dcec <tcp_free+0x2c>)
 800dcd2:	22d4      	movs	r2, #212	; 0xd4
 800dcd4:	4906      	ldr	r1, [pc, #24]	; (800dcf0 <tcp_free+0x30>)
 800dcd6:	4807      	ldr	r0, [pc, #28]	; (800dcf4 <tcp_free+0x34>)
 800dcd8:	f008 f88a 	bl	8015df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800dcdc:	6879      	ldr	r1, [r7, #4]
 800dcde:	2001      	movs	r0, #1
 800dce0:	f7fe fe9e 	bl	800ca20 <memp_free>
}
 800dce4:	bf00      	nop
 800dce6:	3708      	adds	r7, #8
 800dce8:	46bd      	mov	sp, r7
 800dcea:	bd80      	pop	{r7, pc}
 800dcec:	08017ae0 	.word	0x08017ae0
 800dcf0:	08017b10 	.word	0x08017b10
 800dcf4:	08017b24 	.word	0x08017b24

0800dcf8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b082      	sub	sp, #8
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	7d1b      	ldrb	r3, [r3, #20]
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d105      	bne.n	800dd14 <tcp_free_listen+0x1c>
 800dd08:	4b06      	ldr	r3, [pc, #24]	; (800dd24 <tcp_free_listen+0x2c>)
 800dd0a:	22df      	movs	r2, #223	; 0xdf
 800dd0c:	4906      	ldr	r1, [pc, #24]	; (800dd28 <tcp_free_listen+0x30>)
 800dd0e:	4807      	ldr	r0, [pc, #28]	; (800dd2c <tcp_free_listen+0x34>)
 800dd10:	f008 f86e 	bl	8015df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dd14:	6879      	ldr	r1, [r7, #4]
 800dd16:	2002      	movs	r0, #2
 800dd18:	f7fe fe82 	bl	800ca20 <memp_free>
}
 800dd1c:	bf00      	nop
 800dd1e:	3708      	adds	r7, #8
 800dd20:	46bd      	mov	sp, r7
 800dd22:	bd80      	pop	{r7, pc}
 800dd24:	08017ae0 	.word	0x08017ae0
 800dd28:	08017b4c 	.word	0x08017b4c
 800dd2c:	08017b24 	.word	0x08017b24

0800dd30 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dd34:	f000 fea2 	bl	800ea7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dd38:	4b07      	ldr	r3, [pc, #28]	; (800dd58 <tcp_tmr+0x28>)
 800dd3a:	781b      	ldrb	r3, [r3, #0]
 800dd3c:	3301      	adds	r3, #1
 800dd3e:	b2da      	uxtb	r2, r3
 800dd40:	4b05      	ldr	r3, [pc, #20]	; (800dd58 <tcp_tmr+0x28>)
 800dd42:	701a      	strb	r2, [r3, #0]
 800dd44:	4b04      	ldr	r3, [pc, #16]	; (800dd58 <tcp_tmr+0x28>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	f003 0301 	and.w	r3, r3, #1
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dd50:	f000 fb54 	bl	800e3fc <tcp_slowtmr>
  }
}
 800dd54:	bf00      	nop
 800dd56:	bd80      	pop	{r7, pc}
 800dd58:	200045e9 	.word	0x200045e9

0800dd5c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]
 800dd64:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800dd66:	683b      	ldr	r3, [r7, #0]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d105      	bne.n	800dd78 <tcp_remove_listener+0x1c>
 800dd6c:	4b0d      	ldr	r3, [pc, #52]	; (800dda4 <tcp_remove_listener+0x48>)
 800dd6e:	22ff      	movs	r2, #255	; 0xff
 800dd70:	490d      	ldr	r1, [pc, #52]	; (800dda8 <tcp_remove_listener+0x4c>)
 800dd72:	480e      	ldr	r0, [pc, #56]	; (800ddac <tcp_remove_listener+0x50>)
 800dd74:	f008 f83c 	bl	8015df0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	60fb      	str	r3, [r7, #12]
 800dd7c:	e00a      	b.n	800dd94 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d102      	bne.n	800dd8e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	60fb      	str	r3, [r7, #12]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d1f1      	bne.n	800dd7e <tcp_remove_listener+0x22>
    }
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	bf00      	nop
 800dd9e:	3710      	adds	r7, #16
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	08017ae0 	.word	0x08017ae0
 800dda8:	08017b68 	.word	0x08017b68
 800ddac:	08017b24 	.word	0x08017b24

0800ddb0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d106      	bne.n	800ddcc <tcp_listen_closed+0x1c>
 800ddbe:	4b14      	ldr	r3, [pc, #80]	; (800de10 <tcp_listen_closed+0x60>)
 800ddc0:	f240 1211 	movw	r2, #273	; 0x111
 800ddc4:	4913      	ldr	r1, [pc, #76]	; (800de14 <tcp_listen_closed+0x64>)
 800ddc6:	4814      	ldr	r0, [pc, #80]	; (800de18 <tcp_listen_closed+0x68>)
 800ddc8:	f008 f812 	bl	8015df0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	7d1b      	ldrb	r3, [r3, #20]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d006      	beq.n	800dde2 <tcp_listen_closed+0x32>
 800ddd4:	4b0e      	ldr	r3, [pc, #56]	; (800de10 <tcp_listen_closed+0x60>)
 800ddd6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ddda:	4910      	ldr	r1, [pc, #64]	; (800de1c <tcp_listen_closed+0x6c>)
 800dddc:	480e      	ldr	r0, [pc, #56]	; (800de18 <tcp_listen_closed+0x68>)
 800ddde:	f008 f807 	bl	8015df0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dde2:	2301      	movs	r3, #1
 800dde4:	60fb      	str	r3, [r7, #12]
 800dde6:	e00b      	b.n	800de00 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800dde8:	4a0d      	ldr	r2, [pc, #52]	; (800de20 <tcp_listen_closed+0x70>)
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	f7ff ffb1 	bl	800dd5c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b03      	cmp	r3, #3
 800de04:	d9f0      	bls.n	800dde8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800de06:	bf00      	nop
 800de08:	bf00      	nop
 800de0a:	3710      	adds	r7, #16
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	08017ae0 	.word	0x08017ae0
 800de14:	08017b90 	.word	0x08017b90
 800de18:	08017b24 	.word	0x08017b24
 800de1c:	08017b9c 	.word	0x08017b9c
 800de20:	08019afc 	.word	0x08019afc

0800de24 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800de24:	b5b0      	push	{r4, r5, r7, lr}
 800de26:	b088      	sub	sp, #32
 800de28:	af04      	add	r7, sp, #16
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <tcp_close_shutdown+0x20>
 800de36:	4b63      	ldr	r3, [pc, #396]	; (800dfc4 <tcp_close_shutdown+0x1a0>)
 800de38:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800de3c:	4962      	ldr	r1, [pc, #392]	; (800dfc8 <tcp_close_shutdown+0x1a4>)
 800de3e:	4863      	ldr	r0, [pc, #396]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800de40:	f007 ffd6 	bl	8015df0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800de44:	78fb      	ldrb	r3, [r7, #3]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d066      	beq.n	800df18 <tcp_close_shutdown+0xf4>
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	7d1b      	ldrb	r3, [r3, #20]
 800de4e:	2b04      	cmp	r3, #4
 800de50:	d003      	beq.n	800de5a <tcp_close_shutdown+0x36>
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	7d1b      	ldrb	r3, [r3, #20]
 800de56:	2b07      	cmp	r3, #7
 800de58:	d15e      	bne.n	800df18 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d104      	bne.n	800de6c <tcp_close_shutdown+0x48>
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de66:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de6a:	d055      	beq.n	800df18 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	8b5b      	ldrh	r3, [r3, #26]
 800de70:	f003 0310 	and.w	r3, r3, #16
 800de74:	2b00      	cmp	r3, #0
 800de76:	d106      	bne.n	800de86 <tcp_close_shutdown+0x62>
 800de78:	4b52      	ldr	r3, [pc, #328]	; (800dfc4 <tcp_close_shutdown+0x1a0>)
 800de7a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800de7e:	4954      	ldr	r1, [pc, #336]	; (800dfd0 <tcp_close_shutdown+0x1ac>)
 800de80:	4852      	ldr	r0, [pc, #328]	; (800dfcc <tcp_close_shutdown+0x1a8>)
 800de82:	f007 ffb5 	bl	8015df0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800de8e:	687d      	ldr	r5, [r7, #4]
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	3304      	adds	r3, #4
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	8ad2      	ldrh	r2, [r2, #22]
 800de98:	6879      	ldr	r1, [r7, #4]
 800de9a:	8b09      	ldrh	r1, [r1, #24]
 800de9c:	9102      	str	r1, [sp, #8]
 800de9e:	9201      	str	r2, [sp, #4]
 800dea0:	9300      	str	r3, [sp, #0]
 800dea2:	462b      	mov	r3, r5
 800dea4:	4622      	mov	r2, r4
 800dea6:	4601      	mov	r1, r0
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f004 fe8d 	bl	8012bc8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f001 f8c6 	bl	800f040 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800deb4:	4b47      	ldr	r3, [pc, #284]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	429a      	cmp	r2, r3
 800debc:	d105      	bne.n	800deca <tcp_close_shutdown+0xa6>
 800debe:	4b45      	ldr	r3, [pc, #276]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	4a43      	ldr	r2, [pc, #268]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800dec6:	6013      	str	r3, [r2, #0]
 800dec8:	e013      	b.n	800def2 <tcp_close_shutdown+0xce>
 800deca:	4b42      	ldr	r3, [pc, #264]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e00c      	b.n	800deec <tcp_close_shutdown+0xc8>
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	68db      	ldr	r3, [r3, #12]
 800ded6:	687a      	ldr	r2, [r7, #4]
 800ded8:	429a      	cmp	r2, r3
 800deda:	d104      	bne.n	800dee6 <tcp_close_shutdown+0xc2>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	68da      	ldr	r2, [r3, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	60da      	str	r2, [r3, #12]
 800dee4:	e005      	b.n	800def2 <tcp_close_shutdown+0xce>
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	68db      	ldr	r3, [r3, #12]
 800deea:	60fb      	str	r3, [r7, #12]
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1ef      	bne.n	800ded2 <tcp_close_shutdown+0xae>
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2200      	movs	r2, #0
 800def6:	60da      	str	r2, [r3, #12]
 800def8:	4b37      	ldr	r3, [pc, #220]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800defa:	2201      	movs	r2, #1
 800defc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800defe:	4b37      	ldr	r3, [pc, #220]	; (800dfdc <tcp_close_shutdown+0x1b8>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	687a      	ldr	r2, [r7, #4]
 800df04:	429a      	cmp	r2, r3
 800df06:	d102      	bne.n	800df0e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800df08:	f003 fd5a 	bl	80119c0 <tcp_trigger_input_pcb_close>
 800df0c:	e002      	b.n	800df14 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7ff fed6 	bl	800dcc0 <tcp_free>
      }
      return ERR_OK;
 800df14:	2300      	movs	r3, #0
 800df16:	e050      	b.n	800dfba <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	7d1b      	ldrb	r3, [r3, #20]
 800df1c:	2b02      	cmp	r3, #2
 800df1e:	d03b      	beq.n	800df98 <tcp_close_shutdown+0x174>
 800df20:	2b02      	cmp	r3, #2
 800df22:	dc44      	bgt.n	800dfae <tcp_close_shutdown+0x18a>
 800df24:	2b00      	cmp	r3, #0
 800df26:	d002      	beq.n	800df2e <tcp_close_shutdown+0x10a>
 800df28:	2b01      	cmp	r3, #1
 800df2a:	d02a      	beq.n	800df82 <tcp_close_shutdown+0x15e>
 800df2c:	e03f      	b.n	800dfae <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	8adb      	ldrh	r3, [r3, #22]
 800df32:	2b00      	cmp	r3, #0
 800df34:	d021      	beq.n	800df7a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800df36:	4b2a      	ldr	r3, [pc, #168]	; (800dfe0 <tcp_close_shutdown+0x1bc>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	687a      	ldr	r2, [r7, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d105      	bne.n	800df4c <tcp_close_shutdown+0x128>
 800df40:	4b27      	ldr	r3, [pc, #156]	; (800dfe0 <tcp_close_shutdown+0x1bc>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	4a26      	ldr	r2, [pc, #152]	; (800dfe0 <tcp_close_shutdown+0x1bc>)
 800df48:	6013      	str	r3, [r2, #0]
 800df4a:	e013      	b.n	800df74 <tcp_close_shutdown+0x150>
 800df4c:	4b24      	ldr	r3, [pc, #144]	; (800dfe0 <tcp_close_shutdown+0x1bc>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	60bb      	str	r3, [r7, #8]
 800df52:	e00c      	b.n	800df6e <tcp_close_shutdown+0x14a>
 800df54:	68bb      	ldr	r3, [r7, #8]
 800df56:	68db      	ldr	r3, [r3, #12]
 800df58:	687a      	ldr	r2, [r7, #4]
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d104      	bne.n	800df68 <tcp_close_shutdown+0x144>
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	68da      	ldr	r2, [r3, #12]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	60da      	str	r2, [r3, #12]
 800df66:	e005      	b.n	800df74 <tcp_close_shutdown+0x150>
 800df68:	68bb      	ldr	r3, [r7, #8]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	60bb      	str	r3, [r7, #8]
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d1ef      	bne.n	800df54 <tcp_close_shutdown+0x130>
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	2200      	movs	r2, #0
 800df78:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f7ff fea0 	bl	800dcc0 <tcp_free>
      break;
 800df80:	e01a      	b.n	800dfb8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f7ff ff14 	bl	800ddb0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800df88:	6879      	ldr	r1, [r7, #4]
 800df8a:	4816      	ldr	r0, [pc, #88]	; (800dfe4 <tcp_close_shutdown+0x1c0>)
 800df8c:	f001 f8a8 	bl	800f0e0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800df90:	6878      	ldr	r0, [r7, #4]
 800df92:	f7ff feb1 	bl	800dcf8 <tcp_free_listen>
      break;
 800df96:	e00f      	b.n	800dfb8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800df98:	6879      	ldr	r1, [r7, #4]
 800df9a:	480e      	ldr	r0, [pc, #56]	; (800dfd4 <tcp_close_shutdown+0x1b0>)
 800df9c:	f001 f8a0 	bl	800f0e0 <tcp_pcb_remove>
 800dfa0:	4b0d      	ldr	r3, [pc, #52]	; (800dfd8 <tcp_close_shutdown+0x1b4>)
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7ff fe8a 	bl	800dcc0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dfac:	e004      	b.n	800dfb8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	f000 f81a 	bl	800dfe8 <tcp_close_shutdown_fin>
 800dfb4:	4603      	mov	r3, r0
 800dfb6:	e000      	b.n	800dfba <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dfb8:	2300      	movs	r3, #0
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bdb0      	pop	{r4, r5, r7, pc}
 800dfc2:	bf00      	nop
 800dfc4:	08017ae0 	.word	0x08017ae0
 800dfc8:	08017bb4 	.word	0x08017bb4
 800dfcc:	08017b24 	.word	0x08017b24
 800dfd0:	08017bd4 	.word	0x08017bd4
 800dfd4:	2000c930 	.word	0x2000c930
 800dfd8:	2000c92c 	.word	0x2000c92c
 800dfdc:	2000c944 	.word	0x2000c944
 800dfe0:	2000c93c 	.word	0x2000c93c
 800dfe4:	2000c938 	.word	0x2000c938

0800dfe8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b084      	sub	sp, #16
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d106      	bne.n	800e004 <tcp_close_shutdown_fin+0x1c>
 800dff6:	4b2e      	ldr	r3, [pc, #184]	; (800e0b0 <tcp_close_shutdown_fin+0xc8>)
 800dff8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800dffc:	492d      	ldr	r1, [pc, #180]	; (800e0b4 <tcp_close_shutdown_fin+0xcc>)
 800dffe:	482e      	ldr	r0, [pc, #184]	; (800e0b8 <tcp_close_shutdown_fin+0xd0>)
 800e000:	f007 fef6 	bl	8015df0 <iprintf>

  switch (pcb->state) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	7d1b      	ldrb	r3, [r3, #20]
 800e008:	2b07      	cmp	r3, #7
 800e00a:	d020      	beq.n	800e04e <tcp_close_shutdown_fin+0x66>
 800e00c:	2b07      	cmp	r3, #7
 800e00e:	dc2b      	bgt.n	800e068 <tcp_close_shutdown_fin+0x80>
 800e010:	2b03      	cmp	r3, #3
 800e012:	d002      	beq.n	800e01a <tcp_close_shutdown_fin+0x32>
 800e014:	2b04      	cmp	r3, #4
 800e016:	d00d      	beq.n	800e034 <tcp_close_shutdown_fin+0x4c>
 800e018:	e026      	b.n	800e068 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f003 fee2 	bl	8011de4 <tcp_send_fin>
 800e020:	4603      	mov	r3, r0
 800e022:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e024:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d11f      	bne.n	800e06c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	2205      	movs	r2, #5
 800e030:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e032:	e01b      	b.n	800e06c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f003 fed5 	bl	8011de4 <tcp_send_fin>
 800e03a:	4603      	mov	r3, r0
 800e03c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e042:	2b00      	cmp	r3, #0
 800e044:	d114      	bne.n	800e070 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2205      	movs	r2, #5
 800e04a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e04c:	e010      	b.n	800e070 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800e04e:	6878      	ldr	r0, [r7, #4]
 800e050:	f003 fec8 	bl	8011de4 <tcp_send_fin>
 800e054:	4603      	mov	r3, r0
 800e056:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800e058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d109      	bne.n	800e074 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2209      	movs	r2, #9
 800e064:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e066:	e005      	b.n	800e074 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800e068:	2300      	movs	r3, #0
 800e06a:	e01c      	b.n	800e0a6 <tcp_close_shutdown_fin+0xbe>
      break;
 800e06c:	bf00      	nop
 800e06e:	e002      	b.n	800e076 <tcp_close_shutdown_fin+0x8e>
      break;
 800e070:	bf00      	nop
 800e072:	e000      	b.n	800e076 <tcp_close_shutdown_fin+0x8e>
      break;
 800e074:	bf00      	nop
  }

  if (err == ERR_OK) {
 800e076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d103      	bne.n	800e086 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f003 ffee 	bl	8012060 <tcp_output>
 800e084:	e00d      	b.n	800e0a2 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800e086:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e08a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e08e:	d108      	bne.n	800e0a2 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	8b5b      	ldrh	r3, [r3, #26]
 800e094:	f043 0308 	orr.w	r3, r3, #8
 800e098:	b29a      	uxth	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e001      	b.n	800e0a6 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800e0a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	08017ae0 	.word	0x08017ae0
 800e0b4:	08017b90 	.word	0x08017b90
 800e0b8:	08017b24 	.word	0x08017b24

0800e0bc <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d109      	bne.n	800e0de <tcp_close+0x22>
 800e0ca:	4b0f      	ldr	r3, [pc, #60]	; (800e108 <tcp_close+0x4c>)
 800e0cc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800e0d0:	490e      	ldr	r1, [pc, #56]	; (800e10c <tcp_close+0x50>)
 800e0d2:	480f      	ldr	r0, [pc, #60]	; (800e110 <tcp_close+0x54>)
 800e0d4:	f007 fe8c 	bl	8015df0 <iprintf>
 800e0d8:	f06f 030f 	mvn.w	r3, #15
 800e0dc:	e00f      	b.n	800e0fe <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	7d1b      	ldrb	r3, [r3, #20]
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d006      	beq.n	800e0f4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	8b5b      	ldrh	r3, [r3, #26]
 800e0ea:	f043 0310 	orr.w	r3, r3, #16
 800e0ee:	b29a      	uxth	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e0f4:	2101      	movs	r1, #1
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7ff fe94 	bl	800de24 <tcp_close_shutdown>
 800e0fc:	4603      	mov	r3, r0
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}
 800e106:	bf00      	nop
 800e108:	08017ae0 	.word	0x08017ae0
 800e10c:	08017bf0 	.word	0x08017bf0
 800e110:	08017b24 	.word	0x08017b24

0800e114 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e114:	b580      	push	{r7, lr}
 800e116:	b08e      	sub	sp, #56	; 0x38
 800e118:	af04      	add	r7, sp, #16
 800e11a:	6078      	str	r0, [r7, #4]
 800e11c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d107      	bne.n	800e134 <tcp_abandon+0x20>
 800e124:	4b52      	ldr	r3, [pc, #328]	; (800e270 <tcp_abandon+0x15c>)
 800e126:	f240 223d 	movw	r2, #573	; 0x23d
 800e12a:	4952      	ldr	r1, [pc, #328]	; (800e274 <tcp_abandon+0x160>)
 800e12c:	4852      	ldr	r0, [pc, #328]	; (800e278 <tcp_abandon+0x164>)
 800e12e:	f007 fe5f 	bl	8015df0 <iprintf>
 800e132:	e099      	b.n	800e268 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	7d1b      	ldrb	r3, [r3, #20]
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d106      	bne.n	800e14a <tcp_abandon+0x36>
 800e13c:	4b4c      	ldr	r3, [pc, #304]	; (800e270 <tcp_abandon+0x15c>)
 800e13e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800e142:	494e      	ldr	r1, [pc, #312]	; (800e27c <tcp_abandon+0x168>)
 800e144:	484c      	ldr	r0, [pc, #304]	; (800e278 <tcp_abandon+0x164>)
 800e146:	f007 fe53 	bl	8015df0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	7d1b      	ldrb	r3, [r3, #20]
 800e14e:	2b0a      	cmp	r3, #10
 800e150:	d107      	bne.n	800e162 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e152:	6879      	ldr	r1, [r7, #4]
 800e154:	484a      	ldr	r0, [pc, #296]	; (800e280 <tcp_abandon+0x16c>)
 800e156:	f000 ffc3 	bl	800f0e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7ff fdb0 	bl	800dcc0 <tcp_free>
 800e160:	e082      	b.n	800e268 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800e162:	2300      	movs	r3, #0
 800e164:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e166:	2300      	movs	r3, #0
 800e168:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e16e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e174:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e17c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	691b      	ldr	r3, [r3, #16]
 800e182:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	7d1b      	ldrb	r3, [r3, #20]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d126      	bne.n	800e1da <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	8adb      	ldrh	r3, [r3, #22]
 800e190:	2b00      	cmp	r3, #0
 800e192:	d02e      	beq.n	800e1f2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e194:	4b3b      	ldr	r3, [pc, #236]	; (800e284 <tcp_abandon+0x170>)
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	687a      	ldr	r2, [r7, #4]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d105      	bne.n	800e1aa <tcp_abandon+0x96>
 800e19e:	4b39      	ldr	r3, [pc, #228]	; (800e284 <tcp_abandon+0x170>)
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	68db      	ldr	r3, [r3, #12]
 800e1a4:	4a37      	ldr	r2, [pc, #220]	; (800e284 <tcp_abandon+0x170>)
 800e1a6:	6013      	str	r3, [r2, #0]
 800e1a8:	e013      	b.n	800e1d2 <tcp_abandon+0xbe>
 800e1aa:	4b36      	ldr	r3, [pc, #216]	; (800e284 <tcp_abandon+0x170>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	61fb      	str	r3, [r7, #28]
 800e1b0:	e00c      	b.n	800e1cc <tcp_abandon+0xb8>
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	68db      	ldr	r3, [r3, #12]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	d104      	bne.n	800e1c6 <tcp_abandon+0xb2>
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	68da      	ldr	r2, [r3, #12]
 800e1c0:	69fb      	ldr	r3, [r7, #28]
 800e1c2:	60da      	str	r2, [r3, #12]
 800e1c4:	e005      	b.n	800e1d2 <tcp_abandon+0xbe>
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	68db      	ldr	r3, [r3, #12]
 800e1ca:	61fb      	str	r3, [r7, #28]
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d1ef      	bne.n	800e1b2 <tcp_abandon+0x9e>
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	60da      	str	r2, [r3, #12]
 800e1d8:	e00b      	b.n	800e1f2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	8adb      	ldrh	r3, [r3, #22]
 800e1e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e1e4:	6879      	ldr	r1, [r7, #4]
 800e1e6:	4828      	ldr	r0, [pc, #160]	; (800e288 <tcp_abandon+0x174>)
 800e1e8:	f000 ff7a 	bl	800f0e0 <tcp_pcb_remove>
 800e1ec:	4b27      	ldr	r3, [pc, #156]	; (800e28c <tcp_abandon+0x178>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d004      	beq.n	800e204 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e1fe:	4618      	mov	r0, r3
 800e200:	f000 fd1c 	bl	800ec3c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d004      	beq.n	800e216 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e210:	4618      	mov	r0, r3
 800e212:	f000 fd13 	bl	800ec3c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d004      	beq.n	800e228 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e222:	4618      	mov	r0, r3
 800e224:	f000 fd0a 	bl	800ec3c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800e228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d00e      	beq.n	800e24c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	3304      	adds	r3, #4
 800e234:	687a      	ldr	r2, [r7, #4]
 800e236:	8b12      	ldrh	r2, [r2, #24]
 800e238:	9202      	str	r2, [sp, #8]
 800e23a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e23c:	9201      	str	r2, [sp, #4]
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	460b      	mov	r3, r1
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	69b9      	ldr	r1, [r7, #24]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f004 fcbe 	bl	8012bc8 <tcp_rst>
    }
    last_state = pcb->state;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f7ff fd34 	bl	800dcc0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d004      	beq.n	800e268 <tcp_abandon+0x154>
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	f06f 010c 	mvn.w	r1, #12
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	4798      	blx	r3
  }
}
 800e268:	3728      	adds	r7, #40	; 0x28
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd80      	pop	{r7, pc}
 800e26e:	bf00      	nop
 800e270:	08017ae0 	.word	0x08017ae0
 800e274:	08017c24 	.word	0x08017c24
 800e278:	08017b24 	.word	0x08017b24
 800e27c:	08017c40 	.word	0x08017c40
 800e280:	2000c940 	.word	0x2000c940
 800e284:	2000c93c 	.word	0x2000c93c
 800e288:	2000c930 	.word	0x2000c930
 800e28c:	2000c92c 	.word	0x2000c92c

0800e290 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e298:	2101      	movs	r1, #1
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f7ff ff3a 	bl	800e114 <tcp_abandon>
}
 800e2a0:	bf00      	nop
 800e2a2:	3708      	adds	r7, #8
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	bd80      	pop	{r7, pc}

0800e2a8 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b084      	sub	sp, #16
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d106      	bne.n	800e2c4 <tcp_update_rcv_ann_wnd+0x1c>
 800e2b6:	4b25      	ldr	r3, [pc, #148]	; (800e34c <tcp_update_rcv_ann_wnd+0xa4>)
 800e2b8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e2bc:	4924      	ldr	r1, [pc, #144]	; (800e350 <tcp_update_rcv_ann_wnd+0xa8>)
 800e2be:	4825      	ldr	r0, [pc, #148]	; (800e354 <tcp_update_rcv_ann_wnd+0xac>)
 800e2c0:	f007 fd96 	bl	8015df0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e2cc:	4413      	add	r3, r2
 800e2ce:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2d4:	687a      	ldr	r2, [r7, #4]
 800e2d6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e2d8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e2dc:	bf28      	it	cs
 800e2de:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e2e2:	b292      	uxth	r2, r2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	68fa      	ldr	r2, [r7, #12]
 800e2e8:	1ad3      	subs	r3, r2, r3
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	db08      	blt.n	800e300 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2fa:	68fa      	ldr	r2, [r7, #12]
 800e2fc:	1ad3      	subs	r3, r2, r3
 800e2fe:	e020      	b.n	800e342 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e308:	1ad3      	subs	r3, r2, r3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	dd03      	ble.n	800e316 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2200      	movs	r2, #0
 800e312:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e314:	e014      	b.n	800e340 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e31e:	1ad3      	subs	r3, r2, r3
 800e320:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e328:	d306      	bcc.n	800e338 <tcp_update_rcv_ann_wnd+0x90>
 800e32a:	4b08      	ldr	r3, [pc, #32]	; (800e34c <tcp_update_rcv_ann_wnd+0xa4>)
 800e32c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e330:	4909      	ldr	r1, [pc, #36]	; (800e358 <tcp_update_rcv_ann_wnd+0xb0>)
 800e332:	4808      	ldr	r0, [pc, #32]	; (800e354 <tcp_update_rcv_ann_wnd+0xac>)
 800e334:	f007 fd5c 	bl	8015df0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	b29a      	uxth	r2, r3
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e340:	2300      	movs	r3, #0
  }
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	08017ae0 	.word	0x08017ae0
 800e350:	08017d3c 	.word	0x08017d3c
 800e354:	08017b24 	.word	0x08017b24
 800e358:	08017d60 	.word	0x08017d60

0800e35c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	460b      	mov	r3, r1
 800e366:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d107      	bne.n	800e37e <tcp_recved+0x22>
 800e36e:	4b1f      	ldr	r3, [pc, #124]	; (800e3ec <tcp_recved+0x90>)
 800e370:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e374:	491e      	ldr	r1, [pc, #120]	; (800e3f0 <tcp_recved+0x94>)
 800e376:	481f      	ldr	r0, [pc, #124]	; (800e3f4 <tcp_recved+0x98>)
 800e378:	f007 fd3a 	bl	8015df0 <iprintf>
 800e37c:	e032      	b.n	800e3e4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	7d1b      	ldrb	r3, [r3, #20]
 800e382:	2b01      	cmp	r3, #1
 800e384:	d106      	bne.n	800e394 <tcp_recved+0x38>
 800e386:	4b19      	ldr	r3, [pc, #100]	; (800e3ec <tcp_recved+0x90>)
 800e388:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e38c:	491a      	ldr	r1, [pc, #104]	; (800e3f8 <tcp_recved+0x9c>)
 800e38e:	4819      	ldr	r0, [pc, #100]	; (800e3f4 <tcp_recved+0x98>)
 800e390:	f007 fd2e 	bl	8015df0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e398:	887b      	ldrh	r3, [r7, #2]
 800e39a:	4413      	add	r3, r2
 800e39c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e39e:	89fb      	ldrh	r3, [r7, #14]
 800e3a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e3a4:	d804      	bhi.n	800e3b0 <tcp_recved+0x54>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e3aa:	89fa      	ldrh	r2, [r7, #14]
 800e3ac:	429a      	cmp	r2, r3
 800e3ae:	d204      	bcs.n	800e3ba <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e3b6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e3b8:	e002      	b.n	800e3c0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	89fa      	ldrh	r2, [r7, #14]
 800e3be:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff ff71 	bl	800e2a8 <tcp_update_rcv_ann_wnd>
 800e3c6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e3c8:	68bb      	ldr	r3, [r7, #8]
 800e3ca:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e3ce:	d309      	bcc.n	800e3e4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	8b5b      	ldrh	r3, [r3, #26]
 800e3d4:	f043 0302 	orr.w	r3, r3, #2
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f003 fe3e 	bl	8012060 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08017ae0 	.word	0x08017ae0
 800e3f0:	08017d7c 	.word	0x08017d7c
 800e3f4:	08017b24 	.word	0x08017b24
 800e3f8:	08017d94 	.word	0x08017d94

0800e3fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3fc:	b5b0      	push	{r4, r5, r7, lr}
 800e3fe:	b090      	sub	sp, #64	; 0x40
 800e400:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e402:	2300      	movs	r3, #0
 800e404:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e408:	4b94      	ldr	r3, [pc, #592]	; (800e65c <tcp_slowtmr+0x260>)
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	3301      	adds	r3, #1
 800e40e:	4a93      	ldr	r2, [pc, #588]	; (800e65c <tcp_slowtmr+0x260>)
 800e410:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e412:	4b93      	ldr	r3, [pc, #588]	; (800e660 <tcp_slowtmr+0x264>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	4b91      	ldr	r3, [pc, #580]	; (800e660 <tcp_slowtmr+0x264>)
 800e41c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e41e:	2300      	movs	r3, #0
 800e420:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e422:	4b90      	ldr	r3, [pc, #576]	; (800e664 <tcp_slowtmr+0x268>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e428:	e29d      	b.n	800e966 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42c:	7d1b      	ldrb	r3, [r3, #20]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d106      	bne.n	800e440 <tcp_slowtmr+0x44>
 800e432:	4b8d      	ldr	r3, [pc, #564]	; (800e668 <tcp_slowtmr+0x26c>)
 800e434:	f240 42be 	movw	r2, #1214	; 0x4be
 800e438:	498c      	ldr	r1, [pc, #560]	; (800e66c <tcp_slowtmr+0x270>)
 800e43a:	488d      	ldr	r0, [pc, #564]	; (800e670 <tcp_slowtmr+0x274>)
 800e43c:	f007 fcd8 	bl	8015df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e442:	7d1b      	ldrb	r3, [r3, #20]
 800e444:	2b01      	cmp	r3, #1
 800e446:	d106      	bne.n	800e456 <tcp_slowtmr+0x5a>
 800e448:	4b87      	ldr	r3, [pc, #540]	; (800e668 <tcp_slowtmr+0x26c>)
 800e44a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e44e:	4989      	ldr	r1, [pc, #548]	; (800e674 <tcp_slowtmr+0x278>)
 800e450:	4887      	ldr	r0, [pc, #540]	; (800e670 <tcp_slowtmr+0x274>)
 800e452:	f007 fccd 	bl	8015df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e458:	7d1b      	ldrb	r3, [r3, #20]
 800e45a:	2b0a      	cmp	r3, #10
 800e45c:	d106      	bne.n	800e46c <tcp_slowtmr+0x70>
 800e45e:	4b82      	ldr	r3, [pc, #520]	; (800e668 <tcp_slowtmr+0x26c>)
 800e460:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e464:	4984      	ldr	r1, [pc, #528]	; (800e678 <tcp_slowtmr+0x27c>)
 800e466:	4882      	ldr	r0, [pc, #520]	; (800e670 <tcp_slowtmr+0x274>)
 800e468:	f007 fcc2 	bl	8015df0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e46e:	7f9a      	ldrb	r2, [r3, #30]
 800e470:	4b7b      	ldr	r3, [pc, #492]	; (800e660 <tcp_slowtmr+0x264>)
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d105      	bne.n	800e484 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e482:	e270      	b.n	800e966 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e484:	4b76      	ldr	r3, [pc, #472]	; (800e660 <tcp_slowtmr+0x264>)
 800e486:	781a      	ldrb	r2, [r3, #0]
 800e488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e48a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e492:	2300      	movs	r3, #0
 800e494:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49a:	7d1b      	ldrb	r3, [r3, #20]
 800e49c:	2b02      	cmp	r3, #2
 800e49e:	d10a      	bne.n	800e4b6 <tcp_slowtmr+0xba>
 800e4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4a6:	2b05      	cmp	r3, #5
 800e4a8:	d905      	bls.n	800e4b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ae:	3301      	adds	r3, #1
 800e4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4b4:	e11e      	b.n	800e6f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4bc:	2b0b      	cmp	r3, #11
 800e4be:	d905      	bls.n	800e4cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e4c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4c4:	3301      	adds	r3, #1
 800e4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4ca:	e113      	b.n	800e6f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d075      	beq.n	800e5c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d006      	beq.n	800e4ec <tcp_slowtmr+0xf0>
 800e4de:	4b62      	ldr	r3, [pc, #392]	; (800e668 <tcp_slowtmr+0x26c>)
 800e4e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e4e4:	4965      	ldr	r1, [pc, #404]	; (800e67c <tcp_slowtmr+0x280>)
 800e4e6:	4862      	ldr	r0, [pc, #392]	; (800e670 <tcp_slowtmr+0x274>)
 800e4e8:	f007 fc82 	bl	8015df0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d106      	bne.n	800e502 <tcp_slowtmr+0x106>
 800e4f4:	4b5c      	ldr	r3, [pc, #368]	; (800e668 <tcp_slowtmr+0x26c>)
 800e4f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4fa:	4961      	ldr	r1, [pc, #388]	; (800e680 <tcp_slowtmr+0x284>)
 800e4fc:	485c      	ldr	r0, [pc, #368]	; (800e670 <tcp_slowtmr+0x274>)
 800e4fe:	f007 fc77 	bl	8015df0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e504:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e508:	2b0b      	cmp	r3, #11
 800e50a:	d905      	bls.n	800e518 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e50c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e510:	3301      	adds	r3, #1
 800e512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e516:	e0ed      	b.n	800e6f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e51e:	3b01      	subs	r3, #1
 800e520:	4a58      	ldr	r2, [pc, #352]	; (800e684 <tcp_slowtmr+0x288>)
 800e522:	5cd3      	ldrb	r3, [r2, r3]
 800e524:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e528:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e52c:	7c7a      	ldrb	r2, [r7, #17]
 800e52e:	429a      	cmp	r2, r3
 800e530:	d907      	bls.n	800e542 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e534:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e538:	3301      	adds	r3, #1
 800e53a:	b2da      	uxtb	r2, r3
 800e53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e53e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e544:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e548:	7c7a      	ldrb	r2, [r7, #17]
 800e54a:	429a      	cmp	r2, r3
 800e54c:	f200 80d2 	bhi.w	800e6f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e550:	2301      	movs	r3, #1
 800e552:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e556:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d108      	bne.n	800e570 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e55e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e560:	f004 fc26 	bl	8012db0 <tcp_zero_window_probe>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d014      	beq.n	800e594 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e56a:	2300      	movs	r3, #0
 800e56c:	623b      	str	r3, [r7, #32]
 800e56e:	e011      	b.n	800e594 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e576:	4619      	mov	r1, r3
 800e578:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e57a:	f003 faeb 	bl	8011b54 <tcp_split_unsent_seg>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d107      	bne.n	800e594 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e584:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e586:	f003 fd6b 	bl	8012060 <tcp_output>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d101      	bne.n	800e594 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e590:	2300      	movs	r3, #0
 800e592:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e594:	6a3b      	ldr	r3, [r7, #32]
 800e596:	2b00      	cmp	r3, #0
 800e598:	f000 80ac 	beq.w	800e6f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5aa:	2b06      	cmp	r3, #6
 800e5ac:	f200 80a2 	bhi.w	800e6f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e5c0:	e098      	b.n	800e6f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	db0f      	blt.n	800e5ec <tcp_slowtmr+0x1f0>
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e5d6:	4293      	cmp	r3, r2
 800e5d8:	d008      	beq.n	800e5ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5e0:	b29b      	uxth	r3, r3
 800e5e2:	3301      	adds	r3, #1
 800e5e4:	b29b      	uxth	r3, r3
 800e5e6:	b21a      	sxth	r2, r3
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e5f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	db7b      	blt.n	800e6f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5fe:	f004 f821 	bl	8012644 <tcp_rexmit_rto_prepare>
 800e602:	4603      	mov	r3, r0
 800e604:	2b00      	cmp	r3, #0
 800e606:	d007      	beq.n	800e618 <tcp_slowtmr+0x21c>
 800e608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e60a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	d171      	bne.n	800e6f4 <tcp_slowtmr+0x2f8>
 800e610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e614:	2b00      	cmp	r3, #0
 800e616:	d06d      	beq.n	800e6f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e61a:	7d1b      	ldrb	r3, [r3, #20]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d03a      	beq.n	800e696 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e622:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e626:	2b0c      	cmp	r3, #12
 800e628:	bf28      	it	cs
 800e62a:	230c      	movcs	r3, #12
 800e62c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e630:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e634:	10db      	asrs	r3, r3, #3
 800e636:	b21b      	sxth	r3, r3
 800e638:	461a      	mov	r2, r3
 800e63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e640:	4413      	add	r3, r2
 800e642:	7efa      	ldrb	r2, [r7, #27]
 800e644:	4910      	ldr	r1, [pc, #64]	; (800e688 <tcp_slowtmr+0x28c>)
 800e646:	5c8a      	ldrb	r2, [r1, r2]
 800e648:	4093      	lsls	r3, r2
 800e64a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e64c:	697b      	ldr	r3, [r7, #20]
 800e64e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e652:	4293      	cmp	r3, r2
 800e654:	dc1a      	bgt.n	800e68c <tcp_slowtmr+0x290>
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	b21a      	sxth	r2, r3
 800e65a:	e019      	b.n	800e690 <tcp_slowtmr+0x294>
 800e65c:	2000c934 	.word	0x2000c934
 800e660:	200045ea 	.word	0x200045ea
 800e664:	2000c930 	.word	0x2000c930
 800e668:	08017ae0 	.word	0x08017ae0
 800e66c:	08017e24 	.word	0x08017e24
 800e670:	08017b24 	.word	0x08017b24
 800e674:	08017e50 	.word	0x08017e50
 800e678:	08017e7c 	.word	0x08017e7c
 800e67c:	08017eac 	.word	0x08017eac
 800e680:	08017ee0 	.word	0x08017ee0
 800e684:	08019af4 	.word	0x08019af4
 800e688:	08019ae4 	.word	0x08019ae4
 800e68c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e692:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e698:	2200      	movs	r2, #0
 800e69a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e6a8:	4293      	cmp	r3, r2
 800e6aa:	bf28      	it	cs
 800e6ac:	4613      	movcs	r3, r2
 800e6ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e6b0:	8a7b      	ldrh	r3, [r7, #18]
 800e6b2:	085b      	lsrs	r3, r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6c6:	005b      	lsls	r3, r3, #1
 800e6c8:	b29b      	uxth	r3, r3
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d206      	bcs.n	800e6dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e6ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6d2:	005b      	lsls	r3, r3, #1
 800e6d4:	b29a      	uxth	r2, r3
 800e6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e6dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e6ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e6f0:	f004 f818 	bl	8012724 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f6:	7d1b      	ldrb	r3, [r3, #20]
 800e6f8:	2b06      	cmp	r3, #6
 800e6fa:	d111      	bne.n	800e720 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fe:	8b5b      	ldrh	r3, [r3, #26]
 800e700:	f003 0310 	and.w	r3, r3, #16
 800e704:	2b00      	cmp	r3, #0
 800e706:	d00b      	beq.n	800e720 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e708:	4b9c      	ldr	r3, [pc, #624]	; (800e97c <tcp_slowtmr+0x580>)
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	2b28      	cmp	r3, #40	; 0x28
 800e714:	d904      	bls.n	800e720 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e716:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e71a:	3301      	adds	r3, #1
 800e71c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e722:	7a5b      	ldrb	r3, [r3, #9]
 800e724:	f003 0308 	and.w	r3, r3, #8
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d04a      	beq.n	800e7c2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e730:	2b04      	cmp	r3, #4
 800e732:	d003      	beq.n	800e73c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e736:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e738:	2b07      	cmp	r3, #7
 800e73a:	d142      	bne.n	800e7c2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e73c:	4b8f      	ldr	r3, [pc, #572]	; (800e97c <tcp_slowtmr+0x580>)
 800e73e:	681a      	ldr	r2, [r3, #0]
 800e740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e742:	6a1b      	ldr	r3, [r3, #32]
 800e744:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e748:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e74c:	4b8c      	ldr	r3, [pc, #560]	; (800e980 <tcp_slowtmr+0x584>)
 800e74e:	440b      	add	r3, r1
 800e750:	498c      	ldr	r1, [pc, #560]	; (800e984 <tcp_slowtmr+0x588>)
 800e752:	fba1 1303 	umull	r1, r3, r1, r3
 800e756:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e758:	429a      	cmp	r2, r3
 800e75a:	d90a      	bls.n	800e772 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e75c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e760:	3301      	adds	r3, #1
 800e762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e766:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e76a:	3301      	adds	r3, #1
 800e76c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e770:	e027      	b.n	800e7c2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e772:	4b82      	ldr	r3, [pc, #520]	; (800e97c <tcp_slowtmr+0x580>)
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e778:	6a1b      	ldr	r3, [r3, #32]
 800e77a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e77e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e788:	4618      	mov	r0, r3
 800e78a:	4b7f      	ldr	r3, [pc, #508]	; (800e988 <tcp_slowtmr+0x58c>)
 800e78c:	fb03 f300 	mul.w	r3, r3, r0
 800e790:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e792:	497c      	ldr	r1, [pc, #496]	; (800e984 <tcp_slowtmr+0x588>)
 800e794:	fba1 1303 	umull	r1, r3, r1, r3
 800e798:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e79a:	429a      	cmp	r2, r3
 800e79c:	d911      	bls.n	800e7c2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800e79e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7a0:	f004 fac6 	bl	8012d30 <tcp_keepalive>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e7aa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d107      	bne.n	800e7c2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800e7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7be:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e7c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d011      	beq.n	800e7ee <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e7ca:	4b6c      	ldr	r3, [pc, #432]	; (800e97c <tcp_slowtmr+0x580>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d0:	6a1b      	ldr	r3, [r3, #32]
 800e7d2:	1ad2      	subs	r2, r2, r3
 800e7d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7d6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e7da:	4619      	mov	r1, r3
 800e7dc:	460b      	mov	r3, r1
 800e7de:	005b      	lsls	r3, r3, #1
 800e7e0:	440b      	add	r3, r1
 800e7e2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	d302      	bcc.n	800e7ee <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e7e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7ea:	f000 fddd 	bl	800f3a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e7ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7f0:	7d1b      	ldrb	r3, [r3, #20]
 800e7f2:	2b03      	cmp	r3, #3
 800e7f4:	d10b      	bne.n	800e80e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7f6:	4b61      	ldr	r3, [pc, #388]	; (800e97c <tcp_slowtmr+0x580>)
 800e7f8:	681a      	ldr	r2, [r3, #0]
 800e7fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	1ad3      	subs	r3, r2, r3
 800e800:	2b28      	cmp	r3, #40	; 0x28
 800e802:	d904      	bls.n	800e80e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e808:	3301      	adds	r3, #1
 800e80a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	7d1b      	ldrb	r3, [r3, #20]
 800e812:	2b09      	cmp	r3, #9
 800e814:	d10b      	bne.n	800e82e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e816:	4b59      	ldr	r3, [pc, #356]	; (800e97c <tcp_slowtmr+0x580>)
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e81c:	6a1b      	ldr	r3, [r3, #32]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	2bf0      	cmp	r3, #240	; 0xf0
 800e822:	d904      	bls.n	800e82e <tcp_slowtmr+0x432>
        ++pcb_remove;
 800e824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e828:	3301      	adds	r3, #1
 800e82a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e82e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e832:	2b00      	cmp	r3, #0
 800e834:	d060      	beq.n	800e8f8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e83c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e83e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e840:	f000 fbfe 	bl	800f040 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	2b00      	cmp	r3, #0
 800e848:	d010      	beq.n	800e86c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e84a:	4b50      	ldr	r3, [pc, #320]	; (800e98c <tcp_slowtmr+0x590>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e850:	429a      	cmp	r2, r3
 800e852:	d106      	bne.n	800e862 <tcp_slowtmr+0x466>
 800e854:	4b4e      	ldr	r3, [pc, #312]	; (800e990 <tcp_slowtmr+0x594>)
 800e856:	f240 526d 	movw	r2, #1389	; 0x56d
 800e85a:	494e      	ldr	r1, [pc, #312]	; (800e994 <tcp_slowtmr+0x598>)
 800e85c:	484e      	ldr	r0, [pc, #312]	; (800e998 <tcp_slowtmr+0x59c>)
 800e85e:	f007 fac7 	bl	8015df0 <iprintf>
        prev->next = pcb->next;
 800e862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e864:	68da      	ldr	r2, [r3, #12]
 800e866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e868:	60da      	str	r2, [r3, #12]
 800e86a:	e00f      	b.n	800e88c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e86c:	4b47      	ldr	r3, [pc, #284]	; (800e98c <tcp_slowtmr+0x590>)
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e872:	429a      	cmp	r2, r3
 800e874:	d006      	beq.n	800e884 <tcp_slowtmr+0x488>
 800e876:	4b46      	ldr	r3, [pc, #280]	; (800e990 <tcp_slowtmr+0x594>)
 800e878:	f240 5271 	movw	r2, #1393	; 0x571
 800e87c:	4947      	ldr	r1, [pc, #284]	; (800e99c <tcp_slowtmr+0x5a0>)
 800e87e:	4846      	ldr	r0, [pc, #280]	; (800e998 <tcp_slowtmr+0x59c>)
 800e880:	f007 fab6 	bl	8015df0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e886:	68db      	ldr	r3, [r3, #12]
 800e888:	4a40      	ldr	r2, [pc, #256]	; (800e98c <tcp_slowtmr+0x590>)
 800e88a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e88c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e890:	2b00      	cmp	r3, #0
 800e892:	d013      	beq.n	800e8bc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e896:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e89a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e89c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8a4:	8ad2      	ldrh	r2, [r2, #22]
 800e8a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e8a8:	8b09      	ldrh	r1, [r1, #24]
 800e8aa:	9102      	str	r1, [sp, #8]
 800e8ac:	9201      	str	r2, [sp, #4]
 800e8ae:	9300      	str	r3, [sp, #0]
 800e8b0:	462b      	mov	r3, r5
 800e8b2:	4622      	mov	r2, r4
 800e8b4:	4601      	mov	r1, r0
 800e8b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e8b8:	f004 f986 	bl	8012bc8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8be:	691b      	ldr	r3, [r3, #16]
 800e8c0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8c4:	7d1b      	ldrb	r3, [r3, #20]
 800e8c6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e8c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ca:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ce:	68db      	ldr	r3, [r3, #12]
 800e8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e8d2:	6838      	ldr	r0, [r7, #0]
 800e8d4:	f7ff f9f4 	bl	800dcc0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e8d8:	4b31      	ldr	r3, [pc, #196]	; (800e9a0 <tcp_slowtmr+0x5a4>)
 800e8da:	2200      	movs	r2, #0
 800e8dc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d004      	beq.n	800e8ee <tcp_slowtmr+0x4f2>
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	f06f 010c 	mvn.w	r1, #12
 800e8ea:	68b8      	ldr	r0, [r7, #8]
 800e8ec:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e8ee:	4b2c      	ldr	r3, [pc, #176]	; (800e9a0 <tcp_slowtmr+0x5a4>)
 800e8f0:	781b      	ldrb	r3, [r3, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d037      	beq.n	800e966 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800e8f6:	e592      	b.n	800e41e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	68db      	ldr	r3, [r3, #12]
 800e900:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e904:	7f1b      	ldrb	r3, [r3, #28]
 800e906:	3301      	adds	r3, #1
 800e908:	b2da      	uxtb	r2, r3
 800e90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e90c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e910:	7f1a      	ldrb	r2, [r3, #28]
 800e912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e914:	7f5b      	ldrb	r3, [r3, #29]
 800e916:	429a      	cmp	r2, r3
 800e918:	d325      	bcc.n	800e966 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800e91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e91c:	2200      	movs	r2, #0
 800e91e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e920:	4b1f      	ldr	r3, [pc, #124]	; (800e9a0 <tcp_slowtmr+0x5a4>)
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d00b      	beq.n	800e948 <tcp_slowtmr+0x54c>
 800e930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e938:	6912      	ldr	r2, [r2, #16]
 800e93a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e93c:	4610      	mov	r0, r2
 800e93e:	4798      	blx	r3
 800e940:	4603      	mov	r3, r0
 800e942:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e946:	e002      	b.n	800e94e <tcp_slowtmr+0x552>
 800e948:	2300      	movs	r3, #0
 800e94a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e94e:	4b14      	ldr	r3, [pc, #80]	; (800e9a0 <tcp_slowtmr+0x5a4>)
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d000      	beq.n	800e958 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800e956:	e562      	b.n	800e41e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e958:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d102      	bne.n	800e966 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800e960:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e962:	f003 fb7d 	bl	8012060 <tcp_output>
  while (pcb != NULL) {
 800e966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e968:	2b00      	cmp	r3, #0
 800e96a:	f47f ad5e 	bne.w	800e42a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e96e:	2300      	movs	r3, #0
 800e970:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e972:	4b0c      	ldr	r3, [pc, #48]	; (800e9a4 <tcp_slowtmr+0x5a8>)
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e978:	e069      	b.n	800ea4e <tcp_slowtmr+0x652>
 800e97a:	bf00      	nop
 800e97c:	2000c934 	.word	0x2000c934
 800e980:	000a4cb8 	.word	0x000a4cb8
 800e984:	10624dd3 	.word	0x10624dd3
 800e988:	000124f8 	.word	0x000124f8
 800e98c:	2000c930 	.word	0x2000c930
 800e990:	08017ae0 	.word	0x08017ae0
 800e994:	08017f18 	.word	0x08017f18
 800e998:	08017b24 	.word	0x08017b24
 800e99c:	08017f44 	.word	0x08017f44
 800e9a0:	2000c92c 	.word	0x2000c92c
 800e9a4:	2000c940 	.word	0x2000c940
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e9a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9aa:	7d1b      	ldrb	r3, [r3, #20]
 800e9ac:	2b0a      	cmp	r3, #10
 800e9ae:	d006      	beq.n	800e9be <tcp_slowtmr+0x5c2>
 800e9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ea60 <tcp_slowtmr+0x664>)
 800e9b2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e9b6:	492b      	ldr	r1, [pc, #172]	; (800ea64 <tcp_slowtmr+0x668>)
 800e9b8:	482b      	ldr	r0, [pc, #172]	; (800ea68 <tcp_slowtmr+0x66c>)
 800e9ba:	f007 fa19 	bl	8015df0 <iprintf>
    pcb_remove = 0;
 800e9be:	2300      	movs	r3, #0
 800e9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e9c4:	4b29      	ldr	r3, [pc, #164]	; (800ea6c <tcp_slowtmr+0x670>)
 800e9c6:	681a      	ldr	r2, [r3, #0]
 800e9c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9ca:	6a1b      	ldr	r3, [r3, #32]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	2bf0      	cmp	r3, #240	; 0xf0
 800e9d0:	d904      	bls.n	800e9dc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e9d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9d6:	3301      	adds	r3, #1
 800e9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d02f      	beq.n	800ea44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e9e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e9e6:	f000 fb2b 	bl	800f040 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d010      	beq.n	800ea12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e9f0:	4b1f      	ldr	r3, [pc, #124]	; (800ea70 <tcp_slowtmr+0x674>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d106      	bne.n	800ea08 <tcp_slowtmr+0x60c>
 800e9fa:	4b19      	ldr	r3, [pc, #100]	; (800ea60 <tcp_slowtmr+0x664>)
 800e9fc:	f240 52af 	movw	r2, #1455	; 0x5af
 800ea00:	491c      	ldr	r1, [pc, #112]	; (800ea74 <tcp_slowtmr+0x678>)
 800ea02:	4819      	ldr	r0, [pc, #100]	; (800ea68 <tcp_slowtmr+0x66c>)
 800ea04:	f007 f9f4 	bl	8015df0 <iprintf>
        prev->next = pcb->next;
 800ea08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea0a:	68da      	ldr	r2, [r3, #12]
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	60da      	str	r2, [r3, #12]
 800ea10:	e00f      	b.n	800ea32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ea12:	4b17      	ldr	r3, [pc, #92]	; (800ea70 <tcp_slowtmr+0x674>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d006      	beq.n	800ea2a <tcp_slowtmr+0x62e>
 800ea1c:	4b10      	ldr	r3, [pc, #64]	; (800ea60 <tcp_slowtmr+0x664>)
 800ea1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ea22:	4915      	ldr	r1, [pc, #84]	; (800ea78 <tcp_slowtmr+0x67c>)
 800ea24:	4810      	ldr	r0, [pc, #64]	; (800ea68 <tcp_slowtmr+0x66c>)
 800ea26:	f007 f9e3 	bl	8015df0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ea2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea2c:	68db      	ldr	r3, [r3, #12]
 800ea2e:	4a10      	ldr	r2, [pc, #64]	; (800ea70 <tcp_slowtmr+0x674>)
 800ea30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ea32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ea36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea38:	68db      	ldr	r3, [r3, #12]
 800ea3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ea3c:	69f8      	ldr	r0, [r7, #28]
 800ea3e:	f7ff f93f 	bl	800dcc0 <tcp_free>
 800ea42:	e004      	b.n	800ea4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ea44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ea48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea4a:	68db      	ldr	r3, [r3, #12]
 800ea4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ea4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1a9      	bne.n	800e9a8 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea54:	bf00      	nop
 800ea56:	bf00      	nop
 800ea58:	3730      	adds	r7, #48	; 0x30
 800ea5a:	46bd      	mov	sp, r7
 800ea5c:	bdb0      	pop	{r4, r5, r7, pc}
 800ea5e:	bf00      	nop
 800ea60:	08017ae0 	.word	0x08017ae0
 800ea64:	08017f70 	.word	0x08017f70
 800ea68:	08017b24 	.word	0x08017b24
 800ea6c:	2000c934 	.word	0x2000c934
 800ea70:	2000c940 	.word	0x2000c940
 800ea74:	08017fa0 	.word	0x08017fa0
 800ea78:	08017fc8 	.word	0x08017fc8

0800ea7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea7c:	b580      	push	{r7, lr}
 800ea7e:	b082      	sub	sp, #8
 800ea80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea82:	4b2d      	ldr	r3, [pc, #180]	; (800eb38 <tcp_fasttmr+0xbc>)
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	3301      	adds	r3, #1
 800ea88:	b2da      	uxtb	r2, r3
 800ea8a:	4b2b      	ldr	r3, [pc, #172]	; (800eb38 <tcp_fasttmr+0xbc>)
 800ea8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea8e:	4b2b      	ldr	r3, [pc, #172]	; (800eb3c <tcp_fasttmr+0xc0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea94:	e048      	b.n	800eb28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	7f9a      	ldrb	r2, [r3, #30]
 800ea9a:	4b27      	ldr	r3, [pc, #156]	; (800eb38 <tcp_fasttmr+0xbc>)
 800ea9c:	781b      	ldrb	r3, [r3, #0]
 800ea9e:	429a      	cmp	r2, r3
 800eaa0:	d03f      	beq.n	800eb22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800eaa2:	4b25      	ldr	r3, [pc, #148]	; (800eb38 <tcp_fasttmr+0xbc>)
 800eaa4:	781a      	ldrb	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	8b5b      	ldrh	r3, [r3, #26]
 800eaae:	f003 0301 	and.w	r3, r3, #1
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d010      	beq.n	800ead8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	8b5b      	ldrh	r3, [r3, #26]
 800eaba:	f043 0302 	orr.w	r3, r3, #2
 800eabe:	b29a      	uxth	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f003 facb 	bl	8012060 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	8b5b      	ldrh	r3, [r3, #26]
 800eace:	f023 0303 	bic.w	r3, r3, #3
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	8b5b      	ldrh	r3, [r3, #26]
 800eadc:	f003 0308 	and.w	r3, r3, #8
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d009      	beq.n	800eaf8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	8b5b      	ldrh	r3, [r3, #26]
 800eae8:	f023 0308 	bic.w	r3, r3, #8
 800eaec:	b29a      	uxth	r2, r3
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f7ff fa78 	bl	800dfe8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	68db      	ldr	r3, [r3, #12]
 800eafc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d00a      	beq.n	800eb1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eb06:	4b0e      	ldr	r3, [pc, #56]	; (800eb40 <tcp_fasttmr+0xc4>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f000 f819 	bl	800eb44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eb12:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <tcp_fasttmr+0xc4>)
 800eb14:	781b      	ldrb	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d000      	beq.n	800eb1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eb1a:	e7b8      	b.n	800ea8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eb1c:	683b      	ldr	r3, [r7, #0]
 800eb1e:	607b      	str	r3, [r7, #4]
 800eb20:	e002      	b.n	800eb28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	68db      	ldr	r3, [r3, #12]
 800eb26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	d1b3      	bne.n	800ea96 <tcp_fasttmr+0x1a>
    }
  }
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	3708      	adds	r7, #8
 800eb34:	46bd      	mov	sp, r7
 800eb36:	bd80      	pop	{r7, pc}
 800eb38:	200045ea 	.word	0x200045ea
 800eb3c:	2000c930 	.word	0x2000c930
 800eb40:	2000c92c 	.word	0x2000c92c

0800eb44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eb44:	b590      	push	{r4, r7, lr}
 800eb46:	b085      	sub	sp, #20
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d109      	bne.n	800eb66 <tcp_process_refused_data+0x22>
 800eb52:	4b37      	ldr	r3, [pc, #220]	; (800ec30 <tcp_process_refused_data+0xec>)
 800eb54:	f240 6209 	movw	r2, #1545	; 0x609
 800eb58:	4936      	ldr	r1, [pc, #216]	; (800ec34 <tcp_process_refused_data+0xf0>)
 800eb5a:	4837      	ldr	r0, [pc, #220]	; (800ec38 <tcp_process_refused_data+0xf4>)
 800eb5c:	f007 f948 	bl	8015df0 <iprintf>
 800eb60:	f06f 030f 	mvn.w	r3, #15
 800eb64:	e060      	b.n	800ec28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb6a:	7b5b      	ldrb	r3, [r3, #13]
 800eb6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d00b      	beq.n	800eb9c <tcp_process_refused_data+0x58>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	6918      	ldr	r0, [r3, #16]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	68ba      	ldr	r2, [r7, #8]
 800eb92:	6879      	ldr	r1, [r7, #4]
 800eb94:	47a0      	blx	r4
 800eb96:	4603      	mov	r3, r0
 800eb98:	73fb      	strb	r3, [r7, #15]
 800eb9a:	e007      	b.n	800ebac <tcp_process_refused_data+0x68>
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	68ba      	ldr	r2, [r7, #8]
 800eba0:	6879      	ldr	r1, [r7, #4]
 800eba2:	2000      	movs	r0, #0
 800eba4:	f000 f8a4 	bl	800ecf0 <tcp_recv_null>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800ebac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d12a      	bne.n	800ec0a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800ebb4:	7bbb      	ldrb	r3, [r7, #14]
 800ebb6:	f003 0320 	and.w	r3, r3, #32
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d033      	beq.n	800ec26 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ebc6:	d005      	beq.n	800ebd4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ebcc:	3301      	adds	r3, #1
 800ebce:	b29a      	uxth	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d00b      	beq.n	800ebf6 <tcp_process_refused_data+0xb2>
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	6918      	ldr	r0, [r3, #16]
 800ebe8:	2300      	movs	r3, #0
 800ebea:	2200      	movs	r2, #0
 800ebec:	6879      	ldr	r1, [r7, #4]
 800ebee:	47a0      	blx	r4
 800ebf0:	4603      	mov	r3, r0
 800ebf2:	73fb      	strb	r3, [r7, #15]
 800ebf4:	e001      	b.n	800ebfa <tcp_process_refused_data+0xb6>
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ebfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebfe:	f113 0f0d 	cmn.w	r3, #13
 800ec02:	d110      	bne.n	800ec26 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ec04:	f06f 030c 	mvn.w	r3, #12
 800ec08:	e00e      	b.n	800ec28 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ec0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ec0e:	f113 0f0d 	cmn.w	r3, #13
 800ec12:	d102      	bne.n	800ec1a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ec14:	f06f 030c 	mvn.w	r3, #12
 800ec18:	e006      	b.n	800ec28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	68ba      	ldr	r2, [r7, #8]
 800ec1e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ec20:	f06f 0304 	mvn.w	r3, #4
 800ec24:	e000      	b.n	800ec28 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3714      	adds	r7, #20
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd90      	pop	{r4, r7, pc}
 800ec30:	08017ae0 	.word	0x08017ae0
 800ec34:	08017ff0 	.word	0x08017ff0
 800ec38:	08017b24 	.word	0x08017b24

0800ec3c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ec44:	e007      	b.n	800ec56 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f80a 	bl	800ec66 <tcp_seg_free>
    seg = next;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d1f4      	bne.n	800ec46 <tcp_segs_free+0xa>
  }
}
 800ec5c:	bf00      	nop
 800ec5e:	bf00      	nop
 800ec60:	3710      	adds	r7, #16
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b082      	sub	sp, #8
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00c      	beq.n	800ec8e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	685b      	ldr	r3, [r3, #4]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d004      	beq.n	800ec86 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe fd71 	bl	800d768 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	2003      	movs	r0, #3
 800ec8a:	f7fd fec9 	bl	800ca20 <memp_free>
  }
}
 800ec8e:	bf00      	nop
 800ec90:	3708      	adds	r7, #8
 800ec92:	46bd      	mov	sp, r7
 800ec94:	bd80      	pop	{r7, pc}
	...

0800ec98 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b084      	sub	sp, #16
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d106      	bne.n	800ecb4 <tcp_seg_copy+0x1c>
 800eca6:	4b0f      	ldr	r3, [pc, #60]	; (800ece4 <tcp_seg_copy+0x4c>)
 800eca8:	f240 6282 	movw	r2, #1666	; 0x682
 800ecac:	490e      	ldr	r1, [pc, #56]	; (800ece8 <tcp_seg_copy+0x50>)
 800ecae:	480f      	ldr	r0, [pc, #60]	; (800ecec <tcp_seg_copy+0x54>)
 800ecb0:	f007 f89e 	bl	8015df0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ecb4:	2003      	movs	r0, #3
 800ecb6:	f7fd fe61 	bl	800c97c <memp_malloc>
 800ecba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <tcp_seg_copy+0x2e>
    return NULL;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	e00a      	b.n	800ecdc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ecc6:	2210      	movs	r2, #16
 800ecc8:	6879      	ldr	r1, [r7, #4]
 800ecca:	68f8      	ldr	r0, [r7, #12]
 800eccc:	f007 f87a 	bl	8015dc4 <memcpy>
  pbuf_ref(cseg->p);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	685b      	ldr	r3, [r3, #4]
 800ecd4:	4618      	mov	r0, r3
 800ecd6:	f7fe fded 	bl	800d8b4 <pbuf_ref>
  return cseg;
 800ecda:	68fb      	ldr	r3, [r7, #12]
}
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3710      	adds	r7, #16
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}
 800ece4:	08017ae0 	.word	0x08017ae0
 800ece8:	08018034 	.word	0x08018034
 800ecec:	08017b24 	.word	0x08017b24

0800ecf0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b084      	sub	sp, #16
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
 800ecfc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecfe:	68bb      	ldr	r3, [r7, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d109      	bne.n	800ed18 <tcp_recv_null+0x28>
 800ed04:	4b12      	ldr	r3, [pc, #72]	; (800ed50 <tcp_recv_null+0x60>)
 800ed06:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ed0a:	4912      	ldr	r1, [pc, #72]	; (800ed54 <tcp_recv_null+0x64>)
 800ed0c:	4812      	ldr	r0, [pc, #72]	; (800ed58 <tcp_recv_null+0x68>)
 800ed0e:	f007 f86f 	bl	8015df0 <iprintf>
 800ed12:	f06f 030f 	mvn.w	r3, #15
 800ed16:	e016      	b.n	800ed46 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d009      	beq.n	800ed32 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	891b      	ldrh	r3, [r3, #8]
 800ed22:	4619      	mov	r1, r3
 800ed24:	68b8      	ldr	r0, [r7, #8]
 800ed26:	f7ff fb19 	bl	800e35c <tcp_recved>
    pbuf_free(p);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7fe fd1c 	bl	800d768 <pbuf_free>
 800ed30:	e008      	b.n	800ed44 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ed32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d104      	bne.n	800ed44 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ed3a:	68b8      	ldr	r0, [r7, #8]
 800ed3c:	f7ff f9be 	bl	800e0bc <tcp_close>
 800ed40:	4603      	mov	r3, r0
 800ed42:	e000      	b.n	800ed46 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	08017ae0 	.word	0x08017ae0
 800ed54:	08018050 	.word	0x08018050
 800ed58:	08017b24 	.word	0x08017b24

0800ed5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b086      	sub	sp, #24
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	4603      	mov	r3, r0
 800ed64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	db01      	blt.n	800ed72 <tcp_kill_prio+0x16>
 800ed6e:	79fb      	ldrb	r3, [r7, #7]
 800ed70:	e000      	b.n	800ed74 <tcp_kill_prio+0x18>
 800ed72:	237f      	movs	r3, #127	; 0x7f
 800ed74:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed76:	7afb      	ldrb	r3, [r7, #11]
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d034      	beq.n	800ede6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed7c:	7afb      	ldrb	r3, [r7, #11]
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed86:	2300      	movs	r3, #0
 800ed88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed8a:	4b19      	ldr	r3, [pc, #100]	; (800edf0 <tcp_kill_prio+0x94>)
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	617b      	str	r3, [r7, #20]
 800ed90:	e01f      	b.n	800edd2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	7d5b      	ldrb	r3, [r3, #21]
 800ed96:	7afa      	ldrb	r2, [r7, #11]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d80c      	bhi.n	800edb6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800eda0:	7afa      	ldrb	r2, [r7, #11]
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d112      	bne.n	800edcc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800eda6:	4b13      	ldr	r3, [pc, #76]	; (800edf4 <tcp_kill_prio+0x98>)
 800eda8:	681a      	ldr	r2, [r3, #0]
 800edaa:	697b      	ldr	r3, [r7, #20]
 800edac:	6a1b      	ldr	r3, [r3, #32]
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d80a      	bhi.n	800edcc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800edb6:	4b0f      	ldr	r3, [pc, #60]	; (800edf4 <tcp_kill_prio+0x98>)
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	697b      	ldr	r3, [r7, #20]
 800edbc:	6a1b      	ldr	r3, [r3, #32]
 800edbe:	1ad3      	subs	r3, r2, r3
 800edc0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800edc6:	697b      	ldr	r3, [r7, #20]
 800edc8:	7d5b      	ldrb	r3, [r3, #21]
 800edca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edcc:	697b      	ldr	r3, [r7, #20]
 800edce:	68db      	ldr	r3, [r3, #12]
 800edd0:	617b      	str	r3, [r7, #20]
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d1dc      	bne.n	800ed92 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d004      	beq.n	800ede8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800edde:	6938      	ldr	r0, [r7, #16]
 800ede0:	f7ff fa56 	bl	800e290 <tcp_abort>
 800ede4:	e000      	b.n	800ede8 <tcp_kill_prio+0x8c>
    return;
 800ede6:	bf00      	nop
  }
}
 800ede8:	3718      	adds	r7, #24
 800edea:	46bd      	mov	sp, r7
 800edec:	bd80      	pop	{r7, pc}
 800edee:	bf00      	nop
 800edf0:	2000c930 	.word	0x2000c930
 800edf4:	2000c934 	.word	0x2000c934

0800edf8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	4603      	mov	r3, r0
 800ee00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ee02:	79fb      	ldrb	r3, [r7, #7]
 800ee04:	2b08      	cmp	r3, #8
 800ee06:	d009      	beq.n	800ee1c <tcp_kill_state+0x24>
 800ee08:	79fb      	ldrb	r3, [r7, #7]
 800ee0a:	2b09      	cmp	r3, #9
 800ee0c:	d006      	beq.n	800ee1c <tcp_kill_state+0x24>
 800ee0e:	4b1a      	ldr	r3, [pc, #104]	; (800ee78 <tcp_kill_state+0x80>)
 800ee10:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800ee14:	4919      	ldr	r1, [pc, #100]	; (800ee7c <tcp_kill_state+0x84>)
 800ee16:	481a      	ldr	r0, [pc, #104]	; (800ee80 <tcp_kill_state+0x88>)
 800ee18:	f006 ffea 	bl	8015df0 <iprintf>

  inactivity = 0;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ee20:	2300      	movs	r3, #0
 800ee22:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee24:	4b17      	ldr	r3, [pc, #92]	; (800ee84 <tcp_kill_state+0x8c>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	617b      	str	r3, [r7, #20]
 800ee2a:	e017      	b.n	800ee5c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	7d1b      	ldrb	r3, [r3, #20]
 800ee30:	79fa      	ldrb	r2, [r7, #7]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d10f      	bne.n	800ee56 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee36:	4b14      	ldr	r3, [pc, #80]	; (800ee88 <tcp_kill_state+0x90>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	1ad3      	subs	r3, r2, r3
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d807      	bhi.n	800ee56 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ee46:	4b10      	ldr	r3, [pc, #64]	; (800ee88 <tcp_kill_state+0x90>)
 800ee48:	681a      	ldr	r2, [r3, #0]
 800ee4a:	697b      	ldr	r3, [r7, #20]
 800ee4c:	6a1b      	ldr	r3, [r3, #32]
 800ee4e:	1ad3      	subs	r3, r2, r3
 800ee50:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ee52:	697b      	ldr	r3, [r7, #20]
 800ee54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	68db      	ldr	r3, [r3, #12]
 800ee5a:	617b      	str	r3, [r7, #20]
 800ee5c:	697b      	ldr	r3, [r7, #20]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d1e4      	bne.n	800ee2c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee62:	693b      	ldr	r3, [r7, #16]
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d003      	beq.n	800ee70 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee68:	2100      	movs	r1, #0
 800ee6a:	6938      	ldr	r0, [r7, #16]
 800ee6c:	f7ff f952 	bl	800e114 <tcp_abandon>
  }
}
 800ee70:	bf00      	nop
 800ee72:	3718      	adds	r7, #24
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	08017ae0 	.word	0x08017ae0
 800ee7c:	0801806c 	.word	0x0801806c
 800ee80:	08017b24 	.word	0x08017b24
 800ee84:	2000c930 	.word	0x2000c930
 800ee88:	2000c934 	.word	0x2000c934

0800ee8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee92:	2300      	movs	r3, #0
 800ee94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee9a:	4b12      	ldr	r3, [pc, #72]	; (800eee4 <tcp_kill_timewait+0x58>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	60fb      	str	r3, [r7, #12]
 800eea0:	e012      	b.n	800eec8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eea2:	4b11      	ldr	r3, [pc, #68]	; (800eee8 <tcp_kill_timewait+0x5c>)
 800eea4:	681a      	ldr	r2, [r3, #0]
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	6a1b      	ldr	r3, [r3, #32]
 800eeaa:	1ad3      	subs	r3, r2, r3
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	429a      	cmp	r2, r3
 800eeb0:	d807      	bhi.n	800eec2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eeb2:	4b0d      	ldr	r3, [pc, #52]	; (800eee8 <tcp_kill_timewait+0x5c>)
 800eeb4:	681a      	ldr	r2, [r3, #0]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6a1b      	ldr	r3, [r3, #32]
 800eeba:	1ad3      	subs	r3, r2, r3
 800eebc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d1e9      	bne.n	800eea2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d002      	beq.n	800eeda <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eed4:	68b8      	ldr	r0, [r7, #8]
 800eed6:	f7ff f9db 	bl	800e290 <tcp_abort>
  }
}
 800eeda:	bf00      	nop
 800eedc:	3710      	adds	r7, #16
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	2000c940 	.word	0x2000c940
 800eee8:	2000c934 	.word	0x2000c934

0800eeec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800eef2:	4b10      	ldr	r3, [pc, #64]	; (800ef34 <tcp_handle_closepend+0x48>)
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eef8:	e014      	b.n	800ef24 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	8b5b      	ldrh	r3, [r3, #26]
 800ef04:	f003 0308 	and.w	r3, r3, #8
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d009      	beq.n	800ef20 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	8b5b      	ldrh	r3, [r3, #26]
 800ef10:	f023 0308 	bic.w	r3, r3, #8
 800ef14:	b29a      	uxth	r2, r3
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7ff f864 	bl	800dfe8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d1e7      	bne.n	800eefa <tcp_handle_closepend+0xe>
  }
}
 800ef2a:	bf00      	nop
 800ef2c:	bf00      	nop
 800ef2e:	3708      	adds	r7, #8
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	2000c930 	.word	0x2000c930

0800ef38 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	4603      	mov	r3, r0
 800ef40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef42:	2001      	movs	r0, #1
 800ef44:	f7fd fd1a 	bl	800c97c <memp_malloc>
 800ef48:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d126      	bne.n	800ef9e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ef50:	f7ff ffcc 	bl	800eeec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef54:	f7ff ff9a 	bl	800ee8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef58:	2001      	movs	r0, #1
 800ef5a:	f7fd fd0f 	bl	800c97c <memp_malloc>
 800ef5e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d11b      	bne.n	800ef9e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef66:	2009      	movs	r0, #9
 800ef68:	f7ff ff46 	bl	800edf8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef6c:	2001      	movs	r0, #1
 800ef6e:	f7fd fd05 	bl	800c97c <memp_malloc>
 800ef72:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef74:	68fb      	ldr	r3, [r7, #12]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d111      	bne.n	800ef9e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef7a:	2008      	movs	r0, #8
 800ef7c:	f7ff ff3c 	bl	800edf8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef80:	2001      	movs	r0, #1
 800ef82:	f7fd fcfb 	bl	800c97c <memp_malloc>
 800ef86:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d107      	bne.n	800ef9e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef8e:	79fb      	ldrb	r3, [r7, #7]
 800ef90:	4618      	mov	r0, r3
 800ef92:	f7ff fee3 	bl	800ed5c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef96:	2001      	movs	r0, #1
 800ef98:	f7fd fcf0 	bl	800c97c <memp_malloc>
 800ef9c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d03f      	beq.n	800f024 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800efa4:	229c      	movs	r2, #156	; 0x9c
 800efa6:	2100      	movs	r1, #0
 800efa8:	68f8      	ldr	r0, [r7, #12]
 800efaa:	f006 ff19 	bl	8015de0 <memset>
    pcb->prio = prio;
 800efae:	68fb      	ldr	r3, [r7, #12]
 800efb0:	79fa      	ldrb	r2, [r7, #7]
 800efb2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800efc4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	22ff      	movs	r2, #255	; 0xff
 800efd2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800efda:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2206      	movs	r2, #6
 800efe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2206      	movs	r2, #6
 800efe8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eff0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2201      	movs	r2, #1
 800eff6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800effa:	4b0d      	ldr	r3, [pc, #52]	; (800f030 <tcp_alloc+0xf8>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800f002:	4b0c      	ldr	r3, [pc, #48]	; (800f034 <tcp_alloc+0xfc>)
 800f004:	781a      	ldrb	r2, [r3, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800f010:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	4a08      	ldr	r2, [pc, #32]	; (800f038 <tcp_alloc+0x100>)
 800f018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	4a07      	ldr	r2, [pc, #28]	; (800f03c <tcp_alloc+0x104>)
 800f020:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800f024:	68fb      	ldr	r3, [r7, #12]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	2000c934 	.word	0x2000c934
 800f034:	200045ea 	.word	0x200045ea
 800f038:	0800ecf1 	.word	0x0800ecf1
 800f03c:	006ddd00 	.word	0x006ddd00

0800f040 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d107      	bne.n	800f05e <tcp_pcb_purge+0x1e>
 800f04e:	4b21      	ldr	r3, [pc, #132]	; (800f0d4 <tcp_pcb_purge+0x94>)
 800f050:	f640 0251 	movw	r2, #2129	; 0x851
 800f054:	4920      	ldr	r1, [pc, #128]	; (800f0d8 <tcp_pcb_purge+0x98>)
 800f056:	4821      	ldr	r0, [pc, #132]	; (800f0dc <tcp_pcb_purge+0x9c>)
 800f058:	f006 feca 	bl	8015df0 <iprintf>
 800f05c:	e037      	b.n	800f0ce <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	7d1b      	ldrb	r3, [r3, #20]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d033      	beq.n	800f0ce <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f06a:	2b0a      	cmp	r3, #10
 800f06c:	d02f      	beq.n	800f0ce <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f072:	2b01      	cmp	r3, #1
 800f074:	d02b      	beq.n	800f0ce <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d007      	beq.n	800f08e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe fb70 	bl	800d768 <pbuf_free>
      pcb->refused_data = NULL;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f092:	2b00      	cmp	r3, #0
 800f094:	d002      	beq.n	800f09c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f986 	bl	800f3a8 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0a2:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff fdc7 	bl	800ec3c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7ff fdc2 	bl	800ec3c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	66da      	str	r2, [r3, #108]	; 0x6c
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	2200      	movs	r2, #0
 800f0ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f0ce:	3708      	adds	r7, #8
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}
 800f0d4:	08017ae0 	.word	0x08017ae0
 800f0d8:	0801812c 	.word	0x0801812c
 800f0dc:	08017b24 	.word	0x08017b24

0800f0e0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b084      	sub	sp, #16
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f0ea:	683b      	ldr	r3, [r7, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d106      	bne.n	800f0fe <tcp_pcb_remove+0x1e>
 800f0f0:	4b3e      	ldr	r3, [pc, #248]	; (800f1ec <tcp_pcb_remove+0x10c>)
 800f0f2:	f640 0283 	movw	r2, #2179	; 0x883
 800f0f6:	493e      	ldr	r1, [pc, #248]	; (800f1f0 <tcp_pcb_remove+0x110>)
 800f0f8:	483e      	ldr	r0, [pc, #248]	; (800f1f4 <tcp_pcb_remove+0x114>)
 800f0fa:	f006 fe79 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d106      	bne.n	800f112 <tcp_pcb_remove+0x32>
 800f104:	4b39      	ldr	r3, [pc, #228]	; (800f1ec <tcp_pcb_remove+0x10c>)
 800f106:	f640 0284 	movw	r2, #2180	; 0x884
 800f10a:	493b      	ldr	r1, [pc, #236]	; (800f1f8 <tcp_pcb_remove+0x118>)
 800f10c:	4839      	ldr	r0, [pc, #228]	; (800f1f4 <tcp_pcb_remove+0x114>)
 800f10e:	f006 fe6f 	bl	8015df0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d105      	bne.n	800f128 <tcp_pcb_remove+0x48>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	68da      	ldr	r2, [r3, #12]
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	601a      	str	r2, [r3, #0]
 800f126:	e013      	b.n	800f150 <tcp_pcb_remove+0x70>
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	60fb      	str	r3, [r7, #12]
 800f12e:	e00c      	b.n	800f14a <tcp_pcb_remove+0x6a>
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	68db      	ldr	r3, [r3, #12]
 800f134:	683a      	ldr	r2, [r7, #0]
 800f136:	429a      	cmp	r2, r3
 800f138:	d104      	bne.n	800f144 <tcp_pcb_remove+0x64>
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68da      	ldr	r2, [r3, #12]
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	60da      	str	r2, [r3, #12]
 800f142:	e005      	b.n	800f150 <tcp_pcb_remove+0x70>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	68db      	ldr	r3, [r3, #12]
 800f148:	60fb      	str	r3, [r7, #12]
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d1ef      	bne.n	800f130 <tcp_pcb_remove+0x50>
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	2200      	movs	r2, #0
 800f154:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f156:	6838      	ldr	r0, [r7, #0]
 800f158:	f7ff ff72 	bl	800f040 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	7d1b      	ldrb	r3, [r3, #20]
 800f160:	2b0a      	cmp	r3, #10
 800f162:	d013      	beq.n	800f18c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f164:	683b      	ldr	r3, [r7, #0]
 800f166:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f168:	2b01      	cmp	r3, #1
 800f16a:	d00f      	beq.n	800f18c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	8b5b      	ldrh	r3, [r3, #26]
 800f170:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f174:	2b00      	cmp	r3, #0
 800f176:	d009      	beq.n	800f18c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f178:	683b      	ldr	r3, [r7, #0]
 800f17a:	8b5b      	ldrh	r3, [r3, #26]
 800f17c:	f043 0302 	orr.w	r3, r3, #2
 800f180:	b29a      	uxth	r2, r3
 800f182:	683b      	ldr	r3, [r7, #0]
 800f184:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f186:	6838      	ldr	r0, [r7, #0]
 800f188:	f002 ff6a 	bl	8012060 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f18c:	683b      	ldr	r3, [r7, #0]
 800f18e:	7d1b      	ldrb	r3, [r3, #20]
 800f190:	2b01      	cmp	r3, #1
 800f192:	d020      	beq.n	800f1d6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f194:	683b      	ldr	r3, [r7, #0]
 800f196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d006      	beq.n	800f1aa <tcp_pcb_remove+0xca>
 800f19c:	4b13      	ldr	r3, [pc, #76]	; (800f1ec <tcp_pcb_remove+0x10c>)
 800f19e:	f640 0293 	movw	r2, #2195	; 0x893
 800f1a2:	4916      	ldr	r1, [pc, #88]	; (800f1fc <tcp_pcb_remove+0x11c>)
 800f1a4:	4813      	ldr	r0, [pc, #76]	; (800f1f4 <tcp_pcb_remove+0x114>)
 800f1a6:	f006 fe23 	bl	8015df0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f1aa:	683b      	ldr	r3, [r7, #0]
 800f1ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1ae:	2b00      	cmp	r3, #0
 800f1b0:	d006      	beq.n	800f1c0 <tcp_pcb_remove+0xe0>
 800f1b2:	4b0e      	ldr	r3, [pc, #56]	; (800f1ec <tcp_pcb_remove+0x10c>)
 800f1b4:	f640 0294 	movw	r2, #2196	; 0x894
 800f1b8:	4911      	ldr	r1, [pc, #68]	; (800f200 <tcp_pcb_remove+0x120>)
 800f1ba:	480e      	ldr	r0, [pc, #56]	; (800f1f4 <tcp_pcb_remove+0x114>)
 800f1bc:	f006 fe18 	bl	8015df0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d006      	beq.n	800f1d6 <tcp_pcb_remove+0xf6>
 800f1c8:	4b08      	ldr	r3, [pc, #32]	; (800f1ec <tcp_pcb_remove+0x10c>)
 800f1ca:	f640 0296 	movw	r2, #2198	; 0x896
 800f1ce:	490d      	ldr	r1, [pc, #52]	; (800f204 <tcp_pcb_remove+0x124>)
 800f1d0:	4808      	ldr	r0, [pc, #32]	; (800f1f4 <tcp_pcb_remove+0x114>)
 800f1d2:	f006 fe0d 	bl	8015df0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	2200      	movs	r2, #0
 800f1da:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	2200      	movs	r2, #0
 800f1e0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f1e2:	bf00      	nop
 800f1e4:	3710      	adds	r7, #16
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}
 800f1ea:	bf00      	nop
 800f1ec:	08017ae0 	.word	0x08017ae0
 800f1f0:	08018148 	.word	0x08018148
 800f1f4:	08017b24 	.word	0x08017b24
 800f1f8:	08018164 	.word	0x08018164
 800f1fc:	08018184 	.word	0x08018184
 800f200:	0801819c 	.word	0x0801819c
 800f204:	080181b8 	.word	0x080181b8

0800f208 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b082      	sub	sp, #8
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	2b00      	cmp	r3, #0
 800f214:	d106      	bne.n	800f224 <tcp_next_iss+0x1c>
 800f216:	4b0a      	ldr	r3, [pc, #40]	; (800f240 <tcp_next_iss+0x38>)
 800f218:	f640 02af 	movw	r2, #2223	; 0x8af
 800f21c:	4909      	ldr	r1, [pc, #36]	; (800f244 <tcp_next_iss+0x3c>)
 800f21e:	480a      	ldr	r0, [pc, #40]	; (800f248 <tcp_next_iss+0x40>)
 800f220:	f006 fde6 	bl	8015df0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f224:	4b09      	ldr	r3, [pc, #36]	; (800f24c <tcp_next_iss+0x44>)
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	4b09      	ldr	r3, [pc, #36]	; (800f250 <tcp_next_iss+0x48>)
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	4413      	add	r3, r2
 800f22e:	4a07      	ldr	r2, [pc, #28]	; (800f24c <tcp_next_iss+0x44>)
 800f230:	6013      	str	r3, [r2, #0]
  return iss;
 800f232:	4b06      	ldr	r3, [pc, #24]	; (800f24c <tcp_next_iss+0x44>)
 800f234:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f236:	4618      	mov	r0, r3
 800f238:	3708      	adds	r7, #8
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	08017ae0 	.word	0x08017ae0
 800f244:	080181d0 	.word	0x080181d0
 800f248:	08017b24 	.word	0x08017b24
 800f24c:	20000014 	.word	0x20000014
 800f250:	2000c934 	.word	0x2000c934

0800f254 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b086      	sub	sp, #24
 800f258:	af00      	add	r7, sp, #0
 800f25a:	4603      	mov	r3, r0
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	607a      	str	r2, [r7, #4]
 800f260:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d106      	bne.n	800f276 <tcp_eff_send_mss_netif+0x22>
 800f268:	4b14      	ldr	r3, [pc, #80]	; (800f2bc <tcp_eff_send_mss_netif+0x68>)
 800f26a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f26e:	4914      	ldr	r1, [pc, #80]	; (800f2c0 <tcp_eff_send_mss_netif+0x6c>)
 800f270:	4814      	ldr	r0, [pc, #80]	; (800f2c4 <tcp_eff_send_mss_netif+0x70>)
 800f272:	f006 fdbd 	bl	8015df0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d101      	bne.n	800f280 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f27c:	89fb      	ldrh	r3, [r7, #14]
 800f27e:	e019      	b.n	800f2b4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f284:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f286:	8afb      	ldrh	r3, [r7, #22]
 800f288:	2b00      	cmp	r3, #0
 800f28a:	d012      	beq.n	800f2b2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f28c:	2328      	movs	r3, #40	; 0x28
 800f28e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f290:	8afa      	ldrh	r2, [r7, #22]
 800f292:	8abb      	ldrh	r3, [r7, #20]
 800f294:	429a      	cmp	r2, r3
 800f296:	d904      	bls.n	800f2a2 <tcp_eff_send_mss_netif+0x4e>
 800f298:	8afa      	ldrh	r2, [r7, #22]
 800f29a:	8abb      	ldrh	r3, [r7, #20]
 800f29c:	1ad3      	subs	r3, r2, r3
 800f29e:	b29b      	uxth	r3, r3
 800f2a0:	e000      	b.n	800f2a4 <tcp_eff_send_mss_netif+0x50>
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f2a6:	8a7a      	ldrh	r2, [r7, #18]
 800f2a8:	89fb      	ldrh	r3, [r7, #14]
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	bf28      	it	cs
 800f2ae:	4613      	movcs	r3, r2
 800f2b0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f2b2:	89fb      	ldrh	r3, [r7, #14]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	08017ae0 	.word	0x08017ae0
 800f2c0:	080181ec 	.word	0x080181ec
 800f2c4:	08017b24 	.word	0x08017b24

0800f2c8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b084      	sub	sp, #16
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d119      	bne.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f2dc:	4b10      	ldr	r3, [pc, #64]	; (800f320 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f2de:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f2e2:	4910      	ldr	r1, [pc, #64]	; (800f324 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f2e4:	4810      	ldr	r0, [pc, #64]	; (800f328 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f2e6:	f006 fd83 	bl	8015df0 <iprintf>

  while (pcb != NULL) {
 800f2ea:	e011      	b.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681a      	ldr	r2, [r3, #0]
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	681b      	ldr	r3, [r3, #0]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d108      	bne.n	800f30a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	68db      	ldr	r3, [r3, #12]
 800f2fc:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f2fe:	68f8      	ldr	r0, [r7, #12]
 800f300:	f7fe ffc6 	bl	800e290 <tcp_abort>
      pcb = next;
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	60fb      	str	r3, [r7, #12]
 800f308:	e002      	b.n	800f310 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	68db      	ldr	r3, [r3, #12]
 800f30e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d1ea      	bne.n	800f2ec <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f316:	bf00      	nop
 800f318:	bf00      	nop
 800f31a:	3710      	adds	r7, #16
 800f31c:	46bd      	mov	sp, r7
 800f31e:	bd80      	pop	{r7, pc}
 800f320:	08017ae0 	.word	0x08017ae0
 800f324:	08018214 	.word	0x08018214
 800f328:	08017b24 	.word	0x08017b24

0800f32c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b084      	sub	sp, #16
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
 800f334:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d02a      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d026      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f344:	4b15      	ldr	r3, [pc, #84]	; (800f39c <tcp_netif_ip_addr_changed+0x70>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff ffbc 	bl	800f2c8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f350:	4b13      	ldr	r3, [pc, #76]	; (800f3a0 <tcp_netif_ip_addr_changed+0x74>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f7ff ffb6 	bl	800f2c8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d017      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
 800f362:	683b      	ldr	r3, [r7, #0]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2b00      	cmp	r3, #0
 800f368:	d013      	beq.n	800f392 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f36a:	4b0e      	ldr	r3, [pc, #56]	; (800f3a4 <tcp_netif_ip_addr_changed+0x78>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	60fb      	str	r3, [r7, #12]
 800f370:	e00c      	b.n	800f38c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681a      	ldr	r2, [r3, #0]
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	429a      	cmp	r2, r3
 800f37c:	d103      	bne.n	800f386 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	681a      	ldr	r2, [r3, #0]
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	68db      	ldr	r3, [r3, #12]
 800f38a:	60fb      	str	r3, [r7, #12]
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d1ef      	bne.n	800f372 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f392:	bf00      	nop
 800f394:	3710      	adds	r7, #16
 800f396:	46bd      	mov	sp, r7
 800f398:	bd80      	pop	{r7, pc}
 800f39a:	bf00      	nop
 800f39c:	2000c930 	.word	0x2000c930
 800f3a0:	2000c93c 	.word	0x2000c93c
 800f3a4:	2000c938 	.word	0x2000c938

0800f3a8 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d007      	beq.n	800f3c8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff fc3d 	bl	800ec3c <tcp_segs_free>
    pcb->ooseq = NULL;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f3c8:	bf00      	nop
 800f3ca:	3708      	adds	r7, #8
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f3d0:	b590      	push	{r4, r7, lr}
 800f3d2:	b08d      	sub	sp, #52	; 0x34
 800f3d4:	af04      	add	r7, sp, #16
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d105      	bne.n	800f3ec <tcp_input+0x1c>
 800f3e0:	4b9b      	ldr	r3, [pc, #620]	; (800f650 <tcp_input+0x280>)
 800f3e2:	2283      	movs	r2, #131	; 0x83
 800f3e4:	499b      	ldr	r1, [pc, #620]	; (800f654 <tcp_input+0x284>)
 800f3e6:	489c      	ldr	r0, [pc, #624]	; (800f658 <tcp_input+0x288>)
 800f3e8:	f006 fd02 	bl	8015df0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	4a9a      	ldr	r2, [pc, #616]	; (800f65c <tcp_input+0x28c>)
 800f3f2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	895b      	ldrh	r3, [r3, #10]
 800f3f8:	2b13      	cmp	r3, #19
 800f3fa:	f240 83c4 	bls.w	800fb86 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f3fe:	4b98      	ldr	r3, [pc, #608]	; (800f660 <tcp_input+0x290>)
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	4a97      	ldr	r2, [pc, #604]	; (800f660 <tcp_input+0x290>)
 800f404:	6812      	ldr	r2, [r2, #0]
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f005 fc43 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	f040 83ba 	bne.w	800fb8a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f416:	4b92      	ldr	r3, [pc, #584]	; (800f660 <tcp_input+0x290>)
 800f418:	695b      	ldr	r3, [r3, #20]
 800f41a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f41e:	2be0      	cmp	r3, #224	; 0xe0
 800f420:	f000 83b3 	beq.w	800fb8a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f424:	4b8d      	ldr	r3, [pc, #564]	; (800f65c <tcp_input+0x28c>)
 800f426:	681b      	ldr	r3, [r3, #0]
 800f428:	899b      	ldrh	r3, [r3, #12]
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	4618      	mov	r0, r3
 800f42e:	f7fc fdef 	bl	800c010 <lwip_htons>
 800f432:	4603      	mov	r3, r0
 800f434:	0b1b      	lsrs	r3, r3, #12
 800f436:	b29b      	uxth	r3, r3
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f43e:	7cbb      	ldrb	r3, [r7, #18]
 800f440:	2b13      	cmp	r3, #19
 800f442:	f240 83a4 	bls.w	800fb8e <tcp_input+0x7be>
 800f446:	7cbb      	ldrb	r3, [r7, #18]
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	891b      	ldrh	r3, [r3, #8]
 800f44e:	429a      	cmp	r2, r3
 800f450:	f200 839d 	bhi.w	800fb8e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f454:	7cbb      	ldrb	r3, [r7, #18]
 800f456:	b29b      	uxth	r3, r3
 800f458:	3b14      	subs	r3, #20
 800f45a:	b29a      	uxth	r2, r3
 800f45c:	4b81      	ldr	r3, [pc, #516]	; (800f664 <tcp_input+0x294>)
 800f45e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f460:	4b81      	ldr	r3, [pc, #516]	; (800f668 <tcp_input+0x298>)
 800f462:	2200      	movs	r2, #0
 800f464:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	895a      	ldrh	r2, [r3, #10]
 800f46a:	7cbb      	ldrb	r3, [r7, #18]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	429a      	cmp	r2, r3
 800f470:	d309      	bcc.n	800f486 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f472:	4b7c      	ldr	r3, [pc, #496]	; (800f664 <tcp_input+0x294>)
 800f474:	881a      	ldrh	r2, [r3, #0]
 800f476:	4b7d      	ldr	r3, [pc, #500]	; (800f66c <tcp_input+0x29c>)
 800f478:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f47a:	7cbb      	ldrb	r3, [r7, #18]
 800f47c:	4619      	mov	r1, r3
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f7fe f8ec 	bl	800d65c <pbuf_remove_header>
 800f484:	e04e      	b.n	800f524 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d105      	bne.n	800f49a <tcp_input+0xca>
 800f48e:	4b70      	ldr	r3, [pc, #448]	; (800f650 <tcp_input+0x280>)
 800f490:	22c2      	movs	r2, #194	; 0xc2
 800f492:	4977      	ldr	r1, [pc, #476]	; (800f670 <tcp_input+0x2a0>)
 800f494:	4870      	ldr	r0, [pc, #448]	; (800f658 <tcp_input+0x288>)
 800f496:	f006 fcab 	bl	8015df0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f49a:	2114      	movs	r1, #20
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f7fe f8dd 	bl	800d65c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	895a      	ldrh	r2, [r3, #10]
 800f4a6:	4b71      	ldr	r3, [pc, #452]	; (800f66c <tcp_input+0x29c>)
 800f4a8:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f4aa:	4b6e      	ldr	r3, [pc, #440]	; (800f664 <tcp_input+0x294>)
 800f4ac:	881a      	ldrh	r2, [r3, #0]
 800f4ae:	4b6f      	ldr	r3, [pc, #444]	; (800f66c <tcp_input+0x29c>)
 800f4b0:	881b      	ldrh	r3, [r3, #0]
 800f4b2:	1ad3      	subs	r3, r2, r3
 800f4b4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f4b6:	4b6d      	ldr	r3, [pc, #436]	; (800f66c <tcp_input+0x29c>)
 800f4b8:	881b      	ldrh	r3, [r3, #0]
 800f4ba:	4619      	mov	r1, r3
 800f4bc:	6878      	ldr	r0, [r7, #4]
 800f4be:	f7fe f8cd 	bl	800d65c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	895b      	ldrh	r3, [r3, #10]
 800f4c8:	8a3a      	ldrh	r2, [r7, #16]
 800f4ca:	429a      	cmp	r2, r3
 800f4cc:	f200 8361 	bhi.w	800fb92 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	4a64      	ldr	r2, [pc, #400]	; (800f668 <tcp_input+0x298>)
 800f4d8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	8a3a      	ldrh	r2, [r7, #16]
 800f4e0:	4611      	mov	r1, r2
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fe f8ba 	bl	800d65c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	891a      	ldrh	r2, [r3, #8]
 800f4ec:	8a3b      	ldrh	r3, [r7, #16]
 800f4ee:	1ad3      	subs	r3, r2, r3
 800f4f0:	b29a      	uxth	r2, r3
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	895b      	ldrh	r3, [r3, #10]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d005      	beq.n	800f50a <tcp_input+0x13a>
 800f4fe:	4b54      	ldr	r3, [pc, #336]	; (800f650 <tcp_input+0x280>)
 800f500:	22df      	movs	r2, #223	; 0xdf
 800f502:	495c      	ldr	r1, [pc, #368]	; (800f674 <tcp_input+0x2a4>)
 800f504:	4854      	ldr	r0, [pc, #336]	; (800f658 <tcp_input+0x288>)
 800f506:	f006 fc73 	bl	8015df0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	891a      	ldrh	r2, [r3, #8]
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	891b      	ldrh	r3, [r3, #8]
 800f514:	429a      	cmp	r2, r3
 800f516:	d005      	beq.n	800f524 <tcp_input+0x154>
 800f518:	4b4d      	ldr	r3, [pc, #308]	; (800f650 <tcp_input+0x280>)
 800f51a:	22e0      	movs	r2, #224	; 0xe0
 800f51c:	4956      	ldr	r1, [pc, #344]	; (800f678 <tcp_input+0x2a8>)
 800f51e:	484e      	ldr	r0, [pc, #312]	; (800f658 <tcp_input+0x288>)
 800f520:	f006 fc66 	bl	8015df0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f524:	4b4d      	ldr	r3, [pc, #308]	; (800f65c <tcp_input+0x28c>)
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4a4b      	ldr	r2, [pc, #300]	; (800f65c <tcp_input+0x28c>)
 800f52e:	6814      	ldr	r4, [r2, #0]
 800f530:	4618      	mov	r0, r3
 800f532:	f7fc fd6d 	bl	800c010 <lwip_htons>
 800f536:	4603      	mov	r3, r0
 800f538:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f53a:	4b48      	ldr	r3, [pc, #288]	; (800f65c <tcp_input+0x28c>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	885b      	ldrh	r3, [r3, #2]
 800f540:	b29b      	uxth	r3, r3
 800f542:	4a46      	ldr	r2, [pc, #280]	; (800f65c <tcp_input+0x28c>)
 800f544:	6814      	ldr	r4, [r2, #0]
 800f546:	4618      	mov	r0, r3
 800f548:	f7fc fd62 	bl	800c010 <lwip_htons>
 800f54c:	4603      	mov	r3, r0
 800f54e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f550:	4b42      	ldr	r3, [pc, #264]	; (800f65c <tcp_input+0x28c>)
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	685b      	ldr	r3, [r3, #4]
 800f556:	4a41      	ldr	r2, [pc, #260]	; (800f65c <tcp_input+0x28c>)
 800f558:	6814      	ldr	r4, [r2, #0]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fc fd6d 	bl	800c03a <lwip_htonl>
 800f560:	4603      	mov	r3, r0
 800f562:	6063      	str	r3, [r4, #4]
 800f564:	6863      	ldr	r3, [r4, #4]
 800f566:	4a45      	ldr	r2, [pc, #276]	; (800f67c <tcp_input+0x2ac>)
 800f568:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f56a:	4b3c      	ldr	r3, [pc, #240]	; (800f65c <tcp_input+0x28c>)
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	689b      	ldr	r3, [r3, #8]
 800f570:	4a3a      	ldr	r2, [pc, #232]	; (800f65c <tcp_input+0x28c>)
 800f572:	6814      	ldr	r4, [r2, #0]
 800f574:	4618      	mov	r0, r3
 800f576:	f7fc fd60 	bl	800c03a <lwip_htonl>
 800f57a:	4603      	mov	r3, r0
 800f57c:	60a3      	str	r3, [r4, #8]
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	4a3f      	ldr	r2, [pc, #252]	; (800f680 <tcp_input+0x2b0>)
 800f582:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f584:	4b35      	ldr	r3, [pc, #212]	; (800f65c <tcp_input+0x28c>)
 800f586:	681b      	ldr	r3, [r3, #0]
 800f588:	89db      	ldrh	r3, [r3, #14]
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	4a33      	ldr	r2, [pc, #204]	; (800f65c <tcp_input+0x28c>)
 800f58e:	6814      	ldr	r4, [r2, #0]
 800f590:	4618      	mov	r0, r3
 800f592:	f7fc fd3d 	bl	800c010 <lwip_htons>
 800f596:	4603      	mov	r3, r0
 800f598:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f59a:	4b30      	ldr	r3, [pc, #192]	; (800f65c <tcp_input+0x28c>)
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	b29b      	uxth	r3, r3
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fc fd34 	bl	800c010 <lwip_htons>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5b0:	b2da      	uxtb	r2, r3
 800f5b2:	4b34      	ldr	r3, [pc, #208]	; (800f684 <tcp_input+0x2b4>)
 800f5b4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	891a      	ldrh	r2, [r3, #8]
 800f5ba:	4b33      	ldr	r3, [pc, #204]	; (800f688 <tcp_input+0x2b8>)
 800f5bc:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f5be:	4b31      	ldr	r3, [pc, #196]	; (800f684 <tcp_input+0x2b4>)
 800f5c0:	781b      	ldrb	r3, [r3, #0]
 800f5c2:	f003 0303 	and.w	r3, r3, #3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d00c      	beq.n	800f5e4 <tcp_input+0x214>
    tcplen++;
 800f5ca:	4b2f      	ldr	r3, [pc, #188]	; (800f688 <tcp_input+0x2b8>)
 800f5cc:	881b      	ldrh	r3, [r3, #0]
 800f5ce:	3301      	adds	r3, #1
 800f5d0:	b29a      	uxth	r2, r3
 800f5d2:	4b2d      	ldr	r3, [pc, #180]	; (800f688 <tcp_input+0x2b8>)
 800f5d4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	891a      	ldrh	r2, [r3, #8]
 800f5da:	4b2b      	ldr	r3, [pc, #172]	; (800f688 <tcp_input+0x2b8>)
 800f5dc:	881b      	ldrh	r3, [r3, #0]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	f200 82d9 	bhi.w	800fb96 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f5e8:	4b28      	ldr	r3, [pc, #160]	; (800f68c <tcp_input+0x2bc>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	61fb      	str	r3, [r7, #28]
 800f5ee:	e09d      	b.n	800f72c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f5f0:	69fb      	ldr	r3, [r7, #28]
 800f5f2:	7d1b      	ldrb	r3, [r3, #20]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d105      	bne.n	800f604 <tcp_input+0x234>
 800f5f8:	4b15      	ldr	r3, [pc, #84]	; (800f650 <tcp_input+0x280>)
 800f5fa:	22fb      	movs	r2, #251	; 0xfb
 800f5fc:	4924      	ldr	r1, [pc, #144]	; (800f690 <tcp_input+0x2c0>)
 800f5fe:	4816      	ldr	r0, [pc, #88]	; (800f658 <tcp_input+0x288>)
 800f600:	f006 fbf6 	bl	8015df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	7d1b      	ldrb	r3, [r3, #20]
 800f608:	2b0a      	cmp	r3, #10
 800f60a:	d105      	bne.n	800f618 <tcp_input+0x248>
 800f60c:	4b10      	ldr	r3, [pc, #64]	; (800f650 <tcp_input+0x280>)
 800f60e:	22fc      	movs	r2, #252	; 0xfc
 800f610:	4920      	ldr	r1, [pc, #128]	; (800f694 <tcp_input+0x2c4>)
 800f612:	4811      	ldr	r0, [pc, #68]	; (800f658 <tcp_input+0x288>)
 800f614:	f006 fbec 	bl	8015df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f618:	69fb      	ldr	r3, [r7, #28]
 800f61a:	7d1b      	ldrb	r3, [r3, #20]
 800f61c:	2b01      	cmp	r3, #1
 800f61e:	d105      	bne.n	800f62c <tcp_input+0x25c>
 800f620:	4b0b      	ldr	r3, [pc, #44]	; (800f650 <tcp_input+0x280>)
 800f622:	22fd      	movs	r2, #253	; 0xfd
 800f624:	491c      	ldr	r1, [pc, #112]	; (800f698 <tcp_input+0x2c8>)
 800f626:	480c      	ldr	r0, [pc, #48]	; (800f658 <tcp_input+0x288>)
 800f628:	f006 fbe2 	bl	8015df0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f62c:	69fb      	ldr	r3, [r7, #28]
 800f62e:	7a1b      	ldrb	r3, [r3, #8]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d033      	beq.n	800f69c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f634:	69fb      	ldr	r3, [r7, #28]
 800f636:	7a1a      	ldrb	r2, [r3, #8]
 800f638:	4b09      	ldr	r3, [pc, #36]	; (800f660 <tcp_input+0x290>)
 800f63a:	685b      	ldr	r3, [r3, #4]
 800f63c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f640:	3301      	adds	r3, #1
 800f642:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f644:	429a      	cmp	r2, r3
 800f646:	d029      	beq.n	800f69c <tcp_input+0x2cc>
      prev = pcb;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	61bb      	str	r3, [r7, #24]
      continue;
 800f64c:	e06b      	b.n	800f726 <tcp_input+0x356>
 800f64e:	bf00      	nop
 800f650:	08018248 	.word	0x08018248
 800f654:	0801827c 	.word	0x0801827c
 800f658:	08018294 	.word	0x08018294
 800f65c:	200045fc 	.word	0x200045fc
 800f660:	2000921c 	.word	0x2000921c
 800f664:	20004600 	.word	0x20004600
 800f668:	20004604 	.word	0x20004604
 800f66c:	20004602 	.word	0x20004602
 800f670:	080182bc 	.word	0x080182bc
 800f674:	080182cc 	.word	0x080182cc
 800f678:	080182d8 	.word	0x080182d8
 800f67c:	2000460c 	.word	0x2000460c
 800f680:	20004610 	.word	0x20004610
 800f684:	20004618 	.word	0x20004618
 800f688:	20004616 	.word	0x20004616
 800f68c:	2000c930 	.word	0x2000c930
 800f690:	080182f8 	.word	0x080182f8
 800f694:	08018320 	.word	0x08018320
 800f698:	0801834c 	.word	0x0801834c
    }

    if (pcb->remote_port == tcphdr->src &&
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	8b1a      	ldrh	r2, [r3, #24]
 800f6a0:	4b94      	ldr	r3, [pc, #592]	; (800f8f4 <tcp_input+0x524>)
 800f6a2:	681b      	ldr	r3, [r3, #0]
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	b29b      	uxth	r3, r3
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	d13a      	bne.n	800f722 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f6ac:	69fb      	ldr	r3, [r7, #28]
 800f6ae:	8ada      	ldrh	r2, [r3, #22]
 800f6b0:	4b90      	ldr	r3, [pc, #576]	; (800f8f4 <tcp_input+0x524>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	885b      	ldrh	r3, [r3, #2]
 800f6b6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d132      	bne.n	800f722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6bc:	69fb      	ldr	r3, [r7, #28]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	4b8d      	ldr	r3, [pc, #564]	; (800f8f8 <tcp_input+0x528>)
 800f6c2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	d12c      	bne.n	800f722 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f6c8:	69fb      	ldr	r3, [r7, #28]
 800f6ca:	681a      	ldr	r2, [r3, #0]
 800f6cc:	4b8a      	ldr	r3, [pc, #552]	; (800f8f8 <tcp_input+0x528>)
 800f6ce:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f6d0:	429a      	cmp	r2, r3
 800f6d2:	d126      	bne.n	800f722 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f6d4:	69fb      	ldr	r3, [r7, #28]
 800f6d6:	68db      	ldr	r3, [r3, #12]
 800f6d8:	69fa      	ldr	r2, [r7, #28]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d106      	bne.n	800f6ec <tcp_input+0x31c>
 800f6de:	4b87      	ldr	r3, [pc, #540]	; (800f8fc <tcp_input+0x52c>)
 800f6e0:	f240 120d 	movw	r2, #269	; 0x10d
 800f6e4:	4986      	ldr	r1, [pc, #536]	; (800f900 <tcp_input+0x530>)
 800f6e6:	4887      	ldr	r0, [pc, #540]	; (800f904 <tcp_input+0x534>)
 800f6e8:	f006 fb82 	bl	8015df0 <iprintf>
      if (prev != NULL) {
 800f6ec:	69bb      	ldr	r3, [r7, #24]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00a      	beq.n	800f708 <tcp_input+0x338>
        prev->next = pcb->next;
 800f6f2:	69fb      	ldr	r3, [r7, #28]
 800f6f4:	68da      	ldr	r2, [r3, #12]
 800f6f6:	69bb      	ldr	r3, [r7, #24]
 800f6f8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f6fa:	4b83      	ldr	r3, [pc, #524]	; (800f908 <tcp_input+0x538>)
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f702:	4a81      	ldr	r2, [pc, #516]	; (800f908 <tcp_input+0x538>)
 800f704:	69fb      	ldr	r3, [r7, #28]
 800f706:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f708:	69fb      	ldr	r3, [r7, #28]
 800f70a:	68db      	ldr	r3, [r3, #12]
 800f70c:	69fa      	ldr	r2, [r7, #28]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d111      	bne.n	800f736 <tcp_input+0x366>
 800f712:	4b7a      	ldr	r3, [pc, #488]	; (800f8fc <tcp_input+0x52c>)
 800f714:	f240 1215 	movw	r2, #277	; 0x115
 800f718:	497c      	ldr	r1, [pc, #496]	; (800f90c <tcp_input+0x53c>)
 800f71a:	487a      	ldr	r0, [pc, #488]	; (800f904 <tcp_input+0x534>)
 800f71c:	f006 fb68 	bl	8015df0 <iprintf>
      break;
 800f720:	e009      	b.n	800f736 <tcp_input+0x366>
    }
    prev = pcb;
 800f722:	69fb      	ldr	r3, [r7, #28]
 800f724:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	68db      	ldr	r3, [r3, #12]
 800f72a:	61fb      	str	r3, [r7, #28]
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	2b00      	cmp	r3, #0
 800f730:	f47f af5e 	bne.w	800f5f0 <tcp_input+0x220>
 800f734:	e000      	b.n	800f738 <tcp_input+0x368>
      break;
 800f736:	bf00      	nop
  }

  if (pcb == NULL) {
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	f040 8095 	bne.w	800f86a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f740:	4b73      	ldr	r3, [pc, #460]	; (800f910 <tcp_input+0x540>)
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	61fb      	str	r3, [r7, #28]
 800f746:	e03f      	b.n	800f7c8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	7d1b      	ldrb	r3, [r3, #20]
 800f74c:	2b0a      	cmp	r3, #10
 800f74e:	d006      	beq.n	800f75e <tcp_input+0x38e>
 800f750:	4b6a      	ldr	r3, [pc, #424]	; (800f8fc <tcp_input+0x52c>)
 800f752:	f240 121f 	movw	r2, #287	; 0x11f
 800f756:	496f      	ldr	r1, [pc, #444]	; (800f914 <tcp_input+0x544>)
 800f758:	486a      	ldr	r0, [pc, #424]	; (800f904 <tcp_input+0x534>)
 800f75a:	f006 fb49 	bl	8015df0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f75e:	69fb      	ldr	r3, [r7, #28]
 800f760:	7a1b      	ldrb	r3, [r3, #8]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d009      	beq.n	800f77a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	7a1a      	ldrb	r2, [r3, #8]
 800f76a:	4b63      	ldr	r3, [pc, #396]	; (800f8f8 <tcp_input+0x528>)
 800f76c:	685b      	ldr	r3, [r3, #4]
 800f76e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f772:	3301      	adds	r3, #1
 800f774:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f776:	429a      	cmp	r2, r3
 800f778:	d122      	bne.n	800f7c0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	8b1a      	ldrh	r2, [r3, #24]
 800f77e:	4b5d      	ldr	r3, [pc, #372]	; (800f8f4 <tcp_input+0x524>)
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	b29b      	uxth	r3, r3
 800f786:	429a      	cmp	r2, r3
 800f788:	d11b      	bne.n	800f7c2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f78a:	69fb      	ldr	r3, [r7, #28]
 800f78c:	8ada      	ldrh	r2, [r3, #22]
 800f78e:	4b59      	ldr	r3, [pc, #356]	; (800f8f4 <tcp_input+0x524>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	885b      	ldrh	r3, [r3, #2]
 800f794:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f796:	429a      	cmp	r2, r3
 800f798:	d113      	bne.n	800f7c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	4b56      	ldr	r3, [pc, #344]	; (800f8f8 <tcp_input+0x528>)
 800f7a0:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d10d      	bne.n	800f7c2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	681a      	ldr	r2, [r3, #0]
 800f7aa:	4b53      	ldr	r3, [pc, #332]	; (800f8f8 <tcp_input+0x528>)
 800f7ac:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f7ae:	429a      	cmp	r2, r3
 800f7b0:	d107      	bne.n	800f7c2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f7b2:	69f8      	ldr	r0, [r7, #28]
 800f7b4:	f000 fb54 	bl	800fe60 <tcp_timewait_input>
        }
        pbuf_free(p);
 800f7b8:	6878      	ldr	r0, [r7, #4]
 800f7ba:	f7fd ffd5 	bl	800d768 <pbuf_free>
        return;
 800f7be:	e1f0      	b.n	800fba2 <tcp_input+0x7d2>
        continue;
 800f7c0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	61fb      	str	r3, [r7, #28]
 800f7c8:	69fb      	ldr	r3, [r7, #28]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d1bc      	bne.n	800f748 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f7ce:	2300      	movs	r3, #0
 800f7d0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f7d2:	4b51      	ldr	r3, [pc, #324]	; (800f918 <tcp_input+0x548>)
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	617b      	str	r3, [r7, #20]
 800f7d8:	e02a      	b.n	800f830 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	7a1b      	ldrb	r3, [r3, #8]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00c      	beq.n	800f7fc <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	7a1a      	ldrb	r2, [r3, #8]
 800f7e6:	4b44      	ldr	r3, [pc, #272]	; (800f8f8 <tcp_input+0x528>)
 800f7e8:	685b      	ldr	r3, [r3, #4]
 800f7ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f7ee:	3301      	adds	r3, #1
 800f7f0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d002      	beq.n	800f7fc <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	61bb      	str	r3, [r7, #24]
        continue;
 800f7fa:	e016      	b.n	800f82a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f7fc:	697b      	ldr	r3, [r7, #20]
 800f7fe:	8ada      	ldrh	r2, [r3, #22]
 800f800:	4b3c      	ldr	r3, [pc, #240]	; (800f8f4 <tcp_input+0x524>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	885b      	ldrh	r3, [r3, #2]
 800f806:	b29b      	uxth	r3, r3
 800f808:	429a      	cmp	r2, r3
 800f80a:	d10c      	bne.n	800f826 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	681a      	ldr	r2, [r3, #0]
 800f810:	4b39      	ldr	r3, [pc, #228]	; (800f8f8 <tcp_input+0x528>)
 800f812:	695b      	ldr	r3, [r3, #20]
 800f814:	429a      	cmp	r2, r3
 800f816:	d00f      	beq.n	800f838 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f818:	697b      	ldr	r3, [r7, #20]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d00d      	beq.n	800f83a <tcp_input+0x46a>
 800f81e:	697b      	ldr	r3, [r7, #20]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d009      	beq.n	800f83a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f82a:	697b      	ldr	r3, [r7, #20]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	617b      	str	r3, [r7, #20]
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d1d1      	bne.n	800f7da <tcp_input+0x40a>
 800f836:	e000      	b.n	800f83a <tcp_input+0x46a>
            break;
 800f838:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d014      	beq.n	800f86a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d00a      	beq.n	800f85c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f846:	697b      	ldr	r3, [r7, #20]
 800f848:	68da      	ldr	r2, [r3, #12]
 800f84a:	69bb      	ldr	r3, [r7, #24]
 800f84c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f84e:	4b32      	ldr	r3, [pc, #200]	; (800f918 <tcp_input+0x548>)
 800f850:	681a      	ldr	r2, [r3, #0]
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f856:	4a30      	ldr	r2, [pc, #192]	; (800f918 <tcp_input+0x548>)
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f85c:	6978      	ldr	r0, [r7, #20]
 800f85e:	f000 fa01 	bl	800fc64 <tcp_listen_input>
      }
      pbuf_free(p);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7fd ff80 	bl	800d768 <pbuf_free>
      return;
 800f868:	e19b      	b.n	800fba2 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	f000 8160 	beq.w	800fb32 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f872:	4b2a      	ldr	r3, [pc, #168]	; (800f91c <tcp_input+0x54c>)
 800f874:	2200      	movs	r2, #0
 800f876:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	891a      	ldrh	r2, [r3, #8]
 800f87c:	4b27      	ldr	r3, [pc, #156]	; (800f91c <tcp_input+0x54c>)
 800f87e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f880:	4a26      	ldr	r2, [pc, #152]	; (800f91c <tcp_input+0x54c>)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f886:	4b1b      	ldr	r3, [pc, #108]	; (800f8f4 <tcp_input+0x524>)
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	4a24      	ldr	r2, [pc, #144]	; (800f91c <tcp_input+0x54c>)
 800f88c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f88e:	4b24      	ldr	r3, [pc, #144]	; (800f920 <tcp_input+0x550>)
 800f890:	2200      	movs	r2, #0
 800f892:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f894:	4b23      	ldr	r3, [pc, #140]	; (800f924 <tcp_input+0x554>)
 800f896:	2200      	movs	r2, #0
 800f898:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f89a:	4b23      	ldr	r3, [pc, #140]	; (800f928 <tcp_input+0x558>)
 800f89c:	2200      	movs	r2, #0
 800f89e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f8a0:	4b22      	ldr	r3, [pc, #136]	; (800f92c <tcp_input+0x55c>)
 800f8a2:	781b      	ldrb	r3, [r3, #0]
 800f8a4:	f003 0308 	and.w	r3, r3, #8
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d006      	beq.n	800f8ba <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	7b5b      	ldrb	r3, [r3, #13]
 800f8b0:	f043 0301 	orr.w	r3, r3, #1
 800f8b4:	b2da      	uxtb	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d038      	beq.n	800f934 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8c2:	69f8      	ldr	r0, [r7, #28]
 800f8c4:	f7ff f93e 	bl	800eb44 <tcp_process_refused_data>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	f113 0f0d 	cmn.w	r3, #13
 800f8ce:	d007      	beq.n	800f8e0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d02d      	beq.n	800f934 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f8d8:	4b15      	ldr	r3, [pc, #84]	; (800f930 <tcp_input+0x560>)
 800f8da:	881b      	ldrh	r3, [r3, #0]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d029      	beq.n	800f934 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f8e0:	69fb      	ldr	r3, [r7, #28]
 800f8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	f040 8104 	bne.w	800faf2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f8ea:	69f8      	ldr	r0, [r7, #28]
 800f8ec:	f003 f9be 	bl	8012c6c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f8f0:	e0ff      	b.n	800faf2 <tcp_input+0x722>
 800f8f2:	bf00      	nop
 800f8f4:	200045fc 	.word	0x200045fc
 800f8f8:	2000921c 	.word	0x2000921c
 800f8fc:	08018248 	.word	0x08018248
 800f900:	08018374 	.word	0x08018374
 800f904:	08018294 	.word	0x08018294
 800f908:	2000c930 	.word	0x2000c930
 800f90c:	080183a0 	.word	0x080183a0
 800f910:	2000c940 	.word	0x2000c940
 800f914:	080183cc 	.word	0x080183cc
 800f918:	2000c938 	.word	0x2000c938
 800f91c:	200045ec 	.word	0x200045ec
 800f920:	2000461c 	.word	0x2000461c
 800f924:	20004619 	.word	0x20004619
 800f928:	20004614 	.word	0x20004614
 800f92c:	20004618 	.word	0x20004618
 800f930:	20004616 	.word	0x20004616
      }
    }
    tcp_input_pcb = pcb;
 800f934:	4a9c      	ldr	r2, [pc, #624]	; (800fba8 <tcp_input+0x7d8>)
 800f936:	69fb      	ldr	r3, [r7, #28]
 800f938:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f93a:	69f8      	ldr	r0, [r7, #28]
 800f93c:	f000 fb0a 	bl	800ff54 <tcp_process>
 800f940:	4603      	mov	r3, r0
 800f942:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f944:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f948:	f113 0f0d 	cmn.w	r3, #13
 800f94c:	f000 80d3 	beq.w	800faf6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800f950:	4b96      	ldr	r3, [pc, #600]	; (800fbac <tcp_input+0x7dc>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	f003 0308 	and.w	r3, r3, #8
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d015      	beq.n	800f988 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f95c:	69fb      	ldr	r3, [r7, #28]
 800f95e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f962:	2b00      	cmp	r3, #0
 800f964:	d008      	beq.n	800f978 <tcp_input+0x5a8>
 800f966:	69fb      	ldr	r3, [r7, #28]
 800f968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f96c:	69fa      	ldr	r2, [r7, #28]
 800f96e:	6912      	ldr	r2, [r2, #16]
 800f970:	f06f 010d 	mvn.w	r1, #13
 800f974:	4610      	mov	r0, r2
 800f976:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f978:	69f9      	ldr	r1, [r7, #28]
 800f97a:	488d      	ldr	r0, [pc, #564]	; (800fbb0 <tcp_input+0x7e0>)
 800f97c:	f7ff fbb0 	bl	800f0e0 <tcp_pcb_remove>
        tcp_free(pcb);
 800f980:	69f8      	ldr	r0, [r7, #28]
 800f982:	f7fe f99d 	bl	800dcc0 <tcp_free>
 800f986:	e0c1      	b.n	800fb0c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800f988:	2300      	movs	r3, #0
 800f98a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f98c:	4b89      	ldr	r3, [pc, #548]	; (800fbb4 <tcp_input+0x7e4>)
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d01d      	beq.n	800f9d0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f994:	4b87      	ldr	r3, [pc, #540]	; (800fbb4 <tcp_input+0x7e4>)
 800f996:	881b      	ldrh	r3, [r3, #0]
 800f998:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f99a:	69fb      	ldr	r3, [r7, #28]
 800f99c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d00a      	beq.n	800f9ba <tcp_input+0x5ea>
 800f9a4:	69fb      	ldr	r3, [r7, #28]
 800f9a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f9aa:	69fa      	ldr	r2, [r7, #28]
 800f9ac:	6910      	ldr	r0, [r2, #16]
 800f9ae:	89fa      	ldrh	r2, [r7, #14]
 800f9b0:	69f9      	ldr	r1, [r7, #28]
 800f9b2:	4798      	blx	r3
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	74fb      	strb	r3, [r7, #19]
 800f9b8:	e001      	b.n	800f9be <tcp_input+0x5ee>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f9be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f9c2:	f113 0f0d 	cmn.w	r3, #13
 800f9c6:	f000 8098 	beq.w	800fafa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f9ca:	4b7a      	ldr	r3, [pc, #488]	; (800fbb4 <tcp_input+0x7e4>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f9d0:	69f8      	ldr	r0, [r7, #28]
 800f9d2:	f000 f907 	bl	800fbe4 <tcp_input_delayed_close>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f040 8090 	bne.w	800fafe <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f9de:	4b76      	ldr	r3, [pc, #472]	; (800fbb8 <tcp_input+0x7e8>)
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d041      	beq.n	800fa6a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d006      	beq.n	800f9fc <tcp_input+0x62c>
 800f9ee:	4b73      	ldr	r3, [pc, #460]	; (800fbbc <tcp_input+0x7ec>)
 800f9f0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800f9f4:	4972      	ldr	r1, [pc, #456]	; (800fbc0 <tcp_input+0x7f0>)
 800f9f6:	4873      	ldr	r0, [pc, #460]	; (800fbc4 <tcp_input+0x7f4>)
 800f9f8:	f006 f9fa 	bl	8015df0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f9fc:	69fb      	ldr	r3, [r7, #28]
 800f9fe:	8b5b      	ldrh	r3, [r3, #26]
 800fa00:	f003 0310 	and.w	r3, r3, #16
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d008      	beq.n	800fa1a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fa08:	4b6b      	ldr	r3, [pc, #428]	; (800fbb8 <tcp_input+0x7e8>)
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f7fd feab 	bl	800d768 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fa12:	69f8      	ldr	r0, [r7, #28]
 800fa14:	f7fe fc3c 	bl	800e290 <tcp_abort>
            goto aborted;
 800fa18:	e078      	b.n	800fb0c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d00c      	beq.n	800fa3e <tcp_input+0x66e>
 800fa24:	69fb      	ldr	r3, [r7, #28]
 800fa26:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	6918      	ldr	r0, [r3, #16]
 800fa2e:	4b62      	ldr	r3, [pc, #392]	; (800fbb8 <tcp_input+0x7e8>)
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	2300      	movs	r3, #0
 800fa34:	69f9      	ldr	r1, [r7, #28]
 800fa36:	47a0      	blx	r4
 800fa38:	4603      	mov	r3, r0
 800fa3a:	74fb      	strb	r3, [r7, #19]
 800fa3c:	e008      	b.n	800fa50 <tcp_input+0x680>
 800fa3e:	4b5e      	ldr	r3, [pc, #376]	; (800fbb8 <tcp_input+0x7e8>)
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	2300      	movs	r3, #0
 800fa44:	69f9      	ldr	r1, [r7, #28]
 800fa46:	2000      	movs	r0, #0
 800fa48:	f7ff f952 	bl	800ecf0 <tcp_recv_null>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fa50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa54:	f113 0f0d 	cmn.w	r3, #13
 800fa58:	d053      	beq.n	800fb02 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fa5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d003      	beq.n	800fa6a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fa62:	4b55      	ldr	r3, [pc, #340]	; (800fbb8 <tcp_input+0x7e8>)
 800fa64:	681a      	ldr	r2, [r3, #0]
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fa6a:	4b50      	ldr	r3, [pc, #320]	; (800fbac <tcp_input+0x7dc>)
 800fa6c:	781b      	ldrb	r3, [r3, #0]
 800fa6e:	f003 0320 	and.w	r3, r3, #32
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d030      	beq.n	800fad8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800fa76:	69fb      	ldr	r3, [r7, #28]
 800fa78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d009      	beq.n	800fa92 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fa7e:	69fb      	ldr	r3, [r7, #28]
 800fa80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa82:	7b5a      	ldrb	r2, [r3, #13]
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa88:	f042 0220 	orr.w	r2, r2, #32
 800fa8c:	b2d2      	uxtb	r2, r2
 800fa8e:	735a      	strb	r2, [r3, #13]
 800fa90:	e022      	b.n	800fad8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fa96:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fa9a:	d005      	beq.n	800faa8 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800faa0:	3301      	adds	r3, #1
 800faa2:	b29a      	uxth	r2, r3
 800faa4:	69fb      	ldr	r3, [r7, #28]
 800faa6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d00b      	beq.n	800faca <tcp_input+0x6fa>
 800fab2:	69fb      	ldr	r3, [r7, #28]
 800fab4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fab8:	69fb      	ldr	r3, [r7, #28]
 800faba:	6918      	ldr	r0, [r3, #16]
 800fabc:	2300      	movs	r3, #0
 800fabe:	2200      	movs	r2, #0
 800fac0:	69f9      	ldr	r1, [r7, #28]
 800fac2:	47a0      	blx	r4
 800fac4:	4603      	mov	r3, r0
 800fac6:	74fb      	strb	r3, [r7, #19]
 800fac8:	e001      	b.n	800face <tcp_input+0x6fe>
 800faca:	2300      	movs	r3, #0
 800facc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800face:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fad2:	f113 0f0d 	cmn.w	r3, #13
 800fad6:	d016      	beq.n	800fb06 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fad8:	4b33      	ldr	r3, [pc, #204]	; (800fba8 <tcp_input+0x7d8>)
 800fada:	2200      	movs	r2, #0
 800fadc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fade:	69f8      	ldr	r0, [r7, #28]
 800fae0:	f000 f880 	bl	800fbe4 <tcp_input_delayed_close>
 800fae4:	4603      	mov	r3, r0
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d10f      	bne.n	800fb0a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800faea:	69f8      	ldr	r0, [r7, #28]
 800faec:	f002 fab8 	bl	8012060 <tcp_output>
 800faf0:	e00c      	b.n	800fb0c <tcp_input+0x73c>
        goto aborted;
 800faf2:	bf00      	nop
 800faf4:	e00a      	b.n	800fb0c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800faf6:	bf00      	nop
 800faf8:	e008      	b.n	800fb0c <tcp_input+0x73c>
              goto aborted;
 800fafa:	bf00      	nop
 800fafc:	e006      	b.n	800fb0c <tcp_input+0x73c>
          goto aborted;
 800fafe:	bf00      	nop
 800fb00:	e004      	b.n	800fb0c <tcp_input+0x73c>
            goto aborted;
 800fb02:	bf00      	nop
 800fb04:	e002      	b.n	800fb0c <tcp_input+0x73c>
              goto aborted;
 800fb06:	bf00      	nop
 800fb08:	e000      	b.n	800fb0c <tcp_input+0x73c>
          goto aborted;
 800fb0a:	bf00      	nop
    tcp_input_pcb = NULL;
 800fb0c:	4b26      	ldr	r3, [pc, #152]	; (800fba8 <tcp_input+0x7d8>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fb12:	4b29      	ldr	r3, [pc, #164]	; (800fbb8 <tcp_input+0x7e8>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fb18:	4b2b      	ldr	r3, [pc, #172]	; (800fbc8 <tcp_input+0x7f8>)
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d03f      	beq.n	800fba0 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800fb20:	4b29      	ldr	r3, [pc, #164]	; (800fbc8 <tcp_input+0x7f8>)
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	4618      	mov	r0, r3
 800fb26:	f7fd fe1f 	bl	800d768 <pbuf_free>
      inseg.p = NULL;
 800fb2a:	4b27      	ldr	r3, [pc, #156]	; (800fbc8 <tcp_input+0x7f8>)
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fb30:	e036      	b.n	800fba0 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fb32:	4b26      	ldr	r3, [pc, #152]	; (800fbcc <tcp_input+0x7fc>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	899b      	ldrh	r3, [r3, #12]
 800fb38:	b29b      	uxth	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7fc fa68 	bl	800c010 <lwip_htons>
 800fb40:	4603      	mov	r3, r0
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	f003 0304 	and.w	r3, r3, #4
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d118      	bne.n	800fb7e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb4c:	4b20      	ldr	r3, [pc, #128]	; (800fbd0 <tcp_input+0x800>)
 800fb4e:	6819      	ldr	r1, [r3, #0]
 800fb50:	4b20      	ldr	r3, [pc, #128]	; (800fbd4 <tcp_input+0x804>)
 800fb52:	881b      	ldrh	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4b20      	ldr	r3, [pc, #128]	; (800fbd8 <tcp_input+0x808>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb5c:	4b1b      	ldr	r3, [pc, #108]	; (800fbcc <tcp_input+0x7fc>)
 800fb5e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb60:	885b      	ldrh	r3, [r3, #2]
 800fb62:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fb64:	4a19      	ldr	r2, [pc, #100]	; (800fbcc <tcp_input+0x7fc>)
 800fb66:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fb68:	8812      	ldrh	r2, [r2, #0]
 800fb6a:	b292      	uxth	r2, r2
 800fb6c:	9202      	str	r2, [sp, #8]
 800fb6e:	9301      	str	r3, [sp, #4]
 800fb70:	4b1a      	ldr	r3, [pc, #104]	; (800fbdc <tcp_input+0x80c>)
 800fb72:	9300      	str	r3, [sp, #0]
 800fb74:	4b1a      	ldr	r3, [pc, #104]	; (800fbe0 <tcp_input+0x810>)
 800fb76:	4602      	mov	r2, r0
 800fb78:	2000      	movs	r0, #0
 800fb7a:	f003 f825 	bl	8012bc8 <tcp_rst>
    pbuf_free(p);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7fd fdf2 	bl	800d768 <pbuf_free>
  return;
 800fb84:	e00c      	b.n	800fba0 <tcp_input+0x7d0>
    goto dropped;
 800fb86:	bf00      	nop
 800fb88:	e006      	b.n	800fb98 <tcp_input+0x7c8>
    goto dropped;
 800fb8a:	bf00      	nop
 800fb8c:	e004      	b.n	800fb98 <tcp_input+0x7c8>
    goto dropped;
 800fb8e:	bf00      	nop
 800fb90:	e002      	b.n	800fb98 <tcp_input+0x7c8>
      goto dropped;
 800fb92:	bf00      	nop
 800fb94:	e000      	b.n	800fb98 <tcp_input+0x7c8>
      goto dropped;
 800fb96:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f7fd fde5 	bl	800d768 <pbuf_free>
 800fb9e:	e000      	b.n	800fba2 <tcp_input+0x7d2>
  return;
 800fba0:	bf00      	nop
}
 800fba2:	3724      	adds	r7, #36	; 0x24
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd90      	pop	{r4, r7, pc}
 800fba8:	2000c944 	.word	0x2000c944
 800fbac:	20004619 	.word	0x20004619
 800fbb0:	2000c930 	.word	0x2000c930
 800fbb4:	20004614 	.word	0x20004614
 800fbb8:	2000461c 	.word	0x2000461c
 800fbbc:	08018248 	.word	0x08018248
 800fbc0:	080183fc 	.word	0x080183fc
 800fbc4:	08018294 	.word	0x08018294
 800fbc8:	200045ec 	.word	0x200045ec
 800fbcc:	200045fc 	.word	0x200045fc
 800fbd0:	20004610 	.word	0x20004610
 800fbd4:	20004616 	.word	0x20004616
 800fbd8:	2000460c 	.word	0x2000460c
 800fbdc:	2000922c 	.word	0x2000922c
 800fbe0:	20009230 	.word	0x20009230

0800fbe4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	b082      	sub	sp, #8
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d106      	bne.n	800fc00 <tcp_input_delayed_close+0x1c>
 800fbf2:	4b17      	ldr	r3, [pc, #92]	; (800fc50 <tcp_input_delayed_close+0x6c>)
 800fbf4:	f240 225a 	movw	r2, #602	; 0x25a
 800fbf8:	4916      	ldr	r1, [pc, #88]	; (800fc54 <tcp_input_delayed_close+0x70>)
 800fbfa:	4817      	ldr	r0, [pc, #92]	; (800fc58 <tcp_input_delayed_close+0x74>)
 800fbfc:	f006 f8f8 	bl	8015df0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fc00:	4b16      	ldr	r3, [pc, #88]	; (800fc5c <tcp_input_delayed_close+0x78>)
 800fc02:	781b      	ldrb	r3, [r3, #0]
 800fc04:	f003 0310 	and.w	r3, r3, #16
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d01c      	beq.n	800fc46 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	8b5b      	ldrh	r3, [r3, #26]
 800fc10:	f003 0310 	and.w	r3, r3, #16
 800fc14:	2b00      	cmp	r3, #0
 800fc16:	d10d      	bne.n	800fc34 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d008      	beq.n	800fc34 <tcp_input_delayed_close+0x50>
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	6912      	ldr	r2, [r2, #16]
 800fc2c:	f06f 010e 	mvn.w	r1, #14
 800fc30:	4610      	mov	r0, r2
 800fc32:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	480a      	ldr	r0, [pc, #40]	; (800fc60 <tcp_input_delayed_close+0x7c>)
 800fc38:	f7ff fa52 	bl	800f0e0 <tcp_pcb_remove>
    tcp_free(pcb);
 800fc3c:	6878      	ldr	r0, [r7, #4]
 800fc3e:	f7fe f83f 	bl	800dcc0 <tcp_free>
    return 1;
 800fc42:	2301      	movs	r3, #1
 800fc44:	e000      	b.n	800fc48 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fc46:	2300      	movs	r3, #0
}
 800fc48:	4618      	mov	r0, r3
 800fc4a:	3708      	adds	r7, #8
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	bd80      	pop	{r7, pc}
 800fc50:	08018248 	.word	0x08018248
 800fc54:	08018418 	.word	0x08018418
 800fc58:	08018294 	.word	0x08018294
 800fc5c:	20004619 	.word	0x20004619
 800fc60:	2000c930 	.word	0x2000c930

0800fc64 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fc64:	b590      	push	{r4, r7, lr}
 800fc66:	b08b      	sub	sp, #44	; 0x2c
 800fc68:	af04      	add	r7, sp, #16
 800fc6a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fc6c:	4b6f      	ldr	r3, [pc, #444]	; (800fe2c <tcp_listen_input+0x1c8>)
 800fc6e:	781b      	ldrb	r3, [r3, #0]
 800fc70:	f003 0304 	and.w	r3, r3, #4
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	f040 80d2 	bne.w	800fe1e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d106      	bne.n	800fc8e <tcp_listen_input+0x2a>
 800fc80:	4b6b      	ldr	r3, [pc, #428]	; (800fe30 <tcp_listen_input+0x1cc>)
 800fc82:	f240 2281 	movw	r2, #641	; 0x281
 800fc86:	496b      	ldr	r1, [pc, #428]	; (800fe34 <tcp_listen_input+0x1d0>)
 800fc88:	486b      	ldr	r0, [pc, #428]	; (800fe38 <tcp_listen_input+0x1d4>)
 800fc8a:	f006 f8b1 	bl	8015df0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fc8e:	4b67      	ldr	r3, [pc, #412]	; (800fe2c <tcp_listen_input+0x1c8>)
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	f003 0310 	and.w	r3, r3, #16
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d019      	beq.n	800fcce <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fc9a:	4b68      	ldr	r3, [pc, #416]	; (800fe3c <tcp_listen_input+0x1d8>)
 800fc9c:	6819      	ldr	r1, [r3, #0]
 800fc9e:	4b68      	ldr	r3, [pc, #416]	; (800fe40 <tcp_listen_input+0x1dc>)
 800fca0:	881b      	ldrh	r3, [r3, #0]
 800fca2:	461a      	mov	r2, r3
 800fca4:	4b67      	ldr	r3, [pc, #412]	; (800fe44 <tcp_listen_input+0x1e0>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcaa:	4b67      	ldr	r3, [pc, #412]	; (800fe48 <tcp_listen_input+0x1e4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcae:	885b      	ldrh	r3, [r3, #2]
 800fcb0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcb2:	4a65      	ldr	r2, [pc, #404]	; (800fe48 <tcp_listen_input+0x1e4>)
 800fcb4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcb6:	8812      	ldrh	r2, [r2, #0]
 800fcb8:	b292      	uxth	r2, r2
 800fcba:	9202      	str	r2, [sp, #8]
 800fcbc:	9301      	str	r3, [sp, #4]
 800fcbe:	4b63      	ldr	r3, [pc, #396]	; (800fe4c <tcp_listen_input+0x1e8>)
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	4b63      	ldr	r3, [pc, #396]	; (800fe50 <tcp_listen_input+0x1ec>)
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	6878      	ldr	r0, [r7, #4]
 800fcc8:	f002 ff7e 	bl	8012bc8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fccc:	e0a9      	b.n	800fe22 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fcce:	4b57      	ldr	r3, [pc, #348]	; (800fe2c <tcp_listen_input+0x1c8>)
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	f003 0302 	and.w	r3, r3, #2
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 80a3 	beq.w	800fe22 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	7d5b      	ldrb	r3, [r3, #21]
 800fce0:	4618      	mov	r0, r3
 800fce2:	f7ff f929 	bl	800ef38 <tcp_alloc>
 800fce6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fce8:	697b      	ldr	r3, [r7, #20]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d111      	bne.n	800fd12 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	699b      	ldr	r3, [r3, #24]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d00a      	beq.n	800fd0c <tcp_listen_input+0xa8>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	687a      	ldr	r2, [r7, #4]
 800fcfc:	6910      	ldr	r0, [r2, #16]
 800fcfe:	f04f 32ff 	mov.w	r2, #4294967295
 800fd02:	2100      	movs	r1, #0
 800fd04:	4798      	blx	r3
 800fd06:	4603      	mov	r3, r0
 800fd08:	73bb      	strb	r3, [r7, #14]
      return;
 800fd0a:	e08b      	b.n	800fe24 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fd0c:	23f0      	movs	r3, #240	; 0xf0
 800fd0e:	73bb      	strb	r3, [r7, #14]
      return;
 800fd10:	e088      	b.n	800fe24 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fd12:	4b50      	ldr	r3, [pc, #320]	; (800fe54 <tcp_listen_input+0x1f0>)
 800fd14:	695a      	ldr	r2, [r3, #20]
 800fd16:	697b      	ldr	r3, [r7, #20]
 800fd18:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fd1a:	4b4e      	ldr	r3, [pc, #312]	; (800fe54 <tcp_listen_input+0x1f0>)
 800fd1c:	691a      	ldr	r2, [r3, #16]
 800fd1e:	697b      	ldr	r3, [r7, #20]
 800fd20:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	8ada      	ldrh	r2, [r3, #22]
 800fd26:	697b      	ldr	r3, [r7, #20]
 800fd28:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fd2a:	4b47      	ldr	r3, [pc, #284]	; (800fe48 <tcp_listen_input+0x1e4>)
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	881b      	ldrh	r3, [r3, #0]
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	697b      	ldr	r3, [r7, #20]
 800fd34:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fd36:	697b      	ldr	r3, [r7, #20]
 800fd38:	2203      	movs	r2, #3
 800fd3a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fd3c:	4b41      	ldr	r3, [pc, #260]	; (800fe44 <tcp_listen_input+0x1e0>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fd46:	697b      	ldr	r3, [r7, #20]
 800fd48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fd4a:	697b      	ldr	r3, [r7, #20]
 800fd4c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fd4e:	6978      	ldr	r0, [r7, #20]
 800fd50:	f7ff fa5a 	bl	800f208 <tcp_next_iss>
 800fd54:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	693a      	ldr	r2, [r7, #16]
 800fd5a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fd5c:	697b      	ldr	r3, [r7, #20]
 800fd5e:	693a      	ldr	r2, [r7, #16]
 800fd60:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800fd62:	697b      	ldr	r3, [r7, #20]
 800fd64:	693a      	ldr	r2, [r7, #16]
 800fd66:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800fd68:	697b      	ldr	r3, [r7, #20]
 800fd6a:	693a      	ldr	r2, [r7, #16]
 800fd6c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800fd6e:	4b35      	ldr	r3, [pc, #212]	; (800fe44 <tcp_listen_input+0x1e0>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	1e5a      	subs	r2, r3, #1
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	691a      	ldr	r2, [r3, #16]
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fd80:	697b      	ldr	r3, [r7, #20]
 800fd82:	687a      	ldr	r2, [r7, #4]
 800fd84:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	7a5b      	ldrb	r3, [r3, #9]
 800fd8a:	f003 030c 	and.w	r3, r3, #12
 800fd8e:	b2da      	uxtb	r2, r3
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	7a1a      	ldrb	r2, [r3, #8]
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fd9c:	4b2e      	ldr	r3, [pc, #184]	; (800fe58 <tcp_listen_input+0x1f4>)
 800fd9e:	681a      	ldr	r2, [r3, #0]
 800fda0:	697b      	ldr	r3, [r7, #20]
 800fda2:	60da      	str	r2, [r3, #12]
 800fda4:	4a2c      	ldr	r2, [pc, #176]	; (800fe58 <tcp_listen_input+0x1f4>)
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	6013      	str	r3, [r2, #0]
 800fdaa:	f003 f8cf 	bl	8012f4c <tcp_timer_needed>
 800fdae:	4b2b      	ldr	r3, [pc, #172]	; (800fe5c <tcp_listen_input+0x1f8>)
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800fdb4:	6978      	ldr	r0, [r7, #20]
 800fdb6:	f001 fd8d 	bl	80118d4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800fdba:	4b23      	ldr	r3, [pc, #140]	; (800fe48 <tcp_listen_input+0x1e4>)
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	89db      	ldrh	r3, [r3, #14]
 800fdc0:	b29a      	uxth	r2, r3
 800fdc2:	697b      	ldr	r3, [r7, #20]
 800fdc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800fdd4:	697b      	ldr	r3, [r7, #20]
 800fdd6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800fdd8:	697b      	ldr	r3, [r7, #20]
 800fdda:	3304      	adds	r3, #4
 800fddc:	4618      	mov	r0, r3
 800fdde:	f004 fcc3 	bl	8014768 <ip4_route>
 800fde2:	4601      	mov	r1, r0
 800fde4:	697b      	ldr	r3, [r7, #20]
 800fde6:	3304      	adds	r3, #4
 800fde8:	461a      	mov	r2, r3
 800fdea:	4620      	mov	r0, r4
 800fdec:	f7ff fa32 	bl	800f254 <tcp_eff_send_mss_netif>
 800fdf0:	4603      	mov	r3, r0
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	697b      	ldr	r3, [r7, #20]
 800fdf6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800fdf8:	2112      	movs	r1, #18
 800fdfa:	6978      	ldr	r0, [r7, #20]
 800fdfc:	f002 f842 	bl	8011e84 <tcp_enqueue_flags>
 800fe00:	4603      	mov	r3, r0
 800fe02:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fe04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d004      	beq.n	800fe16 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800fe0c:	2100      	movs	r1, #0
 800fe0e:	6978      	ldr	r0, [r7, #20]
 800fe10:	f7fe f980 	bl	800e114 <tcp_abandon>
      return;
 800fe14:	e006      	b.n	800fe24 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800fe16:	6978      	ldr	r0, [r7, #20]
 800fe18:	f002 f922 	bl	8012060 <tcp_output>
  return;
 800fe1c:	e001      	b.n	800fe22 <tcp_listen_input+0x1be>
    return;
 800fe1e:	bf00      	nop
 800fe20:	e000      	b.n	800fe24 <tcp_listen_input+0x1c0>
  return;
 800fe22:	bf00      	nop
}
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	bd90      	pop	{r4, r7, pc}
 800fe2a:	bf00      	nop
 800fe2c:	20004618 	.word	0x20004618
 800fe30:	08018248 	.word	0x08018248
 800fe34:	08018440 	.word	0x08018440
 800fe38:	08018294 	.word	0x08018294
 800fe3c:	20004610 	.word	0x20004610
 800fe40:	20004616 	.word	0x20004616
 800fe44:	2000460c 	.word	0x2000460c
 800fe48:	200045fc 	.word	0x200045fc
 800fe4c:	2000922c 	.word	0x2000922c
 800fe50:	20009230 	.word	0x20009230
 800fe54:	2000921c 	.word	0x2000921c
 800fe58:	2000c930 	.word	0x2000c930
 800fe5c:	2000c92c 	.word	0x2000c92c

0800fe60 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fe60:	b580      	push	{r7, lr}
 800fe62:	b086      	sub	sp, #24
 800fe64:	af04      	add	r7, sp, #16
 800fe66:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fe68:	4b2f      	ldr	r3, [pc, #188]	; (800ff28 <tcp_timewait_input+0xc8>)
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 0304 	and.w	r3, r3, #4
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d153      	bne.n	800ff1c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d106      	bne.n	800fe88 <tcp_timewait_input+0x28>
 800fe7a:	4b2c      	ldr	r3, [pc, #176]	; (800ff2c <tcp_timewait_input+0xcc>)
 800fe7c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800fe80:	492b      	ldr	r1, [pc, #172]	; (800ff30 <tcp_timewait_input+0xd0>)
 800fe82:	482c      	ldr	r0, [pc, #176]	; (800ff34 <tcp_timewait_input+0xd4>)
 800fe84:	f005 ffb4 	bl	8015df0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fe88:	4b27      	ldr	r3, [pc, #156]	; (800ff28 <tcp_timewait_input+0xc8>)
 800fe8a:	781b      	ldrb	r3, [r3, #0]
 800fe8c:	f003 0302 	and.w	r3, r3, #2
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d02a      	beq.n	800feea <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fe94:	4b28      	ldr	r3, [pc, #160]	; (800ff38 <tcp_timewait_input+0xd8>)
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	db2d      	blt.n	800fefe <tcp_timewait_input+0x9e>
 800fea2:	4b25      	ldr	r3, [pc, #148]	; (800ff38 <tcp_timewait_input+0xd8>)
 800fea4:	681a      	ldr	r2, [r3, #0]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feaa:	6879      	ldr	r1, [r7, #4]
 800feac:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800feae:	440b      	add	r3, r1
 800feb0:	1ad3      	subs	r3, r2, r3
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	dc23      	bgt.n	800fefe <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feb6:	4b21      	ldr	r3, [pc, #132]	; (800ff3c <tcp_timewait_input+0xdc>)
 800feb8:	6819      	ldr	r1, [r3, #0]
 800feba:	4b21      	ldr	r3, [pc, #132]	; (800ff40 <tcp_timewait_input+0xe0>)
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	461a      	mov	r2, r3
 800fec0:	4b1d      	ldr	r3, [pc, #116]	; (800ff38 <tcp_timewait_input+0xd8>)
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fec6:	4b1f      	ldr	r3, [pc, #124]	; (800ff44 <tcp_timewait_input+0xe4>)
 800fec8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800feca:	885b      	ldrh	r3, [r3, #2]
 800fecc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fece:	4a1d      	ldr	r2, [pc, #116]	; (800ff44 <tcp_timewait_input+0xe4>)
 800fed0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fed2:	8812      	ldrh	r2, [r2, #0]
 800fed4:	b292      	uxth	r2, r2
 800fed6:	9202      	str	r2, [sp, #8]
 800fed8:	9301      	str	r3, [sp, #4]
 800feda:	4b1b      	ldr	r3, [pc, #108]	; (800ff48 <tcp_timewait_input+0xe8>)
 800fedc:	9300      	str	r3, [sp, #0]
 800fede:	4b1b      	ldr	r3, [pc, #108]	; (800ff4c <tcp_timewait_input+0xec>)
 800fee0:	4602      	mov	r2, r0
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f002 fe70 	bl	8012bc8 <tcp_rst>
      return;
 800fee8:	e01b      	b.n	800ff22 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800feea:	4b0f      	ldr	r3, [pc, #60]	; (800ff28 <tcp_timewait_input+0xc8>)
 800feec:	781b      	ldrb	r3, [r3, #0]
 800feee:	f003 0301 	and.w	r3, r3, #1
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d003      	beq.n	800fefe <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fef6:	4b16      	ldr	r3, [pc, #88]	; (800ff50 <tcp_timewait_input+0xf0>)
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fefe:	4b10      	ldr	r3, [pc, #64]	; (800ff40 <tcp_timewait_input+0xe0>)
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d00c      	beq.n	800ff20 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	8b5b      	ldrh	r3, [r3, #26]
 800ff0a:	f043 0302 	orr.w	r3, r3, #2
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ff14:	6878      	ldr	r0, [r7, #4]
 800ff16:	f002 f8a3 	bl	8012060 <tcp_output>
  }
  return;
 800ff1a:	e001      	b.n	800ff20 <tcp_timewait_input+0xc0>
    return;
 800ff1c:	bf00      	nop
 800ff1e:	e000      	b.n	800ff22 <tcp_timewait_input+0xc2>
  return;
 800ff20:	bf00      	nop
}
 800ff22:	3708      	adds	r7, #8
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20004618 	.word	0x20004618
 800ff2c:	08018248 	.word	0x08018248
 800ff30:	08018460 	.word	0x08018460
 800ff34:	08018294 	.word	0x08018294
 800ff38:	2000460c 	.word	0x2000460c
 800ff3c:	20004610 	.word	0x20004610
 800ff40:	20004616 	.word	0x20004616
 800ff44:	200045fc 	.word	0x200045fc
 800ff48:	2000922c 	.word	0x2000922c
 800ff4c:	20009230 	.word	0x20009230
 800ff50:	2000c934 	.word	0x2000c934

0800ff54 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ff54:	b590      	push	{r4, r7, lr}
 800ff56:	b08d      	sub	sp, #52	; 0x34
 800ff58:	af04      	add	r7, sp, #16
 800ff5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ff60:	2300      	movs	r3, #0
 800ff62:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d106      	bne.n	800ff78 <tcp_process+0x24>
 800ff6a:	4ba5      	ldr	r3, [pc, #660]	; (8010200 <tcp_process+0x2ac>)
 800ff6c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ff70:	49a4      	ldr	r1, [pc, #656]	; (8010204 <tcp_process+0x2b0>)
 800ff72:	48a5      	ldr	r0, [pc, #660]	; (8010208 <tcp_process+0x2b4>)
 800ff74:	f005 ff3c 	bl	8015df0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ff78:	4ba4      	ldr	r3, [pc, #656]	; (801020c <tcp_process+0x2b8>)
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 0304 	and.w	r3, r3, #4
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d04e      	beq.n	8010022 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	7d1b      	ldrb	r3, [r3, #20]
 800ff88:	2b02      	cmp	r3, #2
 800ff8a:	d108      	bne.n	800ff9e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ff90:	4b9f      	ldr	r3, [pc, #636]	; (8010210 <tcp_process+0x2bc>)
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	429a      	cmp	r2, r3
 800ff96:	d123      	bne.n	800ffe0 <tcp_process+0x8c>
        acceptable = 1;
 800ff98:	2301      	movs	r3, #1
 800ff9a:	76fb      	strb	r3, [r7, #27]
 800ff9c:	e020      	b.n	800ffe0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ffa2:	4b9c      	ldr	r3, [pc, #624]	; (8010214 <tcp_process+0x2c0>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	429a      	cmp	r2, r3
 800ffa8:	d102      	bne.n	800ffb0 <tcp_process+0x5c>
        acceptable = 1;
 800ffaa:	2301      	movs	r3, #1
 800ffac:	76fb      	strb	r3, [r7, #27]
 800ffae:	e017      	b.n	800ffe0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ffb0:	4b98      	ldr	r3, [pc, #608]	; (8010214 <tcp_process+0x2c0>)
 800ffb2:	681a      	ldr	r2, [r3, #0]
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	db10      	blt.n	800ffe0 <tcp_process+0x8c>
 800ffbe:	4b95      	ldr	r3, [pc, #596]	; (8010214 <tcp_process+0x2c0>)
 800ffc0:	681a      	ldr	r2, [r3, #0]
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffc6:	6879      	ldr	r1, [r7, #4]
 800ffc8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ffca:	440b      	add	r3, r1
 800ffcc:	1ad3      	subs	r3, r2, r3
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	dc06      	bgt.n	800ffe0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	8b5b      	ldrh	r3, [r3, #26]
 800ffd6:	f043 0302 	orr.w	r3, r3, #2
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ffe0:	7efb      	ldrb	r3, [r7, #27]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d01b      	beq.n	801001e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7d1b      	ldrb	r3, [r3, #20]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d106      	bne.n	800fffc <tcp_process+0xa8>
 800ffee:	4b84      	ldr	r3, [pc, #528]	; (8010200 <tcp_process+0x2ac>)
 800fff0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800fff4:	4988      	ldr	r1, [pc, #544]	; (8010218 <tcp_process+0x2c4>)
 800fff6:	4884      	ldr	r0, [pc, #528]	; (8010208 <tcp_process+0x2b4>)
 800fff8:	f005 fefa 	bl	8015df0 <iprintf>
      recv_flags |= TF_RESET;
 800fffc:	4b87      	ldr	r3, [pc, #540]	; (801021c <tcp_process+0x2c8>)
 800fffe:	781b      	ldrb	r3, [r3, #0]
 8010000:	f043 0308 	orr.w	r3, r3, #8
 8010004:	b2da      	uxtb	r2, r3
 8010006:	4b85      	ldr	r3, [pc, #532]	; (801021c <tcp_process+0x2c8>)
 8010008:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	8b5b      	ldrh	r3, [r3, #26]
 801000e:	f023 0301 	bic.w	r3, r3, #1
 8010012:	b29a      	uxth	r2, r3
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010018:	f06f 030d 	mvn.w	r3, #13
 801001c:	e37a      	b.n	8010714 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801001e:	2300      	movs	r3, #0
 8010020:	e378      	b.n	8010714 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8010022:	4b7a      	ldr	r3, [pc, #488]	; (801020c <tcp_process+0x2b8>)
 8010024:	781b      	ldrb	r3, [r3, #0]
 8010026:	f003 0302 	and.w	r3, r3, #2
 801002a:	2b00      	cmp	r3, #0
 801002c:	d010      	beq.n	8010050 <tcp_process+0xfc>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	7d1b      	ldrb	r3, [r3, #20]
 8010032:	2b02      	cmp	r3, #2
 8010034:	d00c      	beq.n	8010050 <tcp_process+0xfc>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	7d1b      	ldrb	r3, [r3, #20]
 801003a:	2b03      	cmp	r3, #3
 801003c:	d008      	beq.n	8010050 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	8b5b      	ldrh	r3, [r3, #26]
 8010042:	f043 0302 	orr.w	r3, r3, #2
 8010046:	b29a      	uxth	r2, r3
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801004c:	2300      	movs	r3, #0
 801004e:	e361      	b.n	8010714 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	8b5b      	ldrh	r3, [r3, #26]
 8010054:	f003 0310 	and.w	r3, r3, #16
 8010058:	2b00      	cmp	r3, #0
 801005a:	d103      	bne.n	8010064 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801005c:	4b70      	ldr	r3, [pc, #448]	; (8010220 <tcp_process+0x2cc>)
 801005e:	681a      	ldr	r2, [r3, #0]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	2200      	movs	r2, #0
 8010068:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f001 fc2d 	bl	80118d4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	7d1b      	ldrb	r3, [r3, #20]
 801007e:	3b02      	subs	r3, #2
 8010080:	2b07      	cmp	r3, #7
 8010082:	f200 8337 	bhi.w	80106f4 <tcp_process+0x7a0>
 8010086:	a201      	add	r2, pc, #4	; (adr r2, 801008c <tcp_process+0x138>)
 8010088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801008c:	080100ad 	.word	0x080100ad
 8010090:	080102dd 	.word	0x080102dd
 8010094:	08010455 	.word	0x08010455
 8010098:	0801047f 	.word	0x0801047f
 801009c:	080105a3 	.word	0x080105a3
 80100a0:	08010455 	.word	0x08010455
 80100a4:	0801062f 	.word	0x0801062f
 80100a8:	080106bf 	.word	0x080106bf
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80100ac:	4b57      	ldr	r3, [pc, #348]	; (801020c <tcp_process+0x2b8>)
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	f003 0310 	and.w	r3, r3, #16
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f000 80e4 	beq.w	8010282 <tcp_process+0x32e>
 80100ba:	4b54      	ldr	r3, [pc, #336]	; (801020c <tcp_process+0x2b8>)
 80100bc:	781b      	ldrb	r3, [r3, #0]
 80100be:	f003 0302 	and.w	r3, r3, #2
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	f000 80dd 	beq.w	8010282 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100cc:	1c5a      	adds	r2, r3, #1
 80100ce:	4b50      	ldr	r3, [pc, #320]	; (8010210 <tcp_process+0x2bc>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	429a      	cmp	r2, r3
 80100d4:	f040 80d5 	bne.w	8010282 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80100d8:	4b4e      	ldr	r3, [pc, #312]	; (8010214 <tcp_process+0x2c0>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	1c5a      	adds	r2, r3, #1
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80100ea:	4b49      	ldr	r3, [pc, #292]	; (8010210 <tcp_process+0x2bc>)
 80100ec:	681a      	ldr	r2, [r3, #0]
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80100f2:	4b4c      	ldr	r3, [pc, #304]	; (8010224 <tcp_process+0x2d0>)
 80100f4:	681b      	ldr	r3, [r3, #0]
 80100f6:	89db      	ldrh	r3, [r3, #14]
 80100f8:	b29a      	uxth	r2, r3
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801010c:	4b41      	ldr	r3, [pc, #260]	; (8010214 <tcp_process+0x2c0>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	1e5a      	subs	r2, r3, #1
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	2204      	movs	r2, #4
 801011a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	3304      	adds	r3, #4
 8010124:	4618      	mov	r0, r3
 8010126:	f004 fb1f 	bl	8014768 <ip4_route>
 801012a:	4601      	mov	r1, r0
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	3304      	adds	r3, #4
 8010130:	461a      	mov	r2, r3
 8010132:	4620      	mov	r0, r4
 8010134:	f7ff f88e 	bl	800f254 <tcp_eff_send_mss_netif>
 8010138:	4603      	mov	r3, r0
 801013a:	461a      	mov	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010144:	009a      	lsls	r2, r3, #2
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801014a:	005b      	lsls	r3, r3, #1
 801014c:	f241 111c 	movw	r1, #4380	; 0x111c
 8010150:	428b      	cmp	r3, r1
 8010152:	bf38      	it	cc
 8010154:	460b      	movcc	r3, r1
 8010156:	429a      	cmp	r2, r3
 8010158:	d204      	bcs.n	8010164 <tcp_process+0x210>
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801015e:	009b      	lsls	r3, r3, #2
 8010160:	b29b      	uxth	r3, r3
 8010162:	e00d      	b.n	8010180 <tcp_process+0x22c>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	f241 121c 	movw	r2, #4380	; 0x111c
 801016e:	4293      	cmp	r3, r2
 8010170:	d904      	bls.n	801017c <tcp_process+0x228>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010176:	005b      	lsls	r3, r3, #1
 8010178:	b29b      	uxth	r3, r3
 801017a:	e001      	b.n	8010180 <tcp_process+0x22c>
 801017c:	f241 131c 	movw	r3, #4380	; 0x111c
 8010180:	687a      	ldr	r2, [r7, #4]
 8010182:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801018c:	2b00      	cmp	r3, #0
 801018e:	d106      	bne.n	801019e <tcp_process+0x24a>
 8010190:	4b1b      	ldr	r3, [pc, #108]	; (8010200 <tcp_process+0x2ac>)
 8010192:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8010196:	4924      	ldr	r1, [pc, #144]	; (8010228 <tcp_process+0x2d4>)
 8010198:	481b      	ldr	r0, [pc, #108]	; (8010208 <tcp_process+0x2b4>)
 801019a:	f005 fe29 	bl	8015df0 <iprintf>
        --pcb->snd_queuelen;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80101a4:	3b01      	subs	r3, #1
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101b2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d111      	bne.n	80101de <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101be:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80101c0:	69fb      	ldr	r3, [r7, #28]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d106      	bne.n	80101d4 <tcp_process+0x280>
 80101c6:	4b0e      	ldr	r3, [pc, #56]	; (8010200 <tcp_process+0x2ac>)
 80101c8:	f44f 725d 	mov.w	r2, #884	; 0x374
 80101cc:	4917      	ldr	r1, [pc, #92]	; (801022c <tcp_process+0x2d8>)
 80101ce:	480e      	ldr	r0, [pc, #56]	; (8010208 <tcp_process+0x2b4>)
 80101d0:	f005 fe0e 	bl	8015df0 <iprintf>
          pcb->unsent = rseg->next;
 80101d4:	69fb      	ldr	r3, [r7, #28]
 80101d6:	681a      	ldr	r2, [r3, #0]
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	66da      	str	r2, [r3, #108]	; 0x6c
 80101dc:	e003      	b.n	80101e6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80101de:	69fb      	ldr	r3, [r7, #28]
 80101e0:	681a      	ldr	r2, [r3, #0]
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80101e6:	69f8      	ldr	r0, [r7, #28]
 80101e8:	f7fe fd3d 	bl	800ec66 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d11d      	bne.n	8010230 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101fa:	861a      	strh	r2, [r3, #48]	; 0x30
 80101fc:	e01f      	b.n	801023e <tcp_process+0x2ea>
 80101fe:	bf00      	nop
 8010200:	08018248 	.word	0x08018248
 8010204:	08018480 	.word	0x08018480
 8010208:	08018294 	.word	0x08018294
 801020c:	20004618 	.word	0x20004618
 8010210:	20004610 	.word	0x20004610
 8010214:	2000460c 	.word	0x2000460c
 8010218:	0801849c 	.word	0x0801849c
 801021c:	20004619 	.word	0x20004619
 8010220:	2000c934 	.word	0x2000c934
 8010224:	200045fc 	.word	0x200045fc
 8010228:	080184bc 	.word	0x080184bc
 801022c:	080184d4 	.word	0x080184d4
        } else {
          pcb->rtime = 0;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2200      	movs	r2, #0
 801023a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010244:	2b00      	cmp	r3, #0
 8010246:	d00a      	beq.n	801025e <tcp_process+0x30a>
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	6910      	ldr	r0, [r2, #16]
 8010252:	2200      	movs	r2, #0
 8010254:	6879      	ldr	r1, [r7, #4]
 8010256:	4798      	blx	r3
 8010258:	4603      	mov	r3, r0
 801025a:	76bb      	strb	r3, [r7, #26]
 801025c:	e001      	b.n	8010262 <tcp_process+0x30e>
 801025e:	2300      	movs	r3, #0
 8010260:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8010262:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010266:	f113 0f0d 	cmn.w	r3, #13
 801026a:	d102      	bne.n	8010272 <tcp_process+0x31e>
          return ERR_ABRT;
 801026c:	f06f 030c 	mvn.w	r3, #12
 8010270:	e250      	b.n	8010714 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	8b5b      	ldrh	r3, [r3, #26]
 8010276:	f043 0302 	orr.w	r3, r3, #2
 801027a:	b29a      	uxth	r2, r3
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8010280:	e23a      	b.n	80106f8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8010282:	4b9d      	ldr	r3, [pc, #628]	; (80104f8 <tcp_process+0x5a4>)
 8010284:	781b      	ldrb	r3, [r3, #0]
 8010286:	f003 0310 	and.w	r3, r3, #16
 801028a:	2b00      	cmp	r3, #0
 801028c:	f000 8234 	beq.w	80106f8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010290:	4b9a      	ldr	r3, [pc, #616]	; (80104fc <tcp_process+0x5a8>)
 8010292:	6819      	ldr	r1, [r3, #0]
 8010294:	4b9a      	ldr	r3, [pc, #616]	; (8010500 <tcp_process+0x5ac>)
 8010296:	881b      	ldrh	r3, [r3, #0]
 8010298:	461a      	mov	r2, r3
 801029a:	4b9a      	ldr	r3, [pc, #616]	; (8010504 <tcp_process+0x5b0>)
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102a0:	4b99      	ldr	r3, [pc, #612]	; (8010508 <tcp_process+0x5b4>)
 80102a2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102a4:	885b      	ldrh	r3, [r3, #2]
 80102a6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80102a8:	4a97      	ldr	r2, [pc, #604]	; (8010508 <tcp_process+0x5b4>)
 80102aa:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80102ac:	8812      	ldrh	r2, [r2, #0]
 80102ae:	b292      	uxth	r2, r2
 80102b0:	9202      	str	r2, [sp, #8]
 80102b2:	9301      	str	r3, [sp, #4]
 80102b4:	4b95      	ldr	r3, [pc, #596]	; (801050c <tcp_process+0x5b8>)
 80102b6:	9300      	str	r3, [sp, #0]
 80102b8:	4b95      	ldr	r3, [pc, #596]	; (8010510 <tcp_process+0x5bc>)
 80102ba:	4602      	mov	r2, r0
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f002 fc83 	bl	8012bc8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102c8:	2b05      	cmp	r3, #5
 80102ca:	f200 8215 	bhi.w	80106f8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	2200      	movs	r2, #0
 80102d2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80102d4:	6878      	ldr	r0, [r7, #4]
 80102d6:	f002 fa4d 	bl	8012774 <tcp_rexmit_rto>
      break;
 80102da:	e20d      	b.n	80106f8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80102dc:	4b86      	ldr	r3, [pc, #536]	; (80104f8 <tcp_process+0x5a4>)
 80102de:	781b      	ldrb	r3, [r3, #0]
 80102e0:	f003 0310 	and.w	r3, r3, #16
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	f000 80a1 	beq.w	801042c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80102ea:	4b84      	ldr	r3, [pc, #528]	; (80104fc <tcp_process+0x5a8>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102f2:	1ad3      	subs	r3, r2, r3
 80102f4:	3b01      	subs	r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	db7e      	blt.n	80103f8 <tcp_process+0x4a4>
 80102fa:	4b80      	ldr	r3, [pc, #512]	; (80104fc <tcp_process+0x5a8>)
 80102fc:	681a      	ldr	r2, [r3, #0]
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010302:	1ad3      	subs	r3, r2, r3
 8010304:	2b00      	cmp	r3, #0
 8010306:	dc77      	bgt.n	80103f8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	2204      	movs	r2, #4
 801030c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010312:	2b00      	cmp	r3, #0
 8010314:	d102      	bne.n	801031c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010316:	23fa      	movs	r3, #250	; 0xfa
 8010318:	76bb      	strb	r3, [r7, #26]
 801031a:	e01d      	b.n	8010358 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010320:	699b      	ldr	r3, [r3, #24]
 8010322:	2b00      	cmp	r3, #0
 8010324:	d106      	bne.n	8010334 <tcp_process+0x3e0>
 8010326:	4b7b      	ldr	r3, [pc, #492]	; (8010514 <tcp_process+0x5c0>)
 8010328:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801032c:	497a      	ldr	r1, [pc, #488]	; (8010518 <tcp_process+0x5c4>)
 801032e:	487b      	ldr	r0, [pc, #492]	; (801051c <tcp_process+0x5c8>)
 8010330:	f005 fd5e 	bl	8015df0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010338:	699b      	ldr	r3, [r3, #24]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d00a      	beq.n	8010354 <tcp_process+0x400>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010342:	699b      	ldr	r3, [r3, #24]
 8010344:	687a      	ldr	r2, [r7, #4]
 8010346:	6910      	ldr	r0, [r2, #16]
 8010348:	2200      	movs	r2, #0
 801034a:	6879      	ldr	r1, [r7, #4]
 801034c:	4798      	blx	r3
 801034e:	4603      	mov	r3, r0
 8010350:	76bb      	strb	r3, [r7, #26]
 8010352:	e001      	b.n	8010358 <tcp_process+0x404>
 8010354:	23f0      	movs	r3, #240	; 0xf0
 8010356:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8010358:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d00a      	beq.n	8010376 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8010360:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8010364:	f113 0f0d 	cmn.w	r3, #13
 8010368:	d002      	beq.n	8010370 <tcp_process+0x41c>
              tcp_abort(pcb);
 801036a:	6878      	ldr	r0, [r7, #4]
 801036c:	f7fd ff90 	bl	800e290 <tcp_abort>
            }
            return ERR_ABRT;
 8010370:	f06f 030c 	mvn.w	r3, #12
 8010374:	e1ce      	b.n	8010714 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8010376:	6878      	ldr	r0, [r7, #4]
 8010378:	f000 fae0 	bl	801093c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801037c:	4b68      	ldr	r3, [pc, #416]	; (8010520 <tcp_process+0x5cc>)
 801037e:	881b      	ldrh	r3, [r3, #0]
 8010380:	2b00      	cmp	r3, #0
 8010382:	d005      	beq.n	8010390 <tcp_process+0x43c>
            recv_acked--;
 8010384:	4b66      	ldr	r3, [pc, #408]	; (8010520 <tcp_process+0x5cc>)
 8010386:	881b      	ldrh	r3, [r3, #0]
 8010388:	3b01      	subs	r3, #1
 801038a:	b29a      	uxth	r2, r3
 801038c:	4b64      	ldr	r3, [pc, #400]	; (8010520 <tcp_process+0x5cc>)
 801038e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010394:	009a      	lsls	r2, r3, #2
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801039a:	005b      	lsls	r3, r3, #1
 801039c:	f241 111c 	movw	r1, #4380	; 0x111c
 80103a0:	428b      	cmp	r3, r1
 80103a2:	bf38      	it	cc
 80103a4:	460b      	movcc	r3, r1
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d204      	bcs.n	80103b4 <tcp_process+0x460>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	e00d      	b.n	80103d0 <tcp_process+0x47c>
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103b8:	005b      	lsls	r3, r3, #1
 80103ba:	f241 121c 	movw	r2, #4380	; 0x111c
 80103be:	4293      	cmp	r3, r2
 80103c0:	d904      	bls.n	80103cc <tcp_process+0x478>
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80103c6:	005b      	lsls	r3, r3, #1
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	e001      	b.n	80103d0 <tcp_process+0x47c>
 80103cc:	f241 131c 	movw	r3, #4380	; 0x111c
 80103d0:	687a      	ldr	r2, [r7, #4]
 80103d2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80103d6:	4b53      	ldr	r3, [pc, #332]	; (8010524 <tcp_process+0x5d0>)
 80103d8:	781b      	ldrb	r3, [r3, #0]
 80103da:	f003 0320 	and.w	r3, r3, #32
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d037      	beq.n	8010452 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	8b5b      	ldrh	r3, [r3, #26]
 80103e6:	f043 0302 	orr.w	r3, r3, #2
 80103ea:	b29a      	uxth	r2, r3
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	2207      	movs	r2, #7
 80103f4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80103f6:	e02c      	b.n	8010452 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f8:	4b40      	ldr	r3, [pc, #256]	; (80104fc <tcp_process+0x5a8>)
 80103fa:	6819      	ldr	r1, [r3, #0]
 80103fc:	4b40      	ldr	r3, [pc, #256]	; (8010500 <tcp_process+0x5ac>)
 80103fe:	881b      	ldrh	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	4b40      	ldr	r3, [pc, #256]	; (8010504 <tcp_process+0x5b0>)
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010408:	4b3f      	ldr	r3, [pc, #252]	; (8010508 <tcp_process+0x5b4>)
 801040a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801040c:	885b      	ldrh	r3, [r3, #2]
 801040e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010410:	4a3d      	ldr	r2, [pc, #244]	; (8010508 <tcp_process+0x5b4>)
 8010412:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010414:	8812      	ldrh	r2, [r2, #0]
 8010416:	b292      	uxth	r2, r2
 8010418:	9202      	str	r2, [sp, #8]
 801041a:	9301      	str	r3, [sp, #4]
 801041c:	4b3b      	ldr	r3, [pc, #236]	; (801050c <tcp_process+0x5b8>)
 801041e:	9300      	str	r3, [sp, #0]
 8010420:	4b3b      	ldr	r3, [pc, #236]	; (8010510 <tcp_process+0x5bc>)
 8010422:	4602      	mov	r2, r0
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f002 fbcf 	bl	8012bc8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801042a:	e167      	b.n	80106fc <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801042c:	4b32      	ldr	r3, [pc, #200]	; (80104f8 <tcp_process+0x5a4>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	f003 0302 	and.w	r3, r3, #2
 8010434:	2b00      	cmp	r3, #0
 8010436:	f000 8161 	beq.w	80106fc <tcp_process+0x7a8>
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801043e:	1e5a      	subs	r2, r3, #1
 8010440:	4b30      	ldr	r3, [pc, #192]	; (8010504 <tcp_process+0x5b0>)
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	429a      	cmp	r2, r3
 8010446:	f040 8159 	bne.w	80106fc <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801044a:	6878      	ldr	r0, [r7, #4]
 801044c:	f002 f9b4 	bl	80127b8 <tcp_rexmit>
      break;
 8010450:	e154      	b.n	80106fc <tcp_process+0x7a8>
 8010452:	e153      	b.n	80106fc <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8010454:	6878      	ldr	r0, [r7, #4]
 8010456:	f000 fa71 	bl	801093c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801045a:	4b32      	ldr	r3, [pc, #200]	; (8010524 <tcp_process+0x5d0>)
 801045c:	781b      	ldrb	r3, [r3, #0]
 801045e:	f003 0320 	and.w	r3, r3, #32
 8010462:	2b00      	cmp	r3, #0
 8010464:	f000 814c 	beq.w	8010700 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	8b5b      	ldrh	r3, [r3, #26]
 801046c:	f043 0302 	orr.w	r3, r3, #2
 8010470:	b29a      	uxth	r2, r3
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2207      	movs	r2, #7
 801047a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801047c:	e140      	b.n	8010700 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f000 fa5c 	bl	801093c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8010484:	4b27      	ldr	r3, [pc, #156]	; (8010524 <tcp_process+0x5d0>)
 8010486:	781b      	ldrb	r3, [r3, #0]
 8010488:	f003 0320 	and.w	r3, r3, #32
 801048c:	2b00      	cmp	r3, #0
 801048e:	d071      	beq.n	8010574 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010490:	4b19      	ldr	r3, [pc, #100]	; (80104f8 <tcp_process+0x5a4>)
 8010492:	781b      	ldrb	r3, [r3, #0]
 8010494:	f003 0310 	and.w	r3, r3, #16
 8010498:	2b00      	cmp	r3, #0
 801049a:	d060      	beq.n	801055e <tcp_process+0x60a>
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80104a0:	4b16      	ldr	r3, [pc, #88]	; (80104fc <tcp_process+0x5a8>)
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d15a      	bne.n	801055e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d156      	bne.n	801055e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	8b5b      	ldrh	r3, [r3, #26]
 80104b4:	f043 0302 	orr.w	r3, r3, #2
 80104b8:	b29a      	uxth	r2, r3
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80104be:	6878      	ldr	r0, [r7, #4]
 80104c0:	f7fe fdbe 	bl	800f040 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80104c4:	4b18      	ldr	r3, [pc, #96]	; (8010528 <tcp_process+0x5d4>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	687a      	ldr	r2, [r7, #4]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d105      	bne.n	80104da <tcp_process+0x586>
 80104ce:	4b16      	ldr	r3, [pc, #88]	; (8010528 <tcp_process+0x5d4>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	4a14      	ldr	r2, [pc, #80]	; (8010528 <tcp_process+0x5d4>)
 80104d6:	6013      	str	r3, [r2, #0]
 80104d8:	e02e      	b.n	8010538 <tcp_process+0x5e4>
 80104da:	4b13      	ldr	r3, [pc, #76]	; (8010528 <tcp_process+0x5d4>)
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	617b      	str	r3, [r7, #20]
 80104e0:	e027      	b.n	8010532 <tcp_process+0x5de>
 80104e2:	697b      	ldr	r3, [r7, #20]
 80104e4:	68db      	ldr	r3, [r3, #12]
 80104e6:	687a      	ldr	r2, [r7, #4]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d11f      	bne.n	801052c <tcp_process+0x5d8>
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	68da      	ldr	r2, [r3, #12]
 80104f0:	697b      	ldr	r3, [r7, #20]
 80104f2:	60da      	str	r2, [r3, #12]
 80104f4:	e020      	b.n	8010538 <tcp_process+0x5e4>
 80104f6:	bf00      	nop
 80104f8:	20004618 	.word	0x20004618
 80104fc:	20004610 	.word	0x20004610
 8010500:	20004616 	.word	0x20004616
 8010504:	2000460c 	.word	0x2000460c
 8010508:	200045fc 	.word	0x200045fc
 801050c:	2000922c 	.word	0x2000922c
 8010510:	20009230 	.word	0x20009230
 8010514:	08018248 	.word	0x08018248
 8010518:	080184e8 	.word	0x080184e8
 801051c:	08018294 	.word	0x08018294
 8010520:	20004614 	.word	0x20004614
 8010524:	20004619 	.word	0x20004619
 8010528:	2000c930 	.word	0x2000c930
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	68db      	ldr	r3, [r3, #12]
 8010530:	617b      	str	r3, [r7, #20]
 8010532:	697b      	ldr	r3, [r7, #20]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d1d4      	bne.n	80104e2 <tcp_process+0x58e>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	60da      	str	r2, [r3, #12]
 801053e:	4b77      	ldr	r3, [pc, #476]	; (801071c <tcp_process+0x7c8>)
 8010540:	2201      	movs	r2, #1
 8010542:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	220a      	movs	r2, #10
 8010548:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801054a:	4b75      	ldr	r3, [pc, #468]	; (8010720 <tcp_process+0x7cc>)
 801054c:	681a      	ldr	r2, [r3, #0]
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	60da      	str	r2, [r3, #12]
 8010552:	4a73      	ldr	r2, [pc, #460]	; (8010720 <tcp_process+0x7cc>)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	f002 fcf8 	bl	8012f4c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801055c:	e0d2      	b.n	8010704 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	8b5b      	ldrh	r3, [r3, #26]
 8010562:	f043 0302 	orr.w	r3, r3, #2
 8010566:	b29a      	uxth	r2, r3
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2208      	movs	r2, #8
 8010570:	751a      	strb	r2, [r3, #20]
      break;
 8010572:	e0c7      	b.n	8010704 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010574:	4b6b      	ldr	r3, [pc, #428]	; (8010724 <tcp_process+0x7d0>)
 8010576:	781b      	ldrb	r3, [r3, #0]
 8010578:	f003 0310 	and.w	r3, r3, #16
 801057c:	2b00      	cmp	r3, #0
 801057e:	f000 80c1 	beq.w	8010704 <tcp_process+0x7b0>
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010586:	4b68      	ldr	r3, [pc, #416]	; (8010728 <tcp_process+0x7d4>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	429a      	cmp	r2, r3
 801058c:	f040 80ba 	bne.w	8010704 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8010594:	2b00      	cmp	r3, #0
 8010596:	f040 80b5 	bne.w	8010704 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2206      	movs	r2, #6
 801059e:	751a      	strb	r2, [r3, #20]
      break;
 80105a0:	e0b0      	b.n	8010704 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f000 f9ca 	bl	801093c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105a8:	4b60      	ldr	r3, [pc, #384]	; (801072c <tcp_process+0x7d8>)
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	f003 0320 	and.w	r3, r3, #32
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f000 80a9 	beq.w	8010708 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	8b5b      	ldrh	r3, [r3, #26]
 80105ba:	f043 0302 	orr.w	r3, r3, #2
 80105be:	b29a      	uxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80105c4:	6878      	ldr	r0, [r7, #4]
 80105c6:	f7fe fd3b 	bl	800f040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80105ca:	4b59      	ldr	r3, [pc, #356]	; (8010730 <tcp_process+0x7dc>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	687a      	ldr	r2, [r7, #4]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d105      	bne.n	80105e0 <tcp_process+0x68c>
 80105d4:	4b56      	ldr	r3, [pc, #344]	; (8010730 <tcp_process+0x7dc>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	68db      	ldr	r3, [r3, #12]
 80105da:	4a55      	ldr	r2, [pc, #340]	; (8010730 <tcp_process+0x7dc>)
 80105dc:	6013      	str	r3, [r2, #0]
 80105de:	e013      	b.n	8010608 <tcp_process+0x6b4>
 80105e0:	4b53      	ldr	r3, [pc, #332]	; (8010730 <tcp_process+0x7dc>)
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	613b      	str	r3, [r7, #16]
 80105e6:	e00c      	b.n	8010602 <tcp_process+0x6ae>
 80105e8:	693b      	ldr	r3, [r7, #16]
 80105ea:	68db      	ldr	r3, [r3, #12]
 80105ec:	687a      	ldr	r2, [r7, #4]
 80105ee:	429a      	cmp	r2, r3
 80105f0:	d104      	bne.n	80105fc <tcp_process+0x6a8>
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	68da      	ldr	r2, [r3, #12]
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	60da      	str	r2, [r3, #12]
 80105fa:	e005      	b.n	8010608 <tcp_process+0x6b4>
 80105fc:	693b      	ldr	r3, [r7, #16]
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	613b      	str	r3, [r7, #16]
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d1ef      	bne.n	80105e8 <tcp_process+0x694>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	60da      	str	r2, [r3, #12]
 801060e:	4b43      	ldr	r3, [pc, #268]	; (801071c <tcp_process+0x7c8>)
 8010610:	2201      	movs	r2, #1
 8010612:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	220a      	movs	r2, #10
 8010618:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801061a:	4b41      	ldr	r3, [pc, #260]	; (8010720 <tcp_process+0x7cc>)
 801061c:	681a      	ldr	r2, [r3, #0]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	60da      	str	r2, [r3, #12]
 8010622:	4a3f      	ldr	r2, [pc, #252]	; (8010720 <tcp_process+0x7cc>)
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	6013      	str	r3, [r2, #0]
 8010628:	f002 fc90 	bl	8012f4c <tcp_timer_needed>
      }
      break;
 801062c:	e06c      	b.n	8010708 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801062e:	6878      	ldr	r0, [r7, #4]
 8010630:	f000 f984 	bl	801093c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010634:	4b3b      	ldr	r3, [pc, #236]	; (8010724 <tcp_process+0x7d0>)
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	f003 0310 	and.w	r3, r3, #16
 801063c:	2b00      	cmp	r3, #0
 801063e:	d065      	beq.n	801070c <tcp_process+0x7b8>
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010644:	4b38      	ldr	r3, [pc, #224]	; (8010728 <tcp_process+0x7d4>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	429a      	cmp	r2, r3
 801064a:	d15f      	bne.n	801070c <tcp_process+0x7b8>
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010650:	2b00      	cmp	r3, #0
 8010652:	d15b      	bne.n	801070c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	f7fe fcf3 	bl	800f040 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801065a:	4b35      	ldr	r3, [pc, #212]	; (8010730 <tcp_process+0x7dc>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	687a      	ldr	r2, [r7, #4]
 8010660:	429a      	cmp	r2, r3
 8010662:	d105      	bne.n	8010670 <tcp_process+0x71c>
 8010664:	4b32      	ldr	r3, [pc, #200]	; (8010730 <tcp_process+0x7dc>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	68db      	ldr	r3, [r3, #12]
 801066a:	4a31      	ldr	r2, [pc, #196]	; (8010730 <tcp_process+0x7dc>)
 801066c:	6013      	str	r3, [r2, #0]
 801066e:	e013      	b.n	8010698 <tcp_process+0x744>
 8010670:	4b2f      	ldr	r3, [pc, #188]	; (8010730 <tcp_process+0x7dc>)
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	60fb      	str	r3, [r7, #12]
 8010676:	e00c      	b.n	8010692 <tcp_process+0x73e>
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	687a      	ldr	r2, [r7, #4]
 801067e:	429a      	cmp	r2, r3
 8010680:	d104      	bne.n	801068c <tcp_process+0x738>
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	68da      	ldr	r2, [r3, #12]
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	60da      	str	r2, [r3, #12]
 801068a:	e005      	b.n	8010698 <tcp_process+0x744>
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	68db      	ldr	r3, [r3, #12]
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d1ef      	bne.n	8010678 <tcp_process+0x724>
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	2200      	movs	r2, #0
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	4b1f      	ldr	r3, [pc, #124]	; (801071c <tcp_process+0x7c8>)
 80106a0:	2201      	movs	r2, #1
 80106a2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	220a      	movs	r2, #10
 80106a8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80106aa:	4b1d      	ldr	r3, [pc, #116]	; (8010720 <tcp_process+0x7cc>)
 80106ac:	681a      	ldr	r2, [r3, #0]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	60da      	str	r2, [r3, #12]
 80106b2:	4a1b      	ldr	r2, [pc, #108]	; (8010720 <tcp_process+0x7cc>)
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	6013      	str	r3, [r2, #0]
 80106b8:	f002 fc48 	bl	8012f4c <tcp_timer_needed>
      }
      break;
 80106bc:	e026      	b.n	801070c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80106be:	6878      	ldr	r0, [r7, #4]
 80106c0:	f000 f93c 	bl	801093c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80106c4:	4b17      	ldr	r3, [pc, #92]	; (8010724 <tcp_process+0x7d0>)
 80106c6:	781b      	ldrb	r3, [r3, #0]
 80106c8:	f003 0310 	and.w	r3, r3, #16
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d01f      	beq.n	8010710 <tcp_process+0x7bc>
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106d4:	4b14      	ldr	r3, [pc, #80]	; (8010728 <tcp_process+0x7d4>)
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	429a      	cmp	r2, r3
 80106da:	d119      	bne.n	8010710 <tcp_process+0x7bc>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d115      	bne.n	8010710 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80106e4:	4b11      	ldr	r3, [pc, #68]	; (801072c <tcp_process+0x7d8>)
 80106e6:	781b      	ldrb	r3, [r3, #0]
 80106e8:	f043 0310 	orr.w	r3, r3, #16
 80106ec:	b2da      	uxtb	r2, r3
 80106ee:	4b0f      	ldr	r3, [pc, #60]	; (801072c <tcp_process+0x7d8>)
 80106f0:	701a      	strb	r2, [r3, #0]
      }
      break;
 80106f2:	e00d      	b.n	8010710 <tcp_process+0x7bc>
    default:
      break;
 80106f4:	bf00      	nop
 80106f6:	e00c      	b.n	8010712 <tcp_process+0x7be>
      break;
 80106f8:	bf00      	nop
 80106fa:	e00a      	b.n	8010712 <tcp_process+0x7be>
      break;
 80106fc:	bf00      	nop
 80106fe:	e008      	b.n	8010712 <tcp_process+0x7be>
      break;
 8010700:	bf00      	nop
 8010702:	e006      	b.n	8010712 <tcp_process+0x7be>
      break;
 8010704:	bf00      	nop
 8010706:	e004      	b.n	8010712 <tcp_process+0x7be>
      break;
 8010708:	bf00      	nop
 801070a:	e002      	b.n	8010712 <tcp_process+0x7be>
      break;
 801070c:	bf00      	nop
 801070e:	e000      	b.n	8010712 <tcp_process+0x7be>
      break;
 8010710:	bf00      	nop
  }
  return ERR_OK;
 8010712:	2300      	movs	r3, #0
}
 8010714:	4618      	mov	r0, r3
 8010716:	3724      	adds	r7, #36	; 0x24
 8010718:	46bd      	mov	sp, r7
 801071a:	bd90      	pop	{r4, r7, pc}
 801071c:	2000c92c 	.word	0x2000c92c
 8010720:	2000c940 	.word	0x2000c940
 8010724:	20004618 	.word	0x20004618
 8010728:	20004610 	.word	0x20004610
 801072c:	20004619 	.word	0x20004619
 8010730:	2000c930 	.word	0x2000c930

08010734 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010734:	b590      	push	{r4, r7, lr}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
 801073c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2b00      	cmp	r3, #0
 8010742:	d106      	bne.n	8010752 <tcp_oos_insert_segment+0x1e>
 8010744:	4b3b      	ldr	r3, [pc, #236]	; (8010834 <tcp_oos_insert_segment+0x100>)
 8010746:	f240 421f 	movw	r2, #1055	; 0x41f
 801074a:	493b      	ldr	r1, [pc, #236]	; (8010838 <tcp_oos_insert_segment+0x104>)
 801074c:	483b      	ldr	r0, [pc, #236]	; (801083c <tcp_oos_insert_segment+0x108>)
 801074e:	f005 fb4f 	bl	8015df0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	68db      	ldr	r3, [r3, #12]
 8010756:	899b      	ldrh	r3, [r3, #12]
 8010758:	b29b      	uxth	r3, r3
 801075a:	4618      	mov	r0, r3
 801075c:	f7fb fc58 	bl	800c010 <lwip_htons>
 8010760:	4603      	mov	r3, r0
 8010762:	b2db      	uxtb	r3, r3
 8010764:	f003 0301 	and.w	r3, r3, #1
 8010768:	2b00      	cmp	r3, #0
 801076a:	d028      	beq.n	80107be <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801076c:	6838      	ldr	r0, [r7, #0]
 801076e:	f7fe fa65 	bl	800ec3c <tcp_segs_free>
    next = NULL;
 8010772:	2300      	movs	r3, #0
 8010774:	603b      	str	r3, [r7, #0]
 8010776:	e056      	b.n	8010826 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	68db      	ldr	r3, [r3, #12]
 801077c:	899b      	ldrh	r3, [r3, #12]
 801077e:	b29b      	uxth	r3, r3
 8010780:	4618      	mov	r0, r3
 8010782:	f7fb fc45 	bl	800c010 <lwip_htons>
 8010786:	4603      	mov	r3, r0
 8010788:	b2db      	uxtb	r3, r3
 801078a:	f003 0301 	and.w	r3, r3, #1
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00d      	beq.n	80107ae <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	68db      	ldr	r3, [r3, #12]
 8010796:	899b      	ldrh	r3, [r3, #12]
 8010798:	b29c      	uxth	r4, r3
 801079a:	2001      	movs	r0, #1
 801079c:	f7fb fc38 	bl	800c010 <lwip_htons>
 80107a0:	4603      	mov	r3, r0
 80107a2:	461a      	mov	r2, r3
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	4322      	orrs	r2, r4
 80107aa:	b292      	uxth	r2, r2
 80107ac:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80107ae:	683b      	ldr	r3, [r7, #0]
 80107b0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80107b8:	68f8      	ldr	r0, [r7, #12]
 80107ba:	f7fe fa54 	bl	800ec66 <tcp_seg_free>
    while (next &&
 80107be:	683b      	ldr	r3, [r7, #0]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d00e      	beq.n	80107e2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	891b      	ldrh	r3, [r3, #8]
 80107c8:	461a      	mov	r2, r3
 80107ca:	4b1d      	ldr	r3, [pc, #116]	; (8010840 <tcp_oos_insert_segment+0x10c>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	441a      	add	r2, r3
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	68db      	ldr	r3, [r3, #12]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	6839      	ldr	r1, [r7, #0]
 80107d8:	8909      	ldrh	r1, [r1, #8]
 80107da:	440b      	add	r3, r1
 80107dc:	1ad3      	subs	r3, r2, r3
    while (next &&
 80107de:	2b00      	cmp	r3, #0
 80107e0:	daca      	bge.n	8010778 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80107e2:	683b      	ldr	r3, [r7, #0]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d01e      	beq.n	8010826 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	891b      	ldrh	r3, [r3, #8]
 80107ec:	461a      	mov	r2, r3
 80107ee:	4b14      	ldr	r3, [pc, #80]	; (8010840 <tcp_oos_insert_segment+0x10c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	441a      	add	r2, r3
 80107f4:	683b      	ldr	r3, [r7, #0]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	685b      	ldr	r3, [r3, #4]
 80107fa:	1ad3      	subs	r3, r2, r3
    if (next &&
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	dd12      	ble.n	8010826 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	68db      	ldr	r3, [r3, #12]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	b29a      	uxth	r2, r3
 8010808:	4b0d      	ldr	r3, [pc, #52]	; (8010840 <tcp_oos_insert_segment+0x10c>)
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	b29b      	uxth	r3, r3
 801080e:	1ad3      	subs	r3, r2, r3
 8010810:	b29a      	uxth	r2, r3
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	685a      	ldr	r2, [r3, #4]
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	891b      	ldrh	r3, [r3, #8]
 801081e:	4619      	mov	r1, r3
 8010820:	4610      	mov	r0, r2
 8010822:	f7fc fe1b 	bl	800d45c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	683a      	ldr	r2, [r7, #0]
 801082a:	601a      	str	r2, [r3, #0]
}
 801082c:	bf00      	nop
 801082e:	3714      	adds	r7, #20
 8010830:	46bd      	mov	sp, r7
 8010832:	bd90      	pop	{r4, r7, pc}
 8010834:	08018248 	.word	0x08018248
 8010838:	08018508 	.word	0x08018508
 801083c:	08018294 	.word	0x08018294
 8010840:	2000460c 	.word	0x2000460c

08010844 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010844:	b5b0      	push	{r4, r5, r7, lr}
 8010846:	b086      	sub	sp, #24
 8010848:	af00      	add	r7, sp, #0
 801084a:	60f8      	str	r0, [r7, #12]
 801084c:	60b9      	str	r1, [r7, #8]
 801084e:	607a      	str	r2, [r7, #4]
 8010850:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8010852:	e03e      	b.n	80108d2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801085e:	697b      	ldr	r3, [r7, #20]
 8010860:	685b      	ldr	r3, [r3, #4]
 8010862:	4618      	mov	r0, r3
 8010864:	f7fd f80e 	bl	800d884 <pbuf_clen>
 8010868:	4603      	mov	r3, r0
 801086a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010872:	8a7a      	ldrh	r2, [r7, #18]
 8010874:	429a      	cmp	r2, r3
 8010876:	d906      	bls.n	8010886 <tcp_free_acked_segments+0x42>
 8010878:	4b2a      	ldr	r3, [pc, #168]	; (8010924 <tcp_free_acked_segments+0xe0>)
 801087a:	f240 4257 	movw	r2, #1111	; 0x457
 801087e:	492a      	ldr	r1, [pc, #168]	; (8010928 <tcp_free_acked_segments+0xe4>)
 8010880:	482a      	ldr	r0, [pc, #168]	; (801092c <tcp_free_acked_segments+0xe8>)
 8010882:	f005 fab5 	bl	8015df0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8010886:	68fb      	ldr	r3, [r7, #12]
 8010888:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801088c:	8a7b      	ldrh	r3, [r7, #18]
 801088e:	1ad3      	subs	r3, r2, r3
 8010890:	b29a      	uxth	r2, r3
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8010898:	697b      	ldr	r3, [r7, #20]
 801089a:	891a      	ldrh	r2, [r3, #8]
 801089c:	4b24      	ldr	r3, [pc, #144]	; (8010930 <tcp_free_acked_segments+0xec>)
 801089e:	881b      	ldrh	r3, [r3, #0]
 80108a0:	4413      	add	r3, r2
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	4b22      	ldr	r3, [pc, #136]	; (8010930 <tcp_free_acked_segments+0xec>)
 80108a6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80108a8:	6978      	ldr	r0, [r7, #20]
 80108aa:	f7fe f9dc 	bl	800ec66 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d00c      	beq.n	80108d2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80108b8:	68bb      	ldr	r3, [r7, #8]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d109      	bne.n	80108d2 <tcp_free_acked_segments+0x8e>
 80108be:	683b      	ldr	r3, [r7, #0]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d106      	bne.n	80108d2 <tcp_free_acked_segments+0x8e>
 80108c4:	4b17      	ldr	r3, [pc, #92]	; (8010924 <tcp_free_acked_segments+0xe0>)
 80108c6:	f240 4261 	movw	r2, #1121	; 0x461
 80108ca:	491a      	ldr	r1, [pc, #104]	; (8010934 <tcp_free_acked_segments+0xf0>)
 80108cc:	4817      	ldr	r0, [pc, #92]	; (801092c <tcp_free_acked_segments+0xe8>)
 80108ce:	f005 fa8f 	bl	8015df0 <iprintf>
  while (seg_list != NULL &&
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d020      	beq.n	801091a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80108d8:	68bb      	ldr	r3, [r7, #8]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fb fbab 	bl	800c03a <lwip_htonl>
 80108e4:	4604      	mov	r4, r0
 80108e6:	68bb      	ldr	r3, [r7, #8]
 80108e8:	891b      	ldrh	r3, [r3, #8]
 80108ea:	461d      	mov	r5, r3
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	68db      	ldr	r3, [r3, #12]
 80108f0:	899b      	ldrh	r3, [r3, #12]
 80108f2:	b29b      	uxth	r3, r3
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7fb fb8b 	bl	800c010 <lwip_htons>
 80108fa:	4603      	mov	r3, r0
 80108fc:	b2db      	uxtb	r3, r3
 80108fe:	f003 0303 	and.w	r3, r3, #3
 8010902:	2b00      	cmp	r3, #0
 8010904:	d001      	beq.n	801090a <tcp_free_acked_segments+0xc6>
 8010906:	2301      	movs	r3, #1
 8010908:	e000      	b.n	801090c <tcp_free_acked_segments+0xc8>
 801090a:	2300      	movs	r3, #0
 801090c:	442b      	add	r3, r5
 801090e:	18e2      	adds	r2, r4, r3
 8010910:	4b09      	ldr	r3, [pc, #36]	; (8010938 <tcp_free_acked_segments+0xf4>)
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010916:	2b00      	cmp	r3, #0
 8010918:	dd9c      	ble.n	8010854 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801091a:	68bb      	ldr	r3, [r7, #8]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3718      	adds	r7, #24
 8010920:	46bd      	mov	sp, r7
 8010922:	bdb0      	pop	{r4, r5, r7, pc}
 8010924:	08018248 	.word	0x08018248
 8010928:	08018530 	.word	0x08018530
 801092c:	08018294 	.word	0x08018294
 8010930:	20004614 	.word	0x20004614
 8010934:	08018558 	.word	0x08018558
 8010938:	20004610 	.word	0x20004610

0801093c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801093c:	b5b0      	push	{r4, r5, r7, lr}
 801093e:	b094      	sub	sp, #80	; 0x50
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010944:	2300      	movs	r3, #0
 8010946:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d106      	bne.n	801095c <tcp_receive+0x20>
 801094e:	4ba6      	ldr	r3, [pc, #664]	; (8010be8 <tcp_receive+0x2ac>)
 8010950:	f240 427b 	movw	r2, #1147	; 0x47b
 8010954:	49a5      	ldr	r1, [pc, #660]	; (8010bec <tcp_receive+0x2b0>)
 8010956:	48a6      	ldr	r0, [pc, #664]	; (8010bf0 <tcp_receive+0x2b4>)
 8010958:	f005 fa4a 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	7d1b      	ldrb	r3, [r3, #20]
 8010960:	2b03      	cmp	r3, #3
 8010962:	d806      	bhi.n	8010972 <tcp_receive+0x36>
 8010964:	4ba0      	ldr	r3, [pc, #640]	; (8010be8 <tcp_receive+0x2ac>)
 8010966:	f240 427c 	movw	r2, #1148	; 0x47c
 801096a:	49a2      	ldr	r1, [pc, #648]	; (8010bf4 <tcp_receive+0x2b8>)
 801096c:	48a0      	ldr	r0, [pc, #640]	; (8010bf0 <tcp_receive+0x2b4>)
 801096e:	f005 fa3f 	bl	8015df0 <iprintf>

  if (flags & TCP_ACK) {
 8010972:	4ba1      	ldr	r3, [pc, #644]	; (8010bf8 <tcp_receive+0x2bc>)
 8010974:	781b      	ldrb	r3, [r3, #0]
 8010976:	f003 0310 	and.w	r3, r3, #16
 801097a:	2b00      	cmp	r3, #0
 801097c:	f000 8263 	beq.w	8010e46 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010986:	461a      	mov	r2, r3
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801098c:	4413      	add	r3, r2
 801098e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010994:	4b99      	ldr	r3, [pc, #612]	; (8010bfc <tcp_receive+0x2c0>)
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	1ad3      	subs	r3, r2, r3
 801099a:	2b00      	cmp	r3, #0
 801099c:	db1b      	blt.n	80109d6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109a2:	4b96      	ldr	r3, [pc, #600]	; (8010bfc <tcp_receive+0x2c0>)
 80109a4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d106      	bne.n	80109b8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109ae:	4b94      	ldr	r3, [pc, #592]	; (8010c00 <tcp_receive+0x2c4>)
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	1ad3      	subs	r3, r2, r3
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	db0e      	blt.n	80109d6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80109bc:	4b90      	ldr	r3, [pc, #576]	; (8010c00 <tcp_receive+0x2c4>)
 80109be:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d125      	bne.n	8010a10 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80109c4:	4b8f      	ldr	r3, [pc, #572]	; (8010c04 <tcp_receive+0x2c8>)
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	89db      	ldrh	r3, [r3, #14]
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d91c      	bls.n	8010a10 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80109d6:	4b8b      	ldr	r3, [pc, #556]	; (8010c04 <tcp_receive+0x2c8>)
 80109d8:	681b      	ldr	r3, [r3, #0]
 80109da:	89db      	ldrh	r3, [r3, #14]
 80109dc:	b29a      	uxth	r2, r3
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d205      	bcs.n	8010a00 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010a00:	4b7e      	ldr	r3, [pc, #504]	; (8010bfc <tcp_receive+0x2c0>)
 8010a02:	681a      	ldr	r2, [r3, #0]
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010a08:	4b7d      	ldr	r3, [pc, #500]	; (8010c00 <tcp_receive+0x2c4>)
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010a10:	4b7b      	ldr	r3, [pc, #492]	; (8010c00 <tcp_receive+0x2c4>)
 8010a12:	681a      	ldr	r2, [r3, #0]
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010a18:	1ad3      	subs	r3, r2, r3
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	dc58      	bgt.n	8010ad0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010a1e:	4b7a      	ldr	r3, [pc, #488]	; (8010c08 <tcp_receive+0x2cc>)
 8010a20:	881b      	ldrh	r3, [r3, #0]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d14b      	bne.n	8010abe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010a2a:	687a      	ldr	r2, [r7, #4]
 8010a2c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010a30:	4413      	add	r3, r2
 8010a32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a34:	429a      	cmp	r2, r3
 8010a36:	d142      	bne.n	8010abe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	db3d      	blt.n	8010abe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010a46:	4b6e      	ldr	r3, [pc, #440]	; (8010c00 <tcp_receive+0x2c4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	429a      	cmp	r2, r3
 8010a4c:	d137      	bne.n	8010abe <tcp_receive+0x182>
              found_dupack = 1;
 8010a4e:	2301      	movs	r3, #1
 8010a50:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a58:	2bff      	cmp	r3, #255	; 0xff
 8010a5a:	d007      	beq.n	8010a6c <tcp_receive+0x130>
                ++pcb->dupacks;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a62:	3301      	adds	r3, #1
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010a72:	2b03      	cmp	r3, #3
 8010a74:	d91b      	bls.n	8010aae <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a80:	4413      	add	r3, r2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d30a      	bcc.n	8010aa4 <tcp_receive+0x168>
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010a98:	4413      	add	r3, r2
 8010a9a:	b29a      	uxth	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010aa2:	e004      	b.n	8010aae <tcp_receive+0x172>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aaa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ab4:	2b02      	cmp	r3, #2
 8010ab6:	d902      	bls.n	8010abe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f001 fee9 	bl	8012890 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	f040 8160 	bne.w	8010d86 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	2200      	movs	r2, #0
 8010aca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010ace:	e15a      	b.n	8010d86 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ad0:	4b4b      	ldr	r3, [pc, #300]	; (8010c00 <tcp_receive+0x2c4>)
 8010ad2:	681a      	ldr	r2, [r3, #0]
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	3b01      	subs	r3, #1
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	f2c0 814d 	blt.w	8010d7c <tcp_receive+0x440>
 8010ae2:	4b47      	ldr	r3, [pc, #284]	; (8010c00 <tcp_receive+0x2c4>)
 8010ae4:	681a      	ldr	r2, [r3, #0]
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010aea:	1ad3      	subs	r3, r2, r3
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	f300 8145 	bgt.w	8010d7c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	8b5b      	ldrh	r3, [r3, #26]
 8010af6:	f003 0304 	and.w	r3, r3, #4
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d010      	beq.n	8010b20 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	8b5b      	ldrh	r3, [r3, #26]
 8010b02:	f023 0304 	bic.w	r3, r3, #4
 8010b06:	b29a      	uxth	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b2e:	10db      	asrs	r3, r3, #3
 8010b30:	b21b      	sxth	r3, r3
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b3a:	b29b      	uxth	r3, r3
 8010b3c:	4413      	add	r3, r2
 8010b3e:	b29b      	uxth	r3, r3
 8010b40:	b21a      	sxth	r2, r3
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010b48:	4b2d      	ldr	r3, [pc, #180]	; (8010c00 <tcp_receive+0x2c4>)
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	b29a      	uxth	r2, r3
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b52:	b29b      	uxth	r3, r3
 8010b54:	1ad3      	subs	r3, r2, r3
 8010b56:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	2200      	movs	r2, #0
 8010b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010b60:	4b27      	ldr	r3, [pc, #156]	; (8010c00 <tcp_receive+0x2c4>)
 8010b62:	681a      	ldr	r2, [r3, #0]
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	7d1b      	ldrb	r3, [r3, #20]
 8010b6c:	2b03      	cmp	r3, #3
 8010b6e:	f240 8096 	bls.w	8010c9e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010b7e:	429a      	cmp	r2, r3
 8010b80:	d244      	bcs.n	8010c0c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8b5b      	ldrh	r3, [r3, #26]
 8010b86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d001      	beq.n	8010b92 <tcp_receive+0x256>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <tcp_receive+0x258>
 8010b92:	2302      	movs	r3, #2
 8010b94:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010b98:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b9c:	b29a      	uxth	r2, r3
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ba2:	fb12 f303 	smulbb	r3, r2, r3
 8010ba6:	b29b      	uxth	r3, r3
 8010ba8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010baa:	4293      	cmp	r3, r2
 8010bac:	bf28      	it	cs
 8010bae:	4613      	movcs	r3, r2
 8010bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bb8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bba:	4413      	add	r3, r2
 8010bbc:	b29a      	uxth	r2, r3
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d309      	bcc.n	8010bdc <tcp_receive+0x2a0>
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010bd0:	4413      	add	r3, r2
 8010bd2:	b29a      	uxth	r2, r3
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bda:	e060      	b.n	8010c9e <tcp_receive+0x362>
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010be2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010be6:	e05a      	b.n	8010c9e <tcp_receive+0x362>
 8010be8:	08018248 	.word	0x08018248
 8010bec:	08018578 	.word	0x08018578
 8010bf0:	08018294 	.word	0x08018294
 8010bf4:	08018594 	.word	0x08018594
 8010bf8:	20004618 	.word	0x20004618
 8010bfc:	2000460c 	.word	0x2000460c
 8010c00:	20004610 	.word	0x20004610
 8010c04:	200045fc 	.word	0x200045fc
 8010c08:	20004616 	.word	0x20004616
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c14:	4413      	add	r3, r2
 8010c16:	b29a      	uxth	r2, r3
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010c1e:	429a      	cmp	r2, r3
 8010c20:	d309      	bcc.n	8010c36 <tcp_receive+0x2fa>
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010c2a:	4413      	add	r3, r2
 8010c2c:	b29a      	uxth	r2, r3
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010c34:	e004      	b.n	8010c40 <tcp_receive+0x304>
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c4c:	429a      	cmp	r2, r3
 8010c4e:	d326      	bcc.n	8010c9e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c5c:	1ad3      	subs	r3, r2, r3
 8010c5e:	b29a      	uxth	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c70:	4413      	add	r3, r2
 8010c72:	b29a      	uxth	r2, r3
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010c7a:	429a      	cmp	r2, r3
 8010c7c:	d30a      	bcc.n	8010c94 <tcp_receive+0x358>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c88:	4413      	add	r3, r2
 8010c8a:	b29a      	uxth	r2, r3
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010c92:	e004      	b.n	8010c9e <tcp_receive+0x362>
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca6:	4a98      	ldr	r2, [pc, #608]	; (8010f08 <tcp_receive+0x5cc>)
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f7ff fdcb 	bl	8010844 <tcp_free_acked_segments>
 8010cae:	4602      	mov	r2, r0
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cbc:	4a93      	ldr	r2, [pc, #588]	; (8010f0c <tcp_receive+0x5d0>)
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f7ff fdc0 	bl	8010844 <tcp_free_acked_segments>
 8010cc4:	4602      	mov	r2, r0
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d104      	bne.n	8010cdc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010cd8:	861a      	strh	r2, [r3, #48]	; 0x30
 8010cda:	e002      	b.n	8010ce2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d103      	bne.n	8010cf8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010cfe:	4b84      	ldr	r3, [pc, #528]	; (8010f10 <tcp_receive+0x5d4>)
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	4413      	add	r3, r2
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	8b5b      	ldrh	r3, [r3, #26]
 8010d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d035      	beq.n	8010d84 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d118      	bne.n	8010d52 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00c      	beq.n	8010d42 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d30:	68db      	ldr	r3, [r3, #12]
 8010d32:	685b      	ldr	r3, [r3, #4]
 8010d34:	4618      	mov	r0, r3
 8010d36:	f7fb f980 	bl	800c03a <lwip_htonl>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	dc20      	bgt.n	8010d84 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8b5b      	ldrh	r3, [r3, #26]
 8010d46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d4a:	b29a      	uxth	r2, r3
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d50:	e018      	b.n	8010d84 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d5a:	68db      	ldr	r3, [r3, #12]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	4618      	mov	r0, r3
 8010d60:	f7fb f96b 	bl	800c03a <lwip_htonl>
 8010d64:	4603      	mov	r3, r0
 8010d66:	1ae3      	subs	r3, r4, r3
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	dc0b      	bgt.n	8010d84 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	8b5b      	ldrh	r3, [r3, #26]
 8010d70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010d74:	b29a      	uxth	r2, r3
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d7a:	e003      	b.n	8010d84 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f001 ff75 	bl	8012c6c <tcp_send_empty_ack>
 8010d82:	e000      	b.n	8010d86 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010d84:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d05b      	beq.n	8010e46 <tcp_receive+0x50a>
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d92:	4b60      	ldr	r3, [pc, #384]	; (8010f14 <tcp_receive+0x5d8>)
 8010d94:	681b      	ldr	r3, [r3, #0]
 8010d96:	1ad3      	subs	r3, r2, r3
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	da54      	bge.n	8010e46 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010d9c:	4b5e      	ldr	r3, [pc, #376]	; (8010f18 <tcp_receive+0x5dc>)
 8010d9e:	681b      	ldr	r3, [r3, #0]
 8010da0:	b29a      	uxth	r2, r3
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010da6:	b29b      	uxth	r3, r3
 8010da8:	1ad3      	subs	r3, r2, r3
 8010daa:	b29b      	uxth	r3, r3
 8010dac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010db0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dba:	10db      	asrs	r3, r3, #3
 8010dbc:	b21b      	sxth	r3, r3
 8010dbe:	b29b      	uxth	r3, r3
 8010dc0:	1ad3      	subs	r3, r2, r3
 8010dc2:	b29b      	uxth	r3, r3
 8010dc4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dd4:	4413      	add	r3, r2
 8010dd6:	b29b      	uxth	r3, r3
 8010dd8:	b21a      	sxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010dde:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	da05      	bge.n	8010df2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8010de6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010dea:	425b      	negs	r3, r3
 8010dec:	b29b      	uxth	r3, r3
 8010dee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010df2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010dfc:	109b      	asrs	r3, r3, #2
 8010dfe:	b21b      	sxth	r3, r3
 8010e00:	b29b      	uxth	r3, r3
 8010e02:	1ad3      	subs	r3, r2, r3
 8010e04:	b29b      	uxth	r3, r3
 8010e06:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e10:	b29a      	uxth	r2, r3
 8010e12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010e16:	4413      	add	r3, r2
 8010e18:	b29b      	uxth	r3, r3
 8010e1a:	b21a      	sxth	r2, r3
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010e26:	10db      	asrs	r3, r3, #3
 8010e28:	b21b      	sxth	r3, r3
 8010e2a:	b29a      	uxth	r2, r3
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010e32:	b29b      	uxth	r3, r3
 8010e34:	4413      	add	r3, r2
 8010e36:	b29b      	uxth	r3, r3
 8010e38:	b21a      	sxth	r2, r3
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2200      	movs	r2, #0
 8010e44:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010e46:	4b35      	ldr	r3, [pc, #212]	; (8010f1c <tcp_receive+0x5e0>)
 8010e48:	881b      	ldrh	r3, [r3, #0]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 84e1 	beq.w	8011812 <tcp_receive+0xed6>
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	7d1b      	ldrb	r3, [r3, #20]
 8010e54:	2b06      	cmp	r3, #6
 8010e56:	f200 84dc 	bhi.w	8011812 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e5e:	4b30      	ldr	r3, [pc, #192]	; (8010f20 <tcp_receive+0x5e4>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	1ad3      	subs	r3, r2, r3
 8010e64:	3b01      	subs	r3, #1
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	f2c0 808e 	blt.w	8010f88 <tcp_receive+0x64c>
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e70:	4b2a      	ldr	r3, [pc, #168]	; (8010f1c <tcp_receive+0x5e0>)
 8010e72:	881b      	ldrh	r3, [r3, #0]
 8010e74:	4619      	mov	r1, r3
 8010e76:	4b2a      	ldr	r3, [pc, #168]	; (8010f20 <tcp_receive+0x5e4>)
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	440b      	add	r3, r1
 8010e7c:	1ad3      	subs	r3, r2, r3
 8010e7e:	3301      	adds	r3, #1
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	f300 8081 	bgt.w	8010f88 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010e86:	4b27      	ldr	r3, [pc, #156]	; (8010f24 <tcp_receive+0x5e8>)
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010e90:	4b23      	ldr	r3, [pc, #140]	; (8010f20 <tcp_receive+0x5e4>)
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	1ad3      	subs	r3, r2, r3
 8010e96:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010e98:	4b22      	ldr	r3, [pc, #136]	; (8010f24 <tcp_receive+0x5e8>)
 8010e9a:	685b      	ldr	r3, [r3, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d106      	bne.n	8010eae <tcp_receive+0x572>
 8010ea0:	4b21      	ldr	r3, [pc, #132]	; (8010f28 <tcp_receive+0x5ec>)
 8010ea2:	f240 5294 	movw	r2, #1428	; 0x594
 8010ea6:	4921      	ldr	r1, [pc, #132]	; (8010f2c <tcp_receive+0x5f0>)
 8010ea8:	4821      	ldr	r0, [pc, #132]	; (8010f30 <tcp_receive+0x5f4>)
 8010eaa:	f004 ffa1 	bl	8015df0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010eb4:	4293      	cmp	r3, r2
 8010eb6:	d906      	bls.n	8010ec6 <tcp_receive+0x58a>
 8010eb8:	4b1b      	ldr	r3, [pc, #108]	; (8010f28 <tcp_receive+0x5ec>)
 8010eba:	f240 5295 	movw	r2, #1429	; 0x595
 8010ebe:	491d      	ldr	r1, [pc, #116]	; (8010f34 <tcp_receive+0x5f8>)
 8010ec0:	481b      	ldr	r0, [pc, #108]	; (8010f30 <tcp_receive+0x5f4>)
 8010ec2:	f004 ff95 	bl	8015df0 <iprintf>
      off = (u16_t)off32;
 8010ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ec8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010ecc:	4b15      	ldr	r3, [pc, #84]	; (8010f24 <tcp_receive+0x5e8>)
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	891b      	ldrh	r3, [r3, #8]
 8010ed2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010ed6:	429a      	cmp	r2, r3
 8010ed8:	d906      	bls.n	8010ee8 <tcp_receive+0x5ac>
 8010eda:	4b13      	ldr	r3, [pc, #76]	; (8010f28 <tcp_receive+0x5ec>)
 8010edc:	f240 5297 	movw	r2, #1431	; 0x597
 8010ee0:	4915      	ldr	r1, [pc, #84]	; (8010f38 <tcp_receive+0x5fc>)
 8010ee2:	4813      	ldr	r0, [pc, #76]	; (8010f30 <tcp_receive+0x5f4>)
 8010ee4:	f004 ff84 	bl	8015df0 <iprintf>
      inseg.len -= off;
 8010ee8:	4b0e      	ldr	r3, [pc, #56]	; (8010f24 <tcp_receive+0x5e8>)
 8010eea:	891a      	ldrh	r2, [r3, #8]
 8010eec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	b29a      	uxth	r2, r3
 8010ef4:	4b0b      	ldr	r3, [pc, #44]	; (8010f24 <tcp_receive+0x5e8>)
 8010ef6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010ef8:	4b0a      	ldr	r3, [pc, #40]	; (8010f24 <tcp_receive+0x5e8>)
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	891a      	ldrh	r2, [r3, #8]
 8010efe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010f06:	e029      	b.n	8010f5c <tcp_receive+0x620>
 8010f08:	080185b0 	.word	0x080185b0
 8010f0c:	080185b8 	.word	0x080185b8
 8010f10:	20004614 	.word	0x20004614
 8010f14:	20004610 	.word	0x20004610
 8010f18:	2000c934 	.word	0x2000c934
 8010f1c:	20004616 	.word	0x20004616
 8010f20:	2000460c 	.word	0x2000460c
 8010f24:	200045ec 	.word	0x200045ec
 8010f28:	08018248 	.word	0x08018248
 8010f2c:	080185c0 	.word	0x080185c0
 8010f30:	08018294 	.word	0x08018294
 8010f34:	080185d0 	.word	0x080185d0
 8010f38:	080185e0 	.word	0x080185e0
        off -= p->len;
 8010f3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f3e:	895b      	ldrh	r3, [r3, #10]
 8010f40:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f44:	1ad3      	subs	r3, r2, r3
 8010f46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f4c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010f4e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8010f50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f52:	2200      	movs	r2, #0
 8010f54:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8010f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8010f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f5e:	895b      	ldrh	r3, [r3, #10]
 8010f60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d8e9      	bhi.n	8010f3c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8010f68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f6c:	4619      	mov	r1, r3
 8010f6e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010f70:	f7fc fb74 	bl	800d65c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f78:	4a91      	ldr	r2, [pc, #580]	; (80111c0 <tcp_receive+0x884>)
 8010f7a:	6013      	str	r3, [r2, #0]
 8010f7c:	4b91      	ldr	r3, [pc, #580]	; (80111c4 <tcp_receive+0x888>)
 8010f7e:	68db      	ldr	r3, [r3, #12]
 8010f80:	4a8f      	ldr	r2, [pc, #572]	; (80111c0 <tcp_receive+0x884>)
 8010f82:	6812      	ldr	r2, [r2, #0]
 8010f84:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010f86:	e00d      	b.n	8010fa4 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010f88:	4b8d      	ldr	r3, [pc, #564]	; (80111c0 <tcp_receive+0x884>)
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f90:	1ad3      	subs	r3, r2, r3
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	da06      	bge.n	8010fa4 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	8b5b      	ldrh	r3, [r3, #26]
 8010f9a:	f043 0302 	orr.w	r3, r3, #2
 8010f9e:	b29a      	uxth	r2, r3
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010fa4:	4b86      	ldr	r3, [pc, #536]	; (80111c0 <tcp_receive+0x884>)
 8010fa6:	681a      	ldr	r2, [r3, #0]
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fac:	1ad3      	subs	r3, r2, r3
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	f2c0 842a 	blt.w	8011808 <tcp_receive+0xecc>
 8010fb4:	4b82      	ldr	r3, [pc, #520]	; (80111c0 <tcp_receive+0x884>)
 8010fb6:	681a      	ldr	r2, [r3, #0]
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fbc:	6879      	ldr	r1, [r7, #4]
 8010fbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010fc0:	440b      	add	r3, r1
 8010fc2:	1ad3      	subs	r3, r2, r3
 8010fc4:	3301      	adds	r3, #1
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	f300 841e 	bgt.w	8011808 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fd0:	4b7b      	ldr	r3, [pc, #492]	; (80111c0 <tcp_receive+0x884>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	f040 829a 	bne.w	801150e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010fda:	4b7a      	ldr	r3, [pc, #488]	; (80111c4 <tcp_receive+0x888>)
 8010fdc:	891c      	ldrh	r4, [r3, #8]
 8010fde:	4b79      	ldr	r3, [pc, #484]	; (80111c4 <tcp_receive+0x888>)
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	899b      	ldrh	r3, [r3, #12]
 8010fe4:	b29b      	uxth	r3, r3
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7fb f812 	bl	800c010 <lwip_htons>
 8010fec:	4603      	mov	r3, r0
 8010fee:	b2db      	uxtb	r3, r3
 8010ff0:	f003 0303 	and.w	r3, r3, #3
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d001      	beq.n	8010ffc <tcp_receive+0x6c0>
 8010ff8:	2301      	movs	r3, #1
 8010ffa:	e000      	b.n	8010ffe <tcp_receive+0x6c2>
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	4423      	add	r3, r4
 8011000:	b29a      	uxth	r2, r3
 8011002:	4b71      	ldr	r3, [pc, #452]	; (80111c8 <tcp_receive+0x88c>)
 8011004:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801100a:	4b6f      	ldr	r3, [pc, #444]	; (80111c8 <tcp_receive+0x88c>)
 801100c:	881b      	ldrh	r3, [r3, #0]
 801100e:	429a      	cmp	r2, r3
 8011010:	d275      	bcs.n	80110fe <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011012:	4b6c      	ldr	r3, [pc, #432]	; (80111c4 <tcp_receive+0x888>)
 8011014:	68db      	ldr	r3, [r3, #12]
 8011016:	899b      	ldrh	r3, [r3, #12]
 8011018:	b29b      	uxth	r3, r3
 801101a:	4618      	mov	r0, r3
 801101c:	f7fa fff8 	bl	800c010 <lwip_htons>
 8011020:	4603      	mov	r3, r0
 8011022:	b2db      	uxtb	r3, r3
 8011024:	f003 0301 	and.w	r3, r3, #1
 8011028:	2b00      	cmp	r3, #0
 801102a:	d01f      	beq.n	801106c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801102c:	4b65      	ldr	r3, [pc, #404]	; (80111c4 <tcp_receive+0x888>)
 801102e:	68db      	ldr	r3, [r3, #12]
 8011030:	899b      	ldrh	r3, [r3, #12]
 8011032:	b29b      	uxth	r3, r3
 8011034:	b21b      	sxth	r3, r3
 8011036:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801103a:	b21c      	sxth	r4, r3
 801103c:	4b61      	ldr	r3, [pc, #388]	; (80111c4 <tcp_receive+0x888>)
 801103e:	68db      	ldr	r3, [r3, #12]
 8011040:	899b      	ldrh	r3, [r3, #12]
 8011042:	b29b      	uxth	r3, r3
 8011044:	4618      	mov	r0, r3
 8011046:	f7fa ffe3 	bl	800c010 <lwip_htons>
 801104a:	4603      	mov	r3, r0
 801104c:	b2db      	uxtb	r3, r3
 801104e:	b29b      	uxth	r3, r3
 8011050:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011054:	b29b      	uxth	r3, r3
 8011056:	4618      	mov	r0, r3
 8011058:	f7fa ffda 	bl	800c010 <lwip_htons>
 801105c:	4603      	mov	r3, r0
 801105e:	b21b      	sxth	r3, r3
 8011060:	4323      	orrs	r3, r4
 8011062:	b21a      	sxth	r2, r3
 8011064:	4b57      	ldr	r3, [pc, #348]	; (80111c4 <tcp_receive+0x888>)
 8011066:	68db      	ldr	r3, [r3, #12]
 8011068:	b292      	uxth	r2, r2
 801106a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011070:	4b54      	ldr	r3, [pc, #336]	; (80111c4 <tcp_receive+0x888>)
 8011072:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8011074:	4b53      	ldr	r3, [pc, #332]	; (80111c4 <tcp_receive+0x888>)
 8011076:	68db      	ldr	r3, [r3, #12]
 8011078:	899b      	ldrh	r3, [r3, #12]
 801107a:	b29b      	uxth	r3, r3
 801107c:	4618      	mov	r0, r3
 801107e:	f7fa ffc7 	bl	800c010 <lwip_htons>
 8011082:	4603      	mov	r3, r0
 8011084:	b2db      	uxtb	r3, r3
 8011086:	f003 0302 	and.w	r3, r3, #2
 801108a:	2b00      	cmp	r3, #0
 801108c:	d005      	beq.n	801109a <tcp_receive+0x75e>
            inseg.len -= 1;
 801108e:	4b4d      	ldr	r3, [pc, #308]	; (80111c4 <tcp_receive+0x888>)
 8011090:	891b      	ldrh	r3, [r3, #8]
 8011092:	3b01      	subs	r3, #1
 8011094:	b29a      	uxth	r2, r3
 8011096:	4b4b      	ldr	r3, [pc, #300]	; (80111c4 <tcp_receive+0x888>)
 8011098:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801109a:	4b4a      	ldr	r3, [pc, #296]	; (80111c4 <tcp_receive+0x888>)
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	4a49      	ldr	r2, [pc, #292]	; (80111c4 <tcp_receive+0x888>)
 80110a0:	8912      	ldrh	r2, [r2, #8]
 80110a2:	4611      	mov	r1, r2
 80110a4:	4618      	mov	r0, r3
 80110a6:	f7fc f9d9 	bl	800d45c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80110aa:	4b46      	ldr	r3, [pc, #280]	; (80111c4 <tcp_receive+0x888>)
 80110ac:	891c      	ldrh	r4, [r3, #8]
 80110ae:	4b45      	ldr	r3, [pc, #276]	; (80111c4 <tcp_receive+0x888>)
 80110b0:	68db      	ldr	r3, [r3, #12]
 80110b2:	899b      	ldrh	r3, [r3, #12]
 80110b4:	b29b      	uxth	r3, r3
 80110b6:	4618      	mov	r0, r3
 80110b8:	f7fa ffaa 	bl	800c010 <lwip_htons>
 80110bc:	4603      	mov	r3, r0
 80110be:	b2db      	uxtb	r3, r3
 80110c0:	f003 0303 	and.w	r3, r3, #3
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d001      	beq.n	80110cc <tcp_receive+0x790>
 80110c8:	2301      	movs	r3, #1
 80110ca:	e000      	b.n	80110ce <tcp_receive+0x792>
 80110cc:	2300      	movs	r3, #0
 80110ce:	4423      	add	r3, r4
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	4b3d      	ldr	r3, [pc, #244]	; (80111c8 <tcp_receive+0x88c>)
 80110d4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80110d6:	4b3c      	ldr	r3, [pc, #240]	; (80111c8 <tcp_receive+0x88c>)
 80110d8:	881b      	ldrh	r3, [r3, #0]
 80110da:	461a      	mov	r2, r3
 80110dc:	4b38      	ldr	r3, [pc, #224]	; (80111c0 <tcp_receive+0x884>)
 80110de:	681b      	ldr	r3, [r3, #0]
 80110e0:	441a      	add	r2, r3
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e6:	6879      	ldr	r1, [r7, #4]
 80110e8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80110ea:	440b      	add	r3, r1
 80110ec:	429a      	cmp	r2, r3
 80110ee:	d006      	beq.n	80110fe <tcp_receive+0x7c2>
 80110f0:	4b36      	ldr	r3, [pc, #216]	; (80111cc <tcp_receive+0x890>)
 80110f2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80110f6:	4936      	ldr	r1, [pc, #216]	; (80111d0 <tcp_receive+0x894>)
 80110f8:	4836      	ldr	r0, [pc, #216]	; (80111d4 <tcp_receive+0x898>)
 80110fa:	f004 fe79 	bl	8015df0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 80e7 	beq.w	80112d6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011108:	4b2e      	ldr	r3, [pc, #184]	; (80111c4 <tcp_receive+0x888>)
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	899b      	ldrh	r3, [r3, #12]
 801110e:	b29b      	uxth	r3, r3
 8011110:	4618      	mov	r0, r3
 8011112:	f7fa ff7d 	bl	800c010 <lwip_htons>
 8011116:	4603      	mov	r3, r0
 8011118:	b2db      	uxtb	r3, r3
 801111a:	f003 0301 	and.w	r3, r3, #1
 801111e:	2b00      	cmp	r3, #0
 8011120:	d010      	beq.n	8011144 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011122:	e00a      	b.n	801113a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011128:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801112e:	681a      	ldr	r2, [r3, #0]
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011134:	68f8      	ldr	r0, [r7, #12]
 8011136:	f7fd fd96 	bl	800ec66 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801113e:	2b00      	cmp	r3, #0
 8011140:	d1f0      	bne.n	8011124 <tcp_receive+0x7e8>
 8011142:	e0c8      	b.n	80112d6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011148:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801114a:	e052      	b.n	80111f2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801114c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801114e:	68db      	ldr	r3, [r3, #12]
 8011150:	899b      	ldrh	r3, [r3, #12]
 8011152:	b29b      	uxth	r3, r3
 8011154:	4618      	mov	r0, r3
 8011156:	f7fa ff5b 	bl	800c010 <lwip_htons>
 801115a:	4603      	mov	r3, r0
 801115c:	b2db      	uxtb	r3, r3
 801115e:	f003 0301 	and.w	r3, r3, #1
 8011162:	2b00      	cmp	r3, #0
 8011164:	d03d      	beq.n	80111e2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8011166:	4b17      	ldr	r3, [pc, #92]	; (80111c4 <tcp_receive+0x888>)
 8011168:	68db      	ldr	r3, [r3, #12]
 801116a:	899b      	ldrh	r3, [r3, #12]
 801116c:	b29b      	uxth	r3, r3
 801116e:	4618      	mov	r0, r3
 8011170:	f7fa ff4e 	bl	800c010 <lwip_htons>
 8011174:	4603      	mov	r3, r0
 8011176:	b2db      	uxtb	r3, r3
 8011178:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801117c:	2b00      	cmp	r3, #0
 801117e:	d130      	bne.n	80111e2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8011180:	4b10      	ldr	r3, [pc, #64]	; (80111c4 <tcp_receive+0x888>)
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	b29c      	uxth	r4, r3
 8011188:	2001      	movs	r0, #1
 801118a:	f7fa ff41 	bl	800c010 <lwip_htons>
 801118e:	4603      	mov	r3, r0
 8011190:	461a      	mov	r2, r3
 8011192:	4b0c      	ldr	r3, [pc, #48]	; (80111c4 <tcp_receive+0x888>)
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	4322      	orrs	r2, r4
 8011198:	b292      	uxth	r2, r2
 801119a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801119c:	4b09      	ldr	r3, [pc, #36]	; (80111c4 <tcp_receive+0x888>)
 801119e:	891c      	ldrh	r4, [r3, #8]
 80111a0:	4b08      	ldr	r3, [pc, #32]	; (80111c4 <tcp_receive+0x888>)
 80111a2:	68db      	ldr	r3, [r3, #12]
 80111a4:	899b      	ldrh	r3, [r3, #12]
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7fa ff31 	bl	800c010 <lwip_htons>
 80111ae:	4603      	mov	r3, r0
 80111b0:	b2db      	uxtb	r3, r3
 80111b2:	f003 0303 	and.w	r3, r3, #3
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d00e      	beq.n	80111d8 <tcp_receive+0x89c>
 80111ba:	2301      	movs	r3, #1
 80111bc:	e00d      	b.n	80111da <tcp_receive+0x89e>
 80111be:	bf00      	nop
 80111c0:	2000460c 	.word	0x2000460c
 80111c4:	200045ec 	.word	0x200045ec
 80111c8:	20004616 	.word	0x20004616
 80111cc:	08018248 	.word	0x08018248
 80111d0:	080185f0 	.word	0x080185f0
 80111d4:	08018294 	.word	0x08018294
 80111d8:	2300      	movs	r3, #0
 80111da:	4423      	add	r3, r4
 80111dc:	b29a      	uxth	r2, r3
 80111de:	4b98      	ldr	r3, [pc, #608]	; (8011440 <tcp_receive+0xb04>)
 80111e0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80111e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e4:	613b      	str	r3, [r7, #16]
              next = next->next;
 80111e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80111ec:	6938      	ldr	r0, [r7, #16]
 80111ee:	f7fd fd3a 	bl	800ec66 <tcp_seg_free>
            while (next &&
 80111f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d00e      	beq.n	8011216 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80111f8:	4b91      	ldr	r3, [pc, #580]	; (8011440 <tcp_receive+0xb04>)
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	461a      	mov	r2, r3
 80111fe:	4b91      	ldr	r3, [pc, #580]	; (8011444 <tcp_receive+0xb08>)
 8011200:	681b      	ldr	r3, [r3, #0]
 8011202:	441a      	add	r2, r3
 8011204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011206:	68db      	ldr	r3, [r3, #12]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801120c:	8909      	ldrh	r1, [r1, #8]
 801120e:	440b      	add	r3, r1
 8011210:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011212:	2b00      	cmp	r3, #0
 8011214:	da9a      	bge.n	801114c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011218:	2b00      	cmp	r3, #0
 801121a:	d059      	beq.n	80112d0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 801121c:	4b88      	ldr	r3, [pc, #544]	; (8011440 <tcp_receive+0xb04>)
 801121e:	881b      	ldrh	r3, [r3, #0]
 8011220:	461a      	mov	r2, r3
 8011222:	4b88      	ldr	r3, [pc, #544]	; (8011444 <tcp_receive+0xb08>)
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	441a      	add	r2, r3
 8011228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801122a:	68db      	ldr	r3, [r3, #12]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011230:	2b00      	cmp	r3, #0
 8011232:	dd4d      	ble.n	80112d0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011236:	68db      	ldr	r3, [r3, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	b29a      	uxth	r2, r3
 801123c:	4b81      	ldr	r3, [pc, #516]	; (8011444 <tcp_receive+0xb08>)
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	b29b      	uxth	r3, r3
 8011242:	1ad3      	subs	r3, r2, r3
 8011244:	b29a      	uxth	r2, r3
 8011246:	4b80      	ldr	r3, [pc, #512]	; (8011448 <tcp_receive+0xb0c>)
 8011248:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801124a:	4b7f      	ldr	r3, [pc, #508]	; (8011448 <tcp_receive+0xb0c>)
 801124c:	68db      	ldr	r3, [r3, #12]
 801124e:	899b      	ldrh	r3, [r3, #12]
 8011250:	b29b      	uxth	r3, r3
 8011252:	4618      	mov	r0, r3
 8011254:	f7fa fedc 	bl	800c010 <lwip_htons>
 8011258:	4603      	mov	r3, r0
 801125a:	b2db      	uxtb	r3, r3
 801125c:	f003 0302 	and.w	r3, r3, #2
 8011260:	2b00      	cmp	r3, #0
 8011262:	d005      	beq.n	8011270 <tcp_receive+0x934>
                inseg.len -= 1;
 8011264:	4b78      	ldr	r3, [pc, #480]	; (8011448 <tcp_receive+0xb0c>)
 8011266:	891b      	ldrh	r3, [r3, #8]
 8011268:	3b01      	subs	r3, #1
 801126a:	b29a      	uxth	r2, r3
 801126c:	4b76      	ldr	r3, [pc, #472]	; (8011448 <tcp_receive+0xb0c>)
 801126e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8011270:	4b75      	ldr	r3, [pc, #468]	; (8011448 <tcp_receive+0xb0c>)
 8011272:	685b      	ldr	r3, [r3, #4]
 8011274:	4a74      	ldr	r2, [pc, #464]	; (8011448 <tcp_receive+0xb0c>)
 8011276:	8912      	ldrh	r2, [r2, #8]
 8011278:	4611      	mov	r1, r2
 801127a:	4618      	mov	r0, r3
 801127c:	f7fc f8ee 	bl	800d45c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8011280:	4b71      	ldr	r3, [pc, #452]	; (8011448 <tcp_receive+0xb0c>)
 8011282:	891c      	ldrh	r4, [r3, #8]
 8011284:	4b70      	ldr	r3, [pc, #448]	; (8011448 <tcp_receive+0xb0c>)
 8011286:	68db      	ldr	r3, [r3, #12]
 8011288:	899b      	ldrh	r3, [r3, #12]
 801128a:	b29b      	uxth	r3, r3
 801128c:	4618      	mov	r0, r3
 801128e:	f7fa febf 	bl	800c010 <lwip_htons>
 8011292:	4603      	mov	r3, r0
 8011294:	b2db      	uxtb	r3, r3
 8011296:	f003 0303 	and.w	r3, r3, #3
 801129a:	2b00      	cmp	r3, #0
 801129c:	d001      	beq.n	80112a2 <tcp_receive+0x966>
 801129e:	2301      	movs	r3, #1
 80112a0:	e000      	b.n	80112a4 <tcp_receive+0x968>
 80112a2:	2300      	movs	r3, #0
 80112a4:	4423      	add	r3, r4
 80112a6:	b29a      	uxth	r2, r3
 80112a8:	4b65      	ldr	r3, [pc, #404]	; (8011440 <tcp_receive+0xb04>)
 80112aa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80112ac:	4b64      	ldr	r3, [pc, #400]	; (8011440 <tcp_receive+0xb04>)
 80112ae:	881b      	ldrh	r3, [r3, #0]
 80112b0:	461a      	mov	r2, r3
 80112b2:	4b64      	ldr	r3, [pc, #400]	; (8011444 <tcp_receive+0xb08>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	441a      	add	r2, r3
 80112b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	685b      	ldr	r3, [r3, #4]
 80112be:	429a      	cmp	r2, r3
 80112c0:	d006      	beq.n	80112d0 <tcp_receive+0x994>
 80112c2:	4b62      	ldr	r3, [pc, #392]	; (801144c <tcp_receive+0xb10>)
 80112c4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80112c8:	4961      	ldr	r1, [pc, #388]	; (8011450 <tcp_receive+0xb14>)
 80112ca:	4862      	ldr	r0, [pc, #392]	; (8011454 <tcp_receive+0xb18>)
 80112cc:	f004 fd90 	bl	8015df0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80112d4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80112d6:	4b5a      	ldr	r3, [pc, #360]	; (8011440 <tcp_receive+0xb04>)
 80112d8:	881b      	ldrh	r3, [r3, #0]
 80112da:	461a      	mov	r2, r3
 80112dc:	4b59      	ldr	r3, [pc, #356]	; (8011444 <tcp_receive+0xb08>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	441a      	add	r2, r3
 80112e2:	687b      	ldr	r3, [r7, #4]
 80112e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80112ea:	4b55      	ldr	r3, [pc, #340]	; (8011440 <tcp_receive+0xb04>)
 80112ec:	881b      	ldrh	r3, [r3, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d206      	bcs.n	8011300 <tcp_receive+0x9c4>
 80112f2:	4b56      	ldr	r3, [pc, #344]	; (801144c <tcp_receive+0xb10>)
 80112f4:	f240 6207 	movw	r2, #1543	; 0x607
 80112f8:	4957      	ldr	r1, [pc, #348]	; (8011458 <tcp_receive+0xb1c>)
 80112fa:	4856      	ldr	r0, [pc, #344]	; (8011454 <tcp_receive+0xb18>)
 80112fc:	f004 fd78 	bl	8015df0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011304:	4b4e      	ldr	r3, [pc, #312]	; (8011440 <tcp_receive+0xb04>)
 8011306:	881b      	ldrh	r3, [r3, #0]
 8011308:	1ad3      	subs	r3, r2, r3
 801130a:	b29a      	uxth	r2, r3
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7fc ffc9 	bl	800e2a8 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011316:	4b4c      	ldr	r3, [pc, #304]	; (8011448 <tcp_receive+0xb0c>)
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	891b      	ldrh	r3, [r3, #8]
 801131c:	2b00      	cmp	r3, #0
 801131e:	d006      	beq.n	801132e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8011320:	4b49      	ldr	r3, [pc, #292]	; (8011448 <tcp_receive+0xb0c>)
 8011322:	685b      	ldr	r3, [r3, #4]
 8011324:	4a4d      	ldr	r2, [pc, #308]	; (801145c <tcp_receive+0xb20>)
 8011326:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011328:	4b47      	ldr	r3, [pc, #284]	; (8011448 <tcp_receive+0xb0c>)
 801132a:	2200      	movs	r2, #0
 801132c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801132e:	4b46      	ldr	r3, [pc, #280]	; (8011448 <tcp_receive+0xb0c>)
 8011330:	68db      	ldr	r3, [r3, #12]
 8011332:	899b      	ldrh	r3, [r3, #12]
 8011334:	b29b      	uxth	r3, r3
 8011336:	4618      	mov	r0, r3
 8011338:	f7fa fe6a 	bl	800c010 <lwip_htons>
 801133c:	4603      	mov	r3, r0
 801133e:	b2db      	uxtb	r3, r3
 8011340:	f003 0301 	and.w	r3, r3, #1
 8011344:	2b00      	cmp	r3, #0
 8011346:	f000 80b8 	beq.w	80114ba <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801134a:	4b45      	ldr	r3, [pc, #276]	; (8011460 <tcp_receive+0xb24>)
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	f043 0320 	orr.w	r3, r3, #32
 8011352:	b2da      	uxtb	r2, r3
 8011354:	4b42      	ldr	r3, [pc, #264]	; (8011460 <tcp_receive+0xb24>)
 8011356:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8011358:	e0af      	b.n	80114ba <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801135e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011364:	68db      	ldr	r3, [r3, #12]
 8011366:	685b      	ldr	r3, [r3, #4]
 8011368:	4a36      	ldr	r2, [pc, #216]	; (8011444 <tcp_receive+0xb08>)
 801136a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	891b      	ldrh	r3, [r3, #8]
 8011370:	461c      	mov	r4, r3
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	68db      	ldr	r3, [r3, #12]
 8011376:	899b      	ldrh	r3, [r3, #12]
 8011378:	b29b      	uxth	r3, r3
 801137a:	4618      	mov	r0, r3
 801137c:	f7fa fe48 	bl	800c010 <lwip_htons>
 8011380:	4603      	mov	r3, r0
 8011382:	b2db      	uxtb	r3, r3
 8011384:	f003 0303 	and.w	r3, r3, #3
 8011388:	2b00      	cmp	r3, #0
 801138a:	d001      	beq.n	8011390 <tcp_receive+0xa54>
 801138c:	2301      	movs	r3, #1
 801138e:	e000      	b.n	8011392 <tcp_receive+0xa56>
 8011390:	2300      	movs	r3, #0
 8011392:	191a      	adds	r2, r3, r4
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011398:	441a      	add	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113a2:	461c      	mov	r4, r3
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	461d      	mov	r5, r3
 80113aa:	68bb      	ldr	r3, [r7, #8]
 80113ac:	68db      	ldr	r3, [r3, #12]
 80113ae:	899b      	ldrh	r3, [r3, #12]
 80113b0:	b29b      	uxth	r3, r3
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7fa fe2c 	bl	800c010 <lwip_htons>
 80113b8:	4603      	mov	r3, r0
 80113ba:	b2db      	uxtb	r3, r3
 80113bc:	f003 0303 	and.w	r3, r3, #3
 80113c0:	2b00      	cmp	r3, #0
 80113c2:	d001      	beq.n	80113c8 <tcp_receive+0xa8c>
 80113c4:	2301      	movs	r3, #1
 80113c6:	e000      	b.n	80113ca <tcp_receive+0xa8e>
 80113c8:	2300      	movs	r3, #0
 80113ca:	442b      	add	r3, r5
 80113cc:	429c      	cmp	r4, r3
 80113ce:	d206      	bcs.n	80113de <tcp_receive+0xaa2>
 80113d0:	4b1e      	ldr	r3, [pc, #120]	; (801144c <tcp_receive+0xb10>)
 80113d2:	f240 622b 	movw	r2, #1579	; 0x62b
 80113d6:	4923      	ldr	r1, [pc, #140]	; (8011464 <tcp_receive+0xb28>)
 80113d8:	481e      	ldr	r0, [pc, #120]	; (8011454 <tcp_receive+0xb18>)
 80113da:	f004 fd09 	bl	8015df0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	891b      	ldrh	r3, [r3, #8]
 80113e2:	461c      	mov	r4, r3
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	68db      	ldr	r3, [r3, #12]
 80113e8:	899b      	ldrh	r3, [r3, #12]
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	4618      	mov	r0, r3
 80113ee:	f7fa fe0f 	bl	800c010 <lwip_htons>
 80113f2:	4603      	mov	r3, r0
 80113f4:	b2db      	uxtb	r3, r3
 80113f6:	f003 0303 	and.w	r3, r3, #3
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <tcp_receive+0xac6>
 80113fe:	2301      	movs	r3, #1
 8011400:	e000      	b.n	8011404 <tcp_receive+0xac8>
 8011402:	2300      	movs	r3, #0
 8011404:	1919      	adds	r1, r3, r4
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801140a:	b28b      	uxth	r3, r1
 801140c:	1ad3      	subs	r3, r2, r3
 801140e:	b29a      	uxth	r2, r3
 8011410:	687b      	ldr	r3, [r7, #4]
 8011412:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7fc ff47 	bl	800e2a8 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801141a:	68bb      	ldr	r3, [r7, #8]
 801141c:	685b      	ldr	r3, [r3, #4]
 801141e:	891b      	ldrh	r3, [r3, #8]
 8011420:	2b00      	cmp	r3, #0
 8011422:	d028      	beq.n	8011476 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011424:	4b0d      	ldr	r3, [pc, #52]	; (801145c <tcp_receive+0xb20>)
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d01d      	beq.n	8011468 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 801142c:	4b0b      	ldr	r3, [pc, #44]	; (801145c <tcp_receive+0xb20>)
 801142e:	681a      	ldr	r2, [r3, #0]
 8011430:	68bb      	ldr	r3, [r7, #8]
 8011432:	685b      	ldr	r3, [r3, #4]
 8011434:	4619      	mov	r1, r3
 8011436:	4610      	mov	r0, r2
 8011438:	f7fc fa64 	bl	800d904 <pbuf_cat>
 801143c:	e018      	b.n	8011470 <tcp_receive+0xb34>
 801143e:	bf00      	nop
 8011440:	20004616 	.word	0x20004616
 8011444:	2000460c 	.word	0x2000460c
 8011448:	200045ec 	.word	0x200045ec
 801144c:	08018248 	.word	0x08018248
 8011450:	08018628 	.word	0x08018628
 8011454:	08018294 	.word	0x08018294
 8011458:	08018664 	.word	0x08018664
 801145c:	2000461c 	.word	0x2000461c
 8011460:	20004619 	.word	0x20004619
 8011464:	08018684 	.word	0x08018684
            } else {
              recv_data = cseg->p;
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	4a70      	ldr	r2, [pc, #448]	; (8011630 <tcp_receive+0xcf4>)
 801146e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	2200      	movs	r2, #0
 8011474:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	68db      	ldr	r3, [r3, #12]
 801147a:	899b      	ldrh	r3, [r3, #12]
 801147c:	b29b      	uxth	r3, r3
 801147e:	4618      	mov	r0, r3
 8011480:	f7fa fdc6 	bl	800c010 <lwip_htons>
 8011484:	4603      	mov	r3, r0
 8011486:	b2db      	uxtb	r3, r3
 8011488:	f003 0301 	and.w	r3, r3, #1
 801148c:	2b00      	cmp	r3, #0
 801148e:	d00d      	beq.n	80114ac <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8011490:	4b68      	ldr	r3, [pc, #416]	; (8011634 <tcp_receive+0xcf8>)
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	f043 0320 	orr.w	r3, r3, #32
 8011498:	b2da      	uxtb	r2, r3
 801149a:	4b66      	ldr	r3, [pc, #408]	; (8011634 <tcp_receive+0xcf8>)
 801149c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	7d1b      	ldrb	r3, [r3, #20]
 80114a2:	2b04      	cmp	r3, #4
 80114a4:	d102      	bne.n	80114ac <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2207      	movs	r2, #7
 80114aa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80114ac:	68bb      	ldr	r3, [r7, #8]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80114b4:	68b8      	ldr	r0, [r7, #8]
 80114b6:	f7fd fbd6 	bl	800ec66 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d008      	beq.n	80114d4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	685a      	ldr	r2, [r3, #4]
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80114ce:	429a      	cmp	r2, r3
 80114d0:	f43f af43 	beq.w	801135a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	8b5b      	ldrh	r3, [r3, #26]
 80114d8:	f003 0301 	and.w	r3, r3, #1
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d00e      	beq.n	80114fe <tcp_receive+0xbc2>
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	8b5b      	ldrh	r3, [r3, #26]
 80114e4:	f023 0301 	bic.w	r3, r3, #1
 80114e8:	b29a      	uxth	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	835a      	strh	r2, [r3, #26]
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8b5b      	ldrh	r3, [r3, #26]
 80114f2:	f043 0302 	orr.w	r3, r3, #2
 80114f6:	b29a      	uxth	r2, r3
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80114fc:	e188      	b.n	8011810 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	8b5b      	ldrh	r3, [r3, #26]
 8011502:	f043 0301 	orr.w	r3, r3, #1
 8011506:	b29a      	uxth	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801150c:	e180      	b.n	8011810 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011512:	2b00      	cmp	r3, #0
 8011514:	d106      	bne.n	8011524 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011516:	4848      	ldr	r0, [pc, #288]	; (8011638 <tcp_receive+0xcfc>)
 8011518:	f7fd fbbe 	bl	800ec98 <tcp_seg_copy>
 801151c:	4602      	mov	r2, r0
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	675a      	str	r2, [r3, #116]	; 0x74
 8011522:	e16d      	b.n	8011800 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011524:	2300      	movs	r3, #0
 8011526:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801152c:	63bb      	str	r3, [r7, #56]	; 0x38
 801152e:	e157      	b.n	80117e0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	68db      	ldr	r3, [r3, #12]
 8011534:	685a      	ldr	r2, [r3, #4]
 8011536:	4b41      	ldr	r3, [pc, #260]	; (801163c <tcp_receive+0xd00>)
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	429a      	cmp	r2, r3
 801153c:	d11d      	bne.n	801157a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801153e:	4b3e      	ldr	r3, [pc, #248]	; (8011638 <tcp_receive+0xcfc>)
 8011540:	891a      	ldrh	r2, [r3, #8]
 8011542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011544:	891b      	ldrh	r3, [r3, #8]
 8011546:	429a      	cmp	r2, r3
 8011548:	f240 814f 	bls.w	80117ea <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801154c:	483a      	ldr	r0, [pc, #232]	; (8011638 <tcp_receive+0xcfc>)
 801154e:	f7fd fba3 	bl	800ec98 <tcp_seg_copy>
 8011552:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8011554:	697b      	ldr	r3, [r7, #20]
 8011556:	2b00      	cmp	r3, #0
 8011558:	f000 8149 	beq.w	80117ee <tcp_receive+0xeb2>
                  if (prev != NULL) {
 801155c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801155e:	2b00      	cmp	r3, #0
 8011560:	d003      	beq.n	801156a <tcp_receive+0xc2e>
                    prev->next = cseg;
 8011562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011564:	697a      	ldr	r2, [r7, #20]
 8011566:	601a      	str	r2, [r3, #0]
 8011568:	e002      	b.n	8011570 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	697a      	ldr	r2, [r7, #20]
 801156e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011570:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011572:	6978      	ldr	r0, [r7, #20]
 8011574:	f7ff f8de 	bl	8010734 <tcp_oos_insert_segment>
                }
                break;
 8011578:	e139      	b.n	80117ee <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801157a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801157c:	2b00      	cmp	r3, #0
 801157e:	d117      	bne.n	80115b0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011580:	4b2e      	ldr	r3, [pc, #184]	; (801163c <tcp_receive+0xd00>)
 8011582:	681a      	ldr	r2, [r3, #0]
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	68db      	ldr	r3, [r3, #12]
 8011588:	685b      	ldr	r3, [r3, #4]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	2b00      	cmp	r3, #0
 801158e:	da57      	bge.n	8011640 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011590:	4829      	ldr	r0, [pc, #164]	; (8011638 <tcp_receive+0xcfc>)
 8011592:	f7fd fb81 	bl	800ec98 <tcp_seg_copy>
 8011596:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8011598:	69bb      	ldr	r3, [r7, #24]
 801159a:	2b00      	cmp	r3, #0
 801159c:	f000 8129 	beq.w	80117f2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	69ba      	ldr	r2, [r7, #24]
 80115a4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80115a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80115a8:	69b8      	ldr	r0, [r7, #24]
 80115aa:	f7ff f8c3 	bl	8010734 <tcp_oos_insert_segment>
                  }
                  break;
 80115ae:	e120      	b.n	80117f2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80115b0:	4b22      	ldr	r3, [pc, #136]	; (801163c <tcp_receive+0xd00>)
 80115b2:	681a      	ldr	r2, [r3, #0]
 80115b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b6:	68db      	ldr	r3, [r3, #12]
 80115b8:	685b      	ldr	r3, [r3, #4]
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	3b01      	subs	r3, #1
 80115be:	2b00      	cmp	r3, #0
 80115c0:	db3e      	blt.n	8011640 <tcp_receive+0xd04>
 80115c2:	4b1e      	ldr	r3, [pc, #120]	; (801163c <tcp_receive+0xd00>)
 80115c4:	681a      	ldr	r2, [r3, #0]
 80115c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	685b      	ldr	r3, [r3, #4]
 80115cc:	1ad3      	subs	r3, r2, r3
 80115ce:	3301      	adds	r3, #1
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	dc35      	bgt.n	8011640 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80115d4:	4818      	ldr	r0, [pc, #96]	; (8011638 <tcp_receive+0xcfc>)
 80115d6:	f7fd fb5f 	bl	800ec98 <tcp_seg_copy>
 80115da:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80115dc:	69fb      	ldr	r3, [r7, #28]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	f000 8109 	beq.w	80117f6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80115e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80115ec:	8912      	ldrh	r2, [r2, #8]
 80115ee:	441a      	add	r2, r3
 80115f0:	4b12      	ldr	r3, [pc, #72]	; (801163c <tcp_receive+0xd00>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	1ad3      	subs	r3, r2, r3
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	dd12      	ble.n	8011620 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80115fa:	4b10      	ldr	r3, [pc, #64]	; (801163c <tcp_receive+0xd00>)
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	b29a      	uxth	r2, r3
 8011600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011602:	68db      	ldr	r3, [r3, #12]
 8011604:	685b      	ldr	r3, [r3, #4]
 8011606:	b29b      	uxth	r3, r3
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	b29a      	uxth	r2, r3
 801160c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801160e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011612:	685a      	ldr	r2, [r3, #4]
 8011614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011616:	891b      	ldrh	r3, [r3, #8]
 8011618:	4619      	mov	r1, r3
 801161a:	4610      	mov	r0, r2
 801161c:	f7fb ff1e 	bl	800d45c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011622:	69fa      	ldr	r2, [r7, #28]
 8011624:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011628:	69f8      	ldr	r0, [r7, #28]
 801162a:	f7ff f883 	bl	8010734 <tcp_oos_insert_segment>
                  }
                  break;
 801162e:	e0e2      	b.n	80117f6 <tcp_receive+0xeba>
 8011630:	2000461c 	.word	0x2000461c
 8011634:	20004619 	.word	0x20004619
 8011638:	200045ec 	.word	0x200045ec
 801163c:	2000460c 	.word	0x2000460c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011642:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	2b00      	cmp	r3, #0
 801164a:	f040 80c6 	bne.w	80117da <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801164e:	4b80      	ldr	r3, [pc, #512]	; (8011850 <tcp_receive+0xf14>)
 8011650:	681a      	ldr	r2, [r3, #0]
 8011652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011654:	68db      	ldr	r3, [r3, #12]
 8011656:	685b      	ldr	r3, [r3, #4]
 8011658:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801165a:	2b00      	cmp	r3, #0
 801165c:	f340 80bd 	ble.w	80117da <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011662:	68db      	ldr	r3, [r3, #12]
 8011664:	899b      	ldrh	r3, [r3, #12]
 8011666:	b29b      	uxth	r3, r3
 8011668:	4618      	mov	r0, r3
 801166a:	f7fa fcd1 	bl	800c010 <lwip_htons>
 801166e:	4603      	mov	r3, r0
 8011670:	b2db      	uxtb	r3, r3
 8011672:	f003 0301 	and.w	r3, r3, #1
 8011676:	2b00      	cmp	r3, #0
 8011678:	f040 80bf 	bne.w	80117fa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801167c:	4875      	ldr	r0, [pc, #468]	; (8011854 <tcp_receive+0xf18>)
 801167e:	f7fd fb0b 	bl	800ec98 <tcp_seg_copy>
 8011682:	4602      	mov	r2, r0
 8011684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011686:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	2b00      	cmp	r3, #0
 801168e:	f000 80b6 	beq.w	80117fe <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011694:	68db      	ldr	r3, [r3, #12]
 8011696:	685b      	ldr	r3, [r3, #4]
 8011698:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801169a:	8912      	ldrh	r2, [r2, #8]
 801169c:	441a      	add	r2, r3
 801169e:	4b6c      	ldr	r3, [pc, #432]	; (8011850 <tcp_receive+0xf14>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	dd12      	ble.n	80116ce <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80116a8:	4b69      	ldr	r3, [pc, #420]	; (8011850 <tcp_receive+0xf14>)
 80116aa:	681b      	ldr	r3, [r3, #0]
 80116ac:	b29a      	uxth	r2, r3
 80116ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b0:	68db      	ldr	r3, [r3, #12]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	1ad3      	subs	r3, r2, r3
 80116b8:	b29a      	uxth	r2, r3
 80116ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116bc:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80116be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c0:	685a      	ldr	r2, [r3, #4]
 80116c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116c4:	891b      	ldrh	r3, [r3, #8]
 80116c6:	4619      	mov	r1, r3
 80116c8:	4610      	mov	r0, r2
 80116ca:	f7fb fec7 	bl	800d45c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80116ce:	4b62      	ldr	r3, [pc, #392]	; (8011858 <tcp_receive+0xf1c>)
 80116d0:	881b      	ldrh	r3, [r3, #0]
 80116d2:	461a      	mov	r2, r3
 80116d4:	4b5e      	ldr	r3, [pc, #376]	; (8011850 <tcp_receive+0xf14>)
 80116d6:	681b      	ldr	r3, [r3, #0]
 80116d8:	441a      	add	r2, r3
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116de:	6879      	ldr	r1, [r7, #4]
 80116e0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80116e2:	440b      	add	r3, r1
 80116e4:	1ad3      	subs	r3, r2, r3
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	f340 8089 	ble.w	80117fe <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80116ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	68db      	ldr	r3, [r3, #12]
 80116f2:	899b      	ldrh	r3, [r3, #12]
 80116f4:	b29b      	uxth	r3, r3
 80116f6:	4618      	mov	r0, r3
 80116f8:	f7fa fc8a 	bl	800c010 <lwip_htons>
 80116fc:	4603      	mov	r3, r0
 80116fe:	b2db      	uxtb	r3, r3
 8011700:	f003 0301 	and.w	r3, r3, #1
 8011704:	2b00      	cmp	r3, #0
 8011706:	d022      	beq.n	801174e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	68db      	ldr	r3, [r3, #12]
 801170e:	899b      	ldrh	r3, [r3, #12]
 8011710:	b29b      	uxth	r3, r3
 8011712:	b21b      	sxth	r3, r3
 8011714:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011718:	b21c      	sxth	r4, r3
 801171a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68db      	ldr	r3, [r3, #12]
 8011720:	899b      	ldrh	r3, [r3, #12]
 8011722:	b29b      	uxth	r3, r3
 8011724:	4618      	mov	r0, r3
 8011726:	f7fa fc73 	bl	800c010 <lwip_htons>
 801172a:	4603      	mov	r3, r0
 801172c:	b2db      	uxtb	r3, r3
 801172e:	b29b      	uxth	r3, r3
 8011730:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011734:	b29b      	uxth	r3, r3
 8011736:	4618      	mov	r0, r3
 8011738:	f7fa fc6a 	bl	800c010 <lwip_htons>
 801173c:	4603      	mov	r3, r0
 801173e:	b21b      	sxth	r3, r3
 8011740:	4323      	orrs	r3, r4
 8011742:	b21a      	sxth	r2, r3
 8011744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	68db      	ldr	r3, [r3, #12]
 801174a:	b292      	uxth	r2, r2
 801174c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011752:	b29a      	uxth	r2, r3
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011758:	4413      	add	r3, r2
 801175a:	b299      	uxth	r1, r3
 801175c:	4b3c      	ldr	r3, [pc, #240]	; (8011850 <tcp_receive+0xf14>)
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	b29a      	uxth	r2, r3
 8011762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	1a8a      	subs	r2, r1, r2
 8011768:	b292      	uxth	r2, r2
 801176a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	685a      	ldr	r2, [r3, #4]
 8011772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011774:	681b      	ldr	r3, [r3, #0]
 8011776:	891b      	ldrh	r3, [r3, #8]
 8011778:	4619      	mov	r1, r3
 801177a:	4610      	mov	r0, r2
 801177c:	f7fb fe6e 	bl	800d45c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011782:	681b      	ldr	r3, [r3, #0]
 8011784:	891c      	ldrh	r4, [r3, #8]
 8011786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011788:	681b      	ldr	r3, [r3, #0]
 801178a:	68db      	ldr	r3, [r3, #12]
 801178c:	899b      	ldrh	r3, [r3, #12]
 801178e:	b29b      	uxth	r3, r3
 8011790:	4618      	mov	r0, r3
 8011792:	f7fa fc3d 	bl	800c010 <lwip_htons>
 8011796:	4603      	mov	r3, r0
 8011798:	b2db      	uxtb	r3, r3
 801179a:	f003 0303 	and.w	r3, r3, #3
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d001      	beq.n	80117a6 <tcp_receive+0xe6a>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e000      	b.n	80117a8 <tcp_receive+0xe6c>
 80117a6:	2300      	movs	r3, #0
 80117a8:	4423      	add	r3, r4
 80117aa:	b29a      	uxth	r2, r3
 80117ac:	4b2a      	ldr	r3, [pc, #168]	; (8011858 <tcp_receive+0xf1c>)
 80117ae:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80117b0:	4b29      	ldr	r3, [pc, #164]	; (8011858 <tcp_receive+0xf1c>)
 80117b2:	881b      	ldrh	r3, [r3, #0]
 80117b4:	461a      	mov	r2, r3
 80117b6:	4b26      	ldr	r3, [pc, #152]	; (8011850 <tcp_receive+0xf14>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	441a      	add	r2, r3
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80117c0:	6879      	ldr	r1, [r7, #4]
 80117c2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80117c4:	440b      	add	r3, r1
 80117c6:	429a      	cmp	r2, r3
 80117c8:	d019      	beq.n	80117fe <tcp_receive+0xec2>
 80117ca:	4b24      	ldr	r3, [pc, #144]	; (801185c <tcp_receive+0xf20>)
 80117cc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80117d0:	4923      	ldr	r1, [pc, #140]	; (8011860 <tcp_receive+0xf24>)
 80117d2:	4824      	ldr	r0, [pc, #144]	; (8011864 <tcp_receive+0xf28>)
 80117d4:	f004 fb0c 	bl	8015df0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80117d8:	e011      	b.n	80117fe <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80117da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117dc:	681b      	ldr	r3, [r3, #0]
 80117de:	63bb      	str	r3, [r7, #56]	; 0x38
 80117e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	f47f aea4 	bne.w	8011530 <tcp_receive+0xbf4>
 80117e8:	e00a      	b.n	8011800 <tcp_receive+0xec4>
                break;
 80117ea:	bf00      	nop
 80117ec:	e008      	b.n	8011800 <tcp_receive+0xec4>
                break;
 80117ee:	bf00      	nop
 80117f0:	e006      	b.n	8011800 <tcp_receive+0xec4>
                  break;
 80117f2:	bf00      	nop
 80117f4:	e004      	b.n	8011800 <tcp_receive+0xec4>
                  break;
 80117f6:	bf00      	nop
 80117f8:	e002      	b.n	8011800 <tcp_receive+0xec4>
                  break;
 80117fa:	bf00      	nop
 80117fc:	e000      	b.n	8011800 <tcp_receive+0xec4>
                break;
 80117fe:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011800:	6878      	ldr	r0, [r7, #4]
 8011802:	f001 fa33 	bl	8012c6c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011806:	e003      	b.n	8011810 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f001 fa2f 	bl	8012c6c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801180e:	e01a      	b.n	8011846 <tcp_receive+0xf0a>
 8011810:	e019      	b.n	8011846 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011812:	4b0f      	ldr	r3, [pc, #60]	; (8011850 <tcp_receive+0xf14>)
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	1ad3      	subs	r3, r2, r3
 801181c:	2b00      	cmp	r3, #0
 801181e:	db0a      	blt.n	8011836 <tcp_receive+0xefa>
 8011820:	4b0b      	ldr	r3, [pc, #44]	; (8011850 <tcp_receive+0xf14>)
 8011822:	681a      	ldr	r2, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011828:	6879      	ldr	r1, [r7, #4]
 801182a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801182c:	440b      	add	r3, r1
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	3301      	adds	r3, #1
 8011832:	2b00      	cmp	r3, #0
 8011834:	dd07      	ble.n	8011846 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	8b5b      	ldrh	r3, [r3, #26]
 801183a:	f043 0302 	orr.w	r3, r3, #2
 801183e:	b29a      	uxth	r2, r3
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011844:	e7ff      	b.n	8011846 <tcp_receive+0xf0a>
 8011846:	bf00      	nop
 8011848:	3750      	adds	r7, #80	; 0x50
 801184a:	46bd      	mov	sp, r7
 801184c:	bdb0      	pop	{r4, r5, r7, pc}
 801184e:	bf00      	nop
 8011850:	2000460c 	.word	0x2000460c
 8011854:	200045ec 	.word	0x200045ec
 8011858:	20004616 	.word	0x20004616
 801185c:	08018248 	.word	0x08018248
 8011860:	080185f0 	.word	0x080185f0
 8011864:	08018294 	.word	0x08018294

08011868 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8011868:	b480      	push	{r7}
 801186a:	b083      	sub	sp, #12
 801186c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801186e:	4b15      	ldr	r3, [pc, #84]	; (80118c4 <tcp_get_next_optbyte+0x5c>)
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	1c5a      	adds	r2, r3, #1
 8011874:	b291      	uxth	r1, r2
 8011876:	4a13      	ldr	r2, [pc, #76]	; (80118c4 <tcp_get_next_optbyte+0x5c>)
 8011878:	8011      	strh	r1, [r2, #0]
 801187a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801187c:	4b12      	ldr	r3, [pc, #72]	; (80118c8 <tcp_get_next_optbyte+0x60>)
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	2b00      	cmp	r3, #0
 8011882:	d004      	beq.n	801188e <tcp_get_next_optbyte+0x26>
 8011884:	4b11      	ldr	r3, [pc, #68]	; (80118cc <tcp_get_next_optbyte+0x64>)
 8011886:	881b      	ldrh	r3, [r3, #0]
 8011888:	88fa      	ldrh	r2, [r7, #6]
 801188a:	429a      	cmp	r2, r3
 801188c:	d208      	bcs.n	80118a0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801188e:	4b10      	ldr	r3, [pc, #64]	; (80118d0 <tcp_get_next_optbyte+0x68>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	3314      	adds	r3, #20
 8011894:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8011896:	88fb      	ldrh	r3, [r7, #6]
 8011898:	683a      	ldr	r2, [r7, #0]
 801189a:	4413      	add	r3, r2
 801189c:	781b      	ldrb	r3, [r3, #0]
 801189e:	e00b      	b.n	80118b8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80118a0:	88fb      	ldrh	r3, [r7, #6]
 80118a2:	b2da      	uxtb	r2, r3
 80118a4:	4b09      	ldr	r3, [pc, #36]	; (80118cc <tcp_get_next_optbyte+0x64>)
 80118a6:	881b      	ldrh	r3, [r3, #0]
 80118a8:	b2db      	uxtb	r3, r3
 80118aa:	1ad3      	subs	r3, r2, r3
 80118ac:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80118ae:	4b06      	ldr	r3, [pc, #24]	; (80118c8 <tcp_get_next_optbyte+0x60>)
 80118b0:	681a      	ldr	r2, [r3, #0]
 80118b2:	797b      	ldrb	r3, [r7, #5]
 80118b4:	4413      	add	r3, r2
 80118b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118b8:	4618      	mov	r0, r3
 80118ba:	370c      	adds	r7, #12
 80118bc:	46bd      	mov	sp, r7
 80118be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c2:	4770      	bx	lr
 80118c4:	20004608 	.word	0x20004608
 80118c8:	20004604 	.word	0x20004604
 80118cc:	20004602 	.word	0x20004602
 80118d0:	200045fc 	.word	0x200045fc

080118d4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d106      	bne.n	80118f0 <tcp_parseopt+0x1c>
 80118e2:	4b32      	ldr	r3, [pc, #200]	; (80119ac <tcp_parseopt+0xd8>)
 80118e4:	f240 727d 	movw	r2, #1917	; 0x77d
 80118e8:	4931      	ldr	r1, [pc, #196]	; (80119b0 <tcp_parseopt+0xdc>)
 80118ea:	4832      	ldr	r0, [pc, #200]	; (80119b4 <tcp_parseopt+0xe0>)
 80118ec:	f004 fa80 	bl	8015df0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80118f0:	4b31      	ldr	r3, [pc, #196]	; (80119b8 <tcp_parseopt+0xe4>)
 80118f2:	881b      	ldrh	r3, [r3, #0]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d055      	beq.n	80119a4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80118f8:	4b30      	ldr	r3, [pc, #192]	; (80119bc <tcp_parseopt+0xe8>)
 80118fa:	2200      	movs	r2, #0
 80118fc:	801a      	strh	r2, [r3, #0]
 80118fe:	e045      	b.n	801198c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011900:	f7ff ffb2 	bl	8011868 <tcp_get_next_optbyte>
 8011904:	4603      	mov	r3, r0
 8011906:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011908:	7bfb      	ldrb	r3, [r7, #15]
 801190a:	2b02      	cmp	r3, #2
 801190c:	d006      	beq.n	801191c <tcp_parseopt+0x48>
 801190e:	2b02      	cmp	r3, #2
 8011910:	dc2b      	bgt.n	801196a <tcp_parseopt+0x96>
 8011912:	2b00      	cmp	r3, #0
 8011914:	d041      	beq.n	801199a <tcp_parseopt+0xc6>
 8011916:	2b01      	cmp	r3, #1
 8011918:	d127      	bne.n	801196a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801191a:	e037      	b.n	801198c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801191c:	f7ff ffa4 	bl	8011868 <tcp_get_next_optbyte>
 8011920:	4603      	mov	r3, r0
 8011922:	2b04      	cmp	r3, #4
 8011924:	d13b      	bne.n	801199e <tcp_parseopt+0xca>
 8011926:	4b25      	ldr	r3, [pc, #148]	; (80119bc <tcp_parseopt+0xe8>)
 8011928:	881b      	ldrh	r3, [r3, #0]
 801192a:	3301      	adds	r3, #1
 801192c:	4a22      	ldr	r2, [pc, #136]	; (80119b8 <tcp_parseopt+0xe4>)
 801192e:	8812      	ldrh	r2, [r2, #0]
 8011930:	4293      	cmp	r3, r2
 8011932:	da34      	bge.n	801199e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011934:	f7ff ff98 	bl	8011868 <tcp_get_next_optbyte>
 8011938:	4603      	mov	r3, r0
 801193a:	b29b      	uxth	r3, r3
 801193c:	021b      	lsls	r3, r3, #8
 801193e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011940:	f7ff ff92 	bl	8011868 <tcp_get_next_optbyte>
 8011944:	4603      	mov	r3, r0
 8011946:	b29a      	uxth	r2, r3
 8011948:	89bb      	ldrh	r3, [r7, #12]
 801194a:	4313      	orrs	r3, r2
 801194c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801194e:	89bb      	ldrh	r3, [r7, #12]
 8011950:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011954:	d804      	bhi.n	8011960 <tcp_parseopt+0x8c>
 8011956:	89bb      	ldrh	r3, [r7, #12]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d001      	beq.n	8011960 <tcp_parseopt+0x8c>
 801195c:	89ba      	ldrh	r2, [r7, #12]
 801195e:	e001      	b.n	8011964 <tcp_parseopt+0x90>
 8011960:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011968:	e010      	b.n	801198c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801196a:	f7ff ff7d 	bl	8011868 <tcp_get_next_optbyte>
 801196e:	4603      	mov	r3, r0
 8011970:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011972:	7afb      	ldrb	r3, [r7, #11]
 8011974:	2b01      	cmp	r3, #1
 8011976:	d914      	bls.n	80119a2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011978:	7afb      	ldrb	r3, [r7, #11]
 801197a:	b29a      	uxth	r2, r3
 801197c:	4b0f      	ldr	r3, [pc, #60]	; (80119bc <tcp_parseopt+0xe8>)
 801197e:	881b      	ldrh	r3, [r3, #0]
 8011980:	4413      	add	r3, r2
 8011982:	b29b      	uxth	r3, r3
 8011984:	3b02      	subs	r3, #2
 8011986:	b29a      	uxth	r2, r3
 8011988:	4b0c      	ldr	r3, [pc, #48]	; (80119bc <tcp_parseopt+0xe8>)
 801198a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801198c:	4b0b      	ldr	r3, [pc, #44]	; (80119bc <tcp_parseopt+0xe8>)
 801198e:	881a      	ldrh	r2, [r3, #0]
 8011990:	4b09      	ldr	r3, [pc, #36]	; (80119b8 <tcp_parseopt+0xe4>)
 8011992:	881b      	ldrh	r3, [r3, #0]
 8011994:	429a      	cmp	r2, r3
 8011996:	d3b3      	bcc.n	8011900 <tcp_parseopt+0x2c>
 8011998:	e004      	b.n	80119a4 <tcp_parseopt+0xd0>
          return;
 801199a:	bf00      	nop
 801199c:	e002      	b.n	80119a4 <tcp_parseopt+0xd0>
            return;
 801199e:	bf00      	nop
 80119a0:	e000      	b.n	80119a4 <tcp_parseopt+0xd0>
            return;
 80119a2:	bf00      	nop
      }
    }
  }
}
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}
 80119aa:	bf00      	nop
 80119ac:	08018248 	.word	0x08018248
 80119b0:	080186ac 	.word	0x080186ac
 80119b4:	08018294 	.word	0x08018294
 80119b8:	20004600 	.word	0x20004600
 80119bc:	20004608 	.word	0x20004608

080119c0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80119c0:	b480      	push	{r7}
 80119c2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80119c4:	4b05      	ldr	r3, [pc, #20]	; (80119dc <tcp_trigger_input_pcb_close+0x1c>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	f043 0310 	orr.w	r3, r3, #16
 80119cc:	b2da      	uxtb	r2, r3
 80119ce:	4b03      	ldr	r3, [pc, #12]	; (80119dc <tcp_trigger_input_pcb_close+0x1c>)
 80119d0:	701a      	strb	r2, [r3, #0]
}
 80119d2:	bf00      	nop
 80119d4:	46bd      	mov	sp, r7
 80119d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119da:	4770      	bx	lr
 80119dc:	20004619 	.word	0x20004619

080119e0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b084      	sub	sp, #16
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d00a      	beq.n	8011a08 <tcp_route+0x28>
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	7a1b      	ldrb	r3, [r3, #8]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d006      	beq.n	8011a08 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	7a1b      	ldrb	r3, [r3, #8]
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fb fb24 	bl	800d04c <netif_get_by_index>
 8011a04:	4603      	mov	r3, r0
 8011a06:	e003      	b.n	8011a10 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f002 fead 	bl	8014768 <ip4_route>
 8011a0e:	4603      	mov	r3, r0
  }
}
 8011a10:	4618      	mov	r0, r3
 8011a12:	3710      	adds	r7, #16
 8011a14:	46bd      	mov	sp, r7
 8011a16:	bd80      	pop	{r7, pc}

08011a18 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011a18:	b590      	push	{r4, r7, lr}
 8011a1a:	b087      	sub	sp, #28
 8011a1c:	af00      	add	r7, sp, #0
 8011a1e:	60f8      	str	r0, [r7, #12]
 8011a20:	60b9      	str	r1, [r7, #8]
 8011a22:	603b      	str	r3, [r7, #0]
 8011a24:	4613      	mov	r3, r2
 8011a26:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d105      	bne.n	8011a3a <tcp_create_segment+0x22>
 8011a2e:	4b44      	ldr	r3, [pc, #272]	; (8011b40 <tcp_create_segment+0x128>)
 8011a30:	22a3      	movs	r2, #163	; 0xa3
 8011a32:	4944      	ldr	r1, [pc, #272]	; (8011b44 <tcp_create_segment+0x12c>)
 8011a34:	4844      	ldr	r0, [pc, #272]	; (8011b48 <tcp_create_segment+0x130>)
 8011a36:	f004 f9db 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011a3a:	68bb      	ldr	r3, [r7, #8]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d105      	bne.n	8011a4c <tcp_create_segment+0x34>
 8011a40:	4b3f      	ldr	r3, [pc, #252]	; (8011b40 <tcp_create_segment+0x128>)
 8011a42:	22a4      	movs	r2, #164	; 0xa4
 8011a44:	4941      	ldr	r1, [pc, #260]	; (8011b4c <tcp_create_segment+0x134>)
 8011a46:	4840      	ldr	r0, [pc, #256]	; (8011b48 <tcp_create_segment+0x130>)
 8011a48:	f004 f9d2 	bl	8015df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011a4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	b2db      	uxtb	r3, r3
 8011a54:	f003 0304 	and.w	r3, r3, #4
 8011a58:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011a5a:	2003      	movs	r0, #3
 8011a5c:	f7fa ff8e 	bl	800c97c <memp_malloc>
 8011a60:	6138      	str	r0, [r7, #16]
 8011a62:	693b      	ldr	r3, [r7, #16]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d104      	bne.n	8011a72 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011a68:	68b8      	ldr	r0, [r7, #8]
 8011a6a:	f7fb fe7d 	bl	800d768 <pbuf_free>
    return NULL;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	e061      	b.n	8011b36 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011a72:	693b      	ldr	r3, [r7, #16]
 8011a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011a78:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	68ba      	ldr	r2, [r7, #8]
 8011a84:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011a86:	68bb      	ldr	r3, [r7, #8]
 8011a88:	891a      	ldrh	r2, [r3, #8]
 8011a8a:	7dfb      	ldrb	r3, [r7, #23]
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	429a      	cmp	r2, r3
 8011a90:	d205      	bcs.n	8011a9e <tcp_create_segment+0x86>
 8011a92:	4b2b      	ldr	r3, [pc, #172]	; (8011b40 <tcp_create_segment+0x128>)
 8011a94:	22b0      	movs	r2, #176	; 0xb0
 8011a96:	492e      	ldr	r1, [pc, #184]	; (8011b50 <tcp_create_segment+0x138>)
 8011a98:	482b      	ldr	r0, [pc, #172]	; (8011b48 <tcp_create_segment+0x130>)
 8011a9a:	f004 f9a9 	bl	8015df0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	891a      	ldrh	r2, [r3, #8]
 8011aa2:	7dfb      	ldrb	r3, [r7, #23]
 8011aa4:	b29b      	uxth	r3, r3
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	693b      	ldr	r3, [r7, #16]
 8011aac:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011aae:	2114      	movs	r1, #20
 8011ab0:	68b8      	ldr	r0, [r7, #8]
 8011ab2:	f7fb fdc3 	bl	800d63c <pbuf_add_header>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d004      	beq.n	8011ac6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011abc:	6938      	ldr	r0, [r7, #16]
 8011abe:	f7fd f8d2 	bl	800ec66 <tcp_seg_free>
    return NULL;
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e037      	b.n	8011b36 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011ac6:	693b      	ldr	r3, [r7, #16]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	685a      	ldr	r2, [r3, #4]
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	8ada      	ldrh	r2, [r3, #22]
 8011ad4:	693b      	ldr	r3, [r7, #16]
 8011ad6:	68dc      	ldr	r4, [r3, #12]
 8011ad8:	4610      	mov	r0, r2
 8011ada:	f7fa fa99 	bl	800c010 <lwip_htons>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	8b1a      	ldrh	r2, [r3, #24]
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	68dc      	ldr	r4, [r3, #12]
 8011aea:	4610      	mov	r0, r2
 8011aec:	f7fa fa90 	bl	800c010 <lwip_htons>
 8011af0:	4603      	mov	r3, r0
 8011af2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	68dc      	ldr	r4, [r3, #12]
 8011af8:	6838      	ldr	r0, [r7, #0]
 8011afa:	f7fa fa9e 	bl	800c03a <lwip_htonl>
 8011afe:	4603      	mov	r3, r0
 8011b00:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	089b      	lsrs	r3, r3, #2
 8011b06:	b2db      	uxtb	r3, r3
 8011b08:	b29b      	uxth	r3, r3
 8011b0a:	3305      	adds	r3, #5
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	031b      	lsls	r3, r3, #12
 8011b10:	b29a      	uxth	r2, r3
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	b29b      	uxth	r3, r3
 8011b16:	4313      	orrs	r3, r2
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	693b      	ldr	r3, [r7, #16]
 8011b1c:	68dc      	ldr	r4, [r3, #12]
 8011b1e:	4610      	mov	r0, r2
 8011b20:	f7fa fa76 	bl	800c010 <lwip_htons>
 8011b24:	4603      	mov	r3, r0
 8011b26:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	749a      	strb	r2, [r3, #18]
 8011b30:	2200      	movs	r2, #0
 8011b32:	74da      	strb	r2, [r3, #19]
  return seg;
 8011b34:	693b      	ldr	r3, [r7, #16]
}
 8011b36:	4618      	mov	r0, r3
 8011b38:	371c      	adds	r7, #28
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd90      	pop	{r4, r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	080186c8 	.word	0x080186c8
 8011b44:	080186fc 	.word	0x080186fc
 8011b48:	0801871c 	.word	0x0801871c
 8011b4c:	08018744 	.word	0x08018744
 8011b50:	08018768 	.word	0x08018768

08011b54 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011b54:	b590      	push	{r4, r7, lr}
 8011b56:	b08b      	sub	sp, #44	; 0x2c
 8011b58:	af02      	add	r7, sp, #8
 8011b5a:	6078      	str	r0, [r7, #4]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8011b60:	2300      	movs	r3, #0
 8011b62:	61fb      	str	r3, [r7, #28]
 8011b64:	2300      	movs	r3, #0
 8011b66:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011b6c:	687b      	ldr	r3, [r7, #4]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d106      	bne.n	8011b80 <tcp_split_unsent_seg+0x2c>
 8011b72:	4b95      	ldr	r3, [pc, #596]	; (8011dc8 <tcp_split_unsent_seg+0x274>)
 8011b74:	f240 324b 	movw	r2, #843	; 0x34b
 8011b78:	4994      	ldr	r1, [pc, #592]	; (8011dcc <tcp_split_unsent_seg+0x278>)
 8011b7a:	4895      	ldr	r0, [pc, #596]	; (8011dd0 <tcp_split_unsent_seg+0x27c>)
 8011b7c:	f004 f938 	bl	8015df0 <iprintf>

  useg = pcb->unsent;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b84:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011b86:	697b      	ldr	r3, [r7, #20]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d102      	bne.n	8011b92 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b90:	e116      	b.n	8011dc0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8011b92:	887b      	ldrh	r3, [r7, #2]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d109      	bne.n	8011bac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011b98:	4b8b      	ldr	r3, [pc, #556]	; (8011dc8 <tcp_split_unsent_seg+0x274>)
 8011b9a:	f240 3253 	movw	r2, #851	; 0x353
 8011b9e:	498d      	ldr	r1, [pc, #564]	; (8011dd4 <tcp_split_unsent_seg+0x280>)
 8011ba0:	488b      	ldr	r0, [pc, #556]	; (8011dd0 <tcp_split_unsent_seg+0x27c>)
 8011ba2:	f004 f925 	bl	8015df0 <iprintf>
    return ERR_VAL;
 8011ba6:	f06f 0305 	mvn.w	r3, #5
 8011baa:	e109      	b.n	8011dc0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8011bac:	697b      	ldr	r3, [r7, #20]
 8011bae:	891b      	ldrh	r3, [r3, #8]
 8011bb0:	887a      	ldrh	r2, [r7, #2]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d301      	bcc.n	8011bba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	e102      	b.n	8011dc0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011bbe:	887a      	ldrh	r2, [r7, #2]
 8011bc0:	429a      	cmp	r2, r3
 8011bc2:	d906      	bls.n	8011bd2 <tcp_split_unsent_seg+0x7e>
 8011bc4:	4b80      	ldr	r3, [pc, #512]	; (8011dc8 <tcp_split_unsent_seg+0x274>)
 8011bc6:	f240 325b 	movw	r2, #859	; 0x35b
 8011bca:	4983      	ldr	r1, [pc, #524]	; (8011dd8 <tcp_split_unsent_seg+0x284>)
 8011bcc:	4880      	ldr	r0, [pc, #512]	; (8011dd0 <tcp_split_unsent_seg+0x27c>)
 8011bce:	f004 f90f 	bl	8015df0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8011bd2:	697b      	ldr	r3, [r7, #20]
 8011bd4:	891b      	ldrh	r3, [r3, #8]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d106      	bne.n	8011be8 <tcp_split_unsent_seg+0x94>
 8011bda:	4b7b      	ldr	r3, [pc, #492]	; (8011dc8 <tcp_split_unsent_seg+0x274>)
 8011bdc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8011be0:	497e      	ldr	r1, [pc, #504]	; (8011ddc <tcp_split_unsent_seg+0x288>)
 8011be2:	487b      	ldr	r0, [pc, #492]	; (8011dd0 <tcp_split_unsent_seg+0x27c>)
 8011be4:	f004 f904 	bl	8015df0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	7a9b      	ldrb	r3, [r3, #10]
 8011bec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011bee:	7bfb      	ldrb	r3, [r7, #15]
 8011bf0:	009b      	lsls	r3, r3, #2
 8011bf2:	b2db      	uxtb	r3, r3
 8011bf4:	f003 0304 	and.w	r3, r3, #4
 8011bf8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8011bfa:	697b      	ldr	r3, [r7, #20]
 8011bfc:	891a      	ldrh	r2, [r3, #8]
 8011bfe:	887b      	ldrh	r3, [r7, #2]
 8011c00:	1ad3      	subs	r3, r2, r3
 8011c02:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011c04:	7bbb      	ldrb	r3, [r7, #14]
 8011c06:	b29a      	uxth	r2, r3
 8011c08:	89bb      	ldrh	r3, [r7, #12]
 8011c0a:	4413      	add	r3, r2
 8011c0c:	b29b      	uxth	r3, r3
 8011c0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011c12:	4619      	mov	r1, r3
 8011c14:	2036      	movs	r0, #54	; 0x36
 8011c16:	f7fb fac3 	bl	800d1a0 <pbuf_alloc>
 8011c1a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	f000 80b7 	beq.w	8011d92 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	685b      	ldr	r3, [r3, #4]
 8011c28:	891a      	ldrh	r2, [r3, #8]
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	891b      	ldrh	r3, [r3, #8]
 8011c2e:	1ad3      	subs	r3, r2, r3
 8011c30:	b29a      	uxth	r2, r3
 8011c32:	887b      	ldrh	r3, [r7, #2]
 8011c34:	4413      	add	r3, r2
 8011c36:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011c38:	697b      	ldr	r3, [r7, #20]
 8011c3a:	6858      	ldr	r0, [r3, #4]
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	685a      	ldr	r2, [r3, #4]
 8011c40:	7bbb      	ldrb	r3, [r7, #14]
 8011c42:	18d1      	adds	r1, r2, r3
 8011c44:	897b      	ldrh	r3, [r7, #10]
 8011c46:	89ba      	ldrh	r2, [r7, #12]
 8011c48:	f7fb ff84 	bl	800db54 <pbuf_copy_partial>
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	461a      	mov	r2, r3
 8011c50:	89bb      	ldrh	r3, [r7, #12]
 8011c52:	4293      	cmp	r3, r2
 8011c54:	f040 809f 	bne.w	8011d96 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011c58:	697b      	ldr	r3, [r7, #20]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	899b      	ldrh	r3, [r3, #12]
 8011c5e:	b29b      	uxth	r3, r3
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fa f9d5 	bl	800c010 <lwip_htons>
 8011c66:	4603      	mov	r3, r0
 8011c68:	b2db      	uxtb	r3, r3
 8011c6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011c6e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8011c70:	2300      	movs	r3, #0
 8011c72:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011c74:	7efb      	ldrb	r3, [r7, #27]
 8011c76:	f003 0308 	and.w	r3, r3, #8
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d007      	beq.n	8011c8e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8011c7e:	7efb      	ldrb	r3, [r7, #27]
 8011c80:	f023 0308 	bic.w	r3, r3, #8
 8011c84:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011c86:	7ebb      	ldrb	r3, [r7, #26]
 8011c88:	f043 0308 	orr.w	r3, r3, #8
 8011c8c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8011c8e:	7efb      	ldrb	r3, [r7, #27]
 8011c90:	f003 0301 	and.w	r3, r3, #1
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d007      	beq.n	8011ca8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011c98:	7efb      	ldrb	r3, [r7, #27]
 8011c9a:	f023 0301 	bic.w	r3, r3, #1
 8011c9e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8011ca0:	7ebb      	ldrb	r3, [r7, #26]
 8011ca2:	f043 0301 	orr.w	r3, r3, #1
 8011ca6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8011ca8:	697b      	ldr	r3, [r7, #20]
 8011caa:	68db      	ldr	r3, [r3, #12]
 8011cac:	685b      	ldr	r3, [r3, #4]
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f7fa f9c3 	bl	800c03a <lwip_htonl>
 8011cb4:	4602      	mov	r2, r0
 8011cb6:	887b      	ldrh	r3, [r7, #2]
 8011cb8:	18d1      	adds	r1, r2, r3
 8011cba:	7eba      	ldrb	r2, [r7, #26]
 8011cbc:	7bfb      	ldrb	r3, [r7, #15]
 8011cbe:	9300      	str	r3, [sp, #0]
 8011cc0:	460b      	mov	r3, r1
 8011cc2:	6939      	ldr	r1, [r7, #16]
 8011cc4:	6878      	ldr	r0, [r7, #4]
 8011cc6:	f7ff fea7 	bl	8011a18 <tcp_create_segment>
 8011cca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8011ccc:	69fb      	ldr	r3, [r7, #28]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d063      	beq.n	8011d9a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	f7fb fdd4 	bl	800d884 <pbuf_clen>
 8011cdc:	4603      	mov	r3, r0
 8011cde:	461a      	mov	r2, r3
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011ce6:	1a9b      	subs	r3, r3, r2
 8011ce8:	b29a      	uxth	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	6858      	ldr	r0, [r3, #4]
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	891a      	ldrh	r2, [r3, #8]
 8011cfa:	89bb      	ldrh	r3, [r7, #12]
 8011cfc:	1ad3      	subs	r3, r2, r3
 8011cfe:	b29b      	uxth	r3, r3
 8011d00:	4619      	mov	r1, r3
 8011d02:	f7fb fbab 	bl	800d45c <pbuf_realloc>
  useg->len -= remainder;
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	891a      	ldrh	r2, [r3, #8]
 8011d0a:	89bb      	ldrh	r3, [r7, #12]
 8011d0c:	1ad3      	subs	r3, r2, r3
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	697b      	ldr	r3, [r7, #20]
 8011d12:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	68db      	ldr	r3, [r3, #12]
 8011d18:	899b      	ldrh	r3, [r3, #12]
 8011d1a:	b29c      	uxth	r4, r3
 8011d1c:	7efb      	ldrb	r3, [r7, #27]
 8011d1e:	b29b      	uxth	r3, r3
 8011d20:	4618      	mov	r0, r3
 8011d22:	f7fa f975 	bl	800c010 <lwip_htons>
 8011d26:	4603      	mov	r3, r0
 8011d28:	461a      	mov	r2, r3
 8011d2a:	697b      	ldr	r3, [r7, #20]
 8011d2c:	68db      	ldr	r3, [r3, #12]
 8011d2e:	4322      	orrs	r2, r4
 8011d30:	b292      	uxth	r2, r2
 8011d32:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	685b      	ldr	r3, [r3, #4]
 8011d38:	4618      	mov	r0, r3
 8011d3a:	f7fb fda3 	bl	800d884 <pbuf_clen>
 8011d3e:	4603      	mov	r3, r0
 8011d40:	461a      	mov	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d48:	4413      	add	r3, r2
 8011d4a:	b29a      	uxth	r2, r3
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011d52:	69fb      	ldr	r3, [r7, #28]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fb fd94 	bl	800d884 <pbuf_clen>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	461a      	mov	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011d66:	4413      	add	r3, r2
 8011d68:	b29a      	uxth	r2, r3
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8011d70:	697b      	ldr	r3, [r7, #20]
 8011d72:	681a      	ldr	r2, [r3, #0]
 8011d74:	69fb      	ldr	r3, [r7, #28]
 8011d76:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011d78:	697b      	ldr	r3, [r7, #20]
 8011d7a:	69fa      	ldr	r2, [r7, #28]
 8011d7c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8011d7e:	69fb      	ldr	r3, [r7, #28]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d103      	bne.n	8011d8e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2200      	movs	r2, #0
 8011d8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	e016      	b.n	8011dc0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8011d92:	bf00      	nop
 8011d94:	e002      	b.n	8011d9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d96:	bf00      	nop
 8011d98:	e000      	b.n	8011d9c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011d9a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d006      	beq.n	8011db0 <tcp_split_unsent_seg+0x25c>
 8011da2:	4b09      	ldr	r3, [pc, #36]	; (8011dc8 <tcp_split_unsent_seg+0x274>)
 8011da4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011da8:	490d      	ldr	r1, [pc, #52]	; (8011de0 <tcp_split_unsent_seg+0x28c>)
 8011daa:	4809      	ldr	r0, [pc, #36]	; (8011dd0 <tcp_split_unsent_seg+0x27c>)
 8011dac:	f004 f820 	bl	8015df0 <iprintf>
  if (p != NULL) {
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d002      	beq.n	8011dbc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8011db6:	6938      	ldr	r0, [r7, #16]
 8011db8:	f7fb fcd6 	bl	800d768 <pbuf_free>
  }

  return ERR_MEM;
 8011dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3724      	adds	r7, #36	; 0x24
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd90      	pop	{r4, r7, pc}
 8011dc8:	080186c8 	.word	0x080186c8
 8011dcc:	08018a5c 	.word	0x08018a5c
 8011dd0:	0801871c 	.word	0x0801871c
 8011dd4:	08018a80 	.word	0x08018a80
 8011dd8:	08018aa4 	.word	0x08018aa4
 8011ddc:	08018ab4 	.word	0x08018ab4
 8011de0:	08018ac4 	.word	0x08018ac4

08011de4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011de4:	b590      	push	{r4, r7, lr}
 8011de6:	b085      	sub	sp, #20
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d106      	bne.n	8011e00 <tcp_send_fin+0x1c>
 8011df2:	4b21      	ldr	r3, [pc, #132]	; (8011e78 <tcp_send_fin+0x94>)
 8011df4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8011df8:	4920      	ldr	r1, [pc, #128]	; (8011e7c <tcp_send_fin+0x98>)
 8011dfa:	4821      	ldr	r0, [pc, #132]	; (8011e80 <tcp_send_fin+0x9c>)
 8011dfc:	f003 fff8 	bl	8015df0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d02e      	beq.n	8011e66 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e0c:	60fb      	str	r3, [r7, #12]
 8011e0e:	e002      	b.n	8011e16 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	681b      	ldr	r3, [r3, #0]
 8011e14:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	2b00      	cmp	r3, #0
 8011e1c:	d1f8      	bne.n	8011e10 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	68db      	ldr	r3, [r3, #12]
 8011e22:	899b      	ldrh	r3, [r3, #12]
 8011e24:	b29b      	uxth	r3, r3
 8011e26:	4618      	mov	r0, r3
 8011e28:	f7fa f8f2 	bl	800c010 <lwip_htons>
 8011e2c:	4603      	mov	r3, r0
 8011e2e:	b2db      	uxtb	r3, r3
 8011e30:	f003 0307 	and.w	r3, r3, #7
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d116      	bne.n	8011e66 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	899b      	ldrh	r3, [r3, #12]
 8011e3e:	b29c      	uxth	r4, r3
 8011e40:	2001      	movs	r0, #1
 8011e42:	f7fa f8e5 	bl	800c010 <lwip_htons>
 8011e46:	4603      	mov	r3, r0
 8011e48:	461a      	mov	r2, r3
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	4322      	orrs	r2, r4
 8011e50:	b292      	uxth	r2, r2
 8011e52:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	8b5b      	ldrh	r3, [r3, #26]
 8011e58:	f043 0320 	orr.w	r3, r3, #32
 8011e5c:	b29a      	uxth	r2, r3
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011e62:	2300      	movs	r3, #0
 8011e64:	e004      	b.n	8011e70 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011e66:	2101      	movs	r1, #1
 8011e68:	6878      	ldr	r0, [r7, #4]
 8011e6a:	f000 f80b 	bl	8011e84 <tcp_enqueue_flags>
 8011e6e:	4603      	mov	r3, r0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3714      	adds	r7, #20
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd90      	pop	{r4, r7, pc}
 8011e78:	080186c8 	.word	0x080186c8
 8011e7c:	08018ad0 	.word	0x08018ad0
 8011e80:	0801871c 	.word	0x0801871c

08011e84 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b08a      	sub	sp, #40	; 0x28
 8011e88:	af02      	add	r7, sp, #8
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	460b      	mov	r3, r1
 8011e8e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011e90:	2300      	movs	r3, #0
 8011e92:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011e94:	2300      	movs	r3, #0
 8011e96:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011e98:	78fb      	ldrb	r3, [r7, #3]
 8011e9a:	f003 0303 	and.w	r3, r3, #3
 8011e9e:	2b00      	cmp	r3, #0
 8011ea0:	d106      	bne.n	8011eb0 <tcp_enqueue_flags+0x2c>
 8011ea2:	4b67      	ldr	r3, [pc, #412]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8011ea4:	f240 4211 	movw	r2, #1041	; 0x411
 8011ea8:	4966      	ldr	r1, [pc, #408]	; (8012044 <tcp_enqueue_flags+0x1c0>)
 8011eaa:	4867      	ldr	r0, [pc, #412]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8011eac:	f003 ffa0 	bl	8015df0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d106      	bne.n	8011ec4 <tcp_enqueue_flags+0x40>
 8011eb6:	4b62      	ldr	r3, [pc, #392]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8011eb8:	f240 4213 	movw	r2, #1043	; 0x413
 8011ebc:	4963      	ldr	r1, [pc, #396]	; (801204c <tcp_enqueue_flags+0x1c8>)
 8011ebe:	4862      	ldr	r0, [pc, #392]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8011ec0:	f003 ff96 	bl	8015df0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ec4:	78fb      	ldrb	r3, [r7, #3]
 8011ec6:	f003 0302 	and.w	r3, r3, #2
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d001      	beq.n	8011ed2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ed2:	7ffb      	ldrb	r3, [r7, #31]
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	b2db      	uxtb	r3, r3
 8011ed8:	f003 0304 	and.w	r3, r3, #4
 8011edc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ede:	7dfb      	ldrb	r3, [r7, #23]
 8011ee0:	b29b      	uxth	r3, r3
 8011ee2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	2036      	movs	r0, #54	; 0x36
 8011eea:	f7fb f959 	bl	800d1a0 <pbuf_alloc>
 8011eee:	6138      	str	r0, [r7, #16]
 8011ef0:	693b      	ldr	r3, [r7, #16]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d109      	bne.n	8011f0a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	8b5b      	ldrh	r3, [r3, #26]
 8011efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011efe:	b29a      	uxth	r2, r3
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f04:	f04f 33ff 	mov.w	r3, #4294967295
 8011f08:	e095      	b.n	8012036 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011f0a:	693b      	ldr	r3, [r7, #16]
 8011f0c:	895a      	ldrh	r2, [r3, #10]
 8011f0e:	7dfb      	ldrb	r3, [r7, #23]
 8011f10:	b29b      	uxth	r3, r3
 8011f12:	429a      	cmp	r2, r3
 8011f14:	d206      	bcs.n	8011f24 <tcp_enqueue_flags+0xa0>
 8011f16:	4b4a      	ldr	r3, [pc, #296]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8011f18:	f240 4239 	movw	r2, #1081	; 0x439
 8011f1c:	494c      	ldr	r1, [pc, #304]	; (8012050 <tcp_enqueue_flags+0x1cc>)
 8011f1e:	484a      	ldr	r0, [pc, #296]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8011f20:	f003 ff66 	bl	8015df0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011f28:	78fa      	ldrb	r2, [r7, #3]
 8011f2a:	7ffb      	ldrb	r3, [r7, #31]
 8011f2c:	9300      	str	r3, [sp, #0]
 8011f2e:	460b      	mov	r3, r1
 8011f30:	6939      	ldr	r1, [r7, #16]
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f7ff fd70 	bl	8011a18 <tcp_create_segment>
 8011f38:	60f8      	str	r0, [r7, #12]
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d109      	bne.n	8011f54 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	8b5b      	ldrh	r3, [r3, #26]
 8011f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011f48:	b29a      	uxth	r2, r3
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f52:	e070      	b.n	8012036 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011f54:	68fb      	ldr	r3, [r7, #12]
 8011f56:	68db      	ldr	r3, [r3, #12]
 8011f58:	f003 0303 	and.w	r3, r3, #3
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d006      	beq.n	8011f6e <tcp_enqueue_flags+0xea>
 8011f60:	4b37      	ldr	r3, [pc, #220]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8011f62:	f240 4242 	movw	r2, #1090	; 0x442
 8011f66:	493b      	ldr	r1, [pc, #236]	; (8012054 <tcp_enqueue_flags+0x1d0>)
 8011f68:	4837      	ldr	r0, [pc, #220]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8011f6a:	f003 ff41 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011f6e:	68fb      	ldr	r3, [r7, #12]
 8011f70:	891b      	ldrh	r3, [r3, #8]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d006      	beq.n	8011f84 <tcp_enqueue_flags+0x100>
 8011f76:	4b32      	ldr	r3, [pc, #200]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8011f78:	f240 4243 	movw	r2, #1091	; 0x443
 8011f7c:	4936      	ldr	r1, [pc, #216]	; (8012058 <tcp_enqueue_flags+0x1d4>)
 8011f7e:	4832      	ldr	r0, [pc, #200]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8011f80:	f003 ff36 	bl	8015df0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d103      	bne.n	8011f94 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	68fa      	ldr	r2, [r7, #12]
 8011f90:	66da      	str	r2, [r3, #108]	; 0x6c
 8011f92:	e00d      	b.n	8011fb0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f98:	61bb      	str	r3, [r7, #24]
 8011f9a:	e002      	b.n	8011fa2 <tcp_enqueue_flags+0x11e>
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	61bb      	str	r3, [r7, #24]
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d1f8      	bne.n	8011f9c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011faa:	69bb      	ldr	r3, [r7, #24]
 8011fac:	68fa      	ldr	r2, [r7, #12]
 8011fae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011fb8:	78fb      	ldrb	r3, [r7, #3]
 8011fba:	f003 0302 	and.w	r3, r3, #2
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d104      	bne.n	8011fcc <tcp_enqueue_flags+0x148>
 8011fc2:	78fb      	ldrb	r3, [r7, #3]
 8011fc4:	f003 0301 	and.w	r3, r3, #1
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d004      	beq.n	8011fd6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011fd0:	1c5a      	adds	r2, r3, #1
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011fd6:	78fb      	ldrb	r3, [r7, #3]
 8011fd8:	f003 0301 	and.w	r3, r3, #1
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d006      	beq.n	8011fee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	8b5b      	ldrh	r3, [r3, #26]
 8011fe4:	f043 0320 	orr.w	r3, r3, #32
 8011fe8:	b29a      	uxth	r2, r3
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	685b      	ldr	r3, [r3, #4]
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	f7fb fc46 	bl	800d884 <pbuf_clen>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	461a      	mov	r2, r3
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012002:	4413      	add	r3, r2
 8012004:	b29a      	uxth	r2, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012012:	2b00      	cmp	r3, #0
 8012014:	d00e      	beq.n	8012034 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801201a:	2b00      	cmp	r3, #0
 801201c:	d10a      	bne.n	8012034 <tcp_enqueue_flags+0x1b0>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012022:	2b00      	cmp	r3, #0
 8012024:	d106      	bne.n	8012034 <tcp_enqueue_flags+0x1b0>
 8012026:	4b06      	ldr	r3, [pc, #24]	; (8012040 <tcp_enqueue_flags+0x1bc>)
 8012028:	f240 4265 	movw	r2, #1125	; 0x465
 801202c:	490b      	ldr	r1, [pc, #44]	; (801205c <tcp_enqueue_flags+0x1d8>)
 801202e:	4806      	ldr	r0, [pc, #24]	; (8012048 <tcp_enqueue_flags+0x1c4>)
 8012030:	f003 fede 	bl	8015df0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	3720      	adds	r7, #32
 801203a:	46bd      	mov	sp, r7
 801203c:	bd80      	pop	{r7, pc}
 801203e:	bf00      	nop
 8012040:	080186c8 	.word	0x080186c8
 8012044:	08018aec 	.word	0x08018aec
 8012048:	0801871c 	.word	0x0801871c
 801204c:	08018b44 	.word	0x08018b44
 8012050:	08018b64 	.word	0x08018b64
 8012054:	08018ba0 	.word	0x08018ba0
 8012058:	08018bb8 	.word	0x08018bb8
 801205c:	08018be4 	.word	0x08018be4

08012060 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012060:	b5b0      	push	{r4, r5, r7, lr}
 8012062:	b08a      	sub	sp, #40	; 0x28
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d106      	bne.n	801207c <tcp_output+0x1c>
 801206e:	4b9e      	ldr	r3, [pc, #632]	; (80122e8 <tcp_output+0x288>)
 8012070:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012074:	499d      	ldr	r1, [pc, #628]	; (80122ec <tcp_output+0x28c>)
 8012076:	489e      	ldr	r0, [pc, #632]	; (80122f0 <tcp_output+0x290>)
 8012078:	f003 feba 	bl	8015df0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	7d1b      	ldrb	r3, [r3, #20]
 8012080:	2b01      	cmp	r3, #1
 8012082:	d106      	bne.n	8012092 <tcp_output+0x32>
 8012084:	4b98      	ldr	r3, [pc, #608]	; (80122e8 <tcp_output+0x288>)
 8012086:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801208a:	499a      	ldr	r1, [pc, #616]	; (80122f4 <tcp_output+0x294>)
 801208c:	4898      	ldr	r0, [pc, #608]	; (80122f0 <tcp_output+0x290>)
 801208e:	f003 feaf 	bl	8015df0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012092:	4b99      	ldr	r3, [pc, #612]	; (80122f8 <tcp_output+0x298>)
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	687a      	ldr	r2, [r7, #4]
 8012098:	429a      	cmp	r2, r3
 801209a:	d101      	bne.n	80120a0 <tcp_output+0x40>
    return ERR_OK;
 801209c:	2300      	movs	r3, #0
 801209e:	e1ce      	b.n	801243e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80120ac:	4293      	cmp	r3, r2
 80120ae:	bf28      	it	cs
 80120b0:	4613      	movcs	r3, r2
 80120b2:	b29b      	uxth	r3, r3
 80120b4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80120ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80120bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d10b      	bne.n	80120da <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	8b5b      	ldrh	r3, [r3, #26]
 80120c6:	f003 0302 	and.w	r3, r3, #2
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	f000 81aa 	beq.w	8012424 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f000 fdcb 	bl	8012c6c <tcp_send_empty_ack>
 80120d6:	4603      	mov	r3, r0
 80120d8:	e1b1      	b.n	801243e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80120da:	6879      	ldr	r1, [r7, #4]
 80120dc:	687b      	ldr	r3, [r7, #4]
 80120de:	3304      	adds	r3, #4
 80120e0:	461a      	mov	r2, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7ff fc7c 	bl	80119e0 <tcp_route>
 80120e8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80120ea:	697b      	ldr	r3, [r7, #20]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d102      	bne.n	80120f6 <tcp_output+0x96>
    return ERR_RTE;
 80120f0:	f06f 0303 	mvn.w	r3, #3
 80120f4:	e1a3      	b.n	801243e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d003      	beq.n	8012104 <tcp_output+0xa4>
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d111      	bne.n	8012128 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012104:	697b      	ldr	r3, [r7, #20]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d002      	beq.n	8012110 <tcp_output+0xb0>
 801210a:	697b      	ldr	r3, [r7, #20]
 801210c:	3304      	adds	r3, #4
 801210e:	e000      	b.n	8012112 <tcp_output+0xb2>
 8012110:	2300      	movs	r3, #0
 8012112:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012114:	693b      	ldr	r3, [r7, #16]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d102      	bne.n	8012120 <tcp_output+0xc0>
      return ERR_RTE;
 801211a:	f06f 0303 	mvn.w	r3, #3
 801211e:	e18e      	b.n	801243e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	681a      	ldr	r2, [r3, #0]
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801212a:	68db      	ldr	r3, [r3, #12]
 801212c:	685b      	ldr	r3, [r3, #4]
 801212e:	4618      	mov	r0, r3
 8012130:	f7f9 ff83 	bl	800c03a <lwip_htonl>
 8012134:	4602      	mov	r2, r0
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801213e:	8912      	ldrh	r2, [r2, #8]
 8012140:	4413      	add	r3, r2
 8012142:	69ba      	ldr	r2, [r7, #24]
 8012144:	429a      	cmp	r2, r3
 8012146:	d227      	bcs.n	8012198 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801214e:	461a      	mov	r2, r3
 8012150:	69bb      	ldr	r3, [r7, #24]
 8012152:	4293      	cmp	r3, r2
 8012154:	d114      	bne.n	8012180 <tcp_output+0x120>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801215a:	2b00      	cmp	r3, #0
 801215c:	d110      	bne.n	8012180 <tcp_output+0x120>
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012164:	2b00      	cmp	r3, #0
 8012166:	d10b      	bne.n	8012180 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	2200      	movs	r2, #0
 801216c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	2201      	movs	r2, #1
 8012174:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	8b5b      	ldrh	r3, [r3, #26]
 8012184:	f003 0302 	and.w	r3, r3, #2
 8012188:	2b00      	cmp	r3, #0
 801218a:	f000 814d 	beq.w	8012428 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	f000 fd6c 	bl	8012c6c <tcp_send_empty_ack>
 8012194:	4603      	mov	r3, r0
 8012196:	e152      	b.n	801243e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2200      	movs	r2, #0
 801219c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121a4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f000 811c 	beq.w	80123e6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80121ae:	e002      	b.n	80121b6 <tcp_output+0x156>
 80121b0:	6a3b      	ldr	r3, [r7, #32]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	623b      	str	r3, [r7, #32]
 80121b6:	6a3b      	ldr	r3, [r7, #32]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d1f8      	bne.n	80121b0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80121be:	e112      	b.n	80123e6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80121c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c2:	68db      	ldr	r3, [r3, #12]
 80121c4:	899b      	ldrh	r3, [r3, #12]
 80121c6:	b29b      	uxth	r3, r3
 80121c8:	4618      	mov	r0, r3
 80121ca:	f7f9 ff21 	bl	800c010 <lwip_htons>
 80121ce:	4603      	mov	r3, r0
 80121d0:	b2db      	uxtb	r3, r3
 80121d2:	f003 0304 	and.w	r3, r3, #4
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d006      	beq.n	80121e8 <tcp_output+0x188>
 80121da:	4b43      	ldr	r3, [pc, #268]	; (80122e8 <tcp_output+0x288>)
 80121dc:	f240 5236 	movw	r2, #1334	; 0x536
 80121e0:	4946      	ldr	r1, [pc, #280]	; (80122fc <tcp_output+0x29c>)
 80121e2:	4843      	ldr	r0, [pc, #268]	; (80122f0 <tcp_output+0x290>)
 80121e4:	f003 fe04 	bl	8015df0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d01f      	beq.n	8012230 <tcp_output+0x1d0>
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	8b5b      	ldrh	r3, [r3, #26]
 80121f4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d119      	bne.n	8012230 <tcp_output+0x1d0>
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012200:	2b00      	cmp	r3, #0
 8012202:	d00b      	beq.n	801221c <tcp_output+0x1bc>
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d110      	bne.n	8012230 <tcp_output+0x1d0>
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012212:	891a      	ldrh	r2, [r3, #8]
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012218:	429a      	cmp	r2, r3
 801221a:	d209      	bcs.n	8012230 <tcp_output+0x1d0>
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012222:	2b00      	cmp	r3, #0
 8012224:	d004      	beq.n	8012230 <tcp_output+0x1d0>
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801222c:	2b08      	cmp	r3, #8
 801222e:	d901      	bls.n	8012234 <tcp_output+0x1d4>
 8012230:	2301      	movs	r3, #1
 8012232:	e000      	b.n	8012236 <tcp_output+0x1d6>
 8012234:	2300      	movs	r3, #0
 8012236:	2b00      	cmp	r3, #0
 8012238:	d106      	bne.n	8012248 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	8b5b      	ldrh	r3, [r3, #26]
 801223e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012242:	2b00      	cmp	r3, #0
 8012244:	f000 80e4 	beq.w	8012410 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	7d1b      	ldrb	r3, [r3, #20]
 801224c:	2b02      	cmp	r3, #2
 801224e:	d00d      	beq.n	801226c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012252:	68db      	ldr	r3, [r3, #12]
 8012254:	899b      	ldrh	r3, [r3, #12]
 8012256:	b29c      	uxth	r4, r3
 8012258:	2010      	movs	r0, #16
 801225a:	f7f9 fed9 	bl	800c010 <lwip_htons>
 801225e:	4603      	mov	r3, r0
 8012260:	461a      	mov	r2, r3
 8012262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012264:	68db      	ldr	r3, [r3, #12]
 8012266:	4322      	orrs	r2, r4
 8012268:	b292      	uxth	r2, r2
 801226a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801226c:	697a      	ldr	r2, [r7, #20]
 801226e:	6879      	ldr	r1, [r7, #4]
 8012270:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012272:	f000 f909 	bl	8012488 <tcp_output_segment>
 8012276:	4603      	mov	r3, r0
 8012278:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d009      	beq.n	8012296 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	8b5b      	ldrh	r3, [r3, #26]
 8012286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801228a:	b29a      	uxth	r2, r3
 801228c:	687b      	ldr	r3, [r7, #4]
 801228e:	835a      	strh	r2, [r3, #26]
      return err;
 8012290:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012294:	e0d3      	b.n	801243e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012298:	681a      	ldr	r2, [r3, #0]
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	7d1b      	ldrb	r3, [r3, #20]
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	d006      	beq.n	80122b4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	8b5b      	ldrh	r3, [r3, #26]
 80122aa:	f023 0303 	bic.w	r3, r3, #3
 80122ae:	b29a      	uxth	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122b6:	68db      	ldr	r3, [r3, #12]
 80122b8:	685b      	ldr	r3, [r3, #4]
 80122ba:	4618      	mov	r0, r3
 80122bc:	f7f9 febd 	bl	800c03a <lwip_htonl>
 80122c0:	4604      	mov	r4, r0
 80122c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122c4:	891b      	ldrh	r3, [r3, #8]
 80122c6:	461d      	mov	r5, r3
 80122c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	899b      	ldrh	r3, [r3, #12]
 80122ce:	b29b      	uxth	r3, r3
 80122d0:	4618      	mov	r0, r3
 80122d2:	f7f9 fe9d 	bl	800c010 <lwip_htons>
 80122d6:	4603      	mov	r3, r0
 80122d8:	b2db      	uxtb	r3, r3
 80122da:	f003 0303 	and.w	r3, r3, #3
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d00e      	beq.n	8012300 <tcp_output+0x2a0>
 80122e2:	2301      	movs	r3, #1
 80122e4:	e00d      	b.n	8012302 <tcp_output+0x2a2>
 80122e6:	bf00      	nop
 80122e8:	080186c8 	.word	0x080186c8
 80122ec:	08018c0c 	.word	0x08018c0c
 80122f0:	0801871c 	.word	0x0801871c
 80122f4:	08018c24 	.word	0x08018c24
 80122f8:	2000c944 	.word	0x2000c944
 80122fc:	08018c4c 	.word	0x08018c4c
 8012300:	2300      	movs	r3, #0
 8012302:	442b      	add	r3, r5
 8012304:	4423      	add	r3, r4
 8012306:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	1ad3      	subs	r3, r2, r3
 8012310:	2b00      	cmp	r3, #0
 8012312:	da02      	bge.n	801231a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	68ba      	ldr	r2, [r7, #8]
 8012318:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801231a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801231c:	891b      	ldrh	r3, [r3, #8]
 801231e:	461c      	mov	r4, r3
 8012320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	899b      	ldrh	r3, [r3, #12]
 8012326:	b29b      	uxth	r3, r3
 8012328:	4618      	mov	r0, r3
 801232a:	f7f9 fe71 	bl	800c010 <lwip_htons>
 801232e:	4603      	mov	r3, r0
 8012330:	b2db      	uxtb	r3, r3
 8012332:	f003 0303 	and.w	r3, r3, #3
 8012336:	2b00      	cmp	r3, #0
 8012338:	d001      	beq.n	801233e <tcp_output+0x2de>
 801233a:	2301      	movs	r3, #1
 801233c:	e000      	b.n	8012340 <tcp_output+0x2e0>
 801233e:	2300      	movs	r3, #0
 8012340:	4423      	add	r3, r4
 8012342:	2b00      	cmp	r3, #0
 8012344:	d049      	beq.n	80123da <tcp_output+0x37a>
      seg->next = NULL;
 8012346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012348:	2200      	movs	r2, #0
 801234a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012350:	2b00      	cmp	r3, #0
 8012352:	d105      	bne.n	8012360 <tcp_output+0x300>
        pcb->unacked = seg;
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012358:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235c:	623b      	str	r3, [r7, #32]
 801235e:	e03f      	b.n	80123e0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	4618      	mov	r0, r3
 8012368:	f7f9 fe67 	bl	800c03a <lwip_htonl>
 801236c:	4604      	mov	r4, r0
 801236e:	6a3b      	ldr	r3, [r7, #32]
 8012370:	68db      	ldr	r3, [r3, #12]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	4618      	mov	r0, r3
 8012376:	f7f9 fe60 	bl	800c03a <lwip_htonl>
 801237a:	4603      	mov	r3, r0
 801237c:	1ae3      	subs	r3, r4, r3
 801237e:	2b00      	cmp	r3, #0
 8012380:	da24      	bge.n	80123cc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	3370      	adds	r3, #112	; 0x70
 8012386:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012388:	e002      	b.n	8012390 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801238a:	69fb      	ldr	r3, [r7, #28]
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012390:	69fb      	ldr	r3, [r7, #28]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d011      	beq.n	80123bc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012398:	69fb      	ldr	r3, [r7, #28]
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	685b      	ldr	r3, [r3, #4]
 80123a0:	4618      	mov	r0, r3
 80123a2:	f7f9 fe4a 	bl	800c03a <lwip_htonl>
 80123a6:	4604      	mov	r4, r0
 80123a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123aa:	68db      	ldr	r3, [r3, #12]
 80123ac:	685b      	ldr	r3, [r3, #4]
 80123ae:	4618      	mov	r0, r3
 80123b0:	f7f9 fe43 	bl	800c03a <lwip_htonl>
 80123b4:	4603      	mov	r3, r0
 80123b6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	dbe6      	blt.n	801238a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80123bc:	69fb      	ldr	r3, [r7, #28]
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123c2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80123c4:	69fb      	ldr	r3, [r7, #28]
 80123c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123c8:	601a      	str	r2, [r3, #0]
 80123ca:	e009      	b.n	80123e0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80123cc:	6a3b      	ldr	r3, [r7, #32]
 80123ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80123d0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80123d2:	6a3b      	ldr	r3, [r7, #32]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	623b      	str	r3, [r7, #32]
 80123d8:	e002      	b.n	80123e0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80123da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80123dc:	f7fc fc43 	bl	800ec66 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123e4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80123e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d012      	beq.n	8012412 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80123ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123ee:	68db      	ldr	r3, [r3, #12]
 80123f0:	685b      	ldr	r3, [r3, #4]
 80123f2:	4618      	mov	r0, r3
 80123f4:	f7f9 fe21 	bl	800c03a <lwip_htonl>
 80123f8:	4602      	mov	r2, r0
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80123fe:	1ad3      	subs	r3, r2, r3
 8012400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012402:	8912      	ldrh	r2, [r2, #8]
 8012404:	4413      	add	r3, r2
  while (seg != NULL &&
 8012406:	69ba      	ldr	r2, [r7, #24]
 8012408:	429a      	cmp	r2, r3
 801240a:	f4bf aed9 	bcs.w	80121c0 <tcp_output+0x160>
 801240e:	e000      	b.n	8012412 <tcp_output+0x3b2>
      break;
 8012410:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012416:	2b00      	cmp	r3, #0
 8012418:	d108      	bne.n	801242c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	2200      	movs	r2, #0
 801241e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012422:	e004      	b.n	801242e <tcp_output+0x3ce>
    goto output_done;
 8012424:	bf00      	nop
 8012426:	e002      	b.n	801242e <tcp_output+0x3ce>
    goto output_done;
 8012428:	bf00      	nop
 801242a:	e000      	b.n	801242e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801242c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8b5b      	ldrh	r3, [r3, #26]
 8012432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801243c:	2300      	movs	r3, #0
}
 801243e:	4618      	mov	r0, r3
 8012440:	3728      	adds	r7, #40	; 0x28
 8012442:	46bd      	mov	sp, r7
 8012444:	bdb0      	pop	{r4, r5, r7, pc}
 8012446:	bf00      	nop

08012448 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012448:	b580      	push	{r7, lr}
 801244a:	b082      	sub	sp, #8
 801244c:	af00      	add	r7, sp, #0
 801244e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d106      	bne.n	8012464 <tcp_output_segment_busy+0x1c>
 8012456:	4b09      	ldr	r3, [pc, #36]	; (801247c <tcp_output_segment_busy+0x34>)
 8012458:	f240 529a 	movw	r2, #1434	; 0x59a
 801245c:	4908      	ldr	r1, [pc, #32]	; (8012480 <tcp_output_segment_busy+0x38>)
 801245e:	4809      	ldr	r0, [pc, #36]	; (8012484 <tcp_output_segment_busy+0x3c>)
 8012460:	f003 fcc6 	bl	8015df0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	7b9b      	ldrb	r3, [r3, #14]
 801246a:	2b01      	cmp	r3, #1
 801246c:	d001      	beq.n	8012472 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801246e:	2301      	movs	r3, #1
 8012470:	e000      	b.n	8012474 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012472:	2300      	movs	r3, #0
}
 8012474:	4618      	mov	r0, r3
 8012476:	3708      	adds	r7, #8
 8012478:	46bd      	mov	sp, r7
 801247a:	bd80      	pop	{r7, pc}
 801247c:	080186c8 	.word	0x080186c8
 8012480:	08018c64 	.word	0x08018c64
 8012484:	0801871c 	.word	0x0801871c

08012488 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012488:	b5b0      	push	{r4, r5, r7, lr}
 801248a:	b08c      	sub	sp, #48	; 0x30
 801248c:	af04      	add	r7, sp, #16
 801248e:	60f8      	str	r0, [r7, #12]
 8012490:	60b9      	str	r1, [r7, #8]
 8012492:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <tcp_output_segment+0x20>
 801249a:	4b63      	ldr	r3, [pc, #396]	; (8012628 <tcp_output_segment+0x1a0>)
 801249c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80124a0:	4962      	ldr	r1, [pc, #392]	; (801262c <tcp_output_segment+0x1a4>)
 80124a2:	4863      	ldr	r0, [pc, #396]	; (8012630 <tcp_output_segment+0x1a8>)
 80124a4:	f003 fca4 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80124a8:	68bb      	ldr	r3, [r7, #8]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d106      	bne.n	80124bc <tcp_output_segment+0x34>
 80124ae:	4b5e      	ldr	r3, [pc, #376]	; (8012628 <tcp_output_segment+0x1a0>)
 80124b0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80124b4:	495f      	ldr	r1, [pc, #380]	; (8012634 <tcp_output_segment+0x1ac>)
 80124b6:	485e      	ldr	r0, [pc, #376]	; (8012630 <tcp_output_segment+0x1a8>)
 80124b8:	f003 fc9a 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_output_segment+0x48>
 80124c2:	4b59      	ldr	r3, [pc, #356]	; (8012628 <tcp_output_segment+0x1a0>)
 80124c4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80124c8:	495b      	ldr	r1, [pc, #364]	; (8012638 <tcp_output_segment+0x1b0>)
 80124ca:	4859      	ldr	r0, [pc, #356]	; (8012630 <tcp_output_segment+0x1a8>)
 80124cc:	f003 fc90 	bl	8015df0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80124d0:	68f8      	ldr	r0, [r7, #12]
 80124d2:	f7ff ffb9 	bl	8012448 <tcp_output_segment_busy>
 80124d6:	4603      	mov	r3, r0
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d001      	beq.n	80124e0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80124dc:	2300      	movs	r3, #0
 80124de:	e09f      	b.n	8012620 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	68dc      	ldr	r4, [r3, #12]
 80124e8:	4610      	mov	r0, r2
 80124ea:	f7f9 fda6 	bl	800c03a <lwip_htonl>
 80124ee:	4603      	mov	r3, r0
 80124f0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	68dc      	ldr	r4, [r3, #12]
 80124fa:	4610      	mov	r0, r2
 80124fc:	f7f9 fd88 	bl	800c010 <lwip_htons>
 8012500:	4603      	mov	r3, r0
 8012502:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012504:	68bb      	ldr	r3, [r7, #8]
 8012506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012508:	68ba      	ldr	r2, [r7, #8]
 801250a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801250c:	441a      	add	r2, r3
 801250e:	68bb      	ldr	r3, [r7, #8]
 8012510:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	68db      	ldr	r3, [r3, #12]
 8012516:	3314      	adds	r3, #20
 8012518:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801251a:	68fb      	ldr	r3, [r7, #12]
 801251c:	7a9b      	ldrb	r3, [r3, #10]
 801251e:	f003 0301 	and.w	r3, r3, #1
 8012522:	2b00      	cmp	r3, #0
 8012524:	d015      	beq.n	8012552 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	3304      	adds	r3, #4
 801252a:	461a      	mov	r2, r3
 801252c:	6879      	ldr	r1, [r7, #4]
 801252e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012532:	f7fc fe8f 	bl	800f254 <tcp_eff_send_mss_netif>
 8012536:	4603      	mov	r3, r0
 8012538:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801253a:	8b7b      	ldrh	r3, [r7, #26]
 801253c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012540:	4618      	mov	r0, r3
 8012542:	f7f9 fd7a 	bl	800c03a <lwip_htonl>
 8012546:	4602      	mov	r2, r0
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801254c:	69fb      	ldr	r3, [r7, #28]
 801254e:	3304      	adds	r3, #4
 8012550:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012552:	68bb      	ldr	r3, [r7, #8]
 8012554:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012558:	2b00      	cmp	r3, #0
 801255a:	da02      	bge.n	8012562 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801255c:	68bb      	ldr	r3, [r7, #8]
 801255e:	2200      	movs	r2, #0
 8012560:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012562:	68bb      	ldr	r3, [r7, #8]
 8012564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012566:	2b00      	cmp	r3, #0
 8012568:	d10c      	bne.n	8012584 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801256a:	4b34      	ldr	r3, [pc, #208]	; (801263c <tcp_output_segment+0x1b4>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	68db      	ldr	r3, [r3, #12]
 8012576:	685b      	ldr	r3, [r3, #4]
 8012578:	4618      	mov	r0, r3
 801257a:	f7f9 fd5e 	bl	800c03a <lwip_htonl>
 801257e:	4602      	mov	r2, r0
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	68da      	ldr	r2, [r3, #12]
 8012588:	68fb      	ldr	r3, [r7, #12]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	685b      	ldr	r3, [r3, #4]
 801258e:	1ad3      	subs	r3, r2, r3
 8012590:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	8959      	ldrh	r1, [r3, #10]
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	685b      	ldr	r3, [r3, #4]
 801259c:	8b3a      	ldrh	r2, [r7, #24]
 801259e:	1a8a      	subs	r2, r1, r2
 80125a0:	b292      	uxth	r2, r2
 80125a2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	685b      	ldr	r3, [r3, #4]
 80125a8:	8919      	ldrh	r1, [r3, #8]
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	685b      	ldr	r3, [r3, #4]
 80125ae:	8b3a      	ldrh	r2, [r7, #24]
 80125b0:	1a8a      	subs	r2, r1, r2
 80125b2:	b292      	uxth	r2, r2
 80125b4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	685b      	ldr	r3, [r3, #4]
 80125ba:	68fa      	ldr	r2, [r7, #12]
 80125bc:	68d2      	ldr	r2, [r2, #12]
 80125be:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80125c0:	68fb      	ldr	r3, [r7, #12]
 80125c2:	68db      	ldr	r3, [r3, #12]
 80125c4:	2200      	movs	r2, #0
 80125c6:	741a      	strb	r2, [r3, #16]
 80125c8:	2200      	movs	r2, #0
 80125ca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	f103 0214 	add.w	r2, r3, #20
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	7a9b      	ldrb	r3, [r3, #10]
 80125d8:	009b      	lsls	r3, r3, #2
 80125da:	f003 0304 	and.w	r3, r3, #4
 80125de:	4413      	add	r3, r2
 80125e0:	69fa      	ldr	r2, [r7, #28]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d006      	beq.n	80125f4 <tcp_output_segment+0x16c>
 80125e6:	4b10      	ldr	r3, [pc, #64]	; (8012628 <tcp_output_segment+0x1a0>)
 80125e8:	f240 621c 	movw	r2, #1564	; 0x61c
 80125ec:	4914      	ldr	r1, [pc, #80]	; (8012640 <tcp_output_segment+0x1b8>)
 80125ee:	4810      	ldr	r0, [pc, #64]	; (8012630 <tcp_output_segment+0x1a8>)
 80125f0:	f003 fbfe 	bl	8015df0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	6858      	ldr	r0, [r3, #4]
 80125f8:	68b9      	ldr	r1, [r7, #8]
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	1d1c      	adds	r4, r3, #4
 80125fe:	68bb      	ldr	r3, [r7, #8]
 8012600:	7add      	ldrb	r5, [r3, #11]
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	7a9b      	ldrb	r3, [r3, #10]
 8012606:	687a      	ldr	r2, [r7, #4]
 8012608:	9202      	str	r2, [sp, #8]
 801260a:	2206      	movs	r2, #6
 801260c:	9201      	str	r2, [sp, #4]
 801260e:	9300      	str	r3, [sp, #0]
 8012610:	462b      	mov	r3, r5
 8012612:	4622      	mov	r2, r4
 8012614:	f002 fa66 	bl	8014ae4 <ip4_output_if>
 8012618:	4603      	mov	r3, r0
 801261a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801261c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3720      	adds	r7, #32
 8012624:	46bd      	mov	sp, r7
 8012626:	bdb0      	pop	{r4, r5, r7, pc}
 8012628:	080186c8 	.word	0x080186c8
 801262c:	08018c8c 	.word	0x08018c8c
 8012630:	0801871c 	.word	0x0801871c
 8012634:	08018cac 	.word	0x08018cac
 8012638:	08018ccc 	.word	0x08018ccc
 801263c:	2000c934 	.word	0x2000c934
 8012640:	08018cf0 	.word	0x08018cf0

08012644 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012644:	b5b0      	push	{r4, r5, r7, lr}
 8012646:	b084      	sub	sp, #16
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d106      	bne.n	8012660 <tcp_rexmit_rto_prepare+0x1c>
 8012652:	4b31      	ldr	r3, [pc, #196]	; (8012718 <tcp_rexmit_rto_prepare+0xd4>)
 8012654:	f240 6263 	movw	r2, #1635	; 0x663
 8012658:	4930      	ldr	r1, [pc, #192]	; (801271c <tcp_rexmit_rto_prepare+0xd8>)
 801265a:	4831      	ldr	r0, [pc, #196]	; (8012720 <tcp_rexmit_rto_prepare+0xdc>)
 801265c:	f003 fbc8 	bl	8015df0 <iprintf>

  if (pcb->unacked == NULL) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012664:	2b00      	cmp	r3, #0
 8012666:	d102      	bne.n	801266e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012668:	f06f 0305 	mvn.w	r3, #5
 801266c:	e050      	b.n	8012710 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012672:	60fb      	str	r3, [r7, #12]
 8012674:	e00b      	b.n	801268e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012676:	68f8      	ldr	r0, [r7, #12]
 8012678:	f7ff fee6 	bl	8012448 <tcp_output_segment_busy>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	d002      	beq.n	8012688 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8012682:	f06f 0305 	mvn.w	r3, #5
 8012686:	e043      	b.n	8012710 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	60fb      	str	r3, [r7, #12]
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d1ef      	bne.n	8012676 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012696:	68f8      	ldr	r0, [r7, #12]
 8012698:	f7ff fed6 	bl	8012448 <tcp_output_segment_busy>
 801269c:	4603      	mov	r3, r0
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d002      	beq.n	80126a8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80126a2:	f06f 0305 	mvn.w	r3, #5
 80126a6:	e033      	b.n	8012710 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2200      	movs	r2, #0
 80126bc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	8b5b      	ldrh	r3, [r3, #26]
 80126c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80126c6:	b29a      	uxth	r2, r3
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	68db      	ldr	r3, [r3, #12]
 80126d0:	685b      	ldr	r3, [r3, #4]
 80126d2:	4618      	mov	r0, r3
 80126d4:	f7f9 fcb1 	bl	800c03a <lwip_htonl>
 80126d8:	4604      	mov	r4, r0
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	891b      	ldrh	r3, [r3, #8]
 80126de:	461d      	mov	r5, r3
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	68db      	ldr	r3, [r3, #12]
 80126e4:	899b      	ldrh	r3, [r3, #12]
 80126e6:	b29b      	uxth	r3, r3
 80126e8:	4618      	mov	r0, r3
 80126ea:	f7f9 fc91 	bl	800c010 <lwip_htons>
 80126ee:	4603      	mov	r3, r0
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	f003 0303 	and.w	r3, r3, #3
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d001      	beq.n	80126fe <tcp_rexmit_rto_prepare+0xba>
 80126fa:	2301      	movs	r3, #1
 80126fc:	e000      	b.n	8012700 <tcp_rexmit_rto_prepare+0xbc>
 80126fe:	2300      	movs	r3, #0
 8012700:	442b      	add	r3, r5
 8012702:	18e2      	adds	r2, r4, r3
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	2200      	movs	r2, #0
 801270c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801270e:	2300      	movs	r3, #0
}
 8012710:	4618      	mov	r0, r3
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bdb0      	pop	{r4, r5, r7, pc}
 8012718:	080186c8 	.word	0x080186c8
 801271c:	08018d04 	.word	0x08018d04
 8012720:	0801871c 	.word	0x0801871c

08012724 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b082      	sub	sp, #8
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d106      	bne.n	8012740 <tcp_rexmit_rto_commit+0x1c>
 8012732:	4b0d      	ldr	r3, [pc, #52]	; (8012768 <tcp_rexmit_rto_commit+0x44>)
 8012734:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012738:	490c      	ldr	r1, [pc, #48]	; (801276c <tcp_rexmit_rto_commit+0x48>)
 801273a:	480d      	ldr	r0, [pc, #52]	; (8012770 <tcp_rexmit_rto_commit+0x4c>)
 801273c:	f003 fb58 	bl	8015df0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012746:	2bff      	cmp	r3, #255	; 0xff
 8012748:	d007      	beq.n	801275a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012750:	3301      	adds	r3, #1
 8012752:	b2da      	uxtb	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff fc80 	bl	8012060 <tcp_output>
}
 8012760:	bf00      	nop
 8012762:	3708      	adds	r7, #8
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	080186c8 	.word	0x080186c8
 801276c:	08018d28 	.word	0x08018d28
 8012770:	0801871c 	.word	0x0801871c

08012774 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b082      	sub	sp, #8
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	2b00      	cmp	r3, #0
 8012780:	d106      	bne.n	8012790 <tcp_rexmit_rto+0x1c>
 8012782:	4b0a      	ldr	r3, [pc, #40]	; (80127ac <tcp_rexmit_rto+0x38>)
 8012784:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012788:	4909      	ldr	r1, [pc, #36]	; (80127b0 <tcp_rexmit_rto+0x3c>)
 801278a:	480a      	ldr	r0, [pc, #40]	; (80127b4 <tcp_rexmit_rto+0x40>)
 801278c:	f003 fb30 	bl	8015df0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff ff57 	bl	8012644 <tcp_rexmit_rto_prepare>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d102      	bne.n	80127a2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801279c:	6878      	ldr	r0, [r7, #4]
 801279e:	f7ff ffc1 	bl	8012724 <tcp_rexmit_rto_commit>
  }
}
 80127a2:	bf00      	nop
 80127a4:	3708      	adds	r7, #8
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bd80      	pop	{r7, pc}
 80127aa:	bf00      	nop
 80127ac:	080186c8 	.word	0x080186c8
 80127b0:	08018d4c 	.word	0x08018d4c
 80127b4:	0801871c 	.word	0x0801871c

080127b8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80127b8:	b590      	push	{r4, r7, lr}
 80127ba:	b085      	sub	sp, #20
 80127bc:	af00      	add	r7, sp, #0
 80127be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d106      	bne.n	80127d4 <tcp_rexmit+0x1c>
 80127c6:	4b2f      	ldr	r3, [pc, #188]	; (8012884 <tcp_rexmit+0xcc>)
 80127c8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80127cc:	492e      	ldr	r1, [pc, #184]	; (8012888 <tcp_rexmit+0xd0>)
 80127ce:	482f      	ldr	r0, [pc, #188]	; (801288c <tcp_rexmit+0xd4>)
 80127d0:	f003 fb0e 	bl	8015df0 <iprintf>

  if (pcb->unacked == NULL) {
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d102      	bne.n	80127e2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80127dc:	f06f 0305 	mvn.w	r3, #5
 80127e0:	e04c      	b.n	801287c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80127e8:	68b8      	ldr	r0, [r7, #8]
 80127ea:	f7ff fe2d 	bl	8012448 <tcp_output_segment_busy>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d002      	beq.n	80127fa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80127f4:	f06f 0305 	mvn.w	r3, #5
 80127f8:	e040      	b.n	801287c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80127fa:	68bb      	ldr	r3, [r7, #8]
 80127fc:	681a      	ldr	r2, [r3, #0]
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	336c      	adds	r3, #108	; 0x6c
 8012806:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012808:	e002      	b.n	8012810 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	2b00      	cmp	r3, #0
 8012816:	d011      	beq.n	801283c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	685b      	ldr	r3, [r3, #4]
 8012820:	4618      	mov	r0, r3
 8012822:	f7f9 fc0a 	bl	800c03a <lwip_htonl>
 8012826:	4604      	mov	r4, r0
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	68db      	ldr	r3, [r3, #12]
 801282c:	685b      	ldr	r3, [r3, #4]
 801282e:	4618      	mov	r0, r3
 8012830:	f7f9 fc03 	bl	800c03a <lwip_htonl>
 8012834:	4603      	mov	r3, r0
 8012836:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012838:	2b00      	cmp	r3, #0
 801283a:	dbe6      	blt.n	801280a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	681a      	ldr	r2, [r3, #0]
 8012840:	68bb      	ldr	r3, [r7, #8]
 8012842:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	68ba      	ldr	r2, [r7, #8]
 8012848:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	681b      	ldr	r3, [r3, #0]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d103      	bne.n	801285a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	2200      	movs	r2, #0
 8012856:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012860:	2bff      	cmp	r3, #255	; 0xff
 8012862:	d007      	beq.n	8012874 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801286a:	3301      	adds	r3, #1
 801286c:	b2da      	uxtb	r2, r3
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	2200      	movs	r2, #0
 8012878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801287a:	2300      	movs	r3, #0
}
 801287c:	4618      	mov	r0, r3
 801287e:	3714      	adds	r7, #20
 8012880:	46bd      	mov	sp, r7
 8012882:	bd90      	pop	{r4, r7, pc}
 8012884:	080186c8 	.word	0x080186c8
 8012888:	08018d68 	.word	0x08018d68
 801288c:	0801871c 	.word	0x0801871c

08012890 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012890:	b580      	push	{r7, lr}
 8012892:	b082      	sub	sp, #8
 8012894:	af00      	add	r7, sp, #0
 8012896:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2b00      	cmp	r3, #0
 801289c:	d106      	bne.n	80128ac <tcp_rexmit_fast+0x1c>
 801289e:	4b2a      	ldr	r3, [pc, #168]	; (8012948 <tcp_rexmit_fast+0xb8>)
 80128a0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80128a4:	4929      	ldr	r1, [pc, #164]	; (801294c <tcp_rexmit_fast+0xbc>)
 80128a6:	482a      	ldr	r0, [pc, #168]	; (8012950 <tcp_rexmit_fast+0xc0>)
 80128a8:	f003 faa2 	bl	8015df0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d045      	beq.n	8012940 <tcp_rexmit_fast+0xb0>
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	8b5b      	ldrh	r3, [r3, #26]
 80128b8:	f003 0304 	and.w	r3, r3, #4
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d13f      	bne.n	8012940 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff ff79 	bl	80127b8 <tcp_rexmit>
 80128c6:	4603      	mov	r3, r0
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d139      	bne.n	8012940 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80128d8:	4293      	cmp	r3, r2
 80128da:	bf28      	it	cs
 80128dc:	4613      	movcs	r3, r2
 80128de:	b29b      	uxth	r3, r3
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	da00      	bge.n	80128e6 <tcp_rexmit_fast+0x56>
 80128e4:	3301      	adds	r3, #1
 80128e6:	105b      	asrs	r3, r3, #1
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80128f6:	461a      	mov	r2, r3
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128fc:	005b      	lsls	r3, r3, #1
 80128fe:	429a      	cmp	r2, r3
 8012900:	d206      	bcs.n	8012910 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012906:	005b      	lsls	r3, r3, #1
 8012908:	b29a      	uxth	r2, r3
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801291a:	4619      	mov	r1, r3
 801291c:	0049      	lsls	r1, r1, #1
 801291e:	440b      	add	r3, r1
 8012920:	b29b      	uxth	r3, r3
 8012922:	4413      	add	r3, r2
 8012924:	b29a      	uxth	r2, r3
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	8b5b      	ldrh	r3, [r3, #26]
 8012930:	f043 0304 	orr.w	r3, r3, #4
 8012934:	b29a      	uxth	r2, r3
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	2200      	movs	r2, #0
 801293e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	080186c8 	.word	0x080186c8
 801294c:	08018d80 	.word	0x08018d80
 8012950:	0801871c 	.word	0x0801871c

08012954 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b086      	sub	sp, #24
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	607b      	str	r3, [r7, #4]
 801295e:	460b      	mov	r3, r1
 8012960:	817b      	strh	r3, [r7, #10]
 8012962:	4613      	mov	r3, r2
 8012964:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012966:	897a      	ldrh	r2, [r7, #10]
 8012968:	893b      	ldrh	r3, [r7, #8]
 801296a:	4413      	add	r3, r2
 801296c:	b29b      	uxth	r3, r3
 801296e:	3314      	adds	r3, #20
 8012970:	b29b      	uxth	r3, r3
 8012972:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012976:	4619      	mov	r1, r3
 8012978:	2022      	movs	r0, #34	; 0x22
 801297a:	f7fa fc11 	bl	800d1a0 <pbuf_alloc>
 801297e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8012980:	697b      	ldr	r3, [r7, #20]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d04d      	beq.n	8012a22 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012986:	897b      	ldrh	r3, [r7, #10]
 8012988:	3313      	adds	r3, #19
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	8952      	ldrh	r2, [r2, #10]
 801298e:	4293      	cmp	r3, r2
 8012990:	db06      	blt.n	80129a0 <tcp_output_alloc_header_common+0x4c>
 8012992:	4b26      	ldr	r3, [pc, #152]	; (8012a2c <tcp_output_alloc_header_common+0xd8>)
 8012994:	f240 7223 	movw	r2, #1827	; 0x723
 8012998:	4925      	ldr	r1, [pc, #148]	; (8012a30 <tcp_output_alloc_header_common+0xdc>)
 801299a:	4826      	ldr	r0, [pc, #152]	; (8012a34 <tcp_output_alloc_header_common+0xe0>)
 801299c:	f003 fa28 	bl	8015df0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80129a0:	697b      	ldr	r3, [r7, #20]
 80129a2:	685b      	ldr	r3, [r3, #4]
 80129a4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80129a6:	8c3b      	ldrh	r3, [r7, #32]
 80129a8:	4618      	mov	r0, r3
 80129aa:	f7f9 fb31 	bl	800c010 <lwip_htons>
 80129ae:	4603      	mov	r3, r0
 80129b0:	461a      	mov	r2, r3
 80129b2:	693b      	ldr	r3, [r7, #16]
 80129b4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80129b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80129b8:	4618      	mov	r0, r3
 80129ba:	f7f9 fb29 	bl	800c010 <lwip_htons>
 80129be:	4603      	mov	r3, r0
 80129c0:	461a      	mov	r2, r3
 80129c2:	693b      	ldr	r3, [r7, #16]
 80129c4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80129c6:	693b      	ldr	r3, [r7, #16]
 80129c8:	687a      	ldr	r2, [r7, #4]
 80129ca:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80129cc:	68f8      	ldr	r0, [r7, #12]
 80129ce:	f7f9 fb34 	bl	800c03a <lwip_htonl>
 80129d2:	4602      	mov	r2, r0
 80129d4:	693b      	ldr	r3, [r7, #16]
 80129d6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80129d8:	897b      	ldrh	r3, [r7, #10]
 80129da:	089b      	lsrs	r3, r3, #2
 80129dc:	b29b      	uxth	r3, r3
 80129de:	3305      	adds	r3, #5
 80129e0:	b29b      	uxth	r3, r3
 80129e2:	031b      	lsls	r3, r3, #12
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80129ea:	b29b      	uxth	r3, r3
 80129ec:	4313      	orrs	r3, r2
 80129ee:	b29b      	uxth	r3, r3
 80129f0:	4618      	mov	r0, r3
 80129f2:	f7f9 fb0d 	bl	800c010 <lwip_htons>
 80129f6:	4603      	mov	r3, r0
 80129f8:	461a      	mov	r2, r3
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80129fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f9 fb05 	bl	800c010 <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	461a      	mov	r2, r3
 8012a0a:	693b      	ldr	r3, [r7, #16]
 8012a0c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	2200      	movs	r2, #0
 8012a12:	741a      	strb	r2, [r3, #16]
 8012a14:	2200      	movs	r2, #0
 8012a16:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012a18:	693b      	ldr	r3, [r7, #16]
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	749a      	strb	r2, [r3, #18]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8012a22:	697b      	ldr	r3, [r7, #20]
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3718      	adds	r7, #24
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}
 8012a2c:	080186c8 	.word	0x080186c8
 8012a30:	08018da0 	.word	0x08018da0
 8012a34:	0801871c 	.word	0x0801871c

08012a38 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012a38:	b5b0      	push	{r4, r5, r7, lr}
 8012a3a:	b08a      	sub	sp, #40	; 0x28
 8012a3c:	af04      	add	r7, sp, #16
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	607b      	str	r3, [r7, #4]
 8012a42:	460b      	mov	r3, r1
 8012a44:	817b      	strh	r3, [r7, #10]
 8012a46:	4613      	mov	r3, r2
 8012a48:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d106      	bne.n	8012a5e <tcp_output_alloc_header+0x26>
 8012a50:	4b15      	ldr	r3, [pc, #84]	; (8012aa8 <tcp_output_alloc_header+0x70>)
 8012a52:	f240 7242 	movw	r2, #1858	; 0x742
 8012a56:	4915      	ldr	r1, [pc, #84]	; (8012aac <tcp_output_alloc_header+0x74>)
 8012a58:	4815      	ldr	r0, [pc, #84]	; (8012ab0 <tcp_output_alloc_header+0x78>)
 8012a5a:	f003 f9c9 	bl	8015df0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8012a5e:	68fb      	ldr	r3, [r7, #12]
 8012a60:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	8adb      	ldrh	r3, [r3, #22]
 8012a66:	68fa      	ldr	r2, [r7, #12]
 8012a68:	8b12      	ldrh	r2, [r2, #24]
 8012a6a:	68f9      	ldr	r1, [r7, #12]
 8012a6c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8012a6e:	893d      	ldrh	r5, [r7, #8]
 8012a70:	897c      	ldrh	r4, [r7, #10]
 8012a72:	9103      	str	r1, [sp, #12]
 8012a74:	2110      	movs	r1, #16
 8012a76:	9102      	str	r1, [sp, #8]
 8012a78:	9201      	str	r2, [sp, #4]
 8012a7a:	9300      	str	r3, [sp, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	462a      	mov	r2, r5
 8012a80:	4621      	mov	r1, r4
 8012a82:	f7ff ff67 	bl	8012954 <tcp_output_alloc_header_common>
 8012a86:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a92:	68fa      	ldr	r2, [r7, #12]
 8012a94:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012a96:	441a      	add	r2, r3
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012a9c:	697b      	ldr	r3, [r7, #20]
}
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	3718      	adds	r7, #24
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8012aa6:	bf00      	nop
 8012aa8:	080186c8 	.word	0x080186c8
 8012aac:	08018dd0 	.word	0x08018dd0
 8012ab0:	0801871c 	.word	0x0801871c

08012ab4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	4611      	mov	r1, r2
 8012ac0:	461a      	mov	r2, r3
 8012ac2:	460b      	mov	r3, r1
 8012ac4:	71fb      	strb	r3, [r7, #7]
 8012ac6:	4613      	mov	r3, r2
 8012ac8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8012aca:	2300      	movs	r3, #0
 8012acc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d106      	bne.n	8012ae2 <tcp_output_fill_options+0x2e>
 8012ad4:	4b13      	ldr	r3, [pc, #76]	; (8012b24 <tcp_output_fill_options+0x70>)
 8012ad6:	f240 7256 	movw	r2, #1878	; 0x756
 8012ada:	4913      	ldr	r1, [pc, #76]	; (8012b28 <tcp_output_fill_options+0x74>)
 8012adc:	4813      	ldr	r0, [pc, #76]	; (8012b2c <tcp_output_fill_options+0x78>)
 8012ade:	f003 f987 	bl	8015df0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	685b      	ldr	r3, [r3, #4]
 8012ae6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8012ae8:	69bb      	ldr	r3, [r7, #24]
 8012aea:	3314      	adds	r3, #20
 8012aec:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	f103 0214 	add.w	r2, r3, #20
 8012af4:	8bfb      	ldrh	r3, [r7, #30]
 8012af6:	009b      	lsls	r3, r3, #2
 8012af8:	4619      	mov	r1, r3
 8012afa:	79fb      	ldrb	r3, [r7, #7]
 8012afc:	009b      	lsls	r3, r3, #2
 8012afe:	f003 0304 	and.w	r3, r3, #4
 8012b02:	440b      	add	r3, r1
 8012b04:	4413      	add	r3, r2
 8012b06:	697a      	ldr	r2, [r7, #20]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d006      	beq.n	8012b1a <tcp_output_fill_options+0x66>
 8012b0c:	4b05      	ldr	r3, [pc, #20]	; (8012b24 <tcp_output_fill_options+0x70>)
 8012b0e:	f240 7275 	movw	r2, #1909	; 0x775
 8012b12:	4907      	ldr	r1, [pc, #28]	; (8012b30 <tcp_output_fill_options+0x7c>)
 8012b14:	4805      	ldr	r0, [pc, #20]	; (8012b2c <tcp_output_fill_options+0x78>)
 8012b16:	f003 f96b 	bl	8015df0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012b1a:	bf00      	nop
 8012b1c:	3720      	adds	r7, #32
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	080186c8 	.word	0x080186c8
 8012b28:	08018df8 	.word	0x08018df8
 8012b2c:	0801871c 	.word	0x0801871c
 8012b30:	08018cf0 	.word	0x08018cf0

08012b34 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b08a      	sub	sp, #40	; 0x28
 8012b38:	af04      	add	r7, sp, #16
 8012b3a:	60f8      	str	r0, [r7, #12]
 8012b3c:	60b9      	str	r1, [r7, #8]
 8012b3e:	607a      	str	r2, [r7, #4]
 8012b40:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d106      	bne.n	8012b56 <tcp_output_control_segment+0x22>
 8012b48:	4b1c      	ldr	r3, [pc, #112]	; (8012bbc <tcp_output_control_segment+0x88>)
 8012b4a:	f240 7287 	movw	r2, #1927	; 0x787
 8012b4e:	491c      	ldr	r1, [pc, #112]	; (8012bc0 <tcp_output_control_segment+0x8c>)
 8012b50:	481c      	ldr	r0, [pc, #112]	; (8012bc4 <tcp_output_control_segment+0x90>)
 8012b52:	f003 f94d 	bl	8015df0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012b56:	683a      	ldr	r2, [r7, #0]
 8012b58:	6879      	ldr	r1, [r7, #4]
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f7fe ff40 	bl	80119e0 <tcp_route>
 8012b60:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8012b62:	693b      	ldr	r3, [r7, #16]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d102      	bne.n	8012b6e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012b68:	23fc      	movs	r3, #252	; 0xfc
 8012b6a:	75fb      	strb	r3, [r7, #23]
 8012b6c:	e01c      	b.n	8012ba8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8012b6e:	68fb      	ldr	r3, [r7, #12]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d006      	beq.n	8012b82 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	7adb      	ldrb	r3, [r3, #11]
 8012b78:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	7a9b      	ldrb	r3, [r3, #10]
 8012b7e:	757b      	strb	r3, [r7, #21]
 8012b80:	e003      	b.n	8012b8a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8012b82:	23ff      	movs	r3, #255	; 0xff
 8012b84:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012b86:	2300      	movs	r3, #0
 8012b88:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012b8a:	7dba      	ldrb	r2, [r7, #22]
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	9302      	str	r3, [sp, #8]
 8012b90:	2306      	movs	r3, #6
 8012b92:	9301      	str	r3, [sp, #4]
 8012b94:	7d7b      	ldrb	r3, [r7, #21]
 8012b96:	9300      	str	r3, [sp, #0]
 8012b98:	4613      	mov	r3, r2
 8012b9a:	683a      	ldr	r2, [r7, #0]
 8012b9c:	6879      	ldr	r1, [r7, #4]
 8012b9e:	68b8      	ldr	r0, [r7, #8]
 8012ba0:	f001 ffa0 	bl	8014ae4 <ip4_output_if>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8012ba8:	68b8      	ldr	r0, [r7, #8]
 8012baa:	f7fa fddd 	bl	800d768 <pbuf_free>
  return err;
 8012bae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	3718      	adds	r7, #24
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bd80      	pop	{r7, pc}
 8012bba:	bf00      	nop
 8012bbc:	080186c8 	.word	0x080186c8
 8012bc0:	08018e20 	.word	0x08018e20
 8012bc4:	0801871c 	.word	0x0801871c

08012bc8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8012bc8:	b590      	push	{r4, r7, lr}
 8012bca:	b08b      	sub	sp, #44	; 0x2c
 8012bcc:	af04      	add	r7, sp, #16
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	607a      	str	r2, [r7, #4]
 8012bd4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d106      	bne.n	8012bea <tcp_rst+0x22>
 8012bdc:	4b1f      	ldr	r3, [pc, #124]	; (8012c5c <tcp_rst+0x94>)
 8012bde:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8012be2:	491f      	ldr	r1, [pc, #124]	; (8012c60 <tcp_rst+0x98>)
 8012be4:	481f      	ldr	r0, [pc, #124]	; (8012c64 <tcp_rst+0x9c>)
 8012be6:	f003 f903 	bl	8015df0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8012bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d106      	bne.n	8012bfe <tcp_rst+0x36>
 8012bf0:	4b1a      	ldr	r3, [pc, #104]	; (8012c5c <tcp_rst+0x94>)
 8012bf2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8012bf6:	491c      	ldr	r1, [pc, #112]	; (8012c68 <tcp_rst+0xa0>)
 8012bf8:	481a      	ldr	r0, [pc, #104]	; (8012c64 <tcp_rst+0x9c>)
 8012bfa:	f003 f8f9 	bl	8015df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012bfe:	2300      	movs	r3, #0
 8012c00:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8012c02:	f246 0308 	movw	r3, #24584	; 0x6008
 8012c06:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012c08:	7dfb      	ldrb	r3, [r7, #23]
 8012c0a:	b29c      	uxth	r4, r3
 8012c0c:	68b8      	ldr	r0, [r7, #8]
 8012c0e:	f7f9 fa14 	bl	800c03a <lwip_htonl>
 8012c12:	4602      	mov	r2, r0
 8012c14:	8abb      	ldrh	r3, [r7, #20]
 8012c16:	9303      	str	r3, [sp, #12]
 8012c18:	2314      	movs	r3, #20
 8012c1a:	9302      	str	r3, [sp, #8]
 8012c1c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8012c1e:	9301      	str	r3, [sp, #4]
 8012c20:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012c22:	9300      	str	r3, [sp, #0]
 8012c24:	4613      	mov	r3, r2
 8012c26:	2200      	movs	r2, #0
 8012c28:	4621      	mov	r1, r4
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f7ff fe92 	bl	8012954 <tcp_output_alloc_header_common>
 8012c30:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d00c      	beq.n	8012c52 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012c38:	7dfb      	ldrb	r3, [r7, #23]
 8012c3a:	2200      	movs	r2, #0
 8012c3c:	6939      	ldr	r1, [r7, #16]
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f7ff ff38 	bl	8012ab4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c46:	683a      	ldr	r2, [r7, #0]
 8012c48:	6939      	ldr	r1, [r7, #16]
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff ff72 	bl	8012b34 <tcp_output_control_segment>
 8012c50:	e000      	b.n	8012c54 <tcp_rst+0x8c>
    return;
 8012c52:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012c54:	371c      	adds	r7, #28
 8012c56:	46bd      	mov	sp, r7
 8012c58:	bd90      	pop	{r4, r7, pc}
 8012c5a:	bf00      	nop
 8012c5c:	080186c8 	.word	0x080186c8
 8012c60:	08018e4c 	.word	0x08018e4c
 8012c64:	0801871c 	.word	0x0801871c
 8012c68:	08018e68 	.word	0x08018e68

08012c6c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012c6c:	b590      	push	{r4, r7, lr}
 8012c6e:	b087      	sub	sp, #28
 8012c70:	af00      	add	r7, sp, #0
 8012c72:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012c74:	2300      	movs	r3, #0
 8012c76:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d106      	bne.n	8012c90 <tcp_send_empty_ack+0x24>
 8012c82:	4b28      	ldr	r3, [pc, #160]	; (8012d24 <tcp_send_empty_ack+0xb8>)
 8012c84:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012c88:	4927      	ldr	r1, [pc, #156]	; (8012d28 <tcp_send_empty_ack+0xbc>)
 8012c8a:	4828      	ldr	r0, [pc, #160]	; (8012d2c <tcp_send_empty_ack+0xc0>)
 8012c8c:	f003 f8b0 	bl	8015df0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8012c90:	7dfb      	ldrb	r3, [r7, #23]
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	f003 0304 	and.w	r3, r3, #4
 8012c9a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012c9c:	7d7b      	ldrb	r3, [r7, #21]
 8012c9e:	b29c      	uxth	r4, r3
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ca4:	4618      	mov	r0, r3
 8012ca6:	f7f9 f9c8 	bl	800c03a <lwip_htonl>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2200      	movs	r2, #0
 8012cae:	4621      	mov	r1, r4
 8012cb0:	6878      	ldr	r0, [r7, #4]
 8012cb2:	f7ff fec1 	bl	8012a38 <tcp_output_alloc_header>
 8012cb6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d109      	bne.n	8012cd2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	8b5b      	ldrh	r3, [r3, #26]
 8012cc2:	f043 0303 	orr.w	r3, r3, #3
 8012cc6:	b29a      	uxth	r2, r3
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8012ccc:	f06f 0301 	mvn.w	r3, #1
 8012cd0:	e023      	b.n	8012d1a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8012cd2:	7dbb      	ldrb	r3, [r7, #22]
 8012cd4:	7dfa      	ldrb	r2, [r7, #23]
 8012cd6:	6939      	ldr	r1, [r7, #16]
 8012cd8:	6878      	ldr	r0, [r7, #4]
 8012cda:	f7ff feeb 	bl	8012ab4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012cde:	687a      	ldr	r2, [r7, #4]
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	6939      	ldr	r1, [r7, #16]
 8012ce6:	6878      	ldr	r0, [r7, #4]
 8012ce8:	f7ff ff24 	bl	8012b34 <tcp_output_control_segment>
 8012cec:	4603      	mov	r3, r0
 8012cee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8012cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d007      	beq.n	8012d08 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	8b5b      	ldrh	r3, [r3, #26]
 8012cfc:	f043 0303 	orr.w	r3, r3, #3
 8012d00:	b29a      	uxth	r2, r3
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	835a      	strh	r2, [r3, #26]
 8012d06:	e006      	b.n	8012d16 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	8b5b      	ldrh	r3, [r3, #26]
 8012d0c:	f023 0303 	bic.w	r3, r3, #3
 8012d10:	b29a      	uxth	r2, r3
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d1a:	4618      	mov	r0, r3
 8012d1c:	371c      	adds	r7, #28
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd90      	pop	{r4, r7, pc}
 8012d22:	bf00      	nop
 8012d24:	080186c8 	.word	0x080186c8
 8012d28:	08018e84 	.word	0x08018e84
 8012d2c:	0801871c 	.word	0x0801871c

08012d30 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012d30:	b590      	push	{r4, r7, lr}
 8012d32:	b087      	sub	sp, #28
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012d38:	2300      	movs	r3, #0
 8012d3a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d106      	bne.n	8012d50 <tcp_keepalive+0x20>
 8012d42:	4b18      	ldr	r3, [pc, #96]	; (8012da4 <tcp_keepalive+0x74>)
 8012d44:	f640 0224 	movw	r2, #2084	; 0x824
 8012d48:	4917      	ldr	r1, [pc, #92]	; (8012da8 <tcp_keepalive+0x78>)
 8012d4a:	4818      	ldr	r0, [pc, #96]	; (8012dac <tcp_keepalive+0x7c>)
 8012d4c:	f003 f850 	bl	8015df0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012d50:	7dfb      	ldrb	r3, [r7, #23]
 8012d52:	b29c      	uxth	r4, r3
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012d58:	3b01      	subs	r3, #1
 8012d5a:	4618      	mov	r0, r3
 8012d5c:	f7f9 f96d 	bl	800c03a <lwip_htonl>
 8012d60:	4603      	mov	r3, r0
 8012d62:	2200      	movs	r2, #0
 8012d64:	4621      	mov	r1, r4
 8012d66:	6878      	ldr	r0, [r7, #4]
 8012d68:	f7ff fe66 	bl	8012a38 <tcp_output_alloc_header>
 8012d6c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012d6e:	693b      	ldr	r3, [r7, #16]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d102      	bne.n	8012d7a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012d74:	f04f 33ff 	mov.w	r3, #4294967295
 8012d78:	e010      	b.n	8012d9c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012d7a:	7dfb      	ldrb	r3, [r7, #23]
 8012d7c:	2200      	movs	r2, #0
 8012d7e:	6939      	ldr	r1, [r7, #16]
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f7ff fe97 	bl	8012ab4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012d86:	687a      	ldr	r2, [r7, #4]
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	3304      	adds	r3, #4
 8012d8c:	6939      	ldr	r1, [r7, #16]
 8012d8e:	6878      	ldr	r0, [r7, #4]
 8012d90:	f7ff fed0 	bl	8012b34 <tcp_output_control_segment>
 8012d94:	4603      	mov	r3, r0
 8012d96:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012d98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	371c      	adds	r7, #28
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd90      	pop	{r4, r7, pc}
 8012da4:	080186c8 	.word	0x080186c8
 8012da8:	08018ea4 	.word	0x08018ea4
 8012dac:	0801871c 	.word	0x0801871c

08012db0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012db0:	b590      	push	{r4, r7, lr}
 8012db2:	b08b      	sub	sp, #44	; 0x2c
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012db8:	2300      	movs	r3, #0
 8012dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d106      	bne.n	8012dd2 <tcp_zero_window_probe+0x22>
 8012dc4:	4b4c      	ldr	r3, [pc, #304]	; (8012ef8 <tcp_zero_window_probe+0x148>)
 8012dc6:	f640 024f 	movw	r2, #2127	; 0x84f
 8012dca:	494c      	ldr	r1, [pc, #304]	; (8012efc <tcp_zero_window_probe+0x14c>)
 8012dcc:	484c      	ldr	r0, [pc, #304]	; (8012f00 <tcp_zero_window_probe+0x150>)
 8012dce:	f003 f80f 	bl	8015df0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012dd6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8012dd8:	6a3b      	ldr	r3, [r7, #32]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d101      	bne.n	8012de2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8012dde:	2300      	movs	r3, #0
 8012de0:	e086      	b.n	8012ef0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012de8:	2bff      	cmp	r3, #255	; 0xff
 8012dea:	d007      	beq.n	8012dfc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012df2:	3301      	adds	r3, #1
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012dfc:	6a3b      	ldr	r3, [r7, #32]
 8012dfe:	68db      	ldr	r3, [r3, #12]
 8012e00:	899b      	ldrh	r3, [r3, #12]
 8012e02:	b29b      	uxth	r3, r3
 8012e04:	4618      	mov	r0, r3
 8012e06:	f7f9 f903 	bl	800c010 <lwip_htons>
 8012e0a:	4603      	mov	r3, r0
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	f003 0301 	and.w	r3, r3, #1
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d005      	beq.n	8012e22 <tcp_zero_window_probe+0x72>
 8012e16:	6a3b      	ldr	r3, [r7, #32]
 8012e18:	891b      	ldrh	r3, [r3, #8]
 8012e1a:	2b00      	cmp	r3, #0
 8012e1c:	d101      	bne.n	8012e22 <tcp_zero_window_probe+0x72>
 8012e1e:	2301      	movs	r3, #1
 8012e20:	e000      	b.n	8012e24 <tcp_zero_window_probe+0x74>
 8012e22:	2300      	movs	r3, #0
 8012e24:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012e26:	7ffb      	ldrb	r3, [r7, #31]
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	bf0c      	ite	eq
 8012e2c:	2301      	moveq	r3, #1
 8012e2e:	2300      	movne	r3, #0
 8012e30:	b2db      	uxtb	r3, r3
 8012e32:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012e38:	b299      	uxth	r1, r3
 8012e3a:	6a3b      	ldr	r3, [r7, #32]
 8012e3c:	68db      	ldr	r3, [r3, #12]
 8012e3e:	685b      	ldr	r3, [r3, #4]
 8012e40:	8bba      	ldrh	r2, [r7, #28]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f7ff fdf8 	bl	8012a38 <tcp_output_alloc_header>
 8012e48:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012e4a:	69bb      	ldr	r3, [r7, #24]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d102      	bne.n	8012e56 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012e50:	f04f 33ff 	mov.w	r3, #4294967295
 8012e54:	e04c      	b.n	8012ef0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012e56:	69bb      	ldr	r3, [r7, #24]
 8012e58:	685b      	ldr	r3, [r3, #4]
 8012e5a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012e5c:	7ffb      	ldrb	r3, [r7, #31]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d011      	beq.n	8012e86 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	899b      	ldrh	r3, [r3, #12]
 8012e66:	b29b      	uxth	r3, r3
 8012e68:	b21b      	sxth	r3, r3
 8012e6a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012e6e:	b21c      	sxth	r4, r3
 8012e70:	2011      	movs	r0, #17
 8012e72:	f7f9 f8cd 	bl	800c010 <lwip_htons>
 8012e76:	4603      	mov	r3, r0
 8012e78:	b21b      	sxth	r3, r3
 8012e7a:	4323      	orrs	r3, r4
 8012e7c:	b21b      	sxth	r3, r3
 8012e7e:	b29a      	uxth	r2, r3
 8012e80:	697b      	ldr	r3, [r7, #20]
 8012e82:	819a      	strh	r2, [r3, #12]
 8012e84:	e010      	b.n	8012ea8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	685b      	ldr	r3, [r3, #4]
 8012e8a:	3314      	adds	r3, #20
 8012e8c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012e8e:	6a3b      	ldr	r3, [r7, #32]
 8012e90:	6858      	ldr	r0, [r3, #4]
 8012e92:	6a3b      	ldr	r3, [r7, #32]
 8012e94:	685b      	ldr	r3, [r3, #4]
 8012e96:	891a      	ldrh	r2, [r3, #8]
 8012e98:	6a3b      	ldr	r3, [r7, #32]
 8012e9a:	891b      	ldrh	r3, [r3, #8]
 8012e9c:	1ad3      	subs	r3, r2, r3
 8012e9e:	b29b      	uxth	r3, r3
 8012ea0:	2201      	movs	r2, #1
 8012ea2:	6939      	ldr	r1, [r7, #16]
 8012ea4:	f7fa fe56 	bl	800db54 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012ea8:	6a3b      	ldr	r3, [r7, #32]
 8012eaa:	68db      	ldr	r3, [r3, #12]
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f7f9 f8c3 	bl	800c03a <lwip_htonl>
 8012eb4:	4603      	mov	r3, r0
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	da02      	bge.n	8012ecc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	68fa      	ldr	r2, [r7, #12]
 8012eca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ecc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	69b9      	ldr	r1, [r7, #24]
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f7ff fded 	bl	8012ab4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012eda:	687a      	ldr	r2, [r7, #4]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	3304      	adds	r3, #4
 8012ee0:	69b9      	ldr	r1, [r7, #24]
 8012ee2:	6878      	ldr	r0, [r7, #4]
 8012ee4:	f7ff fe26 	bl	8012b34 <tcp_output_control_segment>
 8012ee8:	4603      	mov	r3, r0
 8012eea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012eec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	372c      	adds	r7, #44	; 0x2c
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd90      	pop	{r4, r7, pc}
 8012ef8:	080186c8 	.word	0x080186c8
 8012efc:	08018ec0 	.word	0x08018ec0
 8012f00:	0801871c 	.word	0x0801871c

08012f04 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012f04:	b580      	push	{r7, lr}
 8012f06:	b082      	sub	sp, #8
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012f0c:	f7fa ff10 	bl	800dd30 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012f10:	4b0a      	ldr	r3, [pc, #40]	; (8012f3c <tcpip_tcp_timer+0x38>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d103      	bne.n	8012f20 <tcpip_tcp_timer+0x1c>
 8012f18:	4b09      	ldr	r3, [pc, #36]	; (8012f40 <tcpip_tcp_timer+0x3c>)
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d005      	beq.n	8012f2c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f20:	2200      	movs	r2, #0
 8012f22:	4908      	ldr	r1, [pc, #32]	; (8012f44 <tcpip_tcp_timer+0x40>)
 8012f24:	20fa      	movs	r0, #250	; 0xfa
 8012f26:	f000 f8f3 	bl	8013110 <sys_timeout>
 8012f2a:	e003      	b.n	8012f34 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012f2c:	4b06      	ldr	r3, [pc, #24]	; (8012f48 <tcpip_tcp_timer+0x44>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
  }
}
 8012f32:	bf00      	nop
 8012f34:	bf00      	nop
 8012f36:	3708      	adds	r7, #8
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	2000c930 	.word	0x2000c930
 8012f40:	2000c940 	.word	0x2000c940
 8012f44:	08012f05 	.word	0x08012f05
 8012f48:	20004628 	.word	0x20004628

08012f4c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012f4c:	b580      	push	{r7, lr}
 8012f4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012f50:	4b0a      	ldr	r3, [pc, #40]	; (8012f7c <tcp_timer_needed+0x30>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d10f      	bne.n	8012f78 <tcp_timer_needed+0x2c>
 8012f58:	4b09      	ldr	r3, [pc, #36]	; (8012f80 <tcp_timer_needed+0x34>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d103      	bne.n	8012f68 <tcp_timer_needed+0x1c>
 8012f60:	4b08      	ldr	r3, [pc, #32]	; (8012f84 <tcp_timer_needed+0x38>)
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d007      	beq.n	8012f78 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012f68:	4b04      	ldr	r3, [pc, #16]	; (8012f7c <tcp_timer_needed+0x30>)
 8012f6a:	2201      	movs	r2, #1
 8012f6c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012f6e:	2200      	movs	r2, #0
 8012f70:	4905      	ldr	r1, [pc, #20]	; (8012f88 <tcp_timer_needed+0x3c>)
 8012f72:	20fa      	movs	r0, #250	; 0xfa
 8012f74:	f000 f8cc 	bl	8013110 <sys_timeout>
  }
}
 8012f78:	bf00      	nop
 8012f7a:	bd80      	pop	{r7, pc}
 8012f7c:	20004628 	.word	0x20004628
 8012f80:	2000c930 	.word	0x2000c930
 8012f84:	2000c940 	.word	0x2000c940
 8012f88:	08012f05 	.word	0x08012f05

08012f8c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012f98:	200a      	movs	r0, #10
 8012f9a:	f7f9 fcef 	bl	800c97c <memp_malloc>
 8012f9e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	2b00      	cmp	r3, #0
 8012fa4:	d109      	bne.n	8012fba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d151      	bne.n	8013050 <sys_timeout_abs+0xc4>
 8012fac:	4b2a      	ldr	r3, [pc, #168]	; (8013058 <sys_timeout_abs+0xcc>)
 8012fae:	22be      	movs	r2, #190	; 0xbe
 8012fb0:	492a      	ldr	r1, [pc, #168]	; (801305c <sys_timeout_abs+0xd0>)
 8012fb2:	482b      	ldr	r0, [pc, #172]	; (8013060 <sys_timeout_abs+0xd4>)
 8012fb4:	f002 ff1c 	bl	8015df0 <iprintf>
    return;
 8012fb8:	e04a      	b.n	8013050 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	68ba      	ldr	r2, [r7, #8]
 8012fc4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012fc6:	693b      	ldr	r3, [r7, #16]
 8012fc8:	687a      	ldr	r2, [r7, #4]
 8012fca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012fcc:	693b      	ldr	r3, [r7, #16]
 8012fce:	68fa      	ldr	r2, [r7, #12]
 8012fd0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012fd2:	4b24      	ldr	r3, [pc, #144]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	d103      	bne.n	8012fe2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012fda:	4a22      	ldr	r2, [pc, #136]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fdc:	693b      	ldr	r3, [r7, #16]
 8012fde:	6013      	str	r3, [r2, #0]
    return;
 8012fe0:	e037      	b.n	8013052 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012fe2:	693b      	ldr	r3, [r7, #16]
 8012fe4:	685a      	ldr	r2, [r3, #4]
 8012fe6:	4b1f      	ldr	r3, [pc, #124]	; (8013064 <sys_timeout_abs+0xd8>)
 8012fe8:	681b      	ldr	r3, [r3, #0]
 8012fea:	685b      	ldr	r3, [r3, #4]
 8012fec:	1ad3      	subs	r3, r2, r3
 8012fee:	0fdb      	lsrs	r3, r3, #31
 8012ff0:	f003 0301 	and.w	r3, r3, #1
 8012ff4:	b2db      	uxtb	r3, r3
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d007      	beq.n	801300a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012ffa:	4b1a      	ldr	r3, [pc, #104]	; (8013064 <sys_timeout_abs+0xd8>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	693b      	ldr	r3, [r7, #16]
 8013000:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013002:	4a18      	ldr	r2, [pc, #96]	; (8013064 <sys_timeout_abs+0xd8>)
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	6013      	str	r3, [r2, #0]
 8013008:	e023      	b.n	8013052 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801300a:	4b16      	ldr	r3, [pc, #88]	; (8013064 <sys_timeout_abs+0xd8>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	617b      	str	r3, [r7, #20]
 8013010:	e01a      	b.n	8013048 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	2b00      	cmp	r3, #0
 8013018:	d00b      	beq.n	8013032 <sys_timeout_abs+0xa6>
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	685a      	ldr	r2, [r3, #4]
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	685b      	ldr	r3, [r3, #4]
 8013024:	1ad3      	subs	r3, r2, r3
 8013026:	0fdb      	lsrs	r3, r3, #31
 8013028:	f003 0301 	and.w	r3, r3, #1
 801302c:	b2db      	uxtb	r3, r3
 801302e:	2b00      	cmp	r3, #0
 8013030:	d007      	beq.n	8013042 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	681a      	ldr	r2, [r3, #0]
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801303a:	697b      	ldr	r3, [r7, #20]
 801303c:	693a      	ldr	r2, [r7, #16]
 801303e:	601a      	str	r2, [r3, #0]
        break;
 8013040:	e007      	b.n	8013052 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013042:	697b      	ldr	r3, [r7, #20]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	617b      	str	r3, [r7, #20]
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	2b00      	cmp	r3, #0
 801304c:	d1e1      	bne.n	8013012 <sys_timeout_abs+0x86>
 801304e:	e000      	b.n	8013052 <sys_timeout_abs+0xc6>
    return;
 8013050:	bf00      	nop
      }
    }
  }
}
 8013052:	3718      	adds	r7, #24
 8013054:	46bd      	mov	sp, r7
 8013056:	bd80      	pop	{r7, pc}
 8013058:	08018ee4 	.word	0x08018ee4
 801305c:	08018f18 	.word	0x08018f18
 8013060:	08018f58 	.word	0x08018f58
 8013064:	20004620 	.word	0x20004620

08013068 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b086      	sub	sp, #24
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	685b      	ldr	r3, [r3, #4]
 8013078:	4798      	blx	r3

  now = sys_now();
 801307a:	f7f5 fa27 	bl	80084cc <sys_now>
 801307e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	4b0f      	ldr	r3, [pc, #60]	; (80130c4 <lwip_cyclic_timer+0x5c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4413      	add	r3, r2
 801308a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801308c:	68fa      	ldr	r2, [r7, #12]
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	1ad3      	subs	r3, r2, r3
 8013092:	0fdb      	lsrs	r3, r3, #31
 8013094:	f003 0301 	and.w	r3, r3, #1
 8013098:	b2db      	uxtb	r3, r3
 801309a:	2b00      	cmp	r3, #0
 801309c:	d009      	beq.n	80130b2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	693b      	ldr	r3, [r7, #16]
 80130a4:	4413      	add	r3, r2
 80130a6:	687a      	ldr	r2, [r7, #4]
 80130a8:	4907      	ldr	r1, [pc, #28]	; (80130c8 <lwip_cyclic_timer+0x60>)
 80130aa:	4618      	mov	r0, r3
 80130ac:	f7ff ff6e 	bl	8012f8c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80130b0:	e004      	b.n	80130bc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4904      	ldr	r1, [pc, #16]	; (80130c8 <lwip_cyclic_timer+0x60>)
 80130b6:	68f8      	ldr	r0, [r7, #12]
 80130b8:	f7ff ff68 	bl	8012f8c <sys_timeout_abs>
}
 80130bc:	bf00      	nop
 80130be:	3718      	adds	r7, #24
 80130c0:	46bd      	mov	sp, r7
 80130c2:	bd80      	pop	{r7, pc}
 80130c4:	20004624 	.word	0x20004624
 80130c8:	08013069 	.word	0x08013069

080130cc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b082      	sub	sp, #8
 80130d0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130d2:	2301      	movs	r3, #1
 80130d4:	607b      	str	r3, [r7, #4]
 80130d6:	e00e      	b.n	80130f6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80130d8:	4a0b      	ldr	r2, [pc, #44]	; (8013108 <sys_timeouts_init+0x3c>)
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	00db      	lsls	r3, r3, #3
 80130e4:	4a08      	ldr	r2, [pc, #32]	; (8013108 <sys_timeouts_init+0x3c>)
 80130e6:	4413      	add	r3, r2
 80130e8:	461a      	mov	r2, r3
 80130ea:	4908      	ldr	r1, [pc, #32]	; (801310c <sys_timeouts_init+0x40>)
 80130ec:	f000 f810 	bl	8013110 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80130f0:	687b      	ldr	r3, [r7, #4]
 80130f2:	3301      	adds	r3, #1
 80130f4:	607b      	str	r3, [r7, #4]
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	2b02      	cmp	r3, #2
 80130fa:	d9ed      	bls.n	80130d8 <sys_timeouts_init+0xc>
  }
}
 80130fc:	bf00      	nop
 80130fe:	bf00      	nop
 8013100:	3708      	adds	r7, #8
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	08019b0c 	.word	0x08019b0c
 801310c:	08013069 	.word	0x08013069

08013110 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b086      	sub	sp, #24
 8013114:	af00      	add	r7, sp, #0
 8013116:	60f8      	str	r0, [r7, #12]
 8013118:	60b9      	str	r1, [r7, #8]
 801311a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801311c:	68fb      	ldr	r3, [r7, #12]
 801311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013122:	d306      	bcc.n	8013132 <sys_timeout+0x22>
 8013124:	4b0a      	ldr	r3, [pc, #40]	; (8013150 <sys_timeout+0x40>)
 8013126:	f240 1229 	movw	r2, #297	; 0x129
 801312a:	490a      	ldr	r1, [pc, #40]	; (8013154 <sys_timeout+0x44>)
 801312c:	480a      	ldr	r0, [pc, #40]	; (8013158 <sys_timeout+0x48>)
 801312e:	f002 fe5f 	bl	8015df0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013132:	f7f5 f9cb 	bl	80084cc <sys_now>
 8013136:	4602      	mov	r2, r0
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	4413      	add	r3, r2
 801313c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	68b9      	ldr	r1, [r7, #8]
 8013142:	6978      	ldr	r0, [r7, #20]
 8013144:	f7ff ff22 	bl	8012f8c <sys_timeout_abs>
#endif
}
 8013148:	bf00      	nop
 801314a:	3718      	adds	r7, #24
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}
 8013150:	08018ee4 	.word	0x08018ee4
 8013154:	08018f80 	.word	0x08018f80
 8013158:	08018f58 	.word	0x08018f58

0801315c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b084      	sub	sp, #16
 8013160:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013162:	f7f5 f9b3 	bl	80084cc <sys_now>
 8013166:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013168:	4b17      	ldr	r3, [pc, #92]	; (80131c8 <sys_check_timeouts+0x6c>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801316e:	68bb      	ldr	r3, [r7, #8]
 8013170:	2b00      	cmp	r3, #0
 8013172:	d022      	beq.n	80131ba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013174:	68bb      	ldr	r3, [r7, #8]
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	68fa      	ldr	r2, [r7, #12]
 801317a:	1ad3      	subs	r3, r2, r3
 801317c:	0fdb      	lsrs	r3, r3, #31
 801317e:	f003 0301 	and.w	r3, r3, #1
 8013182:	b2db      	uxtb	r3, r3
 8013184:	2b00      	cmp	r3, #0
 8013186:	d11a      	bne.n	80131be <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013188:	68bb      	ldr	r3, [r7, #8]
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	4a0e      	ldr	r2, [pc, #56]	; (80131c8 <sys_check_timeouts+0x6c>)
 801318e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	689b      	ldr	r3, [r3, #8]
 8013194:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801319c:	68bb      	ldr	r3, [r7, #8]
 801319e:	685b      	ldr	r3, [r3, #4]
 80131a0:	4a0a      	ldr	r2, [pc, #40]	; (80131cc <sys_check_timeouts+0x70>)
 80131a2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80131a4:	68b9      	ldr	r1, [r7, #8]
 80131a6:	200a      	movs	r0, #10
 80131a8:	f7f9 fc3a 	bl	800ca20 <memp_free>
    if (handler != NULL) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d0da      	beq.n	8013168 <sys_check_timeouts+0xc>
      handler(arg);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	6838      	ldr	r0, [r7, #0]
 80131b6:	4798      	blx	r3
  do {
 80131b8:	e7d6      	b.n	8013168 <sys_check_timeouts+0xc>
      return;
 80131ba:	bf00      	nop
 80131bc:	e000      	b.n	80131c0 <sys_check_timeouts+0x64>
      return;
 80131be:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80131c0:	3710      	adds	r7, #16
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}
 80131c6:	bf00      	nop
 80131c8:	20004620 	.word	0x20004620
 80131cc:	20004624 	.word	0x20004624

080131d0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80131d6:	4b16      	ldr	r3, [pc, #88]	; (8013230 <sys_timeouts_sleeptime+0x60>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d102      	bne.n	80131e4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80131de:	f04f 33ff 	mov.w	r3, #4294967295
 80131e2:	e020      	b.n	8013226 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80131e4:	f7f5 f972 	bl	80084cc <sys_now>
 80131e8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80131ea:	4b11      	ldr	r3, [pc, #68]	; (8013230 <sys_timeouts_sleeptime+0x60>)
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	685a      	ldr	r2, [r3, #4]
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	1ad3      	subs	r3, r2, r3
 80131f4:	0fdb      	lsrs	r3, r3, #31
 80131f6:	f003 0301 	and.w	r3, r3, #1
 80131fa:	b2db      	uxtb	r3, r3
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d001      	beq.n	8013204 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013200:	2300      	movs	r3, #0
 8013202:	e010      	b.n	8013226 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013204:	4b0a      	ldr	r3, [pc, #40]	; (8013230 <sys_timeouts_sleeptime+0x60>)
 8013206:	681b      	ldr	r3, [r3, #0]
 8013208:	685a      	ldr	r2, [r3, #4]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	1ad3      	subs	r3, r2, r3
 801320e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	da06      	bge.n	8013224 <sys_timeouts_sleeptime+0x54>
 8013216:	4b07      	ldr	r3, [pc, #28]	; (8013234 <sys_timeouts_sleeptime+0x64>)
 8013218:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801321c:	4906      	ldr	r1, [pc, #24]	; (8013238 <sys_timeouts_sleeptime+0x68>)
 801321e:	4807      	ldr	r0, [pc, #28]	; (801323c <sys_timeouts_sleeptime+0x6c>)
 8013220:	f002 fde6 	bl	8015df0 <iprintf>
    return ret;
 8013224:	683b      	ldr	r3, [r7, #0]
  }
}
 8013226:	4618      	mov	r0, r3
 8013228:	3708      	adds	r7, #8
 801322a:	46bd      	mov	sp, r7
 801322c:	bd80      	pop	{r7, pc}
 801322e:	bf00      	nop
 8013230:	20004620 	.word	0x20004620
 8013234:	08018ee4 	.word	0x08018ee4
 8013238:	08018fb8 	.word	0x08018fb8
 801323c:	08018f58 	.word	0x08018f58

08013240 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013240:	b580      	push	{r7, lr}
 8013242:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013244:	f002 fdec 	bl	8015e20 <rand>
 8013248:	4603      	mov	r3, r0
 801324a:	b29b      	uxth	r3, r3
 801324c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013250:	b29b      	uxth	r3, r3
 8013252:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013256:	b29a      	uxth	r2, r3
 8013258:	4b01      	ldr	r3, [pc, #4]	; (8013260 <udp_init+0x20>)
 801325a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801325c:	bf00      	nop
 801325e:	bd80      	pop	{r7, pc}
 8013260:	20000018 	.word	0x20000018

08013264 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	60f8      	str	r0, [r7, #12]
 801326c:	60b9      	str	r1, [r7, #8]
 801326e:	4613      	mov	r3, r2
 8013270:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d105      	bne.n	8013284 <udp_input_local_match+0x20>
 8013278:	4b27      	ldr	r3, [pc, #156]	; (8013318 <udp_input_local_match+0xb4>)
 801327a:	2287      	movs	r2, #135	; 0x87
 801327c:	4927      	ldr	r1, [pc, #156]	; (801331c <udp_input_local_match+0xb8>)
 801327e:	4828      	ldr	r0, [pc, #160]	; (8013320 <udp_input_local_match+0xbc>)
 8013280:	f002 fdb6 	bl	8015df0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d105      	bne.n	8013296 <udp_input_local_match+0x32>
 801328a:	4b23      	ldr	r3, [pc, #140]	; (8013318 <udp_input_local_match+0xb4>)
 801328c:	2288      	movs	r2, #136	; 0x88
 801328e:	4925      	ldr	r1, [pc, #148]	; (8013324 <udp_input_local_match+0xc0>)
 8013290:	4823      	ldr	r0, [pc, #140]	; (8013320 <udp_input_local_match+0xbc>)
 8013292:	f002 fdad 	bl	8015df0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	7a1b      	ldrb	r3, [r3, #8]
 801329a:	2b00      	cmp	r3, #0
 801329c:	d00b      	beq.n	80132b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	7a1a      	ldrb	r2, [r3, #8]
 80132a2:	4b21      	ldr	r3, [pc, #132]	; (8013328 <udp_input_local_match+0xc4>)
 80132a4:	685b      	ldr	r3, [r3, #4]
 80132a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80132aa:	3301      	adds	r3, #1
 80132ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d001      	beq.n	80132b6 <udp_input_local_match+0x52>
    return 0;
 80132b2:	2300      	movs	r3, #0
 80132b4:	e02b      	b.n	801330e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80132b6:	79fb      	ldrb	r3, [r7, #7]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d018      	beq.n	80132ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d013      	beq.n	80132ea <udp_input_local_match+0x86>
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d00f      	beq.n	80132ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132ca:	4b17      	ldr	r3, [pc, #92]	; (8013328 <udp_input_local_match+0xc4>)
 80132cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80132ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132d2:	d00a      	beq.n	80132ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	681a      	ldr	r2, [r3, #0]
 80132d8:	4b13      	ldr	r3, [pc, #76]	; (8013328 <udp_input_local_match+0xc4>)
 80132da:	695b      	ldr	r3, [r3, #20]
 80132dc:	405a      	eors	r2, r3
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	3308      	adds	r3, #8
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d110      	bne.n	801330c <udp_input_local_match+0xa8>
          return 1;
 80132ea:	2301      	movs	r3, #1
 80132ec:	e00f      	b.n	801330e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d009      	beq.n	8013308 <udp_input_local_match+0xa4>
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d005      	beq.n	8013308 <udp_input_local_match+0xa4>
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	681a      	ldr	r2, [r3, #0]
 8013300:	4b09      	ldr	r3, [pc, #36]	; (8013328 <udp_input_local_match+0xc4>)
 8013302:	695b      	ldr	r3, [r3, #20]
 8013304:	429a      	cmp	r2, r3
 8013306:	d101      	bne.n	801330c <udp_input_local_match+0xa8>
        return 1;
 8013308:	2301      	movs	r3, #1
 801330a:	e000      	b.n	801330e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801330c:	2300      	movs	r3, #0
}
 801330e:	4618      	mov	r0, r3
 8013310:	3710      	adds	r7, #16
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	08018fcc 	.word	0x08018fcc
 801331c:	08018ffc 	.word	0x08018ffc
 8013320:	08019020 	.word	0x08019020
 8013324:	08019048 	.word	0x08019048
 8013328:	2000921c 	.word	0x2000921c

0801332c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801332c:	b590      	push	{r4, r7, lr}
 801332e:	b08d      	sub	sp, #52	; 0x34
 8013330:	af02      	add	r7, sp, #8
 8013332:	6078      	str	r0, [r7, #4]
 8013334:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013336:	2300      	movs	r3, #0
 8013338:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2b00      	cmp	r3, #0
 801333e:	d105      	bne.n	801334c <udp_input+0x20>
 8013340:	4b7c      	ldr	r3, [pc, #496]	; (8013534 <udp_input+0x208>)
 8013342:	22cf      	movs	r2, #207	; 0xcf
 8013344:	497c      	ldr	r1, [pc, #496]	; (8013538 <udp_input+0x20c>)
 8013346:	487d      	ldr	r0, [pc, #500]	; (801353c <udp_input+0x210>)
 8013348:	f002 fd52 	bl	8015df0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801334c:	683b      	ldr	r3, [r7, #0]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d105      	bne.n	801335e <udp_input+0x32>
 8013352:	4b78      	ldr	r3, [pc, #480]	; (8013534 <udp_input+0x208>)
 8013354:	22d0      	movs	r2, #208	; 0xd0
 8013356:	497a      	ldr	r1, [pc, #488]	; (8013540 <udp_input+0x214>)
 8013358:	4878      	ldr	r0, [pc, #480]	; (801353c <udp_input+0x210>)
 801335a:	f002 fd49 	bl	8015df0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	895b      	ldrh	r3, [r3, #10]
 8013362:	2b07      	cmp	r3, #7
 8013364:	d803      	bhi.n	801336e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013366:	6878      	ldr	r0, [r7, #4]
 8013368:	f7fa f9fe 	bl	800d768 <pbuf_free>
    goto end;
 801336c:	e0de      	b.n	801352c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013374:	4b73      	ldr	r3, [pc, #460]	; (8013544 <udp_input+0x218>)
 8013376:	695b      	ldr	r3, [r3, #20]
 8013378:	4a72      	ldr	r2, [pc, #456]	; (8013544 <udp_input+0x218>)
 801337a:	6812      	ldr	r2, [r2, #0]
 801337c:	4611      	mov	r1, r2
 801337e:	4618      	mov	r0, r3
 8013380:	f001 fc88 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8013384:	4603      	mov	r3, r0
 8013386:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013388:	697b      	ldr	r3, [r7, #20]
 801338a:	881b      	ldrh	r3, [r3, #0]
 801338c:	b29b      	uxth	r3, r3
 801338e:	4618      	mov	r0, r3
 8013390:	f7f8 fe3e 	bl	800c010 <lwip_htons>
 8013394:	4603      	mov	r3, r0
 8013396:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013398:	697b      	ldr	r3, [r7, #20]
 801339a:	885b      	ldrh	r3, [r3, #2]
 801339c:	b29b      	uxth	r3, r3
 801339e:	4618      	mov	r0, r3
 80133a0:	f7f8 fe36 	bl	800c010 <lwip_htons>
 80133a4:	4603      	mov	r3, r0
 80133a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80133ac:	2300      	movs	r3, #0
 80133ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80133b0:	2300      	movs	r3, #0
 80133b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80133b4:	4b64      	ldr	r3, [pc, #400]	; (8013548 <udp_input+0x21c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	627b      	str	r3, [r7, #36]	; 0x24
 80133ba:	e054      	b.n	8013466 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80133bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133be:	8a5b      	ldrh	r3, [r3, #18]
 80133c0:	89fa      	ldrh	r2, [r7, #14]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d14a      	bne.n	801345c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80133c6:	7cfb      	ldrb	r3, [r7, #19]
 80133c8:	461a      	mov	r2, r3
 80133ca:	6839      	ldr	r1, [r7, #0]
 80133cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80133ce:	f7ff ff49 	bl	8013264 <udp_input_local_match>
 80133d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d041      	beq.n	801345c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80133d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133da:	7c1b      	ldrb	r3, [r3, #16]
 80133dc:	f003 0304 	and.w	r3, r3, #4
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d11d      	bne.n	8013420 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80133e4:	69fb      	ldr	r3, [r7, #28]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d102      	bne.n	80133f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80133ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133ec:	61fb      	str	r3, [r7, #28]
 80133ee:	e017      	b.n	8013420 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80133f0:	7cfb      	ldrb	r3, [r7, #19]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d014      	beq.n	8013420 <udp_input+0xf4>
 80133f6:	4b53      	ldr	r3, [pc, #332]	; (8013544 <udp_input+0x218>)
 80133f8:	695b      	ldr	r3, [r3, #20]
 80133fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fe:	d10f      	bne.n	8013420 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	681a      	ldr	r2, [r3, #0]
 8013404:	683b      	ldr	r3, [r7, #0]
 8013406:	3304      	adds	r3, #4
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	429a      	cmp	r2, r3
 801340c:	d008      	beq.n	8013420 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013410:	681a      	ldr	r2, [r3, #0]
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	3304      	adds	r3, #4
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	429a      	cmp	r2, r3
 801341a:	d101      	bne.n	8013420 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801341e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013422:	8a9b      	ldrh	r3, [r3, #20]
 8013424:	8a3a      	ldrh	r2, [r7, #16]
 8013426:	429a      	cmp	r2, r3
 8013428:	d118      	bne.n	801345c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801342e:	2b00      	cmp	r3, #0
 8013430:	d005      	beq.n	801343e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013434:	685a      	ldr	r2, [r3, #4]
 8013436:	4b43      	ldr	r3, [pc, #268]	; (8013544 <udp_input+0x218>)
 8013438:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801343a:	429a      	cmp	r2, r3
 801343c:	d10e      	bne.n	801345c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801343e:	6a3b      	ldr	r3, [r7, #32]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d014      	beq.n	801346e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013446:	68da      	ldr	r2, [r3, #12]
 8013448:	6a3b      	ldr	r3, [r7, #32]
 801344a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801344c:	4b3e      	ldr	r3, [pc, #248]	; (8013548 <udp_input+0x21c>)
 801344e:	681a      	ldr	r2, [r3, #0]
 8013450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013452:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013454:	4a3c      	ldr	r2, [pc, #240]	; (8013548 <udp_input+0x21c>)
 8013456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013458:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801345a:	e008      	b.n	801346e <udp_input+0x142>
      }
    }

    prev = pcb;
 801345c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801345e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013462:	68db      	ldr	r3, [r3, #12]
 8013464:	627b      	str	r3, [r7, #36]	; 0x24
 8013466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013468:	2b00      	cmp	r3, #0
 801346a:	d1a7      	bne.n	80133bc <udp_input+0x90>
 801346c:	e000      	b.n	8013470 <udp_input+0x144>
        break;
 801346e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013472:	2b00      	cmp	r3, #0
 8013474:	d101      	bne.n	801347a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801347a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801347c:	2b00      	cmp	r3, #0
 801347e:	d002      	beq.n	8013486 <udp_input+0x15a>
    for_us = 1;
 8013480:	2301      	movs	r3, #1
 8013482:	76fb      	strb	r3, [r7, #27]
 8013484:	e00a      	b.n	801349c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013486:	683b      	ldr	r3, [r7, #0]
 8013488:	3304      	adds	r3, #4
 801348a:	681a      	ldr	r2, [r3, #0]
 801348c:	4b2d      	ldr	r3, [pc, #180]	; (8013544 <udp_input+0x218>)
 801348e:	695b      	ldr	r3, [r3, #20]
 8013490:	429a      	cmp	r2, r3
 8013492:	bf0c      	ite	eq
 8013494:	2301      	moveq	r3, #1
 8013496:	2300      	movne	r3, #0
 8013498:	b2db      	uxtb	r3, r3
 801349a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801349c:	7efb      	ldrb	r3, [r7, #27]
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d041      	beq.n	8013526 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80134a2:	2108      	movs	r1, #8
 80134a4:	6878      	ldr	r0, [r7, #4]
 80134a6:	f7fa f8d9 	bl	800d65c <pbuf_remove_header>
 80134aa:	4603      	mov	r3, r0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d00a      	beq.n	80134c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80134b0:	4b20      	ldr	r3, [pc, #128]	; (8013534 <udp_input+0x208>)
 80134b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80134b6:	4925      	ldr	r1, [pc, #148]	; (801354c <udp_input+0x220>)
 80134b8:	4820      	ldr	r0, [pc, #128]	; (801353c <udp_input+0x210>)
 80134ba:	f002 fc99 	bl	8015df0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80134be:	6878      	ldr	r0, [r7, #4]
 80134c0:	f7fa f952 	bl	800d768 <pbuf_free>
      goto end;
 80134c4:	e032      	b.n	801352c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d012      	beq.n	80134f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80134cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ce:	699b      	ldr	r3, [r3, #24]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d00a      	beq.n	80134ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80134d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d6:	699c      	ldr	r4, [r3, #24]
 80134d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134da:	69d8      	ldr	r0, [r3, #28]
 80134dc:	8a3b      	ldrh	r3, [r7, #16]
 80134de:	9300      	str	r3, [sp, #0]
 80134e0:	4b1b      	ldr	r3, [pc, #108]	; (8013550 <udp_input+0x224>)
 80134e2:	687a      	ldr	r2, [r7, #4]
 80134e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80134e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80134e8:	e021      	b.n	801352e <udp_input+0x202>
        pbuf_free(p);
 80134ea:	6878      	ldr	r0, [r7, #4]
 80134ec:	f7fa f93c 	bl	800d768 <pbuf_free>
        goto end;
 80134f0:	e01c      	b.n	801352c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80134f2:	7cfb      	ldrb	r3, [r7, #19]
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d112      	bne.n	801351e <udp_input+0x1f2>
 80134f8:	4b12      	ldr	r3, [pc, #72]	; (8013544 <udp_input+0x218>)
 80134fa:	695b      	ldr	r3, [r3, #20]
 80134fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013500:	2be0      	cmp	r3, #224	; 0xe0
 8013502:	d00c      	beq.n	801351e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013504:	4b0f      	ldr	r3, [pc, #60]	; (8013544 <udp_input+0x218>)
 8013506:	899b      	ldrh	r3, [r3, #12]
 8013508:	3308      	adds	r3, #8
 801350a:	b29b      	uxth	r3, r3
 801350c:	b21b      	sxth	r3, r3
 801350e:	4619      	mov	r1, r3
 8013510:	6878      	ldr	r0, [r7, #4]
 8013512:	f7fa f916 	bl	800d742 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013516:	2103      	movs	r1, #3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f001 f89b 	bl	8014654 <icmp_dest_unreach>
      pbuf_free(p);
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7fa f922 	bl	800d768 <pbuf_free>
  return;
 8013524:	e003      	b.n	801352e <udp_input+0x202>
    pbuf_free(p);
 8013526:	6878      	ldr	r0, [r7, #4]
 8013528:	f7fa f91e 	bl	800d768 <pbuf_free>
  return;
 801352c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801352e:	372c      	adds	r7, #44	; 0x2c
 8013530:	46bd      	mov	sp, r7
 8013532:	bd90      	pop	{r4, r7, pc}
 8013534:	08018fcc 	.word	0x08018fcc
 8013538:	08019070 	.word	0x08019070
 801353c:	08019020 	.word	0x08019020
 8013540:	08019088 	.word	0x08019088
 8013544:	2000921c 	.word	0x2000921c
 8013548:	2000c948 	.word	0x2000c948
 801354c:	080190a4 	.word	0x080190a4
 8013550:	2000922c 	.word	0x2000922c

08013554 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013554:	b480      	push	{r7}
 8013556:	b085      	sub	sp, #20
 8013558:	af00      	add	r7, sp, #0
 801355a:	6078      	str	r0, [r7, #4]
 801355c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	2b00      	cmp	r3, #0
 8013562:	d01e      	beq.n	80135a2 <udp_netif_ip_addr_changed+0x4e>
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	2b00      	cmp	r3, #0
 801356a:	d01a      	beq.n	80135a2 <udp_netif_ip_addr_changed+0x4e>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d017      	beq.n	80135a2 <udp_netif_ip_addr_changed+0x4e>
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	681b      	ldr	r3, [r3, #0]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d013      	beq.n	80135a2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801357a:	4b0d      	ldr	r3, [pc, #52]	; (80135b0 <udp_netif_ip_addr_changed+0x5c>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	60fb      	str	r3, [r7, #12]
 8013580:	e00c      	b.n	801359c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013582:	68fb      	ldr	r3, [r7, #12]
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	681b      	ldr	r3, [r3, #0]
 801358a:	429a      	cmp	r2, r3
 801358c:	d103      	bne.n	8013596 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	681a      	ldr	r2, [r3, #0]
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	68db      	ldr	r3, [r3, #12]
 801359a:	60fb      	str	r3, [r7, #12]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d1ef      	bne.n	8013582 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80135a2:	bf00      	nop
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ac:	4770      	bx	lr
 80135ae:	bf00      	nop
 80135b0:	2000c948 	.word	0x2000c948

080135b4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b082      	sub	sp, #8
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80135bc:	4915      	ldr	r1, [pc, #84]	; (8013614 <etharp_free_entry+0x60>)
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	4613      	mov	r3, r2
 80135c2:	005b      	lsls	r3, r3, #1
 80135c4:	4413      	add	r3, r2
 80135c6:	00db      	lsls	r3, r3, #3
 80135c8:	440b      	add	r3, r1
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d013      	beq.n	80135f8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80135d0:	4910      	ldr	r1, [pc, #64]	; (8013614 <etharp_free_entry+0x60>)
 80135d2:	687a      	ldr	r2, [r7, #4]
 80135d4:	4613      	mov	r3, r2
 80135d6:	005b      	lsls	r3, r3, #1
 80135d8:	4413      	add	r3, r2
 80135da:	00db      	lsls	r3, r3, #3
 80135dc:	440b      	add	r3, r1
 80135de:	681b      	ldr	r3, [r3, #0]
 80135e0:	4618      	mov	r0, r3
 80135e2:	f7fa f8c1 	bl	800d768 <pbuf_free>
    arp_table[i].q = NULL;
 80135e6:	490b      	ldr	r1, [pc, #44]	; (8013614 <etharp_free_entry+0x60>)
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	4613      	mov	r3, r2
 80135ec:	005b      	lsls	r3, r3, #1
 80135ee:	4413      	add	r3, r2
 80135f0:	00db      	lsls	r3, r3, #3
 80135f2:	440b      	add	r3, r1
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80135f8:	4906      	ldr	r1, [pc, #24]	; (8013614 <etharp_free_entry+0x60>)
 80135fa:	687a      	ldr	r2, [r7, #4]
 80135fc:	4613      	mov	r3, r2
 80135fe:	005b      	lsls	r3, r3, #1
 8013600:	4413      	add	r3, r2
 8013602:	00db      	lsls	r3, r3, #3
 8013604:	440b      	add	r3, r1
 8013606:	3314      	adds	r3, #20
 8013608:	2200      	movs	r2, #0
 801360a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801360c:	bf00      	nop
 801360e:	3708      	adds	r7, #8
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	2000462c 	.word	0x2000462c

08013618 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b082      	sub	sp, #8
 801361c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801361e:	2300      	movs	r3, #0
 8013620:	607b      	str	r3, [r7, #4]
 8013622:	e096      	b.n	8013752 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013624:	494f      	ldr	r1, [pc, #316]	; (8013764 <etharp_tmr+0x14c>)
 8013626:	687a      	ldr	r2, [r7, #4]
 8013628:	4613      	mov	r3, r2
 801362a:	005b      	lsls	r3, r3, #1
 801362c:	4413      	add	r3, r2
 801362e:	00db      	lsls	r3, r3, #3
 8013630:	440b      	add	r3, r1
 8013632:	3314      	adds	r3, #20
 8013634:	781b      	ldrb	r3, [r3, #0]
 8013636:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013638:	78fb      	ldrb	r3, [r7, #3]
 801363a:	2b00      	cmp	r3, #0
 801363c:	f000 8086 	beq.w	801374c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013640:	4948      	ldr	r1, [pc, #288]	; (8013764 <etharp_tmr+0x14c>)
 8013642:	687a      	ldr	r2, [r7, #4]
 8013644:	4613      	mov	r3, r2
 8013646:	005b      	lsls	r3, r3, #1
 8013648:	4413      	add	r3, r2
 801364a:	00db      	lsls	r3, r3, #3
 801364c:	440b      	add	r3, r1
 801364e:	3312      	adds	r3, #18
 8013650:	881b      	ldrh	r3, [r3, #0]
 8013652:	3301      	adds	r3, #1
 8013654:	b298      	uxth	r0, r3
 8013656:	4943      	ldr	r1, [pc, #268]	; (8013764 <etharp_tmr+0x14c>)
 8013658:	687a      	ldr	r2, [r7, #4]
 801365a:	4613      	mov	r3, r2
 801365c:	005b      	lsls	r3, r3, #1
 801365e:	4413      	add	r3, r2
 8013660:	00db      	lsls	r3, r3, #3
 8013662:	440b      	add	r3, r1
 8013664:	3312      	adds	r3, #18
 8013666:	4602      	mov	r2, r0
 8013668:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801366a:	493e      	ldr	r1, [pc, #248]	; (8013764 <etharp_tmr+0x14c>)
 801366c:	687a      	ldr	r2, [r7, #4]
 801366e:	4613      	mov	r3, r2
 8013670:	005b      	lsls	r3, r3, #1
 8013672:	4413      	add	r3, r2
 8013674:	00db      	lsls	r3, r3, #3
 8013676:	440b      	add	r3, r1
 8013678:	3312      	adds	r3, #18
 801367a:	881b      	ldrh	r3, [r3, #0]
 801367c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013680:	d215      	bcs.n	80136ae <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013682:	4938      	ldr	r1, [pc, #224]	; (8013764 <etharp_tmr+0x14c>)
 8013684:	687a      	ldr	r2, [r7, #4]
 8013686:	4613      	mov	r3, r2
 8013688:	005b      	lsls	r3, r3, #1
 801368a:	4413      	add	r3, r2
 801368c:	00db      	lsls	r3, r3, #3
 801368e:	440b      	add	r3, r1
 8013690:	3314      	adds	r3, #20
 8013692:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013694:	2b01      	cmp	r3, #1
 8013696:	d10e      	bne.n	80136b6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013698:	4932      	ldr	r1, [pc, #200]	; (8013764 <etharp_tmr+0x14c>)
 801369a:	687a      	ldr	r2, [r7, #4]
 801369c:	4613      	mov	r3, r2
 801369e:	005b      	lsls	r3, r3, #1
 80136a0:	4413      	add	r3, r2
 80136a2:	00db      	lsls	r3, r3, #3
 80136a4:	440b      	add	r3, r1
 80136a6:	3312      	adds	r3, #18
 80136a8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80136aa:	2b04      	cmp	r3, #4
 80136ac:	d903      	bls.n	80136b6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f7ff ff80 	bl	80135b4 <etharp_free_entry>
 80136b4:	e04a      	b.n	801374c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80136b6:	492b      	ldr	r1, [pc, #172]	; (8013764 <etharp_tmr+0x14c>)
 80136b8:	687a      	ldr	r2, [r7, #4]
 80136ba:	4613      	mov	r3, r2
 80136bc:	005b      	lsls	r3, r3, #1
 80136be:	4413      	add	r3, r2
 80136c0:	00db      	lsls	r3, r3, #3
 80136c2:	440b      	add	r3, r1
 80136c4:	3314      	adds	r3, #20
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	2b03      	cmp	r3, #3
 80136ca:	d10a      	bne.n	80136e2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80136cc:	4925      	ldr	r1, [pc, #148]	; (8013764 <etharp_tmr+0x14c>)
 80136ce:	687a      	ldr	r2, [r7, #4]
 80136d0:	4613      	mov	r3, r2
 80136d2:	005b      	lsls	r3, r3, #1
 80136d4:	4413      	add	r3, r2
 80136d6:	00db      	lsls	r3, r3, #3
 80136d8:	440b      	add	r3, r1
 80136da:	3314      	adds	r3, #20
 80136dc:	2204      	movs	r2, #4
 80136de:	701a      	strb	r2, [r3, #0]
 80136e0:	e034      	b.n	801374c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80136e2:	4920      	ldr	r1, [pc, #128]	; (8013764 <etharp_tmr+0x14c>)
 80136e4:	687a      	ldr	r2, [r7, #4]
 80136e6:	4613      	mov	r3, r2
 80136e8:	005b      	lsls	r3, r3, #1
 80136ea:	4413      	add	r3, r2
 80136ec:	00db      	lsls	r3, r3, #3
 80136ee:	440b      	add	r3, r1
 80136f0:	3314      	adds	r3, #20
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	2b04      	cmp	r3, #4
 80136f6:	d10a      	bne.n	801370e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80136f8:	491a      	ldr	r1, [pc, #104]	; (8013764 <etharp_tmr+0x14c>)
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	4613      	mov	r3, r2
 80136fe:	005b      	lsls	r3, r3, #1
 8013700:	4413      	add	r3, r2
 8013702:	00db      	lsls	r3, r3, #3
 8013704:	440b      	add	r3, r1
 8013706:	3314      	adds	r3, #20
 8013708:	2202      	movs	r2, #2
 801370a:	701a      	strb	r2, [r3, #0]
 801370c:	e01e      	b.n	801374c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801370e:	4915      	ldr	r1, [pc, #84]	; (8013764 <etharp_tmr+0x14c>)
 8013710:	687a      	ldr	r2, [r7, #4]
 8013712:	4613      	mov	r3, r2
 8013714:	005b      	lsls	r3, r3, #1
 8013716:	4413      	add	r3, r2
 8013718:	00db      	lsls	r3, r3, #3
 801371a:	440b      	add	r3, r1
 801371c:	3314      	adds	r3, #20
 801371e:	781b      	ldrb	r3, [r3, #0]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d113      	bne.n	801374c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013724:	490f      	ldr	r1, [pc, #60]	; (8013764 <etharp_tmr+0x14c>)
 8013726:	687a      	ldr	r2, [r7, #4]
 8013728:	4613      	mov	r3, r2
 801372a:	005b      	lsls	r3, r3, #1
 801372c:	4413      	add	r3, r2
 801372e:	00db      	lsls	r3, r3, #3
 8013730:	440b      	add	r3, r1
 8013732:	3308      	adds	r3, #8
 8013734:	6818      	ldr	r0, [r3, #0]
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	4613      	mov	r3, r2
 801373a:	005b      	lsls	r3, r3, #1
 801373c:	4413      	add	r3, r2
 801373e:	00db      	lsls	r3, r3, #3
 8013740:	4a08      	ldr	r2, [pc, #32]	; (8013764 <etharp_tmr+0x14c>)
 8013742:	4413      	add	r3, r2
 8013744:	3304      	adds	r3, #4
 8013746:	4619      	mov	r1, r3
 8013748:	f000 fe6e 	bl	8014428 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	3301      	adds	r3, #1
 8013750:	607b      	str	r3, [r7, #4]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	2b09      	cmp	r3, #9
 8013756:	f77f af65 	ble.w	8013624 <etharp_tmr+0xc>
      }
    }
  }
}
 801375a:	bf00      	nop
 801375c:	bf00      	nop
 801375e:	3708      	adds	r7, #8
 8013760:	46bd      	mov	sp, r7
 8013762:	bd80      	pop	{r7, pc}
 8013764:	2000462c 	.word	0x2000462c

08013768 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013768:	b580      	push	{r7, lr}
 801376a:	b08a      	sub	sp, #40	; 0x28
 801376c:	af00      	add	r7, sp, #0
 801376e:	60f8      	str	r0, [r7, #12]
 8013770:	460b      	mov	r3, r1
 8013772:	607a      	str	r2, [r7, #4]
 8013774:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013776:	230a      	movs	r3, #10
 8013778:	84fb      	strh	r3, [r7, #38]	; 0x26
 801377a:	230a      	movs	r3, #10
 801377c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801377e:	230a      	movs	r3, #10
 8013780:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013782:	2300      	movs	r3, #0
 8013784:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013786:	230a      	movs	r3, #10
 8013788:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801378a:	2300      	movs	r3, #0
 801378c:	83bb      	strh	r3, [r7, #28]
 801378e:	2300      	movs	r3, #0
 8013790:	837b      	strh	r3, [r7, #26]
 8013792:	2300      	movs	r3, #0
 8013794:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013796:	2300      	movs	r3, #0
 8013798:	843b      	strh	r3, [r7, #32]
 801379a:	e0ae      	b.n	80138fa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801379c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137a0:	49a6      	ldr	r1, [pc, #664]	; (8013a3c <etharp_find_entry+0x2d4>)
 80137a2:	4613      	mov	r3, r2
 80137a4:	005b      	lsls	r3, r3, #1
 80137a6:	4413      	add	r3, r2
 80137a8:	00db      	lsls	r3, r3, #3
 80137aa:	440b      	add	r3, r1
 80137ac:	3314      	adds	r3, #20
 80137ae:	781b      	ldrb	r3, [r3, #0]
 80137b0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80137b2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80137b6:	2b0a      	cmp	r3, #10
 80137b8:	d105      	bne.n	80137c6 <etharp_find_entry+0x5e>
 80137ba:	7dfb      	ldrb	r3, [r7, #23]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d102      	bne.n	80137c6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80137c0:	8c3b      	ldrh	r3, [r7, #32]
 80137c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80137c4:	e095      	b.n	80138f2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80137c6:	7dfb      	ldrb	r3, [r7, #23]
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	f000 8092 	beq.w	80138f2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80137ce:	7dfb      	ldrb	r3, [r7, #23]
 80137d0:	2b01      	cmp	r3, #1
 80137d2:	d009      	beq.n	80137e8 <etharp_find_entry+0x80>
 80137d4:	7dfb      	ldrb	r3, [r7, #23]
 80137d6:	2b01      	cmp	r3, #1
 80137d8:	d806      	bhi.n	80137e8 <etharp_find_entry+0x80>
 80137da:	4b99      	ldr	r3, [pc, #612]	; (8013a40 <etharp_find_entry+0x2d8>)
 80137dc:	f240 1223 	movw	r2, #291	; 0x123
 80137e0:	4998      	ldr	r1, [pc, #608]	; (8013a44 <etharp_find_entry+0x2dc>)
 80137e2:	4899      	ldr	r0, [pc, #612]	; (8013a48 <etharp_find_entry+0x2e0>)
 80137e4:	f002 fb04 	bl	8015df0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d020      	beq.n	8013830 <etharp_find_entry+0xc8>
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	6819      	ldr	r1, [r3, #0]
 80137f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80137f6:	4891      	ldr	r0, [pc, #580]	; (8013a3c <etharp_find_entry+0x2d4>)
 80137f8:	4613      	mov	r3, r2
 80137fa:	005b      	lsls	r3, r3, #1
 80137fc:	4413      	add	r3, r2
 80137fe:	00db      	lsls	r3, r3, #3
 8013800:	4403      	add	r3, r0
 8013802:	3304      	adds	r3, #4
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4299      	cmp	r1, r3
 8013808:	d112      	bne.n	8013830 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	2b00      	cmp	r3, #0
 801380e:	d00c      	beq.n	801382a <etharp_find_entry+0xc2>
 8013810:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013814:	4989      	ldr	r1, [pc, #548]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013816:	4613      	mov	r3, r2
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	4413      	add	r3, r2
 801381c:	00db      	lsls	r3, r3, #3
 801381e:	440b      	add	r3, r1
 8013820:	3308      	adds	r3, #8
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	687a      	ldr	r2, [r7, #4]
 8013826:	429a      	cmp	r2, r3
 8013828:	d102      	bne.n	8013830 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801382a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801382e:	e100      	b.n	8013a32 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013830:	7dfb      	ldrb	r3, [r7, #23]
 8013832:	2b01      	cmp	r3, #1
 8013834:	d140      	bne.n	80138b8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013836:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801383a:	4980      	ldr	r1, [pc, #512]	; (8013a3c <etharp_find_entry+0x2d4>)
 801383c:	4613      	mov	r3, r2
 801383e:	005b      	lsls	r3, r3, #1
 8013840:	4413      	add	r3, r2
 8013842:	00db      	lsls	r3, r3, #3
 8013844:	440b      	add	r3, r1
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d01a      	beq.n	8013882 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801384c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013850:	497a      	ldr	r1, [pc, #488]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013852:	4613      	mov	r3, r2
 8013854:	005b      	lsls	r3, r3, #1
 8013856:	4413      	add	r3, r2
 8013858:	00db      	lsls	r3, r3, #3
 801385a:	440b      	add	r3, r1
 801385c:	3312      	adds	r3, #18
 801385e:	881b      	ldrh	r3, [r3, #0]
 8013860:	8bba      	ldrh	r2, [r7, #28]
 8013862:	429a      	cmp	r2, r3
 8013864:	d845      	bhi.n	80138f2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013866:	8c3b      	ldrh	r3, [r7, #32]
 8013868:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801386a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801386e:	4973      	ldr	r1, [pc, #460]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013870:	4613      	mov	r3, r2
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	4413      	add	r3, r2
 8013876:	00db      	lsls	r3, r3, #3
 8013878:	440b      	add	r3, r1
 801387a:	3312      	adds	r3, #18
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	83bb      	strh	r3, [r7, #28]
 8013880:	e037      	b.n	80138f2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013882:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013886:	496d      	ldr	r1, [pc, #436]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013888:	4613      	mov	r3, r2
 801388a:	005b      	lsls	r3, r3, #1
 801388c:	4413      	add	r3, r2
 801388e:	00db      	lsls	r3, r3, #3
 8013890:	440b      	add	r3, r1
 8013892:	3312      	adds	r3, #18
 8013894:	881b      	ldrh	r3, [r3, #0]
 8013896:	8b7a      	ldrh	r2, [r7, #26]
 8013898:	429a      	cmp	r2, r3
 801389a:	d82a      	bhi.n	80138f2 <etharp_find_entry+0x18a>
            old_pending = i;
 801389c:	8c3b      	ldrh	r3, [r7, #32]
 801389e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80138a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138a4:	4965      	ldr	r1, [pc, #404]	; (8013a3c <etharp_find_entry+0x2d4>)
 80138a6:	4613      	mov	r3, r2
 80138a8:	005b      	lsls	r3, r3, #1
 80138aa:	4413      	add	r3, r2
 80138ac:	00db      	lsls	r3, r3, #3
 80138ae:	440b      	add	r3, r1
 80138b0:	3312      	adds	r3, #18
 80138b2:	881b      	ldrh	r3, [r3, #0]
 80138b4:	837b      	strh	r3, [r7, #26]
 80138b6:	e01c      	b.n	80138f2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80138b8:	7dfb      	ldrb	r3, [r7, #23]
 80138ba:	2b01      	cmp	r3, #1
 80138bc:	d919      	bls.n	80138f2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80138be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138c2:	495e      	ldr	r1, [pc, #376]	; (8013a3c <etharp_find_entry+0x2d4>)
 80138c4:	4613      	mov	r3, r2
 80138c6:	005b      	lsls	r3, r3, #1
 80138c8:	4413      	add	r3, r2
 80138ca:	00db      	lsls	r3, r3, #3
 80138cc:	440b      	add	r3, r1
 80138ce:	3312      	adds	r3, #18
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	8b3a      	ldrh	r2, [r7, #24]
 80138d4:	429a      	cmp	r2, r3
 80138d6:	d80c      	bhi.n	80138f2 <etharp_find_entry+0x18a>
            old_stable = i;
 80138d8:	8c3b      	ldrh	r3, [r7, #32]
 80138da:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80138dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80138e0:	4956      	ldr	r1, [pc, #344]	; (8013a3c <etharp_find_entry+0x2d4>)
 80138e2:	4613      	mov	r3, r2
 80138e4:	005b      	lsls	r3, r3, #1
 80138e6:	4413      	add	r3, r2
 80138e8:	00db      	lsls	r3, r3, #3
 80138ea:	440b      	add	r3, r1
 80138ec:	3312      	adds	r3, #18
 80138ee:	881b      	ldrh	r3, [r3, #0]
 80138f0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80138f2:	8c3b      	ldrh	r3, [r7, #32]
 80138f4:	3301      	adds	r3, #1
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	843b      	strh	r3, [r7, #32]
 80138fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80138fe:	2b09      	cmp	r3, #9
 8013900:	f77f af4c 	ble.w	801379c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013904:	7afb      	ldrb	r3, [r7, #11]
 8013906:	f003 0302 	and.w	r3, r3, #2
 801390a:	2b00      	cmp	r3, #0
 801390c:	d108      	bne.n	8013920 <etharp_find_entry+0x1b8>
 801390e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013912:	2b0a      	cmp	r3, #10
 8013914:	d107      	bne.n	8013926 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013916:	7afb      	ldrb	r3, [r7, #11]
 8013918:	f003 0301 	and.w	r3, r3, #1
 801391c:	2b00      	cmp	r3, #0
 801391e:	d102      	bne.n	8013926 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013920:	f04f 33ff 	mov.w	r3, #4294967295
 8013924:	e085      	b.n	8013a32 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013926:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801392a:	2b09      	cmp	r3, #9
 801392c:	dc02      	bgt.n	8013934 <etharp_find_entry+0x1cc>
    i = empty;
 801392e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013930:	843b      	strh	r3, [r7, #32]
 8013932:	e039      	b.n	80139a8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013934:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013938:	2b09      	cmp	r3, #9
 801393a:	dc14      	bgt.n	8013966 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801393c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801393e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013940:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013944:	493d      	ldr	r1, [pc, #244]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013946:	4613      	mov	r3, r2
 8013948:	005b      	lsls	r3, r3, #1
 801394a:	4413      	add	r3, r2
 801394c:	00db      	lsls	r3, r3, #3
 801394e:	440b      	add	r3, r1
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d018      	beq.n	8013988 <etharp_find_entry+0x220>
 8013956:	4b3a      	ldr	r3, [pc, #232]	; (8013a40 <etharp_find_entry+0x2d8>)
 8013958:	f240 126d 	movw	r2, #365	; 0x16d
 801395c:	493b      	ldr	r1, [pc, #236]	; (8013a4c <etharp_find_entry+0x2e4>)
 801395e:	483a      	ldr	r0, [pc, #232]	; (8013a48 <etharp_find_entry+0x2e0>)
 8013960:	f002 fa46 	bl	8015df0 <iprintf>
 8013964:	e010      	b.n	8013988 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013966:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801396a:	2b09      	cmp	r3, #9
 801396c:	dc02      	bgt.n	8013974 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801396e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013970:	843b      	strh	r3, [r7, #32]
 8013972:	e009      	b.n	8013988 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013974:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013978:	2b09      	cmp	r3, #9
 801397a:	dc02      	bgt.n	8013982 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801397c:	8bfb      	ldrh	r3, [r7, #30]
 801397e:	843b      	strh	r3, [r7, #32]
 8013980:	e002      	b.n	8013988 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013982:	f04f 33ff 	mov.w	r3, #4294967295
 8013986:	e054      	b.n	8013a32 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013988:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801398c:	2b09      	cmp	r3, #9
 801398e:	dd06      	ble.n	801399e <etharp_find_entry+0x236>
 8013990:	4b2b      	ldr	r3, [pc, #172]	; (8013a40 <etharp_find_entry+0x2d8>)
 8013992:	f240 127f 	movw	r2, #383	; 0x17f
 8013996:	492e      	ldr	r1, [pc, #184]	; (8013a50 <etharp_find_entry+0x2e8>)
 8013998:	482b      	ldr	r0, [pc, #172]	; (8013a48 <etharp_find_entry+0x2e0>)
 801399a:	f002 fa29 	bl	8015df0 <iprintf>
    etharp_free_entry(i);
 801399e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139a2:	4618      	mov	r0, r3
 80139a4:	f7ff fe06 	bl	80135b4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80139a8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80139ac:	2b09      	cmp	r3, #9
 80139ae:	dd06      	ble.n	80139be <etharp_find_entry+0x256>
 80139b0:	4b23      	ldr	r3, [pc, #140]	; (8013a40 <etharp_find_entry+0x2d8>)
 80139b2:	f240 1283 	movw	r2, #387	; 0x183
 80139b6:	4926      	ldr	r1, [pc, #152]	; (8013a50 <etharp_find_entry+0x2e8>)
 80139b8:	4823      	ldr	r0, [pc, #140]	; (8013a48 <etharp_find_entry+0x2e0>)
 80139ba:	f002 fa19 	bl	8015df0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80139be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139c2:	491e      	ldr	r1, [pc, #120]	; (8013a3c <etharp_find_entry+0x2d4>)
 80139c4:	4613      	mov	r3, r2
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	4413      	add	r3, r2
 80139ca:	00db      	lsls	r3, r3, #3
 80139cc:	440b      	add	r3, r1
 80139ce:	3314      	adds	r3, #20
 80139d0:	781b      	ldrb	r3, [r3, #0]
 80139d2:	2b00      	cmp	r3, #0
 80139d4:	d006      	beq.n	80139e4 <etharp_find_entry+0x27c>
 80139d6:	4b1a      	ldr	r3, [pc, #104]	; (8013a40 <etharp_find_entry+0x2d8>)
 80139d8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80139dc:	491d      	ldr	r1, [pc, #116]	; (8013a54 <etharp_find_entry+0x2ec>)
 80139de:	481a      	ldr	r0, [pc, #104]	; (8013a48 <etharp_find_entry+0x2e0>)
 80139e0:	f002 fa06 	bl	8015df0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d00b      	beq.n	8013a02 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80139ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	6819      	ldr	r1, [r3, #0]
 80139f2:	4812      	ldr	r0, [pc, #72]	; (8013a3c <etharp_find_entry+0x2d4>)
 80139f4:	4613      	mov	r3, r2
 80139f6:	005b      	lsls	r3, r3, #1
 80139f8:	4413      	add	r3, r2
 80139fa:	00db      	lsls	r3, r3, #3
 80139fc:	4403      	add	r3, r0
 80139fe:	3304      	adds	r3, #4
 8013a00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013a02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a06:	490d      	ldr	r1, [pc, #52]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013a08:	4613      	mov	r3, r2
 8013a0a:	005b      	lsls	r3, r3, #1
 8013a0c:	4413      	add	r3, r2
 8013a0e:	00db      	lsls	r3, r3, #3
 8013a10:	440b      	add	r3, r1
 8013a12:	3312      	adds	r3, #18
 8013a14:	2200      	movs	r2, #0
 8013a16:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013a18:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a1c:	4907      	ldr	r1, [pc, #28]	; (8013a3c <etharp_find_entry+0x2d4>)
 8013a1e:	4613      	mov	r3, r2
 8013a20:	005b      	lsls	r3, r3, #1
 8013a22:	4413      	add	r3, r2
 8013a24:	00db      	lsls	r3, r3, #3
 8013a26:	440b      	add	r3, r1
 8013a28:	3308      	adds	r3, #8
 8013a2a:	687a      	ldr	r2, [r7, #4]
 8013a2c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013a32:	4618      	mov	r0, r3
 8013a34:	3728      	adds	r7, #40	; 0x28
 8013a36:	46bd      	mov	sp, r7
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	2000462c 	.word	0x2000462c
 8013a40:	08019330 	.word	0x08019330
 8013a44:	08019368 	.word	0x08019368
 8013a48:	080193a8 	.word	0x080193a8
 8013a4c:	080193d0 	.word	0x080193d0
 8013a50:	080193e8 	.word	0x080193e8
 8013a54:	080193fc 	.word	0x080193fc

08013a58 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b088      	sub	sp, #32
 8013a5c:	af02      	add	r7, sp, #8
 8013a5e:	60f8      	str	r0, [r7, #12]
 8013a60:	60b9      	str	r1, [r7, #8]
 8013a62:	607a      	str	r2, [r7, #4]
 8013a64:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013a6c:	2b06      	cmp	r3, #6
 8013a6e:	d006      	beq.n	8013a7e <etharp_update_arp_entry+0x26>
 8013a70:	4b48      	ldr	r3, [pc, #288]	; (8013b94 <etharp_update_arp_entry+0x13c>)
 8013a72:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013a76:	4948      	ldr	r1, [pc, #288]	; (8013b98 <etharp_update_arp_entry+0x140>)
 8013a78:	4848      	ldr	r0, [pc, #288]	; (8013b9c <etharp_update_arp_entry+0x144>)
 8013a7a:	f002 f9b9 	bl	8015df0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013a7e:	68bb      	ldr	r3, [r7, #8]
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d012      	beq.n	8013aaa <etharp_update_arp_entry+0x52>
 8013a84:	68bb      	ldr	r3, [r7, #8]
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d00e      	beq.n	8013aaa <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013a8c:	68bb      	ldr	r3, [r7, #8]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	68f9      	ldr	r1, [r7, #12]
 8013a92:	4618      	mov	r0, r3
 8013a94:	f001 f8fe 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8013a98:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d105      	bne.n	8013aaa <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013a9e:	68bb      	ldr	r3, [r7, #8]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013aa6:	2be0      	cmp	r3, #224	; 0xe0
 8013aa8:	d102      	bne.n	8013ab0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013aaa:	f06f 030f 	mvn.w	r3, #15
 8013aae:	e06c      	b.n	8013b8a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013ab0:	78fb      	ldrb	r3, [r7, #3]
 8013ab2:	68fa      	ldr	r2, [r7, #12]
 8013ab4:	4619      	mov	r1, r3
 8013ab6:	68b8      	ldr	r0, [r7, #8]
 8013ab8:	f7ff fe56 	bl	8013768 <etharp_find_entry>
 8013abc:	4603      	mov	r3, r0
 8013abe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013ac0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	da02      	bge.n	8013ace <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013ac8:	8afb      	ldrh	r3, [r7, #22]
 8013aca:	b25b      	sxtb	r3, r3
 8013acc:	e05d      	b.n	8013b8a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013ace:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ad2:	4933      	ldr	r1, [pc, #204]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013ad4:	4613      	mov	r3, r2
 8013ad6:	005b      	lsls	r3, r3, #1
 8013ad8:	4413      	add	r3, r2
 8013ada:	00db      	lsls	r3, r3, #3
 8013adc:	440b      	add	r3, r1
 8013ade:	3314      	adds	r3, #20
 8013ae0:	2202      	movs	r2, #2
 8013ae2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013ae4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013ae8:	492d      	ldr	r1, [pc, #180]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013aea:	4613      	mov	r3, r2
 8013aec:	005b      	lsls	r3, r3, #1
 8013aee:	4413      	add	r3, r2
 8013af0:	00db      	lsls	r3, r3, #3
 8013af2:	440b      	add	r3, r1
 8013af4:	3308      	adds	r3, #8
 8013af6:	68fa      	ldr	r2, [r7, #12]
 8013af8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013afa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013afe:	4613      	mov	r3, r2
 8013b00:	005b      	lsls	r3, r3, #1
 8013b02:	4413      	add	r3, r2
 8013b04:	00db      	lsls	r3, r3, #3
 8013b06:	3308      	adds	r3, #8
 8013b08:	4a25      	ldr	r2, [pc, #148]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013b0a:	4413      	add	r3, r2
 8013b0c:	3304      	adds	r3, #4
 8013b0e:	2206      	movs	r2, #6
 8013b10:	6879      	ldr	r1, [r7, #4]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f002 f956 	bl	8015dc4 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013b18:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b1c:	4920      	ldr	r1, [pc, #128]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013b1e:	4613      	mov	r3, r2
 8013b20:	005b      	lsls	r3, r3, #1
 8013b22:	4413      	add	r3, r2
 8013b24:	00db      	lsls	r3, r3, #3
 8013b26:	440b      	add	r3, r1
 8013b28:	3312      	adds	r3, #18
 8013b2a:	2200      	movs	r2, #0
 8013b2c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013b2e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b32:	491b      	ldr	r1, [pc, #108]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013b34:	4613      	mov	r3, r2
 8013b36:	005b      	lsls	r3, r3, #1
 8013b38:	4413      	add	r3, r2
 8013b3a:	00db      	lsls	r3, r3, #3
 8013b3c:	440b      	add	r3, r1
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d021      	beq.n	8013b88 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013b44:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b48:	4915      	ldr	r1, [pc, #84]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	005b      	lsls	r3, r3, #1
 8013b4e:	4413      	add	r3, r2
 8013b50:	00db      	lsls	r3, r3, #3
 8013b52:	440b      	add	r3, r1
 8013b54:	681b      	ldr	r3, [r3, #0]
 8013b56:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013b58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013b5c:	4910      	ldr	r1, [pc, #64]	; (8013ba0 <etharp_update_arp_entry+0x148>)
 8013b5e:	4613      	mov	r3, r2
 8013b60:	005b      	lsls	r3, r3, #1
 8013b62:	4413      	add	r3, r2
 8013b64:	00db      	lsls	r3, r3, #3
 8013b66:	440b      	add	r3, r1
 8013b68:	2200      	movs	r2, #0
 8013b6a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013b76:	9300      	str	r3, [sp, #0]
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	6939      	ldr	r1, [r7, #16]
 8013b7c:	68f8      	ldr	r0, [r7, #12]
 8013b7e:	f001 ff91 	bl	8015aa4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013b82:	6938      	ldr	r0, [r7, #16]
 8013b84:	f7f9 fdf0 	bl	800d768 <pbuf_free>
  }
  return ERR_OK;
 8013b88:	2300      	movs	r3, #0
}
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	3718      	adds	r7, #24
 8013b8e:	46bd      	mov	sp, r7
 8013b90:	bd80      	pop	{r7, pc}
 8013b92:	bf00      	nop
 8013b94:	08019330 	.word	0x08019330
 8013b98:	08019428 	.word	0x08019428
 8013b9c:	080193a8 	.word	0x080193a8
 8013ba0:	2000462c 	.word	0x2000462c

08013ba4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b084      	sub	sp, #16
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bac:	2300      	movs	r3, #0
 8013bae:	60fb      	str	r3, [r7, #12]
 8013bb0:	e01e      	b.n	8013bf0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013bb2:	4913      	ldr	r1, [pc, #76]	; (8013c00 <etharp_cleanup_netif+0x5c>)
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	4613      	mov	r3, r2
 8013bb8:	005b      	lsls	r3, r3, #1
 8013bba:	4413      	add	r3, r2
 8013bbc:	00db      	lsls	r3, r3, #3
 8013bbe:	440b      	add	r3, r1
 8013bc0:	3314      	adds	r3, #20
 8013bc2:	781b      	ldrb	r3, [r3, #0]
 8013bc4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013bc6:	7afb      	ldrb	r3, [r7, #11]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d00e      	beq.n	8013bea <etharp_cleanup_netif+0x46>
 8013bcc:	490c      	ldr	r1, [pc, #48]	; (8013c00 <etharp_cleanup_netif+0x5c>)
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	4613      	mov	r3, r2
 8013bd2:	005b      	lsls	r3, r3, #1
 8013bd4:	4413      	add	r3, r2
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	440b      	add	r3, r1
 8013bda:	3308      	adds	r3, #8
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	687a      	ldr	r2, [r7, #4]
 8013be0:	429a      	cmp	r2, r3
 8013be2:	d102      	bne.n	8013bea <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f7ff fce5 	bl	80135b4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	3301      	adds	r3, #1
 8013bee:	60fb      	str	r3, [r7, #12]
 8013bf0:	68fb      	ldr	r3, [r7, #12]
 8013bf2:	2b09      	cmp	r3, #9
 8013bf4:	dddd      	ble.n	8013bb2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013bf6:	bf00      	nop
 8013bf8:	bf00      	nop
 8013bfa:	3710      	adds	r7, #16
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}
 8013c00:	2000462c 	.word	0x2000462c

08013c04 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013c04:	b5b0      	push	{r4, r5, r7, lr}
 8013c06:	b08a      	sub	sp, #40	; 0x28
 8013c08:	af04      	add	r7, sp, #16
 8013c0a:	6078      	str	r0, [r7, #4]
 8013c0c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d107      	bne.n	8013c24 <etharp_input+0x20>
 8013c14:	4b3d      	ldr	r3, [pc, #244]	; (8013d0c <etharp_input+0x108>)
 8013c16:	f240 228a 	movw	r2, #650	; 0x28a
 8013c1a:	493d      	ldr	r1, [pc, #244]	; (8013d10 <etharp_input+0x10c>)
 8013c1c:	483d      	ldr	r0, [pc, #244]	; (8013d14 <etharp_input+0x110>)
 8013c1e:	f002 f8e7 	bl	8015df0 <iprintf>
 8013c22:	e06f      	b.n	8013d04 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	881b      	ldrh	r3, [r3, #0]
 8013c2e:	b29b      	uxth	r3, r3
 8013c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c34:	d10c      	bne.n	8013c50 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013c3a:	2b06      	cmp	r3, #6
 8013c3c:	d108      	bne.n	8013c50 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013c3e:	693b      	ldr	r3, [r7, #16]
 8013c40:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013c42:	2b04      	cmp	r3, #4
 8013c44:	d104      	bne.n	8013c50 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013c46:	693b      	ldr	r3, [r7, #16]
 8013c48:	885b      	ldrh	r3, [r3, #2]
 8013c4a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013c4c:	2b08      	cmp	r3, #8
 8013c4e:	d003      	beq.n	8013c58 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013c50:	6878      	ldr	r0, [r7, #4]
 8013c52:	f7f9 fd89 	bl	800d768 <pbuf_free>
    return;
 8013c56:	e055      	b.n	8013d04 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013c58:	693b      	ldr	r3, [r7, #16]
 8013c5a:	330e      	adds	r3, #14
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013c60:	693b      	ldr	r3, [r7, #16]
 8013c62:	3318      	adds	r3, #24
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	3304      	adds	r3, #4
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d102      	bne.n	8013c78 <etharp_input+0x74>
    for_us = 0;
 8013c72:	2300      	movs	r3, #0
 8013c74:	75fb      	strb	r3, [r7, #23]
 8013c76:	e009      	b.n	8013c8c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013c78:	68ba      	ldr	r2, [r7, #8]
 8013c7a:	683b      	ldr	r3, [r7, #0]
 8013c7c:	3304      	adds	r3, #4
 8013c7e:	681b      	ldr	r3, [r3, #0]
 8013c80:	429a      	cmp	r2, r3
 8013c82:	bf0c      	ite	eq
 8013c84:	2301      	moveq	r3, #1
 8013c86:	2300      	movne	r3, #0
 8013c88:	b2db      	uxtb	r3, r3
 8013c8a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013c8c:	693b      	ldr	r3, [r7, #16]
 8013c8e:	f103 0208 	add.w	r2, r3, #8
 8013c92:	7dfb      	ldrb	r3, [r7, #23]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d001      	beq.n	8013c9c <etharp_input+0x98>
 8013c98:	2301      	movs	r3, #1
 8013c9a:	e000      	b.n	8013c9e <etharp_input+0x9a>
 8013c9c:	2302      	movs	r3, #2
 8013c9e:	f107 010c 	add.w	r1, r7, #12
 8013ca2:	6838      	ldr	r0, [r7, #0]
 8013ca4:	f7ff fed8 	bl	8013a58 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	88db      	ldrh	r3, [r3, #6]
 8013cac:	b29b      	uxth	r3, r3
 8013cae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013cb2:	d003      	beq.n	8013cbc <etharp_input+0xb8>
 8013cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cb8:	d01e      	beq.n	8013cf8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013cba:	e020      	b.n	8013cfe <etharp_input+0xfa>
      if (for_us) {
 8013cbc:	7dfb      	ldrb	r3, [r7, #23]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d01c      	beq.n	8013cfc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013cc2:	683b      	ldr	r3, [r7, #0]
 8013cc4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013cc8:	693b      	ldr	r3, [r7, #16]
 8013cca:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013cd4:	683b      	ldr	r3, [r7, #0]
 8013cd6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013cd8:	693a      	ldr	r2, [r7, #16]
 8013cda:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013cdc:	2102      	movs	r1, #2
 8013cde:	9103      	str	r1, [sp, #12]
 8013ce0:	f107 010c 	add.w	r1, r7, #12
 8013ce4:	9102      	str	r1, [sp, #8]
 8013ce6:	9201      	str	r2, [sp, #4]
 8013ce8:	9300      	str	r3, [sp, #0]
 8013cea:	462b      	mov	r3, r5
 8013cec:	4622      	mov	r2, r4
 8013cee:	4601      	mov	r1, r0
 8013cf0:	6838      	ldr	r0, [r7, #0]
 8013cf2:	f000 faeb 	bl	80142cc <etharp_raw>
      break;
 8013cf6:	e001      	b.n	8013cfc <etharp_input+0xf8>
      break;
 8013cf8:	bf00      	nop
 8013cfa:	e000      	b.n	8013cfe <etharp_input+0xfa>
      break;
 8013cfc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013cfe:	6878      	ldr	r0, [r7, #4]
 8013d00:	f7f9 fd32 	bl	800d768 <pbuf_free>
}
 8013d04:	3718      	adds	r7, #24
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bdb0      	pop	{r4, r5, r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08019330 	.word	0x08019330
 8013d10:	08019480 	.word	0x08019480
 8013d14:	080193a8 	.word	0x080193a8

08013d18 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b086      	sub	sp, #24
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	60f8      	str	r0, [r7, #12]
 8013d20:	60b9      	str	r1, [r7, #8]
 8013d22:	4613      	mov	r3, r2
 8013d24:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013d26:	79fa      	ldrb	r2, [r7, #7]
 8013d28:	4944      	ldr	r1, [pc, #272]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	005b      	lsls	r3, r3, #1
 8013d2e:	4413      	add	r3, r2
 8013d30:	00db      	lsls	r3, r3, #3
 8013d32:	440b      	add	r3, r1
 8013d34:	3314      	adds	r3, #20
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d806      	bhi.n	8013d4a <etharp_output_to_arp_index+0x32>
 8013d3c:	4b40      	ldr	r3, [pc, #256]	; (8013e40 <etharp_output_to_arp_index+0x128>)
 8013d3e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013d42:	4940      	ldr	r1, [pc, #256]	; (8013e44 <etharp_output_to_arp_index+0x12c>)
 8013d44:	4840      	ldr	r0, [pc, #256]	; (8013e48 <etharp_output_to_arp_index+0x130>)
 8013d46:	f002 f853 	bl	8015df0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013d4a:	79fa      	ldrb	r2, [r7, #7]
 8013d4c:	493b      	ldr	r1, [pc, #236]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013d4e:	4613      	mov	r3, r2
 8013d50:	005b      	lsls	r3, r3, #1
 8013d52:	4413      	add	r3, r2
 8013d54:	00db      	lsls	r3, r3, #3
 8013d56:	440b      	add	r3, r1
 8013d58:	3314      	adds	r3, #20
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	2b02      	cmp	r3, #2
 8013d5e:	d153      	bne.n	8013e08 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013d60:	79fa      	ldrb	r2, [r7, #7]
 8013d62:	4936      	ldr	r1, [pc, #216]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013d64:	4613      	mov	r3, r2
 8013d66:	005b      	lsls	r3, r3, #1
 8013d68:	4413      	add	r3, r2
 8013d6a:	00db      	lsls	r3, r3, #3
 8013d6c:	440b      	add	r3, r1
 8013d6e:	3312      	adds	r3, #18
 8013d70:	881b      	ldrh	r3, [r3, #0]
 8013d72:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013d76:	d919      	bls.n	8013dac <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013d78:	79fa      	ldrb	r2, [r7, #7]
 8013d7a:	4613      	mov	r3, r2
 8013d7c:	005b      	lsls	r3, r3, #1
 8013d7e:	4413      	add	r3, r2
 8013d80:	00db      	lsls	r3, r3, #3
 8013d82:	4a2e      	ldr	r2, [pc, #184]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013d84:	4413      	add	r3, r2
 8013d86:	3304      	adds	r3, #4
 8013d88:	4619      	mov	r1, r3
 8013d8a:	68f8      	ldr	r0, [r7, #12]
 8013d8c:	f000 fb4c 	bl	8014428 <etharp_request>
 8013d90:	4603      	mov	r3, r0
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d138      	bne.n	8013e08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013d96:	79fa      	ldrb	r2, [r7, #7]
 8013d98:	4928      	ldr	r1, [pc, #160]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013d9a:	4613      	mov	r3, r2
 8013d9c:	005b      	lsls	r3, r3, #1
 8013d9e:	4413      	add	r3, r2
 8013da0:	00db      	lsls	r3, r3, #3
 8013da2:	440b      	add	r3, r1
 8013da4:	3314      	adds	r3, #20
 8013da6:	2203      	movs	r2, #3
 8013da8:	701a      	strb	r2, [r3, #0]
 8013daa:	e02d      	b.n	8013e08 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013dac:	79fa      	ldrb	r2, [r7, #7]
 8013dae:	4923      	ldr	r1, [pc, #140]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	440b      	add	r3, r1
 8013dba:	3312      	adds	r3, #18
 8013dbc:	881b      	ldrh	r3, [r3, #0]
 8013dbe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013dc2:	d321      	bcc.n	8013e08 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013dc4:	79fa      	ldrb	r2, [r7, #7]
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	005b      	lsls	r3, r3, #1
 8013dca:	4413      	add	r3, r2
 8013dcc:	00db      	lsls	r3, r3, #3
 8013dce:	4a1b      	ldr	r2, [pc, #108]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013dd0:	4413      	add	r3, r2
 8013dd2:	1d19      	adds	r1, r3, #4
 8013dd4:	79fa      	ldrb	r2, [r7, #7]
 8013dd6:	4613      	mov	r3, r2
 8013dd8:	005b      	lsls	r3, r3, #1
 8013dda:	4413      	add	r3, r2
 8013ddc:	00db      	lsls	r3, r3, #3
 8013dde:	3308      	adds	r3, #8
 8013de0:	4a16      	ldr	r2, [pc, #88]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013de2:	4413      	add	r3, r2
 8013de4:	3304      	adds	r3, #4
 8013de6:	461a      	mov	r2, r3
 8013de8:	68f8      	ldr	r0, [r7, #12]
 8013dea:	f000 fafb 	bl	80143e4 <etharp_request_dst>
 8013dee:	4603      	mov	r3, r0
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d109      	bne.n	8013e08 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013df4:	79fa      	ldrb	r2, [r7, #7]
 8013df6:	4911      	ldr	r1, [pc, #68]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013df8:	4613      	mov	r3, r2
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	4413      	add	r3, r2
 8013dfe:	00db      	lsls	r3, r3, #3
 8013e00:	440b      	add	r3, r1
 8013e02:	3314      	adds	r3, #20
 8013e04:	2203      	movs	r2, #3
 8013e06:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013e0e:	79fa      	ldrb	r2, [r7, #7]
 8013e10:	4613      	mov	r3, r2
 8013e12:	005b      	lsls	r3, r3, #1
 8013e14:	4413      	add	r3, r2
 8013e16:	00db      	lsls	r3, r3, #3
 8013e18:	3308      	adds	r3, #8
 8013e1a:	4a08      	ldr	r2, [pc, #32]	; (8013e3c <etharp_output_to_arp_index+0x124>)
 8013e1c:	4413      	add	r3, r2
 8013e1e:	3304      	adds	r3, #4
 8013e20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013e24:	9200      	str	r2, [sp, #0]
 8013e26:	460a      	mov	r2, r1
 8013e28:	68b9      	ldr	r1, [r7, #8]
 8013e2a:	68f8      	ldr	r0, [r7, #12]
 8013e2c:	f001 fe3a 	bl	8015aa4 <ethernet_output>
 8013e30:	4603      	mov	r3, r0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3710      	adds	r7, #16
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	2000462c 	.word	0x2000462c
 8013e40:	08019330 	.word	0x08019330
 8013e44:	080194a0 	.word	0x080194a0
 8013e48:	080193a8 	.word	0x080193a8

08013e4c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b08a      	sub	sp, #40	; 0x28
 8013e50:	af02      	add	r7, sp, #8
 8013e52:	60f8      	str	r0, [r7, #12]
 8013e54:	60b9      	str	r1, [r7, #8]
 8013e56:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d106      	bne.n	8013e70 <etharp_output+0x24>
 8013e62:	4b73      	ldr	r3, [pc, #460]	; (8014030 <etharp_output+0x1e4>)
 8013e64:	f240 321e 	movw	r2, #798	; 0x31e
 8013e68:	4972      	ldr	r1, [pc, #456]	; (8014034 <etharp_output+0x1e8>)
 8013e6a:	4873      	ldr	r0, [pc, #460]	; (8014038 <etharp_output+0x1ec>)
 8013e6c:	f001 ffc0 	bl	8015df0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8013e70:	68bb      	ldr	r3, [r7, #8]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d106      	bne.n	8013e84 <etharp_output+0x38>
 8013e76:	4b6e      	ldr	r3, [pc, #440]	; (8014030 <etharp_output+0x1e4>)
 8013e78:	f240 321f 	movw	r2, #799	; 0x31f
 8013e7c:	496f      	ldr	r1, [pc, #444]	; (801403c <etharp_output+0x1f0>)
 8013e7e:	486e      	ldr	r0, [pc, #440]	; (8014038 <etharp_output+0x1ec>)
 8013e80:	f001 ffb6 	bl	8015df0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <etharp_output+0x4c>
 8013e8a:	4b69      	ldr	r3, [pc, #420]	; (8014030 <etharp_output+0x1e4>)
 8013e8c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8013e90:	496b      	ldr	r1, [pc, #428]	; (8014040 <etharp_output+0x1f4>)
 8013e92:	4869      	ldr	r0, [pc, #420]	; (8014038 <etharp_output+0x1ec>)
 8013e94:	f001 ffac 	bl	8015df0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	68f9      	ldr	r1, [r7, #12]
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	f000 fef8 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8013ea4:	4603      	mov	r3, r0
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d002      	beq.n	8013eb0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013eaa:	4b66      	ldr	r3, [pc, #408]	; (8014044 <etharp_output+0x1f8>)
 8013eac:	61fb      	str	r3, [r7, #28]
 8013eae:	e0af      	b.n	8014010 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013eb8:	2be0      	cmp	r3, #224	; 0xe0
 8013eba:	d118      	bne.n	8013eee <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013ebc:	2301      	movs	r3, #1
 8013ebe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013ec4:	235e      	movs	r3, #94	; 0x5e
 8013ec6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013ec8:	687b      	ldr	r3, [r7, #4]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	781b      	ldrb	r3, [r3, #0]
 8013ece:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	3302      	adds	r3, #2
 8013eda:	781b      	ldrb	r3, [r3, #0]
 8013edc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	3303      	adds	r3, #3
 8013ee2:	781b      	ldrb	r3, [r3, #0]
 8013ee4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8013ee6:	f107 0310 	add.w	r3, r7, #16
 8013eea:	61fb      	str	r3, [r7, #28]
 8013eec:	e090      	b.n	8014010 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	681a      	ldr	r2, [r3, #0]
 8013ef2:	68fb      	ldr	r3, [r7, #12]
 8013ef4:	3304      	adds	r3, #4
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	405a      	eors	r2, r3
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	3308      	adds	r3, #8
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	4013      	ands	r3, r2
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d012      	beq.n	8013f2c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	681b      	ldr	r3, [r3, #0]
 8013f0a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8013f0c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8013f10:	4293      	cmp	r3, r2
 8013f12:	d00b      	beq.n	8013f2c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8013f14:	68fb      	ldr	r3, [r7, #12]
 8013f16:	330c      	adds	r3, #12
 8013f18:	681b      	ldr	r3, [r3, #0]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d003      	beq.n	8013f26 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	330c      	adds	r3, #12
 8013f22:	61bb      	str	r3, [r7, #24]
 8013f24:	e002      	b.n	8013f2c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8013f26:	f06f 0303 	mvn.w	r3, #3
 8013f2a:	e07d      	b.n	8014028 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013f2c:	4b46      	ldr	r3, [pc, #280]	; (8014048 <etharp_output+0x1fc>)
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	4619      	mov	r1, r3
 8013f32:	4a46      	ldr	r2, [pc, #280]	; (801404c <etharp_output+0x200>)
 8013f34:	460b      	mov	r3, r1
 8013f36:	005b      	lsls	r3, r3, #1
 8013f38:	440b      	add	r3, r1
 8013f3a:	00db      	lsls	r3, r3, #3
 8013f3c:	4413      	add	r3, r2
 8013f3e:	3314      	adds	r3, #20
 8013f40:	781b      	ldrb	r3, [r3, #0]
 8013f42:	2b01      	cmp	r3, #1
 8013f44:	d925      	bls.n	8013f92 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013f46:	4b40      	ldr	r3, [pc, #256]	; (8014048 <etharp_output+0x1fc>)
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	4619      	mov	r1, r3
 8013f4c:	4a3f      	ldr	r2, [pc, #252]	; (801404c <etharp_output+0x200>)
 8013f4e:	460b      	mov	r3, r1
 8013f50:	005b      	lsls	r3, r3, #1
 8013f52:	440b      	add	r3, r1
 8013f54:	00db      	lsls	r3, r3, #3
 8013f56:	4413      	add	r3, r2
 8013f58:	3308      	adds	r3, #8
 8013f5a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013f5c:	68fa      	ldr	r2, [r7, #12]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	d117      	bne.n	8013f92 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8013f62:	69bb      	ldr	r3, [r7, #24]
 8013f64:	681a      	ldr	r2, [r3, #0]
 8013f66:	4b38      	ldr	r3, [pc, #224]	; (8014048 <etharp_output+0x1fc>)
 8013f68:	781b      	ldrb	r3, [r3, #0]
 8013f6a:	4618      	mov	r0, r3
 8013f6c:	4937      	ldr	r1, [pc, #220]	; (801404c <etharp_output+0x200>)
 8013f6e:	4603      	mov	r3, r0
 8013f70:	005b      	lsls	r3, r3, #1
 8013f72:	4403      	add	r3, r0
 8013f74:	00db      	lsls	r3, r3, #3
 8013f76:	440b      	add	r3, r1
 8013f78:	3304      	adds	r3, #4
 8013f7a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d108      	bne.n	8013f92 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8013f80:	4b31      	ldr	r3, [pc, #196]	; (8014048 <etharp_output+0x1fc>)
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	461a      	mov	r2, r3
 8013f86:	68b9      	ldr	r1, [r7, #8]
 8013f88:	68f8      	ldr	r0, [r7, #12]
 8013f8a:	f7ff fec5 	bl	8013d18 <etharp_output_to_arp_index>
 8013f8e:	4603      	mov	r3, r0
 8013f90:	e04a      	b.n	8014028 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013f92:	2300      	movs	r3, #0
 8013f94:	75fb      	strb	r3, [r7, #23]
 8013f96:	e031      	b.n	8013ffc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013f98:	7dfa      	ldrb	r2, [r7, #23]
 8013f9a:	492c      	ldr	r1, [pc, #176]	; (801404c <etharp_output+0x200>)
 8013f9c:	4613      	mov	r3, r2
 8013f9e:	005b      	lsls	r3, r3, #1
 8013fa0:	4413      	add	r3, r2
 8013fa2:	00db      	lsls	r3, r3, #3
 8013fa4:	440b      	add	r3, r1
 8013fa6:	3314      	adds	r3, #20
 8013fa8:	781b      	ldrb	r3, [r3, #0]
 8013faa:	2b01      	cmp	r3, #1
 8013fac:	d923      	bls.n	8013ff6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8013fae:	7dfa      	ldrb	r2, [r7, #23]
 8013fb0:	4926      	ldr	r1, [pc, #152]	; (801404c <etharp_output+0x200>)
 8013fb2:	4613      	mov	r3, r2
 8013fb4:	005b      	lsls	r3, r3, #1
 8013fb6:	4413      	add	r3, r2
 8013fb8:	00db      	lsls	r3, r3, #3
 8013fba:	440b      	add	r3, r1
 8013fbc:	3308      	adds	r3, #8
 8013fbe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	429a      	cmp	r2, r3
 8013fc4:	d117      	bne.n	8013ff6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013fc6:	69bb      	ldr	r3, [r7, #24]
 8013fc8:	6819      	ldr	r1, [r3, #0]
 8013fca:	7dfa      	ldrb	r2, [r7, #23]
 8013fcc:	481f      	ldr	r0, [pc, #124]	; (801404c <etharp_output+0x200>)
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	4403      	add	r3, r0
 8013fd8:	3304      	adds	r3, #4
 8013fda:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013fdc:	4299      	cmp	r1, r3
 8013fde:	d10a      	bne.n	8013ff6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8013fe0:	4a19      	ldr	r2, [pc, #100]	; (8014048 <etharp_output+0x1fc>)
 8013fe2:	7dfb      	ldrb	r3, [r7, #23]
 8013fe4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8013fe6:	7dfb      	ldrb	r3, [r7, #23]
 8013fe8:	461a      	mov	r2, r3
 8013fea:	68b9      	ldr	r1, [r7, #8]
 8013fec:	68f8      	ldr	r0, [r7, #12]
 8013fee:	f7ff fe93 	bl	8013d18 <etharp_output_to_arp_index>
 8013ff2:	4603      	mov	r3, r0
 8013ff4:	e018      	b.n	8014028 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8013ff6:	7dfb      	ldrb	r3, [r7, #23]
 8013ff8:	3301      	adds	r3, #1
 8013ffa:	75fb      	strb	r3, [r7, #23]
 8013ffc:	7dfb      	ldrb	r3, [r7, #23]
 8013ffe:	2b09      	cmp	r3, #9
 8014000:	d9ca      	bls.n	8013f98 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014002:	68ba      	ldr	r2, [r7, #8]
 8014004:	69b9      	ldr	r1, [r7, #24]
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f000 f822 	bl	8014050 <etharp_query>
 801400c:	4603      	mov	r3, r0
 801400e:	e00b      	b.n	8014028 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014010:	68fb      	ldr	r3, [r7, #12]
 8014012:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014016:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801401a:	9300      	str	r3, [sp, #0]
 801401c:	69fb      	ldr	r3, [r7, #28]
 801401e:	68b9      	ldr	r1, [r7, #8]
 8014020:	68f8      	ldr	r0, [r7, #12]
 8014022:	f001 fd3f 	bl	8015aa4 <ethernet_output>
 8014026:	4603      	mov	r3, r0
}
 8014028:	4618      	mov	r0, r3
 801402a:	3720      	adds	r7, #32
 801402c:	46bd      	mov	sp, r7
 801402e:	bd80      	pop	{r7, pc}
 8014030:	08019330 	.word	0x08019330
 8014034:	08019480 	.word	0x08019480
 8014038:	080193a8 	.word	0x080193a8
 801403c:	080194d0 	.word	0x080194d0
 8014040:	08019470 	.word	0x08019470
 8014044:	08019b28 	.word	0x08019b28
 8014048:	2000471c 	.word	0x2000471c
 801404c:	2000462c 	.word	0x2000462c

08014050 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b08c      	sub	sp, #48	; 0x30
 8014054:	af02      	add	r7, sp, #8
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	3326      	adds	r3, #38	; 0x26
 8014060:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014062:	23ff      	movs	r3, #255	; 0xff
 8014064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014068:	2300      	movs	r3, #0
 801406a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801406c:	68bb      	ldr	r3, [r7, #8]
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	68f9      	ldr	r1, [r7, #12]
 8014072:	4618      	mov	r0, r3
 8014074:	f000 fe0e 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8014078:	4603      	mov	r3, r0
 801407a:	2b00      	cmp	r3, #0
 801407c:	d10c      	bne.n	8014098 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801407e:	68bb      	ldr	r3, [r7, #8]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014086:	2be0      	cmp	r3, #224	; 0xe0
 8014088:	d006      	beq.n	8014098 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d003      	beq.n	8014098 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d102      	bne.n	801409e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014098:	f06f 030f 	mvn.w	r3, #15
 801409c:	e101      	b.n	80142a2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801409e:	68fa      	ldr	r2, [r7, #12]
 80140a0:	2101      	movs	r1, #1
 80140a2:	68b8      	ldr	r0, [r7, #8]
 80140a4:	f7ff fb60 	bl	8013768 <etharp_find_entry>
 80140a8:	4603      	mov	r3, r0
 80140aa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80140ac:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	da02      	bge.n	80140ba <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80140b4:	8a7b      	ldrh	r3, [r7, #18]
 80140b6:	b25b      	sxtb	r3, r3
 80140b8:	e0f3      	b.n	80142a2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80140ba:	8a7b      	ldrh	r3, [r7, #18]
 80140bc:	2b7e      	cmp	r3, #126	; 0x7e
 80140be:	d906      	bls.n	80140ce <etharp_query+0x7e>
 80140c0:	4b7a      	ldr	r3, [pc, #488]	; (80142ac <etharp_query+0x25c>)
 80140c2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80140c6:	497a      	ldr	r1, [pc, #488]	; (80142b0 <etharp_query+0x260>)
 80140c8:	487a      	ldr	r0, [pc, #488]	; (80142b4 <etharp_query+0x264>)
 80140ca:	f001 fe91 	bl	8015df0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80140ce:	8a7b      	ldrh	r3, [r7, #18]
 80140d0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80140d2:	7c7a      	ldrb	r2, [r7, #17]
 80140d4:	4978      	ldr	r1, [pc, #480]	; (80142b8 <etharp_query+0x268>)
 80140d6:	4613      	mov	r3, r2
 80140d8:	005b      	lsls	r3, r3, #1
 80140da:	4413      	add	r3, r2
 80140dc:	00db      	lsls	r3, r3, #3
 80140de:	440b      	add	r3, r1
 80140e0:	3314      	adds	r3, #20
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d115      	bne.n	8014114 <etharp_query+0xc4>
    is_new_entry = 1;
 80140e8:	2301      	movs	r3, #1
 80140ea:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80140ec:	7c7a      	ldrb	r2, [r7, #17]
 80140ee:	4972      	ldr	r1, [pc, #456]	; (80142b8 <etharp_query+0x268>)
 80140f0:	4613      	mov	r3, r2
 80140f2:	005b      	lsls	r3, r3, #1
 80140f4:	4413      	add	r3, r2
 80140f6:	00db      	lsls	r3, r3, #3
 80140f8:	440b      	add	r3, r1
 80140fa:	3314      	adds	r3, #20
 80140fc:	2201      	movs	r2, #1
 80140fe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014100:	7c7a      	ldrb	r2, [r7, #17]
 8014102:	496d      	ldr	r1, [pc, #436]	; (80142b8 <etharp_query+0x268>)
 8014104:	4613      	mov	r3, r2
 8014106:	005b      	lsls	r3, r3, #1
 8014108:	4413      	add	r3, r2
 801410a:	00db      	lsls	r3, r3, #3
 801410c:	440b      	add	r3, r1
 801410e:	3308      	adds	r3, #8
 8014110:	68fa      	ldr	r2, [r7, #12]
 8014112:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014114:	7c7a      	ldrb	r2, [r7, #17]
 8014116:	4968      	ldr	r1, [pc, #416]	; (80142b8 <etharp_query+0x268>)
 8014118:	4613      	mov	r3, r2
 801411a:	005b      	lsls	r3, r3, #1
 801411c:	4413      	add	r3, r2
 801411e:	00db      	lsls	r3, r3, #3
 8014120:	440b      	add	r3, r1
 8014122:	3314      	adds	r3, #20
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	2b01      	cmp	r3, #1
 8014128:	d011      	beq.n	801414e <etharp_query+0xfe>
 801412a:	7c7a      	ldrb	r2, [r7, #17]
 801412c:	4962      	ldr	r1, [pc, #392]	; (80142b8 <etharp_query+0x268>)
 801412e:	4613      	mov	r3, r2
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	4413      	add	r3, r2
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	440b      	add	r3, r1
 8014138:	3314      	adds	r3, #20
 801413a:	781b      	ldrb	r3, [r3, #0]
 801413c:	2b01      	cmp	r3, #1
 801413e:	d806      	bhi.n	801414e <etharp_query+0xfe>
 8014140:	4b5a      	ldr	r3, [pc, #360]	; (80142ac <etharp_query+0x25c>)
 8014142:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014146:	495d      	ldr	r1, [pc, #372]	; (80142bc <etharp_query+0x26c>)
 8014148:	485a      	ldr	r0, [pc, #360]	; (80142b4 <etharp_query+0x264>)
 801414a:	f001 fe51 	bl	8015df0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801414e:	6a3b      	ldr	r3, [r7, #32]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d102      	bne.n	801415a <etharp_query+0x10a>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	2b00      	cmp	r3, #0
 8014158:	d10c      	bne.n	8014174 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801415a:	68b9      	ldr	r1, [r7, #8]
 801415c:	68f8      	ldr	r0, [r7, #12]
 801415e:	f000 f963 	bl	8014428 <etharp_request>
 8014162:	4603      	mov	r3, r0
 8014164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d102      	bne.n	8014174 <etharp_query+0x124>
      return result;
 801416e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014172:	e096      	b.n	80142a2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d106      	bne.n	8014188 <etharp_query+0x138>
 801417a:	4b4c      	ldr	r3, [pc, #304]	; (80142ac <etharp_query+0x25c>)
 801417c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014180:	494f      	ldr	r1, [pc, #316]	; (80142c0 <etharp_query+0x270>)
 8014182:	484c      	ldr	r0, [pc, #304]	; (80142b4 <etharp_query+0x264>)
 8014184:	f001 fe34 	bl	8015df0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014188:	7c7a      	ldrb	r2, [r7, #17]
 801418a:	494b      	ldr	r1, [pc, #300]	; (80142b8 <etharp_query+0x268>)
 801418c:	4613      	mov	r3, r2
 801418e:	005b      	lsls	r3, r3, #1
 8014190:	4413      	add	r3, r2
 8014192:	00db      	lsls	r3, r3, #3
 8014194:	440b      	add	r3, r1
 8014196:	3314      	adds	r3, #20
 8014198:	781b      	ldrb	r3, [r3, #0]
 801419a:	2b01      	cmp	r3, #1
 801419c:	d917      	bls.n	80141ce <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801419e:	4a49      	ldr	r2, [pc, #292]	; (80142c4 <etharp_query+0x274>)
 80141a0:	7c7b      	ldrb	r3, [r7, #17]
 80141a2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80141a4:	7c7a      	ldrb	r2, [r7, #17]
 80141a6:	4613      	mov	r3, r2
 80141a8:	005b      	lsls	r3, r3, #1
 80141aa:	4413      	add	r3, r2
 80141ac:	00db      	lsls	r3, r3, #3
 80141ae:	3308      	adds	r3, #8
 80141b0:	4a41      	ldr	r2, [pc, #260]	; (80142b8 <etharp_query+0x268>)
 80141b2:	4413      	add	r3, r2
 80141b4:	3304      	adds	r3, #4
 80141b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80141ba:	9200      	str	r2, [sp, #0]
 80141bc:	697a      	ldr	r2, [r7, #20]
 80141be:	6879      	ldr	r1, [r7, #4]
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f001 fc6f 	bl	8015aa4 <ethernet_output>
 80141c6:	4603      	mov	r3, r0
 80141c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141cc:	e067      	b.n	801429e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80141ce:	7c7a      	ldrb	r2, [r7, #17]
 80141d0:	4939      	ldr	r1, [pc, #228]	; (80142b8 <etharp_query+0x268>)
 80141d2:	4613      	mov	r3, r2
 80141d4:	005b      	lsls	r3, r3, #1
 80141d6:	4413      	add	r3, r2
 80141d8:	00db      	lsls	r3, r3, #3
 80141da:	440b      	add	r3, r1
 80141dc:	3314      	adds	r3, #20
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	2b01      	cmp	r3, #1
 80141e2:	d15c      	bne.n	801429e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80141e4:	2300      	movs	r3, #0
 80141e6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	61fb      	str	r3, [r7, #28]
    while (p) {
 80141ec:	e01c      	b.n	8014228 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80141ee:	69fb      	ldr	r3, [r7, #28]
 80141f0:	895a      	ldrh	r2, [r3, #10]
 80141f2:	69fb      	ldr	r3, [r7, #28]
 80141f4:	891b      	ldrh	r3, [r3, #8]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d10a      	bne.n	8014210 <etharp_query+0x1c0>
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d006      	beq.n	8014210 <etharp_query+0x1c0>
 8014202:	4b2a      	ldr	r3, [pc, #168]	; (80142ac <etharp_query+0x25c>)
 8014204:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014208:	492f      	ldr	r1, [pc, #188]	; (80142c8 <etharp_query+0x278>)
 801420a:	482a      	ldr	r0, [pc, #168]	; (80142b4 <etharp_query+0x264>)
 801420c:	f001 fdf0 	bl	8015df0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014210:	69fb      	ldr	r3, [r7, #28]
 8014212:	7b1b      	ldrb	r3, [r3, #12]
 8014214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014218:	2b00      	cmp	r3, #0
 801421a:	d002      	beq.n	8014222 <etharp_query+0x1d2>
        copy_needed = 1;
 801421c:	2301      	movs	r3, #1
 801421e:	61bb      	str	r3, [r7, #24]
        break;
 8014220:	e005      	b.n	801422e <etharp_query+0x1de>
      }
      p = p->next;
 8014222:	69fb      	ldr	r3, [r7, #28]
 8014224:	681b      	ldr	r3, [r3, #0]
 8014226:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014228:	69fb      	ldr	r3, [r7, #28]
 801422a:	2b00      	cmp	r3, #0
 801422c:	d1df      	bne.n	80141ee <etharp_query+0x19e>
    }
    if (copy_needed) {
 801422e:	69bb      	ldr	r3, [r7, #24]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d007      	beq.n	8014244 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014234:	687a      	ldr	r2, [r7, #4]
 8014236:	f44f 7120 	mov.w	r1, #640	; 0x280
 801423a:	200e      	movs	r0, #14
 801423c:	f7f9 fcfc 	bl	800dc38 <pbuf_clone>
 8014240:	61f8      	str	r0, [r7, #28]
 8014242:	e004      	b.n	801424e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014248:	69f8      	ldr	r0, [r7, #28]
 801424a:	f7f9 fb33 	bl	800d8b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801424e:	69fb      	ldr	r3, [r7, #28]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d021      	beq.n	8014298 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014254:	7c7a      	ldrb	r2, [r7, #17]
 8014256:	4918      	ldr	r1, [pc, #96]	; (80142b8 <etharp_query+0x268>)
 8014258:	4613      	mov	r3, r2
 801425a:	005b      	lsls	r3, r3, #1
 801425c:	4413      	add	r3, r2
 801425e:	00db      	lsls	r3, r3, #3
 8014260:	440b      	add	r3, r1
 8014262:	681b      	ldr	r3, [r3, #0]
 8014264:	2b00      	cmp	r3, #0
 8014266:	d00a      	beq.n	801427e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014268:	7c7a      	ldrb	r2, [r7, #17]
 801426a:	4913      	ldr	r1, [pc, #76]	; (80142b8 <etharp_query+0x268>)
 801426c:	4613      	mov	r3, r2
 801426e:	005b      	lsls	r3, r3, #1
 8014270:	4413      	add	r3, r2
 8014272:	00db      	lsls	r3, r3, #3
 8014274:	440b      	add	r3, r1
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	4618      	mov	r0, r3
 801427a:	f7f9 fa75 	bl	800d768 <pbuf_free>
      }
      arp_table[i].q = p;
 801427e:	7c7a      	ldrb	r2, [r7, #17]
 8014280:	490d      	ldr	r1, [pc, #52]	; (80142b8 <etharp_query+0x268>)
 8014282:	4613      	mov	r3, r2
 8014284:	005b      	lsls	r3, r3, #1
 8014286:	4413      	add	r3, r2
 8014288:	00db      	lsls	r3, r3, #3
 801428a:	440b      	add	r3, r1
 801428c:	69fa      	ldr	r2, [r7, #28]
 801428e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014290:	2300      	movs	r3, #0
 8014292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014296:	e002      	b.n	801429e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014298:	23ff      	movs	r3, #255	; 0xff
 801429a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801429e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80142a2:	4618      	mov	r0, r3
 80142a4:	3728      	adds	r7, #40	; 0x28
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}
 80142aa:	bf00      	nop
 80142ac:	08019330 	.word	0x08019330
 80142b0:	080194dc 	.word	0x080194dc
 80142b4:	080193a8 	.word	0x080193a8
 80142b8:	2000462c 	.word	0x2000462c
 80142bc:	080194ec 	.word	0x080194ec
 80142c0:	080194d0 	.word	0x080194d0
 80142c4:	2000471c 	.word	0x2000471c
 80142c8:	08019514 	.word	0x08019514

080142cc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b08a      	sub	sp, #40	; 0x28
 80142d0:	af02      	add	r7, sp, #8
 80142d2:	60f8      	str	r0, [r7, #12]
 80142d4:	60b9      	str	r1, [r7, #8]
 80142d6:	607a      	str	r2, [r7, #4]
 80142d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80142da:	2300      	movs	r3, #0
 80142dc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d106      	bne.n	80142f2 <etharp_raw+0x26>
 80142e4:	4b3a      	ldr	r3, [pc, #232]	; (80143d0 <etharp_raw+0x104>)
 80142e6:	f240 4257 	movw	r2, #1111	; 0x457
 80142ea:	493a      	ldr	r1, [pc, #232]	; (80143d4 <etharp_raw+0x108>)
 80142ec:	483a      	ldr	r0, [pc, #232]	; (80143d8 <etharp_raw+0x10c>)
 80142ee:	f001 fd7f 	bl	8015df0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80142f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80142f6:	211c      	movs	r1, #28
 80142f8:	200e      	movs	r0, #14
 80142fa:	f7f8 ff51 	bl	800d1a0 <pbuf_alloc>
 80142fe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	2b00      	cmp	r3, #0
 8014304:	d102      	bne.n	801430c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014306:	f04f 33ff 	mov.w	r3, #4294967295
 801430a:	e05d      	b.n	80143c8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801430c:	69bb      	ldr	r3, [r7, #24]
 801430e:	895b      	ldrh	r3, [r3, #10]
 8014310:	2b1b      	cmp	r3, #27
 8014312:	d806      	bhi.n	8014322 <etharp_raw+0x56>
 8014314:	4b2e      	ldr	r3, [pc, #184]	; (80143d0 <etharp_raw+0x104>)
 8014316:	f240 4262 	movw	r2, #1122	; 0x462
 801431a:	4930      	ldr	r1, [pc, #192]	; (80143dc <etharp_raw+0x110>)
 801431c:	482e      	ldr	r0, [pc, #184]	; (80143d8 <etharp_raw+0x10c>)
 801431e:	f001 fd67 	bl	8015df0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014322:	69bb      	ldr	r3, [r7, #24]
 8014324:	685b      	ldr	r3, [r3, #4]
 8014326:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014328:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801432a:	4618      	mov	r0, r3
 801432c:	f7f7 fe70 	bl	800c010 <lwip_htons>
 8014330:	4603      	mov	r3, r0
 8014332:	461a      	mov	r2, r3
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801433e:	2b06      	cmp	r3, #6
 8014340:	d006      	beq.n	8014350 <etharp_raw+0x84>
 8014342:	4b23      	ldr	r3, [pc, #140]	; (80143d0 <etharp_raw+0x104>)
 8014344:	f240 4269 	movw	r2, #1129	; 0x469
 8014348:	4925      	ldr	r1, [pc, #148]	; (80143e0 <etharp_raw+0x114>)
 801434a:	4823      	ldr	r0, [pc, #140]	; (80143d8 <etharp_raw+0x10c>)
 801434c:	f001 fd50 	bl	8015df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014350:	697b      	ldr	r3, [r7, #20]
 8014352:	3308      	adds	r3, #8
 8014354:	2206      	movs	r2, #6
 8014356:	6839      	ldr	r1, [r7, #0]
 8014358:	4618      	mov	r0, r3
 801435a:	f001 fd33 	bl	8015dc4 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801435e:	697b      	ldr	r3, [r7, #20]
 8014360:	3312      	adds	r3, #18
 8014362:	2206      	movs	r2, #6
 8014364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014366:	4618      	mov	r0, r3
 8014368:	f001 fd2c 	bl	8015dc4 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801436c:	697b      	ldr	r3, [r7, #20]
 801436e:	330e      	adds	r3, #14
 8014370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014372:	6812      	ldr	r2, [r2, #0]
 8014374:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014376:	697b      	ldr	r3, [r7, #20]
 8014378:	3318      	adds	r3, #24
 801437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801437c:	6812      	ldr	r2, [r2, #0]
 801437e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014380:	697b      	ldr	r3, [r7, #20]
 8014382:	2200      	movs	r2, #0
 8014384:	701a      	strb	r2, [r3, #0]
 8014386:	2200      	movs	r2, #0
 8014388:	f042 0201 	orr.w	r2, r2, #1
 801438c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801438e:	697b      	ldr	r3, [r7, #20]
 8014390:	2200      	movs	r2, #0
 8014392:	f042 0208 	orr.w	r2, r2, #8
 8014396:	709a      	strb	r2, [r3, #2]
 8014398:	2200      	movs	r2, #0
 801439a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801439c:	697b      	ldr	r3, [r7, #20]
 801439e:	2206      	movs	r2, #6
 80143a0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80143a2:	697b      	ldr	r3, [r7, #20]
 80143a4:	2204      	movs	r2, #4
 80143a6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80143a8:	f640 0306 	movw	r3, #2054	; 0x806
 80143ac:	9300      	str	r3, [sp, #0]
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	68ba      	ldr	r2, [r7, #8]
 80143b2:	69b9      	ldr	r1, [r7, #24]
 80143b4:	68f8      	ldr	r0, [r7, #12]
 80143b6:	f001 fb75 	bl	8015aa4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80143ba:	69b8      	ldr	r0, [r7, #24]
 80143bc:	f7f9 f9d4 	bl	800d768 <pbuf_free>
  p = NULL;
 80143c0:	2300      	movs	r3, #0
 80143c2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80143c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80143c8:	4618      	mov	r0, r3
 80143ca:	3720      	adds	r7, #32
 80143cc:	46bd      	mov	sp, r7
 80143ce:	bd80      	pop	{r7, pc}
 80143d0:	08019330 	.word	0x08019330
 80143d4:	08019480 	.word	0x08019480
 80143d8:	080193a8 	.word	0x080193a8
 80143dc:	08019530 	.word	0x08019530
 80143e0:	08019564 	.word	0x08019564

080143e4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b088      	sub	sp, #32
 80143e8:	af04      	add	r7, sp, #16
 80143ea:	60f8      	str	r0, [r7, #12]
 80143ec:	60b9      	str	r1, [r7, #8]
 80143ee:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014400:	2201      	movs	r2, #1
 8014402:	9203      	str	r2, [sp, #12]
 8014404:	68ba      	ldr	r2, [r7, #8]
 8014406:	9202      	str	r2, [sp, #8]
 8014408:	4a06      	ldr	r2, [pc, #24]	; (8014424 <etharp_request_dst+0x40>)
 801440a:	9201      	str	r2, [sp, #4]
 801440c:	9300      	str	r3, [sp, #0]
 801440e:	4603      	mov	r3, r0
 8014410:	687a      	ldr	r2, [r7, #4]
 8014412:	68f8      	ldr	r0, [r7, #12]
 8014414:	f7ff ff5a 	bl	80142cc <etharp_raw>
 8014418:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801441a:	4618      	mov	r0, r3
 801441c:	3710      	adds	r7, #16
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	08019b30 	.word	0x08019b30

08014428 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014428:	b580      	push	{r7, lr}
 801442a:	b082      	sub	sp, #8
 801442c:	af00      	add	r7, sp, #0
 801442e:	6078      	str	r0, [r7, #4]
 8014430:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014432:	4a05      	ldr	r2, [pc, #20]	; (8014448 <etharp_request+0x20>)
 8014434:	6839      	ldr	r1, [r7, #0]
 8014436:	6878      	ldr	r0, [r7, #4]
 8014438:	f7ff ffd4 	bl	80143e4 <etharp_request_dst>
 801443c:	4603      	mov	r3, r0
}
 801443e:	4618      	mov	r0, r3
 8014440:	3708      	adds	r7, #8
 8014442:	46bd      	mov	sp, r7
 8014444:	bd80      	pop	{r7, pc}
 8014446:	bf00      	nop
 8014448:	08019b28 	.word	0x08019b28

0801444c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b08e      	sub	sp, #56	; 0x38
 8014450:	af04      	add	r7, sp, #16
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014456:	4b79      	ldr	r3, [pc, #484]	; (801463c <icmp_input+0x1f0>)
 8014458:	689b      	ldr	r3, [r3, #8]
 801445a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	f003 030f 	and.w	r3, r3, #15
 8014464:	b2db      	uxtb	r3, r3
 8014466:	009b      	lsls	r3, r3, #2
 8014468:	b2db      	uxtb	r3, r3
 801446a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801446c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801446e:	2b13      	cmp	r3, #19
 8014470:	f240 80cd 	bls.w	801460e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	895b      	ldrh	r3, [r3, #10]
 8014478:	2b03      	cmp	r3, #3
 801447a:	f240 80ca 	bls.w	8014612 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	781b      	ldrb	r3, [r3, #0]
 8014484:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014488:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801448c:	2b00      	cmp	r3, #0
 801448e:	f000 80b7 	beq.w	8014600 <icmp_input+0x1b4>
 8014492:	2b08      	cmp	r3, #8
 8014494:	f040 80b7 	bne.w	8014606 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014498:	4b69      	ldr	r3, [pc, #420]	; (8014640 <icmp_input+0x1f4>)
 801449a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801449c:	4b67      	ldr	r3, [pc, #412]	; (801463c <icmp_input+0x1f0>)
 801449e:	695b      	ldr	r3, [r3, #20]
 80144a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80144a4:	2be0      	cmp	r3, #224	; 0xe0
 80144a6:	f000 80bb 	beq.w	8014620 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80144aa:	4b64      	ldr	r3, [pc, #400]	; (801463c <icmp_input+0x1f0>)
 80144ac:	695b      	ldr	r3, [r3, #20]
 80144ae:	4a63      	ldr	r2, [pc, #396]	; (801463c <icmp_input+0x1f0>)
 80144b0:	6812      	ldr	r2, [r2, #0]
 80144b2:	4611      	mov	r1, r2
 80144b4:	4618      	mov	r0, r3
 80144b6:	f000 fbed 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 80144ba:	4603      	mov	r3, r0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	f040 80b1 	bne.w	8014624 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	891b      	ldrh	r3, [r3, #8]
 80144c6:	2b07      	cmp	r3, #7
 80144c8:	f240 80a5 	bls.w	8014616 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80144cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144ce:	330e      	adds	r3, #14
 80144d0:	4619      	mov	r1, r3
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	f7f9 f8b2 	bl	800d63c <pbuf_add_header>
 80144d8:	4603      	mov	r3, r0
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d04b      	beq.n	8014576 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	891a      	ldrh	r2, [r3, #8]
 80144e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144e4:	4413      	add	r3, r2
 80144e6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	891b      	ldrh	r3, [r3, #8]
 80144ec:	8b7a      	ldrh	r2, [r7, #26]
 80144ee:	429a      	cmp	r2, r3
 80144f0:	f0c0 809a 	bcc.w	8014628 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80144f4:	8b7b      	ldrh	r3, [r7, #26]
 80144f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144fa:	4619      	mov	r1, r3
 80144fc:	200e      	movs	r0, #14
 80144fe:	f7f8 fe4f 	bl	800d1a0 <pbuf_alloc>
 8014502:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014504:	697b      	ldr	r3, [r7, #20]
 8014506:	2b00      	cmp	r3, #0
 8014508:	f000 8090 	beq.w	801462c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801450c:	697b      	ldr	r3, [r7, #20]
 801450e:	895b      	ldrh	r3, [r3, #10]
 8014510:	461a      	mov	r2, r3
 8014512:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014514:	3308      	adds	r3, #8
 8014516:	429a      	cmp	r2, r3
 8014518:	d203      	bcs.n	8014522 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801451a:	6978      	ldr	r0, [r7, #20]
 801451c:	f7f9 f924 	bl	800d768 <pbuf_free>
          goto icmperr;
 8014520:	e085      	b.n	801462e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801452a:	4618      	mov	r0, r3
 801452c:	f001 fc4a 	bl	8015dc4 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014530:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014532:	4619      	mov	r1, r3
 8014534:	6978      	ldr	r0, [r7, #20]
 8014536:	f7f9 f891 	bl	800d65c <pbuf_remove_header>
 801453a:	4603      	mov	r3, r0
 801453c:	2b00      	cmp	r3, #0
 801453e:	d009      	beq.n	8014554 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014540:	4b40      	ldr	r3, [pc, #256]	; (8014644 <icmp_input+0x1f8>)
 8014542:	22b6      	movs	r2, #182	; 0xb6
 8014544:	4940      	ldr	r1, [pc, #256]	; (8014648 <icmp_input+0x1fc>)
 8014546:	4841      	ldr	r0, [pc, #260]	; (801464c <icmp_input+0x200>)
 8014548:	f001 fc52 	bl	8015df0 <iprintf>
          pbuf_free(r);
 801454c:	6978      	ldr	r0, [r7, #20]
 801454e:	f7f9 f90b 	bl	800d768 <pbuf_free>
          goto icmperr;
 8014552:	e06c      	b.n	801462e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014554:	6879      	ldr	r1, [r7, #4]
 8014556:	6978      	ldr	r0, [r7, #20]
 8014558:	f7f9 fa2a 	bl	800d9b0 <pbuf_copy>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d003      	beq.n	801456a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014562:	6978      	ldr	r0, [r7, #20]
 8014564:	f7f9 f900 	bl	800d768 <pbuf_free>
          goto icmperr;
 8014568:	e061      	b.n	801462e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801456a:	6878      	ldr	r0, [r7, #4]
 801456c:	f7f9 f8fc 	bl	800d768 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	607b      	str	r3, [r7, #4]
 8014574:	e00f      	b.n	8014596 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014576:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014578:	330e      	adds	r3, #14
 801457a:	4619      	mov	r1, r3
 801457c:	6878      	ldr	r0, [r7, #4]
 801457e:	f7f9 f86d 	bl	800d65c <pbuf_remove_header>
 8014582:	4603      	mov	r3, r0
 8014584:	2b00      	cmp	r3, #0
 8014586:	d006      	beq.n	8014596 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014588:	4b2e      	ldr	r3, [pc, #184]	; (8014644 <icmp_input+0x1f8>)
 801458a:	22c7      	movs	r2, #199	; 0xc7
 801458c:	4930      	ldr	r1, [pc, #192]	; (8014650 <icmp_input+0x204>)
 801458e:	482f      	ldr	r0, [pc, #188]	; (801464c <icmp_input+0x200>)
 8014590:	f001 fc2e 	bl	8015df0 <iprintf>
          goto icmperr;
 8014594:	e04b      	b.n	801462e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	685b      	ldr	r3, [r3, #4]
 801459a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801459c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801459e:	4619      	mov	r1, r3
 80145a0:	6878      	ldr	r0, [r7, #4]
 80145a2:	f7f9 f84b 	bl	800d63c <pbuf_add_header>
 80145a6:	4603      	mov	r3, r0
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d12b      	bne.n	8014604 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	685b      	ldr	r3, [r3, #4]
 80145b0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80145b2:	69fb      	ldr	r3, [r7, #28]
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80145ba:	4b20      	ldr	r3, [pc, #128]	; (801463c <icmp_input+0x1f0>)
 80145bc:	691a      	ldr	r2, [r3, #16]
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80145c2:	693b      	ldr	r3, [r7, #16]
 80145c4:	2200      	movs	r2, #0
 80145c6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80145c8:	693b      	ldr	r3, [r7, #16]
 80145ca:	2200      	movs	r2, #0
 80145cc:	709a      	strb	r2, [r3, #2]
 80145ce:	2200      	movs	r2, #0
 80145d0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	22ff      	movs	r2, #255	; 0xff
 80145d6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2200      	movs	r2, #0
 80145dc:	729a      	strb	r2, [r3, #10]
 80145de:	2200      	movs	r2, #0
 80145e0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	9302      	str	r3, [sp, #8]
 80145e6:	2301      	movs	r3, #1
 80145e8:	9301      	str	r3, [sp, #4]
 80145ea:	2300      	movs	r3, #0
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	23ff      	movs	r3, #255	; 0xff
 80145f0:	2200      	movs	r2, #0
 80145f2:	69f9      	ldr	r1, [r7, #28]
 80145f4:	6878      	ldr	r0, [r7, #4]
 80145f6:	f000 fa75 	bl	8014ae4 <ip4_output_if>
 80145fa:	4603      	mov	r3, r0
 80145fc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80145fe:	e001      	b.n	8014604 <icmp_input+0x1b8>
      break;
 8014600:	bf00      	nop
 8014602:	e000      	b.n	8014606 <icmp_input+0x1ba>
      break;
 8014604:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014606:	6878      	ldr	r0, [r7, #4]
 8014608:	f7f9 f8ae 	bl	800d768 <pbuf_free>
  return;
 801460c:	e013      	b.n	8014636 <icmp_input+0x1ea>
    goto lenerr;
 801460e:	bf00      	nop
 8014610:	e002      	b.n	8014618 <icmp_input+0x1cc>
    goto lenerr;
 8014612:	bf00      	nop
 8014614:	e000      	b.n	8014618 <icmp_input+0x1cc>
        goto lenerr;
 8014616:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014618:	6878      	ldr	r0, [r7, #4]
 801461a:	f7f9 f8a5 	bl	800d768 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801461e:	e00a      	b.n	8014636 <icmp_input+0x1ea>
        goto icmperr;
 8014620:	bf00      	nop
 8014622:	e004      	b.n	801462e <icmp_input+0x1e2>
        goto icmperr;
 8014624:	bf00      	nop
 8014626:	e002      	b.n	801462e <icmp_input+0x1e2>
          goto icmperr;
 8014628:	bf00      	nop
 801462a:	e000      	b.n	801462e <icmp_input+0x1e2>
          goto icmperr;
 801462c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801462e:	6878      	ldr	r0, [r7, #4]
 8014630:	f7f9 f89a 	bl	800d768 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014634:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014636:	3728      	adds	r7, #40	; 0x28
 8014638:	46bd      	mov	sp, r7
 801463a:	bd80      	pop	{r7, pc}
 801463c:	2000921c 	.word	0x2000921c
 8014640:	20009230 	.word	0x20009230
 8014644:	080195a8 	.word	0x080195a8
 8014648:	080195e0 	.word	0x080195e0
 801464c:	08019618 	.word	0x08019618
 8014650:	08019640 	.word	0x08019640

08014654 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014654:	b580      	push	{r7, lr}
 8014656:	b082      	sub	sp, #8
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	460b      	mov	r3, r1
 801465e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014660:	78fb      	ldrb	r3, [r7, #3]
 8014662:	461a      	mov	r2, r3
 8014664:	2103      	movs	r1, #3
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f000 f814 	bl	8014694 <icmp_send_response>
}
 801466c:	bf00      	nop
 801466e:	3708      	adds	r7, #8
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b082      	sub	sp, #8
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	460b      	mov	r3, r1
 801467e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014680:	78fb      	ldrb	r3, [r7, #3]
 8014682:	461a      	mov	r2, r3
 8014684:	210b      	movs	r1, #11
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f000 f804 	bl	8014694 <icmp_send_response>
}
 801468c:	bf00      	nop
 801468e:	3708      	adds	r7, #8
 8014690:	46bd      	mov	sp, r7
 8014692:	bd80      	pop	{r7, pc}

08014694 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014694:	b580      	push	{r7, lr}
 8014696:	b08c      	sub	sp, #48	; 0x30
 8014698:	af04      	add	r7, sp, #16
 801469a:	6078      	str	r0, [r7, #4]
 801469c:	460b      	mov	r3, r1
 801469e:	70fb      	strb	r3, [r7, #3]
 80146a0:	4613      	mov	r3, r2
 80146a2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80146a4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146a8:	2124      	movs	r1, #36	; 0x24
 80146aa:	2022      	movs	r0, #34	; 0x22
 80146ac:	f7f8 fd78 	bl	800d1a0 <pbuf_alloc>
 80146b0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80146b2:	69fb      	ldr	r3, [r7, #28]
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	d04c      	beq.n	8014752 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80146b8:	69fb      	ldr	r3, [r7, #28]
 80146ba:	895b      	ldrh	r3, [r3, #10]
 80146bc:	2b23      	cmp	r3, #35	; 0x23
 80146be:	d806      	bhi.n	80146ce <icmp_send_response+0x3a>
 80146c0:	4b26      	ldr	r3, [pc, #152]	; (801475c <icmp_send_response+0xc8>)
 80146c2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80146c6:	4926      	ldr	r1, [pc, #152]	; (8014760 <icmp_send_response+0xcc>)
 80146c8:	4826      	ldr	r0, [pc, #152]	; (8014764 <icmp_send_response+0xd0>)
 80146ca:	f001 fb91 	bl	8015df0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	685b      	ldr	r3, [r3, #4]
 80146d2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80146d4:	69fb      	ldr	r3, [r7, #28]
 80146d6:	685b      	ldr	r3, [r3, #4]
 80146d8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80146da:	697b      	ldr	r3, [r7, #20]
 80146dc:	78fa      	ldrb	r2, [r7, #3]
 80146de:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80146e0:	697b      	ldr	r3, [r7, #20]
 80146e2:	78ba      	ldrb	r2, [r7, #2]
 80146e4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80146e6:	697b      	ldr	r3, [r7, #20]
 80146e8:	2200      	movs	r2, #0
 80146ea:	711a      	strb	r2, [r3, #4]
 80146ec:	2200      	movs	r2, #0
 80146ee:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80146f0:	697b      	ldr	r3, [r7, #20]
 80146f2:	2200      	movs	r2, #0
 80146f4:	719a      	strb	r2, [r3, #6]
 80146f6:	2200      	movs	r2, #0
 80146f8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80146fa:	69fb      	ldr	r3, [r7, #28]
 80146fc:	685b      	ldr	r3, [r3, #4]
 80146fe:	f103 0008 	add.w	r0, r3, #8
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	221c      	movs	r2, #28
 8014708:	4619      	mov	r1, r3
 801470a:	f001 fb5b 	bl	8015dc4 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801470e:	69bb      	ldr	r3, [r7, #24]
 8014710:	68db      	ldr	r3, [r3, #12]
 8014712:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014714:	f107 030c 	add.w	r3, r7, #12
 8014718:	4618      	mov	r0, r3
 801471a:	f000 f825 	bl	8014768 <ip4_route>
 801471e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	2b00      	cmp	r3, #0
 8014724:	d011      	beq.n	801474a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014726:	697b      	ldr	r3, [r7, #20]
 8014728:	2200      	movs	r2, #0
 801472a:	709a      	strb	r2, [r3, #2]
 801472c:	2200      	movs	r2, #0
 801472e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014730:	f107 020c 	add.w	r2, r7, #12
 8014734:	693b      	ldr	r3, [r7, #16]
 8014736:	9302      	str	r3, [sp, #8]
 8014738:	2301      	movs	r3, #1
 801473a:	9301      	str	r3, [sp, #4]
 801473c:	2300      	movs	r3, #0
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	23ff      	movs	r3, #255	; 0xff
 8014742:	2100      	movs	r1, #0
 8014744:	69f8      	ldr	r0, [r7, #28]
 8014746:	f000 f9cd 	bl	8014ae4 <ip4_output_if>
  }
  pbuf_free(q);
 801474a:	69f8      	ldr	r0, [r7, #28]
 801474c:	f7f9 f80c 	bl	800d768 <pbuf_free>
 8014750:	e000      	b.n	8014754 <icmp_send_response+0xc0>
    return;
 8014752:	bf00      	nop
}
 8014754:	3720      	adds	r7, #32
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	080195a8 	.word	0x080195a8
 8014760:	08019674 	.word	0x08019674
 8014764:	08019618 	.word	0x08019618

08014768 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014768:	b480      	push	{r7}
 801476a:	b085      	sub	sp, #20
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014770:	4b33      	ldr	r3, [pc, #204]	; (8014840 <ip4_route+0xd8>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	60fb      	str	r3, [r7, #12]
 8014776:	e036      	b.n	80147e6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801477e:	f003 0301 	and.w	r3, r3, #1
 8014782:	b2db      	uxtb	r3, r3
 8014784:	2b00      	cmp	r3, #0
 8014786:	d02b      	beq.n	80147e0 <ip4_route+0x78>
 8014788:	68fb      	ldr	r3, [r7, #12]
 801478a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801478e:	089b      	lsrs	r3, r3, #2
 8014790:	f003 0301 	and.w	r3, r3, #1
 8014794:	b2db      	uxtb	r3, r3
 8014796:	2b00      	cmp	r3, #0
 8014798:	d022      	beq.n	80147e0 <ip4_route+0x78>
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	3304      	adds	r3, #4
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d01d      	beq.n	80147e0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681a      	ldr	r2, [r3, #0]
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	3304      	adds	r3, #4
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	405a      	eors	r2, r3
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	3308      	adds	r3, #8
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	4013      	ands	r3, r2
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d101      	bne.n	80147c0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80147bc:	68fb      	ldr	r3, [r7, #12]
 80147be:	e038      	b.n	8014832 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147c6:	f003 0302 	and.w	r3, r3, #2
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d108      	bne.n	80147e0 <ip4_route+0x78>
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681a      	ldr	r2, [r3, #0]
 80147d2:	68fb      	ldr	r3, [r7, #12]
 80147d4:	330c      	adds	r3, #12
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	429a      	cmp	r2, r3
 80147da:	d101      	bne.n	80147e0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	e028      	b.n	8014832 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80147e0:	68fb      	ldr	r3, [r7, #12]
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	60fb      	str	r3, [r7, #12]
 80147e6:	68fb      	ldr	r3, [r7, #12]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d1c5      	bne.n	8014778 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80147ec:	4b15      	ldr	r3, [pc, #84]	; (8014844 <ip4_route+0xdc>)
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d01a      	beq.n	801482a <ip4_route+0xc2>
 80147f4:	4b13      	ldr	r3, [pc, #76]	; (8014844 <ip4_route+0xdc>)
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80147fc:	f003 0301 	and.w	r3, r3, #1
 8014800:	2b00      	cmp	r3, #0
 8014802:	d012      	beq.n	801482a <ip4_route+0xc2>
 8014804:	4b0f      	ldr	r3, [pc, #60]	; (8014844 <ip4_route+0xdc>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801480c:	f003 0304 	and.w	r3, r3, #4
 8014810:	2b00      	cmp	r3, #0
 8014812:	d00a      	beq.n	801482a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014814:	4b0b      	ldr	r3, [pc, #44]	; (8014844 <ip4_route+0xdc>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	3304      	adds	r3, #4
 801481a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801481c:	2b00      	cmp	r3, #0
 801481e:	d004      	beq.n	801482a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014820:	687b      	ldr	r3, [r7, #4]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	b2db      	uxtb	r3, r3
 8014826:	2b7f      	cmp	r3, #127	; 0x7f
 8014828:	d101      	bne.n	801482e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801482a:	2300      	movs	r3, #0
 801482c:	e001      	b.n	8014832 <ip4_route+0xca>
  }

  return netif_default;
 801482e:	4b05      	ldr	r3, [pc, #20]	; (8014844 <ip4_route+0xdc>)
 8014830:	681b      	ldr	r3, [r3, #0]
}
 8014832:	4618      	mov	r0, r3
 8014834:	3714      	adds	r7, #20
 8014836:	46bd      	mov	sp, r7
 8014838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483c:	4770      	bx	lr
 801483e:	bf00      	nop
 8014840:	2000c920 	.word	0x2000c920
 8014844:	2000c924 	.word	0x2000c924

08014848 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014856:	f003 0301 	and.w	r3, r3, #1
 801485a:	b2db      	uxtb	r3, r3
 801485c:	2b00      	cmp	r3, #0
 801485e:	d016      	beq.n	801488e <ip4_input_accept+0x46>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	3304      	adds	r3, #4
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d011      	beq.n	801488e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801486a:	4b0b      	ldr	r3, [pc, #44]	; (8014898 <ip4_input_accept+0x50>)
 801486c:	695a      	ldr	r2, [r3, #20]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	3304      	adds	r3, #4
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	429a      	cmp	r2, r3
 8014876:	d008      	beq.n	801488a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014878:	4b07      	ldr	r3, [pc, #28]	; (8014898 <ip4_input_accept+0x50>)
 801487a:	695b      	ldr	r3, [r3, #20]
 801487c:	6879      	ldr	r1, [r7, #4]
 801487e:	4618      	mov	r0, r3
 8014880:	f000 fa08 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8014884:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014886:	2b00      	cmp	r3, #0
 8014888:	d001      	beq.n	801488e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801488a:	2301      	movs	r3, #1
 801488c:	e000      	b.n	8014890 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801488e:	2300      	movs	r3, #0
}
 8014890:	4618      	mov	r0, r3
 8014892:	3708      	adds	r7, #8
 8014894:	46bd      	mov	sp, r7
 8014896:	bd80      	pop	{r7, pc}
 8014898:	2000921c 	.word	0x2000921c

0801489c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801489c:	b580      	push	{r7, lr}
 801489e:	b086      	sub	sp, #24
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	6078      	str	r0, [r7, #4]
 80148a4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80148ac:	697b      	ldr	r3, [r7, #20]
 80148ae:	781b      	ldrb	r3, [r3, #0]
 80148b0:	091b      	lsrs	r3, r3, #4
 80148b2:	b2db      	uxtb	r3, r3
 80148b4:	2b04      	cmp	r3, #4
 80148b6:	d004      	beq.n	80148c2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f7f8 ff55 	bl	800d768 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80148be:	2300      	movs	r3, #0
 80148c0:	e107      	b.n	8014ad2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80148c2:	697b      	ldr	r3, [r7, #20]
 80148c4:	781b      	ldrb	r3, [r3, #0]
 80148c6:	f003 030f 	and.w	r3, r3, #15
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	009b      	lsls	r3, r3, #2
 80148ce:	b2db      	uxtb	r3, r3
 80148d0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80148d2:	697b      	ldr	r3, [r7, #20]
 80148d4:	885b      	ldrh	r3, [r3, #2]
 80148d6:	b29b      	uxth	r3, r3
 80148d8:	4618      	mov	r0, r3
 80148da:	f7f7 fb99 	bl	800c010 <lwip_htons>
 80148de:	4603      	mov	r3, r0
 80148e0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	891b      	ldrh	r3, [r3, #8]
 80148e6:	89ba      	ldrh	r2, [r7, #12]
 80148e8:	429a      	cmp	r2, r3
 80148ea:	d204      	bcs.n	80148f6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80148ec:	89bb      	ldrh	r3, [r7, #12]
 80148ee:	4619      	mov	r1, r3
 80148f0:	6878      	ldr	r0, [r7, #4]
 80148f2:	f7f8 fdb3 	bl	800d45c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	895b      	ldrh	r3, [r3, #10]
 80148fa:	89fa      	ldrh	r2, [r7, #14]
 80148fc:	429a      	cmp	r2, r3
 80148fe:	d807      	bhi.n	8014910 <ip4_input+0x74>
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	891b      	ldrh	r3, [r3, #8]
 8014904:	89ba      	ldrh	r2, [r7, #12]
 8014906:	429a      	cmp	r2, r3
 8014908:	d802      	bhi.n	8014910 <ip4_input+0x74>
 801490a:	89fb      	ldrh	r3, [r7, #14]
 801490c:	2b13      	cmp	r3, #19
 801490e:	d804      	bhi.n	801491a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f7f8 ff29 	bl	800d768 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014916:	2300      	movs	r3, #0
 8014918:	e0db      	b.n	8014ad2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801491a:	697b      	ldr	r3, [r7, #20]
 801491c:	691b      	ldr	r3, [r3, #16]
 801491e:	4a6f      	ldr	r2, [pc, #444]	; (8014adc <ip4_input+0x240>)
 8014920:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014922:	697b      	ldr	r3, [r7, #20]
 8014924:	68db      	ldr	r3, [r3, #12]
 8014926:	4a6d      	ldr	r2, [pc, #436]	; (8014adc <ip4_input+0x240>)
 8014928:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801492a:	4b6c      	ldr	r3, [pc, #432]	; (8014adc <ip4_input+0x240>)
 801492c:	695b      	ldr	r3, [r3, #20]
 801492e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014932:	2be0      	cmp	r3, #224	; 0xe0
 8014934:	d112      	bne.n	801495c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801493c:	f003 0301 	and.w	r3, r3, #1
 8014940:	b2db      	uxtb	r3, r3
 8014942:	2b00      	cmp	r3, #0
 8014944:	d007      	beq.n	8014956 <ip4_input+0xba>
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	3304      	adds	r3, #4
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	2b00      	cmp	r3, #0
 801494e:	d002      	beq.n	8014956 <ip4_input+0xba>
      netif = inp;
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	613b      	str	r3, [r7, #16]
 8014954:	e02a      	b.n	80149ac <ip4_input+0x110>
    } else {
      netif = NULL;
 8014956:	2300      	movs	r3, #0
 8014958:	613b      	str	r3, [r7, #16]
 801495a:	e027      	b.n	80149ac <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801495c:	6838      	ldr	r0, [r7, #0]
 801495e:	f7ff ff73 	bl	8014848 <ip4_input_accept>
 8014962:	4603      	mov	r3, r0
 8014964:	2b00      	cmp	r3, #0
 8014966:	d002      	beq.n	801496e <ip4_input+0xd2>
      netif = inp;
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	613b      	str	r3, [r7, #16]
 801496c:	e01e      	b.n	80149ac <ip4_input+0x110>
    } else {
      netif = NULL;
 801496e:	2300      	movs	r3, #0
 8014970:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014972:	4b5a      	ldr	r3, [pc, #360]	; (8014adc <ip4_input+0x240>)
 8014974:	695b      	ldr	r3, [r3, #20]
 8014976:	b2db      	uxtb	r3, r3
 8014978:	2b7f      	cmp	r3, #127	; 0x7f
 801497a:	d017      	beq.n	80149ac <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801497c:	4b58      	ldr	r3, [pc, #352]	; (8014ae0 <ip4_input+0x244>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	613b      	str	r3, [r7, #16]
 8014982:	e00e      	b.n	80149a2 <ip4_input+0x106>
          if (netif == inp) {
 8014984:	693a      	ldr	r2, [r7, #16]
 8014986:	683b      	ldr	r3, [r7, #0]
 8014988:	429a      	cmp	r2, r3
 801498a:	d006      	beq.n	801499a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801498c:	6938      	ldr	r0, [r7, #16]
 801498e:	f7ff ff5b 	bl	8014848 <ip4_input_accept>
 8014992:	4603      	mov	r3, r0
 8014994:	2b00      	cmp	r3, #0
 8014996:	d108      	bne.n	80149aa <ip4_input+0x10e>
 8014998:	e000      	b.n	801499c <ip4_input+0x100>
            continue;
 801499a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	613b      	str	r3, [r7, #16]
 80149a2:	693b      	ldr	r3, [r7, #16]
 80149a4:	2b00      	cmp	r3, #0
 80149a6:	d1ed      	bne.n	8014984 <ip4_input+0xe8>
 80149a8:	e000      	b.n	80149ac <ip4_input+0x110>
            break;
 80149aa:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80149ac:	4b4b      	ldr	r3, [pc, #300]	; (8014adc <ip4_input+0x240>)
 80149ae:	691b      	ldr	r3, [r3, #16]
 80149b0:	6839      	ldr	r1, [r7, #0]
 80149b2:	4618      	mov	r0, r3
 80149b4:	f000 f96e 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 80149b8:	4603      	mov	r3, r0
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d105      	bne.n	80149ca <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80149be:	4b47      	ldr	r3, [pc, #284]	; (8014adc <ip4_input+0x240>)
 80149c0:	691b      	ldr	r3, [r3, #16]
 80149c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80149c6:	2be0      	cmp	r3, #224	; 0xe0
 80149c8:	d104      	bne.n	80149d4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f7f8 fecc 	bl	800d768 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80149d0:	2300      	movs	r3, #0
 80149d2:	e07e      	b.n	8014ad2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80149d4:	693b      	ldr	r3, [r7, #16]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d104      	bne.n	80149e4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80149da:	6878      	ldr	r0, [r7, #4]
 80149dc:	f7f8 fec4 	bl	800d768 <pbuf_free>
    return ERR_OK;
 80149e0:	2300      	movs	r3, #0
 80149e2:	e076      	b.n	8014ad2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80149e4:	697b      	ldr	r3, [r7, #20]
 80149e6:	88db      	ldrh	r3, [r3, #6]
 80149e8:	b29b      	uxth	r3, r3
 80149ea:	461a      	mov	r2, r3
 80149ec:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80149f0:	4013      	ands	r3, r2
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d00b      	beq.n	8014a0e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 fc92 	bl	8015320 <ip4_reass>
 80149fc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d101      	bne.n	8014a08 <ip4_input+0x16c>
      return ERR_OK;
 8014a04:	2300      	movs	r3, #0
 8014a06:	e064      	b.n	8014ad2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	685b      	ldr	r3, [r3, #4]
 8014a0c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014a0e:	4a33      	ldr	r2, [pc, #204]	; (8014adc <ip4_input+0x240>)
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014a14:	4a31      	ldr	r2, [pc, #196]	; (8014adc <ip4_input+0x240>)
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014a1a:	4a30      	ldr	r2, [pc, #192]	; (8014adc <ip4_input+0x240>)
 8014a1c:	697b      	ldr	r3, [r7, #20]
 8014a1e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014a20:	697b      	ldr	r3, [r7, #20]
 8014a22:	781b      	ldrb	r3, [r3, #0]
 8014a24:	f003 030f 	and.w	r3, r3, #15
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	009b      	lsls	r3, r3, #2
 8014a2c:	b2db      	uxtb	r3, r3
 8014a2e:	b29a      	uxth	r2, r3
 8014a30:	4b2a      	ldr	r3, [pc, #168]	; (8014adc <ip4_input+0x240>)
 8014a32:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014a34:	89fb      	ldrh	r3, [r7, #14]
 8014a36:	4619      	mov	r1, r3
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7f8 fe0f 	bl	800d65c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	7a5b      	ldrb	r3, [r3, #9]
 8014a42:	2b11      	cmp	r3, #17
 8014a44:	d006      	beq.n	8014a54 <ip4_input+0x1b8>
 8014a46:	2b11      	cmp	r3, #17
 8014a48:	dc13      	bgt.n	8014a72 <ip4_input+0x1d6>
 8014a4a:	2b01      	cmp	r3, #1
 8014a4c:	d00c      	beq.n	8014a68 <ip4_input+0x1cc>
 8014a4e:	2b06      	cmp	r3, #6
 8014a50:	d005      	beq.n	8014a5e <ip4_input+0x1c2>
 8014a52:	e00e      	b.n	8014a72 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014a54:	6839      	ldr	r1, [r7, #0]
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f7fe fc68 	bl	801332c <udp_input>
        break;
 8014a5c:	e026      	b.n	8014aac <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014a5e:	6839      	ldr	r1, [r7, #0]
 8014a60:	6878      	ldr	r0, [r7, #4]
 8014a62:	f7fa fcb5 	bl	800f3d0 <tcp_input>
        break;
 8014a66:	e021      	b.n	8014aac <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014a68:	6839      	ldr	r1, [r7, #0]
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f7ff fcee 	bl	801444c <icmp_input>
        break;
 8014a70:	e01c      	b.n	8014aac <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a72:	4b1a      	ldr	r3, [pc, #104]	; (8014adc <ip4_input+0x240>)
 8014a74:	695b      	ldr	r3, [r3, #20]
 8014a76:	6939      	ldr	r1, [r7, #16]
 8014a78:	4618      	mov	r0, r3
 8014a7a:	f000 f90b 	bl	8014c94 <ip4_addr_isbroadcast_u32>
 8014a7e:	4603      	mov	r3, r0
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d10f      	bne.n	8014aa4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014a84:	4b15      	ldr	r3, [pc, #84]	; (8014adc <ip4_input+0x240>)
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014a8c:	2be0      	cmp	r3, #224	; 0xe0
 8014a8e:	d009      	beq.n	8014aa4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014a90:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014a94:	4619      	mov	r1, r3
 8014a96:	6878      	ldr	r0, [r7, #4]
 8014a98:	f7f8 fe53 	bl	800d742 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014a9c:	2102      	movs	r1, #2
 8014a9e:	6878      	ldr	r0, [r7, #4]
 8014aa0:	f7ff fdd8 	bl	8014654 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014aa4:	6878      	ldr	r0, [r7, #4]
 8014aa6:	f7f8 fe5f 	bl	800d768 <pbuf_free>
        break;
 8014aaa:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014aac:	4b0b      	ldr	r3, [pc, #44]	; (8014adc <ip4_input+0x240>)
 8014aae:	2200      	movs	r2, #0
 8014ab0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014ab2:	4b0a      	ldr	r3, [pc, #40]	; (8014adc <ip4_input+0x240>)
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014ab8:	4b08      	ldr	r3, [pc, #32]	; (8014adc <ip4_input+0x240>)
 8014aba:	2200      	movs	r2, #0
 8014abc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014abe:	4b07      	ldr	r3, [pc, #28]	; (8014adc <ip4_input+0x240>)
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014ac4:	4b05      	ldr	r3, [pc, #20]	; (8014adc <ip4_input+0x240>)
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014aca:	4b04      	ldr	r3, [pc, #16]	; (8014adc <ip4_input+0x240>)
 8014acc:	2200      	movs	r2, #0
 8014ace:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014ad0:	2300      	movs	r3, #0
}
 8014ad2:	4618      	mov	r0, r3
 8014ad4:	3718      	adds	r7, #24
 8014ad6:	46bd      	mov	sp, r7
 8014ad8:	bd80      	pop	{r7, pc}
 8014ada:	bf00      	nop
 8014adc:	2000921c 	.word	0x2000921c
 8014ae0:	2000c920 	.word	0x2000c920

08014ae4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014ae4:	b580      	push	{r7, lr}
 8014ae6:	b08a      	sub	sp, #40	; 0x28
 8014ae8:	af04      	add	r7, sp, #16
 8014aea:	60f8      	str	r0, [r7, #12]
 8014aec:	60b9      	str	r1, [r7, #8]
 8014aee:	607a      	str	r2, [r7, #4]
 8014af0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014af2:	68bb      	ldr	r3, [r7, #8]
 8014af4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d009      	beq.n	8014b10 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014afc:	68bb      	ldr	r3, [r7, #8]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d003      	beq.n	8014b0a <ip4_output_if+0x26>
 8014b02:	68bb      	ldr	r3, [r7, #8]
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d102      	bne.n	8014b10 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b0c:	3304      	adds	r3, #4
 8014b0e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014b10:	78fa      	ldrb	r2, [r7, #3]
 8014b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b14:	9302      	str	r3, [sp, #8]
 8014b16:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014b1a:	9301      	str	r3, [sp, #4]
 8014b1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014b20:	9300      	str	r3, [sp, #0]
 8014b22:	4613      	mov	r3, r2
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	6979      	ldr	r1, [r7, #20]
 8014b28:	68f8      	ldr	r0, [r7, #12]
 8014b2a:	f000 f805 	bl	8014b38 <ip4_output_if_src>
 8014b2e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014b30:	4618      	mov	r0, r3
 8014b32:	3718      	adds	r7, #24
 8014b34:	46bd      	mov	sp, r7
 8014b36:	bd80      	pop	{r7, pc}

08014b38 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014b38:	b580      	push	{r7, lr}
 8014b3a:	b088      	sub	sp, #32
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
 8014b44:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014b46:	68fb      	ldr	r3, [r7, #12]
 8014b48:	7b9b      	ldrb	r3, [r3, #14]
 8014b4a:	2b01      	cmp	r3, #1
 8014b4c:	d006      	beq.n	8014b5c <ip4_output_if_src+0x24>
 8014b4e:	4b4b      	ldr	r3, [pc, #300]	; (8014c7c <ip4_output_if_src+0x144>)
 8014b50:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014b54:	494a      	ldr	r1, [pc, #296]	; (8014c80 <ip4_output_if_src+0x148>)
 8014b56:	484b      	ldr	r0, [pc, #300]	; (8014c84 <ip4_output_if_src+0x14c>)
 8014b58:	f001 f94a 	bl	8015df0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d060      	beq.n	8014c24 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014b62:	2314      	movs	r3, #20
 8014b64:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014b66:	2114      	movs	r1, #20
 8014b68:	68f8      	ldr	r0, [r7, #12]
 8014b6a:	f7f8 fd67 	bl	800d63c <pbuf_add_header>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d002      	beq.n	8014b7a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014b74:	f06f 0301 	mvn.w	r3, #1
 8014b78:	e07c      	b.n	8014c74 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	685b      	ldr	r3, [r3, #4]
 8014b7e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	895b      	ldrh	r3, [r3, #10]
 8014b84:	2b13      	cmp	r3, #19
 8014b86:	d806      	bhi.n	8014b96 <ip4_output_if_src+0x5e>
 8014b88:	4b3c      	ldr	r3, [pc, #240]	; (8014c7c <ip4_output_if_src+0x144>)
 8014b8a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014b8e:	493e      	ldr	r1, [pc, #248]	; (8014c88 <ip4_output_if_src+0x150>)
 8014b90:	483c      	ldr	r0, [pc, #240]	; (8014c84 <ip4_output_if_src+0x14c>)
 8014b92:	f001 f92d 	bl	8015df0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014b96:	69fb      	ldr	r3, [r7, #28]
 8014b98:	78fa      	ldrb	r2, [r7, #3]
 8014b9a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014b9c:	69fb      	ldr	r3, [r7, #28]
 8014b9e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014ba2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	681a      	ldr	r2, [r3, #0]
 8014ba8:	69fb      	ldr	r3, [r7, #28]
 8014baa:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014bac:	8b7b      	ldrh	r3, [r7, #26]
 8014bae:	089b      	lsrs	r3, r3, #2
 8014bb0:	b29b      	uxth	r3, r3
 8014bb2:	b2db      	uxtb	r3, r3
 8014bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bb8:	b2da      	uxtb	r2, r3
 8014bba:	69fb      	ldr	r3, [r7, #28]
 8014bbc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014bbe:	69fb      	ldr	r3, [r7, #28]
 8014bc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014bc4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	891b      	ldrh	r3, [r3, #8]
 8014bca:	4618      	mov	r0, r3
 8014bcc:	f7f7 fa20 	bl	800c010 <lwip_htons>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	461a      	mov	r2, r3
 8014bd4:	69fb      	ldr	r3, [r7, #28]
 8014bd6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014bd8:	69fb      	ldr	r3, [r7, #28]
 8014bda:	2200      	movs	r2, #0
 8014bdc:	719a      	strb	r2, [r3, #6]
 8014bde:	2200      	movs	r2, #0
 8014be0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014be2:	4b2a      	ldr	r3, [pc, #168]	; (8014c8c <ip4_output_if_src+0x154>)
 8014be4:	881b      	ldrh	r3, [r3, #0]
 8014be6:	4618      	mov	r0, r3
 8014be8:	f7f7 fa12 	bl	800c010 <lwip_htons>
 8014bec:	4603      	mov	r3, r0
 8014bee:	461a      	mov	r2, r3
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014bf4:	4b25      	ldr	r3, [pc, #148]	; (8014c8c <ip4_output_if_src+0x154>)
 8014bf6:	881b      	ldrh	r3, [r3, #0]
 8014bf8:	3301      	adds	r3, #1
 8014bfa:	b29a      	uxth	r2, r3
 8014bfc:	4b23      	ldr	r3, [pc, #140]	; (8014c8c <ip4_output_if_src+0x154>)
 8014bfe:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014c00:	68bb      	ldr	r3, [r7, #8]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d104      	bne.n	8014c10 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014c06:	4b22      	ldr	r3, [pc, #136]	; (8014c90 <ip4_output_if_src+0x158>)
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	69fb      	ldr	r3, [r7, #28]
 8014c0c:	60da      	str	r2, [r3, #12]
 8014c0e:	e003      	b.n	8014c18 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	681a      	ldr	r2, [r3, #0]
 8014c14:	69fb      	ldr	r3, [r7, #28]
 8014c16:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014c18:	69fb      	ldr	r3, [r7, #28]
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	729a      	strb	r2, [r3, #10]
 8014c1e:	2200      	movs	r2, #0
 8014c20:	72da      	strb	r2, [r3, #11]
 8014c22:	e00f      	b.n	8014c44 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	895b      	ldrh	r3, [r3, #10]
 8014c28:	2b13      	cmp	r3, #19
 8014c2a:	d802      	bhi.n	8014c32 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014c2c:	f06f 0301 	mvn.w	r3, #1
 8014c30:	e020      	b.n	8014c74 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	685b      	ldr	r3, [r3, #4]
 8014c36:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	691b      	ldr	r3, [r3, #16]
 8014c3c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014c3e:	f107 0314 	add.w	r3, r7, #20
 8014c42:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d00c      	beq.n	8014c66 <ip4_output_if_src+0x12e>
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	891a      	ldrh	r2, [r3, #8]
 8014c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014c54:	429a      	cmp	r2, r3
 8014c56:	d906      	bls.n	8014c66 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f000 fd4d 	bl	80156fc <ip4_frag>
 8014c62:	4603      	mov	r3, r0
 8014c64:	e006      	b.n	8014c74 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c68:	695b      	ldr	r3, [r3, #20]
 8014c6a:	687a      	ldr	r2, [r7, #4]
 8014c6c:	68f9      	ldr	r1, [r7, #12]
 8014c6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c70:	4798      	blx	r3
 8014c72:	4603      	mov	r3, r0
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	3720      	adds	r7, #32
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	080196a0 	.word	0x080196a0
 8014c80:	080196d4 	.word	0x080196d4
 8014c84:	080196e0 	.word	0x080196e0
 8014c88:	08019708 	.word	0x08019708
 8014c8c:	2000471e 	.word	0x2000471e
 8014c90:	08019b24 	.word	0x08019b24

08014c94 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014c94:	b480      	push	{r7}
 8014c96:	b085      	sub	sp, #20
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]
 8014c9c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ca8:	d002      	beq.n	8014cb0 <ip4_addr_isbroadcast_u32+0x1c>
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d101      	bne.n	8014cb4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014cb0:	2301      	movs	r3, #1
 8014cb2:	e02a      	b.n	8014d0a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014cb4:	683b      	ldr	r3, [r7, #0]
 8014cb6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014cba:	f003 0302 	and.w	r3, r3, #2
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d101      	bne.n	8014cc6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014cc2:	2300      	movs	r3, #0
 8014cc4:	e021      	b.n	8014d0a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	3304      	adds	r3, #4
 8014cca:	681b      	ldr	r3, [r3, #0]
 8014ccc:	687a      	ldr	r2, [r7, #4]
 8014cce:	429a      	cmp	r2, r3
 8014cd0:	d101      	bne.n	8014cd6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	e019      	b.n	8014d0a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014cd6:	68fa      	ldr	r2, [r7, #12]
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	3304      	adds	r3, #4
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	405a      	eors	r2, r3
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	3308      	adds	r3, #8
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	4013      	ands	r3, r2
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d10d      	bne.n	8014d08 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014cec:	683b      	ldr	r3, [r7, #0]
 8014cee:	3308      	adds	r3, #8
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	43da      	mvns	r2, r3
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014cf8:	683b      	ldr	r3, [r7, #0]
 8014cfa:	3308      	adds	r3, #8
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d101      	bne.n	8014d08 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014d04:	2301      	movs	r3, #1
 8014d06:	e000      	b.n	8014d0a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014d08:	2300      	movs	r3, #0
  }
}
 8014d0a:	4618      	mov	r0, r3
 8014d0c:	3714      	adds	r7, #20
 8014d0e:	46bd      	mov	sp, r7
 8014d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d14:	4770      	bx	lr
	...

08014d18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b084      	sub	sp, #16
 8014d1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014d1e:	2300      	movs	r3, #0
 8014d20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8014d22:	4b12      	ldr	r3, [pc, #72]	; (8014d6c <ip_reass_tmr+0x54>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014d28:	e018      	b.n	8014d5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	7fdb      	ldrb	r3, [r3, #31]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d00b      	beq.n	8014d4a <ip_reass_tmr+0x32>
      r->timer--;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	7fdb      	ldrb	r3, [r3, #31]
 8014d36:	3b01      	subs	r3, #1
 8014d38:	b2da      	uxtb	r2, r3
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	681b      	ldr	r3, [r3, #0]
 8014d46:	60fb      	str	r3, [r7, #12]
 8014d48:	e008      	b.n	8014d5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	681b      	ldr	r3, [r3, #0]
 8014d52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8014d54:	68b9      	ldr	r1, [r7, #8]
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 f80a 	bl	8014d70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	d1e3      	bne.n	8014d2a <ip_reass_tmr+0x12>
    }
  }
}
 8014d62:	bf00      	nop
 8014d64:	bf00      	nop
 8014d66:	3710      	adds	r7, #16
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	20004720 	.word	0x20004720

08014d70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b088      	sub	sp, #32
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8014d7e:	683a      	ldr	r2, [r7, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	429a      	cmp	r2, r3
 8014d84:	d105      	bne.n	8014d92 <ip_reass_free_complete_datagram+0x22>
 8014d86:	4b45      	ldr	r3, [pc, #276]	; (8014e9c <ip_reass_free_complete_datagram+0x12c>)
 8014d88:	22ab      	movs	r2, #171	; 0xab
 8014d8a:	4945      	ldr	r1, [pc, #276]	; (8014ea0 <ip_reass_free_complete_datagram+0x130>)
 8014d8c:	4845      	ldr	r0, [pc, #276]	; (8014ea4 <ip_reass_free_complete_datagram+0x134>)
 8014d8e:	f001 f82f 	bl	8015df0 <iprintf>
  if (prev != NULL) {
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d00a      	beq.n	8014dae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	687a      	ldr	r2, [r7, #4]
 8014d9e:	429a      	cmp	r2, r3
 8014da0:	d005      	beq.n	8014dae <ip_reass_free_complete_datagram+0x3e>
 8014da2:	4b3e      	ldr	r3, [pc, #248]	; (8014e9c <ip_reass_free_complete_datagram+0x12c>)
 8014da4:	22ad      	movs	r2, #173	; 0xad
 8014da6:	4940      	ldr	r1, [pc, #256]	; (8014ea8 <ip_reass_free_complete_datagram+0x138>)
 8014da8:	483e      	ldr	r0, [pc, #248]	; (8014ea4 <ip_reass_free_complete_datagram+0x134>)
 8014daa:	f001 f821 	bl	8015df0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	685b      	ldr	r3, [r3, #4]
 8014db2:	685b      	ldr	r3, [r3, #4]
 8014db4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8014db6:	697b      	ldr	r3, [r7, #20]
 8014db8:	889b      	ldrh	r3, [r3, #4]
 8014dba:	b29b      	uxth	r3, r3
 8014dbc:	2b00      	cmp	r3, #0
 8014dbe:	d12a      	bne.n	8014e16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	685b      	ldr	r3, [r3, #4]
 8014dc4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8014dc6:	697b      	ldr	r3, [r7, #20]
 8014dc8:	681a      	ldr	r2, [r3, #0]
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014dce:	69bb      	ldr	r3, [r7, #24]
 8014dd0:	6858      	ldr	r0, [r3, #4]
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	3308      	adds	r3, #8
 8014dd6:	2214      	movs	r2, #20
 8014dd8:	4619      	mov	r1, r3
 8014dda:	f000 fff3 	bl	8015dc4 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014dde:	2101      	movs	r1, #1
 8014de0:	69b8      	ldr	r0, [r7, #24]
 8014de2:	f7ff fc47 	bl	8014674 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8014de6:	69b8      	ldr	r0, [r7, #24]
 8014de8:	f7f8 fd4c 	bl	800d884 <pbuf_clen>
 8014dec:	4603      	mov	r3, r0
 8014dee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014df0:	8bfa      	ldrh	r2, [r7, #30]
 8014df2:	8a7b      	ldrh	r3, [r7, #18]
 8014df4:	4413      	add	r3, r2
 8014df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014dfa:	db05      	blt.n	8014e08 <ip_reass_free_complete_datagram+0x98>
 8014dfc:	4b27      	ldr	r3, [pc, #156]	; (8014e9c <ip_reass_free_complete_datagram+0x12c>)
 8014dfe:	22bc      	movs	r2, #188	; 0xbc
 8014e00:	492a      	ldr	r1, [pc, #168]	; (8014eac <ip_reass_free_complete_datagram+0x13c>)
 8014e02:	4828      	ldr	r0, [pc, #160]	; (8014ea4 <ip_reass_free_complete_datagram+0x134>)
 8014e04:	f000 fff4 	bl	8015df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e08:	8bfa      	ldrh	r2, [r7, #30]
 8014e0a:	8a7b      	ldrh	r3, [r7, #18]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014e10:	69b8      	ldr	r0, [r7, #24]
 8014e12:	f7f8 fca9 	bl	800d768 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	685b      	ldr	r3, [r3, #4]
 8014e1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014e1c:	e01f      	b.n	8014e5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014e1e:	69bb      	ldr	r3, [r7, #24]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	617b      	str	r3, [r7, #20]
    pcur = p;
 8014e24:	69bb      	ldr	r3, [r7, #24]
 8014e26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014e2e:	68f8      	ldr	r0, [r7, #12]
 8014e30:	f7f8 fd28 	bl	800d884 <pbuf_clen>
 8014e34:	4603      	mov	r3, r0
 8014e36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014e38:	8bfa      	ldrh	r2, [r7, #30]
 8014e3a:	8a7b      	ldrh	r3, [r7, #18]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e42:	db05      	blt.n	8014e50 <ip_reass_free_complete_datagram+0xe0>
 8014e44:	4b15      	ldr	r3, [pc, #84]	; (8014e9c <ip_reass_free_complete_datagram+0x12c>)
 8014e46:	22cc      	movs	r2, #204	; 0xcc
 8014e48:	4918      	ldr	r1, [pc, #96]	; (8014eac <ip_reass_free_complete_datagram+0x13c>)
 8014e4a:	4816      	ldr	r0, [pc, #88]	; (8014ea4 <ip_reass_free_complete_datagram+0x134>)
 8014e4c:	f000 ffd0 	bl	8015df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014e50:	8bfa      	ldrh	r2, [r7, #30]
 8014e52:	8a7b      	ldrh	r3, [r7, #18]
 8014e54:	4413      	add	r3, r2
 8014e56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f7f8 fc85 	bl	800d768 <pbuf_free>
  while (p != NULL) {
 8014e5e:	69bb      	ldr	r3, [r7, #24]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d1dc      	bne.n	8014e1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8014e64:	6839      	ldr	r1, [r7, #0]
 8014e66:	6878      	ldr	r0, [r7, #4]
 8014e68:	f000 f8c2 	bl	8014ff0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8014e6c:	4b10      	ldr	r3, [pc, #64]	; (8014eb0 <ip_reass_free_complete_datagram+0x140>)
 8014e6e:	881b      	ldrh	r3, [r3, #0]
 8014e70:	8bfa      	ldrh	r2, [r7, #30]
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d905      	bls.n	8014e82 <ip_reass_free_complete_datagram+0x112>
 8014e76:	4b09      	ldr	r3, [pc, #36]	; (8014e9c <ip_reass_free_complete_datagram+0x12c>)
 8014e78:	22d2      	movs	r2, #210	; 0xd2
 8014e7a:	490e      	ldr	r1, [pc, #56]	; (8014eb4 <ip_reass_free_complete_datagram+0x144>)
 8014e7c:	4809      	ldr	r0, [pc, #36]	; (8014ea4 <ip_reass_free_complete_datagram+0x134>)
 8014e7e:	f000 ffb7 	bl	8015df0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8014e82:	4b0b      	ldr	r3, [pc, #44]	; (8014eb0 <ip_reass_free_complete_datagram+0x140>)
 8014e84:	881a      	ldrh	r2, [r3, #0]
 8014e86:	8bfb      	ldrh	r3, [r7, #30]
 8014e88:	1ad3      	subs	r3, r2, r3
 8014e8a:	b29a      	uxth	r2, r3
 8014e8c:	4b08      	ldr	r3, [pc, #32]	; (8014eb0 <ip_reass_free_complete_datagram+0x140>)
 8014e8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8014e90:	8bfb      	ldrh	r3, [r7, #30]
}
 8014e92:	4618      	mov	r0, r3
 8014e94:	3720      	adds	r7, #32
 8014e96:	46bd      	mov	sp, r7
 8014e98:	bd80      	pop	{r7, pc}
 8014e9a:	bf00      	nop
 8014e9c:	08019738 	.word	0x08019738
 8014ea0:	08019774 	.word	0x08019774
 8014ea4:	08019780 	.word	0x08019780
 8014ea8:	080197a8 	.word	0x080197a8
 8014eac:	080197bc 	.word	0x080197bc
 8014eb0:	20004724 	.word	0x20004724
 8014eb4:	080197dc 	.word	0x080197dc

08014eb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b08a      	sub	sp, #40	; 0x28
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
 8014ec0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014eca:	2300      	movs	r3, #0
 8014ecc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014ece:	2300      	movs	r3, #0
 8014ed0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8014ed6:	4b28      	ldr	r3, [pc, #160]	; (8014f78 <ip_reass_remove_oldest_datagram+0xc0>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014edc:	e030      	b.n	8014f40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ee0:	695a      	ldr	r2, [r3, #20]
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	68db      	ldr	r3, [r3, #12]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	d10c      	bne.n	8014f04 <ip_reass_remove_oldest_datagram+0x4c>
 8014eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014eec:	699a      	ldr	r2, [r3, #24]
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	691b      	ldr	r3, [r3, #16]
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d106      	bne.n	8014f04 <ip_reass_remove_oldest_datagram+0x4c>
 8014ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef8:	899a      	ldrh	r2, [r3, #12]
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	889b      	ldrh	r3, [r3, #4]
 8014efe:	b29b      	uxth	r3, r3
 8014f00:	429a      	cmp	r2, r3
 8014f02:	d014      	beq.n	8014f2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	3301      	adds	r3, #1
 8014f08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014f0a:	6a3b      	ldr	r3, [r7, #32]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d104      	bne.n	8014f1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f14:	69fb      	ldr	r3, [r7, #28]
 8014f16:	61bb      	str	r3, [r7, #24]
 8014f18:	e009      	b.n	8014f2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f1c:	7fda      	ldrb	r2, [r3, #31]
 8014f1e:	6a3b      	ldr	r3, [r7, #32]
 8014f20:	7fdb      	ldrb	r3, [r3, #31]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d803      	bhi.n	8014f2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8014f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	681b      	ldr	r3, [r3, #0]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d001      	beq.n	8014f3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8014f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f3c:	681b      	ldr	r3, [r3, #0]
 8014f3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f42:	2b00      	cmp	r3, #0
 8014f44:	d1cb      	bne.n	8014ede <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8014f46:	6a3b      	ldr	r3, [r7, #32]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d008      	beq.n	8014f5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8014f4c:	69b9      	ldr	r1, [r7, #24]
 8014f4e:	6a38      	ldr	r0, [r7, #32]
 8014f50:	f7ff ff0e 	bl	8014d70 <ip_reass_free_complete_datagram>
 8014f54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8014f56:	697a      	ldr	r2, [r7, #20]
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	4413      	add	r3, r2
 8014f5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8014f5e:	697a      	ldr	r2, [r7, #20]
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	429a      	cmp	r2, r3
 8014f64:	da02      	bge.n	8014f6c <ip_reass_remove_oldest_datagram+0xb4>
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	2b01      	cmp	r3, #1
 8014f6a:	dcac      	bgt.n	8014ec6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8014f6c:	697b      	ldr	r3, [r7, #20]
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3728      	adds	r7, #40	; 0x28
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	20004720 	.word	0x20004720

08014f7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8014f7c:	b580      	push	{r7, lr}
 8014f7e:	b084      	sub	sp, #16
 8014f80:	af00      	add	r7, sp, #0
 8014f82:	6078      	str	r0, [r7, #4]
 8014f84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014f86:	2004      	movs	r0, #4
 8014f88:	f7f7 fcf8 	bl	800c97c <memp_malloc>
 8014f8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d110      	bne.n	8014fb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8014f94:	6839      	ldr	r1, [r7, #0]
 8014f96:	6878      	ldr	r0, [r7, #4]
 8014f98:	f7ff ff8e 	bl	8014eb8 <ip_reass_remove_oldest_datagram>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	dc03      	bgt.n	8014fac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8014fa4:	2004      	movs	r0, #4
 8014fa6:	f7f7 fce9 	bl	800c97c <memp_malloc>
 8014faa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d101      	bne.n	8014fb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e016      	b.n	8014fe4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8014fb6:	2220      	movs	r2, #32
 8014fb8:	2100      	movs	r1, #0
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f000 ff10 	bl	8015de0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	220f      	movs	r2, #15
 8014fc4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8014fc6:	4b09      	ldr	r3, [pc, #36]	; (8014fec <ip_reass_enqueue_new_datagram+0x70>)
 8014fc8:	681a      	ldr	r2, [r3, #0]
 8014fca:	68fb      	ldr	r3, [r7, #12]
 8014fcc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014fce:	4a07      	ldr	r2, [pc, #28]	; (8014fec <ip_reass_enqueue_new_datagram+0x70>)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8014fd4:	68fb      	ldr	r3, [r7, #12]
 8014fd6:	3308      	adds	r3, #8
 8014fd8:	2214      	movs	r2, #20
 8014fda:	6879      	ldr	r1, [r7, #4]
 8014fdc:	4618      	mov	r0, r3
 8014fde:	f000 fef1 	bl	8015dc4 <memcpy>
  return ipr;
 8014fe2:	68fb      	ldr	r3, [r7, #12]
}
 8014fe4:	4618      	mov	r0, r3
 8014fe6:	3710      	adds	r7, #16
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}
 8014fec:	20004720 	.word	0x20004720

08014ff0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014ff0:	b580      	push	{r7, lr}
 8014ff2:	b082      	sub	sp, #8
 8014ff4:	af00      	add	r7, sp, #0
 8014ff6:	6078      	str	r0, [r7, #4]
 8014ff8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014ffa:	4b10      	ldr	r3, [pc, #64]	; (801503c <ip_reass_dequeue_datagram+0x4c>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	687a      	ldr	r2, [r7, #4]
 8015000:	429a      	cmp	r2, r3
 8015002:	d104      	bne.n	801500e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	4a0c      	ldr	r2, [pc, #48]	; (801503c <ip_reass_dequeue_datagram+0x4c>)
 801500a:	6013      	str	r3, [r2, #0]
 801500c:	e00d      	b.n	801502a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801500e:	683b      	ldr	r3, [r7, #0]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d106      	bne.n	8015022 <ip_reass_dequeue_datagram+0x32>
 8015014:	4b0a      	ldr	r3, [pc, #40]	; (8015040 <ip_reass_dequeue_datagram+0x50>)
 8015016:	f240 1245 	movw	r2, #325	; 0x145
 801501a:	490a      	ldr	r1, [pc, #40]	; (8015044 <ip_reass_dequeue_datagram+0x54>)
 801501c:	480a      	ldr	r0, [pc, #40]	; (8015048 <ip_reass_dequeue_datagram+0x58>)
 801501e:	f000 fee7 	bl	8015df0 <iprintf>
    prev->next = ipr->next;
 8015022:	687b      	ldr	r3, [r7, #4]
 8015024:	681a      	ldr	r2, [r3, #0]
 8015026:	683b      	ldr	r3, [r7, #0]
 8015028:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801502a:	6879      	ldr	r1, [r7, #4]
 801502c:	2004      	movs	r0, #4
 801502e:	f7f7 fcf7 	bl	800ca20 <memp_free>
}
 8015032:	bf00      	nop
 8015034:	3708      	adds	r7, #8
 8015036:	46bd      	mov	sp, r7
 8015038:	bd80      	pop	{r7, pc}
 801503a:	bf00      	nop
 801503c:	20004720 	.word	0x20004720
 8015040:	08019738 	.word	0x08019738
 8015044:	08019800 	.word	0x08019800
 8015048:	08019780 	.word	0x08019780

0801504c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801504c:	b580      	push	{r7, lr}
 801504e:	b08c      	sub	sp, #48	; 0x30
 8015050:	af00      	add	r7, sp, #0
 8015052:	60f8      	str	r0, [r7, #12]
 8015054:	60b9      	str	r1, [r7, #8]
 8015056:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015058:	2300      	movs	r3, #0
 801505a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801505c:	2301      	movs	r3, #1
 801505e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015060:	68bb      	ldr	r3, [r7, #8]
 8015062:	685b      	ldr	r3, [r3, #4]
 8015064:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	885b      	ldrh	r3, [r3, #2]
 801506a:	b29b      	uxth	r3, r3
 801506c:	4618      	mov	r0, r3
 801506e:	f7f6 ffcf 	bl	800c010 <lwip_htons>
 8015072:	4603      	mov	r3, r0
 8015074:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015076:	69fb      	ldr	r3, [r7, #28]
 8015078:	781b      	ldrb	r3, [r3, #0]
 801507a:	f003 030f 	and.w	r3, r3, #15
 801507e:	b2db      	uxtb	r3, r3
 8015080:	009b      	lsls	r3, r3, #2
 8015082:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015084:	7e7b      	ldrb	r3, [r7, #25]
 8015086:	b29b      	uxth	r3, r3
 8015088:	8b7a      	ldrh	r2, [r7, #26]
 801508a:	429a      	cmp	r2, r3
 801508c:	d202      	bcs.n	8015094 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801508e:	f04f 33ff 	mov.w	r3, #4294967295
 8015092:	e135      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015094:	7e7b      	ldrb	r3, [r7, #25]
 8015096:	b29b      	uxth	r3, r3
 8015098:	8b7a      	ldrh	r2, [r7, #26]
 801509a:	1ad3      	subs	r3, r2, r3
 801509c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801509e:	69fb      	ldr	r3, [r7, #28]
 80150a0:	88db      	ldrh	r3, [r3, #6]
 80150a2:	b29b      	uxth	r3, r3
 80150a4:	4618      	mov	r0, r3
 80150a6:	f7f6 ffb3 	bl	800c010 <lwip_htons>
 80150aa:	4603      	mov	r3, r0
 80150ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80150b0:	b29b      	uxth	r3, r3
 80150b2:	00db      	lsls	r3, r3, #3
 80150b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80150bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150be:	2200      	movs	r2, #0
 80150c0:	701a      	strb	r2, [r3, #0]
 80150c2:	2200      	movs	r2, #0
 80150c4:	705a      	strb	r2, [r3, #1]
 80150c6:	2200      	movs	r2, #0
 80150c8:	709a      	strb	r2, [r3, #2]
 80150ca:	2200      	movs	r2, #0
 80150cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80150ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150d0:	8afa      	ldrh	r2, [r7, #22]
 80150d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80150d4:	8afa      	ldrh	r2, [r7, #22]
 80150d6:	8b7b      	ldrh	r3, [r7, #26]
 80150d8:	4413      	add	r3, r2
 80150da:	b29a      	uxth	r2, r3
 80150dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80150e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80150e2:	88db      	ldrh	r3, [r3, #6]
 80150e4:	b29b      	uxth	r3, r3
 80150e6:	8afa      	ldrh	r2, [r7, #22]
 80150e8:	429a      	cmp	r2, r3
 80150ea:	d902      	bls.n	80150f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80150ec:	f04f 33ff 	mov.w	r3, #4294967295
 80150f0:	e106      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	685b      	ldr	r3, [r3, #4]
 80150f6:	627b      	str	r3, [r7, #36]	; 0x24
 80150f8:	e068      	b.n	80151cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80150fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015102:	889b      	ldrh	r3, [r3, #4]
 8015104:	b29a      	uxth	r2, r3
 8015106:	693b      	ldr	r3, [r7, #16]
 8015108:	889b      	ldrh	r3, [r3, #4]
 801510a:	b29b      	uxth	r3, r3
 801510c:	429a      	cmp	r2, r3
 801510e:	d235      	bcs.n	801517c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015114:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015118:	2b00      	cmp	r3, #0
 801511a:	d020      	beq.n	801515e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801511c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801511e:	889b      	ldrh	r3, [r3, #4]
 8015120:	b29a      	uxth	r2, r3
 8015122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015124:	88db      	ldrh	r3, [r3, #6]
 8015126:	b29b      	uxth	r3, r3
 8015128:	429a      	cmp	r2, r3
 801512a:	d307      	bcc.n	801513c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801512c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801512e:	88db      	ldrh	r3, [r3, #6]
 8015130:	b29a      	uxth	r2, r3
 8015132:	693b      	ldr	r3, [r7, #16]
 8015134:	889b      	ldrh	r3, [r3, #4]
 8015136:	b29b      	uxth	r3, r3
 8015138:	429a      	cmp	r2, r3
 801513a:	d902      	bls.n	8015142 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801513c:	f04f 33ff 	mov.w	r3, #4294967295
 8015140:	e0de      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015144:	68ba      	ldr	r2, [r7, #8]
 8015146:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801514a:	88db      	ldrh	r3, [r3, #6]
 801514c:	b29a      	uxth	r2, r3
 801514e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015150:	889b      	ldrh	r3, [r3, #4]
 8015152:	b29b      	uxth	r3, r3
 8015154:	429a      	cmp	r2, r3
 8015156:	d03d      	beq.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015158:	2300      	movs	r3, #0
 801515a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801515c:	e03a      	b.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801515e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015160:	88db      	ldrh	r3, [r3, #6]
 8015162:	b29a      	uxth	r2, r3
 8015164:	693b      	ldr	r3, [r7, #16]
 8015166:	889b      	ldrh	r3, [r3, #4]
 8015168:	b29b      	uxth	r3, r3
 801516a:	429a      	cmp	r2, r3
 801516c:	d902      	bls.n	8015174 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801516e:	f04f 33ff 	mov.w	r3, #4294967295
 8015172:	e0c5      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	68ba      	ldr	r2, [r7, #8]
 8015178:	605a      	str	r2, [r3, #4]
      break;
 801517a:	e02b      	b.n	80151d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801517c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801517e:	889b      	ldrh	r3, [r3, #4]
 8015180:	b29a      	uxth	r2, r3
 8015182:	693b      	ldr	r3, [r7, #16]
 8015184:	889b      	ldrh	r3, [r3, #4]
 8015186:	b29b      	uxth	r3, r3
 8015188:	429a      	cmp	r2, r3
 801518a:	d102      	bne.n	8015192 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801518c:	f04f 33ff 	mov.w	r3, #4294967295
 8015190:	e0b6      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015194:	889b      	ldrh	r3, [r3, #4]
 8015196:	b29a      	uxth	r2, r3
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	88db      	ldrh	r3, [r3, #6]
 801519c:	b29b      	uxth	r3, r3
 801519e:	429a      	cmp	r2, r3
 80151a0:	d202      	bcs.n	80151a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80151a2:	f04f 33ff 	mov.w	r3, #4294967295
 80151a6:	e0ab      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80151a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d009      	beq.n	80151c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80151ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b0:	88db      	ldrh	r3, [r3, #6]
 80151b2:	b29a      	uxth	r2, r3
 80151b4:	693b      	ldr	r3, [r7, #16]
 80151b6:	889b      	ldrh	r3, [r3, #4]
 80151b8:	b29b      	uxth	r3, r3
 80151ba:	429a      	cmp	r2, r3
 80151bc:	d001      	beq.n	80151c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80151be:	2300      	movs	r3, #0
 80151c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80151c2:	693b      	ldr	r3, [r7, #16]
 80151c4:	681b      	ldr	r3, [r3, #0]
 80151c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80151cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d193      	bne.n	80150fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80151d2:	e000      	b.n	80151d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80151d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80151d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d8:	2b00      	cmp	r3, #0
 80151da:	d12d      	bne.n	8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80151dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d01c      	beq.n	801521c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80151e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151e4:	88db      	ldrh	r3, [r3, #6]
 80151e6:	b29a      	uxth	r2, r3
 80151e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80151ea:	889b      	ldrh	r3, [r3, #4]
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d906      	bls.n	8015200 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80151f2:	4b45      	ldr	r3, [pc, #276]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80151f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80151f8:	4944      	ldr	r1, [pc, #272]	; (801530c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80151fa:	4845      	ldr	r0, [pc, #276]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80151fc:	f000 fdf8 	bl	8015df0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015202:	68ba      	ldr	r2, [r7, #8]
 8015204:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015208:	88db      	ldrh	r3, [r3, #6]
 801520a:	b29a      	uxth	r2, r3
 801520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801520e:	889b      	ldrh	r3, [r3, #4]
 8015210:	b29b      	uxth	r3, r3
 8015212:	429a      	cmp	r2, r3
 8015214:	d010      	beq.n	8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015216:	2300      	movs	r3, #0
 8015218:	623b      	str	r3, [r7, #32]
 801521a:	e00d      	b.n	8015238 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	685b      	ldr	r3, [r3, #4]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d006      	beq.n	8015232 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015224:	4b38      	ldr	r3, [pc, #224]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015226:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801522a:	493a      	ldr	r1, [pc, #232]	; (8015314 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801522c:	4838      	ldr	r0, [pc, #224]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801522e:	f000 fddf 	bl	8015df0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	68ba      	ldr	r2, [r7, #8]
 8015236:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	2b00      	cmp	r3, #0
 801523c:	d105      	bne.n	801524a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801523e:	68fb      	ldr	r3, [r7, #12]
 8015240:	7f9b      	ldrb	r3, [r3, #30]
 8015242:	f003 0301 	and.w	r3, r3, #1
 8015246:	2b00      	cmp	r3, #0
 8015248:	d059      	beq.n	80152fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801524a:	6a3b      	ldr	r3, [r7, #32]
 801524c:	2b00      	cmp	r3, #0
 801524e:	d04f      	beq.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015250:	68fb      	ldr	r3, [r7, #12]
 8015252:	685b      	ldr	r3, [r3, #4]
 8015254:	2b00      	cmp	r3, #0
 8015256:	d006      	beq.n	8015266 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	685b      	ldr	r3, [r3, #4]
 801525c:	685b      	ldr	r3, [r3, #4]
 801525e:	889b      	ldrh	r3, [r3, #4]
 8015260:	b29b      	uxth	r3, r3
 8015262:	2b00      	cmp	r3, #0
 8015264:	d002      	beq.n	801526c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015266:	2300      	movs	r3, #0
 8015268:	623b      	str	r3, [r7, #32]
 801526a:	e041      	b.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801526c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801526e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015276:	e012      	b.n	801529e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015280:	88db      	ldrh	r3, [r3, #6]
 8015282:	b29a      	uxth	r2, r3
 8015284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015286:	889b      	ldrh	r3, [r3, #4]
 8015288:	b29b      	uxth	r3, r3
 801528a:	429a      	cmp	r2, r3
 801528c:	d002      	beq.n	8015294 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801528e:	2300      	movs	r3, #0
 8015290:	623b      	str	r3, [r7, #32]
            break;
 8015292:	e007      	b.n	80152a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015296:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801529a:	681b      	ldr	r3, [r3, #0]
 801529c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d1e9      	bne.n	8015278 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80152a4:	6a3b      	ldr	r3, [r7, #32]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d022      	beq.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d106      	bne.n	80152c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80152b2:	4b15      	ldr	r3, [pc, #84]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152b4:	f240 12df 	movw	r2, #479	; 0x1df
 80152b8:	4917      	ldr	r1, [pc, #92]	; (8015318 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152ba:	4815      	ldr	r0, [pc, #84]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152bc:	f000 fd98 	bl	8015df0 <iprintf>
          LWIP_ASSERT("sanity check",
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	685b      	ldr	r3, [r3, #4]
 80152c4:	685b      	ldr	r3, [r3, #4]
 80152c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152c8:	429a      	cmp	r2, r3
 80152ca:	d106      	bne.n	80152da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80152cc:	4b0e      	ldr	r3, [pc, #56]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80152d2:	4911      	ldr	r1, [pc, #68]	; (8015318 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80152d4:	480e      	ldr	r0, [pc, #56]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152d6:	f000 fd8b 	bl	8015df0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80152da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d006      	beq.n	80152f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80152e2:	4b09      	ldr	r3, [pc, #36]	; (8015308 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80152e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80152e8:	490c      	ldr	r1, [pc, #48]	; (801531c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80152ea:	4809      	ldr	r0, [pc, #36]	; (8015310 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80152ec:	f000 fd80 	bl	8015df0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80152f0:	6a3b      	ldr	r3, [r7, #32]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	bf14      	ite	ne
 80152f6:	2301      	movne	r3, #1
 80152f8:	2300      	moveq	r3, #0
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	e000      	b.n	8015300 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80152fe:	2300      	movs	r3, #0
}
 8015300:	4618      	mov	r0, r3
 8015302:	3730      	adds	r7, #48	; 0x30
 8015304:	46bd      	mov	sp, r7
 8015306:	bd80      	pop	{r7, pc}
 8015308:	08019738 	.word	0x08019738
 801530c:	0801981c 	.word	0x0801981c
 8015310:	08019780 	.word	0x08019780
 8015314:	0801983c 	.word	0x0801983c
 8015318:	08019874 	.word	0x08019874
 801531c:	08019884 	.word	0x08019884

08015320 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b08e      	sub	sp, #56	; 0x38
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	685b      	ldr	r3, [r3, #4]
 801532c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015330:	781b      	ldrb	r3, [r3, #0]
 8015332:	f003 030f 	and.w	r3, r3, #15
 8015336:	b2db      	uxtb	r3, r3
 8015338:	009b      	lsls	r3, r3, #2
 801533a:	b2db      	uxtb	r3, r3
 801533c:	2b14      	cmp	r3, #20
 801533e:	f040 8167 	bne.w	8015610 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015344:	88db      	ldrh	r3, [r3, #6]
 8015346:	b29b      	uxth	r3, r3
 8015348:	4618      	mov	r0, r3
 801534a:	f7f6 fe61 	bl	800c010 <lwip_htons>
 801534e:	4603      	mov	r3, r0
 8015350:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015354:	b29b      	uxth	r3, r3
 8015356:	00db      	lsls	r3, r3, #3
 8015358:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801535a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801535c:	885b      	ldrh	r3, [r3, #2]
 801535e:	b29b      	uxth	r3, r3
 8015360:	4618      	mov	r0, r3
 8015362:	f7f6 fe55 	bl	800c010 <lwip_htons>
 8015366:	4603      	mov	r3, r0
 8015368:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801536a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801536c:	781b      	ldrb	r3, [r3, #0]
 801536e:	f003 030f 	and.w	r3, r3, #15
 8015372:	b2db      	uxtb	r3, r3
 8015374:	009b      	lsls	r3, r3, #2
 8015376:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801537a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801537e:	b29b      	uxth	r3, r3
 8015380:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015382:	429a      	cmp	r2, r3
 8015384:	f0c0 8146 	bcc.w	8015614 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801538c:	b29b      	uxth	r3, r3
 801538e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015390:	1ad3      	subs	r3, r2, r3
 8015392:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f7f8 fa75 	bl	800d884 <pbuf_clen>
 801539a:	4603      	mov	r3, r0
 801539c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801539e:	4b9f      	ldr	r3, [pc, #636]	; (801561c <ip4_reass+0x2fc>)
 80153a0:	881b      	ldrh	r3, [r3, #0]
 80153a2:	461a      	mov	r2, r3
 80153a4:	8c3b      	ldrh	r3, [r7, #32]
 80153a6:	4413      	add	r3, r2
 80153a8:	2b0a      	cmp	r3, #10
 80153aa:	dd10      	ble.n	80153ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153ac:	8c3b      	ldrh	r3, [r7, #32]
 80153ae:	4619      	mov	r1, r3
 80153b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80153b2:	f7ff fd81 	bl	8014eb8 <ip_reass_remove_oldest_datagram>
 80153b6:	4603      	mov	r3, r0
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	f000 812d 	beq.w	8015618 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80153be:	4b97      	ldr	r3, [pc, #604]	; (801561c <ip4_reass+0x2fc>)
 80153c0:	881b      	ldrh	r3, [r3, #0]
 80153c2:	461a      	mov	r2, r3
 80153c4:	8c3b      	ldrh	r3, [r7, #32]
 80153c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80153c8:	2b0a      	cmp	r3, #10
 80153ca:	f300 8125 	bgt.w	8015618 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153ce:	4b94      	ldr	r3, [pc, #592]	; (8015620 <ip4_reass+0x300>)
 80153d0:	681b      	ldr	r3, [r3, #0]
 80153d2:	633b      	str	r3, [r7, #48]	; 0x30
 80153d4:	e015      	b.n	8015402 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80153d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d8:	695a      	ldr	r2, [r3, #20]
 80153da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153dc:	68db      	ldr	r3, [r3, #12]
 80153de:	429a      	cmp	r2, r3
 80153e0:	d10c      	bne.n	80153fc <ip4_reass+0xdc>
 80153e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153e4:	699a      	ldr	r2, [r3, #24]
 80153e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153e8:	691b      	ldr	r3, [r3, #16]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d106      	bne.n	80153fc <ip4_reass+0xdc>
 80153ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f0:	899a      	ldrh	r2, [r3, #12]
 80153f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80153f4:	889b      	ldrh	r3, [r3, #4]
 80153f6:	b29b      	uxth	r3, r3
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d006      	beq.n	801540a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80153fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	633b      	str	r3, [r7, #48]	; 0x30
 8015402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015404:	2b00      	cmp	r3, #0
 8015406:	d1e6      	bne.n	80153d6 <ip4_reass+0xb6>
 8015408:	e000      	b.n	801540c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801540a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801540e:	2b00      	cmp	r3, #0
 8015410:	d109      	bne.n	8015426 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015412:	8c3b      	ldrh	r3, [r7, #32]
 8015414:	4619      	mov	r1, r3
 8015416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015418:	f7ff fdb0 	bl	8014f7c <ip_reass_enqueue_new_datagram>
 801541c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015420:	2b00      	cmp	r3, #0
 8015422:	d11c      	bne.n	801545e <ip4_reass+0x13e>
      goto nullreturn;
 8015424:	e109      	b.n	801563a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015428:	88db      	ldrh	r3, [r3, #6]
 801542a:	b29b      	uxth	r3, r3
 801542c:	4618      	mov	r0, r3
 801542e:	f7f6 fdef 	bl	800c010 <lwip_htons>
 8015432:	4603      	mov	r3, r0
 8015434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015438:	2b00      	cmp	r3, #0
 801543a:	d110      	bne.n	801545e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801543e:	89db      	ldrh	r3, [r3, #14]
 8015440:	4618      	mov	r0, r3
 8015442:	f7f6 fde5 	bl	800c010 <lwip_htons>
 8015446:	4603      	mov	r3, r0
 8015448:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801544c:	2b00      	cmp	r3, #0
 801544e:	d006      	beq.n	801545e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015452:	3308      	adds	r3, #8
 8015454:	2214      	movs	r2, #20
 8015456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015458:	4618      	mov	r0, r3
 801545a:	f000 fcb3 	bl	8015dc4 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015460:	88db      	ldrh	r3, [r3, #6]
 8015462:	b29b      	uxth	r3, r3
 8015464:	f003 0320 	and.w	r3, r3, #32
 8015468:	2b00      	cmp	r3, #0
 801546a:	bf0c      	ite	eq
 801546c:	2301      	moveq	r3, #1
 801546e:	2300      	movne	r3, #0
 8015470:	b2db      	uxtb	r3, r3
 8015472:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015474:	69fb      	ldr	r3, [r7, #28]
 8015476:	2b00      	cmp	r3, #0
 8015478:	d00e      	beq.n	8015498 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801547a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801547c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801547e:	4413      	add	r3, r2
 8015480:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015482:	8b7a      	ldrh	r2, [r7, #26]
 8015484:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015486:	429a      	cmp	r2, r3
 8015488:	f0c0 80a0 	bcc.w	80155cc <ip4_reass+0x2ac>
 801548c:	8b7b      	ldrh	r3, [r7, #26]
 801548e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015492:	4293      	cmp	r3, r2
 8015494:	f200 809a 	bhi.w	80155cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015498:	69fa      	ldr	r2, [r7, #28]
 801549a:	6879      	ldr	r1, [r7, #4]
 801549c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801549e:	f7ff fdd5 	bl	801504c <ip_reass_chain_frag_into_datagram_and_validate>
 80154a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80154a4:	697b      	ldr	r3, [r7, #20]
 80154a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154aa:	f000 8091 	beq.w	80155d0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80154ae:	4b5b      	ldr	r3, [pc, #364]	; (801561c <ip4_reass+0x2fc>)
 80154b0:	881a      	ldrh	r2, [r3, #0]
 80154b2:	8c3b      	ldrh	r3, [r7, #32]
 80154b4:	4413      	add	r3, r2
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	4b58      	ldr	r3, [pc, #352]	; (801561c <ip4_reass+0x2fc>)
 80154ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80154bc:	69fb      	ldr	r3, [r7, #28]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d00d      	beq.n	80154de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80154c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80154c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80154c6:	4413      	add	r3, r2
 80154c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80154ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154cc:	8a7a      	ldrh	r2, [r7, #18]
 80154ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80154d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154d2:	7f9b      	ldrb	r3, [r3, #30]
 80154d4:	f043 0301 	orr.w	r3, r3, #1
 80154d8:	b2da      	uxtb	r2, r3
 80154da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80154de:	697b      	ldr	r3, [r7, #20]
 80154e0:	2b01      	cmp	r3, #1
 80154e2:	d171      	bne.n	80155c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80154e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154e6:	8b9b      	ldrh	r3, [r3, #28]
 80154e8:	3314      	adds	r3, #20
 80154ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80154ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154ee:	685b      	ldr	r3, [r3, #4]
 80154f0:	685b      	ldr	r3, [r3, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80154f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80154f8:	685b      	ldr	r3, [r3, #4]
 80154fa:	685b      	ldr	r3, [r3, #4]
 80154fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80154fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015500:	3308      	adds	r3, #8
 8015502:	2214      	movs	r2, #20
 8015504:	4619      	mov	r1, r3
 8015506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015508:	f000 fc5c 	bl	8015dc4 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801550c:	8a3b      	ldrh	r3, [r7, #16]
 801550e:	4618      	mov	r0, r3
 8015510:	f7f6 fd7e 	bl	800c010 <lwip_htons>
 8015514:	4603      	mov	r3, r0
 8015516:	461a      	mov	r2, r3
 8015518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551e:	2200      	movs	r2, #0
 8015520:	719a      	strb	r2, [r3, #6]
 8015522:	2200      	movs	r2, #0
 8015524:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015528:	2200      	movs	r2, #0
 801552a:	729a      	strb	r2, [r3, #10]
 801552c:	2200      	movs	r2, #0
 801552e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015536:	e00d      	b.n	8015554 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801553a:	685b      	ldr	r3, [r3, #4]
 801553c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801553e:	2114      	movs	r1, #20
 8015540:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015542:	f7f8 f88b 	bl	800d65c <pbuf_remove_header>
      pbuf_cat(p, r);
 8015546:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f7f8 f9db 	bl	800d904 <pbuf_cat>
      r = iprh->next_pbuf;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	681b      	ldr	r3, [r3, #0]
 8015552:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015556:	2b00      	cmp	r3, #0
 8015558:	d1ee      	bne.n	8015538 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801555a:	4b31      	ldr	r3, [pc, #196]	; (8015620 <ip4_reass+0x300>)
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015560:	429a      	cmp	r2, r3
 8015562:	d102      	bne.n	801556a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015564:	2300      	movs	r3, #0
 8015566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015568:	e010      	b.n	801558c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801556a:	4b2d      	ldr	r3, [pc, #180]	; (8015620 <ip4_reass+0x300>)
 801556c:	681b      	ldr	r3, [r3, #0]
 801556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015570:	e007      	b.n	8015582 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015578:	429a      	cmp	r2, r3
 801557a:	d006      	beq.n	801558a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015584:	2b00      	cmp	r3, #0
 8015586:	d1f4      	bne.n	8015572 <ip4_reass+0x252>
 8015588:	e000      	b.n	801558c <ip4_reass+0x26c>
          break;
 801558a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801558c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801558e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015590:	f7ff fd2e 	bl	8014ff0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015594:	6878      	ldr	r0, [r7, #4]
 8015596:	f7f8 f975 	bl	800d884 <pbuf_clen>
 801559a:	4603      	mov	r3, r0
 801559c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801559e:	4b1f      	ldr	r3, [pc, #124]	; (801561c <ip4_reass+0x2fc>)
 80155a0:	881b      	ldrh	r3, [r3, #0]
 80155a2:	8c3a      	ldrh	r2, [r7, #32]
 80155a4:	429a      	cmp	r2, r3
 80155a6:	d906      	bls.n	80155b6 <ip4_reass+0x296>
 80155a8:	4b1e      	ldr	r3, [pc, #120]	; (8015624 <ip4_reass+0x304>)
 80155aa:	f240 229b 	movw	r2, #667	; 0x29b
 80155ae:	491e      	ldr	r1, [pc, #120]	; (8015628 <ip4_reass+0x308>)
 80155b0:	481e      	ldr	r0, [pc, #120]	; (801562c <ip4_reass+0x30c>)
 80155b2:	f000 fc1d 	bl	8015df0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80155b6:	4b19      	ldr	r3, [pc, #100]	; (801561c <ip4_reass+0x2fc>)
 80155b8:	881a      	ldrh	r2, [r3, #0]
 80155ba:	8c3b      	ldrh	r3, [r7, #32]
 80155bc:	1ad3      	subs	r3, r2, r3
 80155be:	b29a      	uxth	r2, r3
 80155c0:	4b16      	ldr	r3, [pc, #88]	; (801561c <ip4_reass+0x2fc>)
 80155c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	e03c      	b.n	8015642 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80155c8:	2300      	movs	r3, #0
 80155ca:	e03a      	b.n	8015642 <ip4_reass+0x322>
      goto nullreturn_ipr;
 80155cc:	bf00      	nop
 80155ce:	e000      	b.n	80155d2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 80155d0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80155d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d106      	bne.n	80155e6 <ip4_reass+0x2c6>
 80155d8:	4b12      	ldr	r3, [pc, #72]	; (8015624 <ip4_reass+0x304>)
 80155da:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80155de:	4914      	ldr	r1, [pc, #80]	; (8015630 <ip4_reass+0x310>)
 80155e0:	4812      	ldr	r0, [pc, #72]	; (801562c <ip4_reass+0x30c>)
 80155e2:	f000 fc05 	bl	8015df0 <iprintf>
  if (ipr->p == NULL) {
 80155e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d124      	bne.n	8015638 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80155ee:	4b0c      	ldr	r3, [pc, #48]	; (8015620 <ip4_reass+0x300>)
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155f4:	429a      	cmp	r2, r3
 80155f6:	d006      	beq.n	8015606 <ip4_reass+0x2e6>
 80155f8:	4b0a      	ldr	r3, [pc, #40]	; (8015624 <ip4_reass+0x304>)
 80155fa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80155fe:	490d      	ldr	r1, [pc, #52]	; (8015634 <ip4_reass+0x314>)
 8015600:	480a      	ldr	r0, [pc, #40]	; (801562c <ip4_reass+0x30c>)
 8015602:	f000 fbf5 	bl	8015df0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015606:	2100      	movs	r1, #0
 8015608:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801560a:	f7ff fcf1 	bl	8014ff0 <ip_reass_dequeue_datagram>
 801560e:	e014      	b.n	801563a <ip4_reass+0x31a>
    goto nullreturn;
 8015610:	bf00      	nop
 8015612:	e012      	b.n	801563a <ip4_reass+0x31a>
    goto nullreturn;
 8015614:	bf00      	nop
 8015616:	e010      	b.n	801563a <ip4_reass+0x31a>
      goto nullreturn;
 8015618:	bf00      	nop
 801561a:	e00e      	b.n	801563a <ip4_reass+0x31a>
 801561c:	20004724 	.word	0x20004724
 8015620:	20004720 	.word	0x20004720
 8015624:	08019738 	.word	0x08019738
 8015628:	080198a8 	.word	0x080198a8
 801562c:	08019780 	.word	0x08019780
 8015630:	080198c4 	.word	0x080198c4
 8015634:	080198d0 	.word	0x080198d0
  }

nullreturn:
 8015638:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f7f8 f894 	bl	800d768 <pbuf_free>
  return NULL;
 8015640:	2300      	movs	r3, #0
}
 8015642:	4618      	mov	r0, r3
 8015644:	3738      	adds	r7, #56	; 0x38
 8015646:	46bd      	mov	sp, r7
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop

0801564c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801564c:	b580      	push	{r7, lr}
 801564e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015650:	2005      	movs	r0, #5
 8015652:	f7f7 f993 	bl	800c97c <memp_malloc>
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	bd80      	pop	{r7, pc}

0801565c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
 8015662:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	2b00      	cmp	r3, #0
 8015668:	d106      	bne.n	8015678 <ip_frag_free_pbuf_custom_ref+0x1c>
 801566a:	4b07      	ldr	r3, [pc, #28]	; (8015688 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801566c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015670:	4906      	ldr	r1, [pc, #24]	; (801568c <ip_frag_free_pbuf_custom_ref+0x30>)
 8015672:	4807      	ldr	r0, [pc, #28]	; (8015690 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015674:	f000 fbbc 	bl	8015df0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015678:	6879      	ldr	r1, [r7, #4]
 801567a:	2005      	movs	r0, #5
 801567c:	f7f7 f9d0 	bl	800ca20 <memp_free>
}
 8015680:	bf00      	nop
 8015682:	3708      	adds	r7, #8
 8015684:	46bd      	mov	sp, r7
 8015686:	bd80      	pop	{r7, pc}
 8015688:	08019738 	.word	0x08019738
 801568c:	080198f0 	.word	0x080198f0
 8015690:	08019780 	.word	0x08019780

08015694 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015694:	b580      	push	{r7, lr}
 8015696:	b084      	sub	sp, #16
 8015698:	af00      	add	r7, sp, #0
 801569a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d106      	bne.n	80156b4 <ipfrag_free_pbuf_custom+0x20>
 80156a6:	4b11      	ldr	r3, [pc, #68]	; (80156ec <ipfrag_free_pbuf_custom+0x58>)
 80156a8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80156ac:	4910      	ldr	r1, [pc, #64]	; (80156f0 <ipfrag_free_pbuf_custom+0x5c>)
 80156ae:	4811      	ldr	r0, [pc, #68]	; (80156f4 <ipfrag_free_pbuf_custom+0x60>)
 80156b0:	f000 fb9e 	bl	8015df0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80156b4:	68fa      	ldr	r2, [r7, #12]
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d006      	beq.n	80156ca <ipfrag_free_pbuf_custom+0x36>
 80156bc:	4b0b      	ldr	r3, [pc, #44]	; (80156ec <ipfrag_free_pbuf_custom+0x58>)
 80156be:	f240 22cf 	movw	r2, #719	; 0x2cf
 80156c2:	490d      	ldr	r1, [pc, #52]	; (80156f8 <ipfrag_free_pbuf_custom+0x64>)
 80156c4:	480b      	ldr	r0, [pc, #44]	; (80156f4 <ipfrag_free_pbuf_custom+0x60>)
 80156c6:	f000 fb93 	bl	8015df0 <iprintf>
  if (pcr->original != NULL) {
 80156ca:	68fb      	ldr	r3, [r7, #12]
 80156cc:	695b      	ldr	r3, [r3, #20]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d004      	beq.n	80156dc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80156d2:	68fb      	ldr	r3, [r7, #12]
 80156d4:	695b      	ldr	r3, [r3, #20]
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7f8 f846 	bl	800d768 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80156dc:	68f8      	ldr	r0, [r7, #12]
 80156de:	f7ff ffbd 	bl	801565c <ip_frag_free_pbuf_custom_ref>
}
 80156e2:	bf00      	nop
 80156e4:	3710      	adds	r7, #16
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	08019738 	.word	0x08019738
 80156f0:	080198fc 	.word	0x080198fc
 80156f4:	08019780 	.word	0x08019780
 80156f8:	08019908 	.word	0x08019908

080156fc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b094      	sub	sp, #80	; 0x50
 8015700:	af02      	add	r7, sp, #8
 8015702:	60f8      	str	r0, [r7, #12]
 8015704:	60b9      	str	r1, [r7, #8]
 8015706:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015708:	2300      	movs	r3, #0
 801570a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015712:	3b14      	subs	r3, #20
 8015714:	2b00      	cmp	r3, #0
 8015716:	da00      	bge.n	801571a <ip4_frag+0x1e>
 8015718:	3307      	adds	r3, #7
 801571a:	10db      	asrs	r3, r3, #3
 801571c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801571e:	2314      	movs	r3, #20
 8015720:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801572a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801572c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801572e:	781b      	ldrb	r3, [r3, #0]
 8015730:	f003 030f 	and.w	r3, r3, #15
 8015734:	b2db      	uxtb	r3, r3
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	b2db      	uxtb	r3, r3
 801573a:	2b14      	cmp	r3, #20
 801573c:	d002      	beq.n	8015744 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801573e:	f06f 0305 	mvn.w	r3, #5
 8015742:	e110      	b.n	8015966 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	895b      	ldrh	r3, [r3, #10]
 8015748:	2b13      	cmp	r3, #19
 801574a:	d809      	bhi.n	8015760 <ip4_frag+0x64>
 801574c:	4b88      	ldr	r3, [pc, #544]	; (8015970 <ip4_frag+0x274>)
 801574e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015752:	4988      	ldr	r1, [pc, #544]	; (8015974 <ip4_frag+0x278>)
 8015754:	4888      	ldr	r0, [pc, #544]	; (8015978 <ip4_frag+0x27c>)
 8015756:	f000 fb4b 	bl	8015df0 <iprintf>
 801575a:	f06f 0305 	mvn.w	r3, #5
 801575e:	e102      	b.n	8015966 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015762:	88db      	ldrh	r3, [r3, #6]
 8015764:	b29b      	uxth	r3, r3
 8015766:	4618      	mov	r0, r3
 8015768:	f7f6 fc52 	bl	800c010 <lwip_htons>
 801576c:	4603      	mov	r3, r0
 801576e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015770:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015772:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015776:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801577a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801577c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015780:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	891b      	ldrh	r3, [r3, #8]
 8015786:	3b14      	subs	r3, #20
 8015788:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801578c:	e0e1      	b.n	8015952 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801578e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015790:	00db      	lsls	r3, r3, #3
 8015792:	b29b      	uxth	r3, r3
 8015794:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015798:	4293      	cmp	r3, r2
 801579a:	bf28      	it	cs
 801579c:	4613      	movcs	r3, r2
 801579e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80157a0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80157a4:	2114      	movs	r1, #20
 80157a6:	200e      	movs	r0, #14
 80157a8:	f7f7 fcfa 	bl	800d1a0 <pbuf_alloc>
 80157ac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80157ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	f000 80d5 	beq.w	8015960 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80157b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b8:	895b      	ldrh	r3, [r3, #10]
 80157ba:	2b13      	cmp	r3, #19
 80157bc:	d806      	bhi.n	80157cc <ip4_frag+0xd0>
 80157be:	4b6c      	ldr	r3, [pc, #432]	; (8015970 <ip4_frag+0x274>)
 80157c0:	f44f 7249 	mov.w	r2, #804	; 0x324
 80157c4:	496d      	ldr	r1, [pc, #436]	; (801597c <ip4_frag+0x280>)
 80157c6:	486c      	ldr	r0, [pc, #432]	; (8015978 <ip4_frag+0x27c>)
 80157c8:	f000 fb12 	bl	8015df0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80157cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	2214      	movs	r2, #20
 80157d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80157d4:	4618      	mov	r0, r3
 80157d6:	f000 faf5 	bl	8015dc4 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80157da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157dc:	685b      	ldr	r3, [r3, #4]
 80157de:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80157e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80157e2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80157e6:	e064      	b.n	80158b2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	895a      	ldrh	r2, [r3, #10]
 80157ec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80157ee:	1ad3      	subs	r3, r2, r3
 80157f0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	895b      	ldrh	r3, [r3, #10]
 80157f6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d906      	bls.n	801580a <ip4_frag+0x10e>
 80157fc:	4b5c      	ldr	r3, [pc, #368]	; (8015970 <ip4_frag+0x274>)
 80157fe:	f240 322d 	movw	r2, #813	; 0x32d
 8015802:	495f      	ldr	r1, [pc, #380]	; (8015980 <ip4_frag+0x284>)
 8015804:	485c      	ldr	r0, [pc, #368]	; (8015978 <ip4_frag+0x27c>)
 8015806:	f000 faf3 	bl	8015df0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801580a:	8bfa      	ldrh	r2, [r7, #30]
 801580c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015810:	4293      	cmp	r3, r2
 8015812:	bf28      	it	cs
 8015814:	4613      	movcs	r3, r2
 8015816:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801581a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801581e:	2b00      	cmp	r3, #0
 8015820:	d105      	bne.n	801582e <ip4_frag+0x132>
        poff = 0;
 8015822:	2300      	movs	r3, #0
 8015824:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	60fb      	str	r3, [r7, #12]
        continue;
 801582c:	e041      	b.n	80158b2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801582e:	f7ff ff0d 	bl	801564c <ip_frag_alloc_pbuf_custom_ref>
 8015832:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015834:	69bb      	ldr	r3, [r7, #24]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d103      	bne.n	8015842 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801583a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801583c:	f7f7 ff94 	bl	800d768 <pbuf_free>
        goto memerr;
 8015840:	e08f      	b.n	8015962 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015842:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015844:	68fb      	ldr	r3, [r7, #12]
 8015846:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015848:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801584a:	4413      	add	r3, r2
 801584c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015850:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015854:	9201      	str	r2, [sp, #4]
 8015856:	9300      	str	r3, [sp, #0]
 8015858:	4603      	mov	r3, r0
 801585a:	2241      	movs	r2, #65	; 0x41
 801585c:	2000      	movs	r0, #0
 801585e:	f7f7 fdc9 	bl	800d3f4 <pbuf_alloced_custom>
 8015862:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015864:	697b      	ldr	r3, [r7, #20]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d106      	bne.n	8015878 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801586a:	69b8      	ldr	r0, [r7, #24]
 801586c:	f7ff fef6 	bl	801565c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015872:	f7f7 ff79 	bl	800d768 <pbuf_free>
        goto memerr;
 8015876:	e074      	b.n	8015962 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015878:	68f8      	ldr	r0, [r7, #12]
 801587a:	f7f8 f81b 	bl	800d8b4 <pbuf_ref>
      pcr->original = p;
 801587e:	69bb      	ldr	r3, [r7, #24]
 8015880:	68fa      	ldr	r2, [r7, #12]
 8015882:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015884:	69bb      	ldr	r3, [r7, #24]
 8015886:	4a3f      	ldr	r2, [pc, #252]	; (8015984 <ip4_frag+0x288>)
 8015888:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801588a:	6979      	ldr	r1, [r7, #20]
 801588c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801588e:	f7f8 f839 	bl	800d904 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015892:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015896:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801589a:	1ad3      	subs	r3, r2, r3
 801589c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80158a0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	d004      	beq.n	80158b2 <ip4_frag+0x1b6>
        poff = 0;
 80158a8:	2300      	movs	r3, #0
 80158aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80158b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d196      	bne.n	80157e8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80158ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80158bc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80158c0:	4413      	add	r3, r2
 80158c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80158c4:	68bb      	ldr	r3, [r7, #8]
 80158c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80158c8:	f1a3 0213 	sub.w	r2, r3, #19
 80158cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80158d0:	429a      	cmp	r2, r3
 80158d2:	bfcc      	ite	gt
 80158d4:	2301      	movgt	r3, #1
 80158d6:	2300      	movle	r3, #0
 80158d8:	b2db      	uxtb	r3, r3
 80158da:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80158dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80158e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80158e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80158e6:	6a3b      	ldr	r3, [r7, #32]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d002      	beq.n	80158f2 <ip4_frag+0x1f6>
 80158ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d003      	beq.n	80158fa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80158f2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80158f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80158fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80158fc:	4618      	mov	r0, r3
 80158fe:	f7f6 fb87 	bl	800c010 <lwip_htons>
 8015902:	4603      	mov	r3, r0
 8015904:	461a      	mov	r2, r3
 8015906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015908:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801590a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801590c:	3314      	adds	r3, #20
 801590e:	b29b      	uxth	r3, r3
 8015910:	4618      	mov	r0, r3
 8015912:	f7f6 fb7d 	bl	800c010 <lwip_htons>
 8015916:	4603      	mov	r3, r0
 8015918:	461a      	mov	r2, r3
 801591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015920:	2200      	movs	r2, #0
 8015922:	729a      	strb	r2, [r3, #10]
 8015924:	2200      	movs	r2, #0
 8015926:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015928:	68bb      	ldr	r3, [r7, #8]
 801592a:	695b      	ldr	r3, [r3, #20]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015930:	68b8      	ldr	r0, [r7, #8]
 8015932:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015934:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015936:	f7f7 ff17 	bl	800d768 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801593a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801593e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015946:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801594a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801594c:	4413      	add	r3, r2
 801594e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015952:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015956:	2b00      	cmp	r3, #0
 8015958:	f47f af19 	bne.w	801578e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801595c:	2300      	movs	r3, #0
 801595e:	e002      	b.n	8015966 <ip4_frag+0x26a>
      goto memerr;
 8015960:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015962:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015966:	4618      	mov	r0, r3
 8015968:	3748      	adds	r7, #72	; 0x48
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	08019738 	.word	0x08019738
 8015974:	08019914 	.word	0x08019914
 8015978:	08019780 	.word	0x08019780
 801597c:	08019930 	.word	0x08019930
 8015980:	08019950 	.word	0x08019950
 8015984:	08015695 	.word	0x08015695

08015988 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015988:	b580      	push	{r7, lr}
 801598a:	b086      	sub	sp, #24
 801598c:	af00      	add	r7, sp, #0
 801598e:	6078      	str	r0, [r7, #4]
 8015990:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015992:	230e      	movs	r3, #14
 8015994:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	895b      	ldrh	r3, [r3, #10]
 801599a:	2b0e      	cmp	r3, #14
 801599c:	d96e      	bls.n	8015a7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	7bdb      	ldrb	r3, [r3, #15]
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d106      	bne.n	80159b4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80159ac:	3301      	adds	r3, #1
 80159ae:	b2da      	uxtb	r2, r3
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80159b4:	687b      	ldr	r3, [r7, #4]
 80159b6:	685b      	ldr	r3, [r3, #4]
 80159b8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	7b1a      	ldrb	r2, [r3, #12]
 80159be:	7b5b      	ldrb	r3, [r3, #13]
 80159c0:	021b      	lsls	r3, r3, #8
 80159c2:	4313      	orrs	r3, r2
 80159c4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	781b      	ldrb	r3, [r3, #0]
 80159ca:	f003 0301 	and.w	r3, r3, #1
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d023      	beq.n	8015a1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80159d2:	693b      	ldr	r3, [r7, #16]
 80159d4:	781b      	ldrb	r3, [r3, #0]
 80159d6:	2b01      	cmp	r3, #1
 80159d8:	d10f      	bne.n	80159fa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159da:	693b      	ldr	r3, [r7, #16]
 80159dc:	785b      	ldrb	r3, [r3, #1]
 80159de:	2b00      	cmp	r3, #0
 80159e0:	d11b      	bne.n	8015a1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80159e2:	693b      	ldr	r3, [r7, #16]
 80159e4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80159e6:	2b5e      	cmp	r3, #94	; 0x5e
 80159e8:	d117      	bne.n	8015a1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	7b5b      	ldrb	r3, [r3, #13]
 80159ee:	f043 0310 	orr.w	r3, r3, #16
 80159f2:	b2da      	uxtb	r2, r3
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	735a      	strb	r2, [r3, #13]
 80159f8:	e00f      	b.n	8015a1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	2206      	movs	r2, #6
 80159fe:	4928      	ldr	r1, [pc, #160]	; (8015aa0 <ethernet_input+0x118>)
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 f9d1 	bl	8015da8 <memcmp>
 8015a06:	4603      	mov	r3, r0
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d106      	bne.n	8015a1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	7b5b      	ldrb	r3, [r3, #13]
 8015a10:	f043 0308 	orr.w	r3, r3, #8
 8015a14:	b2da      	uxtb	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015a1a:	89fb      	ldrh	r3, [r7, #14]
 8015a1c:	2b08      	cmp	r3, #8
 8015a1e:	d003      	beq.n	8015a28 <ethernet_input+0xa0>
 8015a20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015a24:	d014      	beq.n	8015a50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015a26:	e032      	b.n	8015a8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a28:	683b      	ldr	r3, [r7, #0]
 8015a2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a2e:	f003 0308 	and.w	r3, r3, #8
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d024      	beq.n	8015a80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a36:	8afb      	ldrh	r3, [r7, #22]
 8015a38:	4619      	mov	r1, r3
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f7f7 fe0e 	bl	800d65c <pbuf_remove_header>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b00      	cmp	r3, #0
 8015a44:	d11e      	bne.n	8015a84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015a46:	6839      	ldr	r1, [r7, #0]
 8015a48:	6878      	ldr	r0, [r7, #4]
 8015a4a:	f7fe ff27 	bl	801489c <ip4_input>
      break;
 8015a4e:	e013      	b.n	8015a78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015a50:	683b      	ldr	r3, [r7, #0]
 8015a52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a56:	f003 0308 	and.w	r3, r3, #8
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	d014      	beq.n	8015a88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015a5e:	8afb      	ldrh	r3, [r7, #22]
 8015a60:	4619      	mov	r1, r3
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7f7 fdfa 	bl	800d65c <pbuf_remove_header>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d10e      	bne.n	8015a8c <ethernet_input+0x104>
        etharp_input(p, netif);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f7fe f8c7 	bl	8013c04 <etharp_input>
      break;
 8015a76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e00c      	b.n	8015a96 <ethernet_input+0x10e>
    goto free_and_return;
 8015a7c:	bf00      	nop
 8015a7e:	e006      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a80:	bf00      	nop
 8015a82:	e004      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a84:	bf00      	nop
 8015a86:	e002      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a88:	bf00      	nop
 8015a8a:	e000      	b.n	8015a8e <ethernet_input+0x106>
        goto free_and_return;
 8015a8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7f7 fe6a 	bl	800d768 <pbuf_free>
  return ERR_OK;
 8015a94:	2300      	movs	r3, #0
}
 8015a96:	4618      	mov	r0, r3
 8015a98:	3718      	adds	r7, #24
 8015a9a:	46bd      	mov	sp, r7
 8015a9c:	bd80      	pop	{r7, pc}
 8015a9e:	bf00      	nop
 8015aa0:	08019b28 	.word	0x08019b28

08015aa4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015aa4:	b580      	push	{r7, lr}
 8015aa6:	b086      	sub	sp, #24
 8015aa8:	af00      	add	r7, sp, #0
 8015aaa:	60f8      	str	r0, [r7, #12]
 8015aac:	60b9      	str	r1, [r7, #8]
 8015aae:	607a      	str	r2, [r7, #4]
 8015ab0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ab2:	8c3b      	ldrh	r3, [r7, #32]
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f6 faab 	bl	800c010 <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015abe:	210e      	movs	r1, #14
 8015ac0:	68b8      	ldr	r0, [r7, #8]
 8015ac2:	f7f7 fdbb 	bl	800d63c <pbuf_add_header>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d125      	bne.n	8015b18 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	685b      	ldr	r3, [r3, #4]
 8015ad0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015ad2:	693b      	ldr	r3, [r7, #16]
 8015ad4:	8afa      	ldrh	r2, [r7, #22]
 8015ad6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015ad8:	693b      	ldr	r3, [r7, #16]
 8015ada:	2206      	movs	r2, #6
 8015adc:	6839      	ldr	r1, [r7, #0]
 8015ade:	4618      	mov	r0, r3
 8015ae0:	f000 f970 	bl	8015dc4 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015ae4:	693b      	ldr	r3, [r7, #16]
 8015ae6:	3306      	adds	r3, #6
 8015ae8:	2206      	movs	r2, #6
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	4618      	mov	r0, r3
 8015aee:	f000 f969 	bl	8015dc4 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015af2:	68fb      	ldr	r3, [r7, #12]
 8015af4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015af8:	2b06      	cmp	r3, #6
 8015afa:	d006      	beq.n	8015b0a <ethernet_output+0x66>
 8015afc:	4b0a      	ldr	r3, [pc, #40]	; (8015b28 <ethernet_output+0x84>)
 8015afe:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015b02:	490a      	ldr	r1, [pc, #40]	; (8015b2c <ethernet_output+0x88>)
 8015b04:	480a      	ldr	r0, [pc, #40]	; (8015b30 <ethernet_output+0x8c>)
 8015b06:	f000 f973 	bl	8015df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	699b      	ldr	r3, [r3, #24]
 8015b0e:	68b9      	ldr	r1, [r7, #8]
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	4798      	blx	r3
 8015b14:	4603      	mov	r3, r0
 8015b16:	e002      	b.n	8015b1e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015b18:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015b1a:	f06f 0301 	mvn.w	r3, #1
}
 8015b1e:	4618      	mov	r0, r3
 8015b20:	3718      	adds	r7, #24
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}
 8015b26:	bf00      	nop
 8015b28:	08019960 	.word	0x08019960
 8015b2c:	08019998 	.word	0x08019998
 8015b30:	080199cc 	.word	0x080199cc

08015b34 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b086      	sub	sp, #24
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
 8015b3c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015b3e:	683b      	ldr	r3, [r7, #0]
 8015b40:	60bb      	str	r3, [r7, #8]
 8015b42:	2304      	movs	r3, #4
 8015b44:	60fb      	str	r3, [r7, #12]
 8015b46:	2300      	movs	r3, #0
 8015b48:	613b      	str	r3, [r7, #16]
 8015b4a:	2300      	movs	r3, #0
 8015b4c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015b4e:	f107 0308 	add.w	r3, r7, #8
 8015b52:	2100      	movs	r1, #0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7f2 ff77 	bl	8008a48 <osMessageCreate>
 8015b5a:	4602      	mov	r2, r0
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	681b      	ldr	r3, [r3, #0]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d102      	bne.n	8015b6e <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015b68:	f04f 33ff 	mov.w	r3, #4294967295
 8015b6c:	e000      	b.n	8015b70 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015b6e:	2300      	movs	r3, #0
}
 8015b70:	4618      	mov	r0, r3
 8015b72:	3718      	adds	r7, #24
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b084      	sub	sp, #16
 8015b7c:	af00      	add	r7, sp, #0
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	6839      	ldr	r1, [r7, #0]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f7f2 ff84 	bl	8008a98 <osMessagePut>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d102      	bne.n	8015b9c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015b96:	2300      	movs	r3, #0
 8015b98:	73fb      	strb	r3, [r7, #15]
 8015b9a:	e001      	b.n	8015ba0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015b9c:	23ff      	movs	r3, #255	; 0xff
 8015b9e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3710      	adds	r7, #16
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b08c      	sub	sp, #48	; 0x30
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	61f8      	str	r0, [r7, #28]
 8015bb4:	61b9      	str	r1, [r7, #24]
 8015bb6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015bb8:	f7f2 fd83 	bl	80086c2 <osKernelSysTick>
 8015bbc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d017      	beq.n	8015bf4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	6819      	ldr	r1, [r3, #0]
 8015bc8:	f107 0320 	add.w	r3, r7, #32
 8015bcc:	697a      	ldr	r2, [r7, #20]
 8015bce:	4618      	mov	r0, r3
 8015bd0:	f7f2 ffa2 	bl	8008b18 <osMessageGet>

    if(event.status == osEventMessage)
 8015bd4:	6a3b      	ldr	r3, [r7, #32]
 8015bd6:	2b10      	cmp	r3, #16
 8015bd8:	d109      	bne.n	8015bee <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8015bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bdc:	461a      	mov	r2, r3
 8015bde:	69bb      	ldr	r3, [r7, #24]
 8015be0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015be2:	f7f2 fd6e 	bl	80086c2 <osKernelSysTick>
 8015be6:	4602      	mov	r2, r0
 8015be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015bea:	1ad3      	subs	r3, r2, r3
 8015bec:	e019      	b.n	8015c22 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015bee:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf2:	e016      	b.n	8015c22 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015bf4:	69fb      	ldr	r3, [r7, #28]
 8015bf6:	6819      	ldr	r1, [r3, #0]
 8015bf8:	463b      	mov	r3, r7
 8015bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8015bfe:	4618      	mov	r0, r3
 8015c00:	f7f2 ff8a 	bl	8008b18 <osMessageGet>
 8015c04:	f107 0320 	add.w	r3, r7, #32
 8015c08:	463a      	mov	r2, r7
 8015c0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8015c0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c12:	461a      	mov	r2, r3
 8015c14:	69bb      	ldr	r3, [r7, #24]
 8015c16:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8015c18:	f7f2 fd53 	bl	80086c2 <osKernelSysTick>
 8015c1c:	4602      	mov	r2, r0
 8015c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015c20:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015c22:	4618      	mov	r0, r3
 8015c24:	3730      	adds	r7, #48	; 0x30
 8015c26:	46bd      	mov	sp, r7
 8015c28:	bd80      	pop	{r7, pc}

08015c2a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8015c2a:	b480      	push	{r7}
 8015c2c:	b083      	sub	sp, #12
 8015c2e:	af00      	add	r7, sp, #0
 8015c30:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d101      	bne.n	8015c3e <sys_mbox_valid+0x14>
    return 0;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	e000      	b.n	8015c40 <sys_mbox_valid+0x16>
  else
    return 1;
 8015c3e:	2301      	movs	r3, #1
}
 8015c40:	4618      	mov	r0, r3
 8015c42:	370c      	adds	r7, #12
 8015c44:	46bd      	mov	sp, r7
 8015c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c4a:	4770      	bx	lr

08015c4c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015c50:	4803      	ldr	r0, [pc, #12]	; (8015c60 <sys_init+0x14>)
 8015c52:	f7f2 fda6 	bl	80087a2 <osMutexCreate>
 8015c56:	4603      	mov	r3, r0
 8015c58:	4a02      	ldr	r2, [pc, #8]	; (8015c64 <sys_init+0x18>)
 8015c5a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015c5c:	bf00      	nop
 8015c5e:	bd80      	pop	{r7, pc}
 8015c60:	08019b38 	.word	0x08019b38
 8015c64:	2000c950 	.word	0x2000c950

08015c68 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b084      	sub	sp, #16
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015c70:	2300      	movs	r3, #0
 8015c72:	60bb      	str	r3, [r7, #8]
 8015c74:	2300      	movs	r3, #0
 8015c76:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015c78:	f107 0308 	add.w	r3, r7, #8
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	f7f2 fd90 	bl	80087a2 <osMutexCreate>
 8015c82:	4602      	mov	r2, r0
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d102      	bne.n	8015c96 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015c90:	f04f 33ff 	mov.w	r3, #4294967295
 8015c94:	e000      	b.n	8015c98 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8015c96:	2300      	movs	r3, #0
}
 8015c98:	4618      	mov	r0, r3
 8015c9a:	3710      	adds	r7, #16
 8015c9c:	46bd      	mov	sp, r7
 8015c9e:	bd80      	pop	{r7, pc}

08015ca0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b082      	sub	sp, #8
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f04f 31ff 	mov.w	r1, #4294967295
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7f2 fd8f 	bl	80087d4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8015cb6:	bf00      	nop
 8015cb8:	3708      	adds	r7, #8
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}

08015cbe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8015cbe:	b580      	push	{r7, lr}
 8015cc0:	b082      	sub	sp, #8
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8015cc6:	687b      	ldr	r3, [r7, #4]
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	4618      	mov	r0, r3
 8015ccc:	f7f2 fdd0 	bl	8008870 <osMutexRelease>
}
 8015cd0:	bf00      	nop
 8015cd2:	3708      	adds	r7, #8
 8015cd4:	46bd      	mov	sp, r7
 8015cd6:	bd80      	pop	{r7, pc}

08015cd8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8015cd8:	b580      	push	{r7, lr}
 8015cda:	b08c      	sub	sp, #48	; 0x30
 8015cdc:	af00      	add	r7, sp, #0
 8015cde:	60f8      	str	r0, [r7, #12]
 8015ce0:	60b9      	str	r1, [r7, #8]
 8015ce2:	607a      	str	r2, [r7, #4]
 8015ce4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8015ce6:	f107 0314 	add.w	r3, r7, #20
 8015cea:	2200      	movs	r2, #0
 8015cec:	601a      	str	r2, [r3, #0]
 8015cee:	605a      	str	r2, [r3, #4]
 8015cf0:	609a      	str	r2, [r3, #8]
 8015cf2:	60da      	str	r2, [r3, #12]
 8015cf4:	611a      	str	r2, [r3, #16]
 8015cf6:	615a      	str	r2, [r3, #20]
 8015cf8:	619a      	str	r2, [r3, #24]
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	617b      	str	r3, [r7, #20]
 8015cfe:	68bb      	ldr	r3, [r7, #8]
 8015d00:	61bb      	str	r3, [r7, #24]
 8015d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015d04:	b21b      	sxth	r3, r3
 8015d06:	83bb      	strh	r3, [r7, #28]
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8015d0c:	f107 0314 	add.w	r3, r7, #20
 8015d10:	6879      	ldr	r1, [r7, #4]
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7f2 fce5 	bl	80086e2 <osThreadCreate>
 8015d18:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3730      	adds	r7, #48	; 0x30
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}
	...

08015d24 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015d28:	4b04      	ldr	r3, [pc, #16]	; (8015d3c <sys_arch_protect+0x18>)
 8015d2a:	681b      	ldr	r3, [r3, #0]
 8015d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f2 fd4f 	bl	80087d4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8015d36:	2301      	movs	r3, #1
}
 8015d38:	4618      	mov	r0, r3
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	2000c950 	.word	0x2000c950

08015d40 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015d40:	b580      	push	{r7, lr}
 8015d42:	b082      	sub	sp, #8
 8015d44:	af00      	add	r7, sp, #0
 8015d46:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015d48:	4b04      	ldr	r3, [pc, #16]	; (8015d5c <sys_arch_unprotect+0x1c>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	f7f2 fd8f 	bl	8008870 <osMutexRelease>
}
 8015d52:	bf00      	nop
 8015d54:	3708      	adds	r7, #8
 8015d56:	46bd      	mov	sp, r7
 8015d58:	bd80      	pop	{r7, pc}
 8015d5a:	bf00      	nop
 8015d5c:	2000c950 	.word	0x2000c950

08015d60 <__libc_init_array>:
 8015d60:	b570      	push	{r4, r5, r6, lr}
 8015d62:	4d0d      	ldr	r5, [pc, #52]	; (8015d98 <__libc_init_array+0x38>)
 8015d64:	4c0d      	ldr	r4, [pc, #52]	; (8015d9c <__libc_init_array+0x3c>)
 8015d66:	1b64      	subs	r4, r4, r5
 8015d68:	10a4      	asrs	r4, r4, #2
 8015d6a:	2600      	movs	r6, #0
 8015d6c:	42a6      	cmp	r6, r4
 8015d6e:	d109      	bne.n	8015d84 <__libc_init_array+0x24>
 8015d70:	4d0b      	ldr	r5, [pc, #44]	; (8015da0 <__libc_init_array+0x40>)
 8015d72:	4c0c      	ldr	r4, [pc, #48]	; (8015da4 <__libc_init_array+0x44>)
 8015d74:	f001 f856 	bl	8016e24 <_init>
 8015d78:	1b64      	subs	r4, r4, r5
 8015d7a:	10a4      	asrs	r4, r4, #2
 8015d7c:	2600      	movs	r6, #0
 8015d7e:	42a6      	cmp	r6, r4
 8015d80:	d105      	bne.n	8015d8e <__libc_init_array+0x2e>
 8015d82:	bd70      	pop	{r4, r5, r6, pc}
 8015d84:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d88:	4798      	blx	r3
 8015d8a:	3601      	adds	r6, #1
 8015d8c:	e7ee      	b.n	8015d6c <__libc_init_array+0xc>
 8015d8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8015d92:	4798      	blx	r3
 8015d94:	3601      	adds	r6, #1
 8015d96:	e7f2      	b.n	8015d7e <__libc_init_array+0x1e>
 8015d98:	08019c94 	.word	0x08019c94
 8015d9c:	08019c94 	.word	0x08019c94
 8015da0:	08019c94 	.word	0x08019c94
 8015da4:	08019c98 	.word	0x08019c98

08015da8 <memcmp>:
 8015da8:	b530      	push	{r4, r5, lr}
 8015daa:	3901      	subs	r1, #1
 8015dac:	2400      	movs	r4, #0
 8015dae:	42a2      	cmp	r2, r4
 8015db0:	d101      	bne.n	8015db6 <memcmp+0xe>
 8015db2:	2000      	movs	r0, #0
 8015db4:	e005      	b.n	8015dc2 <memcmp+0x1a>
 8015db6:	5d03      	ldrb	r3, [r0, r4]
 8015db8:	3401      	adds	r4, #1
 8015dba:	5d0d      	ldrb	r5, [r1, r4]
 8015dbc:	42ab      	cmp	r3, r5
 8015dbe:	d0f6      	beq.n	8015dae <memcmp+0x6>
 8015dc0:	1b58      	subs	r0, r3, r5
 8015dc2:	bd30      	pop	{r4, r5, pc}

08015dc4 <memcpy>:
 8015dc4:	440a      	add	r2, r1
 8015dc6:	4291      	cmp	r1, r2
 8015dc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8015dcc:	d100      	bne.n	8015dd0 <memcpy+0xc>
 8015dce:	4770      	bx	lr
 8015dd0:	b510      	push	{r4, lr}
 8015dd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dda:	4291      	cmp	r1, r2
 8015ddc:	d1f9      	bne.n	8015dd2 <memcpy+0xe>
 8015dde:	bd10      	pop	{r4, pc}

08015de0 <memset>:
 8015de0:	4402      	add	r2, r0
 8015de2:	4603      	mov	r3, r0
 8015de4:	4293      	cmp	r3, r2
 8015de6:	d100      	bne.n	8015dea <memset+0xa>
 8015de8:	4770      	bx	lr
 8015dea:	f803 1b01 	strb.w	r1, [r3], #1
 8015dee:	e7f9      	b.n	8015de4 <memset+0x4>

08015df0 <iprintf>:
 8015df0:	b40f      	push	{r0, r1, r2, r3}
 8015df2:	4b0a      	ldr	r3, [pc, #40]	; (8015e1c <iprintf+0x2c>)
 8015df4:	b513      	push	{r0, r1, r4, lr}
 8015df6:	681c      	ldr	r4, [r3, #0]
 8015df8:	b124      	cbz	r4, 8015e04 <iprintf+0x14>
 8015dfa:	69a3      	ldr	r3, [r4, #24]
 8015dfc:	b913      	cbnz	r3, 8015e04 <iprintf+0x14>
 8015dfe:	4620      	mov	r0, r4
 8015e00:	f000 fa46 	bl	8016290 <__sinit>
 8015e04:	ab05      	add	r3, sp, #20
 8015e06:	9a04      	ldr	r2, [sp, #16]
 8015e08:	68a1      	ldr	r1, [r4, #8]
 8015e0a:	9301      	str	r3, [sp, #4]
 8015e0c:	4620      	mov	r0, r4
 8015e0e:	f000 fc31 	bl	8016674 <_vfiprintf_r>
 8015e12:	b002      	add	sp, #8
 8015e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015e18:	b004      	add	sp, #16
 8015e1a:	4770      	bx	lr
 8015e1c:	2000001c 	.word	0x2000001c

08015e20 <rand>:
 8015e20:	4b17      	ldr	r3, [pc, #92]	; (8015e80 <rand+0x60>)
 8015e22:	b510      	push	{r4, lr}
 8015e24:	681c      	ldr	r4, [r3, #0]
 8015e26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015e28:	b9b3      	cbnz	r3, 8015e58 <rand+0x38>
 8015e2a:	2018      	movs	r0, #24
 8015e2c:	f000 fb46 	bl	80164bc <malloc>
 8015e30:	63a0      	str	r0, [r4, #56]	; 0x38
 8015e32:	b928      	cbnz	r0, 8015e40 <rand+0x20>
 8015e34:	4602      	mov	r2, r0
 8015e36:	4b13      	ldr	r3, [pc, #76]	; (8015e84 <rand+0x64>)
 8015e38:	4813      	ldr	r0, [pc, #76]	; (8015e88 <rand+0x68>)
 8015e3a:	214e      	movs	r1, #78	; 0x4e
 8015e3c:	f000 f8f0 	bl	8016020 <__assert_func>
 8015e40:	4a12      	ldr	r2, [pc, #72]	; (8015e8c <rand+0x6c>)
 8015e42:	4b13      	ldr	r3, [pc, #76]	; (8015e90 <rand+0x70>)
 8015e44:	e9c0 2300 	strd	r2, r3, [r0]
 8015e48:	4b12      	ldr	r3, [pc, #72]	; (8015e94 <rand+0x74>)
 8015e4a:	6083      	str	r3, [r0, #8]
 8015e4c:	230b      	movs	r3, #11
 8015e4e:	8183      	strh	r3, [r0, #12]
 8015e50:	2201      	movs	r2, #1
 8015e52:	2300      	movs	r3, #0
 8015e54:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8015e58:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8015e5a:	480f      	ldr	r0, [pc, #60]	; (8015e98 <rand+0x78>)
 8015e5c:	690a      	ldr	r2, [r1, #16]
 8015e5e:	694b      	ldr	r3, [r1, #20]
 8015e60:	4c0e      	ldr	r4, [pc, #56]	; (8015e9c <rand+0x7c>)
 8015e62:	4350      	muls	r0, r2
 8015e64:	fb04 0003 	mla	r0, r4, r3, r0
 8015e68:	fba2 3404 	umull	r3, r4, r2, r4
 8015e6c:	1c5a      	adds	r2, r3, #1
 8015e6e:	4404      	add	r4, r0
 8015e70:	f144 0000 	adc.w	r0, r4, #0
 8015e74:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8015e78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8015e7c:	bd10      	pop	{r4, pc}
 8015e7e:	bf00      	nop
 8015e80:	2000001c 	.word	0x2000001c
 8015e84:	08019b44 	.word	0x08019b44
 8015e88:	08019b5b 	.word	0x08019b5b
 8015e8c:	abcd330e 	.word	0xabcd330e
 8015e90:	e66d1234 	.word	0xe66d1234
 8015e94:	0005deec 	.word	0x0005deec
 8015e98:	5851f42d 	.word	0x5851f42d
 8015e9c:	4c957f2d 	.word	0x4c957f2d

08015ea0 <__swbuf_r>:
 8015ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ea2:	460e      	mov	r6, r1
 8015ea4:	4614      	mov	r4, r2
 8015ea6:	4605      	mov	r5, r0
 8015ea8:	b118      	cbz	r0, 8015eb2 <__swbuf_r+0x12>
 8015eaa:	6983      	ldr	r3, [r0, #24]
 8015eac:	b90b      	cbnz	r3, 8015eb2 <__swbuf_r+0x12>
 8015eae:	f000 f9ef 	bl	8016290 <__sinit>
 8015eb2:	4b21      	ldr	r3, [pc, #132]	; (8015f38 <__swbuf_r+0x98>)
 8015eb4:	429c      	cmp	r4, r3
 8015eb6:	d12b      	bne.n	8015f10 <__swbuf_r+0x70>
 8015eb8:	686c      	ldr	r4, [r5, #4]
 8015eba:	69a3      	ldr	r3, [r4, #24]
 8015ebc:	60a3      	str	r3, [r4, #8]
 8015ebe:	89a3      	ldrh	r3, [r4, #12]
 8015ec0:	071a      	lsls	r2, r3, #28
 8015ec2:	d52f      	bpl.n	8015f24 <__swbuf_r+0x84>
 8015ec4:	6923      	ldr	r3, [r4, #16]
 8015ec6:	b36b      	cbz	r3, 8015f24 <__swbuf_r+0x84>
 8015ec8:	6923      	ldr	r3, [r4, #16]
 8015eca:	6820      	ldr	r0, [r4, #0]
 8015ecc:	1ac0      	subs	r0, r0, r3
 8015ece:	6963      	ldr	r3, [r4, #20]
 8015ed0:	b2f6      	uxtb	r6, r6
 8015ed2:	4283      	cmp	r3, r0
 8015ed4:	4637      	mov	r7, r6
 8015ed6:	dc04      	bgt.n	8015ee2 <__swbuf_r+0x42>
 8015ed8:	4621      	mov	r1, r4
 8015eda:	4628      	mov	r0, r5
 8015edc:	f000 f944 	bl	8016168 <_fflush_r>
 8015ee0:	bb30      	cbnz	r0, 8015f30 <__swbuf_r+0x90>
 8015ee2:	68a3      	ldr	r3, [r4, #8]
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	60a3      	str	r3, [r4, #8]
 8015ee8:	6823      	ldr	r3, [r4, #0]
 8015eea:	1c5a      	adds	r2, r3, #1
 8015eec:	6022      	str	r2, [r4, #0]
 8015eee:	701e      	strb	r6, [r3, #0]
 8015ef0:	6963      	ldr	r3, [r4, #20]
 8015ef2:	3001      	adds	r0, #1
 8015ef4:	4283      	cmp	r3, r0
 8015ef6:	d004      	beq.n	8015f02 <__swbuf_r+0x62>
 8015ef8:	89a3      	ldrh	r3, [r4, #12]
 8015efa:	07db      	lsls	r3, r3, #31
 8015efc:	d506      	bpl.n	8015f0c <__swbuf_r+0x6c>
 8015efe:	2e0a      	cmp	r6, #10
 8015f00:	d104      	bne.n	8015f0c <__swbuf_r+0x6c>
 8015f02:	4621      	mov	r1, r4
 8015f04:	4628      	mov	r0, r5
 8015f06:	f000 f92f 	bl	8016168 <_fflush_r>
 8015f0a:	b988      	cbnz	r0, 8015f30 <__swbuf_r+0x90>
 8015f0c:	4638      	mov	r0, r7
 8015f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f10:	4b0a      	ldr	r3, [pc, #40]	; (8015f3c <__swbuf_r+0x9c>)
 8015f12:	429c      	cmp	r4, r3
 8015f14:	d101      	bne.n	8015f1a <__swbuf_r+0x7a>
 8015f16:	68ac      	ldr	r4, [r5, #8]
 8015f18:	e7cf      	b.n	8015eba <__swbuf_r+0x1a>
 8015f1a:	4b09      	ldr	r3, [pc, #36]	; (8015f40 <__swbuf_r+0xa0>)
 8015f1c:	429c      	cmp	r4, r3
 8015f1e:	bf08      	it	eq
 8015f20:	68ec      	ldreq	r4, [r5, #12]
 8015f22:	e7ca      	b.n	8015eba <__swbuf_r+0x1a>
 8015f24:	4621      	mov	r1, r4
 8015f26:	4628      	mov	r0, r5
 8015f28:	f000 f80c 	bl	8015f44 <__swsetup_r>
 8015f2c:	2800      	cmp	r0, #0
 8015f2e:	d0cb      	beq.n	8015ec8 <__swbuf_r+0x28>
 8015f30:	f04f 37ff 	mov.w	r7, #4294967295
 8015f34:	e7ea      	b.n	8015f0c <__swbuf_r+0x6c>
 8015f36:	bf00      	nop
 8015f38:	08019c18 	.word	0x08019c18
 8015f3c:	08019c38 	.word	0x08019c38
 8015f40:	08019bf8 	.word	0x08019bf8

08015f44 <__swsetup_r>:
 8015f44:	4b32      	ldr	r3, [pc, #200]	; (8016010 <__swsetup_r+0xcc>)
 8015f46:	b570      	push	{r4, r5, r6, lr}
 8015f48:	681d      	ldr	r5, [r3, #0]
 8015f4a:	4606      	mov	r6, r0
 8015f4c:	460c      	mov	r4, r1
 8015f4e:	b125      	cbz	r5, 8015f5a <__swsetup_r+0x16>
 8015f50:	69ab      	ldr	r3, [r5, #24]
 8015f52:	b913      	cbnz	r3, 8015f5a <__swsetup_r+0x16>
 8015f54:	4628      	mov	r0, r5
 8015f56:	f000 f99b 	bl	8016290 <__sinit>
 8015f5a:	4b2e      	ldr	r3, [pc, #184]	; (8016014 <__swsetup_r+0xd0>)
 8015f5c:	429c      	cmp	r4, r3
 8015f5e:	d10f      	bne.n	8015f80 <__swsetup_r+0x3c>
 8015f60:	686c      	ldr	r4, [r5, #4]
 8015f62:	89a3      	ldrh	r3, [r4, #12]
 8015f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015f68:	0719      	lsls	r1, r3, #28
 8015f6a:	d42c      	bmi.n	8015fc6 <__swsetup_r+0x82>
 8015f6c:	06dd      	lsls	r5, r3, #27
 8015f6e:	d411      	bmi.n	8015f94 <__swsetup_r+0x50>
 8015f70:	2309      	movs	r3, #9
 8015f72:	6033      	str	r3, [r6, #0]
 8015f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015f78:	81a3      	strh	r3, [r4, #12]
 8015f7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015f7e:	e03e      	b.n	8015ffe <__swsetup_r+0xba>
 8015f80:	4b25      	ldr	r3, [pc, #148]	; (8016018 <__swsetup_r+0xd4>)
 8015f82:	429c      	cmp	r4, r3
 8015f84:	d101      	bne.n	8015f8a <__swsetup_r+0x46>
 8015f86:	68ac      	ldr	r4, [r5, #8]
 8015f88:	e7eb      	b.n	8015f62 <__swsetup_r+0x1e>
 8015f8a:	4b24      	ldr	r3, [pc, #144]	; (801601c <__swsetup_r+0xd8>)
 8015f8c:	429c      	cmp	r4, r3
 8015f8e:	bf08      	it	eq
 8015f90:	68ec      	ldreq	r4, [r5, #12]
 8015f92:	e7e6      	b.n	8015f62 <__swsetup_r+0x1e>
 8015f94:	0758      	lsls	r0, r3, #29
 8015f96:	d512      	bpl.n	8015fbe <__swsetup_r+0x7a>
 8015f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015f9a:	b141      	cbz	r1, 8015fae <__swsetup_r+0x6a>
 8015f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015fa0:	4299      	cmp	r1, r3
 8015fa2:	d002      	beq.n	8015faa <__swsetup_r+0x66>
 8015fa4:	4630      	mov	r0, r6
 8015fa6:	f000 fa91 	bl	80164cc <_free_r>
 8015faa:	2300      	movs	r3, #0
 8015fac:	6363      	str	r3, [r4, #52]	; 0x34
 8015fae:	89a3      	ldrh	r3, [r4, #12]
 8015fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015fb4:	81a3      	strh	r3, [r4, #12]
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	6063      	str	r3, [r4, #4]
 8015fba:	6923      	ldr	r3, [r4, #16]
 8015fbc:	6023      	str	r3, [r4, #0]
 8015fbe:	89a3      	ldrh	r3, [r4, #12]
 8015fc0:	f043 0308 	orr.w	r3, r3, #8
 8015fc4:	81a3      	strh	r3, [r4, #12]
 8015fc6:	6923      	ldr	r3, [r4, #16]
 8015fc8:	b94b      	cbnz	r3, 8015fde <__swsetup_r+0x9a>
 8015fca:	89a3      	ldrh	r3, [r4, #12]
 8015fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015fd4:	d003      	beq.n	8015fde <__swsetup_r+0x9a>
 8015fd6:	4621      	mov	r1, r4
 8015fd8:	4630      	mov	r0, r6
 8015fda:	f000 fa2f 	bl	801643c <__smakebuf_r>
 8015fde:	89a0      	ldrh	r0, [r4, #12]
 8015fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015fe4:	f010 0301 	ands.w	r3, r0, #1
 8015fe8:	d00a      	beq.n	8016000 <__swsetup_r+0xbc>
 8015fea:	2300      	movs	r3, #0
 8015fec:	60a3      	str	r3, [r4, #8]
 8015fee:	6963      	ldr	r3, [r4, #20]
 8015ff0:	425b      	negs	r3, r3
 8015ff2:	61a3      	str	r3, [r4, #24]
 8015ff4:	6923      	ldr	r3, [r4, #16]
 8015ff6:	b943      	cbnz	r3, 801600a <__swsetup_r+0xc6>
 8015ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015ffc:	d1ba      	bne.n	8015f74 <__swsetup_r+0x30>
 8015ffe:	bd70      	pop	{r4, r5, r6, pc}
 8016000:	0781      	lsls	r1, r0, #30
 8016002:	bf58      	it	pl
 8016004:	6963      	ldrpl	r3, [r4, #20]
 8016006:	60a3      	str	r3, [r4, #8]
 8016008:	e7f4      	b.n	8015ff4 <__swsetup_r+0xb0>
 801600a:	2000      	movs	r0, #0
 801600c:	e7f7      	b.n	8015ffe <__swsetup_r+0xba>
 801600e:	bf00      	nop
 8016010:	2000001c 	.word	0x2000001c
 8016014:	08019c18 	.word	0x08019c18
 8016018:	08019c38 	.word	0x08019c38
 801601c:	08019bf8 	.word	0x08019bf8

08016020 <__assert_func>:
 8016020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016022:	4614      	mov	r4, r2
 8016024:	461a      	mov	r2, r3
 8016026:	4b09      	ldr	r3, [pc, #36]	; (801604c <__assert_func+0x2c>)
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	4605      	mov	r5, r0
 801602c:	68d8      	ldr	r0, [r3, #12]
 801602e:	b14c      	cbz	r4, 8016044 <__assert_func+0x24>
 8016030:	4b07      	ldr	r3, [pc, #28]	; (8016050 <__assert_func+0x30>)
 8016032:	9100      	str	r1, [sp, #0]
 8016034:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016038:	4906      	ldr	r1, [pc, #24]	; (8016054 <__assert_func+0x34>)
 801603a:	462b      	mov	r3, r5
 801603c:	f000 f9a6 	bl	801638c <fiprintf>
 8016040:	f000 fe42 	bl	8016cc8 <abort>
 8016044:	4b04      	ldr	r3, [pc, #16]	; (8016058 <__assert_func+0x38>)
 8016046:	461c      	mov	r4, r3
 8016048:	e7f3      	b.n	8016032 <__assert_func+0x12>
 801604a:	bf00      	nop
 801604c:	2000001c 	.word	0x2000001c
 8016050:	08019bba 	.word	0x08019bba
 8016054:	08019bc7 	.word	0x08019bc7
 8016058:	08019bf5 	.word	0x08019bf5

0801605c <__sflush_r>:
 801605c:	898a      	ldrh	r2, [r1, #12]
 801605e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016062:	4605      	mov	r5, r0
 8016064:	0710      	lsls	r0, r2, #28
 8016066:	460c      	mov	r4, r1
 8016068:	d458      	bmi.n	801611c <__sflush_r+0xc0>
 801606a:	684b      	ldr	r3, [r1, #4]
 801606c:	2b00      	cmp	r3, #0
 801606e:	dc05      	bgt.n	801607c <__sflush_r+0x20>
 8016070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016072:	2b00      	cmp	r3, #0
 8016074:	dc02      	bgt.n	801607c <__sflush_r+0x20>
 8016076:	2000      	movs	r0, #0
 8016078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801607c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801607e:	2e00      	cmp	r6, #0
 8016080:	d0f9      	beq.n	8016076 <__sflush_r+0x1a>
 8016082:	2300      	movs	r3, #0
 8016084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016088:	682f      	ldr	r7, [r5, #0]
 801608a:	602b      	str	r3, [r5, #0]
 801608c:	d032      	beq.n	80160f4 <__sflush_r+0x98>
 801608e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016090:	89a3      	ldrh	r3, [r4, #12]
 8016092:	075a      	lsls	r2, r3, #29
 8016094:	d505      	bpl.n	80160a2 <__sflush_r+0x46>
 8016096:	6863      	ldr	r3, [r4, #4]
 8016098:	1ac0      	subs	r0, r0, r3
 801609a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801609c:	b10b      	cbz	r3, 80160a2 <__sflush_r+0x46>
 801609e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80160a0:	1ac0      	subs	r0, r0, r3
 80160a2:	2300      	movs	r3, #0
 80160a4:	4602      	mov	r2, r0
 80160a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80160a8:	6a21      	ldr	r1, [r4, #32]
 80160aa:	4628      	mov	r0, r5
 80160ac:	47b0      	blx	r6
 80160ae:	1c43      	adds	r3, r0, #1
 80160b0:	89a3      	ldrh	r3, [r4, #12]
 80160b2:	d106      	bne.n	80160c2 <__sflush_r+0x66>
 80160b4:	6829      	ldr	r1, [r5, #0]
 80160b6:	291d      	cmp	r1, #29
 80160b8:	d82c      	bhi.n	8016114 <__sflush_r+0xb8>
 80160ba:	4a2a      	ldr	r2, [pc, #168]	; (8016164 <__sflush_r+0x108>)
 80160bc:	40ca      	lsrs	r2, r1
 80160be:	07d6      	lsls	r6, r2, #31
 80160c0:	d528      	bpl.n	8016114 <__sflush_r+0xb8>
 80160c2:	2200      	movs	r2, #0
 80160c4:	6062      	str	r2, [r4, #4]
 80160c6:	04d9      	lsls	r1, r3, #19
 80160c8:	6922      	ldr	r2, [r4, #16]
 80160ca:	6022      	str	r2, [r4, #0]
 80160cc:	d504      	bpl.n	80160d8 <__sflush_r+0x7c>
 80160ce:	1c42      	adds	r2, r0, #1
 80160d0:	d101      	bne.n	80160d6 <__sflush_r+0x7a>
 80160d2:	682b      	ldr	r3, [r5, #0]
 80160d4:	b903      	cbnz	r3, 80160d8 <__sflush_r+0x7c>
 80160d6:	6560      	str	r0, [r4, #84]	; 0x54
 80160d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160da:	602f      	str	r7, [r5, #0]
 80160dc:	2900      	cmp	r1, #0
 80160de:	d0ca      	beq.n	8016076 <__sflush_r+0x1a>
 80160e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160e4:	4299      	cmp	r1, r3
 80160e6:	d002      	beq.n	80160ee <__sflush_r+0x92>
 80160e8:	4628      	mov	r0, r5
 80160ea:	f000 f9ef 	bl	80164cc <_free_r>
 80160ee:	2000      	movs	r0, #0
 80160f0:	6360      	str	r0, [r4, #52]	; 0x34
 80160f2:	e7c1      	b.n	8016078 <__sflush_r+0x1c>
 80160f4:	6a21      	ldr	r1, [r4, #32]
 80160f6:	2301      	movs	r3, #1
 80160f8:	4628      	mov	r0, r5
 80160fa:	47b0      	blx	r6
 80160fc:	1c41      	adds	r1, r0, #1
 80160fe:	d1c7      	bne.n	8016090 <__sflush_r+0x34>
 8016100:	682b      	ldr	r3, [r5, #0]
 8016102:	2b00      	cmp	r3, #0
 8016104:	d0c4      	beq.n	8016090 <__sflush_r+0x34>
 8016106:	2b1d      	cmp	r3, #29
 8016108:	d001      	beq.n	801610e <__sflush_r+0xb2>
 801610a:	2b16      	cmp	r3, #22
 801610c:	d101      	bne.n	8016112 <__sflush_r+0xb6>
 801610e:	602f      	str	r7, [r5, #0]
 8016110:	e7b1      	b.n	8016076 <__sflush_r+0x1a>
 8016112:	89a3      	ldrh	r3, [r4, #12]
 8016114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016118:	81a3      	strh	r3, [r4, #12]
 801611a:	e7ad      	b.n	8016078 <__sflush_r+0x1c>
 801611c:	690f      	ldr	r7, [r1, #16]
 801611e:	2f00      	cmp	r7, #0
 8016120:	d0a9      	beq.n	8016076 <__sflush_r+0x1a>
 8016122:	0793      	lsls	r3, r2, #30
 8016124:	680e      	ldr	r6, [r1, #0]
 8016126:	bf08      	it	eq
 8016128:	694b      	ldreq	r3, [r1, #20]
 801612a:	600f      	str	r7, [r1, #0]
 801612c:	bf18      	it	ne
 801612e:	2300      	movne	r3, #0
 8016130:	eba6 0807 	sub.w	r8, r6, r7
 8016134:	608b      	str	r3, [r1, #8]
 8016136:	f1b8 0f00 	cmp.w	r8, #0
 801613a:	dd9c      	ble.n	8016076 <__sflush_r+0x1a>
 801613c:	6a21      	ldr	r1, [r4, #32]
 801613e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016140:	4643      	mov	r3, r8
 8016142:	463a      	mov	r2, r7
 8016144:	4628      	mov	r0, r5
 8016146:	47b0      	blx	r6
 8016148:	2800      	cmp	r0, #0
 801614a:	dc06      	bgt.n	801615a <__sflush_r+0xfe>
 801614c:	89a3      	ldrh	r3, [r4, #12]
 801614e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016152:	81a3      	strh	r3, [r4, #12]
 8016154:	f04f 30ff 	mov.w	r0, #4294967295
 8016158:	e78e      	b.n	8016078 <__sflush_r+0x1c>
 801615a:	4407      	add	r7, r0
 801615c:	eba8 0800 	sub.w	r8, r8, r0
 8016160:	e7e9      	b.n	8016136 <__sflush_r+0xda>
 8016162:	bf00      	nop
 8016164:	20400001 	.word	0x20400001

08016168 <_fflush_r>:
 8016168:	b538      	push	{r3, r4, r5, lr}
 801616a:	690b      	ldr	r3, [r1, #16]
 801616c:	4605      	mov	r5, r0
 801616e:	460c      	mov	r4, r1
 8016170:	b913      	cbnz	r3, 8016178 <_fflush_r+0x10>
 8016172:	2500      	movs	r5, #0
 8016174:	4628      	mov	r0, r5
 8016176:	bd38      	pop	{r3, r4, r5, pc}
 8016178:	b118      	cbz	r0, 8016182 <_fflush_r+0x1a>
 801617a:	6983      	ldr	r3, [r0, #24]
 801617c:	b90b      	cbnz	r3, 8016182 <_fflush_r+0x1a>
 801617e:	f000 f887 	bl	8016290 <__sinit>
 8016182:	4b14      	ldr	r3, [pc, #80]	; (80161d4 <_fflush_r+0x6c>)
 8016184:	429c      	cmp	r4, r3
 8016186:	d11b      	bne.n	80161c0 <_fflush_r+0x58>
 8016188:	686c      	ldr	r4, [r5, #4]
 801618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801618e:	2b00      	cmp	r3, #0
 8016190:	d0ef      	beq.n	8016172 <_fflush_r+0xa>
 8016192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016194:	07d0      	lsls	r0, r2, #31
 8016196:	d404      	bmi.n	80161a2 <_fflush_r+0x3a>
 8016198:	0599      	lsls	r1, r3, #22
 801619a:	d402      	bmi.n	80161a2 <_fflush_r+0x3a>
 801619c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801619e:	f000 f927 	bl	80163f0 <__retarget_lock_acquire_recursive>
 80161a2:	4628      	mov	r0, r5
 80161a4:	4621      	mov	r1, r4
 80161a6:	f7ff ff59 	bl	801605c <__sflush_r>
 80161aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80161ac:	07da      	lsls	r2, r3, #31
 80161ae:	4605      	mov	r5, r0
 80161b0:	d4e0      	bmi.n	8016174 <_fflush_r+0xc>
 80161b2:	89a3      	ldrh	r3, [r4, #12]
 80161b4:	059b      	lsls	r3, r3, #22
 80161b6:	d4dd      	bmi.n	8016174 <_fflush_r+0xc>
 80161b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80161ba:	f000 f91a 	bl	80163f2 <__retarget_lock_release_recursive>
 80161be:	e7d9      	b.n	8016174 <_fflush_r+0xc>
 80161c0:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <_fflush_r+0x70>)
 80161c2:	429c      	cmp	r4, r3
 80161c4:	d101      	bne.n	80161ca <_fflush_r+0x62>
 80161c6:	68ac      	ldr	r4, [r5, #8]
 80161c8:	e7df      	b.n	801618a <_fflush_r+0x22>
 80161ca:	4b04      	ldr	r3, [pc, #16]	; (80161dc <_fflush_r+0x74>)
 80161cc:	429c      	cmp	r4, r3
 80161ce:	bf08      	it	eq
 80161d0:	68ec      	ldreq	r4, [r5, #12]
 80161d2:	e7da      	b.n	801618a <_fflush_r+0x22>
 80161d4:	08019c18 	.word	0x08019c18
 80161d8:	08019c38 	.word	0x08019c38
 80161dc:	08019bf8 	.word	0x08019bf8

080161e0 <std>:
 80161e0:	2300      	movs	r3, #0
 80161e2:	b510      	push	{r4, lr}
 80161e4:	4604      	mov	r4, r0
 80161e6:	e9c0 3300 	strd	r3, r3, [r0]
 80161ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161ee:	6083      	str	r3, [r0, #8]
 80161f0:	8181      	strh	r1, [r0, #12]
 80161f2:	6643      	str	r3, [r0, #100]	; 0x64
 80161f4:	81c2      	strh	r2, [r0, #14]
 80161f6:	6183      	str	r3, [r0, #24]
 80161f8:	4619      	mov	r1, r3
 80161fa:	2208      	movs	r2, #8
 80161fc:	305c      	adds	r0, #92	; 0x5c
 80161fe:	f7ff fdef 	bl	8015de0 <memset>
 8016202:	4b05      	ldr	r3, [pc, #20]	; (8016218 <std+0x38>)
 8016204:	6263      	str	r3, [r4, #36]	; 0x24
 8016206:	4b05      	ldr	r3, [pc, #20]	; (801621c <std+0x3c>)
 8016208:	62a3      	str	r3, [r4, #40]	; 0x28
 801620a:	4b05      	ldr	r3, [pc, #20]	; (8016220 <std+0x40>)
 801620c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801620e:	4b05      	ldr	r3, [pc, #20]	; (8016224 <std+0x44>)
 8016210:	6224      	str	r4, [r4, #32]
 8016212:	6323      	str	r3, [r4, #48]	; 0x30
 8016214:	bd10      	pop	{r4, pc}
 8016216:	bf00      	nop
 8016218:	08016c1d 	.word	0x08016c1d
 801621c:	08016c3f 	.word	0x08016c3f
 8016220:	08016c77 	.word	0x08016c77
 8016224:	08016c9b 	.word	0x08016c9b

08016228 <_cleanup_r>:
 8016228:	4901      	ldr	r1, [pc, #4]	; (8016230 <_cleanup_r+0x8>)
 801622a:	f000 b8c1 	b.w	80163b0 <_fwalk_reent>
 801622e:	bf00      	nop
 8016230:	08016169 	.word	0x08016169

08016234 <__sfmoreglue>:
 8016234:	b570      	push	{r4, r5, r6, lr}
 8016236:	1e4a      	subs	r2, r1, #1
 8016238:	2568      	movs	r5, #104	; 0x68
 801623a:	4355      	muls	r5, r2
 801623c:	460e      	mov	r6, r1
 801623e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016242:	f000 f993 	bl	801656c <_malloc_r>
 8016246:	4604      	mov	r4, r0
 8016248:	b140      	cbz	r0, 801625c <__sfmoreglue+0x28>
 801624a:	2100      	movs	r1, #0
 801624c:	e9c0 1600 	strd	r1, r6, [r0]
 8016250:	300c      	adds	r0, #12
 8016252:	60a0      	str	r0, [r4, #8]
 8016254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016258:	f7ff fdc2 	bl	8015de0 <memset>
 801625c:	4620      	mov	r0, r4
 801625e:	bd70      	pop	{r4, r5, r6, pc}

08016260 <__sfp_lock_acquire>:
 8016260:	4801      	ldr	r0, [pc, #4]	; (8016268 <__sfp_lock_acquire+0x8>)
 8016262:	f000 b8c5 	b.w	80163f0 <__retarget_lock_acquire_recursive>
 8016266:	bf00      	nop
 8016268:	2000c95c 	.word	0x2000c95c

0801626c <__sfp_lock_release>:
 801626c:	4801      	ldr	r0, [pc, #4]	; (8016274 <__sfp_lock_release+0x8>)
 801626e:	f000 b8c0 	b.w	80163f2 <__retarget_lock_release_recursive>
 8016272:	bf00      	nop
 8016274:	2000c95c 	.word	0x2000c95c

08016278 <__sinit_lock_acquire>:
 8016278:	4801      	ldr	r0, [pc, #4]	; (8016280 <__sinit_lock_acquire+0x8>)
 801627a:	f000 b8b9 	b.w	80163f0 <__retarget_lock_acquire_recursive>
 801627e:	bf00      	nop
 8016280:	2000c957 	.word	0x2000c957

08016284 <__sinit_lock_release>:
 8016284:	4801      	ldr	r0, [pc, #4]	; (801628c <__sinit_lock_release+0x8>)
 8016286:	f000 b8b4 	b.w	80163f2 <__retarget_lock_release_recursive>
 801628a:	bf00      	nop
 801628c:	2000c957 	.word	0x2000c957

08016290 <__sinit>:
 8016290:	b510      	push	{r4, lr}
 8016292:	4604      	mov	r4, r0
 8016294:	f7ff fff0 	bl	8016278 <__sinit_lock_acquire>
 8016298:	69a3      	ldr	r3, [r4, #24]
 801629a:	b11b      	cbz	r3, 80162a4 <__sinit+0x14>
 801629c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80162a0:	f7ff bff0 	b.w	8016284 <__sinit_lock_release>
 80162a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80162a8:	6523      	str	r3, [r4, #80]	; 0x50
 80162aa:	4b13      	ldr	r3, [pc, #76]	; (80162f8 <__sinit+0x68>)
 80162ac:	4a13      	ldr	r2, [pc, #76]	; (80162fc <__sinit+0x6c>)
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80162b2:	42a3      	cmp	r3, r4
 80162b4:	bf04      	itt	eq
 80162b6:	2301      	moveq	r3, #1
 80162b8:	61a3      	streq	r3, [r4, #24]
 80162ba:	4620      	mov	r0, r4
 80162bc:	f000 f820 	bl	8016300 <__sfp>
 80162c0:	6060      	str	r0, [r4, #4]
 80162c2:	4620      	mov	r0, r4
 80162c4:	f000 f81c 	bl	8016300 <__sfp>
 80162c8:	60a0      	str	r0, [r4, #8]
 80162ca:	4620      	mov	r0, r4
 80162cc:	f000 f818 	bl	8016300 <__sfp>
 80162d0:	2200      	movs	r2, #0
 80162d2:	60e0      	str	r0, [r4, #12]
 80162d4:	2104      	movs	r1, #4
 80162d6:	6860      	ldr	r0, [r4, #4]
 80162d8:	f7ff ff82 	bl	80161e0 <std>
 80162dc:	68a0      	ldr	r0, [r4, #8]
 80162de:	2201      	movs	r2, #1
 80162e0:	2109      	movs	r1, #9
 80162e2:	f7ff ff7d 	bl	80161e0 <std>
 80162e6:	68e0      	ldr	r0, [r4, #12]
 80162e8:	2202      	movs	r2, #2
 80162ea:	2112      	movs	r1, #18
 80162ec:	f7ff ff78 	bl	80161e0 <std>
 80162f0:	2301      	movs	r3, #1
 80162f2:	61a3      	str	r3, [r4, #24]
 80162f4:	e7d2      	b.n	801629c <__sinit+0xc>
 80162f6:	bf00      	nop
 80162f8:	08019b40 	.word	0x08019b40
 80162fc:	08016229 	.word	0x08016229

08016300 <__sfp>:
 8016300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016302:	4607      	mov	r7, r0
 8016304:	f7ff ffac 	bl	8016260 <__sfp_lock_acquire>
 8016308:	4b1e      	ldr	r3, [pc, #120]	; (8016384 <__sfp+0x84>)
 801630a:	681e      	ldr	r6, [r3, #0]
 801630c:	69b3      	ldr	r3, [r6, #24]
 801630e:	b913      	cbnz	r3, 8016316 <__sfp+0x16>
 8016310:	4630      	mov	r0, r6
 8016312:	f7ff ffbd 	bl	8016290 <__sinit>
 8016316:	3648      	adds	r6, #72	; 0x48
 8016318:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801631c:	3b01      	subs	r3, #1
 801631e:	d503      	bpl.n	8016328 <__sfp+0x28>
 8016320:	6833      	ldr	r3, [r6, #0]
 8016322:	b30b      	cbz	r3, 8016368 <__sfp+0x68>
 8016324:	6836      	ldr	r6, [r6, #0]
 8016326:	e7f7      	b.n	8016318 <__sfp+0x18>
 8016328:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801632c:	b9d5      	cbnz	r5, 8016364 <__sfp+0x64>
 801632e:	4b16      	ldr	r3, [pc, #88]	; (8016388 <__sfp+0x88>)
 8016330:	60e3      	str	r3, [r4, #12]
 8016332:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016336:	6665      	str	r5, [r4, #100]	; 0x64
 8016338:	f000 f859 	bl	80163ee <__retarget_lock_init_recursive>
 801633c:	f7ff ff96 	bl	801626c <__sfp_lock_release>
 8016340:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016344:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016348:	6025      	str	r5, [r4, #0]
 801634a:	61a5      	str	r5, [r4, #24]
 801634c:	2208      	movs	r2, #8
 801634e:	4629      	mov	r1, r5
 8016350:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016354:	f7ff fd44 	bl	8015de0 <memset>
 8016358:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801635c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016360:	4620      	mov	r0, r4
 8016362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016364:	3468      	adds	r4, #104	; 0x68
 8016366:	e7d9      	b.n	801631c <__sfp+0x1c>
 8016368:	2104      	movs	r1, #4
 801636a:	4638      	mov	r0, r7
 801636c:	f7ff ff62 	bl	8016234 <__sfmoreglue>
 8016370:	4604      	mov	r4, r0
 8016372:	6030      	str	r0, [r6, #0]
 8016374:	2800      	cmp	r0, #0
 8016376:	d1d5      	bne.n	8016324 <__sfp+0x24>
 8016378:	f7ff ff78 	bl	801626c <__sfp_lock_release>
 801637c:	230c      	movs	r3, #12
 801637e:	603b      	str	r3, [r7, #0]
 8016380:	e7ee      	b.n	8016360 <__sfp+0x60>
 8016382:	bf00      	nop
 8016384:	08019b40 	.word	0x08019b40
 8016388:	ffff0001 	.word	0xffff0001

0801638c <fiprintf>:
 801638c:	b40e      	push	{r1, r2, r3}
 801638e:	b503      	push	{r0, r1, lr}
 8016390:	4601      	mov	r1, r0
 8016392:	ab03      	add	r3, sp, #12
 8016394:	4805      	ldr	r0, [pc, #20]	; (80163ac <fiprintf+0x20>)
 8016396:	f853 2b04 	ldr.w	r2, [r3], #4
 801639a:	6800      	ldr	r0, [r0, #0]
 801639c:	9301      	str	r3, [sp, #4]
 801639e:	f000 f969 	bl	8016674 <_vfiprintf_r>
 80163a2:	b002      	add	sp, #8
 80163a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80163a8:	b003      	add	sp, #12
 80163aa:	4770      	bx	lr
 80163ac:	2000001c 	.word	0x2000001c

080163b0 <_fwalk_reent>:
 80163b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80163b4:	4606      	mov	r6, r0
 80163b6:	4688      	mov	r8, r1
 80163b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80163bc:	2700      	movs	r7, #0
 80163be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80163c2:	f1b9 0901 	subs.w	r9, r9, #1
 80163c6:	d505      	bpl.n	80163d4 <_fwalk_reent+0x24>
 80163c8:	6824      	ldr	r4, [r4, #0]
 80163ca:	2c00      	cmp	r4, #0
 80163cc:	d1f7      	bne.n	80163be <_fwalk_reent+0xe>
 80163ce:	4638      	mov	r0, r7
 80163d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80163d4:	89ab      	ldrh	r3, [r5, #12]
 80163d6:	2b01      	cmp	r3, #1
 80163d8:	d907      	bls.n	80163ea <_fwalk_reent+0x3a>
 80163da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80163de:	3301      	adds	r3, #1
 80163e0:	d003      	beq.n	80163ea <_fwalk_reent+0x3a>
 80163e2:	4629      	mov	r1, r5
 80163e4:	4630      	mov	r0, r6
 80163e6:	47c0      	blx	r8
 80163e8:	4307      	orrs	r7, r0
 80163ea:	3568      	adds	r5, #104	; 0x68
 80163ec:	e7e9      	b.n	80163c2 <_fwalk_reent+0x12>

080163ee <__retarget_lock_init_recursive>:
 80163ee:	4770      	bx	lr

080163f0 <__retarget_lock_acquire_recursive>:
 80163f0:	4770      	bx	lr

080163f2 <__retarget_lock_release_recursive>:
 80163f2:	4770      	bx	lr

080163f4 <__swhatbuf_r>:
 80163f4:	b570      	push	{r4, r5, r6, lr}
 80163f6:	460e      	mov	r6, r1
 80163f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163fc:	2900      	cmp	r1, #0
 80163fe:	b096      	sub	sp, #88	; 0x58
 8016400:	4614      	mov	r4, r2
 8016402:	461d      	mov	r5, r3
 8016404:	da07      	bge.n	8016416 <__swhatbuf_r+0x22>
 8016406:	2300      	movs	r3, #0
 8016408:	602b      	str	r3, [r5, #0]
 801640a:	89b3      	ldrh	r3, [r6, #12]
 801640c:	061a      	lsls	r2, r3, #24
 801640e:	d410      	bmi.n	8016432 <__swhatbuf_r+0x3e>
 8016410:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016414:	e00e      	b.n	8016434 <__swhatbuf_r+0x40>
 8016416:	466a      	mov	r2, sp
 8016418:	f000 fc6e 	bl	8016cf8 <_fstat_r>
 801641c:	2800      	cmp	r0, #0
 801641e:	dbf2      	blt.n	8016406 <__swhatbuf_r+0x12>
 8016420:	9a01      	ldr	r2, [sp, #4]
 8016422:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016426:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801642a:	425a      	negs	r2, r3
 801642c:	415a      	adcs	r2, r3
 801642e:	602a      	str	r2, [r5, #0]
 8016430:	e7ee      	b.n	8016410 <__swhatbuf_r+0x1c>
 8016432:	2340      	movs	r3, #64	; 0x40
 8016434:	2000      	movs	r0, #0
 8016436:	6023      	str	r3, [r4, #0]
 8016438:	b016      	add	sp, #88	; 0x58
 801643a:	bd70      	pop	{r4, r5, r6, pc}

0801643c <__smakebuf_r>:
 801643c:	898b      	ldrh	r3, [r1, #12]
 801643e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016440:	079d      	lsls	r5, r3, #30
 8016442:	4606      	mov	r6, r0
 8016444:	460c      	mov	r4, r1
 8016446:	d507      	bpl.n	8016458 <__smakebuf_r+0x1c>
 8016448:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801644c:	6023      	str	r3, [r4, #0]
 801644e:	6123      	str	r3, [r4, #16]
 8016450:	2301      	movs	r3, #1
 8016452:	6163      	str	r3, [r4, #20]
 8016454:	b002      	add	sp, #8
 8016456:	bd70      	pop	{r4, r5, r6, pc}
 8016458:	ab01      	add	r3, sp, #4
 801645a:	466a      	mov	r2, sp
 801645c:	f7ff ffca 	bl	80163f4 <__swhatbuf_r>
 8016460:	9900      	ldr	r1, [sp, #0]
 8016462:	4605      	mov	r5, r0
 8016464:	4630      	mov	r0, r6
 8016466:	f000 f881 	bl	801656c <_malloc_r>
 801646a:	b948      	cbnz	r0, 8016480 <__smakebuf_r+0x44>
 801646c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016470:	059a      	lsls	r2, r3, #22
 8016472:	d4ef      	bmi.n	8016454 <__smakebuf_r+0x18>
 8016474:	f023 0303 	bic.w	r3, r3, #3
 8016478:	f043 0302 	orr.w	r3, r3, #2
 801647c:	81a3      	strh	r3, [r4, #12]
 801647e:	e7e3      	b.n	8016448 <__smakebuf_r+0xc>
 8016480:	4b0d      	ldr	r3, [pc, #52]	; (80164b8 <__smakebuf_r+0x7c>)
 8016482:	62b3      	str	r3, [r6, #40]	; 0x28
 8016484:	89a3      	ldrh	r3, [r4, #12]
 8016486:	6020      	str	r0, [r4, #0]
 8016488:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801648c:	81a3      	strh	r3, [r4, #12]
 801648e:	9b00      	ldr	r3, [sp, #0]
 8016490:	6163      	str	r3, [r4, #20]
 8016492:	9b01      	ldr	r3, [sp, #4]
 8016494:	6120      	str	r0, [r4, #16]
 8016496:	b15b      	cbz	r3, 80164b0 <__smakebuf_r+0x74>
 8016498:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801649c:	4630      	mov	r0, r6
 801649e:	f000 fc3d 	bl	8016d1c <_isatty_r>
 80164a2:	b128      	cbz	r0, 80164b0 <__smakebuf_r+0x74>
 80164a4:	89a3      	ldrh	r3, [r4, #12]
 80164a6:	f023 0303 	bic.w	r3, r3, #3
 80164aa:	f043 0301 	orr.w	r3, r3, #1
 80164ae:	81a3      	strh	r3, [r4, #12]
 80164b0:	89a0      	ldrh	r0, [r4, #12]
 80164b2:	4305      	orrs	r5, r0
 80164b4:	81a5      	strh	r5, [r4, #12]
 80164b6:	e7cd      	b.n	8016454 <__smakebuf_r+0x18>
 80164b8:	08016229 	.word	0x08016229

080164bc <malloc>:
 80164bc:	4b02      	ldr	r3, [pc, #8]	; (80164c8 <malloc+0xc>)
 80164be:	4601      	mov	r1, r0
 80164c0:	6818      	ldr	r0, [r3, #0]
 80164c2:	f000 b853 	b.w	801656c <_malloc_r>
 80164c6:	bf00      	nop
 80164c8:	2000001c 	.word	0x2000001c

080164cc <_free_r>:
 80164cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80164ce:	2900      	cmp	r1, #0
 80164d0:	d048      	beq.n	8016564 <_free_r+0x98>
 80164d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80164d6:	9001      	str	r0, [sp, #4]
 80164d8:	2b00      	cmp	r3, #0
 80164da:	f1a1 0404 	sub.w	r4, r1, #4
 80164de:	bfb8      	it	lt
 80164e0:	18e4      	addlt	r4, r4, r3
 80164e2:	f000 fc3d 	bl	8016d60 <__malloc_lock>
 80164e6:	4a20      	ldr	r2, [pc, #128]	; (8016568 <_free_r+0x9c>)
 80164e8:	9801      	ldr	r0, [sp, #4]
 80164ea:	6813      	ldr	r3, [r2, #0]
 80164ec:	4615      	mov	r5, r2
 80164ee:	b933      	cbnz	r3, 80164fe <_free_r+0x32>
 80164f0:	6063      	str	r3, [r4, #4]
 80164f2:	6014      	str	r4, [r2, #0]
 80164f4:	b003      	add	sp, #12
 80164f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80164fa:	f000 bc37 	b.w	8016d6c <__malloc_unlock>
 80164fe:	42a3      	cmp	r3, r4
 8016500:	d90b      	bls.n	801651a <_free_r+0x4e>
 8016502:	6821      	ldr	r1, [r4, #0]
 8016504:	1862      	adds	r2, r4, r1
 8016506:	4293      	cmp	r3, r2
 8016508:	bf04      	itt	eq
 801650a:	681a      	ldreq	r2, [r3, #0]
 801650c:	685b      	ldreq	r3, [r3, #4]
 801650e:	6063      	str	r3, [r4, #4]
 8016510:	bf04      	itt	eq
 8016512:	1852      	addeq	r2, r2, r1
 8016514:	6022      	streq	r2, [r4, #0]
 8016516:	602c      	str	r4, [r5, #0]
 8016518:	e7ec      	b.n	80164f4 <_free_r+0x28>
 801651a:	461a      	mov	r2, r3
 801651c:	685b      	ldr	r3, [r3, #4]
 801651e:	b10b      	cbz	r3, 8016524 <_free_r+0x58>
 8016520:	42a3      	cmp	r3, r4
 8016522:	d9fa      	bls.n	801651a <_free_r+0x4e>
 8016524:	6811      	ldr	r1, [r2, #0]
 8016526:	1855      	adds	r5, r2, r1
 8016528:	42a5      	cmp	r5, r4
 801652a:	d10b      	bne.n	8016544 <_free_r+0x78>
 801652c:	6824      	ldr	r4, [r4, #0]
 801652e:	4421      	add	r1, r4
 8016530:	1854      	adds	r4, r2, r1
 8016532:	42a3      	cmp	r3, r4
 8016534:	6011      	str	r1, [r2, #0]
 8016536:	d1dd      	bne.n	80164f4 <_free_r+0x28>
 8016538:	681c      	ldr	r4, [r3, #0]
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	6053      	str	r3, [r2, #4]
 801653e:	4421      	add	r1, r4
 8016540:	6011      	str	r1, [r2, #0]
 8016542:	e7d7      	b.n	80164f4 <_free_r+0x28>
 8016544:	d902      	bls.n	801654c <_free_r+0x80>
 8016546:	230c      	movs	r3, #12
 8016548:	6003      	str	r3, [r0, #0]
 801654a:	e7d3      	b.n	80164f4 <_free_r+0x28>
 801654c:	6825      	ldr	r5, [r4, #0]
 801654e:	1961      	adds	r1, r4, r5
 8016550:	428b      	cmp	r3, r1
 8016552:	bf04      	itt	eq
 8016554:	6819      	ldreq	r1, [r3, #0]
 8016556:	685b      	ldreq	r3, [r3, #4]
 8016558:	6063      	str	r3, [r4, #4]
 801655a:	bf04      	itt	eq
 801655c:	1949      	addeq	r1, r1, r5
 801655e:	6021      	streq	r1, [r4, #0]
 8016560:	6054      	str	r4, [r2, #4]
 8016562:	e7c7      	b.n	80164f4 <_free_r+0x28>
 8016564:	b003      	add	sp, #12
 8016566:	bd30      	pop	{r4, r5, pc}
 8016568:	20004728 	.word	0x20004728

0801656c <_malloc_r>:
 801656c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801656e:	1ccd      	adds	r5, r1, #3
 8016570:	f025 0503 	bic.w	r5, r5, #3
 8016574:	3508      	adds	r5, #8
 8016576:	2d0c      	cmp	r5, #12
 8016578:	bf38      	it	cc
 801657a:	250c      	movcc	r5, #12
 801657c:	2d00      	cmp	r5, #0
 801657e:	4606      	mov	r6, r0
 8016580:	db01      	blt.n	8016586 <_malloc_r+0x1a>
 8016582:	42a9      	cmp	r1, r5
 8016584:	d903      	bls.n	801658e <_malloc_r+0x22>
 8016586:	230c      	movs	r3, #12
 8016588:	6033      	str	r3, [r6, #0]
 801658a:	2000      	movs	r0, #0
 801658c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801658e:	f000 fbe7 	bl	8016d60 <__malloc_lock>
 8016592:	4921      	ldr	r1, [pc, #132]	; (8016618 <_malloc_r+0xac>)
 8016594:	680a      	ldr	r2, [r1, #0]
 8016596:	4614      	mov	r4, r2
 8016598:	b99c      	cbnz	r4, 80165c2 <_malloc_r+0x56>
 801659a:	4f20      	ldr	r7, [pc, #128]	; (801661c <_malloc_r+0xb0>)
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	b923      	cbnz	r3, 80165aa <_malloc_r+0x3e>
 80165a0:	4621      	mov	r1, r4
 80165a2:	4630      	mov	r0, r6
 80165a4:	f000 fb2a 	bl	8016bfc <_sbrk_r>
 80165a8:	6038      	str	r0, [r7, #0]
 80165aa:	4629      	mov	r1, r5
 80165ac:	4630      	mov	r0, r6
 80165ae:	f000 fb25 	bl	8016bfc <_sbrk_r>
 80165b2:	1c43      	adds	r3, r0, #1
 80165b4:	d123      	bne.n	80165fe <_malloc_r+0x92>
 80165b6:	230c      	movs	r3, #12
 80165b8:	6033      	str	r3, [r6, #0]
 80165ba:	4630      	mov	r0, r6
 80165bc:	f000 fbd6 	bl	8016d6c <__malloc_unlock>
 80165c0:	e7e3      	b.n	801658a <_malloc_r+0x1e>
 80165c2:	6823      	ldr	r3, [r4, #0]
 80165c4:	1b5b      	subs	r3, r3, r5
 80165c6:	d417      	bmi.n	80165f8 <_malloc_r+0x8c>
 80165c8:	2b0b      	cmp	r3, #11
 80165ca:	d903      	bls.n	80165d4 <_malloc_r+0x68>
 80165cc:	6023      	str	r3, [r4, #0]
 80165ce:	441c      	add	r4, r3
 80165d0:	6025      	str	r5, [r4, #0]
 80165d2:	e004      	b.n	80165de <_malloc_r+0x72>
 80165d4:	6863      	ldr	r3, [r4, #4]
 80165d6:	42a2      	cmp	r2, r4
 80165d8:	bf0c      	ite	eq
 80165da:	600b      	streq	r3, [r1, #0]
 80165dc:	6053      	strne	r3, [r2, #4]
 80165de:	4630      	mov	r0, r6
 80165e0:	f000 fbc4 	bl	8016d6c <__malloc_unlock>
 80165e4:	f104 000b 	add.w	r0, r4, #11
 80165e8:	1d23      	adds	r3, r4, #4
 80165ea:	f020 0007 	bic.w	r0, r0, #7
 80165ee:	1ac2      	subs	r2, r0, r3
 80165f0:	d0cc      	beq.n	801658c <_malloc_r+0x20>
 80165f2:	1a1b      	subs	r3, r3, r0
 80165f4:	50a3      	str	r3, [r4, r2]
 80165f6:	e7c9      	b.n	801658c <_malloc_r+0x20>
 80165f8:	4622      	mov	r2, r4
 80165fa:	6864      	ldr	r4, [r4, #4]
 80165fc:	e7cc      	b.n	8016598 <_malloc_r+0x2c>
 80165fe:	1cc4      	adds	r4, r0, #3
 8016600:	f024 0403 	bic.w	r4, r4, #3
 8016604:	42a0      	cmp	r0, r4
 8016606:	d0e3      	beq.n	80165d0 <_malloc_r+0x64>
 8016608:	1a21      	subs	r1, r4, r0
 801660a:	4630      	mov	r0, r6
 801660c:	f000 faf6 	bl	8016bfc <_sbrk_r>
 8016610:	3001      	adds	r0, #1
 8016612:	d1dd      	bne.n	80165d0 <_malloc_r+0x64>
 8016614:	e7cf      	b.n	80165b6 <_malloc_r+0x4a>
 8016616:	bf00      	nop
 8016618:	20004728 	.word	0x20004728
 801661c:	2000472c 	.word	0x2000472c

08016620 <__sfputc_r>:
 8016620:	6893      	ldr	r3, [r2, #8]
 8016622:	3b01      	subs	r3, #1
 8016624:	2b00      	cmp	r3, #0
 8016626:	b410      	push	{r4}
 8016628:	6093      	str	r3, [r2, #8]
 801662a:	da08      	bge.n	801663e <__sfputc_r+0x1e>
 801662c:	6994      	ldr	r4, [r2, #24]
 801662e:	42a3      	cmp	r3, r4
 8016630:	db01      	blt.n	8016636 <__sfputc_r+0x16>
 8016632:	290a      	cmp	r1, #10
 8016634:	d103      	bne.n	801663e <__sfputc_r+0x1e>
 8016636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801663a:	f7ff bc31 	b.w	8015ea0 <__swbuf_r>
 801663e:	6813      	ldr	r3, [r2, #0]
 8016640:	1c58      	adds	r0, r3, #1
 8016642:	6010      	str	r0, [r2, #0]
 8016644:	7019      	strb	r1, [r3, #0]
 8016646:	4608      	mov	r0, r1
 8016648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801664c:	4770      	bx	lr

0801664e <__sfputs_r>:
 801664e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016650:	4606      	mov	r6, r0
 8016652:	460f      	mov	r7, r1
 8016654:	4614      	mov	r4, r2
 8016656:	18d5      	adds	r5, r2, r3
 8016658:	42ac      	cmp	r4, r5
 801665a:	d101      	bne.n	8016660 <__sfputs_r+0x12>
 801665c:	2000      	movs	r0, #0
 801665e:	e007      	b.n	8016670 <__sfputs_r+0x22>
 8016660:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016664:	463a      	mov	r2, r7
 8016666:	4630      	mov	r0, r6
 8016668:	f7ff ffda 	bl	8016620 <__sfputc_r>
 801666c:	1c43      	adds	r3, r0, #1
 801666e:	d1f3      	bne.n	8016658 <__sfputs_r+0xa>
 8016670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016674 <_vfiprintf_r>:
 8016674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016678:	460d      	mov	r5, r1
 801667a:	b09d      	sub	sp, #116	; 0x74
 801667c:	4614      	mov	r4, r2
 801667e:	4698      	mov	r8, r3
 8016680:	4606      	mov	r6, r0
 8016682:	b118      	cbz	r0, 801668c <_vfiprintf_r+0x18>
 8016684:	6983      	ldr	r3, [r0, #24]
 8016686:	b90b      	cbnz	r3, 801668c <_vfiprintf_r+0x18>
 8016688:	f7ff fe02 	bl	8016290 <__sinit>
 801668c:	4b89      	ldr	r3, [pc, #548]	; (80168b4 <_vfiprintf_r+0x240>)
 801668e:	429d      	cmp	r5, r3
 8016690:	d11b      	bne.n	80166ca <_vfiprintf_r+0x56>
 8016692:	6875      	ldr	r5, [r6, #4]
 8016694:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016696:	07d9      	lsls	r1, r3, #31
 8016698:	d405      	bmi.n	80166a6 <_vfiprintf_r+0x32>
 801669a:	89ab      	ldrh	r3, [r5, #12]
 801669c:	059a      	lsls	r2, r3, #22
 801669e:	d402      	bmi.n	80166a6 <_vfiprintf_r+0x32>
 80166a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166a2:	f7ff fea5 	bl	80163f0 <__retarget_lock_acquire_recursive>
 80166a6:	89ab      	ldrh	r3, [r5, #12]
 80166a8:	071b      	lsls	r3, r3, #28
 80166aa:	d501      	bpl.n	80166b0 <_vfiprintf_r+0x3c>
 80166ac:	692b      	ldr	r3, [r5, #16]
 80166ae:	b9eb      	cbnz	r3, 80166ec <_vfiprintf_r+0x78>
 80166b0:	4629      	mov	r1, r5
 80166b2:	4630      	mov	r0, r6
 80166b4:	f7ff fc46 	bl	8015f44 <__swsetup_r>
 80166b8:	b1c0      	cbz	r0, 80166ec <_vfiprintf_r+0x78>
 80166ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80166bc:	07dc      	lsls	r4, r3, #31
 80166be:	d50e      	bpl.n	80166de <_vfiprintf_r+0x6a>
 80166c0:	f04f 30ff 	mov.w	r0, #4294967295
 80166c4:	b01d      	add	sp, #116	; 0x74
 80166c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ca:	4b7b      	ldr	r3, [pc, #492]	; (80168b8 <_vfiprintf_r+0x244>)
 80166cc:	429d      	cmp	r5, r3
 80166ce:	d101      	bne.n	80166d4 <_vfiprintf_r+0x60>
 80166d0:	68b5      	ldr	r5, [r6, #8]
 80166d2:	e7df      	b.n	8016694 <_vfiprintf_r+0x20>
 80166d4:	4b79      	ldr	r3, [pc, #484]	; (80168bc <_vfiprintf_r+0x248>)
 80166d6:	429d      	cmp	r5, r3
 80166d8:	bf08      	it	eq
 80166da:	68f5      	ldreq	r5, [r6, #12]
 80166dc:	e7da      	b.n	8016694 <_vfiprintf_r+0x20>
 80166de:	89ab      	ldrh	r3, [r5, #12]
 80166e0:	0598      	lsls	r0, r3, #22
 80166e2:	d4ed      	bmi.n	80166c0 <_vfiprintf_r+0x4c>
 80166e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80166e6:	f7ff fe84 	bl	80163f2 <__retarget_lock_release_recursive>
 80166ea:	e7e9      	b.n	80166c0 <_vfiprintf_r+0x4c>
 80166ec:	2300      	movs	r3, #0
 80166ee:	9309      	str	r3, [sp, #36]	; 0x24
 80166f0:	2320      	movs	r3, #32
 80166f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80166f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80166fa:	2330      	movs	r3, #48	; 0x30
 80166fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80168c0 <_vfiprintf_r+0x24c>
 8016700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016704:	f04f 0901 	mov.w	r9, #1
 8016708:	4623      	mov	r3, r4
 801670a:	469a      	mov	sl, r3
 801670c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016710:	b10a      	cbz	r2, 8016716 <_vfiprintf_r+0xa2>
 8016712:	2a25      	cmp	r2, #37	; 0x25
 8016714:	d1f9      	bne.n	801670a <_vfiprintf_r+0x96>
 8016716:	ebba 0b04 	subs.w	fp, sl, r4
 801671a:	d00b      	beq.n	8016734 <_vfiprintf_r+0xc0>
 801671c:	465b      	mov	r3, fp
 801671e:	4622      	mov	r2, r4
 8016720:	4629      	mov	r1, r5
 8016722:	4630      	mov	r0, r6
 8016724:	f7ff ff93 	bl	801664e <__sfputs_r>
 8016728:	3001      	adds	r0, #1
 801672a:	f000 80aa 	beq.w	8016882 <_vfiprintf_r+0x20e>
 801672e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016730:	445a      	add	r2, fp
 8016732:	9209      	str	r2, [sp, #36]	; 0x24
 8016734:	f89a 3000 	ldrb.w	r3, [sl]
 8016738:	2b00      	cmp	r3, #0
 801673a:	f000 80a2 	beq.w	8016882 <_vfiprintf_r+0x20e>
 801673e:	2300      	movs	r3, #0
 8016740:	f04f 32ff 	mov.w	r2, #4294967295
 8016744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016748:	f10a 0a01 	add.w	sl, sl, #1
 801674c:	9304      	str	r3, [sp, #16]
 801674e:	9307      	str	r3, [sp, #28]
 8016750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016754:	931a      	str	r3, [sp, #104]	; 0x68
 8016756:	4654      	mov	r4, sl
 8016758:	2205      	movs	r2, #5
 801675a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801675e:	4858      	ldr	r0, [pc, #352]	; (80168c0 <_vfiprintf_r+0x24c>)
 8016760:	f7e9 fd6e 	bl	8000240 <memchr>
 8016764:	9a04      	ldr	r2, [sp, #16]
 8016766:	b9d8      	cbnz	r0, 80167a0 <_vfiprintf_r+0x12c>
 8016768:	06d1      	lsls	r1, r2, #27
 801676a:	bf44      	itt	mi
 801676c:	2320      	movmi	r3, #32
 801676e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016772:	0713      	lsls	r3, r2, #28
 8016774:	bf44      	itt	mi
 8016776:	232b      	movmi	r3, #43	; 0x2b
 8016778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801677c:	f89a 3000 	ldrb.w	r3, [sl]
 8016780:	2b2a      	cmp	r3, #42	; 0x2a
 8016782:	d015      	beq.n	80167b0 <_vfiprintf_r+0x13c>
 8016784:	9a07      	ldr	r2, [sp, #28]
 8016786:	4654      	mov	r4, sl
 8016788:	2000      	movs	r0, #0
 801678a:	f04f 0c0a 	mov.w	ip, #10
 801678e:	4621      	mov	r1, r4
 8016790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016794:	3b30      	subs	r3, #48	; 0x30
 8016796:	2b09      	cmp	r3, #9
 8016798:	d94e      	bls.n	8016838 <_vfiprintf_r+0x1c4>
 801679a:	b1b0      	cbz	r0, 80167ca <_vfiprintf_r+0x156>
 801679c:	9207      	str	r2, [sp, #28]
 801679e:	e014      	b.n	80167ca <_vfiprintf_r+0x156>
 80167a0:	eba0 0308 	sub.w	r3, r0, r8
 80167a4:	fa09 f303 	lsl.w	r3, r9, r3
 80167a8:	4313      	orrs	r3, r2
 80167aa:	9304      	str	r3, [sp, #16]
 80167ac:	46a2      	mov	sl, r4
 80167ae:	e7d2      	b.n	8016756 <_vfiprintf_r+0xe2>
 80167b0:	9b03      	ldr	r3, [sp, #12]
 80167b2:	1d19      	adds	r1, r3, #4
 80167b4:	681b      	ldr	r3, [r3, #0]
 80167b6:	9103      	str	r1, [sp, #12]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	bfbb      	ittet	lt
 80167bc:	425b      	neglt	r3, r3
 80167be:	f042 0202 	orrlt.w	r2, r2, #2
 80167c2:	9307      	strge	r3, [sp, #28]
 80167c4:	9307      	strlt	r3, [sp, #28]
 80167c6:	bfb8      	it	lt
 80167c8:	9204      	strlt	r2, [sp, #16]
 80167ca:	7823      	ldrb	r3, [r4, #0]
 80167cc:	2b2e      	cmp	r3, #46	; 0x2e
 80167ce:	d10c      	bne.n	80167ea <_vfiprintf_r+0x176>
 80167d0:	7863      	ldrb	r3, [r4, #1]
 80167d2:	2b2a      	cmp	r3, #42	; 0x2a
 80167d4:	d135      	bne.n	8016842 <_vfiprintf_r+0x1ce>
 80167d6:	9b03      	ldr	r3, [sp, #12]
 80167d8:	1d1a      	adds	r2, r3, #4
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	9203      	str	r2, [sp, #12]
 80167de:	2b00      	cmp	r3, #0
 80167e0:	bfb8      	it	lt
 80167e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80167e6:	3402      	adds	r4, #2
 80167e8:	9305      	str	r3, [sp, #20]
 80167ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80168d0 <_vfiprintf_r+0x25c>
 80167ee:	7821      	ldrb	r1, [r4, #0]
 80167f0:	2203      	movs	r2, #3
 80167f2:	4650      	mov	r0, sl
 80167f4:	f7e9 fd24 	bl	8000240 <memchr>
 80167f8:	b140      	cbz	r0, 801680c <_vfiprintf_r+0x198>
 80167fa:	2340      	movs	r3, #64	; 0x40
 80167fc:	eba0 000a 	sub.w	r0, r0, sl
 8016800:	fa03 f000 	lsl.w	r0, r3, r0
 8016804:	9b04      	ldr	r3, [sp, #16]
 8016806:	4303      	orrs	r3, r0
 8016808:	3401      	adds	r4, #1
 801680a:	9304      	str	r3, [sp, #16]
 801680c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016810:	482c      	ldr	r0, [pc, #176]	; (80168c4 <_vfiprintf_r+0x250>)
 8016812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016816:	2206      	movs	r2, #6
 8016818:	f7e9 fd12 	bl	8000240 <memchr>
 801681c:	2800      	cmp	r0, #0
 801681e:	d03f      	beq.n	80168a0 <_vfiprintf_r+0x22c>
 8016820:	4b29      	ldr	r3, [pc, #164]	; (80168c8 <_vfiprintf_r+0x254>)
 8016822:	bb1b      	cbnz	r3, 801686c <_vfiprintf_r+0x1f8>
 8016824:	9b03      	ldr	r3, [sp, #12]
 8016826:	3307      	adds	r3, #7
 8016828:	f023 0307 	bic.w	r3, r3, #7
 801682c:	3308      	adds	r3, #8
 801682e:	9303      	str	r3, [sp, #12]
 8016830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016832:	443b      	add	r3, r7
 8016834:	9309      	str	r3, [sp, #36]	; 0x24
 8016836:	e767      	b.n	8016708 <_vfiprintf_r+0x94>
 8016838:	fb0c 3202 	mla	r2, ip, r2, r3
 801683c:	460c      	mov	r4, r1
 801683e:	2001      	movs	r0, #1
 8016840:	e7a5      	b.n	801678e <_vfiprintf_r+0x11a>
 8016842:	2300      	movs	r3, #0
 8016844:	3401      	adds	r4, #1
 8016846:	9305      	str	r3, [sp, #20]
 8016848:	4619      	mov	r1, r3
 801684a:	f04f 0c0a 	mov.w	ip, #10
 801684e:	4620      	mov	r0, r4
 8016850:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016854:	3a30      	subs	r2, #48	; 0x30
 8016856:	2a09      	cmp	r2, #9
 8016858:	d903      	bls.n	8016862 <_vfiprintf_r+0x1ee>
 801685a:	2b00      	cmp	r3, #0
 801685c:	d0c5      	beq.n	80167ea <_vfiprintf_r+0x176>
 801685e:	9105      	str	r1, [sp, #20]
 8016860:	e7c3      	b.n	80167ea <_vfiprintf_r+0x176>
 8016862:	fb0c 2101 	mla	r1, ip, r1, r2
 8016866:	4604      	mov	r4, r0
 8016868:	2301      	movs	r3, #1
 801686a:	e7f0      	b.n	801684e <_vfiprintf_r+0x1da>
 801686c:	ab03      	add	r3, sp, #12
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	462a      	mov	r2, r5
 8016872:	4b16      	ldr	r3, [pc, #88]	; (80168cc <_vfiprintf_r+0x258>)
 8016874:	a904      	add	r1, sp, #16
 8016876:	4630      	mov	r0, r6
 8016878:	f3af 8000 	nop.w
 801687c:	4607      	mov	r7, r0
 801687e:	1c78      	adds	r0, r7, #1
 8016880:	d1d6      	bne.n	8016830 <_vfiprintf_r+0x1bc>
 8016882:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016884:	07d9      	lsls	r1, r3, #31
 8016886:	d405      	bmi.n	8016894 <_vfiprintf_r+0x220>
 8016888:	89ab      	ldrh	r3, [r5, #12]
 801688a:	059a      	lsls	r2, r3, #22
 801688c:	d402      	bmi.n	8016894 <_vfiprintf_r+0x220>
 801688e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016890:	f7ff fdaf 	bl	80163f2 <__retarget_lock_release_recursive>
 8016894:	89ab      	ldrh	r3, [r5, #12]
 8016896:	065b      	lsls	r3, r3, #25
 8016898:	f53f af12 	bmi.w	80166c0 <_vfiprintf_r+0x4c>
 801689c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801689e:	e711      	b.n	80166c4 <_vfiprintf_r+0x50>
 80168a0:	ab03      	add	r3, sp, #12
 80168a2:	9300      	str	r3, [sp, #0]
 80168a4:	462a      	mov	r2, r5
 80168a6:	4b09      	ldr	r3, [pc, #36]	; (80168cc <_vfiprintf_r+0x258>)
 80168a8:	a904      	add	r1, sp, #16
 80168aa:	4630      	mov	r0, r6
 80168ac:	f000 f880 	bl	80169b0 <_printf_i>
 80168b0:	e7e4      	b.n	801687c <_vfiprintf_r+0x208>
 80168b2:	bf00      	nop
 80168b4:	08019c18 	.word	0x08019c18
 80168b8:	08019c38 	.word	0x08019c38
 80168bc:	08019bf8 	.word	0x08019bf8
 80168c0:	08019c58 	.word	0x08019c58
 80168c4:	08019c62 	.word	0x08019c62
 80168c8:	00000000 	.word	0x00000000
 80168cc:	0801664f 	.word	0x0801664f
 80168d0:	08019c5e 	.word	0x08019c5e

080168d4 <_printf_common>:
 80168d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80168d8:	4616      	mov	r6, r2
 80168da:	4699      	mov	r9, r3
 80168dc:	688a      	ldr	r2, [r1, #8]
 80168de:	690b      	ldr	r3, [r1, #16]
 80168e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80168e4:	4293      	cmp	r3, r2
 80168e6:	bfb8      	it	lt
 80168e8:	4613      	movlt	r3, r2
 80168ea:	6033      	str	r3, [r6, #0]
 80168ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80168f0:	4607      	mov	r7, r0
 80168f2:	460c      	mov	r4, r1
 80168f4:	b10a      	cbz	r2, 80168fa <_printf_common+0x26>
 80168f6:	3301      	adds	r3, #1
 80168f8:	6033      	str	r3, [r6, #0]
 80168fa:	6823      	ldr	r3, [r4, #0]
 80168fc:	0699      	lsls	r1, r3, #26
 80168fe:	bf42      	ittt	mi
 8016900:	6833      	ldrmi	r3, [r6, #0]
 8016902:	3302      	addmi	r3, #2
 8016904:	6033      	strmi	r3, [r6, #0]
 8016906:	6825      	ldr	r5, [r4, #0]
 8016908:	f015 0506 	ands.w	r5, r5, #6
 801690c:	d106      	bne.n	801691c <_printf_common+0x48>
 801690e:	f104 0a19 	add.w	sl, r4, #25
 8016912:	68e3      	ldr	r3, [r4, #12]
 8016914:	6832      	ldr	r2, [r6, #0]
 8016916:	1a9b      	subs	r3, r3, r2
 8016918:	42ab      	cmp	r3, r5
 801691a:	dc26      	bgt.n	801696a <_printf_common+0x96>
 801691c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016920:	1e13      	subs	r3, r2, #0
 8016922:	6822      	ldr	r2, [r4, #0]
 8016924:	bf18      	it	ne
 8016926:	2301      	movne	r3, #1
 8016928:	0692      	lsls	r2, r2, #26
 801692a:	d42b      	bmi.n	8016984 <_printf_common+0xb0>
 801692c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016930:	4649      	mov	r1, r9
 8016932:	4638      	mov	r0, r7
 8016934:	47c0      	blx	r8
 8016936:	3001      	adds	r0, #1
 8016938:	d01e      	beq.n	8016978 <_printf_common+0xa4>
 801693a:	6823      	ldr	r3, [r4, #0]
 801693c:	68e5      	ldr	r5, [r4, #12]
 801693e:	6832      	ldr	r2, [r6, #0]
 8016940:	f003 0306 	and.w	r3, r3, #6
 8016944:	2b04      	cmp	r3, #4
 8016946:	bf08      	it	eq
 8016948:	1aad      	subeq	r5, r5, r2
 801694a:	68a3      	ldr	r3, [r4, #8]
 801694c:	6922      	ldr	r2, [r4, #16]
 801694e:	bf0c      	ite	eq
 8016950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016954:	2500      	movne	r5, #0
 8016956:	4293      	cmp	r3, r2
 8016958:	bfc4      	itt	gt
 801695a:	1a9b      	subgt	r3, r3, r2
 801695c:	18ed      	addgt	r5, r5, r3
 801695e:	2600      	movs	r6, #0
 8016960:	341a      	adds	r4, #26
 8016962:	42b5      	cmp	r5, r6
 8016964:	d11a      	bne.n	801699c <_printf_common+0xc8>
 8016966:	2000      	movs	r0, #0
 8016968:	e008      	b.n	801697c <_printf_common+0xa8>
 801696a:	2301      	movs	r3, #1
 801696c:	4652      	mov	r2, sl
 801696e:	4649      	mov	r1, r9
 8016970:	4638      	mov	r0, r7
 8016972:	47c0      	blx	r8
 8016974:	3001      	adds	r0, #1
 8016976:	d103      	bne.n	8016980 <_printf_common+0xac>
 8016978:	f04f 30ff 	mov.w	r0, #4294967295
 801697c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016980:	3501      	adds	r5, #1
 8016982:	e7c6      	b.n	8016912 <_printf_common+0x3e>
 8016984:	18e1      	adds	r1, r4, r3
 8016986:	1c5a      	adds	r2, r3, #1
 8016988:	2030      	movs	r0, #48	; 0x30
 801698a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801698e:	4422      	add	r2, r4
 8016990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016998:	3302      	adds	r3, #2
 801699a:	e7c7      	b.n	801692c <_printf_common+0x58>
 801699c:	2301      	movs	r3, #1
 801699e:	4622      	mov	r2, r4
 80169a0:	4649      	mov	r1, r9
 80169a2:	4638      	mov	r0, r7
 80169a4:	47c0      	blx	r8
 80169a6:	3001      	adds	r0, #1
 80169a8:	d0e6      	beq.n	8016978 <_printf_common+0xa4>
 80169aa:	3601      	adds	r6, #1
 80169ac:	e7d9      	b.n	8016962 <_printf_common+0x8e>
	...

080169b0 <_printf_i>:
 80169b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80169b4:	460c      	mov	r4, r1
 80169b6:	4691      	mov	r9, r2
 80169b8:	7e27      	ldrb	r7, [r4, #24]
 80169ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80169bc:	2f78      	cmp	r7, #120	; 0x78
 80169be:	4680      	mov	r8, r0
 80169c0:	469a      	mov	sl, r3
 80169c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80169c6:	d807      	bhi.n	80169d8 <_printf_i+0x28>
 80169c8:	2f62      	cmp	r7, #98	; 0x62
 80169ca:	d80a      	bhi.n	80169e2 <_printf_i+0x32>
 80169cc:	2f00      	cmp	r7, #0
 80169ce:	f000 80d8 	beq.w	8016b82 <_printf_i+0x1d2>
 80169d2:	2f58      	cmp	r7, #88	; 0x58
 80169d4:	f000 80a3 	beq.w	8016b1e <_printf_i+0x16e>
 80169d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80169dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80169e0:	e03a      	b.n	8016a58 <_printf_i+0xa8>
 80169e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80169e6:	2b15      	cmp	r3, #21
 80169e8:	d8f6      	bhi.n	80169d8 <_printf_i+0x28>
 80169ea:	a001      	add	r0, pc, #4	; (adr r0, 80169f0 <_printf_i+0x40>)
 80169ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80169f0:	08016a49 	.word	0x08016a49
 80169f4:	08016a5d 	.word	0x08016a5d
 80169f8:	080169d9 	.word	0x080169d9
 80169fc:	080169d9 	.word	0x080169d9
 8016a00:	080169d9 	.word	0x080169d9
 8016a04:	080169d9 	.word	0x080169d9
 8016a08:	08016a5d 	.word	0x08016a5d
 8016a0c:	080169d9 	.word	0x080169d9
 8016a10:	080169d9 	.word	0x080169d9
 8016a14:	080169d9 	.word	0x080169d9
 8016a18:	080169d9 	.word	0x080169d9
 8016a1c:	08016b69 	.word	0x08016b69
 8016a20:	08016a8d 	.word	0x08016a8d
 8016a24:	08016b4b 	.word	0x08016b4b
 8016a28:	080169d9 	.word	0x080169d9
 8016a2c:	080169d9 	.word	0x080169d9
 8016a30:	08016b8b 	.word	0x08016b8b
 8016a34:	080169d9 	.word	0x080169d9
 8016a38:	08016a8d 	.word	0x08016a8d
 8016a3c:	080169d9 	.word	0x080169d9
 8016a40:	080169d9 	.word	0x080169d9
 8016a44:	08016b53 	.word	0x08016b53
 8016a48:	680b      	ldr	r3, [r1, #0]
 8016a4a:	1d1a      	adds	r2, r3, #4
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	600a      	str	r2, [r1, #0]
 8016a50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016a58:	2301      	movs	r3, #1
 8016a5a:	e0a3      	b.n	8016ba4 <_printf_i+0x1f4>
 8016a5c:	6825      	ldr	r5, [r4, #0]
 8016a5e:	6808      	ldr	r0, [r1, #0]
 8016a60:	062e      	lsls	r6, r5, #24
 8016a62:	f100 0304 	add.w	r3, r0, #4
 8016a66:	d50a      	bpl.n	8016a7e <_printf_i+0xce>
 8016a68:	6805      	ldr	r5, [r0, #0]
 8016a6a:	600b      	str	r3, [r1, #0]
 8016a6c:	2d00      	cmp	r5, #0
 8016a6e:	da03      	bge.n	8016a78 <_printf_i+0xc8>
 8016a70:	232d      	movs	r3, #45	; 0x2d
 8016a72:	426d      	negs	r5, r5
 8016a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a78:	485e      	ldr	r0, [pc, #376]	; (8016bf4 <_printf_i+0x244>)
 8016a7a:	230a      	movs	r3, #10
 8016a7c:	e019      	b.n	8016ab2 <_printf_i+0x102>
 8016a7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016a82:	6805      	ldr	r5, [r0, #0]
 8016a84:	600b      	str	r3, [r1, #0]
 8016a86:	bf18      	it	ne
 8016a88:	b22d      	sxthne	r5, r5
 8016a8a:	e7ef      	b.n	8016a6c <_printf_i+0xbc>
 8016a8c:	680b      	ldr	r3, [r1, #0]
 8016a8e:	6825      	ldr	r5, [r4, #0]
 8016a90:	1d18      	adds	r0, r3, #4
 8016a92:	6008      	str	r0, [r1, #0]
 8016a94:	0628      	lsls	r0, r5, #24
 8016a96:	d501      	bpl.n	8016a9c <_printf_i+0xec>
 8016a98:	681d      	ldr	r5, [r3, #0]
 8016a9a:	e002      	b.n	8016aa2 <_printf_i+0xf2>
 8016a9c:	0669      	lsls	r1, r5, #25
 8016a9e:	d5fb      	bpl.n	8016a98 <_printf_i+0xe8>
 8016aa0:	881d      	ldrh	r5, [r3, #0]
 8016aa2:	4854      	ldr	r0, [pc, #336]	; (8016bf4 <_printf_i+0x244>)
 8016aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8016aa6:	bf0c      	ite	eq
 8016aa8:	2308      	moveq	r3, #8
 8016aaa:	230a      	movne	r3, #10
 8016aac:	2100      	movs	r1, #0
 8016aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016ab2:	6866      	ldr	r6, [r4, #4]
 8016ab4:	60a6      	str	r6, [r4, #8]
 8016ab6:	2e00      	cmp	r6, #0
 8016ab8:	bfa2      	ittt	ge
 8016aba:	6821      	ldrge	r1, [r4, #0]
 8016abc:	f021 0104 	bicge.w	r1, r1, #4
 8016ac0:	6021      	strge	r1, [r4, #0]
 8016ac2:	b90d      	cbnz	r5, 8016ac8 <_printf_i+0x118>
 8016ac4:	2e00      	cmp	r6, #0
 8016ac6:	d04d      	beq.n	8016b64 <_printf_i+0x1b4>
 8016ac8:	4616      	mov	r6, r2
 8016aca:	fbb5 f1f3 	udiv	r1, r5, r3
 8016ace:	fb03 5711 	mls	r7, r3, r1, r5
 8016ad2:	5dc7      	ldrb	r7, [r0, r7]
 8016ad4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016ad8:	462f      	mov	r7, r5
 8016ada:	42bb      	cmp	r3, r7
 8016adc:	460d      	mov	r5, r1
 8016ade:	d9f4      	bls.n	8016aca <_printf_i+0x11a>
 8016ae0:	2b08      	cmp	r3, #8
 8016ae2:	d10b      	bne.n	8016afc <_printf_i+0x14c>
 8016ae4:	6823      	ldr	r3, [r4, #0]
 8016ae6:	07df      	lsls	r7, r3, #31
 8016ae8:	d508      	bpl.n	8016afc <_printf_i+0x14c>
 8016aea:	6923      	ldr	r3, [r4, #16]
 8016aec:	6861      	ldr	r1, [r4, #4]
 8016aee:	4299      	cmp	r1, r3
 8016af0:	bfde      	ittt	le
 8016af2:	2330      	movle	r3, #48	; 0x30
 8016af4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016af8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8016afc:	1b92      	subs	r2, r2, r6
 8016afe:	6122      	str	r2, [r4, #16]
 8016b00:	f8cd a000 	str.w	sl, [sp]
 8016b04:	464b      	mov	r3, r9
 8016b06:	aa03      	add	r2, sp, #12
 8016b08:	4621      	mov	r1, r4
 8016b0a:	4640      	mov	r0, r8
 8016b0c:	f7ff fee2 	bl	80168d4 <_printf_common>
 8016b10:	3001      	adds	r0, #1
 8016b12:	d14c      	bne.n	8016bae <_printf_i+0x1fe>
 8016b14:	f04f 30ff 	mov.w	r0, #4294967295
 8016b18:	b004      	add	sp, #16
 8016b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b1e:	4835      	ldr	r0, [pc, #212]	; (8016bf4 <_printf_i+0x244>)
 8016b20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8016b24:	6823      	ldr	r3, [r4, #0]
 8016b26:	680e      	ldr	r6, [r1, #0]
 8016b28:	061f      	lsls	r7, r3, #24
 8016b2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8016b2e:	600e      	str	r6, [r1, #0]
 8016b30:	d514      	bpl.n	8016b5c <_printf_i+0x1ac>
 8016b32:	07d9      	lsls	r1, r3, #31
 8016b34:	bf44      	itt	mi
 8016b36:	f043 0320 	orrmi.w	r3, r3, #32
 8016b3a:	6023      	strmi	r3, [r4, #0]
 8016b3c:	b91d      	cbnz	r5, 8016b46 <_printf_i+0x196>
 8016b3e:	6823      	ldr	r3, [r4, #0]
 8016b40:	f023 0320 	bic.w	r3, r3, #32
 8016b44:	6023      	str	r3, [r4, #0]
 8016b46:	2310      	movs	r3, #16
 8016b48:	e7b0      	b.n	8016aac <_printf_i+0xfc>
 8016b4a:	6823      	ldr	r3, [r4, #0]
 8016b4c:	f043 0320 	orr.w	r3, r3, #32
 8016b50:	6023      	str	r3, [r4, #0]
 8016b52:	2378      	movs	r3, #120	; 0x78
 8016b54:	4828      	ldr	r0, [pc, #160]	; (8016bf8 <_printf_i+0x248>)
 8016b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016b5a:	e7e3      	b.n	8016b24 <_printf_i+0x174>
 8016b5c:	065e      	lsls	r6, r3, #25
 8016b5e:	bf48      	it	mi
 8016b60:	b2ad      	uxthmi	r5, r5
 8016b62:	e7e6      	b.n	8016b32 <_printf_i+0x182>
 8016b64:	4616      	mov	r6, r2
 8016b66:	e7bb      	b.n	8016ae0 <_printf_i+0x130>
 8016b68:	680b      	ldr	r3, [r1, #0]
 8016b6a:	6826      	ldr	r6, [r4, #0]
 8016b6c:	6960      	ldr	r0, [r4, #20]
 8016b6e:	1d1d      	adds	r5, r3, #4
 8016b70:	600d      	str	r5, [r1, #0]
 8016b72:	0635      	lsls	r5, r6, #24
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	d501      	bpl.n	8016b7c <_printf_i+0x1cc>
 8016b78:	6018      	str	r0, [r3, #0]
 8016b7a:	e002      	b.n	8016b82 <_printf_i+0x1d2>
 8016b7c:	0671      	lsls	r1, r6, #25
 8016b7e:	d5fb      	bpl.n	8016b78 <_printf_i+0x1c8>
 8016b80:	8018      	strh	r0, [r3, #0]
 8016b82:	2300      	movs	r3, #0
 8016b84:	6123      	str	r3, [r4, #16]
 8016b86:	4616      	mov	r6, r2
 8016b88:	e7ba      	b.n	8016b00 <_printf_i+0x150>
 8016b8a:	680b      	ldr	r3, [r1, #0]
 8016b8c:	1d1a      	adds	r2, r3, #4
 8016b8e:	600a      	str	r2, [r1, #0]
 8016b90:	681e      	ldr	r6, [r3, #0]
 8016b92:	6862      	ldr	r2, [r4, #4]
 8016b94:	2100      	movs	r1, #0
 8016b96:	4630      	mov	r0, r6
 8016b98:	f7e9 fb52 	bl	8000240 <memchr>
 8016b9c:	b108      	cbz	r0, 8016ba2 <_printf_i+0x1f2>
 8016b9e:	1b80      	subs	r0, r0, r6
 8016ba0:	6060      	str	r0, [r4, #4]
 8016ba2:	6863      	ldr	r3, [r4, #4]
 8016ba4:	6123      	str	r3, [r4, #16]
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016bac:	e7a8      	b.n	8016b00 <_printf_i+0x150>
 8016bae:	6923      	ldr	r3, [r4, #16]
 8016bb0:	4632      	mov	r2, r6
 8016bb2:	4649      	mov	r1, r9
 8016bb4:	4640      	mov	r0, r8
 8016bb6:	47d0      	blx	sl
 8016bb8:	3001      	adds	r0, #1
 8016bba:	d0ab      	beq.n	8016b14 <_printf_i+0x164>
 8016bbc:	6823      	ldr	r3, [r4, #0]
 8016bbe:	079b      	lsls	r3, r3, #30
 8016bc0:	d413      	bmi.n	8016bea <_printf_i+0x23a>
 8016bc2:	68e0      	ldr	r0, [r4, #12]
 8016bc4:	9b03      	ldr	r3, [sp, #12]
 8016bc6:	4298      	cmp	r0, r3
 8016bc8:	bfb8      	it	lt
 8016bca:	4618      	movlt	r0, r3
 8016bcc:	e7a4      	b.n	8016b18 <_printf_i+0x168>
 8016bce:	2301      	movs	r3, #1
 8016bd0:	4632      	mov	r2, r6
 8016bd2:	4649      	mov	r1, r9
 8016bd4:	4640      	mov	r0, r8
 8016bd6:	47d0      	blx	sl
 8016bd8:	3001      	adds	r0, #1
 8016bda:	d09b      	beq.n	8016b14 <_printf_i+0x164>
 8016bdc:	3501      	adds	r5, #1
 8016bde:	68e3      	ldr	r3, [r4, #12]
 8016be0:	9903      	ldr	r1, [sp, #12]
 8016be2:	1a5b      	subs	r3, r3, r1
 8016be4:	42ab      	cmp	r3, r5
 8016be6:	dcf2      	bgt.n	8016bce <_printf_i+0x21e>
 8016be8:	e7eb      	b.n	8016bc2 <_printf_i+0x212>
 8016bea:	2500      	movs	r5, #0
 8016bec:	f104 0619 	add.w	r6, r4, #25
 8016bf0:	e7f5      	b.n	8016bde <_printf_i+0x22e>
 8016bf2:	bf00      	nop
 8016bf4:	08019c69 	.word	0x08019c69
 8016bf8:	08019c7a 	.word	0x08019c7a

08016bfc <_sbrk_r>:
 8016bfc:	b538      	push	{r3, r4, r5, lr}
 8016bfe:	4d06      	ldr	r5, [pc, #24]	; (8016c18 <_sbrk_r+0x1c>)
 8016c00:	2300      	movs	r3, #0
 8016c02:	4604      	mov	r4, r0
 8016c04:	4608      	mov	r0, r1
 8016c06:	602b      	str	r3, [r5, #0]
 8016c08:	f7ea fefa 	bl	8001a00 <_sbrk>
 8016c0c:	1c43      	adds	r3, r0, #1
 8016c0e:	d102      	bne.n	8016c16 <_sbrk_r+0x1a>
 8016c10:	682b      	ldr	r3, [r5, #0]
 8016c12:	b103      	cbz	r3, 8016c16 <_sbrk_r+0x1a>
 8016c14:	6023      	str	r3, [r4, #0]
 8016c16:	bd38      	pop	{r3, r4, r5, pc}
 8016c18:	2000c94c 	.word	0x2000c94c

08016c1c <__sread>:
 8016c1c:	b510      	push	{r4, lr}
 8016c1e:	460c      	mov	r4, r1
 8016c20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c24:	f000 f8a8 	bl	8016d78 <_read_r>
 8016c28:	2800      	cmp	r0, #0
 8016c2a:	bfab      	itete	ge
 8016c2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016c2e:	89a3      	ldrhlt	r3, [r4, #12]
 8016c30:	181b      	addge	r3, r3, r0
 8016c32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016c36:	bfac      	ite	ge
 8016c38:	6563      	strge	r3, [r4, #84]	; 0x54
 8016c3a:	81a3      	strhlt	r3, [r4, #12]
 8016c3c:	bd10      	pop	{r4, pc}

08016c3e <__swrite>:
 8016c3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016c42:	461f      	mov	r7, r3
 8016c44:	898b      	ldrh	r3, [r1, #12]
 8016c46:	05db      	lsls	r3, r3, #23
 8016c48:	4605      	mov	r5, r0
 8016c4a:	460c      	mov	r4, r1
 8016c4c:	4616      	mov	r6, r2
 8016c4e:	d505      	bpl.n	8016c5c <__swrite+0x1e>
 8016c50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c54:	2302      	movs	r3, #2
 8016c56:	2200      	movs	r2, #0
 8016c58:	f000 f870 	bl	8016d3c <_lseek_r>
 8016c5c:	89a3      	ldrh	r3, [r4, #12]
 8016c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c66:	81a3      	strh	r3, [r4, #12]
 8016c68:	4632      	mov	r2, r6
 8016c6a:	463b      	mov	r3, r7
 8016c6c:	4628      	mov	r0, r5
 8016c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c72:	f000 b817 	b.w	8016ca4 <_write_r>

08016c76 <__sseek>:
 8016c76:	b510      	push	{r4, lr}
 8016c78:	460c      	mov	r4, r1
 8016c7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c7e:	f000 f85d 	bl	8016d3c <_lseek_r>
 8016c82:	1c43      	adds	r3, r0, #1
 8016c84:	89a3      	ldrh	r3, [r4, #12]
 8016c86:	bf15      	itete	ne
 8016c88:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c92:	81a3      	strheq	r3, [r4, #12]
 8016c94:	bf18      	it	ne
 8016c96:	81a3      	strhne	r3, [r4, #12]
 8016c98:	bd10      	pop	{r4, pc}

08016c9a <__sclose>:
 8016c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c9e:	f000 b81b 	b.w	8016cd8 <_close_r>
	...

08016ca4 <_write_r>:
 8016ca4:	b538      	push	{r3, r4, r5, lr}
 8016ca6:	4d07      	ldr	r5, [pc, #28]	; (8016cc4 <_write_r+0x20>)
 8016ca8:	4604      	mov	r4, r0
 8016caa:	4608      	mov	r0, r1
 8016cac:	4611      	mov	r1, r2
 8016cae:	2200      	movs	r2, #0
 8016cb0:	602a      	str	r2, [r5, #0]
 8016cb2:	461a      	mov	r2, r3
 8016cb4:	f7ea fe53 	bl	800195e <_write>
 8016cb8:	1c43      	adds	r3, r0, #1
 8016cba:	d102      	bne.n	8016cc2 <_write_r+0x1e>
 8016cbc:	682b      	ldr	r3, [r5, #0]
 8016cbe:	b103      	cbz	r3, 8016cc2 <_write_r+0x1e>
 8016cc0:	6023      	str	r3, [r4, #0]
 8016cc2:	bd38      	pop	{r3, r4, r5, pc}
 8016cc4:	2000c94c 	.word	0x2000c94c

08016cc8 <abort>:
 8016cc8:	b508      	push	{r3, lr}
 8016cca:	2006      	movs	r0, #6
 8016ccc:	f000 f88e 	bl	8016dec <raise>
 8016cd0:	2001      	movs	r0, #1
 8016cd2:	f7ea fe1d 	bl	8001910 <_exit>
	...

08016cd8 <_close_r>:
 8016cd8:	b538      	push	{r3, r4, r5, lr}
 8016cda:	4d06      	ldr	r5, [pc, #24]	; (8016cf4 <_close_r+0x1c>)
 8016cdc:	2300      	movs	r3, #0
 8016cde:	4604      	mov	r4, r0
 8016ce0:	4608      	mov	r0, r1
 8016ce2:	602b      	str	r3, [r5, #0]
 8016ce4:	f7ea fe57 	bl	8001996 <_close>
 8016ce8:	1c43      	adds	r3, r0, #1
 8016cea:	d102      	bne.n	8016cf2 <_close_r+0x1a>
 8016cec:	682b      	ldr	r3, [r5, #0]
 8016cee:	b103      	cbz	r3, 8016cf2 <_close_r+0x1a>
 8016cf0:	6023      	str	r3, [r4, #0]
 8016cf2:	bd38      	pop	{r3, r4, r5, pc}
 8016cf4:	2000c94c 	.word	0x2000c94c

08016cf8 <_fstat_r>:
 8016cf8:	b538      	push	{r3, r4, r5, lr}
 8016cfa:	4d07      	ldr	r5, [pc, #28]	; (8016d18 <_fstat_r+0x20>)
 8016cfc:	2300      	movs	r3, #0
 8016cfe:	4604      	mov	r4, r0
 8016d00:	4608      	mov	r0, r1
 8016d02:	4611      	mov	r1, r2
 8016d04:	602b      	str	r3, [r5, #0]
 8016d06:	f7ea fe52 	bl	80019ae <_fstat>
 8016d0a:	1c43      	adds	r3, r0, #1
 8016d0c:	d102      	bne.n	8016d14 <_fstat_r+0x1c>
 8016d0e:	682b      	ldr	r3, [r5, #0]
 8016d10:	b103      	cbz	r3, 8016d14 <_fstat_r+0x1c>
 8016d12:	6023      	str	r3, [r4, #0]
 8016d14:	bd38      	pop	{r3, r4, r5, pc}
 8016d16:	bf00      	nop
 8016d18:	2000c94c 	.word	0x2000c94c

08016d1c <_isatty_r>:
 8016d1c:	b538      	push	{r3, r4, r5, lr}
 8016d1e:	4d06      	ldr	r5, [pc, #24]	; (8016d38 <_isatty_r+0x1c>)
 8016d20:	2300      	movs	r3, #0
 8016d22:	4604      	mov	r4, r0
 8016d24:	4608      	mov	r0, r1
 8016d26:	602b      	str	r3, [r5, #0]
 8016d28:	f7ea fe51 	bl	80019ce <_isatty>
 8016d2c:	1c43      	adds	r3, r0, #1
 8016d2e:	d102      	bne.n	8016d36 <_isatty_r+0x1a>
 8016d30:	682b      	ldr	r3, [r5, #0]
 8016d32:	b103      	cbz	r3, 8016d36 <_isatty_r+0x1a>
 8016d34:	6023      	str	r3, [r4, #0]
 8016d36:	bd38      	pop	{r3, r4, r5, pc}
 8016d38:	2000c94c 	.word	0x2000c94c

08016d3c <_lseek_r>:
 8016d3c:	b538      	push	{r3, r4, r5, lr}
 8016d3e:	4d07      	ldr	r5, [pc, #28]	; (8016d5c <_lseek_r+0x20>)
 8016d40:	4604      	mov	r4, r0
 8016d42:	4608      	mov	r0, r1
 8016d44:	4611      	mov	r1, r2
 8016d46:	2200      	movs	r2, #0
 8016d48:	602a      	str	r2, [r5, #0]
 8016d4a:	461a      	mov	r2, r3
 8016d4c:	f7ea fe4a 	bl	80019e4 <_lseek>
 8016d50:	1c43      	adds	r3, r0, #1
 8016d52:	d102      	bne.n	8016d5a <_lseek_r+0x1e>
 8016d54:	682b      	ldr	r3, [r5, #0]
 8016d56:	b103      	cbz	r3, 8016d5a <_lseek_r+0x1e>
 8016d58:	6023      	str	r3, [r4, #0]
 8016d5a:	bd38      	pop	{r3, r4, r5, pc}
 8016d5c:	2000c94c 	.word	0x2000c94c

08016d60 <__malloc_lock>:
 8016d60:	4801      	ldr	r0, [pc, #4]	; (8016d68 <__malloc_lock+0x8>)
 8016d62:	f7ff bb45 	b.w	80163f0 <__retarget_lock_acquire_recursive>
 8016d66:	bf00      	nop
 8016d68:	2000c958 	.word	0x2000c958

08016d6c <__malloc_unlock>:
 8016d6c:	4801      	ldr	r0, [pc, #4]	; (8016d74 <__malloc_unlock+0x8>)
 8016d6e:	f7ff bb40 	b.w	80163f2 <__retarget_lock_release_recursive>
 8016d72:	bf00      	nop
 8016d74:	2000c958 	.word	0x2000c958

08016d78 <_read_r>:
 8016d78:	b538      	push	{r3, r4, r5, lr}
 8016d7a:	4d07      	ldr	r5, [pc, #28]	; (8016d98 <_read_r+0x20>)
 8016d7c:	4604      	mov	r4, r0
 8016d7e:	4608      	mov	r0, r1
 8016d80:	4611      	mov	r1, r2
 8016d82:	2200      	movs	r2, #0
 8016d84:	602a      	str	r2, [r5, #0]
 8016d86:	461a      	mov	r2, r3
 8016d88:	f7ea fdcc 	bl	8001924 <_read>
 8016d8c:	1c43      	adds	r3, r0, #1
 8016d8e:	d102      	bne.n	8016d96 <_read_r+0x1e>
 8016d90:	682b      	ldr	r3, [r5, #0]
 8016d92:	b103      	cbz	r3, 8016d96 <_read_r+0x1e>
 8016d94:	6023      	str	r3, [r4, #0]
 8016d96:	bd38      	pop	{r3, r4, r5, pc}
 8016d98:	2000c94c 	.word	0x2000c94c

08016d9c <_raise_r>:
 8016d9c:	291f      	cmp	r1, #31
 8016d9e:	b538      	push	{r3, r4, r5, lr}
 8016da0:	4604      	mov	r4, r0
 8016da2:	460d      	mov	r5, r1
 8016da4:	d904      	bls.n	8016db0 <_raise_r+0x14>
 8016da6:	2316      	movs	r3, #22
 8016da8:	6003      	str	r3, [r0, #0]
 8016daa:	f04f 30ff 	mov.w	r0, #4294967295
 8016dae:	bd38      	pop	{r3, r4, r5, pc}
 8016db0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8016db2:	b112      	cbz	r2, 8016dba <_raise_r+0x1e>
 8016db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016db8:	b94b      	cbnz	r3, 8016dce <_raise_r+0x32>
 8016dba:	4620      	mov	r0, r4
 8016dbc:	f000 f830 	bl	8016e20 <_getpid_r>
 8016dc0:	462a      	mov	r2, r5
 8016dc2:	4601      	mov	r1, r0
 8016dc4:	4620      	mov	r0, r4
 8016dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016dca:	f000 b817 	b.w	8016dfc <_kill_r>
 8016dce:	2b01      	cmp	r3, #1
 8016dd0:	d00a      	beq.n	8016de8 <_raise_r+0x4c>
 8016dd2:	1c59      	adds	r1, r3, #1
 8016dd4:	d103      	bne.n	8016dde <_raise_r+0x42>
 8016dd6:	2316      	movs	r3, #22
 8016dd8:	6003      	str	r3, [r0, #0]
 8016dda:	2001      	movs	r0, #1
 8016ddc:	e7e7      	b.n	8016dae <_raise_r+0x12>
 8016dde:	2400      	movs	r4, #0
 8016de0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016de4:	4628      	mov	r0, r5
 8016de6:	4798      	blx	r3
 8016de8:	2000      	movs	r0, #0
 8016dea:	e7e0      	b.n	8016dae <_raise_r+0x12>

08016dec <raise>:
 8016dec:	4b02      	ldr	r3, [pc, #8]	; (8016df8 <raise+0xc>)
 8016dee:	4601      	mov	r1, r0
 8016df0:	6818      	ldr	r0, [r3, #0]
 8016df2:	f7ff bfd3 	b.w	8016d9c <_raise_r>
 8016df6:	bf00      	nop
 8016df8:	2000001c 	.word	0x2000001c

08016dfc <_kill_r>:
 8016dfc:	b538      	push	{r3, r4, r5, lr}
 8016dfe:	4d07      	ldr	r5, [pc, #28]	; (8016e1c <_kill_r+0x20>)
 8016e00:	2300      	movs	r3, #0
 8016e02:	4604      	mov	r4, r0
 8016e04:	4608      	mov	r0, r1
 8016e06:	4611      	mov	r1, r2
 8016e08:	602b      	str	r3, [r5, #0]
 8016e0a:	f7ea fd6f 	bl	80018ec <_kill>
 8016e0e:	1c43      	adds	r3, r0, #1
 8016e10:	d102      	bne.n	8016e18 <_kill_r+0x1c>
 8016e12:	682b      	ldr	r3, [r5, #0]
 8016e14:	b103      	cbz	r3, 8016e18 <_kill_r+0x1c>
 8016e16:	6023      	str	r3, [r4, #0]
 8016e18:	bd38      	pop	{r3, r4, r5, pc}
 8016e1a:	bf00      	nop
 8016e1c:	2000c94c 	.word	0x2000c94c

08016e20 <_getpid_r>:
 8016e20:	f7ea bd5c 	b.w	80018dc <_getpid>

08016e24 <_init>:
 8016e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e26:	bf00      	nop
 8016e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e2a:	bc08      	pop	{r3}
 8016e2c:	469e      	mov	lr, r3
 8016e2e:	4770      	bx	lr

08016e30 <_fini>:
 8016e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e32:	bf00      	nop
 8016e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016e36:	bc08      	pop	{r3}
 8016e38:	469e      	mov	lr, r3
 8016e3a:	4770      	bx	lr
