
NHK2023_RR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ddbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004188  0801dfc0  0801dfc0  0002dfc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022148  08022148  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  08022148  08022148  00032148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022150  08022150  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022150  08022150  00032150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022154  08022154  00032154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08022158  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d5fc  200001f0  08022344  000401f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000d7ec  08022344  0004d7ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00059dc3  00000000  00000000  0004021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009eb8  00000000  00000000  00099fdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c90  00000000  00000000  000a3e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ae0  00000000  00000000  000a6b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d507  00000000  00000000  000a9608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046629  00000000  00000000  000e6b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e0f6  00000000  00000000  0012d138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025b22e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5f8  00000000  00000000  0025b284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801dfa4 	.word	0x0801dfa4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0801dfa4 	.word	0x0801dfa4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <dma_printf_init>:
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <dma_printf_init+0x30>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <dma_printf_init+0x30>)
 80005fc:	f000 f80e 	bl	800061c <dma_ring_init>
    dmi.sending = false;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <dma_printf_init+0x30>)
 8000602:	2200      	movs	r2, #0
 8000604:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <dma_printf_init+0x30>)
 800060a:	2200      	movs	r2, #0
 800060c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20004938 	.word	0x20004938

0800061c <dma_ring_init>:
{
  ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx)) & 0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  ring->buf_size = RING_BUF_SIZE;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  ring->huart = huart;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <vApplicationGetIdleTaskMemory+0x2c>)
 800066c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <vApplicationGetIdleTaskMemory+0x30>)
 8000672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000020c 	.word	0x2000020c
 800068c:	20000260 	.word	0x20000260

08000690 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetTimerTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetTimerTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000460 	.word	0x20000460
 80006c0:	200004b4 	.word	0x200004b4

080006c4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80006ce:	1df9      	adds	r1, r7, #7
 80006d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d4:	2201      	movs	r2, #1
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <__io_putchar+0x24>)
 80006d8:	f006 fcb6 	bl	8007048 <HAL_UART_Transmit>
  return ch;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20004e4c 	.word	0x20004e4c

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b096      	sub	sp, #88	; 0x58
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 fc2a 	bl	8001f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f87f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc05 	bl	8000f08 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fbc9 	bl	8000e94 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000702:	f000 fb67 	bl	8000dd4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000706:	f000 f98f 	bl	8000a28 <MX_CAN1_Init>
  MX_I2C1_Init();
 800070a:	f000 f9c3 	bl	8000a94 <MX_I2C1_Init>
  MX_TIM2_Init();
 800070e:	f000 fa5b 	bl	8000bc8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000712:	f000 f90b 	bl	800092c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000716:	f000 fb8d 	bl	8000e34 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800071a:	f000 f9fb 	bl	8000b14 <MX_TIM1_Init>
  MX_TIM3_Init();
 800071e:	f000 faad 	bl	8000c7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000722:	f000 fb01 	bl	8000d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <main+0xe8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f01b fb7a 	bl	801be28 <setbuf>
  setbuf(stderr, NULL);
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f01b fb73 	bl	801be28 <setbuf>
  HAL_Delay(50);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f001 fc2e 	bl	8001fa4 <HAL_Delay>
  dma_printf_init(&huart3);
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <main+0xec>)
 800074a:	f7ff ff4d 	bl	80005e8 <dma_printf_init>
  HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f001 fc28 	bl	8001fa4 <HAL_Delay>
  printf("enter main function\r\n");
 8000754:	4821      	ldr	r0, [pc, #132]	; (80007dc <main+0xf0>)
 8000756:	f01b fb1f 	bl	801bd98 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <main+0xf4>)
 800075c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000760:	461d      	mov	r5, r3
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800076e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f008 fa7a 	bl	8008c6e <osThreadCreate>
 800077a:	4603      	mov	r3, r0
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <main+0xf8>)
 800077e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorTask */
  osThreadStaticDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256, SensorTaskBuffer, &SensorTaskControlBlock);
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <main+0xfc>)
 8000782:	f107 0420 	add.w	r4, r7, #32
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f008 fa67 	bl	8008c6e <osThreadCreate>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <main+0x100>)
 80007a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerTask */
  osThreadStaticDef(ControllerTask, StartControllerTask, osPriorityNormal, 0, 512, ControllerTaskBuffer, &ControllerTaskControlBlock);
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <main+0x104>)
 80007a8:	1d3c      	adds	r4, r7, #4
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(ControllerTask), NULL);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 fa56 	bl	8008c6e <osThreadCreate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <main+0x108>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UDPDefineTasks();
 80007c8:	f000 fcdc 	bl	8001184 <UDPDefineTasks>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007cc:	f008 fa38 	bl	8008c40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0xe4>
 80007d2:	bf00      	nop
 80007d4:	2000001c 	.word	0x2000001c
 80007d8:	20004e4c 	.word	0x20004e4c
 80007dc:	0801dfe8 	.word	0x0801dfe8
 80007e0:	0801e000 	.word	0x0801e000
 80007e4:	20004da8 	.word	0x20004da8
 80007e8:	0801e01c 	.word	0x0801e01c
 80007ec:	20004da4 	.word	0x20004da4
 80007f0:	0801e038 	.word	0x0801e038
 80007f4:	20004ed0 	.word	0x20004ed0

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	; 0xe0
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f01a fdf6 	bl	801b3f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2290      	movs	r2, #144	; 0x90
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f01a fde7 	bl	801b3f8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800082a:	f004 fa77 	bl	8004d1c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <SystemClock_Config+0x12c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a3c      	ldr	r2, [pc, #240]	; (8000924 <SystemClock_Config+0x12c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <SystemClock_Config+0x12c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <SystemClock_Config+0x130>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084e:	4a36      	ldr	r2, [pc, #216]	; (8000928 <SystemClock_Config+0x130>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <SystemClock_Config+0x130>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000862:	2301      	movs	r3, #1
 8000864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fa9b 	bl	8004ddc <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008ac:	f000 fc64 	bl	8001178 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b0:	f004 fa44 	bl	8004d3c <HAL_PWREx_EnableOverDrive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ba:	f000 fc5d 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008e2:	2103      	movs	r1, #3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fd27 	bl	8005338 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008f0:	f000 fc42 	bl	8001178 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 80008f4:	f44f 4392 	mov.w	r3, #18688	; 0x4900
 80008f8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008fe:	2300      	movs	r3, #0
 8000900:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f004 ff48 	bl	80057a0 <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000916:	f000 fc2f 	bl	8001178 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	37e0      	adds	r7, #224	; 0xe0
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <MX_ADC1_Init+0xf4>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000954:	2201      	movs	r2, #1
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800095a:	2201      	movs	r2, #1
 800095c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800096e:	4a2d      	ldr	r2, [pc, #180]	; (8000a24 <MX_ADC1_Init+0xf8>)
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800097a:	2204      	movs	r2, #4
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800098e:	f001 fb2d 	bl	8001fec <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 fbee 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800099c:	2303      	movs	r3, #3
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009a4:	2307      	movs	r3, #7
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ae:	f001 fb61 	bl	8002074 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fbde 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009bc:	2305      	movs	r3, #5
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80009c4:	2305      	movs	r3, #5
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ce:	f001 fb51 	bl	8002074 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 fbce 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009dc:	2306      	movs	r3, #6
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009e0:	2303      	movs	r3, #3
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ea:	f001 fb43 	bl	8002074 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80009f4:	f000 fbc0 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000a06:	f001 fb35 	bl	8002074 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000a10:	f000 fbb2 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000502c 	.word	0x2000502c
 8000a20:	40012000 	.word	0x40012000
 8000a24:	0f000001 	.word	0x0f000001

08000a28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <MX_CAN1_Init+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a34:	2206      	movs	r2, #6
 8000a36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a46:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000a4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a78:	f001 fd4c 	bl	8002514 <HAL_CAN_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a82:	f000 fb79 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20005e44 	.word	0x20005e44
 8000a90:	40006400 	.word	0x40006400

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad0:	f003 fffc 	bl	8004acc <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fb4d 	bl	8001178 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae2:	f004 f883 	bl	8004bec <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fb44 	bl	8001178 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af4:	f004 f8c5 	bl	8004c82 <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fb3b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20004ed4 	.word	0x20004ed4
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	20303e5d 	.word	0x20303e5d

08000b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2224      	movs	r2, #36	; 0x24
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f01a fc68 	bl	801b3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b34:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <MX_TIM1_Init+0xb0>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b8a:	f005 fb63 	bl	8006254 <HAL_TIM_Encoder_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b94:	f000 faf0 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000baa:	f006 f953 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bb4:	f000 fae0 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200050d4 	.word	0x200050d4
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920000;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c02:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MX_TIM2_Init+0xb0>)
 8000c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c14:	f005 fac6 	bl	80061a4 <HAL_TIM_PWM_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c1e:	f000 faab 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c32:	f006 f90f 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c3c:	f000 fa9c 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c40:	2360      	movs	r3, #96	; 0x60
 8000c42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	220c      	movs	r2, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c58:	f005 fcc2 	bl	80065e0 <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c62:	f000 fa89 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c68:	f000 fe88 	bl	800197c <HAL_TIM_MspPostInit>

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20005df8 	.word	0x20005df8
 8000c78:	001d4c00 	.word	0x001d4c00

08000c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	; 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f01a fbb4 	bl	801b3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_TIM3_Init+0xa8>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cec:	f005 fab2 	bl	8006254 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f000 fa3f 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000d08:	f006 f8a4 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d12:	f000 fa31 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20004f80 	.word	0x20004f80
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2224      	movs	r2, #36	; 0x24
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f01a fb5e 	bl	801b3f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_TIM4_Init+0xa8>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d98:	f005 fa5c 	bl	8006254 <HAL_TIM_Encoder_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000da2:	f000 f9e9 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000db4:	f006 f84e 	bl	8006e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000dbe:	f000 f9db 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20004e00 	.word	0x20004e00
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_USART3_UART_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e18:	f006 f8c8 	bl	8006fac <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f9a9 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20004e4c 	.word	0x20004e4c
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART6_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e78:	f006 f898 	bl	8006fac <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 f979 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20005920 	.word	0x20005920
 8000e90:	40011400 	.word	0x40011400

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_DMA_Init+0x70>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DMA_Init+0x70>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <MX_DMA_Init+0x70>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	200e      	movs	r0, #14
 8000ed0:	f001 ff0c 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed4:	200e      	movs	r0, #14
 8000ed6:	f001 ff25 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2038      	movs	r0, #56	; 0x38
 8000ee0:	f001 ff04 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ee4:	2038      	movs	r0, #56	; 0x38
 8000ee6:	f001 ff1d 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	2045      	movs	r0, #69	; 0x45
 8000ef0:	f001 fefc 	bl	8002cec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ef4:	2045      	movs	r0, #69	; 0x45
 8000ef6:	f001 ff15 	bl	8002d24 <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4b79      	ldr	r3, [pc, #484]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a78      	ldr	r2, [pc, #480]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b76      	ldr	r3, [pc, #472]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b73      	ldr	r3, [pc, #460]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a72      	ldr	r2, [pc, #456]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b70      	ldr	r3, [pc, #448]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a6c      	ldr	r2, [pc, #432]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b67      	ldr	r3, [pc, #412]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a66      	ldr	r2, [pc, #408]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b64      	ldr	r3, [pc, #400]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a60      	ldr	r2, [pc, #384]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a5a      	ldr	r2, [pc, #360]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b55      	ldr	r3, [pc, #340]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a54      	ldr	r2, [pc, #336]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b52      	ldr	r3, [pc, #328]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <MX_GPIO_Init+0x200>)
 8000fe6:	f003 fd57 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000ff0:	4846      	ldr	r0, [pc, #280]	; (800110c <MX_GPIO_Init+0x204>)
 8000ff2:	f003 fd51 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000ffc:	4844      	ldr	r0, [pc, #272]	; (8001110 <MX_GPIO_Init+0x208>)
 8000ffe:	f003 fd4b 	bl	8004a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Limit4_Pin Limit5_Pin Limit2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = Limit4_Pin|Limit5_Pin|Limit2_Pin|BUTTON1_Pin;
 8001002:	f240 4334 	movw	r3, #1076	; 0x434
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	483f      	ldr	r0, [pc, #252]	; (8001114 <MX_GPIO_Init+0x20c>)
 8001018:	f003 fb92 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001022:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4839      	ldr	r0, [pc, #228]	; (8001118 <MX_GPIO_Init+0x210>)
 8001034:	f003 fb84 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit3_Pin */
  GPIO_InitStruct.Pin = Limit3_Pin;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Limit3_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4830      	ldr	r0, [pc, #192]	; (800110c <MX_GPIO_Init+0x204>)
 800104c:	f003 fb78 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001050:	f244 0381 	movw	r3, #16513	; 0x4081
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4827      	ldr	r0, [pc, #156]	; (8001108 <MX_GPIO_Init+0x200>)
 800106a:	f003 fb69 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800106e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_GPIO_Init+0x204>)
 8001088:	f003 fb5a 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit1_Pin Limit4G2_Pin Limit5G3_Pin BUTTON2_Pin
                           USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Limit1_Pin|Limit4G2_Pin|Limit5G3_Pin|BUTTON2_Pin
 800108c:	239e      	movs	r3, #158	; 0x9e
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
                          |USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <MX_GPIO_Init+0x208>)
 80010a0:	f003 fb4e 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pin : Laser_Pin */
  GPIO_InitStruct.Pin = Laser_Pin;
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Laser_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_GPIO_Init+0x20c>)
 80010b8:	f003 fb42 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin USB_PowerSwitchOn_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin;
 80010bc:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	480e      	ldr	r0, [pc, #56]	; (8001110 <MX_GPIO_Init+0x208>)
 80010d6:	f003 fb33 	bl	8004740 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80010da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ec:	230a      	movs	r3, #10
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_GPIO_Init+0x214>)
 80010f8:	f003 fb22 	bl	8004740 <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021000 	.word	0x40021000
 8001118:	40020800 	.word	0x40020800
 800111c:	40020000 	.word	0x40020000

08001120 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001128:	f006 ffe0 	bl	80080ec <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f007 fdea 	bl	8008d06 <osDelay>
 8001132:	e7fb      	b.n	800112c <StartDefaultTask+0xc>

08001134 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f007 fde2 	bl	8008d06 <osDelay>
 8001142:	e7fb      	b.n	800113c <StartSensorTask+0x8>

08001144 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f007 fdda 	bl	8008d06 <osDelay>
 8001152:	e7fb      	b.n	800114c <StartControllerTask+0x8>

08001154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001166:	f000 fefd 	bl	8001f64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40001c00 	.word	0x40001c00

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <UDPDefineTasks>:
osThreadId controllerTaskHandle;
uint32_t controllerTaskBuffer[512];
osStaticThreadDef_t controllerTaskControlBlock;
void UDPSendReceive(void const *argument);

void UDPDefineTasks() {
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
	osThreadStaticDef(controllerTask, UDPSendReceive, osPriorityNormal, 0,
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <UDPDefineTasks+0x30>)
 800118c:	1d3c      	adds	r4, r7, #4
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, controllerTaskBuffer, &controllerTaskControlBlock);
	controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 fd64 	bl	8008c6e <osThreadCreate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <UDPDefineTasks+0x34>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bdb0      	pop	{r4, r5, r7, pc}
 80011b4:	0801e064 	.word	0x0801e064
 80011b8:	20006ed4 	.word	0x20006ed4

080011bc <UDPSendReceive>:

void UDPSendReceive(void const *argument) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	f5ad 7d5e 	sub.w	sp, sp, #888	; 0x378
 80011c2:	af06      	add	r7, sp, #24
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	6018      	str	r0, [r3, #0]
	printf("ender udp task\r\n");
 80011c8:	48ba      	ldr	r0, [pc, #744]	; (80014b4 <UDPSendReceive+0x2f8>)
 80011ca:	f01a fde5 	bl	801bd98 <puts>
	fd_set reading;
	int sock1;
	int iBytesWritten = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
	char rxbuf[512]; //最大受信データサイズ
	char txbuf[256]; //最大送信データサイズ
	struct sockaddr_in myAddr, cAddr;
	sock1 = lwip_socket(AF_INET, SOCK_DGRAM, 0); //udp制御ブロックを作成
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	2002      	movs	r0, #2
 80011da:	f00d ff19 	bl	800f010 <lwip_socket>
 80011de:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350

	//ソケットを作成
	memset((char*) &myAddr, 0, sizeof(myAddr)); //myAddrを0で埋める
 80011e2:	f107 0320 	add.w	r3, r7, #32
 80011e6:	2210      	movs	r2, #16
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f01a f904 	bl	801b3f8 <memset>
	memset((char*) &cAddr, 0, sizeof(cAddr));
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	2210      	movs	r2, #16
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f01a f8fd 	bl	801b3f8 <memset>
	myAddr.sin_family = AF_INET;
 80011fe:	f107 0320 	add.w	r3, r7, #32
 8001202:	2202      	movs	r2, #2
 8001204:	705a      	strb	r2, [r3, #1]
	myAddr.sin_len = sizeof(myAddr);
 8001206:	f107 0320 	add.w	r3, r7, #32
 800120a:	2210      	movs	r2, #16
 800120c:	701a      	strb	r2, [r3, #0]
	myAddr.sin_addr.s_addr = inet_addr(F7_ADDR); //マイコンのIP
 800120e:	48aa      	ldr	r0, [pc, #680]	; (80014b8 <UDPSendReceive+0x2fc>)
 8001210:	f018 fe83 	bl	8019f1a <ipaddr_addr>
 8001214:	4602      	mov	r2, r0
 8001216:	f107 0320 	add.w	r3, r7, #32
 800121a:	605a      	str	r2, [r3, #4]
	myAddr.sin_port = htons(F7_PORT); //マイコンのポート
 800121c:	f641 6061 	movw	r0, #7777	; 0x1e61
 8001220:	f00e fe26 	bl	800fe70 <lwip_htons>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	f107 0320 	add.w	r3, r7, #32
 800122c:	805a      	strh	r2, [r3, #2]
	cAddr.sin_family = AF_INET;
 800122e:	f107 0310 	add.w	r3, r7, #16
 8001232:	2202      	movs	r2, #2
 8001234:	705a      	strb	r2, [r3, #1]
	cAddr.sin_len = sizeof(cAddr);
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2210      	movs	r2, #16
 800123c:	701a      	strb	r2, [r3, #0]
	cAddr.sin_addr.s_addr = inet_addr(PC_ADDR); //PCのIP
 800123e:	489f      	ldr	r0, [pc, #636]	; (80014bc <UDPSendReceive+0x300>)
 8001240:	f018 fe6b 	bl	8019f1a <ipaddr_addr>
 8001244:	4602      	mov	r2, r0
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	605a      	str	r2, [r3, #4]
	cAddr.sin_port = htons(PC_PORT); //PCのポート
 800124c:	f24d 4031 	movw	r0, #54321	; 0xd431
 8001250:	f00e fe0e 	bl	800fe70 <lwip_htons>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	f107 0310 	add.w	r3, r7, #16
 800125c:	805a      	strh	r2, [r3, #2]

	int err = lwip_bind(sock1, (struct sockaddr*) &myAddr, sizeof(myAddr)); //制御ブロックをIPとポートに紐づける。
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2210      	movs	r2, #16
 8001264:	4619      	mov	r1, r3
 8001266:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 800126a:	f00d fa3d 	bl	800e6e8 <lwip_bind>
 800126e:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
	if (err != 0) {
 8001272:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <UDPSendReceive+0xc6>
		printf("UDPController:ERROR \r\n");
 800127a:	4891      	ldr	r0, [pc, #580]	; (80014c0 <UDPSendReceive+0x304>)
 800127c:	f01a fd8c 	bl	801bd98 <puts>
 8001280:	e002      	b.n	8001288 <UDPSendReceive+0xcc>
	} else {
		printf("UDPController:Socket Opened!\r\n");
 8001282:	4890      	ldr	r0, [pc, #576]	; (80014c4 <UDPSendReceive+0x308>)
 8001284:	f01a fd88 	bl	801bd98 <puts>
	}
	int maxfd = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
	int result = 0;
 800128e:	2300      	movs	r3, #0
 8001290:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
	/*---------test sumple----------*/
	f7_data.omni_x = 0.5f;
 8001294:	4b8c      	ldr	r3, [pc, #560]	; (80014c8 <UDPSendReceive+0x30c>)
 8001296:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800129a:	601a      	str	r2, [r3, #0]
	f7_data.omni_y = 0.5f;
 800129c:	4b8a      	ldr	r3, [pc, #552]	; (80014c8 <UDPSendReceive+0x30c>)
 800129e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012a2:	605a      	str	r2, [r3, #4]
	f7_data.hat_shoulder_success = 0;
 80012a4:	4b88      	ldr	r3, [pc, #544]	; (80014c8 <UDPSendReceive+0x30c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
	f7_data.sword_A_shoulder_success = 0;
 80012aa:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <UDPSendReceive+0x30c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	60da      	str	r2, [r3, #12]
	f7_data.sword_B_shoulder_success = 0;
 80012b0:	4b85      	ldr	r3, [pc, #532]	; (80014c8 <UDPSendReceive+0x30c>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
	f7_data.launcher_linear_success = 0;
 80012b6:	4b84      	ldr	r3, [pc, #528]	; (80014c8 <UDPSendReceive+0x30c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
	/*------------------------*/

	printf("enter udp loop\r\n");
 80012bc:	4883      	ldr	r0, [pc, #524]	; (80014cc <UDPSendReceive+0x310>)
 80012be:	f01a fd6b 	bl	801bd98 <puts>
	while (1) {
		FD_ZERO(&reading); //ディスクリプタ集合の初期化
 80012c2:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80012c6:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80012d0:	e00b      	b.n	80012ea <UDPSendReceive+0x12e>
 80012d2:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	f8c7 2358 	str.w	r2, [r7, #856]	; 0x358
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
 80012e0:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80012e4:	3301      	adds	r3, #1
 80012e6:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80012ea:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 80012ee:	2b07      	cmp	r3, #7
 80012f0:	d9ef      	bls.n	80012d2 <UDPSendReceive+0x116>
		FD_SET(sock1, &reading); //readingにsock（ディスクリプタ番号）を追加
 80012f2:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80012f6:	095a      	lsrs	r2, r3, #5
 80012f8:	0093      	lsls	r3, r2, #2
 80012fa:	f507 7158 	add.w	r1, r7, #864	; 0x360
 80012fe:	440b      	add	r3, r1
 8001300:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001304:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 8001308:	f001 011f 	and.w	r1, r1, #31
 800130c:	2001      	movs	r0, #1
 800130e:	fa00 f101 	lsl.w	r1, r0, r1
 8001312:	4319      	orrs	r1, r3
 8001314:	0093      	lsls	r3, r2, #2
 8001316:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800131a:	4413      	add	r3, r2
 800131c:	f843 1c30 	str.w	r1, [r3, #-48]
		maxfd = sock1;
 8001320:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001324:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
		maxfd ++;
 8001328:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 800132c:	3301      	adds	r3, #1
 800132e:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
		memset(&tv, 0, sizeof(tv));
 8001332:	2210      	movs	r2, #16
 8001334:	2100      	movs	r1, #0
 8001336:	4866      	ldr	r0, [pc, #408]	; (80014d0 <UDPSendReceive+0x314>)
 8001338:	f01a f85e 	bl	801b3f8 <memset>
		//tv.tv_usec = 1000;
		tv.tv_sec = 5;
 800133c:	4964      	ldr	r1, [pc, #400]	; (80014d0 <UDPSendReceive+0x314>)
 800133e:	f04f 0205 	mov.w	r2, #5
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	e9c1 2300 	strd	r2, r3, [r1]
		result = select(maxfd, &reading, NULL, NULL, &tv); //ファイルディスクリプタ―がready状態になるまで1ミリ秒まで待つ。
 800134a:	f507 714c 	add.w	r1, r7, #816	; 0x330
 800134e:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <UDPSendReceive+0x314>)
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2200      	movs	r2, #0
 8001356:	f8d7 0348 	ldr.w	r0, [r7, #840]	; 0x348
 800135a:	f00e f875 	bl	800f448 <lwip_select>
 800135e:	f8c7 0344 	str.w	r0, [r7, #836]	; 0x344
		printf("select result: %d\r\n", result);
 8001362:	f8d7 1344 	ldr.w	r1, [r7, #836]	; 0x344
 8001366:	485b      	ldr	r0, [pc, #364]	; (80014d4 <UDPSendReceive+0x318>)
 8001368:	f01a fc90 	bl	801bc8c <iprintf>
		if (result == -1){
 800136c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001374:	f000 809a 	beq.w	80014ac <UDPSendReceive+0x2f0>
			//error
			continue;
		}
		if (result == 0){
 8001378:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8097 	beq.w	80014b0 <UDPSendReceive+0x2f4>
			//timeout
			continue;
		}
		if (FD_ISSET(sock1, &reading)) { //readingの中にsockの値が含まれているか調べる。
 8001382:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 8001386:	095b      	lsrs	r3, r3, #5
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	f507 7258 	add.w	r2, r7, #864	; 0x360
 800138e:	4413      	add	r3, r2
 8001390:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8001394:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 8001398:	f002 021f 	and.w	r2, r2, #31
 800139c:	2101      	movs	r1, #1
 800139e:	fa01 f202 	lsl.w	r2, r1, r2
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d07d      	beq.n	80014a4 <UDPSendReceive+0x2e8>
			printf("fd is set\r\n");
 80013a8:	484b      	ldr	r0, [pc, #300]	; (80014d8 <UDPSendReceive+0x31c>)
 80013aa:	f01a fcf5 	bl	801bd98 <puts>
			socklen_t n;
			socklen_t len = sizeof(cAddr);
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2210      	movs	r2, #16
 80013b4:	601a      	str	r2, [r3, #0]
			n = lwip_recvfrom(sock1, (char*) rxbuf, sizeof(rxbuf), (int) NULL, (struct sockaddr*) &cAddr, &len); //rxbufに受信データを格納
 80013b6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	9301      	str	r3, [sp, #4]
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013cc:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 80013d0:	f00d fc7c 	bl	800eccc <lwip_recvfrom>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
			if (n > 0) {
 80013da:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d060      	beq.n	80014a4 <UDPSendReceive+0x2e8>
				if (n < sizeof(struct receive_data)) {
 80013e2:	f8d7 3340 	ldr.w	r3, [r7, #832]	; 0x340
 80013e6:	2b3b      	cmp	r3, #59	; 0x3b
 80013e8:	d803      	bhi.n	80013f2 <UDPSendReceive+0x236>
					printf("invalid data : \r\n"); //データが欠損しているのでループを送る
 80013ea:	483c      	ldr	r0, [pc, #240]	; (80014dc <UDPSendReceive+0x320>)
 80013ec:	f01a fcd4 	bl	801bd98 <puts>
 80013f0:	e767      	b.n	80012c2 <UDPSendReceive+0x106>
					continue;
				}
				struct receive_data *d = (struct receive_data*) &rxbuf; //rxbufの位置にreceive_data構造体を作る。(疑似的にデータが変換される)
 80013f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80013f6:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
				memcpy(&ros_data, d, sizeof(struct receive_data)); //受信データをコピーする
 80013fa:	223c      	movs	r2, #60	; 0x3c
 80013fc:	f8d7 133c 	ldr.w	r1, [r7, #828]	; 0x33c
 8001400:	4837      	ldr	r0, [pc, #220]	; (80014e0 <UDPSendReceive+0x324>)
 8001402:	f019 ffeb 	bl	801b3dc <memcpy>
				printf("omni1:%f\r\nomni2:%f\r\nomni3:%f\r\nomni4:%f\r\n", ros_data.omni1_power, ros_data.omni2_power, ros_data.omni3_power, ros_data.omni4_power);
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <UDPSendReceive+0x324>)
 8001408:	edd3 7a05 	vldr	s15, [r3, #20]
 800140c:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001410:	4b33      	ldr	r3, [pc, #204]	; (80014e0 <UDPSendReceive+0x324>)
 8001412:	edd3 7a06 	vldr	s15, [r3, #24]
 8001416:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800141a:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <UDPSendReceive+0x324>)
 800141c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001420:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001424:	4b2e      	ldr	r3, [pc, #184]	; (80014e0 <UDPSendReceive+0x324>)
 8001426:	edd3 5a08 	vldr	s11, [r3, #32]
 800142a:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 800142e:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001432:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001436:	ed8d 7b00 	vstr	d7, [sp]
 800143a:	ec53 2b14 	vmov	r2, r3, d4
 800143e:	4829      	ldr	r0, [pc, #164]	; (80014e4 <UDPSendReceive+0x328>)
 8001440:	f01a fc24 	bl	801bc8c <iprintf>

				//callback
				struct send_data* sd = (struct send_data*)&txbuf; //txbufの位置に重ねてsdを宣言
 8001444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001448:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
				memcpy(sd, &f7_data, sizeof(struct send_data)); //送信データをコピーする
 800144c:	2218      	movs	r2, #24
 800144e:	491e      	ldr	r1, [pc, #120]	; (80014c8 <UDPSendReceive+0x30c>)
 8001450:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8001454:	f019 ffc2 	bl	801b3dc <memcpy>
				iBytesWritten = lwip_sendto(sock1, (char*)txbuf, sizeof(txbuf), 0, (struct sockaddr*)&cAddr, sizeof(cAddr));
 8001458:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800145c:	2310      	movs	r3, #16
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	2300      	movs	r3, #0
 8001468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800146c:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 8001470:	f00d fd1c 	bl	800eeac <lwip_sendto>
 8001474:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
				//iBytesWritten = lwip_sendto(sock, (char*)"hello world from f7!", 256, 0, (struct sockaddr*)&cAddr, sizeof(cAddr));
				if (iBytesWritten > 0) {
 8001478:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800147c:	2b00      	cmp	r3, #0
 800147e:	dd0e      	ble.n	800149e <UDPSendReceive+0x2e2>
					printf("success send data\r\n");
 8001480:	4819      	ldr	r0, [pc, #100]	; (80014e8 <UDPSendReceive+0x32c>)
 8001482:	f01a fc89 	bl	801bd98 <puts>
					if (iBytesWritten < sizeof(struct send_data)) {
 8001486:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800148a:	2b17      	cmp	r3, #23
 800148c:	d803      	bhi.n	8001496 <UDPSendReceive+0x2da>
						printf("send data invalid\r\n");
 800148e:	4817      	ldr	r0, [pc, #92]	; (80014ec <UDPSendReceive+0x330>)
 8001490:	f01a fc82 	bl	801bd98 <puts>
 8001494:	e006      	b.n	80014a4 <UDPSendReceive+0x2e8>
					}else{
						printf("send data is perfect\r\n");
 8001496:	4816      	ldr	r0, [pc, #88]	; (80014f0 <UDPSendReceive+0x334>)
 8001498:	f01a fc7e 	bl	801bd98 <puts>
 800149c:	e002      	b.n	80014a4 <UDPSendReceive+0x2e8>
					}
				}else{
					printf("failed send data\r\n");
 800149e:	4815      	ldr	r0, [pc, #84]	; (80014f4 <UDPSendReceive+0x338>)
 80014a0:	f01a fc7a 	bl	801bd98 <puts>
				}
			}
		}
		osDelay(10);
 80014a4:	200a      	movs	r0, #10
 80014a6:	f007 fc2e 	bl	8008d06 <osDelay>
 80014aa:	e70a      	b.n	80012c2 <UDPSendReceive+0x106>
			continue;
 80014ac:	bf00      	nop
 80014ae:	e708      	b.n	80012c2 <UDPSendReceive+0x106>
			continue;
 80014b0:	bf00      	nop
		FD_ZERO(&reading); //ディスクリプタ集合の初期化
 80014b2:	e706      	b.n	80012c2 <UDPSendReceive+0x106>
 80014b4:	0801e080 	.word	0x0801e080
 80014b8:	0801e090 	.word	0x0801e090
 80014bc:	0801e0a0 	.word	0x0801e0a0
 80014c0:	0801e0b0 	.word	0x0801e0b0
 80014c4:	0801e0c8 	.word	0x0801e0c8
 80014c8:	200008f0 	.word	0x200008f0
 80014cc:	0801e0e8 	.word	0x0801e0e8
 80014d0:	20006670 	.word	0x20006670
 80014d4:	0801e0f8 	.word	0x0801e0f8
 80014d8:	0801e10c 	.word	0x0801e10c
 80014dc:	0801e118 	.word	0x0801e118
 80014e0:	200008b4 	.word	0x200008b4
 80014e4:	0801e12c 	.word	0x0801e12c
 80014e8:	0801e158 	.word	0x0801e158
 80014ec:	0801e16c 	.word	0x0801e16c
 80014f0:	0801e180 	.word	0x0801e180
 80014f4:	0801e198 	.word	0x0801e198

080014f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_MspInit+0x4c>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001502:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_MspInit+0x4c>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	; 0x40
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <HAL_MspInit+0x4c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <HAL_MspInit+0x4c>)
 800151c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_MspInit+0x4c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152a:	603b      	str	r3, [r7, #0]
 800152c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800152e:	2200      	movs	r2, #0
 8001530:	210f      	movs	r1, #15
 8001532:	f06f 0001 	mvn.w	r0, #1
 8001536:	f001 fbd9 	bl	8002cec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800

08001548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	; 0x28
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0314 	add.w	r3, r7, #20
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
 800155e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a39      	ldr	r2, [pc, #228]	; (800164c <HAL_ADC_MspInit+0x104>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d16c      	bne.n	8001644 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800156a:	4b39      	ldr	r3, [pc, #228]	; (8001650 <HAL_ADC_MspInit+0x108>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156e:	4a38      	ldr	r2, [pc, #224]	; (8001650 <HAL_ADC_MspInit+0x108>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6453      	str	r3, [r2, #68]	; 0x44
 8001576:	4b36      	ldr	r3, [pc, #216]	; (8001650 <HAL_ADC_MspInit+0x108>)
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	613b      	str	r3, [r7, #16]
 8001580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	4b33      	ldr	r3, [pc, #204]	; (8001650 <HAL_ADC_MspInit+0x108>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a32      	ldr	r2, [pc, #200]	; (8001650 <HAL_ADC_MspInit+0x108>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <HAL_ADC_MspInit+0x108>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800159a:	4b2d      	ldr	r3, [pc, #180]	; (8001650 <HAL_ADC_MspInit+0x108>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a2c      	ldr	r2, [pc, #176]	; (8001650 <HAL_ADC_MspInit+0x108>)
 80015a0:	f043 0302 	orr.w	r3, r3, #2
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_ADC_MspInit+0x108>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 80015b2:	2368      	movs	r3, #104	; 0x68
 80015b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b6:	2303      	movs	r3, #3
 80015b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4823      	ldr	r0, [pc, #140]	; (8001654 <HAL_ADC_MspInit+0x10c>)
 80015c6:	f003 f8bb 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ce:	2303      	movs	r3, #3
 80015d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4619      	mov	r1, r3
 80015dc:	481e      	ldr	r0, [pc, #120]	; (8001658 <HAL_ADC_MspInit+0x110>)
 80015de:	f003 f8af 	bl	8004740 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015e2:	4b1e      	ldr	r3, [pc, #120]	; (800165c <HAL_ADC_MspInit+0x114>)
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_ADC_MspInit+0x118>)
 80015e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	; (800165c <HAL_ADC_MspInit+0x114>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <HAL_ADC_MspInit+0x114>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <HAL_ADC_MspInit+0x114>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80015fa:	4b18      	ldr	r3, [pc, #96]	; (800165c <HAL_ADC_MspInit+0x114>)
 80015fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001600:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001602:	4b16      	ldr	r3, [pc, #88]	; (800165c <HAL_ADC_MspInit+0x114>)
 8001604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001608:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <HAL_ADC_MspInit+0x114>)
 800160c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001610:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_ADC_MspInit+0x114>)
 8001614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001618:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_ADC_MspInit+0x114>)
 800161c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001620:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001622:	4b0e      	ldr	r3, [pc, #56]	; (800165c <HAL_ADC_MspInit+0x114>)
 8001624:	2200      	movs	r2, #0
 8001626:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001628:	480c      	ldr	r0, [pc, #48]	; (800165c <HAL_ADC_MspInit+0x114>)
 800162a:	f001 fb89 	bl	8002d40 <HAL_DMA_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 8001634:	f7ff fda0 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a08      	ldr	r2, [pc, #32]	; (800165c <HAL_ADC_MspInit+0x114>)
 800163c:	639a      	str	r2, [r3, #56]	; 0x38
 800163e:	4a07      	ldr	r2, [pc, #28]	; (800165c <HAL_ADC_MspInit+0x114>)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001644:	bf00      	nop
 8001646:	3728      	adds	r7, #40	; 0x28
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	40012000 	.word	0x40012000
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000
 8001658:	40020400 	.word	0x40020400
 800165c:	20005074 	.word	0x20005074
 8001660:	40026410 	.word	0x40026410

08001664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b08a      	sub	sp, #40	; 0x28
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
 8001674:	605a      	str	r2, [r3, #4]
 8001676:	609a      	str	r2, [r3, #8]
 8001678:	60da      	str	r2, [r3, #12]
 800167a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a23      	ldr	r2, [pc, #140]	; (8001710 <HAL_CAN_MspInit+0xac>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d13f      	bne.n	8001706 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001686:	4b23      	ldr	r3, [pc, #140]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a22      	ldr	r2, [pc, #136]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 800168c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 80016a4:	f043 0308 	orr.w	r3, r3, #8
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <HAL_CAN_MspInit+0xb0>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0308 	and.w	r3, r3, #8
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016b6:	2303      	movs	r3, #3
 80016b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	2302      	movs	r3, #2
 80016bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c2:	2303      	movs	r3, #3
 80016c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80016c6:	2309      	movs	r3, #9
 80016c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016ca:	f107 0314 	add.w	r3, r7, #20
 80016ce:	4619      	mov	r1, r3
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <HAL_CAN_MspInit+0xb4>)
 80016d2:	f003 f835 	bl	8004740 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80016d6:	2200      	movs	r2, #0
 80016d8:	2105      	movs	r1, #5
 80016da:	2013      	movs	r0, #19
 80016dc:	f001 fb06 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80016e0:	2013      	movs	r0, #19
 80016e2:	f001 fb1f 	bl	8002d24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2105      	movs	r1, #5
 80016ea:	2014      	movs	r0, #20
 80016ec:	f001 fafe 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80016f0:	2014      	movs	r0, #20
 80016f2:	f001 fb17 	bl	8002d24 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2105      	movs	r1, #5
 80016fa:	2015      	movs	r0, #21
 80016fc:	f001 faf6 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001700:	2015      	movs	r0, #21
 8001702:	f001 fb0f 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001706:	bf00      	nop
 8001708:	3728      	adds	r7, #40	; 0x28
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40006400 	.word	0x40006400
 8001714:	40023800 	.word	0x40023800
 8001718:	40020c00 	.word	0x40020c00

0800171c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a17      	ldr	r2, [pc, #92]	; (8001798 <HAL_I2C_MspInit+0x7c>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d128      	bne.n	8001790 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_I2C_MspInit+0x80>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a16      	ldr	r2, [pc, #88]	; (800179c <HAL_I2C_MspInit+0x80>)
 8001744:	f043 0302 	orr.w	r3, r3, #2
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b14      	ldr	r3, [pc, #80]	; (800179c <HAL_I2C_MspInit+0x80>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001756:	f44f 7340 	mov.w	r3, #768	; 0x300
 800175a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800175c:	2312      	movs	r3, #18
 800175e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001764:	2303      	movs	r3, #3
 8001766:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001768:	2304      	movs	r3, #4
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	480b      	ldr	r0, [pc, #44]	; (80017a0 <HAL_I2C_MspInit+0x84>)
 8001774:	f002 ffe4 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <HAL_I2C_MspInit+0x80>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_I2C_MspInit+0x80>)
 800177e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001782:	6413      	str	r3, [r2, #64]	; 0x40
 8001784:	4b05      	ldr	r3, [pc, #20]	; (800179c <HAL_I2C_MspInit+0x80>)
 8001786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001788:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40005400 	.word	0x40005400
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020400 	.word	0x40020400

080017a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08e      	sub	sp, #56	; 0x38
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a46      	ldr	r2, [pc, #280]	; (80018dc <HAL_TIM_Encoder_MspInit+0x138>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d129      	bne.n	800181a <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017c6:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a45      	ldr	r2, [pc, #276]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b43      	ldr	r3, [pc, #268]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	623b      	str	r3, [r7, #32]
 80017dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4b40      	ldr	r3, [pc, #256]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a3f      	ldr	r2, [pc, #252]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b3d      	ldr	r3, [pc, #244]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0310 	and.w	r3, r3, #16
 80017f2:	61fb      	str	r3, [r7, #28]
 80017f4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017f6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001808:	2301      	movs	r3, #1
 800180a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4834      	ldr	r0, [pc, #208]	; (80018e4 <HAL_TIM_Encoder_MspInit+0x140>)
 8001814:	f002 ff94 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001818:	e05b      	b.n	80018d2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <HAL_TIM_Encoder_MspInit+0x144>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d128      	bne.n	8001876 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	4a2d      	ldr	r2, [pc, #180]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	6413      	str	r3, [r2, #64]	; 0x40
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	61bb      	str	r3, [r7, #24]
 800183a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	4a27      	ldr	r2, [pc, #156]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001842:	f043 0302 	orr.w	r3, r3, #2
 8001846:	6313      	str	r3, [r2, #48]	; 0x30
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001854:	2330      	movs	r3, #48	; 0x30
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001864:	2302      	movs	r3, #2
 8001866:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	4619      	mov	r1, r3
 800186e:	481f      	ldr	r0, [pc, #124]	; (80018ec <HAL_TIM_Encoder_MspInit+0x148>)
 8001870:	f002 ff66 	bl	8004740 <HAL_GPIO_Init>
}
 8001874:	e02d      	b.n	80018d2 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_TIM_Encoder_MspInit+0x14c>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d128      	bne.n	80018d2 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001884:	4a16      	ldr	r2, [pc, #88]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 8001886:	f043 0304 	orr.w	r3, r3, #4
 800188a:	6413      	str	r3, [r2, #64]	; 0x40
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800189a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 800189e:	f043 0308 	orr.w	r3, r3, #8
 80018a2:	6313      	str	r3, [r2, #48]	; 0x30
 80018a4:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_Encoder_MspInit+0x13c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 80018b0:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80018c2:	2302      	movs	r3, #2
 80018c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ca:	4619      	mov	r1, r3
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_TIM_Encoder_MspInit+0x150>)
 80018ce:	f002 ff37 	bl	8004740 <HAL_GPIO_Init>
}
 80018d2:	bf00      	nop
 80018d4:	3738      	adds	r7, #56	; 0x38
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40010000 	.word	0x40010000
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40000400 	.word	0x40000400
 80018ec:	40020400 	.word	0x40020400
 80018f0:	40000800 	.word	0x40000800
 80018f4:	40020c00 	.word	0x40020c00

080018f8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001918:	d127      	bne.n	800196a <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6413      	str	r3, [r2, #64]	; 0x40
 8001926:	4b13      	ldr	r3, [pc, #76]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	613b      	str	r3, [r7, #16]
 8001930:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_TIM_PWM_MspInit+0x7c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin;
 800194a:	2301      	movs	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800195a:	2301      	movs	r3, #1
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 800195e:	f107 0314 	add.w	r3, r7, #20
 8001962:	4619      	mov	r1, r3
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <HAL_TIM_PWM_MspInit+0x80>)
 8001966:	f002 feeb 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40023800 	.word	0x40023800
 8001978:	40020000 	.word	0x40020000

0800197c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b088      	sub	sp, #32
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001984:	f107 030c 	add.w	r3, r7, #12
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199c:	d11c      	bne.n	80019d8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_TIM_MspPostInit+0x64>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_TIM_MspPostInit+0x64>)
 80019a4:	f043 0302 	orr.w	r3, r3, #2
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_TIM_MspPostInit+0x64>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ESC_Pin;
 80019b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019c8:	2301      	movs	r3, #1
 80019ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 030c 	add.w	r3, r7, #12
 80019d0:	4619      	mov	r1, r3
 80019d2:	4804      	ldr	r0, [pc, #16]	; (80019e4 <HAL_TIM_MspPostInit+0x68>)
 80019d4:	f002 feb4 	bl	8004740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80019d8:	bf00      	nop
 80019da:	3720      	adds	r7, #32
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08c      	sub	sp, #48	; 0x30
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a61      	ldr	r2, [pc, #388]	; (8001b8c <HAL_UART_MspInit+0x1a4>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d15f      	bne.n	8001aca <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a0a:	4b61      	ldr	r3, [pc, #388]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	4a60      	ldr	r2, [pc, #384]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a14:	6413      	str	r3, [r2, #64]	; 0x40
 8001a16:	4b5e      	ldr	r3, [pc, #376]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a22:	4b5b      	ldr	r3, [pc, #364]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	4a5a      	ldr	r2, [pc, #360]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a28:	f043 0308 	orr.w	r3, r3, #8
 8001a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2e:	4b58      	ldr	r3, [pc, #352]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	f003 0308 	and.w	r3, r3, #8
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a4c:	2307      	movs	r3, #7
 8001a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	4619      	mov	r1, r3
 8001a56:	484f      	ldr	r0, [pc, #316]	; (8001b94 <HAL_UART_MspInit+0x1ac>)
 8001a58:	f002 fe72 	bl	8004740 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a5e:	4a4f      	ldr	r2, [pc, #316]	; (8001b9c <HAL_UART_MspInit+0x1b4>)
 8001a60:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001a62:	4b4d      	ldr	r3, [pc, #308]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a64:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a68:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a6a:	4b4b      	ldr	r3, [pc, #300]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a7c:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a84:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001a8a:	4b43      	ldr	r3, [pc, #268]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a90:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001a9c:	483e      	ldr	r0, [pc, #248]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001a9e:	f001 f94f 	bl	8002d40 <HAL_DMA_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001aa8:	f7ff fb66 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ab0:	66da      	str	r2, [r3, #108]	; 0x6c
 8001ab2:	4a39      	ldr	r2, [pc, #228]	; (8001b98 <HAL_UART_MspInit+0x1b0>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	2105      	movs	r1, #5
 8001abc:	2027      	movs	r0, #39	; 0x27
 8001abe:	f001 f915 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001ac2:	2027      	movs	r0, #39	; 0x27
 8001ac4:	f001 f92e 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ac8:	e05b      	b.n	8001b82 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART6)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a34      	ldr	r2, [pc, #208]	; (8001ba0 <HAL_UART_MspInit+0x1b8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d156      	bne.n	8001b82 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ad4:	4b2e      	ldr	r3, [pc, #184]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	4a2d      	ldr	r2, [pc, #180]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001ada:	f043 0320 	orr.w	r3, r3, #32
 8001ade:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 0320 	and.w	r3, r3, #32
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a27      	ldr	r2, [pc, #156]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b25      	ldr	r3, [pc, #148]	; (8001b90 <HAL_UART_MspInit+0x1a8>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	60fb      	str	r3, [r7, #12]
 8001b02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001b04:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b12:	2303      	movs	r3, #3
 8001b14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b16:	2308      	movs	r3, #8
 8001b18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4820      	ldr	r0, [pc, #128]	; (8001ba4 <HAL_UART_MspInit+0x1bc>)
 8001b22:	f002 fe0d 	bl	8004740 <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001b26:	4b20      	ldr	r3, [pc, #128]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b28:	4a20      	ldr	r2, [pc, #128]	; (8001bac <HAL_UART_MspInit+0x1c4>)
 8001b2a:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001b2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b2e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001b32:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b34:	4b1c      	ldr	r3, [pc, #112]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b36:	2240      	movs	r2, #64	; 0x40
 8001b38:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b40:	4b19      	ldr	r3, [pc, #100]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b46:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b48:	4b17      	ldr	r3, [pc, #92]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b60:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001b66:	4810      	ldr	r0, [pc, #64]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b68:	f001 f8ea 	bl	8002d40 <HAL_DMA_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001b72:	f7ff fb01 	bl	8001178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a0b      	ldr	r2, [pc, #44]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b7a:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b7c:	4a0a      	ldr	r2, [pc, #40]	; (8001ba8 <HAL_UART_MspInit+0x1c0>)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	; 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40004800 	.word	0x40004800
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	20004f20 	.word	0x20004f20
 8001b9c:	40026058 	.word	0x40026058
 8001ba0:	40011400 	.word	0x40011400
 8001ba4:	40021800 	.word	0x40021800
 8001ba8:	20004fcc 	.word	0x20004fcc
 8001bac:	400264a0 	.word	0x400264a0

08001bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	202c      	movs	r0, #44	; 0x2c
 8001bc6:	f001 f891 	bl	8002cec <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001bca:	202c      	movs	r0, #44	; 0x2c
 8001bcc:	f001 f8aa 	bl	8002d24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <HAL_InitTick+0xa0>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	4a1e      	ldr	r2, [pc, #120]	; (8001c50 <HAL_InitTick+0xa0>)
 8001bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bda:	6413      	str	r3, [r2, #64]	; 0x40
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <HAL_InitTick+0xa0>)
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001be8:	f107 0210 	add.w	r2, r7, #16
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4611      	mov	r1, r2
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fda2 	bl	800573c <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001bf8:	f003 fd78 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_InitTick+0xa4>)
 8001c06:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0a:	0c9b      	lsrs	r3, r3, #18
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c12:	4a12      	ldr	r2, [pc, #72]	; (8001c5c <HAL_InitTick+0xac>)
 8001c14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c1c:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c1e:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c22:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001c30:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c32:	f004 f9dd 	bl	8005ff0 <HAL_TIM_Base_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d104      	bne.n	8001c46 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001c3c:	4806      	ldr	r0, [pc, #24]	; (8001c58 <HAL_InitTick+0xa8>)
 8001c3e:	f004 fa39 	bl	80060b4 <HAL_TIM_Base_Start_IT>
 8001c42:	4603      	mov	r3, r0
 8001c44:	e000      	b.n	8001c48 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3730      	adds	r7, #48	; 0x30
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40023800 	.word	0x40023800
 8001c54:	431bde83 	.word	0x431bde83
 8001c58:	20006ed8 	.word	0x20006ed8
 8001c5c:	40001c00 	.word	0x40001c00

08001c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <NMI_Handler+0x4>

08001c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c6a:	e7fe      	b.n	8001c6a <HardFault_Handler+0x4>

08001c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c70:	e7fe      	b.n	8001c70 <MemManage_Handler+0x4>

08001c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c76:	e7fe      	b.n	8001c76 <BusFault_Handler+0x4>

08001c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c7c:	e7fe      	b.n	8001c7c <UsageFault_Handler+0x4>

08001c7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c82:	bf00      	nop
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Stream3_IRQHandler+0x10>)
 8001c92:	f001 f995 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20004f20 	.word	0x20004f20

08001ca0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <CAN1_TX_IRQHandler+0x10>)
 8001ca6:	f000 fd30 	bl	800270a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20005e44 	.word	0x20005e44

08001cb4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <CAN1_RX0_IRQHandler+0x10>)
 8001cba:	f000 fd26 	bl	800270a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20005e44 	.word	0x20005e44

08001cc8 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ccc:	4802      	ldr	r0, [pc, #8]	; (8001cd8 <CAN1_RX1_IRQHandler+0x10>)
 8001cce:	f000 fd1c 	bl	800270a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	20005e44 	.word	0x20005e44

08001cdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ce0:	4802      	ldr	r0, [pc, #8]	; (8001cec <USART3_IRQHandler+0x10>)
 8001ce2:	f005 fa45 	bl	8007170 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ce6:	bf00      	nop
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20004e4c 	.word	0x20004e4c

08001cf0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001cf4:	4802      	ldr	r0, [pc, #8]	; (8001d00 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001cf6:	f004 fb53 	bl	80063a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20006ed8 	.word	0x20006ed8

08001d04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d08:	4802      	ldr	r0, [pc, #8]	; (8001d14 <DMA2_Stream0_IRQHandler+0x10>)
 8001d0a:	f001 f959 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	20005074 	.word	0x20005074

08001d18 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d1c:	4802      	ldr	r0, [pc, #8]	; (8001d28 <ETH_IRQHandler+0x10>)
 8001d1e:	f001 ff6d 	bl	8003bfc <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000884c 	.word	0x2000884c

08001d2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001d30:	4802      	ldr	r0, [pc, #8]	; (8001d3c <DMA2_Stream6_IRQHandler+0x10>)
 8001d32:	f001 f945 	bl	8002fc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	20004fcc 	.word	0x20004fcc

08001d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
	return 1;
 8001d44:	2301      	movs	r3, #1
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr

08001d50 <_kill>:

int _kill(int pid, int sig)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <_kill+0x20>)
 8001d5c:	2216      	movs	r2, #22
 8001d5e:	601a      	str	r2, [r3, #0]
	return -1;
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	2000d7d8 	.word	0x2000d7d8

08001d74 <_exit>:

void _exit (int status)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ffe5 	bl	8001d50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d86:	e7fe      	b.n	8001d86 <_exit+0x12>

08001d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
	}

return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe fc71 	bl	80006c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
	}
	return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
	return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d205      	bcs.n	8001ea0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <_sbrk+0x6c>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9e:	e009      	b.n	8001eb4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <_sbrk+0x64>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4413      	add	r3, r2
 8001eae:	4a06      	ldr	r2, [pc, #24]	; (8001ec8 <_sbrk+0x64>)
 8001eb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	20080000 	.word	0x20080000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000908 	.word	0x20000908
 8001ecc:	2000d7f0 	.word	0x2000d7f0
 8001ed0:	2000d7d8 	.word	0x2000d7d8

08001ed4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <SystemInit+0x20>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a05      	ldr	r2, [pc, #20]	; (8001ef4 <SystemInit+0x20>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001efe:	490e      	ldr	r1, [pc, #56]	; (8001f38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f00:	4a0e      	ldr	r2, [pc, #56]	; (8001f3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f14:	4c0b      	ldr	r4, [pc, #44]	; (8001f44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f22:	f7ff ffd7 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f26:	f019 fa27 	bl	801b378 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f2a:	f7fe fbdf 	bl	80006ec <main>
  bx  lr    
 8001f2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001f34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f38:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001f3c:	08022158 	.word	0x08022158
  ldr r2, =_sbss
 8001f40:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001f44:	2000d7ec 	.word	0x2000d7ec

08001f48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>

08001f4a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4e:	2003      	movs	r0, #3
 8001f50:	f000 fec1 	bl	8002cd6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f54:	200f      	movs	r0, #15
 8001f56:	f7ff fe2b 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f5a:	f7ff facd 	bl	80014f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_IncTick+0x20>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x24>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	4a04      	ldr	r2, [pc, #16]	; (8001f88 <HAL_IncTick+0x24>)
 8001f76:	6013      	str	r3, [r2, #0]
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008
 8001f88:	20006f24 	.word	0x20006f24

08001f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <HAL_GetTick+0x14>)
 8001f92:	681b      	ldr	r3, [r3, #0]
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20006f24 	.word	0x20006f24

08001fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fac:	f7ff ffee 	bl	8001f8c <HAL_GetTick>
 8001fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fbc:	d005      	beq.n	8001fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fbe:	4b0a      	ldr	r3, [pc, #40]	; (8001fe8 <HAL_Delay+0x44>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4413      	add	r3, r2
 8001fc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffde 	bl	8001f8c <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	68bb      	ldr	r3, [r7, #8]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d8f7      	bhi.n	8001fcc <HAL_Delay+0x28>
  {
  }
}
 8001fdc:	bf00      	nop
 8001fde:	bf00      	nop
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	20000008 	.word	0x20000008

08001fec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e031      	b.n	8002066 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	2b00      	cmp	r3, #0
 8002008:	d109      	bne.n	800201e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff fa9c 	bl	8001548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2200      	movs	r2, #0
 800201a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d116      	bne.n	8002058 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800202e:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_ADC_Init+0x84>)
 8002030:	4013      	ands	r3, r2
 8002032:	f043 0202 	orr.w	r2, r3, #2
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f970 	bl	8002320 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
 8002056:	e001      	b.n	800205c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3710      	adds	r7, #16
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	ffffeefd 	.word	0xffffeefd

08002074 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1c>
 800208c:	2302      	movs	r3, #2
 800208e:	e136      	b.n	80022fe <HAL_ADC_ConfigChannel+0x28a>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b09      	cmp	r3, #9
 800209e:	d93a      	bls.n	8002116 <HAL_ADC_ConfigChannel+0xa2>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020a8:	d035      	beq.n	8002116 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68d9      	ldr	r1, [r3, #12]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	3b1e      	subs	r3, #30
 80020c0:	2207      	movs	r2, #7
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	400a      	ands	r2, r1
 80020ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a8d      	ldr	r2, [pc, #564]	; (800230c <HAL_ADC_ConfigChannel+0x298>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10a      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68d9      	ldr	r1, [r3, #12]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	061a      	lsls	r2, r3, #24
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ee:	e035      	b.n	800215c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68d9      	ldr	r1, [r3, #12]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	b29b      	uxth	r3, r3
 8002100:	4618      	mov	r0, r3
 8002102:	4603      	mov	r3, r0
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	4403      	add	r3, r0
 8002108:	3b1e      	subs	r3, #30
 800210a:	409a      	lsls	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002114:	e022      	b.n	800215c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6919      	ldr	r1, [r3, #16]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	461a      	mov	r2, r3
 8002124:	4613      	mov	r3, r2
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4413      	add	r3, r2
 800212a:	2207      	movs	r2, #7
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43da      	mvns	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	400a      	ands	r2, r1
 8002138:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	6919      	ldr	r1, [r3, #16]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	4603      	mov	r3, r0
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4403      	add	r3, r0
 8002152:	409a      	lsls	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b06      	cmp	r3, #6
 8002162:	d824      	bhi.n	80021ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	3b05      	subs	r3, #5
 8002176:	221f      	movs	r2, #31
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43da      	mvns	r2, r3
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	400a      	ands	r2, r1
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4618      	mov	r0, r3
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685a      	ldr	r2, [r3, #4]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	3b05      	subs	r3, #5
 80021a0:	fa00 f203 	lsl.w	r2, r0, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
 80021ac:	e04c      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	d824      	bhi.n	8002200 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685a      	ldr	r2, [r3, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4413      	add	r3, r2
 80021c6:	3b23      	subs	r3, #35	; 0x23
 80021c8:	221f      	movs	r2, #31
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	43da      	mvns	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	400a      	ands	r2, r1
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	4618      	mov	r0, r3
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b23      	subs	r3, #35	; 0x23
 80021f2:	fa00 f203 	lsl.w	r2, r0, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	631a      	str	r2, [r3, #48]	; 0x30
 80021fe:	e023      	b.n	8002248 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b41      	subs	r3, #65	; 0x41
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b41      	subs	r3, #65	; 0x41
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a30      	ldr	r2, [pc, #192]	; (8002310 <HAL_ADC_ConfigChannel+0x29c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10a      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1f4>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800225a:	d105      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	4a2c      	ldr	r2, [pc, #176]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 8002262:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002266:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	; (8002310 <HAL_ADC_ConfigChannel+0x29c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x21e>
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	2b12      	cmp	r3, #18
 8002278:	d10b      	bne.n	8002292 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4a25      	ldr	r2, [pc, #148]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 8002280:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002284:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	4a22      	ldr	r2, [pc, #136]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 800228c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002290:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_ADC_ConfigChannel+0x29c>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d12b      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x280>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	; (800230c <HAL_ADC_ConfigChannel+0x298>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d003      	beq.n	80022ae <HAL_ADC_ConfigChannel+0x23a>
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2b11      	cmp	r3, #17
 80022ac:	d122      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80022ae:	4b19      	ldr	r3, [pc, #100]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a18      	ldr	r2, [pc, #96]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022ba:	4b16      	ldr	r3, [pc, #88]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4a15      	ldr	r2, [pc, #84]	; (8002314 <HAL_ADC_ConfigChannel+0x2a0>)
 80022c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_ADC_ConfigChannel+0x298>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d111      	bne.n	80022f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022d0:	4b11      	ldr	r3, [pc, #68]	; (8002318 <HAL_ADC_ConfigChannel+0x2a4>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a11      	ldr	r2, [pc, #68]	; (800231c <HAL_ADC_ConfigChannel+0x2a8>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0c9a      	lsrs	r2, r3, #18
 80022dc:	4613      	mov	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	4413      	add	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022e6:	e002      	b.n	80022ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1f9      	bne.n	80022e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3714      	adds	r7, #20
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	10000012 	.word	0x10000012
 8002310:	40012000 	.word	0x40012000
 8002314:	40012300 	.word	0x40012300
 8002318:	20000000 	.word	0x20000000
 800231c:	431bde83 	.word	0x431bde83

08002320 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002328:	4b78      	ldr	r3, [pc, #480]	; (800250c <ADC_Init+0x1ec>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4a77      	ldr	r2, [pc, #476]	; (800250c <ADC_Init+0x1ec>)
 800232e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002332:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <ADC_Init+0x1ec>)
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	4973      	ldr	r1, [pc, #460]	; (800250c <ADC_Init+0x1ec>)
 800233e:	4313      	orrs	r3, r2
 8002340:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	685a      	ldr	r2, [r3, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6859      	ldr	r1, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	691b      	ldr	r3, [r3, #16]
 800235c:	021a      	lsls	r2, r3, #8
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002374:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	430a      	orrs	r2, r1
 8002386:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002396:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ae:	4a58      	ldr	r2, [pc, #352]	; (8002510 <ADC_Init+0x1f0>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d022      	beq.n	80023fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6899      	ldr	r1, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	6899      	ldr	r1, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
 80023f8:	e00f      	b.n	800241a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002408:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002418:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 0202 	bic.w	r2, r2, #2
 8002428:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	430a      	orrs	r2, r1
 800243c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d01b      	beq.n	8002480 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002456:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685a      	ldr	r2, [r3, #4]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002466:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	3b01      	subs	r3, #1
 8002474:	035a      	lsls	r2, r3, #13
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	e007      	b.n	8002490 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800248e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800249e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	051a      	lsls	r2, r3, #20
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d2:	025a      	lsls	r2, r3, #9
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689a      	ldr	r2, [r3, #8]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6899      	ldr	r1, [r3, #8]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	029a      	lsls	r2, r3, #10
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	40012300 	.word	0x40012300
 8002510:	0f000001 	.word	0x0f000001

08002514 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0ed      	b.n	8002702 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7ff f896 	bl	8001664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681a      	ldr	r2, [r3, #0]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 0201 	orr.w	r2, r2, #1
 8002546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002548:	f7ff fd20 	bl	8001f8c <HAL_GetTick>
 800254c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800254e:	e012      	b.n	8002576 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002550:	f7ff fd1c 	bl	8001f8c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b0a      	cmp	r3, #10
 800255c:	d90b      	bls.n	8002576 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2205      	movs	r2, #5
 800256e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e0c5      	b.n	8002702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0e5      	beq.n	8002550 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0202 	bic.w	r2, r2, #2
 8002592:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002594:	f7ff fcfa 	bl	8001f8c <HAL_GetTick>
 8002598:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800259a:	e012      	b.n	80025c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800259c:	f7ff fcf6 	bl	8001f8c <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b0a      	cmp	r3, #10
 80025a8:	d90b      	bls.n	80025c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2205      	movs	r2, #5
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e09f      	b.n	8002702 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1e5      	bne.n	800259c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	7e1b      	ldrb	r3, [r3, #24]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d108      	bne.n	80025ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	e007      	b.n	80025fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	7e5b      	ldrb	r3, [r3, #25]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d108      	bne.n	8002614 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	681a      	ldr	r2, [r3, #0]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	e007      	b.n	8002624 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002622:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7e9b      	ldrb	r3, [r3, #26]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d108      	bne.n	800263e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0220 	orr.w	r2, r2, #32
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e007      	b.n	800264e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0220 	bic.w	r2, r2, #32
 800264c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7edb      	ldrb	r3, [r3, #27]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d108      	bne.n	8002668 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f022 0210 	bic.w	r2, r2, #16
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	e007      	b.n	8002678 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f042 0210 	orr.w	r2, r2, #16
 8002676:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	7f1b      	ldrb	r3, [r3, #28]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d108      	bne.n	8002692 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0208 	orr.w	r2, r2, #8
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0208 	bic.w	r2, r2, #8
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	7f5b      	ldrb	r3, [r3, #29]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d108      	bne.n	80026bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f042 0204 	orr.w	r2, r2, #4
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	e007      	b.n	80026cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0204 	bic.w	r2, r2, #4
 80026ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	ea42 0103 	orr.w	r1, r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	1e5a      	subs	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b08a      	sub	sp, #40	; 0x28
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07c      	beq.n	800284a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b00      	cmp	r3, #0
 8002758:	d023      	beq.n	80027a2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2201      	movs	r2, #1
 8002760:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f000 f983 	bl	8002a78 <HAL_CAN_TxMailbox0CompleteCallback>
 8002772:	e016      	b.n	80027a2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b00      	cmp	r3, #0
 800277c:	d004      	beq.n	8002788 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
 8002786:	e00c      	b.n	80027a2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b00      	cmp	r3, #0
 8002790:	d004      	beq.n	800279c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002794:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002798:	627b      	str	r3, [r7, #36]	; 0x24
 800279a:	e002      	b.n	80027a2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 f989 	bl	8002ab4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d024      	beq.n	80027f6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027b4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 f963 	bl	8002a8c <HAL_CAN_TxMailbox1CompleteCallback>
 80027c6:	e016      	b.n	80027f6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d004      	beq.n	80027dc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027d8:	627b      	str	r3, [r7, #36]	; 0x24
 80027da:	e00c      	b.n	80027f6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
 80027ee:	e002      	b.n	80027f6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f969 	bl	8002ac8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027f6:	69bb      	ldr	r3, [r7, #24]
 80027f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d024      	beq.n	800284a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002808:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d003      	beq.n	800281c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f943 	bl	8002aa0 <HAL_CAN_TxMailbox2CompleteCallback>
 800281a:	e016      	b.n	800284a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d004      	beq.n	8002830 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002828:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800282c:	627b      	str	r3, [r7, #36]	; 0x24
 800282e:	e00c      	b.n	800284a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d004      	beq.n	8002844 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e002      	b.n	800284a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f949 	bl	8002adc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800284a:	6a3b      	ldr	r3, [r7, #32]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b00      	cmp	r3, #0
 8002852:	d00c      	beq.n	800286e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	2b00      	cmp	r3, #0
 800285c:	d007      	beq.n	800286e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002864:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2210      	movs	r2, #16
 800286c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00b      	beq.n	8002890 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d006      	beq.n	8002890 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2208      	movs	r2, #8
 8002888:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	f000 f93a 	bl	8002b04 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002890:	6a3b      	ldr	r3, [r7, #32]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0303 	and.w	r3, r3, #3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d002      	beq.n	80028ae <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f921 	bl	8002af0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00c      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	f003 0310 	and.w	r3, r3, #16
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2210      	movs	r2, #16
 80028d0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d006      	beq.n	80028f4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2208      	movs	r2, #8
 80028ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f91c 	bl	8002b2c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028f4:	6a3b      	ldr	r3, [r7, #32]
 80028f6:	f003 0310 	and.w	r3, r3, #16
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d009      	beq.n	8002912 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d002      	beq.n	8002912 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f903 	bl	8002b18 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00b      	beq.n	8002934 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	2b00      	cmp	r3, #0
 8002924:	d006      	beq.n	8002934 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2210      	movs	r2, #16
 800292c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f906 	bl	8002b40 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002934:	6a3b      	ldr	r3, [r7, #32]
 8002936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d006      	beq.n	8002956 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2208      	movs	r2, #8
 800294e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8ff 	bl	8002b54 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002956:	6a3b      	ldr	r3, [r7, #32]
 8002958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800295c:	2b00      	cmp	r3, #0
 800295e:	d07b      	beq.n	8002a58 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d072      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d008      	beq.n	8002986 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002986:	6a3b      	ldr	r3, [r7, #32]
 8002988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029a2:	6a3b      	ldr	r3, [r7, #32]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d043      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03e      	beq.n	8002a50 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029d8:	2b60      	cmp	r3, #96	; 0x60
 80029da:	d02b      	beq.n	8002a34 <HAL_CAN_IRQHandler+0x32a>
 80029dc:	2b60      	cmp	r3, #96	; 0x60
 80029de:	d82e      	bhi.n	8002a3e <HAL_CAN_IRQHandler+0x334>
 80029e0:	2b50      	cmp	r3, #80	; 0x50
 80029e2:	d022      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x320>
 80029e4:	2b50      	cmp	r3, #80	; 0x50
 80029e6:	d82a      	bhi.n	8002a3e <HAL_CAN_IRQHandler+0x334>
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d019      	beq.n	8002a20 <HAL_CAN_IRQHandler+0x316>
 80029ec:	2b40      	cmp	r3, #64	; 0x40
 80029ee:	d826      	bhi.n	8002a3e <HAL_CAN_IRQHandler+0x334>
 80029f0:	2b30      	cmp	r3, #48	; 0x30
 80029f2:	d010      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x30c>
 80029f4:	2b30      	cmp	r3, #48	; 0x30
 80029f6:	d822      	bhi.n	8002a3e <HAL_CAN_IRQHandler+0x334>
 80029f8:	2b10      	cmp	r3, #16
 80029fa:	d002      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x2f8>
 80029fc:	2b20      	cmp	r3, #32
 80029fe:	d005      	beq.n	8002a0c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a00:	e01d      	b.n	8002a3e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	f043 0308 	orr.w	r3, r3, #8
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a0a:	e019      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a0e:	f043 0310 	orr.w	r3, r3, #16
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a14:	e014      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f043 0320 	orr.w	r3, r3, #32
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a1e:	e00f      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a28:	e00a      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a30:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a32:	e005      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a3c:	e000      	b.n	8002a40 <HAL_CAN_IRQHandler+0x336>
            break;
 8002a3e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	699a      	ldr	r2, [r3, #24]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a4e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2204      	movs	r2, #4
 8002a56:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	431a      	orrs	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f000 f87c 	bl	8002b68 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a70:	bf00      	nop
 8002a72:	3728      	adds	r7, #40	; 0x28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b34:	bf00      	nop
 8002b36:	370c      	adds	r7, #12
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b085      	sub	sp, #20
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b92:	68ba      	ldr	r2, [r7, #8]
 8002b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b98:	4013      	ands	r3, r2
 8002b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002ba4:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	; (8002bbc <__NVIC_SetPriorityGrouping+0x40>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00
 8002bc0:	05fa0000 	.word	0x05fa0000

08002bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc8:	4b04      	ldr	r3, [pc, #16]	; (8002bdc <__NVIC_GetPriorityGrouping+0x18>)
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	0a1b      	lsrs	r3, r3, #8
 8002bce:	f003 0307 	and.w	r3, r3, #7
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000ed00 	.word	0xe000ed00

08002be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	db0b      	blt.n	8002c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf2:	79fb      	ldrb	r3, [r7, #7]
 8002bf4:	f003 021f 	and.w	r2, r3, #31
 8002bf8:	4907      	ldr	r1, [pc, #28]	; (8002c18 <__NVIC_EnableIRQ+0x38>)
 8002bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfe:	095b      	lsrs	r3, r3, #5
 8002c00:	2001      	movs	r0, #1
 8002c02:	fa00 f202 	lsl.w	r2, r0, r2
 8002c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	e000e100 	.word	0xe000e100

08002c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	4603      	mov	r3, r0
 8002c24:	6039      	str	r1, [r7, #0]
 8002c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	db0a      	blt.n	8002c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	490c      	ldr	r1, [pc, #48]	; (8002c68 <__NVIC_SetPriority+0x4c>)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	b2d2      	uxtb	r2, r2
 8002c3e:	440b      	add	r3, r1
 8002c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c44:	e00a      	b.n	8002c5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2da      	uxtb	r2, r3
 8002c4a:	4908      	ldr	r1, [pc, #32]	; (8002c6c <__NVIC_SetPriority+0x50>)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	3b04      	subs	r3, #4
 8002c54:	0112      	lsls	r2, r2, #4
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	440b      	add	r3, r1
 8002c5a:	761a      	strb	r2, [r3, #24]
}
 8002c5c:	bf00      	nop
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	e000e100 	.word	0xe000e100
 8002c6c:	e000ed00 	.word	0xe000ed00

08002c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b089      	sub	sp, #36	; 0x24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	f1c3 0307 	rsb	r3, r3, #7
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	bf28      	it	cs
 8002c8e:	2304      	movcs	r3, #4
 8002c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	3304      	adds	r3, #4
 8002c96:	2b06      	cmp	r3, #6
 8002c98:	d902      	bls.n	8002ca0 <NVIC_EncodePriority+0x30>
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3b03      	subs	r3, #3
 8002c9e:	e000      	b.n	8002ca2 <NVIC_EncodePriority+0x32>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43da      	mvns	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	401a      	ands	r2, r3
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc2:	43d9      	mvns	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc8:	4313      	orrs	r3, r2
         );
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3724      	adds	r7, #36	; 0x24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b082      	sub	sp, #8
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff ff4c 	bl	8002b7c <__NVIC_SetPriorityGrouping>
}
 8002ce4:	bf00      	nop
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cfe:	f7ff ff61 	bl	8002bc4 <__NVIC_GetPriorityGrouping>
 8002d02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	6978      	ldr	r0, [r7, #20]
 8002d0a:	f7ff ffb1 	bl	8002c70 <NVIC_EncodePriority>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d14:	4611      	mov	r1, r2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff80 	bl	8002c1c <__NVIC_SetPriority>
}
 8002d1c:	bf00      	nop
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ff54 	bl	8002be0 <__NVIC_EnableIRQ>
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b086      	sub	sp, #24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d4c:	f7ff f91e 	bl	8001f8c <HAL_GetTick>
 8002d50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e099      	b.n	8002e90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f022 0201 	bic.w	r2, r2, #1
 8002d7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d7c:	e00f      	b.n	8002d9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d7e:	f7ff f905 	bl	8001f8c <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b05      	cmp	r3, #5
 8002d8a:	d908      	bls.n	8002d9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2220      	movs	r2, #32
 8002d90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2203      	movs	r2, #3
 8002d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e078      	b.n	8002e90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1e8      	bne.n	8002d7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002db4:	697a      	ldr	r2, [r7, #20]
 8002db6:	4b38      	ldr	r3, [pc, #224]	; (8002e98 <HAL_DMA_Init+0x158>)
 8002db8:	4013      	ands	r3, r2
 8002dba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002de2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	2b04      	cmp	r3, #4
 8002df6:	d107      	bne.n	8002e08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	4313      	orrs	r3, r2
 8002e02:	697a      	ldr	r2, [r7, #20]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	f023 0307 	bic.w	r3, r3, #7
 8002e1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	697a      	ldr	r2, [r7, #20]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d117      	bne.n	8002e62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00e      	beq.n	8002e62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 fa7b 	bl	8003340 <DMA_CheckFifoParam>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e016      	b.n	8002e90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa32 	bl	80032d4 <DMA_CalcBaseAndBitshift>
 8002e70:	4603      	mov	r3, r0
 8002e72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	223f      	movs	r2, #63	; 0x3f
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3718      	adds	r7, #24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	e010803f 	.word	0xe010803f

08002e9c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002eaa:	f7ff f86f 	bl	8001f8c <HAL_GetTick>
 8002eae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d008      	beq.n	8002ece <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2280      	movs	r2, #128	; 0x80
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e052      	b.n	8002f74 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0216 	bic.w	r2, r2, #22
 8002edc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695a      	ldr	r2, [r3, #20]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d103      	bne.n	8002efe <HAL_DMA_Abort+0x62>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0208 	bic.w	r2, r2, #8
 8002f0c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0201 	bic.w	r2, r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f1e:	e013      	b.n	8002f48 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f20:	f7ff f834 	bl	8001f8c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d90c      	bls.n	8002f48 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2220      	movs	r2, #32
 8002f32:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2203      	movs	r2, #3
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e015      	b.n	8002f74 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e4      	bne.n	8002f20 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	223f      	movs	r2, #63	; 0x3f
 8002f5c:	409a      	lsls	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d004      	beq.n	8002f9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2280      	movs	r2, #128	; 0x80
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e00c      	b.n	8002fb4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2205      	movs	r2, #5
 8002f9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002fcc:	4b92      	ldr	r3, [pc, #584]	; (8003218 <HAL_DMA_IRQHandler+0x258>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a92      	ldr	r2, [pc, #584]	; (800321c <HAL_DMA_IRQHandler+0x25c>)
 8002fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd6:	0a9b      	lsrs	r3, r3, #10
 8002fd8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fde:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fea:	2208      	movs	r2, #8
 8002fec:	409a      	lsls	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d01a      	beq.n	800302c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b00      	cmp	r3, #0
 8003002:	d013      	beq.n	800302c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0204 	bic.w	r2, r2, #4
 8003012:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003018:	2208      	movs	r2, #8
 800301a:	409a      	lsls	r2, r3
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003024:	f043 0201 	orr.w	r2, r3, #1
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2201      	movs	r2, #1
 8003032:	409a      	lsls	r2, r3
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4013      	ands	r3, r2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304e:	2201      	movs	r2, #1
 8003050:	409a      	lsls	r2, r3
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f043 0202 	orr.w	r2, r3, #2
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2204      	movs	r2, #4
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d012      	beq.n	8003098 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00b      	beq.n	8003098 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	2204      	movs	r2, #4
 8003086:	409a      	lsls	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003090:	f043 0204 	orr.w	r2, r3, #4
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	2210      	movs	r2, #16
 800309e:	409a      	lsls	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	4013      	ands	r3, r2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d043      	beq.n	8003130 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0308 	and.w	r3, r3, #8
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d03c      	beq.n	8003130 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	2210      	movs	r2, #16
 80030bc:	409a      	lsls	r2, r3
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d018      	beq.n	8003102 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d108      	bne.n	80030f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d024      	beq.n	8003130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
 80030ee:	e01f      	b.n	8003130 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	4798      	blx	r3
 8003100:	e016      	b.n	8003130 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d107      	bne.n	8003120 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0208 	bic.w	r2, r2, #8
 800311e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003134:	2220      	movs	r2, #32
 8003136:	409a      	lsls	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	4013      	ands	r3, r2
 800313c:	2b00      	cmp	r3, #0
 800313e:	f000 808e 	beq.w	800325e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0310 	and.w	r3, r3, #16
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 8086 	beq.w	800325e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003156:	2220      	movs	r2, #32
 8003158:	409a      	lsls	r2, r3
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b05      	cmp	r3, #5
 8003168:	d136      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0216 	bic.w	r2, r2, #22
 8003178:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003188:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d103      	bne.n	800319a <HAL_DMA_IRQHandler+0x1da>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0208 	bic.w	r2, r2, #8
 80031a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	223f      	movs	r2, #63	; 0x3f
 80031b0:	409a      	lsls	r2, r3
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d07d      	beq.n	80032ca <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	4798      	blx	r3
        }
        return;
 80031d6:	e078      	b.n	80032ca <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d01c      	beq.n	8003220 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d108      	bne.n	8003206 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d030      	beq.n	800325e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	4798      	blx	r3
 8003204:	e02b      	b.n	800325e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800320a:	2b00      	cmp	r3, #0
 800320c:	d027      	beq.n	800325e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e022      	b.n	800325e <HAL_DMA_IRQHandler+0x29e>
 8003218:	20000000 	.word	0x20000000
 800321c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0210 	bic.w	r2, r2, #16
 800323c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003262:	2b00      	cmp	r3, #0
 8003264:	d032      	beq.n	80032cc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b00      	cmp	r3, #0
 8003270:	d022      	beq.n	80032b8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2205      	movs	r2, #5
 8003276:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0201 	bic.w	r2, r2, #1
 8003288:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	3301      	adds	r3, #1
 800328e:	60bb      	str	r3, [r7, #8]
 8003290:	697a      	ldr	r2, [r7, #20]
 8003292:	429a      	cmp	r2, r3
 8003294:	d307      	bcc.n	80032a6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f2      	bne.n	800328a <HAL_DMA_IRQHandler+0x2ca>
 80032a4:	e000      	b.n	80032a8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80032a6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	4798      	blx	r3
 80032c8:	e000      	b.n	80032cc <HAL_DMA_IRQHandler+0x30c>
        return;
 80032ca:	bf00      	nop
    }
  }
}
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop

080032d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	3b10      	subs	r3, #16
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <DMA_CalcBaseAndBitshift+0x60>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032ee:	4a12      	ldr	r2, [pc, #72]	; (8003338 <DMA_CalcBaseAndBitshift+0x64>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4413      	add	r3, r2
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	461a      	mov	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b03      	cmp	r3, #3
 8003300:	d908      	bls.n	8003314 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b0c      	ldr	r3, [pc, #48]	; (800333c <DMA_CalcBaseAndBitshift+0x68>)
 800330a:	4013      	ands	r3, r2
 800330c:	1d1a      	adds	r2, r3, #4
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58
 8003312:	e006      	b.n	8003322 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b08      	ldr	r3, [pc, #32]	; (800333c <DMA_CalcBaseAndBitshift+0x68>)
 800331c:	4013      	ands	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003326:	4618      	mov	r0, r3
 8003328:	3714      	adds	r7, #20
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr
 8003332:	bf00      	nop
 8003334:	aaaaaaab 	.word	0xaaaaaaab
 8003338:	08021b88 	.word	0x08021b88
 800333c:	fffffc00 	.word	0xfffffc00

08003340 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003350:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d11f      	bne.n	800339a <DMA_CheckFifoParam+0x5a>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d856      	bhi.n	800340e <DMA_CheckFifoParam+0xce>
 8003360:	a201      	add	r2, pc, #4	; (adr r2, 8003368 <DMA_CheckFifoParam+0x28>)
 8003362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003366:	bf00      	nop
 8003368:	08003379 	.word	0x08003379
 800336c:	0800338b 	.word	0x0800338b
 8003370:	08003379 	.word	0x08003379
 8003374:	0800340f 	.word	0x0800340f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d046      	beq.n	8003412 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e043      	b.n	8003412 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003392:	d140      	bne.n	8003416 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003398:	e03d      	b.n	8003416 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a2:	d121      	bne.n	80033e8 <DMA_CheckFifoParam+0xa8>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	d837      	bhi.n	800341a <DMA_CheckFifoParam+0xda>
 80033aa:	a201      	add	r2, pc, #4	; (adr r2, 80033b0 <DMA_CheckFifoParam+0x70>)
 80033ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b0:	080033c1 	.word	0x080033c1
 80033b4:	080033c7 	.word	0x080033c7
 80033b8:	080033c1 	.word	0x080033c1
 80033bc:	080033d9 	.word	0x080033d9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	73fb      	strb	r3, [r7, #15]
      break;
 80033c4:	e030      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d025      	beq.n	800341e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033d6:	e022      	b.n	800341e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e0:	d11f      	bne.n	8003422 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033e6:	e01c      	b.n	8003422 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d903      	bls.n	80033f6 <DMA_CheckFifoParam+0xb6>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b03      	cmp	r3, #3
 80033f2:	d003      	beq.n	80033fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033f4:	e018      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
      break;
 80033fa:	e015      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	73fb      	strb	r3, [r7, #15]
      break;
 800340c:	e00b      	b.n	8003426 <DMA_CheckFifoParam+0xe6>
      break;
 800340e:	bf00      	nop
 8003410:	e00a      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;
 8003412:	bf00      	nop
 8003414:	e008      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;
 8003416:	bf00      	nop
 8003418:	e006      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e004      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
 8003420:	e002      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;   
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <DMA_CheckFifoParam+0xe8>
      break;
 8003426:	bf00      	nop
    }
  } 
  
  return status; 
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3714      	adds	r7, #20
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop

08003438 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b088      	sub	sp, #32
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	2300      	movs	r3, #0
 8003446:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8003448:	4ba9      	ldr	r3, [pc, #676]	; (80036f0 <HAL_ETH_Init+0x2b8>)
 800344a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d101      	bne.n	800345e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e181      	b.n	8003762 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f004 ff98 	bl	80083a8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003478:	4b9e      	ldr	r3, [pc, #632]	; (80036f4 <HAL_ETH_Init+0x2bc>)
 800347a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347c:	4a9d      	ldr	r2, [pc, #628]	; (80036f4 <HAL_ETH_Init+0x2bc>)
 800347e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003482:	6453      	str	r3, [r2, #68]	; 0x44
 8003484:	4b9b      	ldr	r3, [pc, #620]	; (80036f4 <HAL_ETH_Init+0x2bc>)
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800348c:	60bb      	str	r3, [r7, #8]
 800348e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003490:	4b99      	ldr	r3, [pc, #612]	; (80036f8 <HAL_ETH_Init+0x2c0>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a98      	ldr	r2, [pc, #608]	; (80036f8 <HAL_ETH_Init+0x2c0>)
 8003496:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800349a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800349c:	4b96      	ldr	r3, [pc, #600]	; (80036f8 <HAL_ETH_Init+0x2c0>)
 800349e:	685a      	ldr	r2, [r3, #4]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	4994      	ldr	r1, [pc, #592]	; (80036f8 <HAL_ETH_Init+0x2c0>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80034c2:	f7fe fd63 	bl	8001f8c <HAL_GetTick>
 80034c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80034c8:	e011      	b.n	80034ee <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80034ca:	f7fe fd5f 	bl	8001f8c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80034d8:	d909      	bls.n	80034ee <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2203      	movs	r2, #3
 80034de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e139      	b.n	8003762 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e4      	bne.n	80034ca <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	f023 031c 	bic.w	r3, r3, #28
 800350e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003510:	f002 f8e0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 8003514:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4a78      	ldr	r2, [pc, #480]	; (80036fc <HAL_ETH_Init+0x2c4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d908      	bls.n	8003530 <HAL_ETH_Init+0xf8>
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	4a77      	ldr	r2, [pc, #476]	; (8003700 <HAL_ETH_Init+0x2c8>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d804      	bhi.n	8003530 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f043 0308 	orr.w	r3, r3, #8
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e027      	b.n	8003580 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	4a73      	ldr	r2, [pc, #460]	; (8003700 <HAL_ETH_Init+0x2c8>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d908      	bls.n	800354a <HAL_ETH_Init+0x112>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4a6d      	ldr	r2, [pc, #436]	; (80036f0 <HAL_ETH_Init+0x2b8>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d204      	bcs.n	800354a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f043 030c 	orr.w	r3, r3, #12
 8003546:	61fb      	str	r3, [r7, #28]
 8003548:	e01a      	b.n	8003580 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	4a68      	ldr	r2, [pc, #416]	; (80036f0 <HAL_ETH_Init+0x2b8>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d303      	bcc.n	800355a <HAL_ETH_Init+0x122>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	4a6b      	ldr	r2, [pc, #428]	; (8003704 <HAL_ETH_Init+0x2cc>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d911      	bls.n	800357e <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	4a69      	ldr	r2, [pc, #420]	; (8003704 <HAL_ETH_Init+0x2cc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d908      	bls.n	8003574 <HAL_ETH_Init+0x13c>
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	4a68      	ldr	r2, [pc, #416]	; (8003708 <HAL_ETH_Init+0x2d0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d804      	bhi.n	8003574 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	f043 0304 	orr.w	r3, r3, #4
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	e005      	b.n	8003580 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	f043 0310 	orr.w	r3, r3, #16
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	e000      	b.n	8003580 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800357e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	69fa      	ldr	r2, [r7, #28]
 8003586:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003588:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800358c:	2100      	movs	r1, #0
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 fc17 	bl	8003dc2 <HAL_ETH_WritePHYRegister>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00b      	beq.n	80035b2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800359e:	6939      	ldr	r1, [r7, #16]
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fdcd 	bl	8004140 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e0d7      	b.n	8003762 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80035b2:	20ff      	movs	r0, #255	; 0xff
 80035b4:	f7fe fcf6 	bl	8001fa4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a5 	beq.w	800370c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80035c2:	f7fe fce3 	bl	8001f8c <HAL_GetTick>
 80035c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	461a      	mov	r2, r3
 80035ce:	2101      	movs	r1, #1
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 fb8e 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80035d6:	f7fe fcd9 	bl	8001f8c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d90f      	bls.n	8003608 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80035ec:	6939      	ldr	r1, [r7, #16]
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 fda6 	bl	8004140 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e0ac      	b.n	8003762 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0da      	beq.n	80035c8 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8003612:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003616:	2100      	movs	r1, #0
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f000 fbd2 	bl	8003dc2 <HAL_ETH_WritePHYRegister>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00b      	beq.n	800363c <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003628:	6939      	ldr	r1, [r7, #16]
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fd88 	bl	8004140 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003638:	2301      	movs	r3, #1
 800363a:	e092      	b.n	8003762 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800363c:	f7fe fca6 	bl	8001f8c <HAL_GetTick>
 8003640:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003642:	f107 030c 	add.w	r3, r7, #12
 8003646:	461a      	mov	r2, r3
 8003648:	2101      	movs	r1, #1
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 fb51 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8003650:	f7fe fc9c 	bl	8001f8c <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d90f      	bls.n	8003682 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003666:	6939      	ldr	r1, [r7, #16]
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 fd69 	bl	8004140 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e06f      	b.n	8003762 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0da      	beq.n	8003642 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	461a      	mov	r2, r3
 8003692:	2110      	movs	r1, #16
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fb2c 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80036a4:	6939      	ldr	r1, [r7, #16]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fd4a 	bl	8004140 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80036b4:	2301      	movs	r3, #1
 80036b6:	e054      	b.n	8003762 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0304 	and.w	r3, r3, #4
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d004      	beq.n	80036cc <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036c8:	60da      	str	r2, [r3, #12]
 80036ca:	e002      	b.n	80036d2 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	e035      	b.n	8003750 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80036ea:	609a      	str	r2, [r3, #8]
 80036ec:	e030      	b.n	8003750 <HAL_ETH_Init+0x318>
 80036ee:	bf00      	nop
 80036f0:	03938700 	.word	0x03938700
 80036f4:	40023800 	.word	0x40023800
 80036f8:	40013800 	.word	0x40013800
 80036fc:	01312cff 	.word	0x01312cff
 8003700:	02160ebf 	.word	0x02160ebf
 8003704:	05f5e0ff 	.word	0x05f5e0ff
 8003708:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	085b      	lsrs	r3, r3, #1
 800371a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800371c:	4313      	orrs	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	2100      	movs	r1, #0
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fb4c 	bl	8003dc2 <HAL_ETH_WritePHYRegister>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00b      	beq.n	8003748 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003734:	6939      	ldr	r1, [r7, #16]
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fd02 	bl	8004140 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e00c      	b.n	8003762 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8003748:	f640 70ff 	movw	r0, #4095	; 0xfff
 800374c:	f7fe fc2a 	bl	8001fa4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8003750:	6939      	ldr	r1, [r7, #16]
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 fcf4 	bl	8004140 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop

0800376c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800376c:	b480      	push	{r7}
 800376e:	b087      	sub	sp, #28
 8003770:	af00      	add	r7, sp, #0
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	60b9      	str	r1, [r7, #8]
 8003776:	607a      	str	r2, [r7, #4]
 8003778:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_ETH_DMATxDescListInit+0x20>
 8003788:	2302      	movs	r3, #2
 800378a:	e052      	b.n	8003832 <HAL_ETH_DMATxDescListInit+0xc6>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	e030      	b.n	800380a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	015b      	lsls	r3, r3, #5
 80037ac:	68ba      	ldr	r2, [r7, #8]
 80037ae:	4413      	add	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037b8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80037c0:	fb02 f303 	mul.w	r3, r2, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4413      	add	r3, r2
 80037c8:	461a      	mov	r2, r3
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	69db      	ldr	r3, [r3, #28]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d105      	bne.n	80037e2 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	3b01      	subs	r3, #1
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d208      	bcs.n	80037fe <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	3301      	adds	r3, #1
 80037f0:	015b      	lsls	r3, r3, #5
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	4413      	add	r3, r2
 80037f6:	461a      	mov	r2, r3
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	60da      	str	r2, [r3, #12]
 80037fc:	e002      	b.n	8003804 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d3ca      	bcc.n	80037a8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6819      	ldr	r1, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	f241 0310 	movw	r3, #4112	; 0x1010
 800381c:	440b      	add	r3, r1
 800381e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	371c      	adds	r7, #28
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr

0800383e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800383e:	b480      	push	{r7}
 8003840:	b087      	sub	sp, #28
 8003842:	af00      	add	r7, sp, #0
 8003844:	60f8      	str	r0, [r7, #12]
 8003846:	60b9      	str	r1, [r7, #8]
 8003848:	607a      	str	r2, [r7, #4]
 800384a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003856:	2b01      	cmp	r3, #1
 8003858:	d101      	bne.n	800385e <HAL_ETH_DMARxDescListInit+0x20>
 800385a:	2302      	movs	r3, #2
 800385c:	e056      	b.n	800390c <HAL_ETH_DMARxDescListInit+0xce>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2201      	movs	r2, #1
 8003862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68ba      	ldr	r2, [r7, #8]
 8003872:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	e034      	b.n	80038e4 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	015b      	lsls	r3, r3, #5
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	4413      	add	r3, r2
 8003882:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800388a:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8003892:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	461a      	mov	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d105      	bne.n	80038bc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	3b01      	subs	r3, #1
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d208      	bcs.n	80038d8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3301      	adds	r3, #1
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	68ba      	ldr	r2, [r7, #8]
 80038ce:	4413      	add	r3, r2
 80038d0:	461a      	mov	r2, r3
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e002      	b.n	80038de <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	3301      	adds	r3, #1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d3c6      	bcc.n	800387a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6819      	ldr	r1, [r3, #0]
 80038f0:	68ba      	ldr	r2, [r7, #8]
 80038f2:	f241 030c 	movw	r3, #4108	; 0x100c
 80038f6:	440b      	add	r3, r1
 80038f8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	371c      	adds	r7, #28
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8003922:	2300      	movs	r3, #0
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	2300      	movs	r3, #0
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	2300      	movs	r3, #0
 800392c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_ETH_TransmitFrame+0x24>
 8003938:	2302      	movs	r3, #2
 800393a:	e0cd      	b.n	8003ad8 <HAL_ETH_TransmitFrame+0x1c0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d109      	bne.n	8003966 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8003962:	2301      	movs	r3, #1
 8003964:	e0b8      	b.n	8003ad8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da09      	bge.n	8003984 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2212      	movs	r2, #18
 8003974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e0a9      	b.n	8003ad8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800398a:	4293      	cmp	r3, r2
 800398c:	d915      	bls.n	80039ba <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	4a54      	ldr	r2, [pc, #336]	; (8003ae4 <HAL_ETH_TransmitFrame+0x1cc>)
 8003992:	fba2 2303 	umull	r2, r3, r2, r3
 8003996:	0a9b      	lsrs	r3, r3, #10
 8003998:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	4b51      	ldr	r3, [pc, #324]	; (8003ae4 <HAL_ETH_TransmitFrame+0x1cc>)
 800399e:	fba3 1302 	umull	r1, r3, r3, r2
 80039a2:	0a9b      	lsrs	r3, r3, #10
 80039a4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80039a8:	fb01 f303 	mul.w	r3, r1, r3
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d005      	beq.n	80039be <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	3301      	adds	r3, #1
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	e001      	b.n	80039be <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 80039ba:	2301      	movs	r3, #1
 80039bc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d11c      	bne.n	80039fe <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ce:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80039d2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	683a      	ldr	r2, [r7, #0]
 80039da:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80039de:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80039ee:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f4:	68db      	ldr	r3, [r3, #12]
 80039f6:	461a      	mov	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80039fc:	e04b      	b.n	8003a96 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
 8003a02:	e044      	b.n	8003a8e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a12:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d107      	bne.n	8003a2a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003a28:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a32:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d116      	bne.n	8003a6c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003a4c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	4a25      	ldr	r2, [pc, #148]	; (8003ae8 <HAL_ETH_TransmitFrame+0x1d0>)
 8003a52:	fb02 f203 	mul.w	r2, r2, r3
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003a5e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003a6a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a7a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	461a      	mov	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d3b6      	bcc.n	8003a04 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003a9e:	4413      	add	r3, r2
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 0304 	and.w	r3, r3, #4
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00d      	beq.n	8003ac6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ab2:	4413      	add	r3, r2
 8003ab4:	2204      	movs	r2, #4
 8003ab6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	f241 0304 	movw	r3, #4100	; 0x1004
 8003ac0:	4413      	add	r3, r2
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	371c      	adds	r7, #28
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	ac02b00b 	.word	0xac02b00b
 8003ae8:	fffffa0c 	.word	0xfffffa0c

08003aec <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e074      	b.n	8003bf0 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2202      	movs	r2, #2
 8003b12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003b16:	e05a      	b.n	8003bce <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b2c:	d10d      	bne.n	8003b4a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	461a      	mov	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	629a      	str	r2, [r3, #40]	; 0x28
 8003b48:	e041      	b.n	8003bce <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10b      	bne.n	8003b70 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	629a      	str	r2, [r3, #40]	; 0x28
 8003b6e:	e02e      	b.n	8003bce <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d103      	bne.n	8003b92 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	0c1b      	lsrs	r3, r3, #16
 8003b9a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003b9e:	1f1a      	subs	r2, r3, #4
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e010      	b.n	8003bf0 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db02      	blt.n	8003bde <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d99c      	bls.n	8003b18 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3714      	adds	r7, #20
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c0c:	4413      	add	r3, r2
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b40      	cmp	r3, #64	; 0x40
 8003c16:	d112      	bne.n	8003c3e <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f004 fc85 	bl	8008528 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c26:	4413      	add	r3, r2
 8003c28:	2240      	movs	r2, #64	; 0x40
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c3c:	e01b      	b.n	8003c76 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c46:	4413      	add	r3, r2
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d111      	bne.n	8003c76 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f839 	bl	8003cca <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c60:	4413      	add	r3, r2
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c7e:	4413      	add	r3, r2
 8003c80:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003c84:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c8e:	4413      	add	r3, r2
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c9a:	d112      	bne.n	8003cc2 <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f81e 	bl	8003cde <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	f241 0314 	movw	r3, #4116	; 0x1014
 8003caa:	4413      	add	r3, r2
 8003cac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003cb0:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003cc2:	bf00      	nop
 8003cc4:	3708      	adds	r7, #8
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b083      	sub	sp, #12
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003ce6:	bf00      	nop
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003cf2:	b580      	push	{r7, lr}
 8003cf4:	b086      	sub	sp, #24
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	60f8      	str	r0, [r7, #12]
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	607a      	str	r2, [r7, #4]
 8003cfe:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003d04:	2300      	movs	r3, #0
 8003d06:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b82      	cmp	r3, #130	; 0x82
 8003d12:	d101      	bne.n	8003d18 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003d14:	2302      	movs	r3, #2
 8003d16:	e050      	b.n	8003dba <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2282      	movs	r2, #130	; 0x82
 8003d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	f003 031c 	and.w	r3, r3, #28
 8003d2e:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8a1b      	ldrh	r3, [r3, #16]
 8003d34:	02db      	lsls	r3, r3, #11
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	019b      	lsls	r3, r3, #6
 8003d42:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	f023 0302 	bic.w	r3, r3, #2
 8003d52:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f043 0301 	orr.w	r3, r3, #1
 8003d5a:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003d64:	f7fe f912 	bl	8001f8c <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d6a:	e015      	b.n	8003d98 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003d6c:	f7fe f90e 	bl	8001f8c <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7a:	d309      	bcc.n	8003d90 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e014      	b.n	8003dba <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e4      	bne.n	8003d6c <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003db8:	2300      	movs	r3, #0
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b086      	sub	sp, #24
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	607a      	str	r2, [r7, #4]
 8003dce:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b42      	cmp	r3, #66	; 0x42
 8003de2:	d101      	bne.n	8003de8 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003de4:	2302      	movs	r3, #2
 8003de6:	e04e      	b.n	8003e86 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2242      	movs	r2, #66	; 0x42
 8003dec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	f003 031c 	and.w	r3, r3, #28
 8003dfe:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	8a1b      	ldrh	r3, [r3, #16]
 8003e04:	02db      	lsls	r3, r3, #11
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	697a      	ldr	r2, [r7, #20]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003e0e:	897b      	ldrh	r3, [r7, #10]
 8003e10:	019b      	lsls	r3, r3, #6
 8003e12:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e16:	697a      	ldr	r2, [r7, #20]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	f043 0302 	orr.w	r3, r3, #2
 8003e22:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f043 0301 	orr.w	r3, r3, #1
 8003e2a:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003e3e:	f7fe f8a5 	bl	8001f8c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e44:	e015      	b.n	8003e72 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003e46:	f7fe f8a1 	bl	8001f8c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e54:	d309      	bcc.n	8003e6a <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e00d      	b.n	8003e86 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	691b      	ldr	r3, [r3, #16]
 8003e70:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0301 	and.w	r3, r3, #1
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e4      	bne.n	8003e46 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d101      	bne.n	8003ea4 <HAL_ETH_Start+0x16>
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	e01f      	b.n	8003ee4 <HAL_ETH_Start+0x56>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 fb45 	bl	8004544 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fb7c 	bl	80045b8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fc13 	bl	80046ec <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fbb0 	bl	800462c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fbdd 	bl	800468c <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_ETH_Stop+0x16>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e01f      	b.n	8003f42 <HAL_ETH_Stop+0x56>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f000 fba2 	bl	800465c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f000 fbcf 	bl	80046bc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fb67 	bl	80045f2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fbe1 	bl	80046ec <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fb27 	bl	800457e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3708      	adds	r7, #8
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_ETH_ConfigMAC+0x1c>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0e4      	b.n	8004132 <HAL_ETH_ConfigMAC+0x1e6>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f000 80b1 	beq.w	80040e2 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	4b6c      	ldr	r3, [pc, #432]	; (800413c <HAL_ETH_ConfigMAC+0x1f0>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003f98:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003f9e:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8003fa4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003faa:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003fb0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8003fb6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003fbc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8003fc2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003fc8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003fce:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8003fd4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003fda:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ff2:	2001      	movs	r0, #1
 8003ff4:	f7fd ffd6 	bl	8001fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004008:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800400e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004014:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800401a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8004020:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8004026:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8004032:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004034:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800403e:	2001      	movs	r0, #1
 8004040:	f7fd ffb0 	bl	8001fa4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68fa      	ldr	r2, [r7, #12]
 800404a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004054:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800405e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800406e:	4013      	ands	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004076:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800407c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8004082:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004088:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800408e:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004094:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	4313      	orrs	r3, r2
 800409a:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7fd ff79 	bl	8001fa4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80040d2:	2001      	movs	r0, #1
 80040d4:	f7fd ff66 	bl	8001fa4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	61da      	str	r2, [r3, #28]
 80040e0:	e01e      	b.n	8004120 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80040f0:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004112:	2001      	movs	r0, #1
 8004114:	f7fd ff46 	bl	8001fa4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2201      	movs	r2, #1
 8004124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3710      	adds	r7, #16
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	ff20810f 	.word	0xff20810f

08004140 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b0b0      	sub	sp, #192	; 0xc0
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800414a:	2300      	movs	r3, #0
 800414c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800415c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004164:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8004166:	2300      	movs	r3, #0
 8004168:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800416a:	2300      	movs	r3, #0
 800416c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800416e:	2300      	movs	r3, #0
 8004170:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8004172:	2300      	movs	r3, #0
 8004174:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8004176:	2300      	movs	r3, #0
 8004178:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800417a:	2300      	movs	r3, #0
 800417c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d103      	bne.n	800418e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800418a:	663b      	str	r3, [r7, #96]	; 0x60
 800418c:	e001      	b.n	8004192 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8004192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004196:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004198:	2300      	movs	r3, #0
 800419a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800419c:	2300      	movs	r3, #0
 800419e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80041a0:	2300      	movs	r3, #0
 80041a2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80041ac:	2340      	movs	r3, #64	; 0x40
 80041ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80041b0:	2300      	movs	r3, #0
 80041b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80041b6:	2300      	movs	r3, #0
 80041b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80041bc:	2300      	movs	r3, #0
 80041be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80041c2:	2300      	movs	r3, #0
 80041c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80041ce:	2300      	movs	r3, #0
 80041d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80041fe:	2300      	movs	r3, #0
 8004200:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004204:	2300      	movs	r3, #0
 8004206:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004214:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004218:	4bab      	ldr	r3, [pc, #684]	; (80044c8 <ETH_MACDMAConfig+0x388>)
 800421a:	4013      	ands	r3, r2
 800421c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004220:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8004222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004224:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8004226:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8004228:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800422a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 800422c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8004232:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8004234:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8004236:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8004238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800423a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8004240:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8004242:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8004244:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8004246:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8004248:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800424a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 800424c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800424e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8004250:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8004252:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8004254:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8004256:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004268:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004274:	2001      	movs	r0, #1
 8004276:	f7fd fe95 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004282:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004284:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004286:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004288:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 800428a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 800428c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800428e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8004292:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004294:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004298:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 800429a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800429e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80042a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80042a4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80042a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80042b0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80042b2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80042be:	2001      	movs	r0, #1
 80042c0:	f7fd fe70 	bl	8001fa4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042cc:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042d6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80042e0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80042ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042f0:	f64f 7341 	movw	r3, #65345	; 0xff41
 80042f4:	4013      	ands	r3, r2
 80042f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80042fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80042fe:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8004300:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004304:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800430a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800430c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8004310:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8004312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004316:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004318:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800431c:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800431e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004330:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800433c:	2001      	movs	r0, #1
 800433e:	f7fd fe31 	bl	8001fa4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800434a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800434c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8004350:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004366:	2001      	movs	r0, #1
 8004368:	f7fd fe1c 	bl	8001fa4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004374:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800437a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8004380:	2300      	movs	r3, #0
 8004382:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004384:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004388:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8004392:	2300      	movs	r3, #0
 8004394:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004396:	2300      	movs	r3, #0
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800439a:	2304      	movs	r3, #4
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800439e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80043a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043a8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80043aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80043b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043b4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80043ba:	2300      	movs	r3, #0
 80043bc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80043be:	2300      	movs	r3, #0
 80043c0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	f241 0318 	movw	r3, #4120	; 0x1018
 80043ca:	4413      	add	r3, r2
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80043d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043d6:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <ETH_MACDMAConfig+0x38c>)
 80043d8:	4013      	ands	r3, r2
 80043da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80043de:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80043e0:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80043e2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80043e4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80043e6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80043e8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80043ea:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80043ec:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80043ee:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80043f0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80043f2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80043f4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80043f6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80043f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80043fa:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80043fe:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8004400:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004412:	4413      	add	r3, r2
 8004414:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004418:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004422:	4413      	add	r3, r2
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800442a:	2001      	movs	r0, #1
 800442c:	f7fd fdba 	bl	8001fa4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	f241 0318 	movw	r3, #4120	; 0x1018
 8004438:	4413      	add	r3, r2
 800443a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800443e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8004444:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8004448:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800444a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800444c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800444e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8004450:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 8004452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004454:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8004456:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8004458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 800445a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004468:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004478:	2001      	movs	r0, #1
 800447a:	f7fd fd93 	bl	8001fa4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800448a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d10d      	bne.n	80044b0 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	f241 031c 	movw	r3, #4124	; 0x101c
 800449c:	4413      	add	r3, r2
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6811      	ldr	r1, [r2, #0]
 80044a4:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <ETH_MACDMAConfig+0x390>)
 80044a6:	431a      	orrs	r2, r3
 80044a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80044ac:	440b      	add	r3, r1
 80044ae:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	695b      	ldr	r3, [r3, #20]
 80044b4:	461a      	mov	r2, r3
 80044b6:	2100      	movs	r1, #0
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f80b 	bl	80044d4 <ETH_MACAddressConfig>
}
 80044be:	bf00      	nop
 80044c0:	37c0      	adds	r7, #192	; 0xc0
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	ff20810f 	.word	0xff20810f
 80044cc:	f8de3f23 	.word	0xf8de3f23
 80044d0:	00010040 	.word	0x00010040

080044d4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	3305      	adds	r3, #5
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	021b      	lsls	r3, r3, #8
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	3204      	adds	r2, #4
 80044ec:	7812      	ldrb	r2, [r2, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4b11      	ldr	r3, [pc, #68]	; (800453c <ETH_MACAddressConfig+0x68>)
 80044f6:	4413      	add	r3, r2
 80044f8:	461a      	mov	r2, r3
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	3303      	adds	r3, #3
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	061a      	lsls	r2, r3, #24
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	3302      	adds	r3, #2
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	041b      	lsls	r3, r3, #16
 800450e:	431a      	orrs	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	3301      	adds	r3, #1
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	4313      	orrs	r3, r2
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	4313      	orrs	r3, r2
 8004520:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	4b06      	ldr	r3, [pc, #24]	; (8004540 <ETH_MACAddressConfig+0x6c>)
 8004526:	4413      	add	r3, r2
 8004528:	461a      	mov	r2, r3
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	6013      	str	r3, [r2, #0]
}
 800452e:	bf00      	nop
 8004530:	371c      	adds	r7, #28
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40028040 	.word	0x40028040
 8004540:	40028044 	.word	0x40028044

08004544 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800454c:	2300      	movs	r3, #0
 800454e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0208 	orr.w	r2, r2, #8
 800455e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004568:	2001      	movs	r0, #1
 800456a:	f7fd fd1b 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]
}
 8004576:	bf00      	nop
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0208 	bic.w	r2, r2, #8
 8004598:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045a2:	2001      	movs	r0, #1
 80045a4:	f7fd fcfe 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	601a      	str	r2, [r3, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f042 0204 	orr.w	r2, r2, #4
 80045d2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045dc:	2001      	movs	r0, #1
 80045de:	f7fd fce1 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3710      	adds	r7, #16
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80045fa:	2300      	movs	r3, #0
 80045fc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f022 0204 	bic.w	r2, r2, #4
 800460c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004616:	2001      	movs	r0, #1
 8004618:	f7fd fcc4 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	3710      	adds	r7, #16
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800462c:	b480      	push	{r7}
 800462e:	b083      	sub	sp, #12
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	f241 0318 	movw	r3, #4120	; 0x1018
 800463c:	4413      	add	r3, r2
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	6811      	ldr	r1, [r2, #0]
 8004644:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004648:	f241 0318 	movw	r3, #4120	; 0x1018
 800464c:	440b      	add	r3, r1
 800464e:	601a      	str	r2, [r3, #0]
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	f241 0318 	movw	r3, #4120	; 0x1018
 800466c:	4413      	add	r3, r2
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	6811      	ldr	r1, [r2, #0]
 8004674:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004678:	f241 0318 	movw	r3, #4120	; 0x1018
 800467c:	440b      	add	r3, r1
 800467e:	601a      	str	r2, [r3, #0]
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f241 0318 	movw	r3, #4120	; 0x1018
 800469c:	4413      	add	r3, r2
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	6811      	ldr	r1, [r2, #0]
 80046a4:	f043 0202 	orr.w	r2, r3, #2
 80046a8:	f241 0318 	movw	r3, #4120	; 0x1018
 80046ac:	440b      	add	r3, r1
 80046ae:	601a      	str	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	f241 0318 	movw	r3, #4120	; 0x1018
 80046cc:	4413      	add	r3, r2
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6811      	ldr	r1, [r2, #0]
 80046d4:	f023 0202 	bic.w	r2, r3, #2
 80046d8:	f241 0318 	movw	r3, #4120	; 0x1018
 80046dc:	440b      	add	r3, r1
 80046de:	601a      	str	r2, [r3, #0]
}
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	f241 0318 	movw	r3, #4120	; 0x1018
 8004700:	4413      	add	r3, r2
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6811      	ldr	r1, [r2, #0]
 8004708:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800470c:	f241 0318 	movw	r3, #4120	; 0x1018
 8004710:	440b      	add	r3, r1
 8004712:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	f241 0318 	movw	r3, #4120	; 0x1018
 800471c:	4413      	add	r3, r2
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004722:	2001      	movs	r0, #1
 8004724:	f7fd fc3e 	bl	8001fa4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6819      	ldr	r1, [r3, #0]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	f241 0318 	movw	r3, #4120	; 0x1018
 8004732:	440b      	add	r3, r1
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
	...

08004740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004740:	b480      	push	{r7}
 8004742:	b089      	sub	sp, #36	; 0x24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800474a:	2300      	movs	r3, #0
 800474c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800474e:	2300      	movs	r3, #0
 8004750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004756:	2300      	movs	r3, #0
 8004758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
 800475e:	e175      	b.n	8004a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004760:	2201      	movs	r2, #1
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	4013      	ands	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	429a      	cmp	r2, r3
 800477a:	f040 8164 	bne.w	8004a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	2b01      	cmp	r3, #1
 8004788:	d005      	beq.n	8004796 <HAL_GPIO_Init+0x56>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d130      	bne.n	80047f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	005b      	lsls	r3, r3, #1
 80047a0:	2203      	movs	r2, #3
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	43db      	mvns	r3, r3
 80047a8:	69ba      	ldr	r2, [r7, #24]
 80047aa:	4013      	ands	r3, r2
 80047ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ba:	69ba      	ldr	r2, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047cc:	2201      	movs	r2, #1
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	091b      	lsrs	r3, r3, #4
 80047e2:	f003 0201 	and.w	r2, r3, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69ba      	ldr	r2, [r7, #24]
 80047f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0303 	and.w	r3, r3, #3
 8004800:	2b03      	cmp	r3, #3
 8004802:	d017      	beq.n	8004834 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	2203      	movs	r2, #3
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	43db      	mvns	r3, r3
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	4013      	ands	r3, r2
 800481a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	005b      	lsls	r3, r3, #1
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d123      	bne.n	8004888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	08da      	lsrs	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3208      	adds	r2, #8
 8004848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800484c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	220f      	movs	r2, #15
 8004858:	fa02 f303 	lsl.w	r3, r2, r3
 800485c:	43db      	mvns	r3, r3
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	4013      	ands	r3, r2
 8004862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	691a      	ldr	r2, [r3, #16]
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	f003 0307 	and.w	r3, r3, #7
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	08da      	lsrs	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3208      	adds	r2, #8
 8004882:	69b9      	ldr	r1, [r7, #24]
 8004884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	005b      	lsls	r3, r3, #1
 8004892:	2203      	movs	r2, #3
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	69ba      	ldr	r2, [r7, #24]
 80048ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 80be 	beq.w	8004a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_GPIO_Init+0x324>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_GPIO_Init+0x324>)
 80048d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048d4:	6453      	str	r3, [r2, #68]	; 0x44
 80048d6:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <HAL_GPIO_Init+0x324>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80048e2:	4a61      	ldr	r2, [pc, #388]	; (8004a68 <HAL_GPIO_Init+0x328>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a58      	ldr	r2, [pc, #352]	; (8004a6c <HAL_GPIO_Init+0x32c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d037      	beq.n	800497e <HAL_GPIO_Init+0x23e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a57      	ldr	r2, [pc, #348]	; (8004a70 <HAL_GPIO_Init+0x330>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d031      	beq.n	800497a <HAL_GPIO_Init+0x23a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a56      	ldr	r2, [pc, #344]	; (8004a74 <HAL_GPIO_Init+0x334>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d02b      	beq.n	8004976 <HAL_GPIO_Init+0x236>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a55      	ldr	r2, [pc, #340]	; (8004a78 <HAL_GPIO_Init+0x338>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d025      	beq.n	8004972 <HAL_GPIO_Init+0x232>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a54      	ldr	r2, [pc, #336]	; (8004a7c <HAL_GPIO_Init+0x33c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d01f      	beq.n	800496e <HAL_GPIO_Init+0x22e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a53      	ldr	r2, [pc, #332]	; (8004a80 <HAL_GPIO_Init+0x340>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d019      	beq.n	800496a <HAL_GPIO_Init+0x22a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a52      	ldr	r2, [pc, #328]	; (8004a84 <HAL_GPIO_Init+0x344>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d013      	beq.n	8004966 <HAL_GPIO_Init+0x226>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a51      	ldr	r2, [pc, #324]	; (8004a88 <HAL_GPIO_Init+0x348>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d00d      	beq.n	8004962 <HAL_GPIO_Init+0x222>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a50      	ldr	r2, [pc, #320]	; (8004a8c <HAL_GPIO_Init+0x34c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d007      	beq.n	800495e <HAL_GPIO_Init+0x21e>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a4f      	ldr	r2, [pc, #316]	; (8004a90 <HAL_GPIO_Init+0x350>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_GPIO_Init+0x21a>
 8004956:	2309      	movs	r3, #9
 8004958:	e012      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800495a:	230a      	movs	r3, #10
 800495c:	e010      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800495e:	2308      	movs	r3, #8
 8004960:	e00e      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004962:	2307      	movs	r3, #7
 8004964:	e00c      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004966:	2306      	movs	r3, #6
 8004968:	e00a      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800496a:	2305      	movs	r3, #5
 800496c:	e008      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800496e:	2304      	movs	r3, #4
 8004970:	e006      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004972:	2303      	movs	r3, #3
 8004974:	e004      	b.n	8004980 <HAL_GPIO_Init+0x240>
 8004976:	2302      	movs	r3, #2
 8004978:	e002      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_GPIO_Init+0x240>
 800497e:	2300      	movs	r3, #0
 8004980:	69fa      	ldr	r2, [r7, #28]
 8004982:	f002 0203 	and.w	r2, r2, #3
 8004986:	0092      	lsls	r2, r2, #2
 8004988:	4093      	lsls	r3, r2
 800498a:	69ba      	ldr	r2, [r7, #24]
 800498c:	4313      	orrs	r3, r2
 800498e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004990:	4935      	ldr	r1, [pc, #212]	; (8004a68 <HAL_GPIO_Init+0x328>)
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	089b      	lsrs	r3, r3, #2
 8004996:	3302      	adds	r3, #2
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800499e:	4b3d      	ldr	r3, [pc, #244]	; (8004a94 <HAL_GPIO_Init+0x354>)
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049c2:	4a34      	ldr	r2, [pc, #208]	; (8004a94 <HAL_GPIO_Init+0x354>)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049c8:	4b32      	ldr	r3, [pc, #200]	; (8004a94 <HAL_GPIO_Init+0x354>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <HAL_GPIO_Init+0x354>)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049f2:	4b28      	ldr	r3, [pc, #160]	; (8004a94 <HAL_GPIO_Init+0x354>)
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	43db      	mvns	r3, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4013      	ands	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	4313      	orrs	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a16:	4a1f      	ldr	r2, [pc, #124]	; (8004a94 <HAL_GPIO_Init+0x354>)
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a1c:	4b1d      	ldr	r3, [pc, #116]	; (8004a94 <HAL_GPIO_Init+0x354>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a40:	4a14      	ldr	r2, [pc, #80]	; (8004a94 <HAL_GPIO_Init+0x354>)
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	61fb      	str	r3, [r7, #28]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	f67f ae86 	bls.w	8004760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	3724      	adds	r7, #36	; 0x24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800
 8004a68:	40013800 	.word	0x40013800
 8004a6c:	40020000 	.word	0x40020000
 8004a70:	40020400 	.word	0x40020400
 8004a74:	40020800 	.word	0x40020800
 8004a78:	40020c00 	.word	0x40020c00
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40021400 	.word	0x40021400
 8004a84:	40021800 	.word	0x40021800
 8004a88:	40021c00 	.word	0x40021c00
 8004a8c:	40022000 	.word	0x40022000
 8004a90:	40022400 	.word	0x40022400
 8004a94:	40013c00 	.word	0x40013c00

08004a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004aa8:	787b      	ldrb	r3, [r7, #1]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d003      	beq.n	8004ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004aae:	887a      	ldrh	r2, [r7, #2]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004ab4:	e003      	b.n	8004abe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004ab6:	887b      	ldrh	r3, [r7, #2]
 8004ab8:	041a      	lsls	r2, r3, #16
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	619a      	str	r2, [r3, #24]
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e07f      	b.n	8004bde <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d106      	bne.n	8004af8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2200      	movs	r2, #0
 8004aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7fc fe12 	bl	800171c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f022 0201 	bic.w	r2, r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685a      	ldr	r2, [r3, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b1c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b2c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d107      	bne.n	8004b46 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	689a      	ldr	r2, [r3, #8]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	e006      	b.n	8004b54 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689a      	ldr	r2, [r3, #8]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004b52:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d104      	bne.n	8004b66 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4b1d      	ldr	r3, [pc, #116]	; (8004be8 <HAL_I2C_Init+0x11c>)
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b84:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	691a      	ldr	r2, [r3, #16]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	430a      	orrs	r2, r1
 8004b9e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1a      	ldr	r2, [r3, #32]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f042 0201 	orr.w	r2, r2, #1
 8004bbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	02008000 	.word	0x02008000

08004bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d138      	bne.n	8004c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e032      	b.n	8004c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2224      	movs	r2, #36	; 0x24
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0201 	bic.w	r2, r2, #1
 8004c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6819      	ldr	r1, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	430a      	orrs	r2, r1
 8004c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f042 0201 	orr.w	r2, r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c70:	2300      	movs	r3, #0
 8004c72:	e000      	b.n	8004c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004c74:	2302      	movs	r3, #2
  }
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b085      	sub	sp, #20
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
 8004c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c92:	b2db      	uxtb	r3, r3
 8004c94:	2b20      	cmp	r3, #32
 8004c96:	d139      	bne.n	8004d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e033      	b.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2224      	movs	r2, #36	; 0x24
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0201 	bic.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	021b      	lsls	r3, r3, #8
 8004cda:	68fa      	ldr	r2, [r7, #12]
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d2a:	6013      	str	r3, [r2, #0]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	40007000 	.word	0x40007000

08004d3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b082      	sub	sp, #8
 8004d40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d46:	4b23      	ldr	r3, [pc, #140]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	4a22      	ldr	r2, [pc, #136]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d50:	6413      	str	r3, [r2, #64]	; 0x40
 8004d52:	4b20      	ldr	r3, [pc, #128]	; (8004dd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8004d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5a:	603b      	str	r3, [r7, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d6a:	f7fd f90f 	bl	8001f8c <HAL_GetTick>
 8004d6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d70:	e009      	b.n	8004d86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004d72:	f7fd f90b 	bl	8001f8c <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d80:	d901      	bls.n	8004d86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e022      	b.n	8004dcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d92:	d1ee      	bne.n	8004d72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004d94:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0f      	ldr	r2, [pc, #60]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7fd f8f4 	bl	8001f8c <HAL_GetTick>
 8004da4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004da6:	e009      	b.n	8004dbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004da8:	f7fd f8f0 	bl	8001f8c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004db6:	d901      	bls.n	8004dbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e007      	b.n	8004dcc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004dbc:	4b06      	ldr	r3, [pc, #24]	; (8004dd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc8:	d1ee      	bne.n	8004da8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40023800 	.word	0x40023800
 8004dd8:	40007000 	.word	0x40007000

08004ddc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b086      	sub	sp, #24
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004de4:	2300      	movs	r3, #0
 8004de6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e29b      	b.n	800532a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 8087 	beq.w	8004f0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e00:	4b96      	ldr	r3, [pc, #600]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	f003 030c 	and.w	r3, r3, #12
 8004e08:	2b04      	cmp	r3, #4
 8004e0a:	d00c      	beq.n	8004e26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0c:	4b93      	ldr	r3, [pc, #588]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 030c 	and.w	r3, r3, #12
 8004e14:	2b08      	cmp	r3, #8
 8004e16:	d112      	bne.n	8004e3e <HAL_RCC_OscConfig+0x62>
 8004e18:	4b90      	ldr	r3, [pc, #576]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e24:	d10b      	bne.n	8004e3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e26:	4b8d      	ldr	r3, [pc, #564]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d06c      	beq.n	8004f0c <HAL_RCC_OscConfig+0x130>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d168      	bne.n	8004f0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e275      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e46:	d106      	bne.n	8004e56 <HAL_RCC_OscConfig+0x7a>
 8004e48:	4b84      	ldr	r3, [pc, #528]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a83      	ldr	r2, [pc, #524]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e52:	6013      	str	r3, [r2, #0]
 8004e54:	e02e      	b.n	8004eb4 <HAL_RCC_OscConfig+0xd8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x9c>
 8004e5e:	4b7f      	ldr	r3, [pc, #508]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7e      	ldr	r2, [pc, #504]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	4b7c      	ldr	r3, [pc, #496]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a7b      	ldr	r2, [pc, #492]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e01d      	b.n	8004eb4 <HAL_RCC_OscConfig+0xd8>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e80:	d10c      	bne.n	8004e9c <HAL_RCC_OscConfig+0xc0>
 8004e82:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a75      	ldr	r2, [pc, #468]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	4b73      	ldr	r3, [pc, #460]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a72      	ldr	r2, [pc, #456]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	e00b      	b.n	8004eb4 <HAL_RCC_OscConfig+0xd8>
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a6e      	ldr	r2, [pc, #440]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ea6:	6013      	str	r3, [r2, #0]
 8004ea8:	4b6c      	ldr	r3, [pc, #432]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a6b      	ldr	r2, [pc, #428]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d013      	beq.n	8004ee4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fd f866 	bl	8001f8c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ec4:	f7fd f862 	bl	8001f8c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b64      	cmp	r3, #100	; 0x64
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e229      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed6:	4b61      	ldr	r3, [pc, #388]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xe8>
 8004ee2:	e014      	b.n	8004f0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee4:	f7fd f852 	bl	8001f8c <HAL_GetTick>
 8004ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eea:	e008      	b.n	8004efe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004eec:	f7fd f84e 	bl	8001f8c <HAL_GetTick>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	2b64      	cmp	r3, #100	; 0x64
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e215      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004efe:	4b57      	ldr	r3, [pc, #348]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1f0      	bne.n	8004eec <HAL_RCC_OscConfig+0x110>
 8004f0a:	e000      	b.n	8004f0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d069      	beq.n	8004fee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f1a:	4b50      	ldr	r3, [pc, #320]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00b      	beq.n	8004f3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f26:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d11c      	bne.n	8004f6c <HAL_RCC_OscConfig+0x190>
 8004f32:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d116      	bne.n	8004f6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 0302 	and.w	r3, r3, #2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d005      	beq.n	8004f56 <HAL_RCC_OscConfig+0x17a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d001      	beq.n	8004f56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e1e9      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f56:	4b41      	ldr	r3, [pc, #260]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	493d      	ldr	r1, [pc, #244]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f6a:	e040      	b.n	8004fee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d023      	beq.n	8004fbc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f74:	4b39      	ldr	r3, [pc, #228]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a38      	ldr	r2, [pc, #224]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f7a:	f043 0301 	orr.w	r3, r3, #1
 8004f7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fd f804 	bl	8001f8c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f88:	f7fd f800 	bl	8001f8c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e1c7      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0f0      	beq.n	8004f88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4b2d      	ldr	r3, [pc, #180]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4929      	ldr	r1, [pc, #164]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
 8004fba:	e018      	b.n	8004fee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fbc:	4b27      	ldr	r3, [pc, #156]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a26      	ldr	r2, [pc, #152]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004fc2:	f023 0301 	bic.w	r3, r3, #1
 8004fc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc8:	f7fc ffe0 	bl	8001f8c <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd0:	f7fc ffdc 	bl	8001f8c <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e1a3      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fe2:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d1f0      	bne.n	8004fd0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0308 	and.w	r3, r3, #8
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d038      	beq.n	800506c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d019      	beq.n	8005036 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005002:	4b16      	ldr	r3, [pc, #88]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8005004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005006:	4a15      	ldr	r2, [pc, #84]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8005008:	f043 0301 	orr.w	r3, r3, #1
 800500c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800500e:	f7fc ffbd 	bl	8001f8c <HAL_GetTick>
 8005012:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005014:	e008      	b.n	8005028 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005016:	f7fc ffb9 	bl	8001f8c <HAL_GetTick>
 800501a:	4602      	mov	r2, r0
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	2b02      	cmp	r3, #2
 8005022:	d901      	bls.n	8005028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e180      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005028:	4b0c      	ldr	r3, [pc, #48]	; (800505c <HAL_RCC_OscConfig+0x280>)
 800502a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0f0      	beq.n	8005016 <HAL_RCC_OscConfig+0x23a>
 8005034:	e01a      	b.n	800506c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005036:	4b09      	ldr	r3, [pc, #36]	; (800505c <HAL_RCC_OscConfig+0x280>)
 8005038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503a:	4a08      	ldr	r2, [pc, #32]	; (800505c <HAL_RCC_OscConfig+0x280>)
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005042:	f7fc ffa3 	bl	8001f8c <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005048:	e00a      	b.n	8005060 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800504a:	f7fc ff9f 	bl	8001f8c <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d903      	bls.n	8005060 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e166      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
 800505c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005060:	4b92      	ldr	r3, [pc, #584]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ee      	bne.n	800504a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80a4 	beq.w	80051c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800507a:	4b8c      	ldr	r3, [pc, #560]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005082:	2b00      	cmp	r3, #0
 8005084:	d10d      	bne.n	80050a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005086:	4b89      	ldr	r3, [pc, #548]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508a:	4a88      	ldr	r2, [pc, #544]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800508c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005090:	6413      	str	r3, [r2, #64]	; 0x40
 8005092:	4b86      	ldr	r3, [pc, #536]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800509a:	60bb      	str	r3, [r7, #8]
 800509c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800509e:	2301      	movs	r3, #1
 80050a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050a2:	4b83      	ldr	r3, [pc, #524]	; (80052b0 <HAL_RCC_OscConfig+0x4d4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d118      	bne.n	80050e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80050ae:	4b80      	ldr	r3, [pc, #512]	; (80052b0 <HAL_RCC_OscConfig+0x4d4>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a7f      	ldr	r2, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x4d4>)
 80050b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050ba:	f7fc ff67 	bl	8001f8c <HAL_GetTick>
 80050be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c0:	e008      	b.n	80050d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050c2:	f7fc ff63 	bl	8001f8c <HAL_GetTick>
 80050c6:	4602      	mov	r2, r0
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	2b64      	cmp	r3, #100	; 0x64
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e12a      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050d4:	4b76      	ldr	r3, [pc, #472]	; (80052b0 <HAL_RCC_OscConfig+0x4d4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d0f0      	beq.n	80050c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d106      	bne.n	80050f6 <HAL_RCC_OscConfig+0x31a>
 80050e8:	4b70      	ldr	r3, [pc, #448]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	4a6f      	ldr	r2, [pc, #444]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80050ee:	f043 0301 	orr.w	r3, r3, #1
 80050f2:	6713      	str	r3, [r2, #112]	; 0x70
 80050f4:	e02d      	b.n	8005152 <HAL_RCC_OscConfig+0x376>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10c      	bne.n	8005118 <HAL_RCC_OscConfig+0x33c>
 80050fe:	4b6b      	ldr	r3, [pc, #428]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	4b68      	ldr	r3, [pc, #416]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a67      	ldr	r2, [pc, #412]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005110:	f023 0304 	bic.w	r3, r3, #4
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
 8005116:	e01c      	b.n	8005152 <HAL_RCC_OscConfig+0x376>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	2b05      	cmp	r3, #5
 800511e:	d10c      	bne.n	800513a <HAL_RCC_OscConfig+0x35e>
 8005120:	4b62      	ldr	r3, [pc, #392]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a61      	ldr	r2, [pc, #388]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005126:	f043 0304 	orr.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	4b5f      	ldr	r3, [pc, #380]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800512e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005130:	4a5e      	ldr	r2, [pc, #376]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005132:	f043 0301 	orr.w	r3, r3, #1
 8005136:	6713      	str	r3, [r2, #112]	; 0x70
 8005138:	e00b      	b.n	8005152 <HAL_RCC_OscConfig+0x376>
 800513a:	4b5c      	ldr	r3, [pc, #368]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a5b      	ldr	r2, [pc, #364]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	4b59      	ldr	r3, [pc, #356]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a58      	ldr	r2, [pc, #352]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800514c:	f023 0304 	bic.w	r3, r3, #4
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d015      	beq.n	8005186 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800515a:	f7fc ff17 	bl	8001f8c <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005160:	e00a      	b.n	8005178 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005162:	f7fc ff13 	bl	8001f8c <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005170:	4293      	cmp	r3, r2
 8005172:	d901      	bls.n	8005178 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e0d8      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005178:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800517a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0ee      	beq.n	8005162 <HAL_RCC_OscConfig+0x386>
 8005184:	e014      	b.n	80051b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005186:	f7fc ff01 	bl	8001f8c <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800518c:	e00a      	b.n	80051a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7fc fefd 	bl	8001f8c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e0c2      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a4:	4b41      	ldr	r3, [pc, #260]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1ee      	bne.n	800518e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80051b0:	7dfb      	ldrb	r3, [r7, #23]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d105      	bne.n	80051c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051b6:	4b3d      	ldr	r3, [pc, #244]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a3c      	ldr	r2, [pc, #240]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	f000 80ae 	beq.w	8005328 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80051cc:	4b37      	ldr	r3, [pc, #220]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 030c 	and.w	r3, r3, #12
 80051d4:	2b08      	cmp	r3, #8
 80051d6:	d06d      	beq.n	80052b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d14b      	bne.n	8005278 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e0:	4b32      	ldr	r3, [pc, #200]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a31      	ldr	r2, [pc, #196]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80051e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ec:	f7fc fece 	bl	8001f8c <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f4:	f7fc feca 	bl	8001f8c <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e091      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	4b29      	ldr	r3, [pc, #164]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1f0      	bne.n	80051f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	69da      	ldr	r2, [r3, #28]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	431a      	orrs	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005220:	019b      	lsls	r3, r3, #6
 8005222:	431a      	orrs	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	085b      	lsrs	r3, r3, #1
 800522a:	3b01      	subs	r3, #1
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	061b      	lsls	r3, r3, #24
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523c:	071b      	lsls	r3, r3, #28
 800523e:	491b      	ldr	r1, [pc, #108]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005240:	4313      	orrs	r3, r2
 8005242:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005244:	4b19      	ldr	r3, [pc, #100]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a18      	ldr	r2, [pc, #96]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800524a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800524e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fc fe9c 	bl	8001f8c <HAL_GetTick>
 8005254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005256:	e008      	b.n	800526a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005258:	f7fc fe98 	bl	8001f8c <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	2b02      	cmp	r3, #2
 8005264:	d901      	bls.n	800526a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8005266:	2303      	movs	r3, #3
 8005268:	e05f      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800526a:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d0f0      	beq.n	8005258 <HAL_RCC_OscConfig+0x47c>
 8005276:	e057      	b.n	8005328 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a0b      	ldr	r2, [pc, #44]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 800527e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005282:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc fe82 	bl	8001f8c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800528c:	f7fc fe7e 	bl	8001f8c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e045      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b03      	ldr	r3, [pc, #12]	; (80052ac <HAL_RCC_OscConfig+0x4d0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x4b0>
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x54c>
 80052ac:	40023800 	.word	0x40023800
 80052b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80052b4:	4b1f      	ldr	r3, [pc, #124]	; (8005334 <HAL_RCC_OscConfig+0x558>)
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	699b      	ldr	r3, [r3, #24]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d030      	beq.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d129      	bne.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052da:	429a      	cmp	r2, r3
 80052dc:	d122      	bne.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052e4:	4013      	ands	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d119      	bne.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fa:	085b      	lsrs	r3, r3, #1
 80052fc:	3b01      	subs	r3, #1
 80052fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005300:	429a      	cmp	r2, r3
 8005302:	d10f      	bne.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800531e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	e0d0      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005350:	4b6a      	ldr	r3, [pc, #424]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	429a      	cmp	r2, r3
 800535c:	d910      	bls.n	8005380 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535e:	4b67      	ldr	r3, [pc, #412]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f023 020f 	bic.w	r2, r3, #15
 8005366:	4965      	ldr	r1, [pc, #404]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	4313      	orrs	r3, r2
 800536c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800536e:	4b63      	ldr	r3, [pc, #396]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	429a      	cmp	r2, r3
 800537a:	d001      	beq.n	8005380 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e0b8      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d020      	beq.n	80053ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005398:	4b59      	ldr	r3, [pc, #356]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4a58      	ldr	r2, [pc, #352]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800539e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d005      	beq.n	80053bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053b0:	4b53      	ldr	r3, [pc, #332]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	4a52      	ldr	r2, [pc, #328]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053bc:	4b50      	ldr	r3, [pc, #320]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	494d      	ldr	r1, [pc, #308]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d040      	beq.n	800545c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d107      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	4b47      	ldr	r3, [pc, #284]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d115      	bne.n	800541a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e07f      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d107      	bne.n	800540a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053fa:	4b41      	ldr	r3, [pc, #260]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e073      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800540a:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0302 	and.w	r3, r3, #2
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e06b      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800541a:	4b39      	ldr	r3, [pc, #228]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f023 0203 	bic.w	r2, r3, #3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4936      	ldr	r1, [pc, #216]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 8005428:	4313      	orrs	r3, r2
 800542a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800542c:	f7fc fdae 	bl	8001f8c <HAL_GetTick>
 8005430:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005432:	e00a      	b.n	800544a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005434:	f7fc fdaa 	bl	8001f8c <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e053      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800544a:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 020c 	and.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	429a      	cmp	r2, r3
 800545a:	d1eb      	bne.n	8005434 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800545c:	4b27      	ldr	r3, [pc, #156]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 030f 	and.w	r3, r3, #15
 8005464:	683a      	ldr	r2, [r7, #0]
 8005466:	429a      	cmp	r2, r3
 8005468:	d210      	bcs.n	800548c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800546a:	4b24      	ldr	r3, [pc, #144]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f023 020f 	bic.w	r2, r3, #15
 8005472:	4922      	ldr	r1, [pc, #136]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	4313      	orrs	r3, r2
 8005478:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800547a:	4b20      	ldr	r3, [pc, #128]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 030f 	and.w	r3, r3, #15
 8005482:	683a      	ldr	r2, [r7, #0]
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e032      	b.n	80054f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0304 	and.w	r3, r3, #4
 8005494:	2b00      	cmp	r3, #0
 8005496:	d008      	beq.n	80054aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4916      	ldr	r1, [pc, #88]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	490e      	ldr	r1, [pc, #56]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054c6:	4313      	orrs	r3, r2
 80054c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054ca:	f000 f821 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 80054ce:	4602      	mov	r2, r0
 80054d0:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	091b      	lsrs	r3, r3, #4
 80054d6:	f003 030f 	and.w	r3, r3, #15
 80054da:	490a      	ldr	r1, [pc, #40]	; (8005504 <HAL_RCC_ClockConfig+0x1cc>)
 80054dc:	5ccb      	ldrb	r3, [r1, r3]
 80054de:	fa22 f303 	lsr.w	r3, r2, r3
 80054e2:	4a09      	ldr	r2, [pc, #36]	; (8005508 <HAL_RCC_ClockConfig+0x1d0>)
 80054e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <HAL_RCC_ClockConfig+0x1d4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc fb60 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40023c00 	.word	0x40023c00
 8005500:	40023800 	.word	0x40023800
 8005504:	08021b70 	.word	0x08021b70
 8005508:	20000000 	.word	0x20000000
 800550c:	20000004 	.word	0x20000004

08005510 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005514:	b084      	sub	sp, #16
 8005516:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	607b      	str	r3, [r7, #4]
 800551c:	2300      	movs	r3, #0
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	2300      	movs	r3, #0
 8005522:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005528:	4b67      	ldr	r3, [pc, #412]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 030c 	and.w	r3, r3, #12
 8005530:	2b08      	cmp	r3, #8
 8005532:	d00d      	beq.n	8005550 <HAL_RCC_GetSysClockFreq+0x40>
 8005534:	2b08      	cmp	r3, #8
 8005536:	f200 80bd 	bhi.w	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x34>
 800553e:	2b04      	cmp	r3, #4
 8005540:	d003      	beq.n	800554a <HAL_RCC_GetSysClockFreq+0x3a>
 8005542:	e0b7      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005544:	4b61      	ldr	r3, [pc, #388]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005546:	60bb      	str	r3, [r7, #8]
      break;
 8005548:	e0b7      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800554a:	4b61      	ldr	r3, [pc, #388]	; (80056d0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800554c:	60bb      	str	r3, [r7, #8]
      break;
 800554e:	e0b4      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005550:	4b5d      	ldr	r3, [pc, #372]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005558:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800555a:	4b5b      	ldr	r3, [pc, #364]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04d      	beq.n	8005602 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005566:	4b58      	ldr	r3, [pc, #352]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	ea02 0800 	and.w	r8, r2, r0
 800557e:	ea03 0901 	and.w	r9, r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	014b      	lsls	r3, r1, #5
 8005590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005594:	0142      	lsls	r2, r0, #5
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	ebb0 0008 	subs.w	r0, r0, r8
 800559e:	eb61 0109 	sbc.w	r1, r1, r9
 80055a2:	f04f 0200 	mov.w	r2, #0
 80055a6:	f04f 0300 	mov.w	r3, #0
 80055aa:	018b      	lsls	r3, r1, #6
 80055ac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055b0:	0182      	lsls	r2, r0, #6
 80055b2:	1a12      	subs	r2, r2, r0
 80055b4:	eb63 0301 	sbc.w	r3, r3, r1
 80055b8:	f04f 0000 	mov.w	r0, #0
 80055bc:	f04f 0100 	mov.w	r1, #0
 80055c0:	00d9      	lsls	r1, r3, #3
 80055c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c6:	00d0      	lsls	r0, r2, #3
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	eb12 0208 	adds.w	r2, r2, r8
 80055d0:	eb43 0309 	adc.w	r3, r3, r9
 80055d4:	f04f 0000 	mov.w	r0, #0
 80055d8:	f04f 0100 	mov.w	r1, #0
 80055dc:	0259      	lsls	r1, r3, #9
 80055de:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80055e2:	0250      	lsls	r0, r2, #9
 80055e4:	4602      	mov	r2, r0
 80055e6:	460b      	mov	r3, r1
 80055e8:	4610      	mov	r0, r2
 80055ea:	4619      	mov	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	461a      	mov	r2, r3
 80055f0:	f04f 0300 	mov.w	r3, #0
 80055f4:	f7fa fe7c 	bl	80002f0 <__aeabi_uldivmod>
 80055f8:	4602      	mov	r2, r0
 80055fa:	460b      	mov	r3, r1
 80055fc:	4613      	mov	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e04a      	b.n	8005698 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005602:	4b31      	ldr	r3, [pc, #196]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	099b      	lsrs	r3, r3, #6
 8005608:	461a      	mov	r2, r3
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005612:	f04f 0100 	mov.w	r1, #0
 8005616:	ea02 0400 	and.w	r4, r2, r0
 800561a:	ea03 0501 	and.w	r5, r3, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f04f 0200 	mov.w	r2, #0
 8005626:	f04f 0300 	mov.w	r3, #0
 800562a:	014b      	lsls	r3, r1, #5
 800562c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005630:	0142      	lsls	r2, r0, #5
 8005632:	4610      	mov	r0, r2
 8005634:	4619      	mov	r1, r3
 8005636:	1b00      	subs	r0, r0, r4
 8005638:	eb61 0105 	sbc.w	r1, r1, r5
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	018b      	lsls	r3, r1, #6
 8005646:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800564a:	0182      	lsls	r2, r0, #6
 800564c:	1a12      	subs	r2, r2, r0
 800564e:	eb63 0301 	sbc.w	r3, r3, r1
 8005652:	f04f 0000 	mov.w	r0, #0
 8005656:	f04f 0100 	mov.w	r1, #0
 800565a:	00d9      	lsls	r1, r3, #3
 800565c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005660:	00d0      	lsls	r0, r2, #3
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	1912      	adds	r2, r2, r4
 8005668:	eb45 0303 	adc.w	r3, r5, r3
 800566c:	f04f 0000 	mov.w	r0, #0
 8005670:	f04f 0100 	mov.w	r1, #0
 8005674:	0299      	lsls	r1, r3, #10
 8005676:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800567a:	0290      	lsls	r0, r2, #10
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4610      	mov	r0, r2
 8005682:	4619      	mov	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 0300 	mov.w	r3, #0
 800568c:	f7fa fe30 	bl	80002f0 <__aeabi_uldivmod>
 8005690:	4602      	mov	r2, r0
 8005692:	460b      	mov	r3, r1
 8005694:	4613      	mov	r3, r2
 8005696:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005698:	4b0b      	ldr	r3, [pc, #44]	; (80056c8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	0c1b      	lsrs	r3, r3, #16
 800569e:	f003 0303 	and.w	r3, r3, #3
 80056a2:	3301      	adds	r3, #1
 80056a4:	005b      	lsls	r3, r3, #1
 80056a6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80056a8:	68fa      	ldr	r2, [r7, #12]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b0:	60bb      	str	r3, [r7, #8]
      break;
 80056b2:	e002      	b.n	80056ba <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056b4:	4b05      	ldr	r3, [pc, #20]	; (80056cc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80056b6:	60bb      	str	r3, [r7, #8]
      break;
 80056b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056ba:	68bb      	ldr	r3, [r7, #8]
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056c6:	bf00      	nop
 80056c8:	40023800 	.word	0x40023800
 80056cc:	00f42400 	.word	0x00f42400
 80056d0:	007a1200 	.word	0x007a1200

080056d4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056d4:	b480      	push	{r7}
 80056d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056d8:	4b03      	ldr	r3, [pc, #12]	; (80056e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80056da:	681b      	ldr	r3, [r3, #0]
}
 80056dc:	4618      	mov	r0, r3
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000000 	.word	0x20000000

080056ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80056f0:	f7ff fff0 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 80056f4:	4602      	mov	r2, r0
 80056f6:	4b05      	ldr	r3, [pc, #20]	; (800570c <HAL_RCC_GetPCLK1Freq+0x20>)
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	0a9b      	lsrs	r3, r3, #10
 80056fc:	f003 0307 	and.w	r3, r3, #7
 8005700:	4903      	ldr	r1, [pc, #12]	; (8005710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005702:	5ccb      	ldrb	r3, [r1, r3]
 8005704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005708:	4618      	mov	r0, r3
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40023800 	.word	0x40023800
 8005710:	08021b80 	.word	0x08021b80

08005714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005718:	f7ff ffdc 	bl	80056d4 <HAL_RCC_GetHCLKFreq>
 800571c:	4602      	mov	r2, r0
 800571e:	4b05      	ldr	r3, [pc, #20]	; (8005734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	0b5b      	lsrs	r3, r3, #13
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	4903      	ldr	r1, [pc, #12]	; (8005738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800572a:	5ccb      	ldrb	r3, [r1, r3]
 800572c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005730:	4618      	mov	r0, r3
 8005732:	bd80      	pop	{r7, pc}
 8005734:	40023800 	.word	0x40023800
 8005738:	08021b80 	.word	0x08021b80

0800573c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	220f      	movs	r2, #15
 800574a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 0203 	and.w	r2, r3, #3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005758:	4b0f      	ldr	r3, [pc, #60]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005764:	4b0c      	ldr	r3, [pc, #48]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8005770:	4b09      	ldr	r3, [pc, #36]	; (8005798 <HAL_RCC_GetClockConfig+0x5c>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	08db      	lsrs	r3, r3, #3
 8005776:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800577e:	4b07      	ldr	r3, [pc, #28]	; (800579c <HAL_RCC_GetClockConfig+0x60>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 020f 	and.w	r2, r3, #15
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	601a      	str	r2, [r3, #0]
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
 8005796:	bf00      	nop
 8005798:	40023800 	.word	0x40023800
 800579c:	40023c00 	.word	0x40023c00

080057a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b088      	sub	sp, #32
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80057ac:	2300      	movs	r3, #0
 80057ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80057b0:	2300      	movs	r3, #0
 80057b2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80057b8:	2300      	movs	r3, #0
 80057ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 0301 	and.w	r3, r3, #1
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d012      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057c8:	4b69      	ldr	r3, [pc, #420]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	4a68      	ldr	r2, [pc, #416]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ce:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057d2:	6093      	str	r3, [r2, #8]
 80057d4:	4b66      	ldr	r3, [pc, #408]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057d6:	689a      	ldr	r2, [r3, #8]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057dc:	4964      	ldr	r1, [pc, #400]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057de:	4313      	orrs	r3, r2
 80057e0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d017      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005808:	4959      	ldr	r1, [pc, #356]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800580a:	4313      	orrs	r3, r2
 800580c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005814:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005818:	d101      	bne.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800581a:	2301      	movs	r3, #1
 800581c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005822:	2b00      	cmp	r3, #0
 8005824:	d101      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005826:	2301      	movs	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d017      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005836:	4b4e      	ldr	r3, [pc, #312]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005838:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005844:	494a      	ldr	r1, [pc, #296]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005854:	d101      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005856:	2301      	movs	r3, #1
 8005858:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d001      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005872:	2301      	movs	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 808b 	beq.w	800599a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005884:	4b3a      	ldr	r3, [pc, #232]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005888:	4a39      	ldr	r2, [pc, #228]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800588e:	6413      	str	r3, [r2, #64]	; 0x40
 8005890:	4b37      	ldr	r3, [pc, #220]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005898:	60bb      	str	r3, [r7, #8]
 800589a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800589c:	4b35      	ldr	r3, [pc, #212]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a34      	ldr	r2, [pc, #208]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a8:	f7fc fb70 	bl	8001f8c <HAL_GetTick>
 80058ac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058ae:	e008      	b.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058b0:	f7fc fb6c 	bl	8001f8c <HAL_GetTick>
 80058b4:	4602      	mov	r2, r0
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	1ad3      	subs	r3, r2, r3
 80058ba:	2b64      	cmp	r3, #100	; 0x64
 80058bc:	d901      	bls.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80058be:	2303      	movs	r3, #3
 80058c0:	e38f      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80058c2:	4b2c      	ldr	r3, [pc, #176]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d0f0      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ce:	4b28      	ldr	r3, [pc, #160]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058d6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d035      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	429a      	cmp	r2, r3
 80058ea:	d02e      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058ec:	4b20      	ldr	r3, [pc, #128]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f6:	4b1e      	ldr	r3, [pc, #120]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058fa:	4a1d      	ldr	r2, [pc, #116]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005900:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005902:	4b1b      	ldr	r3, [pc, #108]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005906:	4a1a      	ldr	r2, [pc, #104]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800590e:	4a18      	ldr	r2, [pc, #96]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005914:	4b16      	ldr	r3, [pc, #88]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d114      	bne.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005920:	f7fc fb34 	bl	8001f8c <HAL_GetTick>
 8005924:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005926:	e00a      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005928:	f7fc fb30 	bl	8001f8c <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	f241 3288 	movw	r2, #5000	; 0x1388
 8005936:	4293      	cmp	r3, r2
 8005938:	d901      	bls.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e351      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800593e:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ee      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005956:	d111      	bne.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005964:	4b04      	ldr	r3, [pc, #16]	; (8005978 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005966:	400b      	ands	r3, r1
 8005968:	4901      	ldr	r1, [pc, #4]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	4313      	orrs	r3, r2
 800596c:	608b      	str	r3, [r1, #8]
 800596e:	e00b      	b.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005970:	40023800 	.word	0x40023800
 8005974:	40007000 	.word	0x40007000
 8005978:	0ffffcff 	.word	0x0ffffcff
 800597c:	4bb3      	ldr	r3, [pc, #716]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4ab2      	ldr	r2, [pc, #712]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005982:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005986:	6093      	str	r3, [r2, #8]
 8005988:	4bb0      	ldr	r3, [pc, #704]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800598a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005994:	49ad      	ldr	r1, [pc, #692]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005996:	4313      	orrs	r3, r2
 8005998:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0310 	and.w	r3, r3, #16
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d010      	beq.n	80059c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059a6:	4ba9      	ldr	r3, [pc, #676]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ac:	4aa7      	ldr	r2, [pc, #668]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80059b6:	4ba5      	ldr	r3, [pc, #660]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	49a2      	ldr	r1, [pc, #648]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059d4:	4b9d      	ldr	r3, [pc, #628]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059e2:	499a      	ldr	r1, [pc, #616]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059f6:	4b95      	ldr	r3, [pc, #596]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a04:	4991      	ldr	r1, [pc, #580]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a18:	4b8c      	ldr	r3, [pc, #560]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a26:	4989      	ldr	r1, [pc, #548]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a3a:	4b84      	ldr	r3, [pc, #528]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	4980      	ldr	r1, [pc, #512]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a5c:	4b7b      	ldr	r3, [pc, #492]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a62:	f023 0203 	bic.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a6a:	4978      	ldr	r1, [pc, #480]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a7e:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a84:	f023 020c 	bic.w	r2, r3, #12
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a8c:	496f      	ldr	r1, [pc, #444]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aa0:	4b6a      	ldr	r3, [pc, #424]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aae:	4967      	ldr	r1, [pc, #412]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d00a      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ac2:	4b62      	ldr	r3, [pc, #392]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ad0:	495e      	ldr	r1, [pc, #376]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00a      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ae4:	4b59      	ldr	r3, [pc, #356]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005af2:	4956      	ldr	r1, [pc, #344]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00a      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b06:	4b51      	ldr	r3, [pc, #324]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b14:	494d      	ldr	r1, [pc, #308]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00a      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b36:	4945      	ldr	r1, [pc, #276]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d00a      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005b4a:	4b40      	ldr	r3, [pc, #256]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b58:	493c      	ldr	r1, [pc, #240]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00a      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005b6c:	4b37      	ldr	r3, [pc, #220]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b72:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b7a:	4934      	ldr	r1, [pc, #208]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d011      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005b8e:	4b2f      	ldr	r3, [pc, #188]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b94:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9c:	492b      	ldr	r1, [pc, #172]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bac:	d101      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0308 	and.w	r3, r3, #8
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00a      	beq.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bce:	4b1f      	ldr	r3, [pc, #124]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bdc:	491b      	ldr	r1, [pc, #108]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d00b      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005bf0:	4b16      	ldr	r3, [pc, #88]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c00:	4912      	ldr	r1, [pc, #72]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00b      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c14:	4b0d      	ldr	r3, [pc, #52]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c1a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c24:	4909      	ldr	r1, [pc, #36]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d00f      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c48:	e002      	b.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005c4a:	bf00      	nop
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	4986      	ldr	r1, [pc, #536]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c64:	4b81      	ldr	r3, [pc, #516]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c74:	497d      	ldr	r1, [pc, #500]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c76:	4313      	orrs	r3, r2
 8005c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d006      	beq.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80d6 	beq.w	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c90:	4b76      	ldr	r3, [pc, #472]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a75      	ldr	r2, [pc, #468]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c9a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c9c:	f7fc f976 	bl	8001f8c <HAL_GetTick>
 8005ca0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005ca4:	f7fc f972 	bl	8001f8c <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	; 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e195      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cb6:	4b6d      	ldr	r3, [pc, #436]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d021      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d11d      	bne.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005cd6:	4b65      	ldr	r3, [pc, #404]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cdc:	0c1b      	lsrs	r3, r3, #16
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005ce4:	4b61      	ldr	r3, [pc, #388]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cea:	0e1b      	lsrs	r3, r3, #24
 8005cec:	f003 030f 	and.w	r3, r3, #15
 8005cf0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	019a      	lsls	r2, r3, #6
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	041b      	lsls	r3, r3, #16
 8005cfc:	431a      	orrs	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	431a      	orrs	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	071b      	lsls	r3, r3, #28
 8005d0a:	4958      	ldr	r1, [pc, #352]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d004      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d26:	d00a      	beq.n	8005d3e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d02e      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d3c:	d129      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d3e:	4b4b      	ldr	r3, [pc, #300]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005d4c:	4b47      	ldr	r3, [pc, #284]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d52:	0f1b      	lsrs	r3, r3, #28
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	019a      	lsls	r2, r3, #6
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	431a      	orrs	r2, r3
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	061b      	lsls	r3, r3, #24
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	071b      	lsls	r3, r3, #28
 8005d72:	493e      	ldr	r1, [pc, #248]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d74:	4313      	orrs	r3, r2
 8005d76:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d7a:	4b3c      	ldr	r3, [pc, #240]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d80:	f023 021f 	bic.w	r2, r3, #31
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	4938      	ldr	r1, [pc, #224]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d01d      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d9e:	4b33      	ldr	r3, [pc, #204]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da4:	0e1b      	lsrs	r3, r3, #24
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dac:	4b2f      	ldr	r3, [pc, #188]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005db2:	0f1b      	lsrs	r3, r3, #28
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	019a      	lsls	r2, r3, #6
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	041b      	lsls	r3, r3, #16
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	061b      	lsls	r3, r3, #24
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	071b      	lsls	r3, r3, #28
 8005dd2:	4926      	ldr	r1, [pc, #152]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d011      	beq.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	019a      	lsls	r2, r3, #6
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	041b      	lsls	r3, r3, #16
 8005df2:	431a      	orrs	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	68db      	ldr	r3, [r3, #12]
 8005df8:	061b      	lsls	r3, r3, #24
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	071b      	lsls	r3, r3, #28
 8005e02:	491a      	ldr	r1, [pc, #104]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e04:	4313      	orrs	r3, r2
 8005e06:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e0a:	4b18      	ldr	r3, [pc, #96]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a17      	ldr	r2, [pc, #92]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e10:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e16:	f7fc f8b9 	bl	8001f8c <HAL_GetTick>
 8005e1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e1c:	e008      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e1e:	f7fc f8b5 	bl	8001f8c <HAL_GetTick>
 8005e22:	4602      	mov	r2, r0
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	2b64      	cmp	r3, #100	; 0x64
 8005e2a:	d901      	bls.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e0d8      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d0f0      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	2b01      	cmp	r3, #1
 8005e40:	f040 80ce 	bne.w	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005e44:	4b09      	ldr	r3, [pc, #36]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a08      	ldr	r2, [pc, #32]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e50:	f7fc f89c 	bl	8001f8c <HAL_GetTick>
 8005e54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e56:	e00b      	b.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e58:	f7fc f898 	bl	8001f8c <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b64      	cmp	r3, #100	; 0x64
 8005e64:	d904      	bls.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e0bb      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005e70:	4b5e      	ldr	r3, [pc, #376]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e7c:	d0ec      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d003      	beq.n	8005e92 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d02e      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d12a      	bne.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ea6:	4b51      	ldr	r3, [pc, #324]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	0c1b      	lsrs	r3, r3, #16
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005eb4:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	0f1b      	lsrs	r3, r3, #28
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	019a      	lsls	r2, r3, #6
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	061b      	lsls	r3, r3, #24
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	071b      	lsls	r3, r3, #28
 8005eda:	4944      	ldr	r1, [pc, #272]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005edc:	4313      	orrs	r3, r2
 8005ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005ee2:	4b42      	ldr	r3, [pc, #264]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	021b      	lsls	r3, r3, #8
 8005ef4:	493d      	ldr	r1, [pc, #244]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d022      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f10:	d11d      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f12:	4b36      	ldr	r3, [pc, #216]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f18:	0e1b      	lsrs	r3, r3, #24
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f20:	4b32      	ldr	r3, [pc, #200]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f26:	0f1b      	lsrs	r3, r3, #28
 8005f28:	f003 0307 	and.w	r3, r3, #7
 8005f2c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	019a      	lsls	r2, r3, #6
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6a1b      	ldr	r3, [r3, #32]
 8005f38:	041b      	lsls	r3, r3, #16
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	061b      	lsls	r3, r3, #24
 8005f40:	431a      	orrs	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	071b      	lsls	r3, r3, #28
 8005f46:	4929      	ldr	r1, [pc, #164]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0308 	and.w	r3, r3, #8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d028      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f5a:	4b24      	ldr	r3, [pc, #144]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f60:	0e1b      	lsrs	r3, r3, #24
 8005f62:	f003 030f 	and.w	r3, r3, #15
 8005f66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f68:	4b20      	ldr	r3, [pc, #128]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	019a      	lsls	r2, r3, #6
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	431a      	orrs	r2, r3
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	061b      	lsls	r3, r3, #24
 8005f86:	431a      	orrs	r2, r3
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	69db      	ldr	r3, [r3, #28]
 8005f8c:	071b      	lsls	r3, r3, #28
 8005f8e:	4917      	ldr	r1, [pc, #92]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005f96:	4b15      	ldr	r3, [pc, #84]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f98:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	4911      	ldr	r1, [pc, #68]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005fac:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a0e      	ldr	r2, [pc, #56]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fb8:	f7fb ffe8 	bl	8001f8c <HAL_GetTick>
 8005fbc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fbe:	e008      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005fc0:	f7fb ffe4 	bl	8001f8c <HAL_GetTick>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	1ad3      	subs	r3, r2, r3
 8005fca:	2b64      	cmp	r3, #100	; 0x64
 8005fcc:	d901      	bls.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e007      	b.n	8005fe2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005fd2:	4b06      	ldr	r3, [pc, #24]	; (8005fec <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fde:	d1ef      	bne.n	8005fc0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3720      	adds	r7, #32
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	40023800 	.word	0x40023800

08005ff0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ffe:	2301      	movs	r3, #1
 8006000:	e049      	b.n	8006096 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006008:	b2db      	uxtb	r3, r3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d106      	bne.n	800601c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f841 	bl	800609e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	3304      	adds	r3, #4
 800602c:	4619      	mov	r1, r3
 800602e:	4610      	mov	r0, r2
 8006030:	f000 fc12 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2201      	movs	r2, #1
 8006078:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2201      	movs	r2, #1
 8006088:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006094:	2300      	movs	r3, #0
}
 8006096:	4618      	mov	r0, r3
 8006098:	3708      	adds	r7, #8
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}

0800609e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d001      	beq.n	80060cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e054      	b.n	8006176 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a26      	ldr	r2, [pc, #152]	; (8006184 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d022      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060f6:	d01d      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a22      	ldr	r2, [pc, #136]	; (8006188 <HAL_TIM_Base_Start_IT+0xd4>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d018      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a21      	ldr	r2, [pc, #132]	; (800618c <HAL_TIM_Base_Start_IT+0xd8>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d013      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1f      	ldr	r2, [pc, #124]	; (8006190 <HAL_TIM_Base_Start_IT+0xdc>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d00e      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1e      	ldr	r2, [pc, #120]	; (8006194 <HAL_TIM_Base_Start_IT+0xe0>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d009      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <HAL_TIM_Base_Start_IT+0xe4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d004      	beq.n	8006134 <HAL_TIM_Base_Start_IT+0x80>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a1b      	ldr	r2, [pc, #108]	; (800619c <HAL_TIM_Base_Start_IT+0xe8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d115      	bne.n	8006160 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	4b19      	ldr	r3, [pc, #100]	; (80061a0 <HAL_TIM_Base_Start_IT+0xec>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b06      	cmp	r3, #6
 8006144:	d015      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0xbe>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d011      	beq.n	8006172 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800615e:	e008      	b.n	8006172 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	e000      	b.n	8006174 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006172:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	40010000 	.word	0x40010000
 8006188:	40000400 	.word	0x40000400
 800618c:	40000800 	.word	0x40000800
 8006190:	40000c00 	.word	0x40000c00
 8006194:	40010400 	.word	0x40010400
 8006198:	40014000 	.word	0x40014000
 800619c:	40001800 	.word	0x40001800
 80061a0:	00010007 	.word	0x00010007

080061a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d101      	bne.n	80061b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e049      	b.n	800624a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d106      	bne.n	80061d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f7fb fb94 	bl	80018f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2202      	movs	r2, #2
 80061d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681a      	ldr	r2, [r3, #0]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3304      	adds	r3, #4
 80061e0:	4619      	mov	r1, r3
 80061e2:	4610      	mov	r0, r2
 80061e4:	f000 fb38 	bl	8006858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d101      	bne.n	8006268 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e08f      	b.n	8006388 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fb fa91 	bl	80017a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2202      	movs	r2, #2
 8006286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	6899      	ldr	r1, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <HAL_TIM_Encoder_Init+0x13c>)
 8006296:	400b      	ands	r3, r1
 8006298:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	3304      	adds	r3, #4
 80062a2:	4619      	mov	r1, r3
 80062a4:	4610      	mov	r0, r2
 80062a6:	f000 fad7 	bl	8006858 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	699b      	ldr	r3, [r3, #24]
 80062b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	6a1b      	ldr	r3, [r3, #32]
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	4b31      	ldr	r3, [pc, #196]	; (8006394 <HAL_TIM_Encoder_Init+0x140>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	699b      	ldr	r3, [r3, #24]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	4313      	orrs	r3, r2
 80062e0:	693a      	ldr	r2, [r7, #16]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	4b2b      	ldr	r3, [pc, #172]	; (8006398 <HAL_TIM_Encoder_Init+0x144>)
 80062ea:	4013      	ands	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4b2a      	ldr	r3, [pc, #168]	; (800639c <HAL_TIM_Encoder_Init+0x148>)
 80062f2:	4013      	ands	r3, r2
 80062f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	68da      	ldr	r2, [r3, #12]
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	021b      	lsls	r3, r3, #8
 8006300:	4313      	orrs	r3, r2
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	011a      	lsls	r2, r3, #4
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	031b      	lsls	r3, r3, #12
 8006314:	4313      	orrs	r3, r2
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006322:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800632a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	695b      	ldr	r3, [r3, #20]
 8006334:	011b      	lsls	r3, r3, #4
 8006336:	4313      	orrs	r3, r2
 8006338:	68fa      	ldr	r2, [r7, #12]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	693a      	ldr	r2, [r7, #16]
 800634c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2201      	movs	r2, #1
 800635a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2201      	movs	r2, #1
 800636a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	fffebff8 	.word	0xfffebff8
 8006394:	fffffcfc 	.word	0xfffffcfc
 8006398:	fffff3f3 	.word	0xfffff3f3
 800639c:	ffff0f0f 	.word	0xffff0f0f

080063a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0202 	mvn.w	r2, #2
 80063cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa1a 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa0c 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa1d 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b04      	cmp	r3, #4
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b04      	cmp	r3, #4
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0204 	mvn.w	r2, #4
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 f9f0 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9e2 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 f9f3 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b08      	cmp	r3, #8
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b08      	cmp	r3, #8
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0208 	mvn.w	r2, #8
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2204      	movs	r2, #4
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 f9c6 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 f9b8 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f9c9 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0210 	mvn.w	r2, #16
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2208      	movs	r2, #8
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f99c 	bl	800681c <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f98e 	bl	8006808 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f99f 	bl	8006830 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10e      	bne.n	8006524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d107      	bne.n	8006524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0201 	mvn.w	r2, #1
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fa fe18 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d10e      	bne.n	8006550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d107      	bne.n	8006550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fd1a 	bl	8006f84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800655a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800655e:	d10e      	bne.n	800657e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800656a:	2b80      	cmp	r3, #128	; 0x80
 800656c:	d107      	bne.n	800657e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fd0d 	bl	8006f98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	691b      	ldr	r3, [r3, #16]
 8006584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006588:	2b40      	cmp	r3, #64	; 0x40
 800658a:	d10e      	bne.n	80065aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006596:	2b40      	cmp	r3, #64	; 0x40
 8006598:	d107      	bne.n	80065aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80065a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f94d 	bl	8006844 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	f003 0320 	and.w	r3, r3, #32
 80065b4:	2b20      	cmp	r3, #32
 80065b6:	d10e      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	f003 0320 	and.w	r3, r3, #32
 80065c2:	2b20      	cmp	r3, #32
 80065c4:	d107      	bne.n	80065d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f06f 0220 	mvn.w	r2, #32
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fccd 	bl	8006f70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
	...

080065e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065ec:	2300      	movs	r3, #0
 80065ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065f6:	2b01      	cmp	r3, #1
 80065f8:	d101      	bne.n	80065fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065fa:	2302      	movs	r3, #2
 80065fc:	e0ff      	b.n	80067fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2b14      	cmp	r3, #20
 800660a:	f200 80f0 	bhi.w	80067ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006669 	.word	0x08006669
 8006618:	080067ef 	.word	0x080067ef
 800661c:	080067ef 	.word	0x080067ef
 8006620:	080067ef 	.word	0x080067ef
 8006624:	080066a9 	.word	0x080066a9
 8006628:	080067ef 	.word	0x080067ef
 800662c:	080067ef 	.word	0x080067ef
 8006630:	080067ef 	.word	0x080067ef
 8006634:	080066eb 	.word	0x080066eb
 8006638:	080067ef 	.word	0x080067ef
 800663c:	080067ef 	.word	0x080067ef
 8006640:	080067ef 	.word	0x080067ef
 8006644:	0800672b 	.word	0x0800672b
 8006648:	080067ef 	.word	0x080067ef
 800664c:	080067ef 	.word	0x080067ef
 8006650:	080067ef 	.word	0x080067ef
 8006654:	0800676d 	.word	0x0800676d
 8006658:	080067ef 	.word	0x080067ef
 800665c:	080067ef 	.word	0x080067ef
 8006660:	080067ef 	.word	0x080067ef
 8006664:	080067ad 	.word	0x080067ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	4618      	mov	r0, r3
 8006670:	f000 f992 	bl	8006998 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	699a      	ldr	r2, [r3, #24]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0208 	orr.w	r2, r2, #8
 8006682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0204 	bic.w	r2, r2, #4
 8006692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	6999      	ldr	r1, [r3, #24]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	691a      	ldr	r2, [r3, #16]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	430a      	orrs	r2, r1
 80066a4:	619a      	str	r2, [r3, #24]
      break;
 80066a6:	e0a5      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	68b9      	ldr	r1, [r7, #8]
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 f9e4 	bl	8006a7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	699a      	ldr	r2, [r3, #24]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	699a      	ldr	r2, [r3, #24]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	6999      	ldr	r1, [r3, #24]
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	691b      	ldr	r3, [r3, #16]
 80066de:	021a      	lsls	r2, r3, #8
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	430a      	orrs	r2, r1
 80066e6:	619a      	str	r2, [r3, #24]
      break;
 80066e8:	e084      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68b9      	ldr	r1, [r7, #8]
 80066f0:	4618      	mov	r0, r3
 80066f2:	f000 fa3b 	bl	8006b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	69da      	ldr	r2, [r3, #28]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f042 0208 	orr.w	r2, r2, #8
 8006704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	69da      	ldr	r2, [r3, #28]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	f022 0204 	bic.w	r2, r2, #4
 8006714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	69d9      	ldr	r1, [r3, #28]
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	691a      	ldr	r2, [r3, #16]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	430a      	orrs	r2, r1
 8006726:	61da      	str	r2, [r3, #28]
      break;
 8006728:	e064      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68b9      	ldr	r1, [r7, #8]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 fa91 	bl	8006c58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	69da      	ldr	r2, [r3, #28]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	69da      	ldr	r2, [r3, #28]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	69d9      	ldr	r1, [r3, #28]
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	021a      	lsls	r2, r3, #8
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	61da      	str	r2, [r3, #28]
      break;
 800676a:	e043      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 fac8 	bl	8006d08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0208 	orr.w	r2, r2, #8
 8006786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067aa:	e023      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fafa 	bl	8006dac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	021a      	lsls	r2, r3, #8
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80067ec:	e002      	b.n	80067f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	75fb      	strb	r3, [r7, #23]
      break;
 80067f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop

08006808 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006810:	bf00      	nop
 8006812:	370c      	adds	r7, #12
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr

0800681c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006824:	bf00      	nop
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006838:	bf00      	nop
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800684c:	bf00      	nop
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006858:	b480      	push	{r7}
 800685a:	b085      	sub	sp, #20
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a40      	ldr	r2, [pc, #256]	; (800696c <TIM_Base_SetConfig+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006876:	d00f      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	4a3d      	ldr	r2, [pc, #244]	; (8006970 <TIM_Base_SetConfig+0x118>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d00b      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	4a3c      	ldr	r2, [pc, #240]	; (8006974 <TIM_Base_SetConfig+0x11c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d007      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a3b      	ldr	r2, [pc, #236]	; (8006978 <TIM_Base_SetConfig+0x120>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d003      	beq.n	8006898 <TIM_Base_SetConfig+0x40>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	4a3a      	ldr	r2, [pc, #232]	; (800697c <TIM_Base_SetConfig+0x124>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d108      	bne.n	80068aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800689e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	4313      	orrs	r3, r2
 80068a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	4a2f      	ldr	r2, [pc, #188]	; (800696c <TIM_Base_SetConfig+0x114>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d02b      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b8:	d027      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a2c      	ldr	r2, [pc, #176]	; (8006970 <TIM_Base_SetConfig+0x118>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d023      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a2b      	ldr	r2, [pc, #172]	; (8006974 <TIM_Base_SetConfig+0x11c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d01f      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4a2a      	ldr	r2, [pc, #168]	; (8006978 <TIM_Base_SetConfig+0x120>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d01b      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4a29      	ldr	r2, [pc, #164]	; (800697c <TIM_Base_SetConfig+0x124>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d017      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	4a28      	ldr	r2, [pc, #160]	; (8006980 <TIM_Base_SetConfig+0x128>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d013      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	4a27      	ldr	r2, [pc, #156]	; (8006984 <TIM_Base_SetConfig+0x12c>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d00f      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a26      	ldr	r2, [pc, #152]	; (8006988 <TIM_Base_SetConfig+0x130>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d00b      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a25      	ldr	r2, [pc, #148]	; (800698c <TIM_Base_SetConfig+0x134>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d007      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a24      	ldr	r2, [pc, #144]	; (8006990 <TIM_Base_SetConfig+0x138>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d003      	beq.n	800690a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a23      	ldr	r2, [pc, #140]	; (8006994 <TIM_Base_SetConfig+0x13c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d108      	bne.n	800691c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4313      	orrs	r3, r2
 800691a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	4313      	orrs	r3, r2
 8006928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	689a      	ldr	r2, [r3, #8]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	4a0a      	ldr	r2, [pc, #40]	; (800696c <TIM_Base_SetConfig+0x114>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d003      	beq.n	8006950 <TIM_Base_SetConfig+0xf8>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a0c      	ldr	r2, [pc, #48]	; (800697c <TIM_Base_SetConfig+0x124>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d103      	bne.n	8006958 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	691a      	ldr	r2, [r3, #16]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2201      	movs	r2, #1
 800695c:	615a      	str	r2, [r3, #20]
}
 800695e:	bf00      	nop
 8006960:	3714      	adds	r7, #20
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	40010000 	.word	0x40010000
 8006970:	40000400 	.word	0x40000400
 8006974:	40000800 	.word	0x40000800
 8006978:	40000c00 	.word	0x40000c00
 800697c:	40010400 	.word	0x40010400
 8006980:	40014000 	.word	0x40014000
 8006984:	40014400 	.word	0x40014400
 8006988:	40014800 	.word	0x40014800
 800698c:	40001800 	.word	0x40001800
 8006990:	40001c00 	.word	0x40001c00
 8006994:	40002000 	.word	0x40002000

08006998 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f023 0201 	bic.w	r2, r3, #1
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <TIM_OC1_SetConfig+0xd8>)
 80069c4:	4013      	ands	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0303 	bic.w	r3, r3, #3
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	f023 0302 	bic.w	r3, r3, #2
 80069e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4313      	orrs	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <TIM_OC1_SetConfig+0xdc>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_OC1_SetConfig+0x64>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a20      	ldr	r2, [pc, #128]	; (8006a78 <TIM_OC1_SetConfig+0xe0>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d10c      	bne.n	8006a16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f023 0308 	bic.w	r3, r3, #8
 8006a02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	697a      	ldr	r2, [r7, #20]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	f023 0304 	bic.w	r3, r3, #4
 8006a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	4a16      	ldr	r2, [pc, #88]	; (8006a74 <TIM_OC1_SetConfig+0xdc>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d003      	beq.n	8006a26 <TIM_OC1_SetConfig+0x8e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4a15      	ldr	r2, [pc, #84]	; (8006a78 <TIM_OC1_SetConfig+0xe0>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d111      	bne.n	8006a4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68fa      	ldr	r2, [r7, #12]
 8006a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	621a      	str	r2, [r3, #32]
}
 8006a64:	bf00      	nop
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	fffeff8f 	.word	0xfffeff8f
 8006a74:	40010000 	.word	0x40010000
 8006a78:	40010400 	.word	0x40010400

08006a7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	f023 0210 	bic.w	r2, r3, #16
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	4b2e      	ldr	r3, [pc, #184]	; (8006b60 <TIM_OC2_SetConfig+0xe4>)
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 0320 	bic.w	r3, r3, #32
 8006ac6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	011b      	lsls	r3, r3, #4
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a23      	ldr	r2, [pc, #140]	; (8006b64 <TIM_OC2_SetConfig+0xe8>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d003      	beq.n	8006ae4 <TIM_OC2_SetConfig+0x68>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <TIM_OC2_SetConfig+0xec>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d10d      	bne.n	8006b00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	011b      	lsls	r3, r3, #4
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006afe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a18      	ldr	r2, [pc, #96]	; (8006b64 <TIM_OC2_SetConfig+0xe8>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d003      	beq.n	8006b10 <TIM_OC2_SetConfig+0x94>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	4a17      	ldr	r2, [pc, #92]	; (8006b68 <TIM_OC2_SetConfig+0xec>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d113      	bne.n	8006b38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	695b      	ldr	r3, [r3, #20]
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	693a      	ldr	r2, [r7, #16]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	feff8fff 	.word	0xfeff8fff
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400

08006b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a1b      	ldr	r3, [r3, #32]
 8006b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685b      	ldr	r3, [r3, #4]
 8006b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	69db      	ldr	r3, [r3, #28]
 8006b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	4b2d      	ldr	r3, [pc, #180]	; (8006c4c <TIM_OC3_SetConfig+0xe0>)
 8006b98:	4013      	ands	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0303 	bic.w	r3, r3, #3
 8006ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	697a      	ldr	r2, [r7, #20]
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a22      	ldr	r2, [pc, #136]	; (8006c50 <TIM_OC3_SetConfig+0xe4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_OC3_SetConfig+0x66>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a21      	ldr	r2, [pc, #132]	; (8006c54 <TIM_OC3_SetConfig+0xe8>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d10d      	bne.n	8006bee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	68db      	ldr	r3, [r3, #12]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a17      	ldr	r2, [pc, #92]	; (8006c50 <TIM_OC3_SetConfig+0xe4>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d003      	beq.n	8006bfe <TIM_OC3_SetConfig+0x92>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a16      	ldr	r2, [pc, #88]	; (8006c54 <TIM_OC3_SetConfig+0xe8>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d113      	bne.n	8006c26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	695b      	ldr	r3, [r3, #20]
 8006c12:	011b      	lsls	r3, r3, #4
 8006c14:	693a      	ldr	r2, [r7, #16]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	011b      	lsls	r3, r3, #4
 8006c20:	693a      	ldr	r2, [r7, #16]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	697a      	ldr	r2, [r7, #20]
 8006c3e:	621a      	str	r2, [r3, #32]
}
 8006c40:	bf00      	nop
 8006c42:	371c      	adds	r7, #28
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr
 8006c4c:	fffeff8f 	.word	0xfffeff8f
 8006c50:	40010000 	.word	0x40010000
 8006c54:	40010400 	.word	0x40010400

08006c58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a1b      	ldr	r3, [r3, #32]
 8006c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	4b1e      	ldr	r3, [pc, #120]	; (8006cfc <TIM_OC4_SetConfig+0xa4>)
 8006c84:	4013      	ands	r3, r2
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	031b      	lsls	r3, r3, #12
 8006caa:	693a      	ldr	r2, [r7, #16]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a13      	ldr	r2, [pc, #76]	; (8006d00 <TIM_OC4_SetConfig+0xa8>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d003      	beq.n	8006cc0 <TIM_OC4_SetConfig+0x68>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	4a12      	ldr	r2, [pc, #72]	; (8006d04 <TIM_OC4_SetConfig+0xac>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d109      	bne.n	8006cd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	695b      	ldr	r3, [r3, #20]
 8006ccc:	019b      	lsls	r3, r3, #6
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	621a      	str	r2, [r3, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	371c      	adds	r7, #28
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	feff8fff 	.word	0xfeff8fff
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400

08006d08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d30:	68fa      	ldr	r2, [r7, #12]
 8006d32:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <TIM_OC5_SetConfig+0x98>)
 8006d34:	4013      	ands	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	041b      	lsls	r3, r3, #16
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a12      	ldr	r2, [pc, #72]	; (8006da4 <TIM_OC5_SetConfig+0x9c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d003      	beq.n	8006d66 <TIM_OC5_SetConfig+0x5e>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a11      	ldr	r2, [pc, #68]	; (8006da8 <TIM_OC5_SetConfig+0xa0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d109      	bne.n	8006d7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	695b      	ldr	r3, [r3, #20]
 8006d72:	021b      	lsls	r3, r3, #8
 8006d74:	697a      	ldr	r2, [r7, #20]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	621a      	str	r2, [r3, #32]
}
 8006d94:	bf00      	nop
 8006d96:	371c      	adds	r7, #28
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr
 8006da0:	fffeff8f 	.word	0xfffeff8f
 8006da4:	40010000 	.word	0x40010000
 8006da8:	40010400 	.word	0x40010400

08006dac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b087      	sub	sp, #28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	4b1c      	ldr	r3, [pc, #112]	; (8006e48 <TIM_OC6_SetConfig+0x9c>)
 8006dd8:	4013      	ands	r3, r2
 8006dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a13      	ldr	r2, [pc, #76]	; (8006e4c <TIM_OC6_SetConfig+0xa0>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_OC6_SetConfig+0x60>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a12      	ldr	r2, [pc, #72]	; (8006e50 <TIM_OC6_SetConfig+0xa4>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d109      	bne.n	8006e20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	029b      	lsls	r3, r3, #10
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	feff8fff 	.word	0xfeff8fff
 8006e4c:	40010000 	.word	0x40010000
 8006e50:	40010400 	.word	0x40010400

08006e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d101      	bne.n	8006e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	e06d      	b.n	8006f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2202      	movs	r2, #2
 8006e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	685b      	ldr	r3, [r3, #4]
 8006e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a30      	ldr	r2, [pc, #192]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d004      	beq.n	8006ea0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a2f      	ldr	r2, [pc, #188]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d108      	bne.n	8006eb2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006ea6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68fa      	ldr	r2, [r7, #12]
 8006eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a20      	ldr	r2, [pc, #128]	; (8006f54 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d022      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ede:	d01d      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a1d      	ldr	r2, [pc, #116]	; (8006f5c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d018      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a1c      	ldr	r2, [pc, #112]	; (8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d013      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a1a      	ldr	r2, [pc, #104]	; (8006f64 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d00e      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a15      	ldr	r2, [pc, #84]	; (8006f58 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d009      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a16      	ldr	r2, [pc, #88]	; (8006f68 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a15      	ldr	r2, [pc, #84]	; (8006f6c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d10c      	bne.n	8006f36 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f22:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2201      	movs	r2, #1
 8006f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2200      	movs	r2, #0
 8006f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3714      	adds	r7, #20
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40010000 	.word	0x40010000
 8006f58:	40010400 	.word	0x40010400
 8006f5c:	40000400 	.word	0x40000400
 8006f60:	40000800 	.word	0x40000800
 8006f64:	40000c00 	.word	0x40000c00
 8006f68:	40014000 	.word	0x40014000
 8006f6c:	40001800 	.word	0x40001800

08006f70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b083      	sub	sp, #12
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006fa0:	bf00      	nop
 8006fa2:	370c      	adds	r7, #12
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006faa:	4770      	bx	lr

08006fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e040      	b.n	8007040 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d106      	bne.n	8006fd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f7fa fd0a 	bl	80019e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2224      	movs	r2, #36	; 0x24
 8006fd8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0201 	bic.w	r2, r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 fbca 	bl	8007784 <UART_SetConfig>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d101      	bne.n	8006ffa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e022      	b.n	8007040 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d002      	beq.n	8007008 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fe20 	bl	8007c48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685a      	ldr	r2, [r3, #4]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007016:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007026:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 fea7 	bl	8007d8c <UART_CheckIdleState>
 800703e:	4603      	mov	r3, r0
}
 8007040:	4618      	mov	r0, r3
 8007042:	3708      	adds	r7, #8
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}

08007048 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b08a      	sub	sp, #40	; 0x28
 800704c:	af02      	add	r7, sp, #8
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	603b      	str	r3, [r7, #0]
 8007054:	4613      	mov	r3, r2
 8007056:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800705c:	2b20      	cmp	r3, #32
 800705e:	f040 8081 	bne.w	8007164 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_UART_Transmit+0x26>
 8007068:	88fb      	ldrh	r3, [r7, #6]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d101      	bne.n	8007072 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e079      	b.n	8007166 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_UART_Transmit+0x38>
 800707c:	2302      	movs	r3, #2
 800707e:	e072      	b.n	8007166 <HAL_UART_Transmit+0x11e>
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2221      	movs	r2, #33	; 0x21
 8007094:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007096:	f7fa ff79 	bl	8001f8c <HAL_GetTick>
 800709a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	88fa      	ldrh	r2, [r7, #6]
 80070a0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	88fa      	ldrh	r2, [r7, #6]
 80070a8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b4:	d108      	bne.n	80070c8 <HAL_UART_Transmit+0x80>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d104      	bne.n	80070c8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80070be:	2300      	movs	r3, #0
 80070c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	e003      	b.n	80070d0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80070cc:	2300      	movs	r3, #0
 80070ce:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80070d8:	e02c      	b.n	8007134 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	2200      	movs	r2, #0
 80070e2:	2180      	movs	r1, #128	; 0x80
 80070e4:	68f8      	ldr	r0, [r7, #12]
 80070e6:	f000 fe9a 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d001      	beq.n	80070f4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80070f0:	2303      	movs	r3, #3
 80070f2:	e038      	b.n	8007166 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80070f4:	69fb      	ldr	r3, [r7, #28]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d10b      	bne.n	8007112 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	881b      	ldrh	r3, [r3, #0]
 80070fe:	461a      	mov	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007108:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	3302      	adds	r3, #2
 800710e:	61bb      	str	r3, [r7, #24]
 8007110:	e007      	b.n	8007122 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	781a      	ldrb	r2, [r3, #0]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	3301      	adds	r3, #1
 8007120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007128:	b29b      	uxth	r3, r3
 800712a:	3b01      	subs	r3, #1
 800712c:	b29a      	uxth	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800713a:	b29b      	uxth	r3, r3
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1cc      	bne.n	80070da <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	9300      	str	r3, [sp, #0]
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	2200      	movs	r2, #0
 8007148:	2140      	movs	r1, #64	; 0x40
 800714a:	68f8      	ldr	r0, [r7, #12]
 800714c:	f000 fe67 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007150:	4603      	mov	r3, r0
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e005      	b.n	8007166 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2220      	movs	r2, #32
 800715e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007160:	2300      	movs	r3, #0
 8007162:	e000      	b.n	8007166 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007164:	2302      	movs	r3, #2
  }
}
 8007166:	4618      	mov	r0, r3
 8007168:	3720      	adds	r7, #32
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
	...

08007170 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b0ba      	sub	sp, #232	; 0xe8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007196:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800719a:	f640 030f 	movw	r3, #2063	; 0x80f
 800719e:	4013      	ands	r3, r2
 80071a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80071a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d115      	bne.n	80071d8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80071ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00f      	beq.n	80071d8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80071b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071bc:	f003 0320 	and.w	r3, r3, #32
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d009      	beq.n	80071d8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 82a4 	beq.w	8007716 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	4798      	blx	r3
      }
      return;
 80071d6:	e29e      	b.n	8007716 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80071d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8117 	beq.w	8007410 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d106      	bne.n	80071fc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071f2:	4b85      	ldr	r3, [pc, #532]	; (8007408 <HAL_UART_IRQHandler+0x298>)
 80071f4:	4013      	ands	r3, r2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	f000 810a 	beq.w	8007410 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d011      	beq.n	800722c <HAL_UART_IRQHandler+0xbc>
 8007208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00b      	beq.n	800722c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2201      	movs	r2, #1
 800721a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007222:	f043 0201 	orr.w	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800722c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007230:	f003 0302 	and.w	r3, r3, #2
 8007234:	2b00      	cmp	r3, #0
 8007236:	d011      	beq.n	800725c <HAL_UART_IRQHandler+0xec>
 8007238:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2202      	movs	r2, #2
 800724a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007252:	f043 0204 	orr.w	r2, r3, #4
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800725c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d011      	beq.n	800728c <HAL_UART_IRQHandler+0x11c>
 8007268:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800726c:	f003 0301 	and.w	r3, r3, #1
 8007270:	2b00      	cmp	r3, #0
 8007272:	d00b      	beq.n	800728c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2204      	movs	r2, #4
 800727a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007282:	f043 0202 	orr.w	r2, r3, #2
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800728c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007290:	f003 0308 	and.w	r3, r3, #8
 8007294:	2b00      	cmp	r3, #0
 8007296:	d017      	beq.n	80072c8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800729c:	f003 0320 	and.w	r3, r3, #32
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d105      	bne.n	80072b0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80072a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072a8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00b      	beq.n	80072c8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2208      	movs	r2, #8
 80072b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072be:	f043 0208 	orr.w	r2, r3, #8
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d012      	beq.n	80072fa <HAL_UART_IRQHandler+0x18a>
 80072d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00c      	beq.n	80072fa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f0:	f043 0220 	orr.w	r2, r3, #32
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007300:	2b00      	cmp	r3, #0
 8007302:	f000 820a 	beq.w	800771a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730a:	f003 0320 	and.w	r3, r3, #32
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00d      	beq.n	800732e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007312:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007316:	f003 0320 	and.w	r3, r3, #32
 800731a:	2b00      	cmp	r3, #0
 800731c:	d007      	beq.n	800732e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007334:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007342:	2b40      	cmp	r3, #64	; 0x40
 8007344:	d005      	beq.n	8007352 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800734a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04f      	beq.n	80073f2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 fe27 	bl	8007fa6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b40      	cmp	r3, #64	; 0x40
 8007364:	d141      	bne.n	80073ea <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	3308      	adds	r3, #8
 800736c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007374:	e853 3f00 	ldrex	r3, [r3]
 8007378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800737c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007380:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007384:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	3308      	adds	r3, #8
 800738e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007392:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007396:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800739e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073a2:	e841 2300 	strex	r3, r2, [r1]
 80073a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d1d9      	bne.n	8007366 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d013      	beq.n	80073e2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	4a13      	ldr	r2, [pc, #76]	; (800740c <HAL_UART_IRQHandler+0x29c>)
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fb fdd8 	bl	8002f7c <HAL_DMA_Abort_IT>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d017      	beq.n	8007402 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80073dc:	4610      	mov	r0, r2
 80073de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e0:	e00f      	b.n	8007402 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f000 f9ae 	bl	8007744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073e8:	e00b      	b.n	8007402 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f9aa 	bl	8007744 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f0:	e007      	b.n	8007402 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f9a6 	bl	8007744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2200      	movs	r2, #0
 80073fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007400:	e18b      	b.n	800771a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007402:	bf00      	nop
    return;
 8007404:	e189      	b.n	800771a <HAL_UART_IRQHandler+0x5aa>
 8007406:	bf00      	nop
 8007408:	04000120 	.word	0x04000120
 800740c:	0800806d 	.word	0x0800806d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007414:	2b01      	cmp	r3, #1
 8007416:	f040 8144 	bne.w	80076a2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800741a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800741e:	f003 0310 	and.w	r3, r3, #16
 8007422:	2b00      	cmp	r3, #0
 8007424:	f000 813d 	beq.w	80076a2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800742c:	f003 0310 	and.w	r3, r3, #16
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 8136 	beq.w	80076a2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2210      	movs	r2, #16
 800743c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	f040 80b2 	bne.w	80075b2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800745a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 815d 	beq.w	800771e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800746a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800746e:	429a      	cmp	r2, r3
 8007470:	f080 8155 	bcs.w	800771e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800747a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007482:	69db      	ldr	r3, [r3, #28]
 8007484:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007488:	f000 8085 	beq.w	8007596 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007494:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007498:	e853 3f00 	ldrex	r3, [r3]
 800749c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	461a      	mov	r2, r3
 80074b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80074b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80074ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074c6:	e841 2300 	strex	r3, r2, [r1]
 80074ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1da      	bne.n	800748c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3308      	adds	r3, #8
 80074dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074e0:	e853 3f00 	ldrex	r3, [r3]
 80074e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074e8:	f023 0301 	bic.w	r3, r3, #1
 80074ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007500:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007502:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007506:	e841 2300 	strex	r3, r2, [r1]
 800750a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800750c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1e1      	bne.n	80074d6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	3308      	adds	r3, #8
 8007518:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800751a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800751c:	e853 3f00 	ldrex	r3, [r3]
 8007520:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007522:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007524:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3308      	adds	r3, #8
 8007532:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007536:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007538:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800753c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800753e:	e841 2300 	strex	r3, r2, [r1]
 8007542:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007544:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1e3      	bne.n	8007512 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2220      	movs	r2, #32
 800754e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800755e:	e853 3f00 	ldrex	r3, [r3]
 8007562:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007566:	f023 0310 	bic.w	r3, r3, #16
 800756a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	461a      	mov	r2, r3
 8007574:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007578:	65bb      	str	r3, [r7, #88]	; 0x58
 800757a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800757e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e4      	bne.n	8007556 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007590:	4618      	mov	r0, r3
 8007592:	f7fb fc83 	bl	8002e9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f8d4 	bl	8007758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80075b0:	e0b5      	b.n	800771e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80a7 	beq.w	8007722 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80075d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 80a2 	beq.w	8007722 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007600:	647b      	str	r3, [r7, #68]	; 0x44
 8007602:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007604:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007606:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007608:	e841 2300 	strex	r3, r2, [r1]
 800760c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800760e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007610:	2b00      	cmp	r3, #0
 8007612:	d1e4      	bne.n	80075de <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3308      	adds	r3, #8
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	e853 3f00 	ldrex	r3, [r3]
 8007622:	623b      	str	r3, [r7, #32]
   return(result);
 8007624:	6a3b      	ldr	r3, [r7, #32]
 8007626:	f023 0301 	bic.w	r3, r3, #1
 800762a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	3308      	adds	r3, #8
 8007634:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007638:	633a      	str	r2, [r7, #48]	; 0x30
 800763a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800763e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007640:	e841 2300 	strex	r3, r2, [r1]
 8007644:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1e3      	bne.n	8007614 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	e853 3f00 	ldrex	r3, [r3]
 800766a:	60fb      	str	r3, [r7, #12]
   return(result);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	f023 0310 	bic.w	r3, r3, #16
 8007672:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	69b9      	ldr	r1, [r7, #24]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	617b      	str	r3, [r7, #20]
   return(result);
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e4      	bne.n	800765e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007694:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 f85c 	bl	8007758 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076a0:	e03f      	b.n	8007722 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00e      	beq.n	80076cc <HAL_UART_IRQHandler+0x55c>
 80076ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f853 	bl	8007770 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076ca:	e02d      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00e      	beq.n	80076f6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d008      	beq.n	80076f6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d01c      	beq.n	8007726 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
    }
    return;
 80076f4:	e017      	b.n	8007726 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d012      	beq.n	8007728 <HAL_UART_IRQHandler+0x5b8>
 8007702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00c      	beq.n	8007728 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fcc2 	bl	8008098 <UART_EndTransmit_IT>
    return;
 8007714:	e008      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007716:	bf00      	nop
 8007718:	e006      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
    return;
 800771a:	bf00      	nop
 800771c:	e004      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
      return;
 800771e:	bf00      	nop
 8007720:	e002      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007722:	bf00      	nop
 8007724:	e000      	b.n	8007728 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007726:	bf00      	nop
  }

}
 8007728:	37e8      	adds	r7, #232	; 0xe8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop

08007730 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007730:	b480      	push	{r7}
 8007732:	b083      	sub	sp, #12
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007738:	bf00      	nop
 800773a:	370c      	adds	r7, #12
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b088      	sub	sp, #32
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800778c:	2300      	movs	r3, #0
 800778e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689a      	ldr	r2, [r3, #8]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	431a      	orrs	r2, r3
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	4313      	orrs	r3, r2
 80077a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4ba7      	ldr	r3, [pc, #668]	; (8007a4c <UART_SetConfig+0x2c8>)
 80077b0:	4013      	ands	r3, r2
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	6812      	ldr	r2, [r2, #0]
 80077b6:	6979      	ldr	r1, [r7, #20]
 80077b8:	430b      	orrs	r3, r1
 80077ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68da      	ldr	r2, [r3, #12]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	699b      	ldr	r3, [r3, #24]
 80077d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	4313      	orrs	r3, r2
 80077e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a95      	ldr	r2, [pc, #596]	; (8007a50 <UART_SetConfig+0x2cc>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d120      	bne.n	8007842 <UART_SetConfig+0xbe>
 8007800:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <UART_SetConfig+0x2d0>)
 8007802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	2b03      	cmp	r3, #3
 800780c:	d816      	bhi.n	800783c <UART_SetConfig+0xb8>
 800780e:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <UART_SetConfig+0x90>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	08007825 	.word	0x08007825
 8007818:	08007831 	.word	0x08007831
 800781c:	0800782b 	.word	0x0800782b
 8007820:	08007837 	.word	0x08007837
 8007824:	2301      	movs	r3, #1
 8007826:	77fb      	strb	r3, [r7, #31]
 8007828:	e14f      	b.n	8007aca <UART_SetConfig+0x346>
 800782a:	2302      	movs	r3, #2
 800782c:	77fb      	strb	r3, [r7, #31]
 800782e:	e14c      	b.n	8007aca <UART_SetConfig+0x346>
 8007830:	2304      	movs	r3, #4
 8007832:	77fb      	strb	r3, [r7, #31]
 8007834:	e149      	b.n	8007aca <UART_SetConfig+0x346>
 8007836:	2308      	movs	r3, #8
 8007838:	77fb      	strb	r3, [r7, #31]
 800783a:	e146      	b.n	8007aca <UART_SetConfig+0x346>
 800783c:	2310      	movs	r3, #16
 800783e:	77fb      	strb	r3, [r7, #31]
 8007840:	e143      	b.n	8007aca <UART_SetConfig+0x346>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a84      	ldr	r2, [pc, #528]	; (8007a58 <UART_SetConfig+0x2d4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d132      	bne.n	80078b2 <UART_SetConfig+0x12e>
 800784c:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <UART_SetConfig+0x2d0>)
 800784e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007852:	f003 030c 	and.w	r3, r3, #12
 8007856:	2b0c      	cmp	r3, #12
 8007858:	d828      	bhi.n	80078ac <UART_SetConfig+0x128>
 800785a:	a201      	add	r2, pc, #4	; (adr r2, 8007860 <UART_SetConfig+0xdc>)
 800785c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007860:	08007895 	.word	0x08007895
 8007864:	080078ad 	.word	0x080078ad
 8007868:	080078ad 	.word	0x080078ad
 800786c:	080078ad 	.word	0x080078ad
 8007870:	080078a1 	.word	0x080078a1
 8007874:	080078ad 	.word	0x080078ad
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080078ad 	.word	0x080078ad
 8007880:	0800789b 	.word	0x0800789b
 8007884:	080078ad 	.word	0x080078ad
 8007888:	080078ad 	.word	0x080078ad
 800788c:	080078ad 	.word	0x080078ad
 8007890:	080078a7 	.word	0x080078a7
 8007894:	2300      	movs	r3, #0
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e117      	b.n	8007aca <UART_SetConfig+0x346>
 800789a:	2302      	movs	r3, #2
 800789c:	77fb      	strb	r3, [r7, #31]
 800789e:	e114      	b.n	8007aca <UART_SetConfig+0x346>
 80078a0:	2304      	movs	r3, #4
 80078a2:	77fb      	strb	r3, [r7, #31]
 80078a4:	e111      	b.n	8007aca <UART_SetConfig+0x346>
 80078a6:	2308      	movs	r3, #8
 80078a8:	77fb      	strb	r3, [r7, #31]
 80078aa:	e10e      	b.n	8007aca <UART_SetConfig+0x346>
 80078ac:	2310      	movs	r3, #16
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e10b      	b.n	8007aca <UART_SetConfig+0x346>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a69      	ldr	r2, [pc, #420]	; (8007a5c <UART_SetConfig+0x2d8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d120      	bne.n	80078fe <UART_SetConfig+0x17a>
 80078bc:	4b65      	ldr	r3, [pc, #404]	; (8007a54 <UART_SetConfig+0x2d0>)
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80078c6:	2b30      	cmp	r3, #48	; 0x30
 80078c8:	d013      	beq.n	80078f2 <UART_SetConfig+0x16e>
 80078ca:	2b30      	cmp	r3, #48	; 0x30
 80078cc:	d814      	bhi.n	80078f8 <UART_SetConfig+0x174>
 80078ce:	2b20      	cmp	r3, #32
 80078d0:	d009      	beq.n	80078e6 <UART_SetConfig+0x162>
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d810      	bhi.n	80078f8 <UART_SetConfig+0x174>
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <UART_SetConfig+0x15c>
 80078da:	2b10      	cmp	r3, #16
 80078dc:	d006      	beq.n	80078ec <UART_SetConfig+0x168>
 80078de:	e00b      	b.n	80078f8 <UART_SetConfig+0x174>
 80078e0:	2300      	movs	r3, #0
 80078e2:	77fb      	strb	r3, [r7, #31]
 80078e4:	e0f1      	b.n	8007aca <UART_SetConfig+0x346>
 80078e6:	2302      	movs	r3, #2
 80078e8:	77fb      	strb	r3, [r7, #31]
 80078ea:	e0ee      	b.n	8007aca <UART_SetConfig+0x346>
 80078ec:	2304      	movs	r3, #4
 80078ee:	77fb      	strb	r3, [r7, #31]
 80078f0:	e0eb      	b.n	8007aca <UART_SetConfig+0x346>
 80078f2:	2308      	movs	r3, #8
 80078f4:	77fb      	strb	r3, [r7, #31]
 80078f6:	e0e8      	b.n	8007aca <UART_SetConfig+0x346>
 80078f8:	2310      	movs	r3, #16
 80078fa:	77fb      	strb	r3, [r7, #31]
 80078fc:	e0e5      	b.n	8007aca <UART_SetConfig+0x346>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a57      	ldr	r2, [pc, #348]	; (8007a60 <UART_SetConfig+0x2dc>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d120      	bne.n	800794a <UART_SetConfig+0x1c6>
 8007908:	4b52      	ldr	r3, [pc, #328]	; (8007a54 <UART_SetConfig+0x2d0>)
 800790a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800790e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007912:	2bc0      	cmp	r3, #192	; 0xc0
 8007914:	d013      	beq.n	800793e <UART_SetConfig+0x1ba>
 8007916:	2bc0      	cmp	r3, #192	; 0xc0
 8007918:	d814      	bhi.n	8007944 <UART_SetConfig+0x1c0>
 800791a:	2b80      	cmp	r3, #128	; 0x80
 800791c:	d009      	beq.n	8007932 <UART_SetConfig+0x1ae>
 800791e:	2b80      	cmp	r3, #128	; 0x80
 8007920:	d810      	bhi.n	8007944 <UART_SetConfig+0x1c0>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d002      	beq.n	800792c <UART_SetConfig+0x1a8>
 8007926:	2b40      	cmp	r3, #64	; 0x40
 8007928:	d006      	beq.n	8007938 <UART_SetConfig+0x1b4>
 800792a:	e00b      	b.n	8007944 <UART_SetConfig+0x1c0>
 800792c:	2300      	movs	r3, #0
 800792e:	77fb      	strb	r3, [r7, #31]
 8007930:	e0cb      	b.n	8007aca <UART_SetConfig+0x346>
 8007932:	2302      	movs	r3, #2
 8007934:	77fb      	strb	r3, [r7, #31]
 8007936:	e0c8      	b.n	8007aca <UART_SetConfig+0x346>
 8007938:	2304      	movs	r3, #4
 800793a:	77fb      	strb	r3, [r7, #31]
 800793c:	e0c5      	b.n	8007aca <UART_SetConfig+0x346>
 800793e:	2308      	movs	r3, #8
 8007940:	77fb      	strb	r3, [r7, #31]
 8007942:	e0c2      	b.n	8007aca <UART_SetConfig+0x346>
 8007944:	2310      	movs	r3, #16
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e0bf      	b.n	8007aca <UART_SetConfig+0x346>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a45      	ldr	r2, [pc, #276]	; (8007a64 <UART_SetConfig+0x2e0>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d125      	bne.n	80079a0 <UART_SetConfig+0x21c>
 8007954:	4b3f      	ldr	r3, [pc, #252]	; (8007a54 <UART_SetConfig+0x2d0>)
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007962:	d017      	beq.n	8007994 <UART_SetConfig+0x210>
 8007964:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007968:	d817      	bhi.n	800799a <UART_SetConfig+0x216>
 800796a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800796e:	d00b      	beq.n	8007988 <UART_SetConfig+0x204>
 8007970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007974:	d811      	bhi.n	800799a <UART_SetConfig+0x216>
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <UART_SetConfig+0x1fe>
 800797a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797e:	d006      	beq.n	800798e <UART_SetConfig+0x20a>
 8007980:	e00b      	b.n	800799a <UART_SetConfig+0x216>
 8007982:	2300      	movs	r3, #0
 8007984:	77fb      	strb	r3, [r7, #31]
 8007986:	e0a0      	b.n	8007aca <UART_SetConfig+0x346>
 8007988:	2302      	movs	r3, #2
 800798a:	77fb      	strb	r3, [r7, #31]
 800798c:	e09d      	b.n	8007aca <UART_SetConfig+0x346>
 800798e:	2304      	movs	r3, #4
 8007990:	77fb      	strb	r3, [r7, #31]
 8007992:	e09a      	b.n	8007aca <UART_SetConfig+0x346>
 8007994:	2308      	movs	r3, #8
 8007996:	77fb      	strb	r3, [r7, #31]
 8007998:	e097      	b.n	8007aca <UART_SetConfig+0x346>
 800799a:	2310      	movs	r3, #16
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e094      	b.n	8007aca <UART_SetConfig+0x346>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a30      	ldr	r2, [pc, #192]	; (8007a68 <UART_SetConfig+0x2e4>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d125      	bne.n	80079f6 <UART_SetConfig+0x272>
 80079aa:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <UART_SetConfig+0x2d0>)
 80079ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80079b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079b8:	d017      	beq.n	80079ea <UART_SetConfig+0x266>
 80079ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80079be:	d817      	bhi.n	80079f0 <UART_SetConfig+0x26c>
 80079c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c4:	d00b      	beq.n	80079de <UART_SetConfig+0x25a>
 80079c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079ca:	d811      	bhi.n	80079f0 <UART_SetConfig+0x26c>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d003      	beq.n	80079d8 <UART_SetConfig+0x254>
 80079d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079d4:	d006      	beq.n	80079e4 <UART_SetConfig+0x260>
 80079d6:	e00b      	b.n	80079f0 <UART_SetConfig+0x26c>
 80079d8:	2301      	movs	r3, #1
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e075      	b.n	8007aca <UART_SetConfig+0x346>
 80079de:	2302      	movs	r3, #2
 80079e0:	77fb      	strb	r3, [r7, #31]
 80079e2:	e072      	b.n	8007aca <UART_SetConfig+0x346>
 80079e4:	2304      	movs	r3, #4
 80079e6:	77fb      	strb	r3, [r7, #31]
 80079e8:	e06f      	b.n	8007aca <UART_SetConfig+0x346>
 80079ea:	2308      	movs	r3, #8
 80079ec:	77fb      	strb	r3, [r7, #31]
 80079ee:	e06c      	b.n	8007aca <UART_SetConfig+0x346>
 80079f0:	2310      	movs	r3, #16
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e069      	b.n	8007aca <UART_SetConfig+0x346>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a1c      	ldr	r2, [pc, #112]	; (8007a6c <UART_SetConfig+0x2e8>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d137      	bne.n	8007a70 <UART_SetConfig+0x2ec>
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <UART_SetConfig+0x2d0>)
 8007a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a06:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a0a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a0e:	d017      	beq.n	8007a40 <UART_SetConfig+0x2bc>
 8007a10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a14:	d817      	bhi.n	8007a46 <UART_SetConfig+0x2c2>
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1a:	d00b      	beq.n	8007a34 <UART_SetConfig+0x2b0>
 8007a1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a20:	d811      	bhi.n	8007a46 <UART_SetConfig+0x2c2>
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <UART_SetConfig+0x2aa>
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d006      	beq.n	8007a3a <UART_SetConfig+0x2b6>
 8007a2c:	e00b      	b.n	8007a46 <UART_SetConfig+0x2c2>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e04a      	b.n	8007aca <UART_SetConfig+0x346>
 8007a34:	2302      	movs	r3, #2
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e047      	b.n	8007aca <UART_SetConfig+0x346>
 8007a3a:	2304      	movs	r3, #4
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e044      	b.n	8007aca <UART_SetConfig+0x346>
 8007a40:	2308      	movs	r3, #8
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e041      	b.n	8007aca <UART_SetConfig+0x346>
 8007a46:	2310      	movs	r3, #16
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e03e      	b.n	8007aca <UART_SetConfig+0x346>
 8007a4c:	efff69f3 	.word	0xefff69f3
 8007a50:	40011000 	.word	0x40011000
 8007a54:	40023800 	.word	0x40023800
 8007a58:	40004400 	.word	0x40004400
 8007a5c:	40004800 	.word	0x40004800
 8007a60:	40004c00 	.word	0x40004c00
 8007a64:	40005000 	.word	0x40005000
 8007a68:	40011400 	.word	0x40011400
 8007a6c:	40007800 	.word	0x40007800
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a71      	ldr	r2, [pc, #452]	; (8007c3c <UART_SetConfig+0x4b8>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d125      	bne.n	8007ac6 <UART_SetConfig+0x342>
 8007a7a:	4b71      	ldr	r3, [pc, #452]	; (8007c40 <UART_SetConfig+0x4bc>)
 8007a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a80:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007a84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a88:	d017      	beq.n	8007aba <UART_SetConfig+0x336>
 8007a8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007a8e:	d817      	bhi.n	8007ac0 <UART_SetConfig+0x33c>
 8007a90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a94:	d00b      	beq.n	8007aae <UART_SetConfig+0x32a>
 8007a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a9a:	d811      	bhi.n	8007ac0 <UART_SetConfig+0x33c>
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <UART_SetConfig+0x324>
 8007aa0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007aa4:	d006      	beq.n	8007ab4 <UART_SetConfig+0x330>
 8007aa6:	e00b      	b.n	8007ac0 <UART_SetConfig+0x33c>
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	77fb      	strb	r3, [r7, #31]
 8007aac:	e00d      	b.n	8007aca <UART_SetConfig+0x346>
 8007aae:	2302      	movs	r3, #2
 8007ab0:	77fb      	strb	r3, [r7, #31]
 8007ab2:	e00a      	b.n	8007aca <UART_SetConfig+0x346>
 8007ab4:	2304      	movs	r3, #4
 8007ab6:	77fb      	strb	r3, [r7, #31]
 8007ab8:	e007      	b.n	8007aca <UART_SetConfig+0x346>
 8007aba:	2308      	movs	r3, #8
 8007abc:	77fb      	strb	r3, [r7, #31]
 8007abe:	e004      	b.n	8007aca <UART_SetConfig+0x346>
 8007ac0:	2310      	movs	r3, #16
 8007ac2:	77fb      	strb	r3, [r7, #31]
 8007ac4:	e001      	b.n	8007aca <UART_SetConfig+0x346>
 8007ac6:	2310      	movs	r3, #16
 8007ac8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ad2:	d15a      	bne.n	8007b8a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007ad4:	7ffb      	ldrb	r3, [r7, #31]
 8007ad6:	2b08      	cmp	r3, #8
 8007ad8:	d827      	bhi.n	8007b2a <UART_SetConfig+0x3a6>
 8007ada:	a201      	add	r2, pc, #4	; (adr r2, 8007ae0 <UART_SetConfig+0x35c>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b0d 	.word	0x08007b0d
 8007ae8:	08007b15 	.word	0x08007b15
 8007aec:	08007b2b 	.word	0x08007b2b
 8007af0:	08007b1b 	.word	0x08007b1b
 8007af4:	08007b2b 	.word	0x08007b2b
 8007af8:	08007b2b 	.word	0x08007b2b
 8007afc:	08007b2b 	.word	0x08007b2b
 8007b00:	08007b23 	.word	0x08007b23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b04:	f7fd fdf2 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007b08:	61b8      	str	r0, [r7, #24]
        break;
 8007b0a:	e013      	b.n	8007b34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b0c:	f7fd fe02 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007b10:	61b8      	str	r0, [r7, #24]
        break;
 8007b12:	e00f      	b.n	8007b34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b14:	4b4b      	ldr	r3, [pc, #300]	; (8007c44 <UART_SetConfig+0x4c0>)
 8007b16:	61bb      	str	r3, [r7, #24]
        break;
 8007b18:	e00c      	b.n	8007b34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b1a:	f7fd fcf9 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 8007b1e:	61b8      	str	r0, [r7, #24]
        break;
 8007b20:	e008      	b.n	8007b34 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b26:	61bb      	str	r3, [r7, #24]
        break;
 8007b28:	e004      	b.n	8007b34 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	77bb      	strb	r3, [r7, #30]
        break;
 8007b32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d074      	beq.n	8007c24 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	005a      	lsls	r2, r3, #1
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	085b      	lsrs	r3, r3, #1
 8007b44:	441a      	add	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b4e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b0f      	cmp	r3, #15
 8007b54:	d916      	bls.n	8007b84 <UART_SetConfig+0x400>
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b5c:	d212      	bcs.n	8007b84 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f023 030f 	bic.w	r3, r3, #15
 8007b66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	085b      	lsrs	r3, r3, #1
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	b29a      	uxth	r2, r3
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	89fa      	ldrh	r2, [r7, #14]
 8007b80:	60da      	str	r2, [r3, #12]
 8007b82:	e04f      	b.n	8007c24 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007b84:	2301      	movs	r3, #1
 8007b86:	77bb      	strb	r3, [r7, #30]
 8007b88:	e04c      	b.n	8007c24 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007b8a:	7ffb      	ldrb	r3, [r7, #31]
 8007b8c:	2b08      	cmp	r3, #8
 8007b8e:	d828      	bhi.n	8007be2 <UART_SetConfig+0x45e>
 8007b90:	a201      	add	r2, pc, #4	; (adr r2, 8007b98 <UART_SetConfig+0x414>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bbd 	.word	0x08007bbd
 8007b9c:	08007bc5 	.word	0x08007bc5
 8007ba0:	08007bcd 	.word	0x08007bcd
 8007ba4:	08007be3 	.word	0x08007be3
 8007ba8:	08007bd3 	.word	0x08007bd3
 8007bac:	08007be3 	.word	0x08007be3
 8007bb0:	08007be3 	.word	0x08007be3
 8007bb4:	08007be3 	.word	0x08007be3
 8007bb8:	08007bdb 	.word	0x08007bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fd fd96 	bl	80056ec <HAL_RCC_GetPCLK1Freq>
 8007bc0:	61b8      	str	r0, [r7, #24]
        break;
 8007bc2:	e013      	b.n	8007bec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007bc4:	f7fd fda6 	bl	8005714 <HAL_RCC_GetPCLK2Freq>
 8007bc8:	61b8      	str	r0, [r7, #24]
        break;
 8007bca:	e00f      	b.n	8007bec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bcc:	4b1d      	ldr	r3, [pc, #116]	; (8007c44 <UART_SetConfig+0x4c0>)
 8007bce:	61bb      	str	r3, [r7, #24]
        break;
 8007bd0:	e00c      	b.n	8007bec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007bd2:	f7fd fc9d 	bl	8005510 <HAL_RCC_GetSysClockFreq>
 8007bd6:	61b8      	str	r0, [r7, #24]
        break;
 8007bd8:	e008      	b.n	8007bec <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bde:	61bb      	str	r3, [r7, #24]
        break;
 8007be0:	e004      	b.n	8007bec <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007be2:	2300      	movs	r3, #0
 8007be4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	77bb      	strb	r3, [r7, #30]
        break;
 8007bea:	bf00      	nop
    }

    if (pclk != 0U)
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d018      	beq.n	8007c24 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685b      	ldr	r3, [r3, #4]
 8007bf6:	085a      	lsrs	r2, r3, #1
 8007bf8:	69bb      	ldr	r3, [r7, #24]
 8007bfa:	441a      	add	r2, r3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685b      	ldr	r3, [r3, #4]
 8007c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c04:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c06:	693b      	ldr	r3, [r7, #16]
 8007c08:	2b0f      	cmp	r3, #15
 8007c0a:	d909      	bls.n	8007c20 <UART_SetConfig+0x49c>
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c12:	d205      	bcs.n	8007c20 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e001      	b.n	8007c24 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007c30:	7fbb      	ldrb	r3, [r7, #30]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3720      	adds	r7, #32
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	40007c00 	.word	0x40007c00
 8007c40:	40023800 	.word	0x40023800
 8007c44:	00f42400 	.word	0x00f42400

08007c48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	f003 0301 	and.w	r3, r3, #1
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00a      	beq.n	8007c72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	430a      	orrs	r2, r1
 8007c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c98:	f003 0304 	and.w	r3, r3, #4
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00a      	beq.n	8007cb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	430a      	orrs	r2, r1
 8007cb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	430a      	orrs	r2, r1
 8007cd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cdc:	f003 0310 	and.w	r3, r3, #16
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d00a      	beq.n	8007cfa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	430a      	orrs	r2, r1
 8007cf8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00a      	beq.n	8007d1c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d46:	d10a      	bne.n	8007d5e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00a      	beq.n	8007d80 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	605a      	str	r2, [r3, #4]
  }
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af02      	add	r7, sp, #8
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2200      	movs	r2, #0
 8007d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d9c:	f7fa f8f6 	bl	8001f8c <HAL_GetTick>
 8007da0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0308 	and.w	r3, r3, #8
 8007dac:	2b08      	cmp	r3, #8
 8007dae:	d10e      	bne.n	8007dce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007db0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007db4:	9300      	str	r3, [sp, #0]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f82d 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e023      	b.n	8007e16 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b04      	cmp	r3, #4
 8007dda:	d10e      	bne.n	8007dfa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ddc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	2200      	movs	r2, #0
 8007de6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 f817 	bl	8007e1e <UART_WaitOnFlagUntilTimeout>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007df6:	2303      	movs	r3, #3
 8007df8:	e00d      	b.n	8007e16 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2220      	movs	r2, #32
 8007dfe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2220      	movs	r2, #32
 8007e04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b09c      	sub	sp, #112	; 0x70
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	60f8      	str	r0, [r7, #12]
 8007e26:	60b9      	str	r1, [r7, #8]
 8007e28:	603b      	str	r3, [r7, #0]
 8007e2a:	4613      	mov	r3, r2
 8007e2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e2e:	e0a5      	b.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e36:	f000 80a1 	beq.w	8007f7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e3a:	f7fa f8a7 	bl	8001f8c <HAL_GetTick>
 8007e3e:	4602      	mov	r2, r0
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	1ad3      	subs	r3, r2, r3
 8007e44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d302      	bcc.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x32>
 8007e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d13e      	bne.n	8007ece <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e58:	e853 3f00 	ldrex	r3, [r3]
 8007e5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007e5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e64:	667b      	str	r3, [r7, #100]	; 0x64
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e70:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007e74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e6      	bne.n	8007e50 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e94:	f023 0301 	bic.w	r3, r3, #1
 8007e98:	663b      	str	r3, [r7, #96]	; 0x60
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	3308      	adds	r3, #8
 8007ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ea2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ea4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ea8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007eaa:	e841 2300 	strex	r3, r2, [r1]
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1e5      	bne.n	8007e82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2220      	movs	r2, #32
 8007eba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e067      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 0304 	and.w	r3, r3, #4
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d04f      	beq.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	69db      	ldr	r3, [r3, #28]
 8007ee2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eea:	d147      	bne.n	8007f7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ef4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f14:	637b      	str	r3, [r7, #52]	; 0x34
 8007f16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e6      	bne.n	8007ef6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3308      	adds	r3, #8
 8007f2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	e853 3f00 	ldrex	r3, [r3]
 8007f36:	613b      	str	r3, [r7, #16]
   return(result);
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	f023 0301 	bic.w	r3, r3, #1
 8007f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007f48:	623a      	str	r2, [r7, #32]
 8007f4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4c:	69f9      	ldr	r1, [r7, #28]
 8007f4e:	6a3a      	ldr	r2, [r7, #32]
 8007f50:	e841 2300 	strex	r3, r2, [r1]
 8007f54:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d1e5      	bne.n	8007f28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2220      	movs	r2, #32
 8007f66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2220      	movs	r2, #32
 8007f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007f78:	2303      	movs	r3, #3
 8007f7a:	e010      	b.n	8007f9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69da      	ldr	r2, [r3, #28]
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4013      	ands	r3, r2
 8007f86:	68ba      	ldr	r2, [r7, #8]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	bf0c      	ite	eq
 8007f8c:	2301      	moveq	r3, #1
 8007f8e:	2300      	movne	r3, #0
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	461a      	mov	r2, r3
 8007f94:	79fb      	ldrb	r3, [r7, #7]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	f43f af4a 	beq.w	8007e30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3770      	adds	r7, #112	; 0x70
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b095      	sub	sp, #84	; 0x54
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007fc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	461a      	mov	r2, r3
 8007fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fcc:	643b      	str	r3, [r7, #64]	; 0x40
 8007fce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007fd2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e6      	bne.n	8007fae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	e853 3f00 	ldrex	r3, [r3]
 8007fee:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f023 0301 	bic.w	r3, r3, #1
 8007ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008000:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008004:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008008:	e841 2300 	strex	r3, r2, [r1]
 800800c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d1e5      	bne.n	8007fe0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008018:	2b01      	cmp	r3, #1
 800801a:	d118      	bne.n	800804e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	60bb      	str	r3, [r7, #8]
   return(result);
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	f023 0310 	bic.w	r3, r3, #16
 8008030:	647b      	str	r3, [r7, #68]	; 0x44
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800803a:	61bb      	str	r3, [r7, #24]
 800803c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	6979      	ldr	r1, [r7, #20]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	613b      	str	r3, [r7, #16]
   return(result);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e6      	bne.n	800801c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2220      	movs	r2, #32
 8008052:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008060:	bf00      	nop
 8008062:	3754      	adds	r7, #84	; 0x54
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2200      	movs	r2, #0
 800807e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2200      	movs	r2, #0
 8008086:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f7ff fb5a 	bl	8007744 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008090:	bf00      	nop
 8008092:	3710      	adds	r7, #16
 8008094:	46bd      	mov	sp, r7
 8008096:	bd80      	pop	{r7, pc}

08008098 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	e853 3f00 	ldrex	r3, [r3]
 80080ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080b4:	61fb      	str	r3, [r7, #28]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	461a      	mov	r2, r3
 80080bc:	69fb      	ldr	r3, [r7, #28]
 80080be:	61bb      	str	r3, [r7, #24]
 80080c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c2:	6979      	ldr	r1, [r7, #20]
 80080c4:	69ba      	ldr	r2, [r7, #24]
 80080c6:	e841 2300 	strex	r3, r2, [r1]
 80080ca:	613b      	str	r3, [r7, #16]
   return(result);
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d1e6      	bne.n	80080a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2220      	movs	r2, #32
 80080d6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2200      	movs	r2, #0
 80080dc:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7ff fb26 	bl	8007730 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080e4:	bf00      	nop
 80080e6:	3720      	adds	r7, #32
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80080ec:	b5b0      	push	{r4, r5, r7, lr}
 80080ee:	b08e      	sub	sp, #56	; 0x38
 80080f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80080f2:	4ba0      	ldr	r3, [pc, #640]	; (8008374 <MX_LWIP_Init+0x288>)
 80080f4:	22c0      	movs	r2, #192	; 0xc0
 80080f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80080f8:	4b9e      	ldr	r3, [pc, #632]	; (8008374 <MX_LWIP_Init+0x288>)
 80080fa:	22a8      	movs	r2, #168	; 0xa8
 80080fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80080fe:	4b9d      	ldr	r3, [pc, #628]	; (8008374 <MX_LWIP_Init+0x288>)
 8008100:	2200      	movs	r2, #0
 8008102:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8008104:	4b9b      	ldr	r3, [pc, #620]	; (8008374 <MX_LWIP_Init+0x288>)
 8008106:	2214      	movs	r2, #20
 8008108:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800810a:	4b9b      	ldr	r3, [pc, #620]	; (8008378 <MX_LWIP_Init+0x28c>)
 800810c:	22ff      	movs	r2, #255	; 0xff
 800810e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8008110:	4b99      	ldr	r3, [pc, #612]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008112:	22ff      	movs	r2, #255	; 0xff
 8008114:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008116:	4b98      	ldr	r3, [pc, #608]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800811c:	4b96      	ldr	r3, [pc, #600]	; (8008378 <MX_LWIP_Init+0x28c>)
 800811e:	2200      	movs	r2, #0
 8008120:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8008122:	4b96      	ldr	r3, [pc, #600]	; (800837c <MX_LWIP_Init+0x290>)
 8008124:	22c0      	movs	r2, #192	; 0xc0
 8008126:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8008128:	4b94      	ldr	r3, [pc, #592]	; (800837c <MX_LWIP_Init+0x290>)
 800812a:	22a8      	movs	r2, #168	; 0xa8
 800812c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800812e:	4b93      	ldr	r3, [pc, #588]	; (800837c <MX_LWIP_Init+0x290>)
 8008130:	2200      	movs	r2, #0
 8008132:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8008134:	4b91      	ldr	r3, [pc, #580]	; (800837c <MX_LWIP_Init+0x290>)
 8008136:	2201      	movs	r2, #1
 8008138:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800813a:	2100      	movs	r1, #0
 800813c:	2000      	movs	r0, #0
 800813e:	f007 fe4d 	bl	800fddc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8008142:	4b8c      	ldr	r3, [pc, #560]	; (8008374 <MX_LWIP_Init+0x288>)
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	061a      	lsls	r2, r3, #24
 8008148:	4b8a      	ldr	r3, [pc, #552]	; (8008374 <MX_LWIP_Init+0x288>)
 800814a:	785b      	ldrb	r3, [r3, #1]
 800814c:	041b      	lsls	r3, r3, #16
 800814e:	431a      	orrs	r2, r3
 8008150:	4b88      	ldr	r3, [pc, #544]	; (8008374 <MX_LWIP_Init+0x288>)
 8008152:	789b      	ldrb	r3, [r3, #2]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	4313      	orrs	r3, r2
 8008158:	4a86      	ldr	r2, [pc, #536]	; (8008374 <MX_LWIP_Init+0x288>)
 800815a:	78d2      	ldrb	r2, [r2, #3]
 800815c:	4313      	orrs	r3, r2
 800815e:	061a      	lsls	r2, r3, #24
 8008160:	4b84      	ldr	r3, [pc, #528]	; (8008374 <MX_LWIP_Init+0x288>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	0619      	lsls	r1, r3, #24
 8008166:	4b83      	ldr	r3, [pc, #524]	; (8008374 <MX_LWIP_Init+0x288>)
 8008168:	785b      	ldrb	r3, [r3, #1]
 800816a:	041b      	lsls	r3, r3, #16
 800816c:	4319      	orrs	r1, r3
 800816e:	4b81      	ldr	r3, [pc, #516]	; (8008374 <MX_LWIP_Init+0x288>)
 8008170:	789b      	ldrb	r3, [r3, #2]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	430b      	orrs	r3, r1
 8008176:	497f      	ldr	r1, [pc, #508]	; (8008374 <MX_LWIP_Init+0x288>)
 8008178:	78c9      	ldrb	r1, [r1, #3]
 800817a:	430b      	orrs	r3, r1
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008182:	431a      	orrs	r2, r3
 8008184:	4b7b      	ldr	r3, [pc, #492]	; (8008374 <MX_LWIP_Init+0x288>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	0619      	lsls	r1, r3, #24
 800818a:	4b7a      	ldr	r3, [pc, #488]	; (8008374 <MX_LWIP_Init+0x288>)
 800818c:	785b      	ldrb	r3, [r3, #1]
 800818e:	041b      	lsls	r3, r3, #16
 8008190:	4319      	orrs	r1, r3
 8008192:	4b78      	ldr	r3, [pc, #480]	; (8008374 <MX_LWIP_Init+0x288>)
 8008194:	789b      	ldrb	r3, [r3, #2]
 8008196:	021b      	lsls	r3, r3, #8
 8008198:	430b      	orrs	r3, r1
 800819a:	4976      	ldr	r1, [pc, #472]	; (8008374 <MX_LWIP_Init+0x288>)
 800819c:	78c9      	ldrb	r1, [r1, #3]
 800819e:	430b      	orrs	r3, r1
 80081a0:	0a1b      	lsrs	r3, r3, #8
 80081a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80081a6:	431a      	orrs	r2, r3
 80081a8:	4b72      	ldr	r3, [pc, #456]	; (8008374 <MX_LWIP_Init+0x288>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	0619      	lsls	r1, r3, #24
 80081ae:	4b71      	ldr	r3, [pc, #452]	; (8008374 <MX_LWIP_Init+0x288>)
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	041b      	lsls	r3, r3, #16
 80081b4:	4319      	orrs	r1, r3
 80081b6:	4b6f      	ldr	r3, [pc, #444]	; (8008374 <MX_LWIP_Init+0x288>)
 80081b8:	789b      	ldrb	r3, [r3, #2]
 80081ba:	021b      	lsls	r3, r3, #8
 80081bc:	430b      	orrs	r3, r1
 80081be:	496d      	ldr	r1, [pc, #436]	; (8008374 <MX_LWIP_Init+0x288>)
 80081c0:	78c9      	ldrb	r1, [r1, #3]
 80081c2:	430b      	orrs	r3, r1
 80081c4:	0e1b      	lsrs	r3, r3, #24
 80081c6:	4313      	orrs	r3, r2
 80081c8:	4a6d      	ldr	r2, [pc, #436]	; (8008380 <MX_LWIP_Init+0x294>)
 80081ca:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80081cc:	4b6a      	ldr	r3, [pc, #424]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	061a      	lsls	r2, r3, #24
 80081d2:	4b69      	ldr	r3, [pc, #420]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081d4:	785b      	ldrb	r3, [r3, #1]
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	431a      	orrs	r2, r3
 80081da:	4b67      	ldr	r3, [pc, #412]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081dc:	789b      	ldrb	r3, [r3, #2]
 80081de:	021b      	lsls	r3, r3, #8
 80081e0:	4313      	orrs	r3, r2
 80081e2:	4a65      	ldr	r2, [pc, #404]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081e4:	78d2      	ldrb	r2, [r2, #3]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	061a      	lsls	r2, r3, #24
 80081ea:	4b63      	ldr	r3, [pc, #396]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	0619      	lsls	r1, r3, #24
 80081f0:	4b61      	ldr	r3, [pc, #388]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081f2:	785b      	ldrb	r3, [r3, #1]
 80081f4:	041b      	lsls	r3, r3, #16
 80081f6:	4319      	orrs	r1, r3
 80081f8:	4b5f      	ldr	r3, [pc, #380]	; (8008378 <MX_LWIP_Init+0x28c>)
 80081fa:	789b      	ldrb	r3, [r3, #2]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	430b      	orrs	r3, r1
 8008200:	495d      	ldr	r1, [pc, #372]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008202:	78c9      	ldrb	r1, [r1, #3]
 8008204:	430b      	orrs	r3, r1
 8008206:	021b      	lsls	r3, r3, #8
 8008208:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800820c:	431a      	orrs	r2, r3
 800820e:	4b5a      	ldr	r3, [pc, #360]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	0619      	lsls	r1, r3, #24
 8008214:	4b58      	ldr	r3, [pc, #352]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008216:	785b      	ldrb	r3, [r3, #1]
 8008218:	041b      	lsls	r3, r3, #16
 800821a:	4319      	orrs	r1, r3
 800821c:	4b56      	ldr	r3, [pc, #344]	; (8008378 <MX_LWIP_Init+0x28c>)
 800821e:	789b      	ldrb	r3, [r3, #2]
 8008220:	021b      	lsls	r3, r3, #8
 8008222:	430b      	orrs	r3, r1
 8008224:	4954      	ldr	r1, [pc, #336]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008226:	78c9      	ldrb	r1, [r1, #3]
 8008228:	430b      	orrs	r3, r1
 800822a:	0a1b      	lsrs	r3, r3, #8
 800822c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008230:	431a      	orrs	r2, r3
 8008232:	4b51      	ldr	r3, [pc, #324]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	0619      	lsls	r1, r3, #24
 8008238:	4b4f      	ldr	r3, [pc, #316]	; (8008378 <MX_LWIP_Init+0x28c>)
 800823a:	785b      	ldrb	r3, [r3, #1]
 800823c:	041b      	lsls	r3, r3, #16
 800823e:	4319      	orrs	r1, r3
 8008240:	4b4d      	ldr	r3, [pc, #308]	; (8008378 <MX_LWIP_Init+0x28c>)
 8008242:	789b      	ldrb	r3, [r3, #2]
 8008244:	021b      	lsls	r3, r3, #8
 8008246:	430b      	orrs	r3, r1
 8008248:	494b      	ldr	r1, [pc, #300]	; (8008378 <MX_LWIP_Init+0x28c>)
 800824a:	78c9      	ldrb	r1, [r1, #3]
 800824c:	430b      	orrs	r3, r1
 800824e:	0e1b      	lsrs	r3, r3, #24
 8008250:	4313      	orrs	r3, r2
 8008252:	4a4c      	ldr	r2, [pc, #304]	; (8008384 <MX_LWIP_Init+0x298>)
 8008254:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8008256:	4b49      	ldr	r3, [pc, #292]	; (800837c <MX_LWIP_Init+0x290>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	061a      	lsls	r2, r3, #24
 800825c:	4b47      	ldr	r3, [pc, #284]	; (800837c <MX_LWIP_Init+0x290>)
 800825e:	785b      	ldrb	r3, [r3, #1]
 8008260:	041b      	lsls	r3, r3, #16
 8008262:	431a      	orrs	r2, r3
 8008264:	4b45      	ldr	r3, [pc, #276]	; (800837c <MX_LWIP_Init+0x290>)
 8008266:	789b      	ldrb	r3, [r3, #2]
 8008268:	021b      	lsls	r3, r3, #8
 800826a:	4313      	orrs	r3, r2
 800826c:	4a43      	ldr	r2, [pc, #268]	; (800837c <MX_LWIP_Init+0x290>)
 800826e:	78d2      	ldrb	r2, [r2, #3]
 8008270:	4313      	orrs	r3, r2
 8008272:	061a      	lsls	r2, r3, #24
 8008274:	4b41      	ldr	r3, [pc, #260]	; (800837c <MX_LWIP_Init+0x290>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	0619      	lsls	r1, r3, #24
 800827a:	4b40      	ldr	r3, [pc, #256]	; (800837c <MX_LWIP_Init+0x290>)
 800827c:	785b      	ldrb	r3, [r3, #1]
 800827e:	041b      	lsls	r3, r3, #16
 8008280:	4319      	orrs	r1, r3
 8008282:	4b3e      	ldr	r3, [pc, #248]	; (800837c <MX_LWIP_Init+0x290>)
 8008284:	789b      	ldrb	r3, [r3, #2]
 8008286:	021b      	lsls	r3, r3, #8
 8008288:	430b      	orrs	r3, r1
 800828a:	493c      	ldr	r1, [pc, #240]	; (800837c <MX_LWIP_Init+0x290>)
 800828c:	78c9      	ldrb	r1, [r1, #3]
 800828e:	430b      	orrs	r3, r1
 8008290:	021b      	lsls	r3, r3, #8
 8008292:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008296:	431a      	orrs	r2, r3
 8008298:	4b38      	ldr	r3, [pc, #224]	; (800837c <MX_LWIP_Init+0x290>)
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	0619      	lsls	r1, r3, #24
 800829e:	4b37      	ldr	r3, [pc, #220]	; (800837c <MX_LWIP_Init+0x290>)
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	4319      	orrs	r1, r3
 80082a6:	4b35      	ldr	r3, [pc, #212]	; (800837c <MX_LWIP_Init+0x290>)
 80082a8:	789b      	ldrb	r3, [r3, #2]
 80082aa:	021b      	lsls	r3, r3, #8
 80082ac:	430b      	orrs	r3, r1
 80082ae:	4933      	ldr	r1, [pc, #204]	; (800837c <MX_LWIP_Init+0x290>)
 80082b0:	78c9      	ldrb	r1, [r1, #3]
 80082b2:	430b      	orrs	r3, r1
 80082b4:	0a1b      	lsrs	r3, r3, #8
 80082b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082ba:	431a      	orrs	r2, r3
 80082bc:	4b2f      	ldr	r3, [pc, #188]	; (800837c <MX_LWIP_Init+0x290>)
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	0619      	lsls	r1, r3, #24
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <MX_LWIP_Init+0x290>)
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	041b      	lsls	r3, r3, #16
 80082c8:	4319      	orrs	r1, r3
 80082ca:	4b2c      	ldr	r3, [pc, #176]	; (800837c <MX_LWIP_Init+0x290>)
 80082cc:	789b      	ldrb	r3, [r3, #2]
 80082ce:	021b      	lsls	r3, r3, #8
 80082d0:	430b      	orrs	r3, r1
 80082d2:	492a      	ldr	r1, [pc, #168]	; (800837c <MX_LWIP_Init+0x290>)
 80082d4:	78c9      	ldrb	r1, [r1, #3]
 80082d6:	430b      	orrs	r3, r1
 80082d8:	0e1b      	lsrs	r3, r3, #24
 80082da:	4313      	orrs	r3, r2
 80082dc:	4a2a      	ldr	r2, [pc, #168]	; (8008388 <MX_LWIP_Init+0x29c>)
 80082de:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80082e0:	4b2a      	ldr	r3, [pc, #168]	; (800838c <MX_LWIP_Init+0x2a0>)
 80082e2:	9302      	str	r3, [sp, #8]
 80082e4:	4b2a      	ldr	r3, [pc, #168]	; (8008390 <MX_LWIP_Init+0x2a4>)
 80082e6:	9301      	str	r3, [sp, #4]
 80082e8:	2300      	movs	r3, #0
 80082ea:	9300      	str	r3, [sp, #0]
 80082ec:	4b26      	ldr	r3, [pc, #152]	; (8008388 <MX_LWIP_Init+0x29c>)
 80082ee:	4a25      	ldr	r2, [pc, #148]	; (8008384 <MX_LWIP_Init+0x298>)
 80082f0:	4923      	ldr	r1, [pc, #140]	; (8008380 <MX_LWIP_Init+0x294>)
 80082f2:	4828      	ldr	r0, [pc, #160]	; (8008394 <MX_LWIP_Init+0x2a8>)
 80082f4:	f008 faf6 	bl	80108e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80082f8:	4826      	ldr	r0, [pc, #152]	; (8008394 <MX_LWIP_Init+0x2a8>)
 80082fa:	f008 fca5 	bl	8010c48 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80082fe:	4b25      	ldr	r3, [pc, #148]	; (8008394 <MX_LWIP_Init+0x2a8>)
 8008300:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008304:	089b      	lsrs	r3, r3, #2
 8008306:	f003 0301 	and.w	r3, r3, #1
 800830a:	b2db      	uxtb	r3, r3
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8008310:	4820      	ldr	r0, [pc, #128]	; (8008394 <MX_LWIP_Init+0x2a8>)
 8008312:	f008 fca9 	bl	8010c68 <netif_set_up>
 8008316:	e002      	b.n	800831e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008318:	481e      	ldr	r0, [pc, #120]	; (8008394 <MX_LWIP_Init+0x2a8>)
 800831a:	f008 fd11 	bl	8010d40 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800831e:	491e      	ldr	r1, [pc, #120]	; (8008398 <MX_LWIP_Init+0x2ac>)
 8008320:	481c      	ldr	r0, [pc, #112]	; (8008394 <MX_LWIP_Init+0x2a8>)
 8008322:	f008 fda3 	bl	8010e6c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8008326:	2300      	movs	r3, #0
 8008328:	623b      	str	r3, [r7, #32]
 800832a:	2300      	movs	r3, #0
 800832c:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800832e:	f107 0320 	add.w	r3, r7, #32
 8008332:	2101      	movs	r1, #1
 8008334:	4618      	mov	r0, r3
 8008336:	f000 fd97 	bl	8008e68 <osSemaphoreCreate>
 800833a:	4603      	mov	r3, r0
 800833c:	4a17      	ldr	r2, [pc, #92]	; (800839c <MX_LWIP_Init+0x2b0>)
 800833e:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8008340:	4b17      	ldr	r3, [pc, #92]	; (80083a0 <MX_LWIP_Init+0x2b4>)
 8008342:	4a14      	ldr	r2, [pc, #80]	; (8008394 <MX_LWIP_Init+0x2a8>)
 8008344:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8008346:	4b15      	ldr	r3, [pc, #84]	; (800839c <MX_LWIP_Init+0x2b0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a15      	ldr	r2, [pc, #84]	; (80083a0 <MX_LWIP_Init+0x2b4>)
 800834c:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 800834e:	4b15      	ldr	r3, [pc, #84]	; (80083a4 <MX_LWIP_Init+0x2b8>)
 8008350:	1d3c      	adds	r4, r7, #4
 8008352:	461d      	mov	r5, r3
 8008354:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008356:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008358:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800835c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8008360:	1d3b      	adds	r3, r7, #4
 8008362:	490f      	ldr	r1, [pc, #60]	; (80083a0 <MX_LWIP_Init+0x2b4>)
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fc82 	bl	8008c6e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800836a:	bf00      	nop
 800836c:	3728      	adds	r7, #40	; 0x28
 800836e:	46bd      	mov	sp, r7
 8008370:	bdb0      	pop	{r4, r5, r7, pc}
 8008372:	bf00      	nop
 8008374:	20006f70 	.word	0x20006f70
 8008378:	20006f6c 	.word	0x20006f6c
 800837c:	20006f30 	.word	0x20006f30
 8008380:	20006f68 	.word	0x20006f68
 8008384:	20006f74 	.word	0x20006f74
 8008388:	20006f78 	.word	0x20006f78
 800838c:	0800fced 	.word	0x0800fced
 8008390:	080089fd 	.word	0x080089fd
 8008394:	20006f34 	.word	0x20006f34
 8008398:	08008ae1 	.word	0x08008ae1
 800839c:	2000090c 	.word	0x2000090c
 80083a0:	20006f28 	.word	0x20006f28
 80083a4:	0801e1b4 	.word	0x0801e1b4

080083a8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b08e      	sub	sp, #56	; 0x38
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80083b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	605a      	str	r2, [r3, #4]
 80083ba:	609a      	str	r2, [r3, #8]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a52      	ldr	r2, [pc, #328]	; (8008510 <HAL_ETH_MspInit+0x168>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	f040 809e 	bne.w	8008508 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80083cc:	4b51      	ldr	r3, [pc, #324]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d0:	4a50      	ldr	r2, [pc, #320]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80083d6:	6313      	str	r3, [r2, #48]	; 0x30
 80083d8:	4b4e      	ldr	r3, [pc, #312]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	4b4b      	ldr	r3, [pc, #300]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083e8:	4a4a      	ldr	r2, [pc, #296]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80083ee:	6313      	str	r3, [r2, #48]	; 0x30
 80083f0:	4b48      	ldr	r3, [pc, #288]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	4b45      	ldr	r3, [pc, #276]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 80083fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008400:	4a44      	ldr	r2, [pc, #272]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008406:	6313      	str	r3, [r2, #48]	; 0x30
 8008408:	4b42      	ldr	r3, [pc, #264]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800840a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008410:	61bb      	str	r3, [r7, #24]
 8008412:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008414:	4b3f      	ldr	r3, [pc, #252]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008418:	4a3e      	ldr	r2, [pc, #248]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800841a:	f043 0304 	orr.w	r3, r3, #4
 800841e:	6313      	str	r3, [r2, #48]	; 0x30
 8008420:	4b3c      	ldr	r3, [pc, #240]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800842c:	4b39      	ldr	r3, [pc, #228]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800842e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008430:	4a38      	ldr	r2, [pc, #224]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008432:	f043 0301 	orr.w	r3, r3, #1
 8008436:	6313      	str	r3, [r2, #48]	; 0x30
 8008438:	4b36      	ldr	r3, [pc, #216]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800843a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	613b      	str	r3, [r7, #16]
 8008442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008444:	4b33      	ldr	r3, [pc, #204]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008448:	4a32      	ldr	r2, [pc, #200]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800844a:	f043 0302 	orr.w	r3, r3, #2
 800844e:	6313      	str	r3, [r2, #48]	; 0x30
 8008450:	4b30      	ldr	r3, [pc, #192]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008454:	f003 0302 	and.w	r3, r3, #2
 8008458:	60fb      	str	r3, [r7, #12]
 800845a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800845c:	4b2d      	ldr	r3, [pc, #180]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800845e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008460:	4a2c      	ldr	r2, [pc, #176]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 8008462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008466:	6313      	str	r3, [r2, #48]	; 0x30
 8008468:	4b2a      	ldr	r3, [pc, #168]	; (8008514 <HAL_ETH_MspInit+0x16c>)
 800846a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800846c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008470:	60bb      	str	r3, [r7, #8]
 8008472:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMI_IMDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8008474:	2332      	movs	r3, #50	; 0x32
 8008476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008478:	2302      	movs	r3, #2
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800847c:	2300      	movs	r3, #0
 800847e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008480:	2303      	movs	r3, #3
 8008482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008484:	230b      	movs	r3, #11
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800848c:	4619      	mov	r1, r3
 800848e:	4822      	ldr	r0, [pc, #136]	; (8008518 <HAL_ETH_MspInit+0x170>)
 8008490:	f7fc f956 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008494:	2386      	movs	r3, #134	; 0x86
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008498:	2302      	movs	r3, #2
 800849a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800849c:	2300      	movs	r3, #0
 800849e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084a0:	2303      	movs	r3, #3
 80084a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084a4:	230b      	movs	r3, #11
 80084a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ac:	4619      	mov	r1, r3
 80084ae:	481b      	ldr	r0, [pc, #108]	; (800851c <HAL_ETH_MspInit+0x174>)
 80084b0:	f7fc f946 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80084b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80084b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084ba:	2302      	movs	r3, #2
 80084bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084be:	2300      	movs	r3, #0
 80084c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084c2:	2303      	movs	r3, #3
 80084c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084c6:	230b      	movs	r3, #11
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80084ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084ce:	4619      	mov	r1, r3
 80084d0:	4813      	ldr	r0, [pc, #76]	; (8008520 <HAL_ETH_MspInit+0x178>)
 80084d2:	f7fc f935 	bl	8004740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXDO_Pin;
 80084d6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084dc:	2302      	movs	r3, #2
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084e4:	2303      	movs	r3, #3
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80084e8:	230b      	movs	r3, #11
 80084ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80084ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80084f0:	4619      	mov	r1, r3
 80084f2:	480c      	ldr	r0, [pc, #48]	; (8008524 <HAL_ETH_MspInit+0x17c>)
 80084f4:	f7fc f924 	bl	8004740 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80084f8:	2200      	movs	r2, #0
 80084fa:	2105      	movs	r1, #5
 80084fc:	203d      	movs	r0, #61	; 0x3d
 80084fe:	f7fa fbf5 	bl	8002cec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8008502:	203d      	movs	r0, #61	; 0x3d
 8008504:	f7fa fc0e 	bl	8002d24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008508:	bf00      	nop
 800850a:	3738      	adds	r7, #56	; 0x38
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	40028000 	.word	0x40028000
 8008514:	40023800 	.word	0x40023800
 8008518:	40020800 	.word	0x40020800
 800851c:	40020000 	.word	0x40020000
 8008520:	40020400 	.word	0x40020400
 8008524:	40021800 	.word	0x40021800

08008528 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8008530:	4b04      	ldr	r3, [pc, #16]	; (8008544 <HAL_ETH_RxCpltCallback+0x1c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f000 fd17 	bl	8008f68 <osSemaphoreRelease>
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000910 	.word	0x20000910

08008548 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8008548:	b5b0      	push	{r4, r5, r7, lr}
 800854a:	b090      	sub	sp, #64	; 0x40
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008550:	2300      	movs	r3, #0
 8008552:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8008554:	4b60      	ldr	r3, [pc, #384]	; (80086d8 <low_level_init+0x190>)
 8008556:	4a61      	ldr	r2, [pc, #388]	; (80086dc <low_level_init+0x194>)
 8008558:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800855a:	4b5f      	ldr	r3, [pc, #380]	; (80086d8 <low_level_init+0x190>)
 800855c:	2201      	movs	r2, #1
 800855e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8008560:	4b5d      	ldr	r3, [pc, #372]	; (80086d8 <low_level_init+0x190>)
 8008562:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008566:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008568:	4b5b      	ldr	r3, [pc, #364]	; (80086d8 <low_level_init+0x190>)
 800856a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856e:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8008570:	4b59      	ldr	r3, [pc, #356]	; (80086d8 <low_level_init+0x190>)
 8008572:	2200      	movs	r2, #0
 8008574:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8008576:	2300      	movs	r3, #0
 8008578:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800857c:	2380      	movs	r3, #128	; 0x80
 800857e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8008582:	23e1      	movs	r3, #225	; 0xe1
 8008584:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008588:	2300      	movs	r3, #0
 800858a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800858e:	2300      	movs	r3, #0
 8008590:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008594:	2300      	movs	r3, #0
 8008596:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800859a:	4a4f      	ldr	r2, [pc, #316]	; (80086d8 <low_level_init+0x190>)
 800859c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80085a0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80085a2:	4b4d      	ldr	r3, [pc, #308]	; (80086d8 <low_level_init+0x190>)
 80085a4:	2201      	movs	r2, #1
 80085a6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80085a8:	4b4b      	ldr	r3, [pc, #300]	; (80086d8 <low_level_init+0x190>)
 80085aa:	2200      	movs	r2, #0
 80085ac:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80085ae:	4b4a      	ldr	r3, [pc, #296]	; (80086d8 <low_level_init+0x190>)
 80085b0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80085b4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80085b6:	4848      	ldr	r0, [pc, #288]	; (80086d8 <low_level_init+0x190>)
 80085b8:	f7fa ff3e 	bl	8003438 <HAL_ETH_Init>
 80085bc:	4603      	mov	r3, r0
 80085be:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80085c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d108      	bne.n	80085dc <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80085d0:	f043 0304 	orr.w	r3, r3, #4
 80085d4:	b2da      	uxtb	r2, r3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80085dc:	2304      	movs	r3, #4
 80085de:	4a40      	ldr	r2, [pc, #256]	; (80086e0 <low_level_init+0x198>)
 80085e0:	4940      	ldr	r1, [pc, #256]	; (80086e4 <low_level_init+0x19c>)
 80085e2:	483d      	ldr	r0, [pc, #244]	; (80086d8 <low_level_init+0x190>)
 80085e4:	f7fb f8c2 	bl	800376c <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80085e8:	2304      	movs	r3, #4
 80085ea:	4a3f      	ldr	r2, [pc, #252]	; (80086e8 <low_level_init+0x1a0>)
 80085ec:	493f      	ldr	r1, [pc, #252]	; (80086ec <low_level_init+0x1a4>)
 80085ee:	483a      	ldr	r0, [pc, #232]	; (80086d8 <low_level_init+0x190>)
 80085f0:	f7fb f925 	bl	800383e <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2206      	movs	r2, #6
 80085f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80085fc:	4b36      	ldr	r3, [pc, #216]	; (80086d8 <low_level_init+0x190>)
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	781a      	ldrb	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008608:	4b33      	ldr	r3, [pc, #204]	; (80086d8 <low_level_init+0x190>)
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	785a      	ldrb	r2, [r3, #1]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008614:	4b30      	ldr	r3, [pc, #192]	; (80086d8 <low_level_init+0x190>)
 8008616:	695b      	ldr	r3, [r3, #20]
 8008618:	789a      	ldrb	r2, [r3, #2]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8008620:	4b2d      	ldr	r3, [pc, #180]	; (80086d8 <low_level_init+0x190>)
 8008622:	695b      	ldr	r3, [r3, #20]
 8008624:	78da      	ldrb	r2, [r3, #3]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800862c:	4b2a      	ldr	r3, [pc, #168]	; (80086d8 <low_level_init+0x190>)
 800862e:	695b      	ldr	r3, [r3, #20]
 8008630:	791a      	ldrb	r2, [r3, #4]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8008638:	4b27      	ldr	r3, [pc, #156]	; (80086d8 <low_level_init+0x190>)
 800863a:	695b      	ldr	r3, [r3, #20]
 800863c:	795a      	ldrb	r2, [r3, #5]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800864a:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008652:	f043 030a 	orr.w	r3, r3, #10
 8008656:	b2da      	uxtb	r2, r3
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800865e:	2300      	movs	r3, #0
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
 8008662:	2300      	movs	r3, #0
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8008666:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800866a:	2101      	movs	r1, #1
 800866c:	4618      	mov	r0, r3
 800866e:	f000 fbfb 	bl	8008e68 <osSemaphoreCreate>
 8008672:	4603      	mov	r3, r0
 8008674:	4a1e      	ldr	r2, [pc, #120]	; (80086f0 <low_level_init+0x1a8>)
 8008676:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <low_level_init+0x1ac>)
 800867a:	f107 040c 	add.w	r4, r7, #12
 800867e:	461d      	mov	r5, r3
 8008680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800868c:	f107 030c 	add.w	r3, r7, #12
 8008690:	6879      	ldr	r1, [r7, #4]
 8008692:	4618      	mov	r0, r3
 8008694:	f000 faeb 	bl	8008c6e <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008698:	480f      	ldr	r0, [pc, #60]	; (80086d8 <low_level_init+0x190>)
 800869a:	f7fb fbf8 	bl	8003e8e <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800869e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086a2:	461a      	mov	r2, r3
 80086a4:	211d      	movs	r1, #29
 80086a6:	480c      	ldr	r0, [pc, #48]	; (80086d8 <low_level_init+0x190>)
 80086a8:	f7fb fb23 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	f043 030b 	orr.w	r3, r3, #11
 80086b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80086b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b6:	461a      	mov	r2, r3
 80086b8:	211d      	movs	r1, #29
 80086ba:	4807      	ldr	r0, [pc, #28]	; (80086d8 <low_level_init+0x190>)
 80086bc:	f7fb fb81 	bl	8003dc2 <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80086c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80086c4:	461a      	mov	r2, r3
 80086c6:	211d      	movs	r1, #29
 80086c8:	4803      	ldr	r0, [pc, #12]	; (80086d8 <low_level_init+0x190>)
 80086ca:	f7fb fb12 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80086ce:	bf00      	nop
 80086d0:	3740      	adds	r7, #64	; 0x40
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bdb0      	pop	{r4, r5, r7, pc}
 80086d6:	bf00      	nop
 80086d8:	2000884c 	.word	0x2000884c
 80086dc:	40028000 	.word	0x40028000
 80086e0:	20008894 	.word	0x20008894
 80086e4:	20006f7c 	.word	0x20006f7c
 80086e8:	20006ffc 	.word	0x20006ffc
 80086ec:	200087cc 	.word	0x200087cc
 80086f0:	20000910 	.word	0x20000910
 80086f4:	0801e1d8 	.word	0x0801e1d8

080086f8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8008702:	4b4b      	ldr	r3, [pc, #300]	; (8008830 <low_level_output+0x138>)
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800870e:	2300      	movs	r3, #0
 8008710:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800871a:	4b45      	ldr	r3, [pc, #276]	; (8008830 <low_level_output+0x138>)
 800871c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8008720:	2300      	movs	r3, #0
 8008722:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	623b      	str	r3, [r7, #32]
 8008728:	e05a      	b.n	80087e0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	da03      	bge.n	800873a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8008732:	23f8      	movs	r3, #248	; 0xf8
 8008734:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8008738:	e05c      	b.n	80087f4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800873a:	6a3b      	ldr	r3, [r7, #32]
 800873c:	895b      	ldrh	r3, [r3, #10]
 800873e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8008740:	2300      	movs	r3, #0
 8008742:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008744:	e02f      	b.n	80087a6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	18d0      	adds	r0, r2, r3
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	685a      	ldr	r2, [r3, #4]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	18d1      	adds	r1, r2, r3
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800875a:	1a9b      	subs	r3, r3, r2
 800875c:	461a      	mov	r2, r3
 800875e:	f012 fe3d 	bl	801b3dc <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	da03      	bge.n	8008778 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8008770:	23f8      	movs	r3, #248	; 0xf8
 8008772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8008776:	e03d      	b.n	80087f4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	689b      	ldr	r3, [r3, #8]
 800877c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	4413      	add	r3, r2
 8008784:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008788:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800878a:	68ba      	ldr	r2, [r7, #8]
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008794:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80087a0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80087a2:	2300      	movs	r3, #0
 80087a4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	4413      	add	r3, r2
 80087ac:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d8c8      	bhi.n	8008746 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	18d0      	adds	r0, r2, r3
 80087ba:	6a3b      	ldr	r3, [r7, #32]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	4413      	add	r3, r2
 80087c2:	68fa      	ldr	r2, [r7, #12]
 80087c4:	4619      	mov	r1, r3
 80087c6:	f012 fe09 	bl	801b3dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80087ca:	693a      	ldr	r2, [r7, #16]
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	4413      	add	r3, r2
 80087d0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	4413      	add	r3, r2
 80087d8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80087da:	6a3b      	ldr	r3, [r7, #32]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	623b      	str	r3, [r7, #32]
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d1a1      	bne.n	800872a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80087e6:	6979      	ldr	r1, [r7, #20]
 80087e8:	4811      	ldr	r0, [pc, #68]	; (8008830 <low_level_output+0x138>)
 80087ea:	f7fb f895 	bl	8003918 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80087f4:	4b0e      	ldr	r3, [pc, #56]	; (8008830 <low_level_output+0x138>)
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	f241 0314 	movw	r3, #4116	; 0x1014
 80087fc:	4413      	add	r3, r2
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 0320 	and.w	r3, r3, #32
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00d      	beq.n	8008824 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008808:	4b09      	ldr	r3, [pc, #36]	; (8008830 <low_level_output+0x138>)
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	f241 0314 	movw	r3, #4116	; 0x1014
 8008810:	4413      	add	r3, r2
 8008812:	2220      	movs	r2, #32
 8008814:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <low_level_output+0x138>)
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	f241 0304 	movw	r3, #4100	; 0x1004
 800881e:	4413      	add	r3, r2
 8008820:	2200      	movs	r2, #0
 8008822:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8008824:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008828:	4618      	mov	r0, r3
 800882a:	3728      	adds	r7, #40	; 0x28
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	2000884c 	.word	0x2000884c

08008834 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8008834:	b580      	push	{r7, lr}
 8008836:	b08c      	sub	sp, #48	; 0x30
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800883c:	2300      	movs	r3, #0
 800883e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8008840:	2300      	movs	r3, #0
 8008842:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8008844:	2300      	movs	r3, #0
 8008846:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8008848:	2300      	movs	r3, #0
 800884a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800884c:	2300      	movs	r3, #0
 800884e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8008850:	2300      	movs	r3, #0
 8008852:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8008854:	2300      	movs	r3, #0
 8008856:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8008858:	484f      	ldr	r0, [pc, #316]	; (8008998 <low_level_input+0x164>)
 800885a:	f7fb f947 	bl	8003aec <HAL_ETH_GetReceivedFrame_IT>
 800885e:	4603      	mov	r3, r0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d001      	beq.n	8008868 <low_level_input+0x34>

    return NULL;
 8008864:	2300      	movs	r3, #0
 8008866:	e092      	b.n	800898e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8008868:	4b4b      	ldr	r3, [pc, #300]	; (8008998 <low_level_input+0x164>)
 800886a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800886c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800886e:	4b4a      	ldr	r3, [pc, #296]	; (8008998 <low_level_input+0x164>)
 8008870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008872:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8008874:	89fb      	ldrh	r3, [r7, #14]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800887a:	89fb      	ldrh	r3, [r7, #14]
 800887c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8008880:	4619      	mov	r1, r3
 8008882:	2000      	movs	r0, #0
 8008884:	f008 fbbc 	bl	8011000 <pbuf_alloc>
 8008888:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800888a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	d04b      	beq.n	8008928 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008890:	4b41      	ldr	r3, [pc, #260]	; (8008998 <low_level_input+0x164>)
 8008892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008894:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008896:	2300      	movs	r3, #0
 8008898:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800889a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889c:	62bb      	str	r3, [r7, #40]	; 0x28
 800889e:	e040      	b.n	8008922 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	895b      	ldrh	r3, [r3, #10]
 80088a4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80088aa:	e021      	b.n	80088f0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80088ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088ae:	685a      	ldr	r2, [r3, #4]
 80088b0:	69bb      	ldr	r3, [r7, #24]
 80088b2:	18d0      	adds	r0, r2, r3
 80088b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	18d1      	adds	r1, r2, r3
 80088ba:	69fa      	ldr	r2, [r7, #28]
 80088bc:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80088c0:	1a9b      	subs	r3, r3, r2
 80088c2:	461a      	mov	r2, r3
 80088c4:	f012 fd8a 	bl	801b3dc <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80088c8:	6a3b      	ldr	r3, [r7, #32]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80088ce:	6a3b      	ldr	r3, [r7, #32]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80088d4:	69fa      	ldr	r2, [r7, #28]
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	4413      	add	r3, r2
 80088da:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80088de:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	1ad3      	subs	r3, r2, r3
 80088e6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80088ea:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80088f0:	697a      	ldr	r2, [r7, #20]
 80088f2:	69fb      	ldr	r3, [r7, #28]
 80088f4:	4413      	add	r3, r2
 80088f6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d8d6      	bhi.n	80088ac <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80088fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	69bb      	ldr	r3, [r7, #24]
 8008904:	18d0      	adds	r0, r2, r3
 8008906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	4413      	add	r3, r2
 800890c:	697a      	ldr	r2, [r7, #20]
 800890e:	4619      	mov	r1, r3
 8008910:	f012 fd64 	bl	801b3dc <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	4413      	add	r3, r2
 800891a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	62bb      	str	r3, [r7, #40]	; 0x28
 8008922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1bb      	bne.n	80088a0 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8008928:	4b1b      	ldr	r3, [pc, #108]	; (8008998 <low_level_input+0x164>)
 800892a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800892e:	2300      	movs	r3, #0
 8008930:	613b      	str	r3, [r7, #16]
 8008932:	e00b      	b.n	800894c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8008934:	6a3b      	ldr	r3, [r7, #32]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800893c:	6a3b      	ldr	r3, [r7, #32]
 800893e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8008946:	693b      	ldr	r3, [r7, #16]
 8008948:	3301      	adds	r3, #1
 800894a:	613b      	str	r3, [r7, #16]
 800894c:	4b12      	ldr	r3, [pc, #72]	; (8008998 <low_level_input+0x164>)
 800894e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	429a      	cmp	r2, r3
 8008954:	d3ee      	bcc.n	8008934 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8008956:	4b10      	ldr	r3, [pc, #64]	; (8008998 <low_level_input+0x164>)
 8008958:	2200      	movs	r2, #0
 800895a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800895c:	4b0e      	ldr	r3, [pc, #56]	; (8008998 <low_level_input+0x164>)
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	f241 0314 	movw	r3, #4116	; 0x1014
 8008964:	4413      	add	r3, r2
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00d      	beq.n	800898c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8008970:	4b09      	ldr	r3, [pc, #36]	; (8008998 <low_level_input+0x164>)
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	f241 0314 	movw	r3, #4116	; 0x1014
 8008978:	4413      	add	r3, r2
 800897a:	2280      	movs	r2, #128	; 0x80
 800897c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800897e:	4b06      	ldr	r3, [pc, #24]	; (8008998 <low_level_input+0x164>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	f241 0308 	movw	r3, #4104	; 0x1008
 8008986:	4413      	add	r3, r2
 8008988:	2200      	movs	r2, #0
 800898a:	601a      	str	r2, [r3, #0]
  }
  return p;
 800898c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800898e:	4618      	mov	r0, r3
 8008990:	3730      	adds	r7, #48	; 0x30
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	2000884c 	.word	0x2000884c

0800899c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80089a8:	4b12      	ldr	r3, [pc, #72]	; (80089f4 <ethernetif_input+0x58>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f04f 31ff 	mov.w	r1, #4294967295
 80089b0:	4618      	mov	r0, r3
 80089b2:	f000 fa8b 	bl	8008ecc <osSemaphoreWait>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1f5      	bne.n	80089a8 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80089bc:	480e      	ldr	r0, [pc, #56]	; (80089f8 <ethernetif_input+0x5c>)
 80089be:	f012 fc7b 	bl	801b2b8 <sys_mutex_lock>
        p = low_level_input( netif );
 80089c2:	68f8      	ldr	r0, [r7, #12]
 80089c4:	f7ff ff36 	bl	8008834 <low_level_input>
 80089c8:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00a      	beq.n	80089e6 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	68f9      	ldr	r1, [r7, #12]
 80089d6:	68b8      	ldr	r0, [r7, #8]
 80089d8:	4798      	blx	r3
 80089da:	4603      	mov	r3, r0
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80089e0:	68b8      	ldr	r0, [r7, #8]
 80089e2:	f008 fe23 	bl	801162c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80089e6:	4804      	ldr	r0, [pc, #16]	; (80089f8 <ethernetif_input+0x5c>)
 80089e8:	f012 fc75 	bl	801b2d6 <sys_mutex_unlock>
      } while(p!=NULL);
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e4      	bne.n	80089bc <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80089f2:	e7d9      	b.n	80089a8 <ethernetif_input+0xc>
 80089f4:	20000910 	.word	0x20000910
 80089f8:	2000a0a4 	.word	0x2000a0a4

080089fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b082      	sub	sp, #8
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d106      	bne.n	8008a18 <ethernetif_init+0x1c>
 8008a0a:	4b0e      	ldr	r3, [pc, #56]	; (8008a44 <ethernetif_init+0x48>)
 8008a0c:	f240 2235 	movw	r2, #565	; 0x235
 8008a10:	490d      	ldr	r1, [pc, #52]	; (8008a48 <ethernetif_init+0x4c>)
 8008a12:	480e      	ldr	r0, [pc, #56]	; (8008a4c <ethernetif_init+0x50>)
 8008a14:	f013 f93a 	bl	801bc8c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2273      	movs	r2, #115	; 0x73
 8008a1c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2274      	movs	r2, #116	; 0x74
 8008a24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a09      	ldr	r2, [pc, #36]	; (8008a50 <ethernetif_init+0x54>)
 8008a2c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	4a08      	ldr	r2, [pc, #32]	; (8008a54 <ethernetif_init+0x58>)
 8008a32:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f7ff fd87 	bl	8008548 <low_level_init>

  return ERR_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	0801e1f4 	.word	0x0801e1f4
 8008a48:	0801e210 	.word	0x0801e210
 8008a4c:	0801e220 	.word	0x0801e220
 8008a50:	08019051 	.word	0x08019051
 8008a54:	080086f9 	.word	0x080086f9

08008a58 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008a5c:	f7f9 fa96 	bl	8001f8c <HAL_GetTick>
 8008a60:	4603      	mov	r3, r0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008a78:	f107 0308 	add.w	r3, r7, #8
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	2101      	movs	r1, #1
 8008a80:	4816      	ldr	r0, [pc, #88]	; (8008adc <ethernetif_set_link+0x74>)
 8008a82:	f7fb f936 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	f003 0304 	and.w	r3, r3, #4
 8008a8c:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a96:	f003 0304 	and.w	r3, r3, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d108      	bne.n	8008ab0 <ethernetif_set_link+0x48>
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d005      	beq.n	8008ab0 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f008 f97b 	bl	8010da4 <netif_set_link_up>
 8008aae:	e011      	b.n	8008ad4 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008ab8:	089b      	lsrs	r3, r3, #2
 8008aba:	f003 0301 	and.w	r3, r3, #1
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d007      	beq.n	8008ad4 <ethernetif_set_link+0x6c>
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d104      	bne.n	8008ad4 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f008 f99c 	bl	8010e0c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008ad4:	20c8      	movs	r0, #200	; 0xc8
 8008ad6:	f000 f916 	bl	8008d06 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008ada:	e7cd      	b.n	8008a78 <ethernetif_set_link+0x10>
 8008adc:	2000884c 	.word	0x2000884c

08008ae0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008af6:	089b      	lsrs	r3, r3, #2
 8008af8:	f003 0301 	and.w	r3, r3, #1
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d05d      	beq.n	8008bbe <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008b02:	4b34      	ldr	r3, [pc, #208]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d03f      	beq.n	8008b8a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008b0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b0e:	2100      	movs	r1, #0
 8008b10:	4830      	ldr	r0, [pc, #192]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b12:	f7fb f956 	bl	8003dc2 <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008b16:	f7f9 fa39 	bl	8001f8c <HAL_GetTick>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b1e:	f107 0308 	add.w	r3, r7, #8
 8008b22:	461a      	mov	r2, r3
 8008b24:	2101      	movs	r1, #1
 8008b26:	482b      	ldr	r0, [pc, #172]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b28:	f7fb f8e3 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008b2c:	f7f9 fa2e 	bl	8001f8c <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b3a:	d828      	bhi.n	8008b8e <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	f003 0320 	and.w	r3, r3, #32
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d0eb      	beq.n	8008b1e <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008b46:	f107 0308 	add.w	r3, r7, #8
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2110      	movs	r1, #16
 8008b4e:	4821      	ldr	r0, [pc, #132]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b50:	f7fb f8cf 	bl	8003cf2 <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f003 0304 	and.w	r3, r3, #4
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d004      	beq.n	8008b68 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008b5e:	4b1d      	ldr	r3, [pc, #116]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b64:	60da      	str	r2, [r3, #12]
 8008b66:	e002      	b.n	8008b6e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008b68:	4b1a      	ldr	r3, [pc, #104]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	f003 0302 	and.w	r3, r3, #2
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008b78:	4b16      	ldr	r3, [pc, #88]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	609a      	str	r2, [r3, #8]
 8008b7e:	e016      	b.n	8008bae <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008b80:	4b14      	ldr	r3, [pc, #80]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b86:	609a      	str	r2, [r3, #8]
 8008b88:	e011      	b.n	8008bae <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <ethernetif_update_config+0xb0>
          goto error;
 8008b8e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008b90:	4b10      	ldr	r3, [pc, #64]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	08db      	lsrs	r3, r3, #3
 8008b96:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008b98:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	085b      	lsrs	r3, r3, #1
 8008b9e:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	b29b      	uxth	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	2100      	movs	r1, #0
 8008ba8:	480a      	ldr	r0, [pc, #40]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008baa:	f7fb f90a 	bl	8003dc2 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008bae:	2100      	movs	r1, #0
 8008bb0:	4808      	ldr	r0, [pc, #32]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008bb2:	f7fb f9cb 	bl	8003f4c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008bb6:	4807      	ldr	r0, [pc, #28]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008bb8:	f7fb f969 	bl	8003e8e <HAL_ETH_Start>
 8008bbc:	e002      	b.n	8008bc4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008bbe:	4805      	ldr	r0, [pc, #20]	; (8008bd4 <ethernetif_update_config+0xf4>)
 8008bc0:	f7fb f994 	bl	8003eec <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f807 	bl	8008bd8 <ethernetif_notify_conn_changed>
}
 8008bca:	bf00      	nop
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	2000884c 	.word	0x2000884c

08008bd8 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008bfe:	2b84      	cmp	r3, #132	; 0x84
 8008c00:	d005      	beq.n	8008c0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008c02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	4413      	add	r3, r2
 8008c0a:	3303      	adds	r3, #3
 8008c0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c22:	f3ef 8305 	mrs	r3, IPSR
 8008c26:	607b      	str	r3, [r7, #4]
  return(result);
 8008c28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	bf14      	ite	ne
 8008c2e:	2301      	movne	r3, #1
 8008c30:	2300      	moveq	r3, #0
 8008c32:	b2db      	uxtb	r3, r3
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008c44:	f001 fdd2 	bl	800a7ec <vTaskStartScheduler>
  
  return osOK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	bd80      	pop	{r7, pc}

08008c4e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008c4e:	b580      	push	{r7, lr}
 8008c50:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008c52:	f7ff ffe3 	bl	8008c1c <inHandlerMode>
 8008c56:	4603      	mov	r3, r0
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008c5c:	f001 feec 	bl	800aa38 <xTaskGetTickCountFromISR>
 8008c60:	4603      	mov	r3, r0
 8008c62:	e002      	b.n	8008c6a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008c64:	f001 fed8 	bl	800aa18 <xTaskGetTickCount>
 8008c68:	4603      	mov	r3, r0
  }
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c70:	b089      	sub	sp, #36	; 0x24
 8008c72:	af04      	add	r7, sp, #16
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	695b      	ldr	r3, [r3, #20]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d020      	beq.n	8008cc2 <osThreadCreate+0x54>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	699b      	ldr	r3, [r3, #24]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d01c      	beq.n	8008cc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685c      	ldr	r4, [r3, #4]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681d      	ldr	r5, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	691e      	ldr	r6, [r3, #16]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f7ff ffa6 	bl	8008bec <makeFreeRtosPriority>
 8008ca0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	695b      	ldr	r3, [r3, #20]
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008caa:	9202      	str	r2, [sp, #8]
 8008cac:	9301      	str	r3, [sp, #4]
 8008cae:	9100      	str	r1, [sp, #0]
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	4632      	mov	r2, r6
 8008cb4:	4629      	mov	r1, r5
 8008cb6:	4620      	mov	r0, r4
 8008cb8:	f001 fbc6 	bl	800a448 <xTaskCreateStatic>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	e01c      	b.n	8008cfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685c      	ldr	r4, [r3, #4]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008cce:	b29e      	uxth	r6, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f7ff ff88 	bl	8008bec <makeFreeRtosPriority>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	f107 030c 	add.w	r3, r7, #12
 8008ce2:	9301      	str	r3, [sp, #4]
 8008ce4:	9200      	str	r2, [sp, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	4632      	mov	r2, r6
 8008cea:	4629      	mov	r1, r5
 8008cec:	4620      	mov	r0, r4
 8008cee:	f001 fc0e 	bl	800a50e <xTaskCreate>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d001      	beq.n	8008cfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	e000      	b.n	8008cfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3714      	adds	r7, #20
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d001      	beq.n	8008d1c <osDelay+0x16>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	e000      	b.n	8008d1e <osDelay+0x18>
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f001 fd2e 	bl	800a780 <vTaskDelay>
  
  return osOK;
 8008d24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b082      	sub	sp, #8
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	4619      	mov	r1, r3
 8008d44:	2001      	movs	r0, #1
 8008d46:	f000 fc92 	bl	800966e <xQueueCreateMutexStatic>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	e003      	b.n	8008d56 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008d4e:	2001      	movs	r0, #1
 8008d50:	f000 fc75 	bl	800963e <xQueueCreateMutex>
 8008d54:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <osMutexWait+0x18>
    return osErrorParameter;
 8008d74:	2380      	movs	r3, #128	; 0x80
 8008d76:	e03a      	b.n	8008dee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d103      	bne.n	8008d8c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008d84:	f04f 33ff 	mov.w	r3, #4294967295
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e009      	b.n	8008da0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d006      	beq.n	8008da0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d101      	bne.n	8008da0 <osMutexWait+0x40>
      ticks = 1;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008da0:	f7ff ff3c 	bl	8008c1c <inHandlerMode>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d017      	beq.n	8008dda <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008daa:	f107 0308 	add.w	r3, r7, #8
 8008dae:	461a      	mov	r2, r3
 8008db0:	2100      	movs	r1, #0
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 f8ac 	bl	8009f10 <xQueueReceiveFromISR>
 8008db8:	4603      	mov	r3, r0
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d001      	beq.n	8008dc2 <osMutexWait+0x62>
      return osErrorOS;
 8008dbe:	23ff      	movs	r3, #255	; 0xff
 8008dc0:	e015      	b.n	8008dee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d011      	beq.n	8008dec <osMutexWait+0x8c>
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <osMutexWait+0x98>)
 8008dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dce:	601a      	str	r2, [r3, #0]
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	e008      	b.n	8008dec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008dda:	68f9      	ldr	r1, [r7, #12]
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 ff83 	bl	8009ce8 <xQueueSemaphoreTake>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d001      	beq.n	8008dec <osMutexWait+0x8c>
    return osErrorOS;
 8008de8:	23ff      	movs	r3, #255	; 0xff
 8008dea:	e000      	b.n	8008dee <osMutexWait+0x8e>
  }
  
  return osOK;
 8008dec:	2300      	movs	r3, #0
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008e0c:	f7ff ff06 	bl	8008c1c <inHandlerMode>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d016      	beq.n	8008e44 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fde7 	bl	80099f0 <xQueueGiveFromISR>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d001      	beq.n	8008e2c <osMutexRelease+0x30>
      return osErrorOS;
 8008e28:	23ff      	movs	r3, #255	; 0xff
 8008e2a:	e017      	b.n	8008e5c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d013      	beq.n	8008e5a <osMutexRelease+0x5e>
 8008e32:	4b0c      	ldr	r3, [pc, #48]	; (8008e64 <osMutexRelease+0x68>)
 8008e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e38:	601a      	str	r2, [r3, #0]
 8008e3a:	f3bf 8f4f 	dsb	sy
 8008e3e:	f3bf 8f6f 	isb	sy
 8008e42:	e00a      	b.n	8008e5a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008e44:	2300      	movs	r3, #0
 8008e46:	2200      	movs	r2, #0
 8008e48:	2100      	movs	r1, #0
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fc2a 	bl	80096a4 <xQueueGenericSend>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b01      	cmp	r3, #1
 8008e54:	d001      	beq.n	8008e5a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008e56:	23ff      	movs	r3, #255	; 0xff
 8008e58:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}
 8008e64:	e000ed04 	.word	0xe000ed04

08008e68 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b086      	sub	sp, #24
 8008e6c:	af02      	add	r7, sp, #8
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00f      	beq.n	8008e9a <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10a      	bne.n	8008e96 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2203      	movs	r2, #3
 8008e86:	9200      	str	r2, [sp, #0]
 8008e88:	2200      	movs	r2, #0
 8008e8a:	2100      	movs	r1, #0
 8008e8c:	2001      	movs	r0, #1
 8008e8e:	f000 fad9 	bl	8009444 <xQueueGenericCreateStatic>
 8008e92:	4603      	mov	r3, r0
 8008e94:	e016      	b.n	8008ec4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e014      	b.n	8008ec4 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d110      	bne.n	8008ec2 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008ea0:	2203      	movs	r2, #3
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	f000 fb4f 	bl	8009548 <xQueueGenericCreate>
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d005      	beq.n	8008ebe <osSemaphoreCreate+0x56>
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fbf3 	bl	80096a4 <xQueueGenericSend>
      return sema;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	e000      	b.n	8008ec4 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008ec2:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008ee0:	2380      	movs	r3, #128	; 0x80
 8008ee2:	e03a      	b.n	8008f5a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eee:	d103      	bne.n	8008ef8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008ef0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ef4:	60fb      	str	r3, [r7, #12]
 8008ef6:	e009      	b.n	8008f0c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d006      	beq.n	8008f0c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <osSemaphoreWait+0x40>
      ticks = 1;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008f0c:	f7ff fe86 	bl	8008c1c <inHandlerMode>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d017      	beq.n	8008f46 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f16:	f107 0308 	add.w	r3, r7, #8
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2100      	movs	r1, #0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fff6 	bl	8009f10 <xQueueReceiveFromISR>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d001      	beq.n	8008f2e <osSemaphoreWait+0x62>
      return osErrorOS;
 8008f2a:	23ff      	movs	r3, #255	; 0xff
 8008f2c:	e015      	b.n	8008f5a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d011      	beq.n	8008f58 <osSemaphoreWait+0x8c>
 8008f34:	4b0b      	ldr	r3, [pc, #44]	; (8008f64 <osSemaphoreWait+0x98>)
 8008f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f3a:	601a      	str	r2, [r3, #0]
 8008f3c:	f3bf 8f4f 	dsb	sy
 8008f40:	f3bf 8f6f 	isb	sy
 8008f44:	e008      	b.n	8008f58 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008f46:	68f9      	ldr	r1, [r7, #12]
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 fecd 	bl	8009ce8 <xQueueSemaphoreTake>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	2b01      	cmp	r3, #1
 8008f52:	d001      	beq.n	8008f58 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008f54:	23ff      	movs	r3, #255	; 0xff
 8008f56:	e000      	b.n	8008f5a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	e000ed04 	.word	0xe000ed04

08008f68 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008f78:	f7ff fe50 	bl	8008c1c <inHandlerMode>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d016      	beq.n	8008fb0 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f82:	f107 0308 	add.w	r3, r7, #8
 8008f86:	4619      	mov	r1, r3
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fd31 	bl	80099f0 <xQueueGiveFromISR>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d001      	beq.n	8008f98 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8008f94:	23ff      	movs	r3, #255	; 0xff
 8008f96:	e017      	b.n	8008fc8 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008f98:	68bb      	ldr	r3, [r7, #8]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d013      	beq.n	8008fc6 <osSemaphoreRelease+0x5e>
 8008f9e:	4b0c      	ldr	r3, [pc, #48]	; (8008fd0 <osSemaphoreRelease+0x68>)
 8008fa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	f3bf 8f4f 	dsb	sy
 8008faa:	f3bf 8f6f 	isb	sy
 8008fae:	e00a      	b.n	8008fc6 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 fb74 	bl	80096a4 <xQueueGenericSend>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d001      	beq.n	8008fc6 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8008fc2:	23ff      	movs	r3, #255	; 0xff
 8008fc4:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	e000ed04 	.word	0xe000ed04

08008fd4 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8008fdc:	f7ff fe1e 	bl	8008c1c <inHandlerMode>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d001      	beq.n	8008fea <osSemaphoreDelete+0x16>
    return osErrorISR;
 8008fe6:	2382      	movs	r3, #130	; 0x82
 8008fe8:	e003      	b.n	8008ff2 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f001 f856 	bl	800a09c <vQueueDelete>

  return osOK; 
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008ffa:	b590      	push	{r4, r7, lr}
 8008ffc:	b085      	sub	sp, #20
 8008ffe:	af02      	add	r7, sp, #8
 8009000:	6078      	str	r0, [r7, #4]
 8009002:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d011      	beq.n	8009030 <osMessageCreate+0x36>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00d      	beq.n	8009030 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6859      	ldr	r1, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	689a      	ldr	r2, [r3, #8]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2400      	movs	r4, #0
 8009026:	9400      	str	r4, [sp, #0]
 8009028:	f000 fa0c 	bl	8009444 <xQueueGenericCreateStatic>
 800902c:	4603      	mov	r3, r0
 800902e:	e008      	b.n	8009042 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6818      	ldr	r0, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	4619      	mov	r1, r3
 800903c:	f000 fa84 	bl	8009548 <xQueueGenericCreate>
 8009040:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8009042:	4618      	mov	r0, r3
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}
	...

0800904c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	60f8      	str	r0, [r7, #12]
 8009054:	60b9      	str	r1, [r7, #8]
 8009056:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009058:	2300      	movs	r3, #0
 800905a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d101      	bne.n	800906a <osMessagePut+0x1e>
    ticks = 1;
 8009066:	2301      	movs	r3, #1
 8009068:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800906a:	f7ff fdd7 	bl	8008c1c <inHandlerMode>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d018      	beq.n	80090a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009074:	f107 0210 	add.w	r2, r7, #16
 8009078:	f107 0108 	add.w	r1, r7, #8
 800907c:	2300      	movs	r3, #0
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 fc16 	bl	80098b0 <xQueueGenericSendFromISR>
 8009084:	4603      	mov	r3, r0
 8009086:	2b01      	cmp	r3, #1
 8009088:	d001      	beq.n	800908e <osMessagePut+0x42>
      return osErrorOS;
 800908a:	23ff      	movs	r3, #255	; 0xff
 800908c:	e018      	b.n	80090c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d014      	beq.n	80090be <osMessagePut+0x72>
 8009094:	4b0c      	ldr	r3, [pc, #48]	; (80090c8 <osMessagePut+0x7c>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	e00b      	b.n	80090be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80090a6:	f107 0108 	add.w	r1, r7, #8
 80090aa:	2300      	movs	r3, #0
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 faf8 	bl	80096a4 <xQueueGenericSend>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b01      	cmp	r3, #1
 80090b8:	d001      	beq.n	80090be <osMessagePut+0x72>
      return osErrorOS;
 80090ba:	23ff      	movs	r3, #255	; 0xff
 80090bc:	e000      	b.n	80090c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}
 80090c8:	e000ed04 	.word	0xe000ed04

080090cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80090cc:	b590      	push	{r4, r7, lr}
 80090ce:	b08b      	sub	sp, #44	; 0x2c
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	60b9      	str	r1, [r7, #8]
 80090d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10a      	bne.n	80090fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80090e6:	2380      	movs	r3, #128	; 0x80
 80090e8:	617b      	str	r3, [r7, #20]
    return event;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	461c      	mov	r4, r3
 80090ee:	f107 0314 	add.w	r3, r7, #20
 80090f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80090f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80090fa:	e054      	b.n	80091a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80090fc:	2300      	movs	r3, #0
 80090fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009100:	2300      	movs	r3, #0
 8009102:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910a:	d103      	bne.n	8009114 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800910c:	f04f 33ff 	mov.w	r3, #4294967295
 8009110:	627b      	str	r3, [r7, #36]	; 0x24
 8009112:	e009      	b.n	8009128 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d006      	beq.n	8009128 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800911e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <osMessageGet+0x5c>
      ticks = 1;
 8009124:	2301      	movs	r3, #1
 8009126:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8009128:	f7ff fd78 	bl	8008c1c <inHandlerMode>
 800912c:	4603      	mov	r3, r0
 800912e:	2b00      	cmp	r3, #0
 8009130:	d01c      	beq.n	800916c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8009132:	f107 0220 	add.w	r2, r7, #32
 8009136:	f107 0314 	add.w	r3, r7, #20
 800913a:	3304      	adds	r3, #4
 800913c:	4619      	mov	r1, r3
 800913e:	68b8      	ldr	r0, [r7, #8]
 8009140:	f000 fee6 	bl	8009f10 <xQueueReceiveFromISR>
 8009144:	4603      	mov	r3, r0
 8009146:	2b01      	cmp	r3, #1
 8009148:	d102      	bne.n	8009150 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800914a:	2310      	movs	r3, #16
 800914c:	617b      	str	r3, [r7, #20]
 800914e:	e001      	b.n	8009154 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8009150:	2300      	movs	r3, #0
 8009152:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009154:	6a3b      	ldr	r3, [r7, #32]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d01d      	beq.n	8009196 <osMessageGet+0xca>
 800915a:	4b15      	ldr	r3, [pc, #84]	; (80091b0 <osMessageGet+0xe4>)
 800915c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009160:	601a      	str	r2, [r3, #0]
 8009162:	f3bf 8f4f 	dsb	sy
 8009166:	f3bf 8f6f 	isb	sy
 800916a:	e014      	b.n	8009196 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800916c:	f107 0314 	add.w	r3, r7, #20
 8009170:	3304      	adds	r3, #4
 8009172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009174:	4619      	mov	r1, r3
 8009176:	68b8      	ldr	r0, [r7, #8]
 8009178:	f000 fcd0 	bl	8009b1c <xQueueReceive>
 800917c:	4603      	mov	r3, r0
 800917e:	2b01      	cmp	r3, #1
 8009180:	d102      	bne.n	8009188 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009182:	2310      	movs	r3, #16
 8009184:	617b      	str	r3, [r7, #20]
 8009186:	e006      	b.n	8009196 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800918a:	2b00      	cmp	r3, #0
 800918c:	d101      	bne.n	8009192 <osMessageGet+0xc6>
 800918e:	2300      	movs	r3, #0
 8009190:	e000      	b.n	8009194 <osMessageGet+0xc8>
 8009192:	2340      	movs	r3, #64	; 0x40
 8009194:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	461c      	mov	r4, r3
 800919a:	f107 0314 	add.w	r3, r7, #20
 800919e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80091a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	372c      	adds	r7, #44	; 0x2c
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd90      	pop	{r4, r7, pc}
 80091ae:	bf00      	nop
 80091b0:	e000ed04 	.word	0xe000ed04

080091b4 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b082      	sub	sp, #8
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80091bc:	f7ff fd2e 	bl	8008c1c <inHandlerMode>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d004      	beq.n	80091d0 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 ff48 	bl	800a05c <uxQueueMessagesWaitingFromISR>
 80091cc:	4603      	mov	r3, r0
 80091ce:	e003      	b.n	80091d8 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 ff23 	bl	800a01c <uxQueueMessagesWaiting>
 80091d6:	4603      	mov	r3, r0
  }
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3708      	adds	r7, #8
 80091dc:	46bd      	mov	sp, r7
 80091de:	bd80      	pop	{r7, pc}

080091e0 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80091e8:	f7ff fd18 	bl	8008c1c <inHandlerMode>
 80091ec:	4603      	mov	r3, r0
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d001      	beq.n	80091f6 <osMessageDelete+0x16>
    return osErrorISR;
 80091f2:	2382      	movs	r3, #130	; 0x82
 80091f4:	e003      	b.n	80091fe <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f000 ff50 	bl	800a09c <vQueueDelete>

  return osOK; 
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}

08009206 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009206:	b480      	push	{r7}
 8009208:	b083      	sub	sp, #12
 800920a:	af00      	add	r7, sp, #0
 800920c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f103 0208 	add.w	r2, r3, #8
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f04f 32ff 	mov.w	r2, #4294967295
 800921e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f103 0208 	add.w	r2, r3, #8
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f103 0208 	add.w	r2, r3, #8
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2200      	movs	r2, #0
 8009238:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800923a:	bf00      	nop
 800923c:	370c      	adds	r7, #12
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009246:	b480      	push	{r7}
 8009248:	b083      	sub	sp, #12
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009254:	bf00      	nop
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	689a      	ldr	r2, [r3, #8]
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	683a      	ldr	r2, [r7, #0]
 8009284:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	683a      	ldr	r2, [r7, #0]
 800928a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	1c5a      	adds	r2, r3, #1
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	601a      	str	r2, [r3, #0]
}
 800929c:	bf00      	nop
 800929e:	3714      	adds	r7, #20
 80092a0:	46bd      	mov	sp, r7
 80092a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a6:	4770      	bx	lr

080092a8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092a8:	b480      	push	{r7}
 80092aa:	b085      	sub	sp, #20
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092be:	d103      	bne.n	80092c8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	691b      	ldr	r3, [r3, #16]
 80092c4:	60fb      	str	r3, [r7, #12]
 80092c6:	e00c      	b.n	80092e2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3308      	adds	r3, #8
 80092cc:	60fb      	str	r3, [r7, #12]
 80092ce:	e002      	b.n	80092d6 <vListInsert+0x2e>
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	60fb      	str	r3, [r7, #12]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	68ba      	ldr	r2, [r7, #8]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d2f6      	bcs.n	80092d0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	685a      	ldr	r2, [r3, #4]
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	683a      	ldr	r2, [r7, #0]
 80092f0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68fa      	ldr	r2, [r7, #12]
 80092f6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800931a:	b480      	push	{r7}
 800931c:	b085      	sub	sp, #20
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6892      	ldr	r2, [r2, #8]
 8009330:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	689b      	ldr	r3, [r3, #8]
 8009336:	687a      	ldr	r2, [r7, #4]
 8009338:	6852      	ldr	r2, [r2, #4]
 800933a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	685b      	ldr	r3, [r3, #4]
 8009340:	687a      	ldr	r2, [r7, #4]
 8009342:	429a      	cmp	r2, r3
 8009344:	d103      	bne.n	800934e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2200      	movs	r2, #0
 8009352:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	1e5a      	subs	r2, r3, #1
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3714      	adds	r7, #20
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr
	...

08009370 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b084      	sub	sp, #16
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d10c      	bne.n	800939e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009388:	b672      	cpsid	i
 800938a:	f383 8811 	msr	BASEPRI, r3
 800938e:	f3bf 8f6f 	isb	sy
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	b662      	cpsie	i
 8009398:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800939e:	f002 fd15 	bl	800bdcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681a      	ldr	r2, [r3, #0]
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093aa:	68f9      	ldr	r1, [r7, #12]
 80093ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093ae:	fb01 f303 	mul.w	r3, r1, r3
 80093b2:	441a      	add	r2, r3
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ce:	3b01      	subs	r3, #1
 80093d0:	68f9      	ldr	r1, [r7, #12]
 80093d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80093d4:	fb01 f303 	mul.w	r3, r1, r3
 80093d8:	441a      	add	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	22ff      	movs	r2, #255	; 0xff
 80093e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	22ff      	movs	r2, #255	; 0xff
 80093ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d114      	bne.n	800941e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	691b      	ldr	r3, [r3, #16]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d01a      	beq.n	8009432 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	3310      	adds	r3, #16
 8009400:	4618      	mov	r0, r3
 8009402:	f001 fc97 	bl	800ad34 <xTaskRemoveFromEventList>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d012      	beq.n	8009432 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800940c:	4b0c      	ldr	r3, [pc, #48]	; (8009440 <xQueueGenericReset+0xd0>)
 800940e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	f3bf 8f6f 	isb	sy
 800941c:	e009      	b.n	8009432 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3310      	adds	r3, #16
 8009422:	4618      	mov	r0, r3
 8009424:	f7ff feef 	bl	8009206 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	3324      	adds	r3, #36	; 0x24
 800942c:	4618      	mov	r0, r3
 800942e:	f7ff feea 	bl	8009206 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009432:	f002 fcff 	bl	800be34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009436:	2301      	movs	r3, #1
}
 8009438:	4618      	mov	r0, r3
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}
 8009440:	e000ed04 	.word	0xe000ed04

08009444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009444:	b580      	push	{r7, lr}
 8009446:	b08e      	sub	sp, #56	; 0x38
 8009448:	af02      	add	r7, sp, #8
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]
 8009450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d10c      	bne.n	8009472 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8009458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800945c:	b672      	cpsid	i
 800945e:	f383 8811 	msr	BASEPRI, r3
 8009462:	f3bf 8f6f 	isb	sy
 8009466:	f3bf 8f4f 	dsb	sy
 800946a:	b662      	cpsie	i
 800946c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800946e:	bf00      	nop
 8009470:	e7fe      	b.n	8009470 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d10c      	bne.n	8009492 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	b672      	cpsid	i
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	b662      	cpsie	i
 800948c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d002      	beq.n	800949e <xQueueGenericCreateStatic+0x5a>
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <xQueueGenericCreateStatic+0x5e>
 800949e:	2301      	movs	r3, #1
 80094a0:	e000      	b.n	80094a4 <xQueueGenericCreateStatic+0x60>
 80094a2:	2300      	movs	r3, #0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10c      	bne.n	80094c2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80094a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ac:	b672      	cpsid	i
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	b662      	cpsie	i
 80094bc:	623b      	str	r3, [r7, #32]
}
 80094be:	bf00      	nop
 80094c0:	e7fe      	b.n	80094c0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d102      	bne.n	80094ce <xQueueGenericCreateStatic+0x8a>
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d101      	bne.n	80094d2 <xQueueGenericCreateStatic+0x8e>
 80094ce:	2301      	movs	r3, #1
 80094d0:	e000      	b.n	80094d4 <xQueueGenericCreateStatic+0x90>
 80094d2:	2300      	movs	r3, #0
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d10c      	bne.n	80094f2 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80094d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094dc:	b672      	cpsid	i
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	b662      	cpsie	i
 80094ec:	61fb      	str	r3, [r7, #28]
}
 80094ee:	bf00      	nop
 80094f0:	e7fe      	b.n	80094f0 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80094f2:	2348      	movs	r3, #72	; 0x48
 80094f4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b48      	cmp	r3, #72	; 0x48
 80094fa:	d00c      	beq.n	8009516 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009500:	b672      	cpsid	i
 8009502:	f383 8811 	msr	BASEPRI, r3
 8009506:	f3bf 8f6f 	isb	sy
 800950a:	f3bf 8f4f 	dsb	sy
 800950e:	b662      	cpsie	i
 8009510:	61bb      	str	r3, [r7, #24]
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009516:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800951c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d00d      	beq.n	800953e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800952a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800952e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009530:	9300      	str	r3, [sp, #0]
 8009532:	4613      	mov	r3, r2
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68b9      	ldr	r1, [r7, #8]
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f847 	bl	80095cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009540:	4618      	mov	r0, r3
 8009542:	3730      	adds	r7, #48	; 0x30
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}

08009548 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009548:	b580      	push	{r7, lr}
 800954a:	b08a      	sub	sp, #40	; 0x28
 800954c:	af02      	add	r7, sp, #8
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	4613      	mov	r3, r2
 8009554:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d10c      	bne.n	8009576 <xQueueGenericCreate+0x2e>
	__asm volatile
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	b672      	cpsid	i
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	b662      	cpsie	i
 8009570:	613b      	str	r3, [r7, #16]
}
 8009572:	bf00      	nop
 8009574:	e7fe      	b.n	8009574 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d102      	bne.n	8009582 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800957c:	2300      	movs	r3, #0
 800957e:	61fb      	str	r3, [r7, #28]
 8009580:	e004      	b.n	800958c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	68ba      	ldr	r2, [r7, #8]
 8009586:	fb02 f303 	mul.w	r3, r2, r3
 800958a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	3348      	adds	r3, #72	; 0x48
 8009590:	4618      	mov	r0, r3
 8009592:	f002 fd47 	bl	800c024 <pvPortMalloc>
 8009596:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009598:	69bb      	ldr	r3, [r7, #24]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3348      	adds	r3, #72	; 0x48
 80095a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095b0:	79fa      	ldrb	r2, [r7, #7]
 80095b2:	69bb      	ldr	r3, [r7, #24]
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	4613      	mov	r3, r2
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	68b9      	ldr	r1, [r7, #8]
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 f805 	bl	80095cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095c2:	69bb      	ldr	r3, [r7, #24]
	}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3720      	adds	r7, #32
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d103      	bne.n	80095e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	69ba      	ldr	r2, [r7, #24]
 80095e4:	601a      	str	r2, [r3, #0]
 80095e6:	e002      	b.n	80095ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80095e8:	69bb      	ldr	r3, [r7, #24]
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80095fa:	2101      	movs	r1, #1
 80095fc:	69b8      	ldr	r0, [r7, #24]
 80095fe:	f7ff feb7 	bl	8009370 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009602:	bf00      	nop
 8009604:	3710      	adds	r7, #16
 8009606:	46bd      	mov	sp, r7
 8009608:	bd80      	pop	{r7, pc}

0800960a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d00e      	beq.n	8009636 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2200      	movs	r2, #0
 8009628:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800962a:	2300      	movs	r3, #0
 800962c:	2200      	movs	r2, #0
 800962e:	2100      	movs	r1, #0
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f000 f837 	bl	80096a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009636:	bf00      	nop
 8009638:	3708      	adds	r7, #8
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800963e:	b580      	push	{r7, lr}
 8009640:	b086      	sub	sp, #24
 8009642:	af00      	add	r7, sp, #0
 8009644:	4603      	mov	r3, r0
 8009646:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009648:	2301      	movs	r3, #1
 800964a:	617b      	str	r3, [r7, #20]
 800964c:	2300      	movs	r3, #0
 800964e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	461a      	mov	r2, r3
 8009654:	6939      	ldr	r1, [r7, #16]
 8009656:	6978      	ldr	r0, [r7, #20]
 8009658:	f7ff ff76 	bl	8009548 <xQueueGenericCreate>
 800965c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f7ff ffd3 	bl	800960a <prvInitialiseMutex>

		return xNewQueue;
 8009664:	68fb      	ldr	r3, [r7, #12]
	}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}

0800966e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800966e:	b580      	push	{r7, lr}
 8009670:	b088      	sub	sp, #32
 8009672:	af02      	add	r7, sp, #8
 8009674:	4603      	mov	r3, r0
 8009676:	6039      	str	r1, [r7, #0]
 8009678:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800967a:	2301      	movs	r3, #1
 800967c:	617b      	str	r3, [r7, #20]
 800967e:	2300      	movs	r3, #0
 8009680:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009682:	79fb      	ldrb	r3, [r7, #7]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	2200      	movs	r2, #0
 800968a:	6939      	ldr	r1, [r7, #16]
 800968c:	6978      	ldr	r0, [r7, #20]
 800968e:	f7ff fed9 	bl	8009444 <xQueueGenericCreateStatic>
 8009692:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff ffb8 	bl	800960a <prvInitialiseMutex>

		return xNewQueue;
 800969a:	68fb      	ldr	r3, [r7, #12]
	}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b08e      	sub	sp, #56	; 0x38
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80096b2:	2300      	movs	r3, #0
 80096b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80096ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10c      	bne.n	80096da <xQueueGenericSend+0x36>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	b672      	cpsid	i
 80096c6:	f383 8811 	msr	BASEPRI, r3
 80096ca:	f3bf 8f6f 	isb	sy
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	b662      	cpsie	i
 80096d4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80096d6:	bf00      	nop
 80096d8:	e7fe      	b.n	80096d8 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d103      	bne.n	80096e8 <xQueueGenericSend+0x44>
 80096e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <xQueueGenericSend+0x48>
 80096e8:	2301      	movs	r3, #1
 80096ea:	e000      	b.n	80096ee <xQueueGenericSend+0x4a>
 80096ec:	2300      	movs	r3, #0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10c      	bne.n	800970c <xQueueGenericSend+0x68>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096f6:	b672      	cpsid	i
 80096f8:	f383 8811 	msr	BASEPRI, r3
 80096fc:	f3bf 8f6f 	isb	sy
 8009700:	f3bf 8f4f 	dsb	sy
 8009704:	b662      	cpsie	i
 8009706:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009708:	bf00      	nop
 800970a:	e7fe      	b.n	800970a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	2b02      	cmp	r3, #2
 8009710:	d103      	bne.n	800971a <xQueueGenericSend+0x76>
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <xQueueGenericSend+0x7a>
 800971a:	2301      	movs	r3, #1
 800971c:	e000      	b.n	8009720 <xQueueGenericSend+0x7c>
 800971e:	2300      	movs	r3, #0
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10c      	bne.n	800973e <xQueueGenericSend+0x9a>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	b672      	cpsid	i
 800972a:	f383 8811 	msr	BASEPRI, r3
 800972e:	f3bf 8f6f 	isb	sy
 8009732:	f3bf 8f4f 	dsb	sy
 8009736:	b662      	cpsie	i
 8009738:	623b      	str	r3, [r7, #32]
}
 800973a:	bf00      	nop
 800973c:	e7fe      	b.n	800973c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800973e:	f001 fcbd 	bl	800b0bc <xTaskGetSchedulerState>
 8009742:	4603      	mov	r3, r0
 8009744:	2b00      	cmp	r3, #0
 8009746:	d102      	bne.n	800974e <xQueueGenericSend+0xaa>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d101      	bne.n	8009752 <xQueueGenericSend+0xae>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <xQueueGenericSend+0xb0>
 8009752:	2300      	movs	r3, #0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d10c      	bne.n	8009772 <xQueueGenericSend+0xce>
	__asm volatile
 8009758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800975c:	b672      	cpsid	i
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	b662      	cpsie	i
 800976c:	61fb      	str	r3, [r7, #28]
}
 800976e:	bf00      	nop
 8009770:	e7fe      	b.n	8009770 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009772:	f002 fb2b 	bl	800bdcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800977e:	429a      	cmp	r2, r3
 8009780:	d302      	bcc.n	8009788 <xQueueGenericSend+0xe4>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	2b02      	cmp	r3, #2
 8009786:	d129      	bne.n	80097dc <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009788:	683a      	ldr	r2, [r7, #0]
 800978a:	68b9      	ldr	r1, [r7, #8]
 800978c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800978e:	f000 fcc2 	bl	800a116 <prvCopyDataToQueue>
 8009792:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d010      	beq.n	80097be <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800979c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979e:	3324      	adds	r3, #36	; 0x24
 80097a0:	4618      	mov	r0, r3
 80097a2:	f001 fac7 	bl	800ad34 <xTaskRemoveFromEventList>
 80097a6:	4603      	mov	r3, r0
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d013      	beq.n	80097d4 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80097ac:	4b3f      	ldr	r3, [pc, #252]	; (80098ac <xQueueGenericSend+0x208>)
 80097ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	f3bf 8f4f 	dsb	sy
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	e00a      	b.n	80097d4 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80097be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d007      	beq.n	80097d4 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80097c4:	4b39      	ldr	r3, [pc, #228]	; (80098ac <xQueueGenericSend+0x208>)
 80097c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ca:	601a      	str	r2, [r3, #0]
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80097d4:	f002 fb2e 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 80097d8:	2301      	movs	r3, #1
 80097da:	e063      	b.n	80098a4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d103      	bne.n	80097ea <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097e2:	f002 fb27 	bl	800be34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80097e6:	2300      	movs	r3, #0
 80097e8:	e05c      	b.n	80098a4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d106      	bne.n	80097fe <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fb01 	bl	800adfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097fa:	2301      	movs	r3, #1
 80097fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097fe:	f002 fb19 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009802:	f001 f85d 	bl	800a8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009806:	f002 fae1 	bl	800bdcc <vPortEnterCritical>
 800980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800980c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009810:	b25b      	sxtb	r3, r3
 8009812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009816:	d103      	bne.n	8009820 <xQueueGenericSend+0x17c>
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009822:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009826:	b25b      	sxtb	r3, r3
 8009828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800982c:	d103      	bne.n	8009836 <xQueueGenericSend+0x192>
 800982e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009830:	2200      	movs	r2, #0
 8009832:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009836:	f002 fafd 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800983a:	1d3a      	adds	r2, r7, #4
 800983c:	f107 0314 	add.w	r3, r7, #20
 8009840:	4611      	mov	r1, r2
 8009842:	4618      	mov	r0, r3
 8009844:	f001 faf0 	bl	800ae28 <xTaskCheckForTimeOut>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d124      	bne.n	8009898 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800984e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009850:	f000 fd59 	bl	800a306 <prvIsQueueFull>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d018      	beq.n	800988c <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	3310      	adds	r3, #16
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	4611      	mov	r1, r2
 8009862:	4618      	mov	r0, r3
 8009864:	f001 fa12 	bl	800ac8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009868:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800986a:	f000 fce4 	bl	800a236 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800986e:	f001 f835 	bl	800a8dc <xTaskResumeAll>
 8009872:	4603      	mov	r3, r0
 8009874:	2b00      	cmp	r3, #0
 8009876:	f47f af7c 	bne.w	8009772 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800987a:	4b0c      	ldr	r3, [pc, #48]	; (80098ac <xQueueGenericSend+0x208>)
 800987c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	f3bf 8f6f 	isb	sy
 800988a:	e772      	b.n	8009772 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800988c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800988e:	f000 fcd2 	bl	800a236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009892:	f001 f823 	bl	800a8dc <xTaskResumeAll>
 8009896:	e76c      	b.n	8009772 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800989a:	f000 fccc 	bl	800a236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800989e:	f001 f81d 	bl	800a8dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80098a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3738      	adds	r7, #56	; 0x38
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08e      	sub	sp, #56	; 0x38
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10c      	bne.n	80098e2 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	b672      	cpsid	i
 80098ce:	f383 8811 	msr	BASEPRI, r3
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	f3bf 8f4f 	dsb	sy
 80098da:	b662      	cpsie	i
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 80098de:	bf00      	nop
 80098e0:	e7fe      	b.n	80098e0 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d103      	bne.n	80098f0 <xQueueGenericSendFromISR+0x40>
 80098e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d101      	bne.n	80098f4 <xQueueGenericSendFromISR+0x44>
 80098f0:	2301      	movs	r3, #1
 80098f2:	e000      	b.n	80098f6 <xQueueGenericSendFromISR+0x46>
 80098f4:	2300      	movs	r3, #0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d10c      	bne.n	8009914 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80098fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098fe:	b672      	cpsid	i
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	b662      	cpsie	i
 800990e:	623b      	str	r3, [r7, #32]
}
 8009910:	bf00      	nop
 8009912:	e7fe      	b.n	8009912 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d103      	bne.n	8009922 <xQueueGenericSendFromISR+0x72>
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800991e:	2b01      	cmp	r3, #1
 8009920:	d101      	bne.n	8009926 <xQueueGenericSendFromISR+0x76>
 8009922:	2301      	movs	r3, #1
 8009924:	e000      	b.n	8009928 <xQueueGenericSendFromISR+0x78>
 8009926:	2300      	movs	r3, #0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10c      	bne.n	8009946 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800992c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009930:	b672      	cpsid	i
 8009932:	f383 8811 	msr	BASEPRI, r3
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	f3bf 8f4f 	dsb	sy
 800993e:	b662      	cpsie	i
 8009940:	61fb      	str	r3, [r7, #28]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009946:	f002 fb29 	bl	800bf9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800994a:	f3ef 8211 	mrs	r2, BASEPRI
 800994e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009952:	b672      	cpsid	i
 8009954:	f383 8811 	msr	BASEPRI, r3
 8009958:	f3bf 8f6f 	isb	sy
 800995c:	f3bf 8f4f 	dsb	sy
 8009960:	b662      	cpsie	i
 8009962:	61ba      	str	r2, [r7, #24]
 8009964:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009966:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009968:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009972:	429a      	cmp	r2, r3
 8009974:	d302      	bcc.n	800997c <xQueueGenericSendFromISR+0xcc>
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b02      	cmp	r3, #2
 800997a:	d12c      	bne.n	80099d6 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800998c:	f000 fbc3 	bl	800a116 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009990:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009998:	d112      	bne.n	80099c0 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d016      	beq.n	80099d0 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	3324      	adds	r3, #36	; 0x24
 80099a6:	4618      	mov	r0, r3
 80099a8:	f001 f9c4 	bl	800ad34 <xTaskRemoveFromEventList>
 80099ac:	4603      	mov	r3, r0
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d00e      	beq.n	80099d0 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00b      	beq.n	80099d0 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2201      	movs	r2, #1
 80099bc:	601a      	str	r2, [r3, #0]
 80099be:	e007      	b.n	80099d0 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80099c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80099c4:	3301      	adds	r3, #1
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	b25a      	sxtb	r2, r3
 80099ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80099d0:	2301      	movs	r3, #1
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80099d4:	e001      	b.n	80099da <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	637b      	str	r3, [r7, #52]	; 0x34
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80099e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80099e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80099e8:	4618      	mov	r0, r3
 80099ea:	3738      	adds	r7, #56	; 0x38
 80099ec:	46bd      	mov	sp, r7
 80099ee:	bd80      	pop	{r7, pc}

080099f0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b08e      	sub	sp, #56	; 0x38
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80099fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d10c      	bne.n	8009a1e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a08:	b672      	cpsid	i
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	b662      	cpsie	i
 8009a18:	623b      	str	r3, [r7, #32]
}
 8009a1a:	bf00      	nop
 8009a1c:	e7fe      	b.n	8009a1c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d00c      	beq.n	8009a40 <xQueueGiveFromISR+0x50>
	__asm volatile
 8009a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a2a:	b672      	cpsid	i
 8009a2c:	f383 8811 	msr	BASEPRI, r3
 8009a30:	f3bf 8f6f 	isb	sy
 8009a34:	f3bf 8f4f 	dsb	sy
 8009a38:	b662      	cpsie	i
 8009a3a:	61fb      	str	r3, [r7, #28]
}
 8009a3c:	bf00      	nop
 8009a3e:	e7fe      	b.n	8009a3e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d103      	bne.n	8009a50 <xQueueGiveFromISR+0x60>
 8009a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4a:	689b      	ldr	r3, [r3, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <xQueueGiveFromISR+0x64>
 8009a50:	2301      	movs	r3, #1
 8009a52:	e000      	b.n	8009a56 <xQueueGiveFromISR+0x66>
 8009a54:	2300      	movs	r3, #0
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10c      	bne.n	8009a74 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5e:	b672      	cpsid	i
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	b662      	cpsie	i
 8009a6e:	61bb      	str	r3, [r7, #24]
}
 8009a70:	bf00      	nop
 8009a72:	e7fe      	b.n	8009a72 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a74:	f002 fa92 	bl	800bf9c <vPortValidateInterruptPriority>
	__asm volatile
 8009a78:	f3ef 8211 	mrs	r2, BASEPRI
 8009a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a80:	b672      	cpsid	i
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	b662      	cpsie	i
 8009a90:	617a      	str	r2, [r7, #20]
 8009a92:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a94:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d22b      	bcs.n	8009b00 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009aaa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	1c5a      	adds	r2, r3, #1
 8009ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ab8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009aba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac2:	d112      	bne.n	8009aea <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d016      	beq.n	8009afa <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ace:	3324      	adds	r3, #36	; 0x24
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f92f 	bl	800ad34 <xTaskRemoveFromEventList>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00e      	beq.n	8009afa <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009adc:	683b      	ldr	r3, [r7, #0]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d00b      	beq.n	8009afa <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	601a      	str	r2, [r3, #0]
 8009ae8:	e007      	b.n	8009afa <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009aea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009aee:	3301      	adds	r3, #1
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	b25a      	sxtb	r2, r3
 8009af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009afa:	2301      	movs	r3, #1
 8009afc:	637b      	str	r3, [r7, #52]	; 0x34
 8009afe:	e001      	b.n	8009b04 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b00:	2300      	movs	r3, #0
 8009b02:	637b      	str	r3, [r7, #52]	; 0x34
 8009b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b06:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f383 8811 	msr	BASEPRI, r3
}
 8009b0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3738      	adds	r7, #56	; 0x38
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
	...

08009b1c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b08c      	sub	sp, #48	; 0x30
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d10c      	bne.n	8009b50 <xQueueReceive+0x34>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	b672      	cpsid	i
 8009b3c:	f383 8811 	msr	BASEPRI, r3
 8009b40:	f3bf 8f6f 	isb	sy
 8009b44:	f3bf 8f4f 	dsb	sy
 8009b48:	b662      	cpsie	i
 8009b4a:	623b      	str	r3, [r7, #32]
}
 8009b4c:	bf00      	nop
 8009b4e:	e7fe      	b.n	8009b4e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d103      	bne.n	8009b5e <xQueueReceive+0x42>
 8009b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d101      	bne.n	8009b62 <xQueueReceive+0x46>
 8009b5e:	2301      	movs	r3, #1
 8009b60:	e000      	b.n	8009b64 <xQueueReceive+0x48>
 8009b62:	2300      	movs	r3, #0
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d10c      	bne.n	8009b82 <xQueueReceive+0x66>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	b672      	cpsid	i
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	b662      	cpsie	i
 8009b7c:	61fb      	str	r3, [r7, #28]
}
 8009b7e:	bf00      	nop
 8009b80:	e7fe      	b.n	8009b80 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b82:	f001 fa9b 	bl	800b0bc <xTaskGetSchedulerState>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d102      	bne.n	8009b92 <xQueueReceive+0x76>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d101      	bne.n	8009b96 <xQueueReceive+0x7a>
 8009b92:	2301      	movs	r3, #1
 8009b94:	e000      	b.n	8009b98 <xQueueReceive+0x7c>
 8009b96:	2300      	movs	r3, #0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <xQueueReceive+0x9a>
	__asm volatile
 8009b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba0:	b672      	cpsid	i
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	b662      	cpsie	i
 8009bb0:	61bb      	str	r3, [r7, #24]
}
 8009bb2:	bf00      	nop
 8009bb4:	e7fe      	b.n	8009bb4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bb6:	f002 f909 	bl	800bdcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bbe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d01f      	beq.n	8009c06 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bc6:	68b9      	ldr	r1, [r7, #8]
 8009bc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bca:	f000 fb0e 	bl	800a1ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd0:	1e5a      	subs	r2, r3, #1
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00f      	beq.n	8009bfe <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be0:	3310      	adds	r3, #16
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 f8a6 	bl	800ad34 <xTaskRemoveFromEventList>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bee:	4b3d      	ldr	r3, [pc, #244]	; (8009ce4 <xQueueReceive+0x1c8>)
 8009bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009bfe:	f002 f919 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 8009c02:	2301      	movs	r3, #1
 8009c04:	e069      	b.n	8009cda <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d103      	bne.n	8009c14 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c0c:	f002 f912 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c10:	2300      	movs	r3, #0
 8009c12:	e062      	b.n	8009cda <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d106      	bne.n	8009c28 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c1a:	f107 0310 	add.w	r3, r7, #16
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 f8ec 	bl	800adfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c24:	2301      	movs	r3, #1
 8009c26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c28:	f002 f904 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c2c:	f000 fe48 	bl	800a8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c30:	f002 f8cc 	bl	800bdcc <vPortEnterCritical>
 8009c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c3a:	b25b      	sxtb	r3, r3
 8009c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c40:	d103      	bne.n	8009c4a <xQueueReceive+0x12e>
 8009c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c50:	b25b      	sxtb	r3, r3
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d103      	bne.n	8009c60 <xQueueReceive+0x144>
 8009c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c60:	f002 f8e8 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c64:	1d3a      	adds	r2, r7, #4
 8009c66:	f107 0310 	add.w	r3, r7, #16
 8009c6a:	4611      	mov	r1, r2
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f001 f8db 	bl	800ae28 <xTaskCheckForTimeOut>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d123      	bne.n	8009cc0 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c7a:	f000 fb2e 	bl	800a2da <prvIsQueueEmpty>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d017      	beq.n	8009cb4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c86:	3324      	adds	r3, #36	; 0x24
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	4611      	mov	r1, r2
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	f000 fffd 	bl	800ac8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c94:	f000 facf 	bl	800a236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c98:	f000 fe20 	bl	800a8dc <xTaskResumeAll>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d189      	bne.n	8009bb6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009ca2:	4b10      	ldr	r3, [pc, #64]	; (8009ce4 <xQueueReceive+0x1c8>)
 8009ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	e780      	b.n	8009bb6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cb6:	f000 fabe 	bl	800a236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cba:	f000 fe0f 	bl	800a8dc <xTaskResumeAll>
 8009cbe:	e77a      	b.n	8009bb6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc2:	f000 fab8 	bl	800a236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cc6:	f000 fe09 	bl	800a8dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ccc:	f000 fb05 	bl	800a2da <prvIsQueueEmpty>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f43f af6f 	beq.w	8009bb6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009cd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3730      	adds	r7, #48	; 0x30
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b08e      	sub	sp, #56	; 0x38
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d10c      	bne.n	8009d1e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d08:	b672      	cpsid	i
 8009d0a:	f383 8811 	msr	BASEPRI, r3
 8009d0e:	f3bf 8f6f 	isb	sy
 8009d12:	f3bf 8f4f 	dsb	sy
 8009d16:	b662      	cpsie	i
 8009d18:	623b      	str	r3, [r7, #32]
}
 8009d1a:	bf00      	nop
 8009d1c:	e7fe      	b.n	8009d1c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d00c      	beq.n	8009d40 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2a:	b672      	cpsid	i
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	b662      	cpsie	i
 8009d3a:	61fb      	str	r3, [r7, #28]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d40:	f001 f9bc 	bl	800b0bc <xTaskGetSchedulerState>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d102      	bne.n	8009d50 <xQueueSemaphoreTake+0x68>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d101      	bne.n	8009d54 <xQueueSemaphoreTake+0x6c>
 8009d50:	2301      	movs	r3, #1
 8009d52:	e000      	b.n	8009d56 <xQueueSemaphoreTake+0x6e>
 8009d54:	2300      	movs	r3, #0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10c      	bne.n	8009d74 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d5e:	b672      	cpsid	i
 8009d60:	f383 8811 	msr	BASEPRI, r3
 8009d64:	f3bf 8f6f 	isb	sy
 8009d68:	f3bf 8f4f 	dsb	sy
 8009d6c:	b662      	cpsie	i
 8009d6e:	61bb      	str	r3, [r7, #24]
}
 8009d70:	bf00      	nop
 8009d72:	e7fe      	b.n	8009d72 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d74:	f002 f82a 	bl	800bdcc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d7c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d024      	beq.n	8009dce <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d94:	f001 fb58 	bl	800b448 <pvTaskIncrementMutexHeldCount>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	691b      	ldr	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00f      	beq.n	8009dc6 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da8:	3310      	adds	r3, #16
 8009daa:	4618      	mov	r0, r3
 8009dac:	f000 ffc2 	bl	800ad34 <xTaskRemoveFromEventList>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d007      	beq.n	8009dc6 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009db6:	4b55      	ldr	r3, [pc, #340]	; (8009f0c <xQueueSemaphoreTake+0x224>)
 8009db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dbc:	601a      	str	r2, [r3, #0]
 8009dbe:	f3bf 8f4f 	dsb	sy
 8009dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dc6:	f002 f835 	bl	800be34 <vPortExitCritical>
				return pdPASS;
 8009dca:	2301      	movs	r3, #1
 8009dcc:	e099      	b.n	8009f02 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d113      	bne.n	8009dfc <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d00c      	beq.n	8009df4 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dde:	b672      	cpsid	i
 8009de0:	f383 8811 	msr	BASEPRI, r3
 8009de4:	f3bf 8f6f 	isb	sy
 8009de8:	f3bf 8f4f 	dsb	sy
 8009dec:	b662      	cpsie	i
 8009dee:	617b      	str	r3, [r7, #20]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009df4:	f002 f81e 	bl	800be34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e082      	b.n	8009f02 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 fff8 	bl	800adfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e10:	f002 f810 	bl	800be34 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e14:	f000 fd54 	bl	800a8c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e18:	f001 ffd8 	bl	800bdcc <vPortEnterCritical>
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d103      	bne.n	8009e32 <xQueueSemaphoreTake+0x14a>
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d103      	bne.n	8009e48 <xQueueSemaphoreTake+0x160>
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e48:	f001 fff4 	bl	800be34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	f107 030c 	add.w	r3, r7, #12
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 ffe7 	bl	800ae28 <xTaskCheckForTimeOut>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d132      	bne.n	8009ec6 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e62:	f000 fa3a 	bl	800a2da <prvIsQueueEmpty>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d026      	beq.n	8009eba <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009e74:	f001 ffaa 	bl	800bdcc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 f93b 	bl	800b0f8 <xTaskPriorityInherit>
 8009e82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e84:	f001 ffd6 	bl	800be34 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	3324      	adds	r3, #36	; 0x24
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fefb 	bl	800ac8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e98:	f000 f9cd 	bl	800a236 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e9c:	f000 fd1e 	bl	800a8dc <xTaskResumeAll>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f47f af66 	bne.w	8009d74 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009ea8:	4b18      	ldr	r3, [pc, #96]	; (8009f0c <xQueueSemaphoreTake+0x224>)
 8009eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	e75c      	b.n	8009d74 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ebc:	f000 f9bb 	bl	800a236 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ec0:	f000 fd0c 	bl	800a8dc <xTaskResumeAll>
 8009ec4:	e756      	b.n	8009d74 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ec8:	f000 f9b5 	bl	800a236 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ecc:	f000 fd06 	bl	800a8dc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ed2:	f000 fa02 	bl	800a2da <prvIsQueueEmpty>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f43f af4b 	beq.w	8009d74 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00d      	beq.n	8009f00 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009ee4:	f001 ff72 	bl	800bdcc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eea:	f000 f8fc 	bl	800a0e6 <prvGetDisinheritPriorityAfterTimeout>
 8009eee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 fa08 	bl	800b30c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009efc:	f001 ff9a 	bl	800be34 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3738      	adds	r7, #56	; 0x38
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b08e      	sub	sp, #56	; 0x38
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	60f8      	str	r0, [r7, #12]
 8009f18:	60b9      	str	r1, [r7, #8]
 8009f1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d10c      	bne.n	8009f40 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f2a:	b672      	cpsid	i
 8009f2c:	f383 8811 	msr	BASEPRI, r3
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	f3bf 8f4f 	dsb	sy
 8009f38:	b662      	cpsie	i
 8009f3a:	623b      	str	r3, [r7, #32]
}
 8009f3c:	bf00      	nop
 8009f3e:	e7fe      	b.n	8009f3e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d103      	bne.n	8009f4e <xQueueReceiveFromISR+0x3e>
 8009f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <xQueueReceiveFromISR+0x42>
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e000      	b.n	8009f54 <xQueueReceiveFromISR+0x44>
 8009f52:	2300      	movs	r3, #0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5c:	b672      	cpsid	i
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	b662      	cpsie	i
 8009f6c:	61fb      	str	r3, [r7, #28]
}
 8009f6e:	bf00      	nop
 8009f70:	e7fe      	b.n	8009f70 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f72:	f002 f813 	bl	800bf9c <vPortValidateInterruptPriority>
	__asm volatile
 8009f76:	f3ef 8211 	mrs	r2, BASEPRI
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	b672      	cpsid	i
 8009f80:	f383 8811 	msr	BASEPRI, r3
 8009f84:	f3bf 8f6f 	isb	sy
 8009f88:	f3bf 8f4f 	dsb	sy
 8009f8c:	b662      	cpsie	i
 8009f8e:	61ba      	str	r2, [r7, #24]
 8009f90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009f92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009f94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d02f      	beq.n	800a002 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009fac:	68b9      	ldr	r1, [r7, #8]
 8009fae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009fb0:	f000 f91b 	bl	800a1ea <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb6:	1e5a      	subs	r2, r3, #1
 8009fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009fbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc4:	d112      	bne.n	8009fec <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d016      	beq.n	8009ffc <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fd0:	3310      	adds	r3, #16
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 feae 	bl	800ad34 <xTaskRemoveFromEventList>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00e      	beq.n	8009ffc <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d00b      	beq.n	8009ffc <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	601a      	str	r2, [r3, #0]
 8009fea:	e007      	b.n	8009ffc <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	b2db      	uxtb	r3, r3
 8009ff4:	b25a      	sxtb	r2, r3
 8009ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	637b      	str	r3, [r7, #52]	; 0x34
 800a000:	e001      	b.n	800a006 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a002:	2300      	movs	r3, #0
 800a004:	637b      	str	r3, [r7, #52]	; 0x34
 800a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a008:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	f383 8811 	msr	BASEPRI, r3
}
 800a010:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a014:	4618      	mov	r0, r3
 800a016:	3738      	adds	r7, #56	; 0x38
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b084      	sub	sp, #16
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d10c      	bne.n	800a044 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02e:	b672      	cpsid	i
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	b662      	cpsie	i
 800a03e:	60bb      	str	r3, [r7, #8]
}
 800a040:	bf00      	nop
 800a042:	e7fe      	b.n	800a042 <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a044:	f001 fec2 	bl	800bdcc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04c:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a04e:	f001 fef1 	bl	800be34 <vPortExitCritical>

	return uxReturn;
 800a052:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a05c:	b480      	push	{r7}
 800a05e:	b087      	sub	sp, #28
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10c      	bne.n	800a088 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a072:	b672      	cpsid	i
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	b662      	cpsie	i
 800a082:	60fb      	str	r3, [r7, #12]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a08c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a08e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a090:	4618      	mov	r0, r3
 800a092:	371c      	adds	r7, #28
 800a094:	46bd      	mov	sp, r7
 800a096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09a:	4770      	bx	lr

0800a09c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b084      	sub	sp, #16
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d10c      	bne.n	800a0c8 <vQueueDelete+0x2c>
	__asm volatile
 800a0ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b2:	b672      	cpsid	i
 800a0b4:	f383 8811 	msr	BASEPRI, r3
 800a0b8:	f3bf 8f6f 	isb	sy
 800a0bc:	f3bf 8f4f 	dsb	sy
 800a0c0:	b662      	cpsie	i
 800a0c2:	60bb      	str	r3, [r7, #8]
}
 800a0c4:	bf00      	nop
 800a0c6:	e7fe      	b.n	800a0c6 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a0c8:	68f8      	ldr	r0, [r7, #12]
 800a0ca:	f000 f95f 	bl	800a38c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d102      	bne.n	800a0de <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a0d8:	68f8      	ldr	r0, [r7, #12]
 800a0da:	f002 f86d 	bl	800c1b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a0de:	bf00      	nop
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a0e6:	b480      	push	{r7}
 800a0e8:	b085      	sub	sp, #20
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d006      	beq.n	800a104 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f1c3 0307 	rsb	r3, r3, #7
 800a100:	60fb      	str	r3, [r7, #12]
 800a102:	e001      	b.n	800a108 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a104:	2300      	movs	r3, #0
 800a106:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a108:	68fb      	ldr	r3, [r7, #12]
	}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b086      	sub	sp, #24
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a122:	2300      	movs	r3, #0
 800a124:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a12a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a130:	2b00      	cmp	r3, #0
 800a132:	d10d      	bne.n	800a150 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d14d      	bne.n	800a1d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	689b      	ldr	r3, [r3, #8]
 800a140:	4618      	mov	r0, r3
 800a142:	f001 f859 	bl	800b1f8 <xTaskPriorityDisinherit>
 800a146:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2200      	movs	r2, #0
 800a14c:	609a      	str	r2, [r3, #8]
 800a14e:	e043      	b.n	800a1d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d119      	bne.n	800a18a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6858      	ldr	r0, [r3, #4]
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15e:	461a      	mov	r2, r3
 800a160:	68b9      	ldr	r1, [r7, #8]
 800a162:	f011 f93b 	bl	801b3dc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	685a      	ldr	r2, [r3, #4]
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a16e:	441a      	add	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	685a      	ldr	r2, [r3, #4]
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	689b      	ldr	r3, [r3, #8]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d32b      	bcc.n	800a1d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	605a      	str	r2, [r3, #4]
 800a188:	e026      	b.n	800a1d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	68d8      	ldr	r0, [r3, #12]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a192:	461a      	mov	r2, r3
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	f011 f921 	bl	801b3dc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	425b      	negs	r3, r3
 800a1a4:	441a      	add	r2, r3
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	68da      	ldr	r2, [r3, #12]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	429a      	cmp	r2, r3
 800a1b4:	d207      	bcs.n	800a1c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	689a      	ldr	r2, [r3, #8]
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1be:	425b      	negs	r3, r3
 800a1c0:	441a      	add	r2, r3
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b02      	cmp	r3, #2
 800a1ca:	d105      	bne.n	800a1d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d002      	beq.n	800a1d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	3b01      	subs	r3, #1
 800a1d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	1c5a      	adds	r2, r3, #1
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a1e0:	697b      	ldr	r3, [r7, #20]
}
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	3718      	adds	r7, #24
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	bd80      	pop	{r7, pc}

0800a1ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a1ea:	b580      	push	{r7, lr}
 800a1ec:	b082      	sub	sp, #8
 800a1ee:	af00      	add	r7, sp, #0
 800a1f0:	6078      	str	r0, [r7, #4]
 800a1f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d018      	beq.n	800a22e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	68da      	ldr	r2, [r3, #12]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a204:	441a      	add	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	68da      	ldr	r2, [r3, #12]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	689b      	ldr	r3, [r3, #8]
 800a212:	429a      	cmp	r2, r3
 800a214:	d303      	bcc.n	800a21e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	68d9      	ldr	r1, [r3, #12]
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a226:	461a      	mov	r2, r3
 800a228:	6838      	ldr	r0, [r7, #0]
 800a22a:	f011 f8d7 	bl	801b3dc <memcpy>
	}
}
 800a22e:	bf00      	nop
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a23e:	f001 fdc5 	bl	800bdcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a248:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a24a:	e011      	b.n	800a270 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a250:	2b00      	cmp	r3, #0
 800a252:	d012      	beq.n	800a27a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	3324      	adds	r3, #36	; 0x24
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 fd6b 	bl	800ad34 <xTaskRemoveFromEventList>
 800a25e:	4603      	mov	r3, r0
 800a260:	2b00      	cmp	r3, #0
 800a262:	d001      	beq.n	800a268 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a264:	f000 fe46 	bl	800aef4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a268:	7bfb      	ldrb	r3, [r7, #15]
 800a26a:	3b01      	subs	r3, #1
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a274:	2b00      	cmp	r3, #0
 800a276:	dce9      	bgt.n	800a24c <prvUnlockQueue+0x16>
 800a278:	e000      	b.n	800a27c <prvUnlockQueue+0x46>
					break;
 800a27a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	22ff      	movs	r2, #255	; 0xff
 800a280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a284:	f001 fdd6 	bl	800be34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a288:	f001 fda0 	bl	800bdcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a292:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a294:	e011      	b.n	800a2ba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d012      	beq.n	800a2c4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	3310      	adds	r3, #16
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 fd46 	bl	800ad34 <xTaskRemoveFromEventList>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d001      	beq.n	800a2b2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a2ae:	f000 fe21 	bl	800aef4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a2b2:	7bbb      	ldrb	r3, [r7, #14]
 800a2b4:	3b01      	subs	r3, #1
 800a2b6:	b2db      	uxtb	r3, r3
 800a2b8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a2ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dce9      	bgt.n	800a296 <prvUnlockQueue+0x60>
 800a2c2:	e000      	b.n	800a2c6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a2c4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	22ff      	movs	r2, #255	; 0xff
 800a2ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a2ce:	f001 fdb1 	bl	800be34 <vPortExitCritical>
}
 800a2d2:	bf00      	nop
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b084      	sub	sp, #16
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a2e2:	f001 fd73 	bl	800bdcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	60fb      	str	r3, [r7, #12]
 800a2f2:	e001      	b.n	800a2f8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a2f8:	f001 fd9c 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3710      	adds	r7, #16
 800a302:	46bd      	mov	sp, r7
 800a304:	bd80      	pop	{r7, pc}

0800a306 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a306:	b580      	push	{r7, lr}
 800a308:	b084      	sub	sp, #16
 800a30a:	af00      	add	r7, sp, #0
 800a30c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a30e:	f001 fd5d 	bl	800bdcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d102      	bne.n	800a324 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a31e:	2301      	movs	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
 800a322:	e001      	b.n	800a328 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a324:	2300      	movs	r3, #0
 800a326:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a328:	f001 fd84 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800a32c:	68fb      	ldr	r3, [r7, #12]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3710      	adds	r7, #16
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
	...

0800a338 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a338:	b480      	push	{r7}
 800a33a:	b085      	sub	sp, #20
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a342:	2300      	movs	r3, #0
 800a344:	60fb      	str	r3, [r7, #12]
 800a346:	e014      	b.n	800a372 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a348:	4a0f      	ldr	r2, [pc, #60]	; (800a388 <vQueueAddToRegistry+0x50>)
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10b      	bne.n	800a36c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a354:	490c      	ldr	r1, [pc, #48]	; (800a388 <vQueueAddToRegistry+0x50>)
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a35e:	4a0a      	ldr	r2, [pc, #40]	; (800a388 <vQueueAddToRegistry+0x50>)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	00db      	lsls	r3, r3, #3
 800a364:	4413      	add	r3, r2
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a36a:	e006      	b.n	800a37a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	3301      	adds	r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2b07      	cmp	r3, #7
 800a376:	d9e7      	bls.n	800a348 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a378:	bf00      	nop
 800a37a:	bf00      	nop
 800a37c:	3714      	adds	r7, #20
 800a37e:	46bd      	mov	sp, r7
 800a380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a384:	4770      	bx	lr
 800a386:	bf00      	nop
 800a388:	2000a064 	.word	0x2000a064

0800a38c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a394:	2300      	movs	r3, #0
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e016      	b.n	800a3c8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a39a:	4a10      	ldr	r2, [pc, #64]	; (800a3dc <vQueueUnregisterQueue+0x50>)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	00db      	lsls	r3, r3, #3
 800a3a0:	4413      	add	r3, r2
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	687a      	ldr	r2, [r7, #4]
 800a3a6:	429a      	cmp	r2, r3
 800a3a8:	d10b      	bne.n	800a3c2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a3aa:	4a0c      	ldr	r2, [pc, #48]	; (800a3dc <vQueueUnregisterQueue+0x50>)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a3b4:	4a09      	ldr	r2, [pc, #36]	; (800a3dc <vQueueUnregisterQueue+0x50>)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	00db      	lsls	r3, r3, #3
 800a3ba:	4413      	add	r3, r2
 800a3bc:	2200      	movs	r2, #0
 800a3be:	605a      	str	r2, [r3, #4]
				break;
 800a3c0:	e006      	b.n	800a3d0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	60fb      	str	r3, [r7, #12]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	d9e5      	bls.n	800a39a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a3ce:	bf00      	nop
 800a3d0:	bf00      	nop
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	2000a064 	.word	0x2000a064

0800a3e0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b086      	sub	sp, #24
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	60f8      	str	r0, [r7, #12]
 800a3e8:	60b9      	str	r1, [r7, #8]
 800a3ea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a3f0:	f001 fcec 	bl	800bdcc <vPortEnterCritical>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a3fa:	b25b      	sxtb	r3, r3
 800a3fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a400:	d103      	bne.n	800a40a <vQueueWaitForMessageRestricted+0x2a>
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a410:	b25b      	sxtb	r3, r3
 800a412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a416:	d103      	bne.n	800a420 <vQueueWaitForMessageRestricted+0x40>
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a420:	f001 fd08 	bl	800be34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d106      	bne.n	800a43a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	3324      	adds	r3, #36	; 0x24
 800a430:	687a      	ldr	r2, [r7, #4]
 800a432:	68b9      	ldr	r1, [r7, #8]
 800a434:	4618      	mov	r0, r3
 800a436:	f000 fc4f 	bl	800acd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a43a:	6978      	ldr	r0, [r7, #20]
 800a43c:	f7ff fefb 	bl	800a236 <prvUnlockQueue>
	}
 800a440:	bf00      	nop
 800a442:	3718      	adds	r7, #24
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}

0800a448 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b08e      	sub	sp, #56	; 0x38
 800a44c:	af04      	add	r7, sp, #16
 800a44e:	60f8      	str	r0, [r7, #12]
 800a450:	60b9      	str	r1, [r7, #8]
 800a452:	607a      	str	r2, [r7, #4]
 800a454:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d10c      	bne.n	800a476 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a45c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a460:	b672      	cpsid	i
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	b662      	cpsie	i
 800a470:	623b      	str	r3, [r7, #32]
}
 800a472:	bf00      	nop
 800a474:	e7fe      	b.n	800a474 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d10c      	bne.n	800a496 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a480:	b672      	cpsid	i
 800a482:	f383 8811 	msr	BASEPRI, r3
 800a486:	f3bf 8f6f 	isb	sy
 800a48a:	f3bf 8f4f 	dsb	sy
 800a48e:	b662      	cpsie	i
 800a490:	61fb      	str	r3, [r7, #28]
}
 800a492:	bf00      	nop
 800a494:	e7fe      	b.n	800a494 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a496:	2354      	movs	r3, #84	; 0x54
 800a498:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	2b54      	cmp	r3, #84	; 0x54
 800a49e:	d00c      	beq.n	800a4ba <xTaskCreateStatic+0x72>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	b672      	cpsid	i
 800a4a6:	f383 8811 	msr	BASEPRI, r3
 800a4aa:	f3bf 8f6f 	isb	sy
 800a4ae:	f3bf 8f4f 	dsb	sy
 800a4b2:	b662      	cpsie	i
 800a4b4:	61bb      	str	r3, [r7, #24]
}
 800a4b6:	bf00      	nop
 800a4b8:	e7fe      	b.n	800a4b8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a4ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01e      	beq.n	800a500 <xTaskCreateStatic+0xb8>
 800a4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d01b      	beq.n	800a500 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a4d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9303      	str	r3, [sp, #12]
 800a4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e0:	9302      	str	r3, [sp, #8]
 800a4e2:	f107 0314 	add.w	r3, r7, #20
 800a4e6:	9301      	str	r3, [sp, #4]
 800a4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ea:	9300      	str	r3, [sp, #0]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f850 	bl	800a598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a4f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a4fa:	f000 f8d7 	bl	800a6ac <prvAddNewTaskToReadyList>
 800a4fe:	e001      	b.n	800a504 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a500:	2300      	movs	r3, #0
 800a502:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a504:	697b      	ldr	r3, [r7, #20]
	}
 800a506:	4618      	mov	r0, r3
 800a508:	3728      	adds	r7, #40	; 0x28
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a50e:	b580      	push	{r7, lr}
 800a510:	b08c      	sub	sp, #48	; 0x30
 800a512:	af04      	add	r7, sp, #16
 800a514:	60f8      	str	r0, [r7, #12]
 800a516:	60b9      	str	r1, [r7, #8]
 800a518:	603b      	str	r3, [r7, #0]
 800a51a:	4613      	mov	r3, r2
 800a51c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a51e:	88fb      	ldrh	r3, [r7, #6]
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	4618      	mov	r0, r3
 800a524:	f001 fd7e 	bl	800c024 <pvPortMalloc>
 800a528:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00e      	beq.n	800a54e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a530:	2054      	movs	r0, #84	; 0x54
 800a532:	f001 fd77 	bl	800c024 <pvPortMalloc>
 800a536:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	697a      	ldr	r2, [r7, #20]
 800a542:	631a      	str	r2, [r3, #48]	; 0x30
 800a544:	e005      	b.n	800a552 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a546:	6978      	ldr	r0, [r7, #20]
 800a548:	f001 fe36 	bl	800c1b8 <vPortFree>
 800a54c:	e001      	b.n	800a552 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a54e:	2300      	movs	r3, #0
 800a550:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a552:	69fb      	ldr	r3, [r7, #28]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d017      	beq.n	800a588 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a558:	69fb      	ldr	r3, [r7, #28]
 800a55a:	2200      	movs	r2, #0
 800a55c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a560:	88fa      	ldrh	r2, [r7, #6]
 800a562:	2300      	movs	r3, #0
 800a564:	9303      	str	r3, [sp, #12]
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	9302      	str	r3, [sp, #8]
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	9301      	str	r3, [sp, #4]
 800a56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68f8      	ldr	r0, [r7, #12]
 800a578:	f000 f80e 	bl	800a598 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a57c:	69f8      	ldr	r0, [r7, #28]
 800a57e:	f000 f895 	bl	800a6ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a582:	2301      	movs	r3, #1
 800a584:	61bb      	str	r3, [r7, #24]
 800a586:	e002      	b.n	800a58e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a588:	f04f 33ff 	mov.w	r3, #4294967295
 800a58c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a58e:	69bb      	ldr	r3, [r7, #24]
	}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b088      	sub	sp, #32
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	607a      	str	r2, [r7, #4]
 800a5a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a5aa:	6879      	ldr	r1, [r7, #4]
 800a5ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a5b0:	440b      	add	r3, r1
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a5b8:	69bb      	ldr	r3, [r7, #24]
 800a5ba:	f023 0307 	bic.w	r3, r3, #7
 800a5be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f003 0307 	and.w	r3, r3, #7
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00c      	beq.n	800a5e4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5ce:	b672      	cpsid	i
 800a5d0:	f383 8811 	msr	BASEPRI, r3
 800a5d4:	f3bf 8f6f 	isb	sy
 800a5d8:	f3bf 8f4f 	dsb	sy
 800a5dc:	b662      	cpsie	i
 800a5de:	617b      	str	r3, [r7, #20]
}
 800a5e0:	bf00      	nop
 800a5e2:	e7fe      	b.n	800a5e2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d01f      	beq.n	800a62a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	61fb      	str	r3, [r7, #28]
 800a5ee:	e012      	b.n	800a616 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a5f0:	68ba      	ldr	r2, [r7, #8]
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	7819      	ldrb	r1, [r3, #0]
 800a5f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	3334      	adds	r3, #52	; 0x34
 800a600:	460a      	mov	r2, r1
 800a602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d006      	beq.n	800a61e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a610:	69fb      	ldr	r3, [r7, #28]
 800a612:	3301      	adds	r3, #1
 800a614:	61fb      	str	r3, [r7, #28]
 800a616:	69fb      	ldr	r3, [r7, #28]
 800a618:	2b0f      	cmp	r3, #15
 800a61a:	d9e9      	bls.n	800a5f0 <prvInitialiseNewTask+0x58>
 800a61c:	e000      	b.n	800a620 <prvInitialiseNewTask+0x88>
			{
				break;
 800a61e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a628:	e003      	b.n	800a632 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a634:	2b06      	cmp	r3, #6
 800a636:	d901      	bls.n	800a63c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a638:	2306      	movs	r3, #6
 800a63a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a640:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a646:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	2200      	movs	r2, #0
 800a64c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a650:	3304      	adds	r3, #4
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fdf7 	bl	8009246 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65a:	3318      	adds	r3, #24
 800a65c:	4618      	mov	r0, r3
 800a65e:	f7fe fdf2 	bl	8009246 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a664:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	f1c3 0207 	rsb	r2, r3, #7
 800a66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a676:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67a:	2200      	movs	r2, #0
 800a67c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a686:	683a      	ldr	r2, [r7, #0]
 800a688:	68f9      	ldr	r1, [r7, #12]
 800a68a:	69b8      	ldr	r0, [r7, #24]
 800a68c:	f001 fa94 	bl	800bbb8 <pxPortInitialiseStack>
 800a690:	4602      	mov	r2, r0
 800a692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a69c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a6a2:	bf00      	nop
 800a6a4:	3720      	adds	r7, #32
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
	...

0800a6ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a6b4:	f001 fb8a 	bl	800bdcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a6b8:	4b2a      	ldr	r3, [pc, #168]	; (800a764 <prvAddNewTaskToReadyList+0xb8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	3301      	adds	r3, #1
 800a6be:	4a29      	ldr	r2, [pc, #164]	; (800a764 <prvAddNewTaskToReadyList+0xb8>)
 800a6c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a6c2:	4b29      	ldr	r3, [pc, #164]	; (800a768 <prvAddNewTaskToReadyList+0xbc>)
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d109      	bne.n	800a6de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a6ca:	4a27      	ldr	r2, [pc, #156]	; (800a768 <prvAddNewTaskToReadyList+0xbc>)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a6d0:	4b24      	ldr	r3, [pc, #144]	; (800a764 <prvAddNewTaskToReadyList+0xb8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d110      	bne.n	800a6fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a6d8:	f000 fc30 	bl	800af3c <prvInitialiseTaskLists>
 800a6dc:	e00d      	b.n	800a6fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a6de:	4b23      	ldr	r3, [pc, #140]	; (800a76c <prvAddNewTaskToReadyList+0xc0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d109      	bne.n	800a6fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a6e6:	4b20      	ldr	r3, [pc, #128]	; (800a768 <prvAddNewTaskToReadyList+0xbc>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d802      	bhi.n	800a6fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a6f4:	4a1c      	ldr	r2, [pc, #112]	; (800a768 <prvAddNewTaskToReadyList+0xbc>)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a6fa:	4b1d      	ldr	r3, [pc, #116]	; (800a770 <prvAddNewTaskToReadyList+0xc4>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	3301      	adds	r3, #1
 800a700:	4a1b      	ldr	r2, [pc, #108]	; (800a770 <prvAddNewTaskToReadyList+0xc4>)
 800a702:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a708:	2201      	movs	r2, #1
 800a70a:	409a      	lsls	r2, r3
 800a70c:	4b19      	ldr	r3, [pc, #100]	; (800a774 <prvAddNewTaskToReadyList+0xc8>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4313      	orrs	r3, r2
 800a712:	4a18      	ldr	r2, [pc, #96]	; (800a774 <prvAddNewTaskToReadyList+0xc8>)
 800a714:	6013      	str	r3, [r2, #0]
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a71a:	4613      	mov	r3, r2
 800a71c:	009b      	lsls	r3, r3, #2
 800a71e:	4413      	add	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4a15      	ldr	r2, [pc, #84]	; (800a778 <prvAddNewTaskToReadyList+0xcc>)
 800a724:	441a      	add	r2, r3
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	3304      	adds	r3, #4
 800a72a:	4619      	mov	r1, r3
 800a72c:	4610      	mov	r0, r2
 800a72e:	f7fe fd97 	bl	8009260 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a732:	f001 fb7f 	bl	800be34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a736:	4b0d      	ldr	r3, [pc, #52]	; (800a76c <prvAddNewTaskToReadyList+0xc0>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d00e      	beq.n	800a75c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a73e:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <prvAddNewTaskToReadyList+0xbc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a748:	429a      	cmp	r2, r3
 800a74a:	d207      	bcs.n	800a75c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a74c:	4b0b      	ldr	r3, [pc, #44]	; (800a77c <prvAddNewTaskToReadyList+0xd0>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a75c:	bf00      	nop
 800a75e:	3708      	adds	r7, #8
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}
 800a764:	20000a14 	.word	0x20000a14
 800a768:	20000914 	.word	0x20000914
 800a76c:	20000a20 	.word	0x20000a20
 800a770:	20000a30 	.word	0x20000a30
 800a774:	20000a1c 	.word	0x20000a1c
 800a778:	20000918 	.word	0x20000918
 800a77c:	e000ed04 	.word	0xe000ed04

0800a780 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a788:	2300      	movs	r3, #0
 800a78a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d019      	beq.n	800a7c6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a792:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <vTaskDelay+0x64>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d00c      	beq.n	800a7b4 <vTaskDelay+0x34>
	__asm volatile
 800a79a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a79e:	b672      	cpsid	i
 800a7a0:	f383 8811 	msr	BASEPRI, r3
 800a7a4:	f3bf 8f6f 	isb	sy
 800a7a8:	f3bf 8f4f 	dsb	sy
 800a7ac:	b662      	cpsie	i
 800a7ae:	60bb      	str	r3, [r7, #8]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a7b4:	f000 f884 	bl	800a8c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a7b8:	2100      	movs	r1, #0
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fe58 	bl	800b470 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a7c0:	f000 f88c 	bl	800a8dc <xTaskResumeAll>
 800a7c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d107      	bne.n	800a7dc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a7cc:	4b06      	ldr	r3, [pc, #24]	; (800a7e8 <vTaskDelay+0x68>)
 800a7ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	f3bf 8f4f 	dsb	sy
 800a7d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a7dc:	bf00      	nop
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	20000a3c 	.word	0x20000a3c
 800a7e8:	e000ed04 	.word	0xe000ed04

0800a7ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b08a      	sub	sp, #40	; 0x28
 800a7f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a7fa:	463a      	mov	r2, r7
 800a7fc:	1d39      	adds	r1, r7, #4
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f7f5 ff2a 	bl	800065c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	9202      	str	r2, [sp, #8]
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	2300      	movs	r3, #0
 800a814:	9300      	str	r3, [sp, #0]
 800a816:	2300      	movs	r3, #0
 800a818:	460a      	mov	r2, r1
 800a81a:	4923      	ldr	r1, [pc, #140]	; (800a8a8 <vTaskStartScheduler+0xbc>)
 800a81c:	4823      	ldr	r0, [pc, #140]	; (800a8ac <vTaskStartScheduler+0xc0>)
 800a81e:	f7ff fe13 	bl	800a448 <xTaskCreateStatic>
 800a822:	4603      	mov	r3, r0
 800a824:	4a22      	ldr	r2, [pc, #136]	; (800a8b0 <vTaskStartScheduler+0xc4>)
 800a826:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a828:	4b21      	ldr	r3, [pc, #132]	; (800a8b0 <vTaskStartScheduler+0xc4>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a830:	2301      	movs	r3, #1
 800a832:	617b      	str	r3, [r7, #20]
 800a834:	e001      	b.n	800a83a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a836:	2300      	movs	r3, #0
 800a838:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d102      	bne.n	800a846 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a840:	f000 fe7c 	bl	800b53c <xTimerCreateTimerTask>
 800a844:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	2b01      	cmp	r3, #1
 800a84a:	d118      	bne.n	800a87e <vTaskStartScheduler+0x92>
	__asm volatile
 800a84c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a850:	b672      	cpsid	i
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	b662      	cpsie	i
 800a860:	613b      	str	r3, [r7, #16]
}
 800a862:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a864:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <vTaskStartScheduler+0xc8>)
 800a866:	f04f 32ff 	mov.w	r2, #4294967295
 800a86a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a86c:	4b12      	ldr	r3, [pc, #72]	; (800a8b8 <vTaskStartScheduler+0xcc>)
 800a86e:	2201      	movs	r2, #1
 800a870:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a872:	4b12      	ldr	r3, [pc, #72]	; (800a8bc <vTaskStartScheduler+0xd0>)
 800a874:	2200      	movs	r2, #0
 800a876:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a878:	f001 fa2a 	bl	800bcd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a87c:	e010      	b.n	800a8a0 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a87e:	697b      	ldr	r3, [r7, #20]
 800a880:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a884:	d10c      	bne.n	800a8a0 <vTaskStartScheduler+0xb4>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a88a:	b672      	cpsid	i
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	b662      	cpsie	i
 800a89a:	60fb      	str	r3, [r7, #12]
}
 800a89c:	bf00      	nop
 800a89e:	e7fe      	b.n	800a89e <vTaskStartScheduler+0xb2>
}
 800a8a0:	bf00      	nop
 800a8a2:	3718      	adds	r7, #24
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	0801e248 	.word	0x0801e248
 800a8ac:	0800af0d 	.word	0x0800af0d
 800a8b0:	20000a38 	.word	0x20000a38
 800a8b4:	20000a34 	.word	0x20000a34
 800a8b8:	20000a20 	.word	0x20000a20
 800a8bc:	20000a18 	.word	0x20000a18

0800a8c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a8c4:	4b04      	ldr	r3, [pc, #16]	; (800a8d8 <vTaskSuspendAll+0x18>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	4a03      	ldr	r2, [pc, #12]	; (800a8d8 <vTaskSuspendAll+0x18>)
 800a8cc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a8ce:	bf00      	nop
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr
 800a8d8:	20000a3c 	.word	0x20000a3c

0800a8dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b084      	sub	sp, #16
 800a8e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a8ea:	4b42      	ldr	r3, [pc, #264]	; (800a9f4 <xTaskResumeAll+0x118>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d10c      	bne.n	800a90c <xTaskResumeAll+0x30>
	__asm volatile
 800a8f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f6:	b672      	cpsid	i
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	b662      	cpsie	i
 800a906:	603b      	str	r3, [r7, #0]
}
 800a908:	bf00      	nop
 800a90a:	e7fe      	b.n	800a90a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a90c:	f001 fa5e 	bl	800bdcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a910:	4b38      	ldr	r3, [pc, #224]	; (800a9f4 <xTaskResumeAll+0x118>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	3b01      	subs	r3, #1
 800a916:	4a37      	ldr	r2, [pc, #220]	; (800a9f4 <xTaskResumeAll+0x118>)
 800a918:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a91a:	4b36      	ldr	r3, [pc, #216]	; (800a9f4 <xTaskResumeAll+0x118>)
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d161      	bne.n	800a9e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a922:	4b35      	ldr	r3, [pc, #212]	; (800a9f8 <xTaskResumeAll+0x11c>)
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d05d      	beq.n	800a9e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a92a:	e02e      	b.n	800a98a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a92c:	4b33      	ldr	r3, [pc, #204]	; (800a9fc <xTaskResumeAll+0x120>)
 800a92e:	68db      	ldr	r3, [r3, #12]
 800a930:	68db      	ldr	r3, [r3, #12]
 800a932:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3318      	adds	r3, #24
 800a938:	4618      	mov	r0, r3
 800a93a:	f7fe fcee 	bl	800931a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3304      	adds	r3, #4
 800a942:	4618      	mov	r0, r3
 800a944:	f7fe fce9 	bl	800931a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a94c:	2201      	movs	r2, #1
 800a94e:	409a      	lsls	r2, r3
 800a950:	4b2b      	ldr	r3, [pc, #172]	; (800aa00 <xTaskResumeAll+0x124>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4313      	orrs	r3, r2
 800a956:	4a2a      	ldr	r2, [pc, #168]	; (800aa00 <xTaskResumeAll+0x124>)
 800a958:	6013      	str	r3, [r2, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a95e:	4613      	mov	r3, r2
 800a960:	009b      	lsls	r3, r3, #2
 800a962:	4413      	add	r3, r2
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	4a27      	ldr	r2, [pc, #156]	; (800aa04 <xTaskResumeAll+0x128>)
 800a968:	441a      	add	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	3304      	adds	r3, #4
 800a96e:	4619      	mov	r1, r3
 800a970:	4610      	mov	r0, r2
 800a972:	f7fe fc75 	bl	8009260 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97a:	4b23      	ldr	r3, [pc, #140]	; (800aa08 <xTaskResumeAll+0x12c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	429a      	cmp	r2, r3
 800a982:	d302      	bcc.n	800a98a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800a984:	4b21      	ldr	r3, [pc, #132]	; (800aa0c <xTaskResumeAll+0x130>)
 800a986:	2201      	movs	r2, #1
 800a988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a98a:	4b1c      	ldr	r3, [pc, #112]	; (800a9fc <xTaskResumeAll+0x120>)
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d1cc      	bne.n	800a92c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d001      	beq.n	800a99c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a998:	f000 fb70 	bl	800b07c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a99c:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <xTaskResumeAll+0x134>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d010      	beq.n	800a9ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9a8:	f000 f858 	bl	800aa5c <xTaskIncrementTick>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d002      	beq.n	800a9b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800a9b2:	4b16      	ldr	r3, [pc, #88]	; (800aa0c <xTaskResumeAll+0x130>)
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	3b01      	subs	r3, #1
 800a9bc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1f1      	bne.n	800a9a8 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800a9c4:	4b12      	ldr	r3, [pc, #72]	; (800aa10 <xTaskResumeAll+0x134>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a9ca:	4b10      	ldr	r3, [pc, #64]	; (800aa0c <xTaskResumeAll+0x130>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d009      	beq.n	800a9e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <xTaskResumeAll+0x138>)
 800a9d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a9dc:	601a      	str	r2, [r3, #0]
 800a9de:	f3bf 8f4f 	dsb	sy
 800a9e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a9e6:	f001 fa25 	bl	800be34 <vPortExitCritical>

	return xAlreadyYielded;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	20000a3c 	.word	0x20000a3c
 800a9f8:	20000a14 	.word	0x20000a14
 800a9fc:	200009d4 	.word	0x200009d4
 800aa00:	20000a1c 	.word	0x20000a1c
 800aa04:	20000918 	.word	0x20000918
 800aa08:	20000914 	.word	0x20000914
 800aa0c:	20000a28 	.word	0x20000a28
 800aa10:	20000a24 	.word	0x20000a24
 800aa14:	e000ed04 	.word	0xe000ed04

0800aa18 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b083      	sub	sp, #12
 800aa1c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa1e:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <xTaskGetTickCount+0x1c>)
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa24:	687b      	ldr	r3, [r7, #4]
}
 800aa26:	4618      	mov	r0, r3
 800aa28:	370c      	adds	r7, #12
 800aa2a:	46bd      	mov	sp, r7
 800aa2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa30:	4770      	bx	lr
 800aa32:	bf00      	nop
 800aa34:	20000a18 	.word	0x20000a18

0800aa38 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b082      	sub	sp, #8
 800aa3c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa3e:	f001 faad 	bl	800bf9c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa42:	2300      	movs	r3, #0
 800aa44:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aa46:	4b04      	ldr	r3, [pc, #16]	; (800aa58 <xTaskGetTickCountFromISR+0x20>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aa4c:	683b      	ldr	r3, [r7, #0]
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3708      	adds	r7, #8
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	20000a18 	.word	0x20000a18

0800aa5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b086      	sub	sp, #24
 800aa60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aa66:	4b4f      	ldr	r3, [pc, #316]	; (800aba4 <xTaskIncrementTick+0x148>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	f040 808a 	bne.w	800ab84 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aa70:	4b4d      	ldr	r3, [pc, #308]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	3301      	adds	r3, #1
 800aa76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aa78:	4a4b      	ldr	r2, [pc, #300]	; (800aba8 <xTaskIncrementTick+0x14c>)
 800aa7a:	693b      	ldr	r3, [r7, #16]
 800aa7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d122      	bne.n	800aaca <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800aa84:	4b49      	ldr	r3, [pc, #292]	; (800abac <xTaskIncrementTick+0x150>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d00c      	beq.n	800aaa8 <xTaskIncrementTick+0x4c>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	b672      	cpsid	i
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	b662      	cpsie	i
 800aaa2:	603b      	str	r3, [r7, #0]
}
 800aaa4:	bf00      	nop
 800aaa6:	e7fe      	b.n	800aaa6 <xTaskIncrementTick+0x4a>
 800aaa8:	4b40      	ldr	r3, [pc, #256]	; (800abac <xTaskIncrementTick+0x150>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	60fb      	str	r3, [r7, #12]
 800aaae:	4b40      	ldr	r3, [pc, #256]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a3e      	ldr	r2, [pc, #248]	; (800abac <xTaskIncrementTick+0x150>)
 800aab4:	6013      	str	r3, [r2, #0]
 800aab6:	4a3e      	ldr	r2, [pc, #248]	; (800abb0 <xTaskIncrementTick+0x154>)
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6013      	str	r3, [r2, #0]
 800aabc:	4b3d      	ldr	r3, [pc, #244]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	4a3c      	ldr	r2, [pc, #240]	; (800abb4 <xTaskIncrementTick+0x158>)
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	f000 fad9 	bl	800b07c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800aaca:	4b3b      	ldr	r3, [pc, #236]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	693a      	ldr	r2, [r7, #16]
 800aad0:	429a      	cmp	r2, r3
 800aad2:	d348      	bcc.n	800ab66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aad4:	4b35      	ldr	r3, [pc, #212]	; (800abac <xTaskIncrementTick+0x150>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aade:	4b36      	ldr	r3, [pc, #216]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800aae0:	f04f 32ff 	mov.w	r2, #4294967295
 800aae4:	601a      	str	r2, [r3, #0]
					break;
 800aae6:	e03e      	b.n	800ab66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aae8:	4b30      	ldr	r3, [pc, #192]	; (800abac <xTaskIncrementTick+0x150>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	68db      	ldr	r3, [r3, #12]
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	429a      	cmp	r2, r3
 800aafe:	d203      	bcs.n	800ab08 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab00:	4a2d      	ldr	r2, [pc, #180]	; (800abb8 <xTaskIncrementTick+0x15c>)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab06:	e02e      	b.n	800ab66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	3304      	adds	r3, #4
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f7fe fc04 	bl	800931a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d004      	beq.n	800ab24 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	3318      	adds	r3, #24
 800ab1e:	4618      	mov	r0, r3
 800ab20:	f7fe fbfb 	bl	800931a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab28:	2201      	movs	r2, #1
 800ab2a:	409a      	lsls	r2, r3
 800ab2c:	4b23      	ldr	r3, [pc, #140]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	4313      	orrs	r3, r2
 800ab32:	4a22      	ldr	r2, [pc, #136]	; (800abbc <xTaskIncrementTick+0x160>)
 800ab34:	6013      	str	r3, [r2, #0]
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab3a:	4613      	mov	r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4413      	add	r3, r2
 800ab40:	009b      	lsls	r3, r3, #2
 800ab42:	4a1f      	ldr	r2, [pc, #124]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab44:	441a      	add	r2, r3
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	3304      	adds	r3, #4
 800ab4a:	4619      	mov	r1, r3
 800ab4c:	4610      	mov	r0, r2
 800ab4e:	f7fe fb87 	bl	8009260 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab56:	4b1b      	ldr	r3, [pc, #108]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5c:	429a      	cmp	r2, r3
 800ab5e:	d3b9      	bcc.n	800aad4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ab60:	2301      	movs	r3, #1
 800ab62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab64:	e7b6      	b.n	800aad4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ab66:	4b17      	ldr	r3, [pc, #92]	; (800abc4 <xTaskIncrementTick+0x168>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6c:	4914      	ldr	r1, [pc, #80]	; (800abc0 <xTaskIncrementTick+0x164>)
 800ab6e:	4613      	mov	r3, r2
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	440b      	add	r3, r1
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d907      	bls.n	800ab8e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	617b      	str	r3, [r7, #20]
 800ab82:	e004      	b.n	800ab8e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ab84:	4b10      	ldr	r3, [pc, #64]	; (800abc8 <xTaskIncrementTick+0x16c>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	4a0f      	ldr	r2, [pc, #60]	; (800abc8 <xTaskIncrementTick+0x16c>)
 800ab8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ab8e:	4b0f      	ldr	r3, [pc, #60]	; (800abcc <xTaskIncrementTick+0x170>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ab96:	2301      	movs	r3, #1
 800ab98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ab9a:	697b      	ldr	r3, [r7, #20]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	20000a3c 	.word	0x20000a3c
 800aba8:	20000a18 	.word	0x20000a18
 800abac:	200009cc 	.word	0x200009cc
 800abb0:	200009d0 	.word	0x200009d0
 800abb4:	20000a2c 	.word	0x20000a2c
 800abb8:	20000a34 	.word	0x20000a34
 800abbc:	20000a1c 	.word	0x20000a1c
 800abc0:	20000918 	.word	0x20000918
 800abc4:	20000914 	.word	0x20000914
 800abc8:	20000a24 	.word	0x20000a24
 800abcc:	20000a28 	.word	0x20000a28

0800abd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800abd6:	4b28      	ldr	r3, [pc, #160]	; (800ac78 <vTaskSwitchContext+0xa8>)
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d003      	beq.n	800abe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800abde:	4b27      	ldr	r3, [pc, #156]	; (800ac7c <vTaskSwitchContext+0xac>)
 800abe0:	2201      	movs	r2, #1
 800abe2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800abe4:	e041      	b.n	800ac6a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800abe6:	4b25      	ldr	r3, [pc, #148]	; (800ac7c <vTaskSwitchContext+0xac>)
 800abe8:	2200      	movs	r2, #0
 800abea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abec:	4b24      	ldr	r3, [pc, #144]	; (800ac80 <vTaskSwitchContext+0xb0>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	fab3 f383 	clz	r3, r3
 800abf8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800abfa:	7afb      	ldrb	r3, [r7, #11]
 800abfc:	f1c3 031f 	rsb	r3, r3, #31
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	4920      	ldr	r1, [pc, #128]	; (800ac84 <vTaskSwitchContext+0xb4>)
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	4613      	mov	r3, r2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	440b      	add	r3, r1
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10c      	bne.n	800ac30 <vTaskSwitchContext+0x60>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1a:	b672      	cpsid	i
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	b662      	cpsie	i
 800ac2a:	607b      	str	r3, [r7, #4]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <vTaskSwitchContext+0x5e>
 800ac30:	697a      	ldr	r2, [r7, #20]
 800ac32:	4613      	mov	r3, r2
 800ac34:	009b      	lsls	r3, r3, #2
 800ac36:	4413      	add	r3, r2
 800ac38:	009b      	lsls	r3, r3, #2
 800ac3a:	4a12      	ldr	r2, [pc, #72]	; (800ac84 <vTaskSwitchContext+0xb4>)
 800ac3c:	4413      	add	r3, r2
 800ac3e:	613b      	str	r3, [r7, #16]
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	685b      	ldr	r3, [r3, #4]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	605a      	str	r2, [r3, #4]
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	685a      	ldr	r2, [r3, #4]
 800ac4e:	693b      	ldr	r3, [r7, #16]
 800ac50:	3308      	adds	r3, #8
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d104      	bne.n	800ac60 <vTaskSwitchContext+0x90>
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	685a      	ldr	r2, [r3, #4]
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	605a      	str	r2, [r3, #4]
 800ac60:	693b      	ldr	r3, [r7, #16]
 800ac62:	685b      	ldr	r3, [r3, #4]
 800ac64:	68db      	ldr	r3, [r3, #12]
 800ac66:	4a08      	ldr	r2, [pc, #32]	; (800ac88 <vTaskSwitchContext+0xb8>)
 800ac68:	6013      	str	r3, [r2, #0]
}
 800ac6a:	bf00      	nop
 800ac6c:	371c      	adds	r7, #28
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr
 800ac76:	bf00      	nop
 800ac78:	20000a3c 	.word	0x20000a3c
 800ac7c:	20000a28 	.word	0x20000a28
 800ac80:	20000a1c 	.word	0x20000a1c
 800ac84:	20000918 	.word	0x20000918
 800ac88:	20000914 	.word	0x20000914

0800ac8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b084      	sub	sp, #16
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d10c      	bne.n	800acb6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ac9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca0:	b672      	cpsid	i
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	f3bf 8f6f 	isb	sy
 800acaa:	f3bf 8f4f 	dsb	sy
 800acae:	b662      	cpsie	i
 800acb0:	60fb      	str	r3, [r7, #12]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800acb6:	4b07      	ldr	r3, [pc, #28]	; (800acd4 <vTaskPlaceOnEventList+0x48>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	3318      	adds	r3, #24
 800acbc:	4619      	mov	r1, r3
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe faf2 	bl	80092a8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800acc4:	2101      	movs	r1, #1
 800acc6:	6838      	ldr	r0, [r7, #0]
 800acc8:	f000 fbd2 	bl	800b470 <prvAddCurrentTaskToDelayedList>
}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	20000914 	.word	0x20000914

0800acd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b086      	sub	sp, #24
 800acdc:	af00      	add	r7, sp, #0
 800acde:	60f8      	str	r0, [r7, #12]
 800ace0:	60b9      	str	r1, [r7, #8]
 800ace2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10c      	bne.n	800ad04 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	b672      	cpsid	i
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	b662      	cpsie	i
 800acfe:	617b      	str	r3, [r7, #20]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad04:	4b0a      	ldr	r3, [pc, #40]	; (800ad30 <vTaskPlaceOnEventListRestricted+0x58>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	3318      	adds	r3, #24
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f7fe faa7 	bl	8009260 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d002      	beq.n	800ad1e <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ad18:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad1e:	6879      	ldr	r1, [r7, #4]
 800ad20:	68b8      	ldr	r0, [r7, #8]
 800ad22:	f000 fba5 	bl	800b470 <prvAddCurrentTaskToDelayedList>
	}
 800ad26:	bf00      	nop
 800ad28:	3718      	adds	r7, #24
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20000914 	.word	0x20000914

0800ad34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	68db      	ldr	r3, [r3, #12]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d10c      	bne.n	800ad64 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800ad4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4e:	b672      	cpsid	i
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	b662      	cpsie	i
 800ad5e:	60fb      	str	r3, [r7, #12]
}
 800ad60:	bf00      	nop
 800ad62:	e7fe      	b.n	800ad62 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	3318      	adds	r3, #24
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe fad6 	bl	800931a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad6e:	4b1d      	ldr	r3, [pc, #116]	; (800ade4 <xTaskRemoveFromEventList+0xb0>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d11c      	bne.n	800adb0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	3304      	adds	r3, #4
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe facd 	bl	800931a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	2201      	movs	r2, #1
 800ad86:	409a      	lsls	r2, r3
 800ad88:	4b17      	ldr	r3, [pc, #92]	; (800ade8 <xTaskRemoveFromEventList+0xb4>)
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	4a16      	ldr	r2, [pc, #88]	; (800ade8 <xTaskRemoveFromEventList+0xb4>)
 800ad90:	6013      	str	r3, [r2, #0]
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad96:	4613      	mov	r3, r2
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	009b      	lsls	r3, r3, #2
 800ad9e:	4a13      	ldr	r2, [pc, #76]	; (800adec <xTaskRemoveFromEventList+0xb8>)
 800ada0:	441a      	add	r2, r3
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	3304      	adds	r3, #4
 800ada6:	4619      	mov	r1, r3
 800ada8:	4610      	mov	r0, r2
 800adaa:	f7fe fa59 	bl	8009260 <vListInsertEnd>
 800adae:	e005      	b.n	800adbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800adb0:	693b      	ldr	r3, [r7, #16]
 800adb2:	3318      	adds	r3, #24
 800adb4:	4619      	mov	r1, r3
 800adb6:	480e      	ldr	r0, [pc, #56]	; (800adf0 <xTaskRemoveFromEventList+0xbc>)
 800adb8:	f7fe fa52 	bl	8009260 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc0:	4b0c      	ldr	r3, [pc, #48]	; (800adf4 <xTaskRemoveFromEventList+0xc0>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d905      	bls.n	800add6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adca:	2301      	movs	r3, #1
 800adcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adce:	4b0a      	ldr	r3, [pc, #40]	; (800adf8 <xTaskRemoveFromEventList+0xc4>)
 800add0:	2201      	movs	r2, #1
 800add2:	601a      	str	r2, [r3, #0]
 800add4:	e001      	b.n	800adda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800add6:	2300      	movs	r3, #0
 800add8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800adda:	697b      	ldr	r3, [r7, #20]
}
 800addc:	4618      	mov	r0, r3
 800adde:	3718      	adds	r7, #24
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	20000a3c 	.word	0x20000a3c
 800ade8:	20000a1c 	.word	0x20000a1c
 800adec:	20000918 	.word	0x20000918
 800adf0:	200009d4 	.word	0x200009d4
 800adf4:	20000914 	.word	0x20000914
 800adf8:	20000a28 	.word	0x20000a28

0800adfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800adfc:	b480      	push	{r7}
 800adfe:	b083      	sub	sp, #12
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae04:	4b06      	ldr	r3, [pc, #24]	; (800ae20 <vTaskInternalSetTimeOutState+0x24>)
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <vTaskInternalSetTimeOutState+0x28>)
 800ae0e:	681a      	ldr	r2, [r3, #0]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]
}
 800ae14:	bf00      	nop
 800ae16:	370c      	adds	r7, #12
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	20000a2c 	.word	0x20000a2c
 800ae24:	20000a18 	.word	0x20000a18

0800ae28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b088      	sub	sp, #32
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d10c      	bne.n	800ae52 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ae38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae3c:	b672      	cpsid	i
 800ae3e:	f383 8811 	msr	BASEPRI, r3
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	f3bf 8f4f 	dsb	sy
 800ae4a:	b662      	cpsie	i
 800ae4c:	613b      	str	r3, [r7, #16]
}
 800ae4e:	bf00      	nop
 800ae50:	e7fe      	b.n	800ae50 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d10c      	bne.n	800ae72 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800ae58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5c:	b672      	cpsid	i
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	b662      	cpsie	i
 800ae6c:	60fb      	str	r3, [r7, #12]
}
 800ae6e:	bf00      	nop
 800ae70:	e7fe      	b.n	800ae70 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800ae72:	f000 ffab 	bl	800bdcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae76:	4b1d      	ldr	r3, [pc, #116]	; (800aeec <xTaskCheckForTimeOut+0xc4>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	69ba      	ldr	r2, [r7, #24]
 800ae82:	1ad3      	subs	r3, r2, r3
 800ae84:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae8e:	d102      	bne.n	800ae96 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae90:	2300      	movs	r3, #0
 800ae92:	61fb      	str	r3, [r7, #28]
 800ae94:	e023      	b.n	800aede <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681a      	ldr	r2, [r3, #0]
 800ae9a:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <xTaskCheckForTimeOut+0xc8>)
 800ae9c:	681b      	ldr	r3, [r3, #0]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d007      	beq.n	800aeb2 <xTaskCheckForTimeOut+0x8a>
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	685b      	ldr	r3, [r3, #4]
 800aea6:	69ba      	ldr	r2, [r7, #24]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d302      	bcc.n	800aeb2 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aeac:	2301      	movs	r3, #1
 800aeae:	61fb      	str	r3, [r7, #28]
 800aeb0:	e015      	b.n	800aede <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	697a      	ldr	r2, [r7, #20]
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d20b      	bcs.n	800aed4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	1ad2      	subs	r2, r2, r3
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f7ff ff97 	bl	800adfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aece:	2300      	movs	r3, #0
 800aed0:	61fb      	str	r3, [r7, #28]
 800aed2:	e004      	b.n	800aede <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800aed4:	683b      	ldr	r3, [r7, #0]
 800aed6:	2200      	movs	r2, #0
 800aed8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aeda:	2301      	movs	r3, #1
 800aedc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aede:	f000 ffa9 	bl	800be34 <vPortExitCritical>

	return xReturn;
 800aee2:	69fb      	ldr	r3, [r7, #28]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3720      	adds	r7, #32
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}
 800aeec:	20000a18 	.word	0x20000a18
 800aef0:	20000a2c 	.word	0x20000a2c

0800aef4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aef8:	4b03      	ldr	r3, [pc, #12]	; (800af08 <vTaskMissedYield+0x14>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	601a      	str	r2, [r3, #0]
}
 800aefe:	bf00      	nop
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr
 800af08:	20000a28 	.word	0x20000a28

0800af0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af14:	f000 f852 	bl	800afbc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af18:	4b06      	ldr	r3, [pc, #24]	; (800af34 <prvIdleTask+0x28>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d9f9      	bls.n	800af14 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af20:	4b05      	ldr	r3, [pc, #20]	; (800af38 <prvIdleTask+0x2c>)
 800af22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af26:	601a      	str	r2, [r3, #0]
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af30:	e7f0      	b.n	800af14 <prvIdleTask+0x8>
 800af32:	bf00      	nop
 800af34:	20000918 	.word	0x20000918
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af42:	2300      	movs	r3, #0
 800af44:	607b      	str	r3, [r7, #4]
 800af46:	e00c      	b.n	800af62 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af48:	687a      	ldr	r2, [r7, #4]
 800af4a:	4613      	mov	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4413      	add	r3, r2
 800af50:	009b      	lsls	r3, r3, #2
 800af52:	4a12      	ldr	r2, [pc, #72]	; (800af9c <prvInitialiseTaskLists+0x60>)
 800af54:	4413      	add	r3, r2
 800af56:	4618      	mov	r0, r3
 800af58:	f7fe f955 	bl	8009206 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	3301      	adds	r3, #1
 800af60:	607b      	str	r3, [r7, #4]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2b06      	cmp	r3, #6
 800af66:	d9ef      	bls.n	800af48 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af68:	480d      	ldr	r0, [pc, #52]	; (800afa0 <prvInitialiseTaskLists+0x64>)
 800af6a:	f7fe f94c 	bl	8009206 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af6e:	480d      	ldr	r0, [pc, #52]	; (800afa4 <prvInitialiseTaskLists+0x68>)
 800af70:	f7fe f949 	bl	8009206 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af74:	480c      	ldr	r0, [pc, #48]	; (800afa8 <prvInitialiseTaskLists+0x6c>)
 800af76:	f7fe f946 	bl	8009206 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af7a:	480c      	ldr	r0, [pc, #48]	; (800afac <prvInitialiseTaskLists+0x70>)
 800af7c:	f7fe f943 	bl	8009206 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af80:	480b      	ldr	r0, [pc, #44]	; (800afb0 <prvInitialiseTaskLists+0x74>)
 800af82:	f7fe f940 	bl	8009206 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af86:	4b0b      	ldr	r3, [pc, #44]	; (800afb4 <prvInitialiseTaskLists+0x78>)
 800af88:	4a05      	ldr	r2, [pc, #20]	; (800afa0 <prvInitialiseTaskLists+0x64>)
 800af8a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af8c:	4b0a      	ldr	r3, [pc, #40]	; (800afb8 <prvInitialiseTaskLists+0x7c>)
 800af8e:	4a05      	ldr	r2, [pc, #20]	; (800afa4 <prvInitialiseTaskLists+0x68>)
 800af90:	601a      	str	r2, [r3, #0]
}
 800af92:	bf00      	nop
 800af94:	3708      	adds	r7, #8
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	20000918 	.word	0x20000918
 800afa0:	200009a4 	.word	0x200009a4
 800afa4:	200009b8 	.word	0x200009b8
 800afa8:	200009d4 	.word	0x200009d4
 800afac:	200009e8 	.word	0x200009e8
 800afb0:	20000a00 	.word	0x20000a00
 800afb4:	200009cc 	.word	0x200009cc
 800afb8:	200009d0 	.word	0x200009d0

0800afbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afc2:	e019      	b.n	800aff8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afc4:	f000 ff02 	bl	800bdcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800afc8:	4b10      	ldr	r3, [pc, #64]	; (800b00c <prvCheckTasksWaitingTermination+0x50>)
 800afca:	68db      	ldr	r3, [r3, #12]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	3304      	adds	r3, #4
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7fe f9a0 	bl	800931a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afda:	4b0d      	ldr	r3, [pc, #52]	; (800b010 <prvCheckTasksWaitingTermination+0x54>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	3b01      	subs	r3, #1
 800afe0:	4a0b      	ldr	r2, [pc, #44]	; (800b010 <prvCheckTasksWaitingTermination+0x54>)
 800afe2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afe4:	4b0b      	ldr	r3, [pc, #44]	; (800b014 <prvCheckTasksWaitingTermination+0x58>)
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	3b01      	subs	r3, #1
 800afea:	4a0a      	ldr	r2, [pc, #40]	; (800b014 <prvCheckTasksWaitingTermination+0x58>)
 800afec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afee:	f000 ff21 	bl	800be34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 f810 	bl	800b018 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aff8:	4b06      	ldr	r3, [pc, #24]	; (800b014 <prvCheckTasksWaitingTermination+0x58>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d1e1      	bne.n	800afc4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b000:	bf00      	nop
 800b002:	bf00      	nop
 800b004:	3708      	adds	r7, #8
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	200009e8 	.word	0x200009e8
 800b010:	20000a14 	.word	0x20000a14
 800b014:	200009fc 	.word	0x200009fc

0800b018 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b084      	sub	sp, #16
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b026:	2b00      	cmp	r3, #0
 800b028:	d108      	bne.n	800b03c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b02e:	4618      	mov	r0, r3
 800b030:	f001 f8c2 	bl	800c1b8 <vPortFree>
				vPortFree( pxTCB );
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f8bf 	bl	800c1b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b03a:	e01a      	b.n	800b072 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b042:	2b01      	cmp	r3, #1
 800b044:	d103      	bne.n	800b04e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f8b6 	bl	800c1b8 <vPortFree>
	}
 800b04c:	e011      	b.n	800b072 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b054:	2b02      	cmp	r3, #2
 800b056:	d00c      	beq.n	800b072 <prvDeleteTCB+0x5a>
	__asm volatile
 800b058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b05c:	b672      	cpsid	i
 800b05e:	f383 8811 	msr	BASEPRI, r3
 800b062:	f3bf 8f6f 	isb	sy
 800b066:	f3bf 8f4f 	dsb	sy
 800b06a:	b662      	cpsie	i
 800b06c:	60fb      	str	r3, [r7, #12]
}
 800b06e:	bf00      	nop
 800b070:	e7fe      	b.n	800b070 <prvDeleteTCB+0x58>
	}
 800b072:	bf00      	nop
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}
	...

0800b07c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b082:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <prvResetNextTaskUnblockTime+0x38>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d104      	bne.n	800b096 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b08c:	4b0a      	ldr	r3, [pc, #40]	; (800b0b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b08e:	f04f 32ff 	mov.w	r2, #4294967295
 800b092:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b094:	e008      	b.n	800b0a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b096:	4b07      	ldr	r3, [pc, #28]	; (800b0b4 <prvResetNextTaskUnblockTime+0x38>)
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	68db      	ldr	r3, [r3, #12]
 800b09c:	68db      	ldr	r3, [r3, #12]
 800b09e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	4a04      	ldr	r2, [pc, #16]	; (800b0b8 <prvResetNextTaskUnblockTime+0x3c>)
 800b0a6:	6013      	str	r3, [r2, #0]
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr
 800b0b4:	200009cc 	.word	0x200009cc
 800b0b8:	20000a34 	.word	0x20000a34

0800b0bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b0bc:	b480      	push	{r7}
 800b0be:	b083      	sub	sp, #12
 800b0c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0c2:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <xTaskGetSchedulerState+0x34>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d102      	bne.n	800b0d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	607b      	str	r3, [r7, #4]
 800b0ce:	e008      	b.n	800b0e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0d0:	4b08      	ldr	r3, [pc, #32]	; (800b0f4 <xTaskGetSchedulerState+0x38>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0d8:	2302      	movs	r3, #2
 800b0da:	607b      	str	r3, [r7, #4]
 800b0dc:	e001      	b.n	800b0e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0e2:	687b      	ldr	r3, [r7, #4]
	}
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	370c      	adds	r7, #12
 800b0e8:	46bd      	mov	sp, r7
 800b0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ee:	4770      	bx	lr
 800b0f0:	20000a20 	.word	0x20000a20
 800b0f4:	20000a3c 	.word	0x20000a3c

0800b0f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b084      	sub	sp, #16
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b104:	2300      	movs	r3, #0
 800b106:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d069      	beq.n	800b1e2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	4b36      	ldr	r3, [pc, #216]	; (800b1ec <xTaskPriorityInherit+0xf4>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b118:	429a      	cmp	r2, r3
 800b11a:	d259      	bcs.n	800b1d0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	db06      	blt.n	800b132 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b124:	4b31      	ldr	r3, [pc, #196]	; (800b1ec <xTaskPriorityInherit+0xf4>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12a:	f1c3 0207 	rsb	r2, r3, #7
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	6959      	ldr	r1, [r3, #20]
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13a:	4613      	mov	r3, r2
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	4413      	add	r3, r2
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4a2b      	ldr	r2, [pc, #172]	; (800b1f0 <xTaskPriorityInherit+0xf8>)
 800b144:	4413      	add	r3, r2
 800b146:	4299      	cmp	r1, r3
 800b148:	d13a      	bne.n	800b1c0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	3304      	adds	r3, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f7fe f8e3 	bl	800931a <uxListRemove>
 800b154:	4603      	mov	r3, r0
 800b156:	2b00      	cmp	r3, #0
 800b158:	d115      	bne.n	800b186 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b15e:	4924      	ldr	r1, [pc, #144]	; (800b1f0 <xTaskPriorityInherit+0xf8>)
 800b160:	4613      	mov	r3, r2
 800b162:	009b      	lsls	r3, r3, #2
 800b164:	4413      	add	r3, r2
 800b166:	009b      	lsls	r3, r3, #2
 800b168:	440b      	add	r3, r1
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d10a      	bne.n	800b186 <xTaskPriorityInherit+0x8e>
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	2201      	movs	r2, #1
 800b176:	fa02 f303 	lsl.w	r3, r2, r3
 800b17a:	43da      	mvns	r2, r3
 800b17c:	4b1d      	ldr	r3, [pc, #116]	; (800b1f4 <xTaskPriorityInherit+0xfc>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	4013      	ands	r3, r2
 800b182:	4a1c      	ldr	r2, [pc, #112]	; (800b1f4 <xTaskPriorityInherit+0xfc>)
 800b184:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b186:	4b19      	ldr	r3, [pc, #100]	; (800b1ec <xTaskPriorityInherit+0xf4>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	2201      	movs	r2, #1
 800b196:	409a      	lsls	r2, r3
 800b198:	4b16      	ldr	r3, [pc, #88]	; (800b1f4 <xTaskPriorityInherit+0xfc>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	4313      	orrs	r3, r2
 800b19e:	4a15      	ldr	r2, [pc, #84]	; (800b1f4 <xTaskPriorityInherit+0xfc>)
 800b1a0:	6013      	str	r3, [r2, #0]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	009b      	lsls	r3, r3, #2
 800b1aa:	4413      	add	r3, r2
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4a10      	ldr	r2, [pc, #64]	; (800b1f0 <xTaskPriorityInherit+0xf8>)
 800b1b0:	441a      	add	r2, r3
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	3304      	adds	r3, #4
 800b1b6:	4619      	mov	r1, r3
 800b1b8:	4610      	mov	r0, r2
 800b1ba:	f7fe f851 	bl	8009260 <vListInsertEnd>
 800b1be:	e004      	b.n	800b1ca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1c0:	4b0a      	ldr	r3, [pc, #40]	; (800b1ec <xTaskPriorityInherit+0xf4>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1ca:	2301      	movs	r3, #1
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	e008      	b.n	800b1e2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1d0:	68bb      	ldr	r3, [r7, #8]
 800b1d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1d4:	4b05      	ldr	r3, [pc, #20]	; (800b1ec <xTaskPriorityInherit+0xf4>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d201      	bcs.n	800b1e2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
	}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3710      	adds	r7, #16
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	20000914 	.word	0x20000914
 800b1f0:	20000918 	.word	0x20000918
 800b1f4:	20000a1c 	.word	0x20000a1c

0800b1f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	b086      	sub	sp, #24
 800b1fc:	af00      	add	r7, sp, #0
 800b1fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b204:	2300      	movs	r3, #0
 800b206:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d072      	beq.n	800b2f4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b20e:	4b3c      	ldr	r3, [pc, #240]	; (800b300 <xTaskPriorityDisinherit+0x108>)
 800b210:	681b      	ldr	r3, [r3, #0]
 800b212:	693a      	ldr	r2, [r7, #16]
 800b214:	429a      	cmp	r2, r3
 800b216:	d00c      	beq.n	800b232 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21c:	b672      	cpsid	i
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	b662      	cpsie	i
 800b22c:	60fb      	str	r3, [r7, #12]
}
 800b22e:	bf00      	nop
 800b230:	e7fe      	b.n	800b230 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b236:	2b00      	cmp	r3, #0
 800b238:	d10c      	bne.n	800b254 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b23e:	b672      	cpsid	i
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	b662      	cpsie	i
 800b24e:	60bb      	str	r3, [r7, #8]
}
 800b250:	bf00      	nop
 800b252:	e7fe      	b.n	800b252 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b258:	1e5a      	subs	r2, r3, #1
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	429a      	cmp	r2, r3
 800b268:	d044      	beq.n	800b2f4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d140      	bne.n	800b2f4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	3304      	adds	r3, #4
 800b276:	4618      	mov	r0, r3
 800b278:	f7fe f84f 	bl	800931a <uxListRemove>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d115      	bne.n	800b2ae <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	491f      	ldr	r1, [pc, #124]	; (800b304 <xTaskPriorityDisinherit+0x10c>)
 800b288:	4613      	mov	r3, r2
 800b28a:	009b      	lsls	r3, r3, #2
 800b28c:	4413      	add	r3, r2
 800b28e:	009b      	lsls	r3, r3, #2
 800b290:	440b      	add	r3, r1
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d10a      	bne.n	800b2ae <xTaskPriorityDisinherit+0xb6>
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29c:	2201      	movs	r2, #1
 800b29e:	fa02 f303 	lsl.w	r3, r2, r3
 800b2a2:	43da      	mvns	r2, r3
 800b2a4:	4b18      	ldr	r3, [pc, #96]	; (800b308 <xTaskPriorityDisinherit+0x110>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	4a17      	ldr	r2, [pc, #92]	; (800b308 <xTaskPriorityDisinherit+0x110>)
 800b2ac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ba:	f1c3 0207 	rsb	r2, r3, #7
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	409a      	lsls	r2, r3
 800b2ca:	4b0f      	ldr	r3, [pc, #60]	; (800b308 <xTaskPriorityDisinherit+0x110>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	4a0d      	ldr	r2, [pc, #52]	; (800b308 <xTaskPriorityDisinherit+0x110>)
 800b2d2:	6013      	str	r3, [r2, #0]
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4a08      	ldr	r2, [pc, #32]	; (800b304 <xTaskPriorityDisinherit+0x10c>)
 800b2e2:	441a      	add	r2, r3
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	3304      	adds	r3, #4
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4610      	mov	r0, r2
 800b2ec:	f7fd ffb8 	bl	8009260 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2f4:	697b      	ldr	r3, [r7, #20]
	}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000914 	.word	0x20000914
 800b304:	20000918 	.word	0x20000918
 800b308:	20000a1c 	.word	0x20000a1c

0800b30c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b31a:	2301      	movs	r3, #1
 800b31c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	f000 8087 	beq.w	800b434 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10c      	bne.n	800b348 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	b672      	cpsid	i
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	b662      	cpsie	i
 800b342:	60fb      	str	r3, [r7, #12]
}
 800b344:	bf00      	nop
 800b346:	e7fe      	b.n	800b346 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d902      	bls.n	800b358 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	61fb      	str	r3, [r7, #28]
 800b356:	e002      	b.n	800b35e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b35c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b35e:	69bb      	ldr	r3, [r7, #24]
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	69fa      	ldr	r2, [r7, #28]
 800b364:	429a      	cmp	r2, r3
 800b366:	d065      	beq.n	800b434 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36c:	697a      	ldr	r2, [r7, #20]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d160      	bne.n	800b434 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b372:	4b32      	ldr	r3, [pc, #200]	; (800b43c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	429a      	cmp	r2, r3
 800b37a:	d10c      	bne.n	800b396 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	b672      	cpsid	i
 800b382:	f383 8811 	msr	BASEPRI, r3
 800b386:	f3bf 8f6f 	isb	sy
 800b38a:	f3bf 8f4f 	dsb	sy
 800b38e:	b662      	cpsie	i
 800b390:	60bb      	str	r3, [r7, #8]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b39c:	69bb      	ldr	r3, [r7, #24]
 800b39e:	69fa      	ldr	r2, [r7, #28]
 800b3a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	699b      	ldr	r3, [r3, #24]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	db04      	blt.n	800b3b4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	f1c3 0207 	rsb	r2, r3, #7
 800b3b0:	69bb      	ldr	r3, [r7, #24]
 800b3b2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3b4:	69bb      	ldr	r3, [r7, #24]
 800b3b6:	6959      	ldr	r1, [r3, #20]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	4413      	add	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4299      	cmp	r1, r3
 800b3c8:	d134      	bne.n	800b434 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3ca:	69bb      	ldr	r3, [r7, #24]
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7fd ffa3 	bl	800931a <uxListRemove>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d115      	bne.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	4918      	ldr	r1, [pc, #96]	; (800b440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	440b      	add	r3, r1
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d10a      	bne.n	800b406 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3f4:	2201      	movs	r2, #1
 800b3f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b3fa:	43da      	mvns	r2, r3
 800b3fc:	4b11      	ldr	r3, [pc, #68]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	4013      	ands	r3, r2
 800b402:	4a10      	ldr	r2, [pc, #64]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b404:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b40a:	2201      	movs	r2, #1
 800b40c:	409a      	lsls	r2, r3
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	4313      	orrs	r3, r2
 800b414:	4a0b      	ldr	r2, [pc, #44]	; (800b444 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b416:	6013      	str	r3, [r2, #0]
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b41c:	4613      	mov	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	4413      	add	r3, r2
 800b422:	009b      	lsls	r3, r3, #2
 800b424:	4a06      	ldr	r2, [pc, #24]	; (800b440 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b426:	441a      	add	r2, r3
 800b428:	69bb      	ldr	r3, [r7, #24]
 800b42a:	3304      	adds	r3, #4
 800b42c:	4619      	mov	r1, r3
 800b42e:	4610      	mov	r0, r2
 800b430:	f7fd ff16 	bl	8009260 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b434:	bf00      	nop
 800b436:	3720      	adds	r7, #32
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}
 800b43c:	20000914 	.word	0x20000914
 800b440:	20000918 	.word	0x20000918
 800b444:	20000a1c 	.word	0x20000a1c

0800b448 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b448:	b480      	push	{r7}
 800b44a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b44c:	4b07      	ldr	r3, [pc, #28]	; (800b46c <pvTaskIncrementMutexHeldCount+0x24>)
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d004      	beq.n	800b45e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b454:	4b05      	ldr	r3, [pc, #20]	; (800b46c <pvTaskIncrementMutexHeldCount+0x24>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b45a:	3201      	adds	r2, #1
 800b45c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b45e:	4b03      	ldr	r3, [pc, #12]	; (800b46c <pvTaskIncrementMutexHeldCount+0x24>)
 800b460:	681b      	ldr	r3, [r3, #0]
	}
 800b462:	4618      	mov	r0, r3
 800b464:	46bd      	mov	sp, r7
 800b466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46a:	4770      	bx	lr
 800b46c:	20000914 	.word	0x20000914

0800b470 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b084      	sub	sp, #16
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b47a:	4b29      	ldr	r3, [pc, #164]	; (800b520 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b480:	4b28      	ldr	r3, [pc, #160]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd ff47 	bl	800931a <uxListRemove>
 800b48c:	4603      	mov	r3, r0
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10b      	bne.n	800b4aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b498:	2201      	movs	r2, #1
 800b49a:	fa02 f303 	lsl.w	r3, r2, r3
 800b49e:	43da      	mvns	r2, r3
 800b4a0:	4b21      	ldr	r3, [pc, #132]	; (800b528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4013      	ands	r3, r2
 800b4a6:	4a20      	ldr	r2, [pc, #128]	; (800b528 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b4a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d10a      	bne.n	800b4c8 <prvAddCurrentTaskToDelayedList+0x58>
 800b4b2:	683b      	ldr	r3, [r7, #0]
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d007      	beq.n	800b4c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4b8:	4b1a      	ldr	r3, [pc, #104]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	4619      	mov	r1, r3
 800b4c0:	481a      	ldr	r0, [pc, #104]	; (800b52c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b4c2:	f7fd fecd 	bl	8009260 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4c6:	e026      	b.n	800b516 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4c8:	68fa      	ldr	r2, [r7, #12]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	4413      	add	r3, r2
 800b4ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4d0:	4b14      	ldr	r3, [pc, #80]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	68ba      	ldr	r2, [r7, #8]
 800b4d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4d8:	68ba      	ldr	r2, [r7, #8]
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	429a      	cmp	r2, r3
 800b4de:	d209      	bcs.n	800b4f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4e0:	4b13      	ldr	r3, [pc, #76]	; (800b530 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	4b0f      	ldr	r3, [pc, #60]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	3304      	adds	r3, #4
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	4610      	mov	r0, r2
 800b4ee:	f7fd fedb 	bl	80092a8 <vListInsert>
}
 800b4f2:	e010      	b.n	800b516 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4f4:	4b0f      	ldr	r3, [pc, #60]	; (800b534 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b4f6:	681a      	ldr	r2, [r3, #0]
 800b4f8:	4b0a      	ldr	r3, [pc, #40]	; (800b524 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	4619      	mov	r1, r3
 800b500:	4610      	mov	r0, r2
 800b502:	f7fd fed1 	bl	80092a8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	68ba      	ldr	r2, [r7, #8]
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d202      	bcs.n	800b516 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b510:	4a09      	ldr	r2, [pc, #36]	; (800b538 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	6013      	str	r3, [r2, #0]
}
 800b516:	bf00      	nop
 800b518:	3710      	adds	r7, #16
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
 800b51e:	bf00      	nop
 800b520:	20000a18 	.word	0x20000a18
 800b524:	20000914 	.word	0x20000914
 800b528:	20000a1c 	.word	0x20000a1c
 800b52c:	20000a00 	.word	0x20000a00
 800b530:	200009d0 	.word	0x200009d0
 800b534:	200009cc 	.word	0x200009cc
 800b538:	20000a34 	.word	0x20000a34

0800b53c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b08a      	sub	sp, #40	; 0x28
 800b540:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b542:	2300      	movs	r3, #0
 800b544:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b546:	f000 faf7 	bl	800bb38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b54a:	4b1d      	ldr	r3, [pc, #116]	; (800b5c0 <xTimerCreateTimerTask+0x84>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d021      	beq.n	800b596 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b552:	2300      	movs	r3, #0
 800b554:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b55a:	1d3a      	adds	r2, r7, #4
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	f107 030c 	add.w	r3, r7, #12
 800b564:	4618      	mov	r0, r3
 800b566:	f7f5 f893 	bl	8000690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b56a:	6879      	ldr	r1, [r7, #4]
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	68fa      	ldr	r2, [r7, #12]
 800b570:	9202      	str	r2, [sp, #8]
 800b572:	9301      	str	r3, [sp, #4]
 800b574:	2302      	movs	r3, #2
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	2300      	movs	r3, #0
 800b57a:	460a      	mov	r2, r1
 800b57c:	4911      	ldr	r1, [pc, #68]	; (800b5c4 <xTimerCreateTimerTask+0x88>)
 800b57e:	4812      	ldr	r0, [pc, #72]	; (800b5c8 <xTimerCreateTimerTask+0x8c>)
 800b580:	f7fe ff62 	bl	800a448 <xTaskCreateStatic>
 800b584:	4603      	mov	r3, r0
 800b586:	4a11      	ldr	r2, [pc, #68]	; (800b5cc <xTimerCreateTimerTask+0x90>)
 800b588:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b58a:	4b10      	ldr	r3, [pc, #64]	; (800b5cc <xTimerCreateTimerTask+0x90>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d001      	beq.n	800b596 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b592:	2301      	movs	r3, #1
 800b594:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d10c      	bne.n	800b5b6 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b59c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5a0:	b672      	cpsid	i
 800b5a2:	f383 8811 	msr	BASEPRI, r3
 800b5a6:	f3bf 8f6f 	isb	sy
 800b5aa:	f3bf 8f4f 	dsb	sy
 800b5ae:	b662      	cpsie	i
 800b5b0:	613b      	str	r3, [r7, #16]
}
 800b5b2:	bf00      	nop
 800b5b4:	e7fe      	b.n	800b5b4 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b5b6:	697b      	ldr	r3, [r7, #20]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3718      	adds	r7, #24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}
 800b5c0:	20000a70 	.word	0x20000a70
 800b5c4:	0801e250 	.word	0x0801e250
 800b5c8:	0800b70d 	.word	0x0800b70d
 800b5cc:	20000a74 	.word	0x20000a74

0800b5d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b08a      	sub	sp, #40	; 0x28
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	60f8      	str	r0, [r7, #12]
 800b5d8:	60b9      	str	r1, [r7, #8]
 800b5da:	607a      	str	r2, [r7, #4]
 800b5dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10c      	bne.n	800b602 <xTimerGenericCommand+0x32>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	b672      	cpsid	i
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	b662      	cpsie	i
 800b5fc:	623b      	str	r3, [r7, #32]
}
 800b5fe:	bf00      	nop
 800b600:	e7fe      	b.n	800b600 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b602:	4b1a      	ldr	r3, [pc, #104]	; (800b66c <xTimerGenericCommand+0x9c>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d02a      	beq.n	800b660 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	2b05      	cmp	r3, #5
 800b61a:	dc18      	bgt.n	800b64e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b61c:	f7ff fd4e 	bl	800b0bc <xTaskGetSchedulerState>
 800b620:	4603      	mov	r3, r0
 800b622:	2b02      	cmp	r3, #2
 800b624:	d109      	bne.n	800b63a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b626:	4b11      	ldr	r3, [pc, #68]	; (800b66c <xTimerGenericCommand+0x9c>)
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f107 0114 	add.w	r1, r7, #20
 800b62e:	2300      	movs	r3, #0
 800b630:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b632:	f7fe f837 	bl	80096a4 <xQueueGenericSend>
 800b636:	6278      	str	r0, [r7, #36]	; 0x24
 800b638:	e012      	b.n	800b660 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b63a:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <xTimerGenericCommand+0x9c>)
 800b63c:	6818      	ldr	r0, [r3, #0]
 800b63e:	f107 0114 	add.w	r1, r7, #20
 800b642:	2300      	movs	r3, #0
 800b644:	2200      	movs	r2, #0
 800b646:	f7fe f82d 	bl	80096a4 <xQueueGenericSend>
 800b64a:	6278      	str	r0, [r7, #36]	; 0x24
 800b64c:	e008      	b.n	800b660 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b64e:	4b07      	ldr	r3, [pc, #28]	; (800b66c <xTimerGenericCommand+0x9c>)
 800b650:	6818      	ldr	r0, [r3, #0]
 800b652:	f107 0114 	add.w	r1, r7, #20
 800b656:	2300      	movs	r3, #0
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	f7fe f929 	bl	80098b0 <xQueueGenericSendFromISR>
 800b65e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b662:	4618      	mov	r0, r3
 800b664:	3728      	adds	r7, #40	; 0x28
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}
 800b66a:	bf00      	nop
 800b66c:	20000a70 	.word	0x20000a70

0800b670 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b088      	sub	sp, #32
 800b674:	af02      	add	r7, sp, #8
 800b676:	6078      	str	r0, [r7, #4]
 800b678:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b67a:	4b23      	ldr	r3, [pc, #140]	; (800b708 <prvProcessExpiredTimer+0x98>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	68db      	ldr	r3, [r3, #12]
 800b682:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	3304      	adds	r3, #4
 800b688:	4618      	mov	r0, r3
 800b68a:	f7fd fe46 	bl	800931a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d024      	beq.n	800b6e6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b69c:	697b      	ldr	r3, [r7, #20]
 800b69e:	699a      	ldr	r2, [r3, #24]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	18d1      	adds	r1, r2, r3
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	683a      	ldr	r2, [r7, #0]
 800b6a8:	6978      	ldr	r0, [r7, #20]
 800b6aa:	f000 f8d3 	bl	800b854 <prvInsertTimerInActiveList>
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d021      	beq.n	800b6f8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	9300      	str	r3, [sp, #0]
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	687a      	ldr	r2, [r7, #4]
 800b6bc:	2100      	movs	r1, #0
 800b6be:	6978      	ldr	r0, [r7, #20]
 800b6c0:	f7ff ff86 	bl	800b5d0 <xTimerGenericCommand>
 800b6c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b6c6:	693b      	ldr	r3, [r7, #16]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d115      	bne.n	800b6f8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b6cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d0:	b672      	cpsid	i
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	b662      	cpsie	i
 800b6e0:	60fb      	str	r3, [r7, #12]
}
 800b6e2:	bf00      	nop
 800b6e4:	e7fe      	b.n	800b6e4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b6ec:	f023 0301 	bic.w	r3, r3, #1
 800b6f0:	b2da      	uxtb	r2, r3
 800b6f2:	697b      	ldr	r3, [r7, #20]
 800b6f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	6978      	ldr	r0, [r7, #20]
 800b6fe:	4798      	blx	r3
}
 800b700:	bf00      	nop
 800b702:	3718      	adds	r7, #24
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}
 800b708:	20000a68 	.word	0x20000a68

0800b70c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b084      	sub	sp, #16
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b714:	f107 0308 	add.w	r3, r7, #8
 800b718:	4618      	mov	r0, r3
 800b71a:	f000 f857 	bl	800b7cc <prvGetNextExpireTime>
 800b71e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b720:	68bb      	ldr	r3, [r7, #8]
 800b722:	4619      	mov	r1, r3
 800b724:	68f8      	ldr	r0, [r7, #12]
 800b726:	f000 f803 	bl	800b730 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b72a:	f000 f8d5 	bl	800b8d8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b72e:	e7f1      	b.n	800b714 <prvTimerTask+0x8>

0800b730 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
 800b738:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b73a:	f7ff f8c1 	bl	800a8c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b73e:	f107 0308 	add.w	r3, r7, #8
 800b742:	4618      	mov	r0, r3
 800b744:	f000 f866 	bl	800b814 <prvSampleTimeNow>
 800b748:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b74a:	68bb      	ldr	r3, [r7, #8]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d130      	bne.n	800b7b2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b750:	683b      	ldr	r3, [r7, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d10a      	bne.n	800b76c <prvProcessTimerOrBlockTask+0x3c>
 800b756:	687a      	ldr	r2, [r7, #4]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	429a      	cmp	r2, r3
 800b75c:	d806      	bhi.n	800b76c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b75e:	f7ff f8bd 	bl	800a8dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b762:	68f9      	ldr	r1, [r7, #12]
 800b764:	6878      	ldr	r0, [r7, #4]
 800b766:	f7ff ff83 	bl	800b670 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b76a:	e024      	b.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b76c:	683b      	ldr	r3, [r7, #0]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d008      	beq.n	800b784 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b772:	4b13      	ldr	r3, [pc, #76]	; (800b7c0 <prvProcessTimerOrBlockTask+0x90>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d101      	bne.n	800b780 <prvProcessTimerOrBlockTask+0x50>
 800b77c:	2301      	movs	r3, #1
 800b77e:	e000      	b.n	800b782 <prvProcessTimerOrBlockTask+0x52>
 800b780:	2300      	movs	r3, #0
 800b782:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b784:	4b0f      	ldr	r3, [pc, #60]	; (800b7c4 <prvProcessTimerOrBlockTask+0x94>)
 800b786:	6818      	ldr	r0, [r3, #0]
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	4619      	mov	r1, r3
 800b792:	f7fe fe25 	bl	800a3e0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b796:	f7ff f8a1 	bl	800a8dc <xTaskResumeAll>
 800b79a:	4603      	mov	r3, r0
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d10a      	bne.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b7a0:	4b09      	ldr	r3, [pc, #36]	; (800b7c8 <prvProcessTimerOrBlockTask+0x98>)
 800b7a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	f3bf 8f4f 	dsb	sy
 800b7ac:	f3bf 8f6f 	isb	sy
}
 800b7b0:	e001      	b.n	800b7b6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b7b2:	f7ff f893 	bl	800a8dc <xTaskResumeAll>
}
 800b7b6:	bf00      	nop
 800b7b8:	3710      	adds	r7, #16
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
 800b7be:	bf00      	nop
 800b7c0:	20000a6c 	.word	0x20000a6c
 800b7c4:	20000a70 	.word	0x20000a70
 800b7c8:	e000ed04 	.word	0xe000ed04

0800b7cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b7d4:	4b0e      	ldr	r3, [pc, #56]	; (800b810 <prvGetNextExpireTime+0x44>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d101      	bne.n	800b7e2 <prvGetNextExpireTime+0x16>
 800b7de:	2201      	movs	r2, #1
 800b7e0:	e000      	b.n	800b7e4 <prvGetNextExpireTime+0x18>
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d105      	bne.n	800b7fc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <prvGetNextExpireTime+0x44>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	68db      	ldr	r3, [r3, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	60fb      	str	r3, [r7, #12]
 800b7fa:	e001      	b.n	800b800 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b800:	68fb      	ldr	r3, [r7, #12]
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	20000a68 	.word	0x20000a68

0800b814 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b81c:	f7ff f8fc 	bl	800aa18 <xTaskGetTickCount>
 800b820:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b822:	4b0b      	ldr	r3, [pc, #44]	; (800b850 <prvSampleTimeNow+0x3c>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68fa      	ldr	r2, [r7, #12]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d205      	bcs.n	800b838 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b82c:	f000 f91e 	bl	800ba6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	601a      	str	r2, [r3, #0]
 800b836:	e002      	b.n	800b83e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2200      	movs	r2, #0
 800b83c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b83e:	4a04      	ldr	r2, [pc, #16]	; (800b850 <prvSampleTimeNow+0x3c>)
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b844:	68fb      	ldr	r3, [r7, #12]
}
 800b846:	4618      	mov	r0, r3
 800b848:	3710      	adds	r7, #16
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000a78 	.word	0x20000a78

0800b854 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b086      	sub	sp, #24
 800b858:	af00      	add	r7, sp, #0
 800b85a:	60f8      	str	r0, [r7, #12]
 800b85c:	60b9      	str	r1, [r7, #8]
 800b85e:	607a      	str	r2, [r7, #4]
 800b860:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	68ba      	ldr	r2, [r7, #8]
 800b86a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	429a      	cmp	r2, r3
 800b878:	d812      	bhi.n	800b8a0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	1ad2      	subs	r2, r2, r3
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	699b      	ldr	r3, [r3, #24]
 800b884:	429a      	cmp	r2, r3
 800b886:	d302      	bcc.n	800b88e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b888:	2301      	movs	r3, #1
 800b88a:	617b      	str	r3, [r7, #20]
 800b88c:	e01b      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b88e:	4b10      	ldr	r3, [pc, #64]	; (800b8d0 <prvInsertTimerInActiveList+0x7c>)
 800b890:	681a      	ldr	r2, [r3, #0]
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3304      	adds	r3, #4
 800b896:	4619      	mov	r1, r3
 800b898:	4610      	mov	r0, r2
 800b89a:	f7fd fd05 	bl	80092a8 <vListInsert>
 800b89e:	e012      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b8a0:	687a      	ldr	r2, [r7, #4]
 800b8a2:	683b      	ldr	r3, [r7, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d206      	bcs.n	800b8b6 <prvInsertTimerInActiveList+0x62>
 800b8a8:	68ba      	ldr	r2, [r7, #8]
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d302      	bcc.n	800b8b6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	617b      	str	r3, [r7, #20]
 800b8b4:	e007      	b.n	800b8c6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b8b6:	4b07      	ldr	r3, [pc, #28]	; (800b8d4 <prvInsertTimerInActiveList+0x80>)
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	3304      	adds	r3, #4
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4610      	mov	r0, r2
 800b8c2:	f7fd fcf1 	bl	80092a8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b8c6:	697b      	ldr	r3, [r7, #20]
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3718      	adds	r7, #24
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	bd80      	pop	{r7, pc}
 800b8d0:	20000a6c 	.word	0x20000a6c
 800b8d4:	20000a68 	.word	0x20000a68

0800b8d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b08c      	sub	sp, #48	; 0x30
 800b8dc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8de:	e0b2      	b.n	800ba46 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	f2c0 80ae 	blt.w	800ba44 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ee:	695b      	ldr	r3, [r3, #20]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d004      	beq.n	800b8fe <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd fd0e 	bl	800931a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8fe:	1d3b      	adds	r3, r7, #4
 800b900:	4618      	mov	r0, r3
 800b902:	f7ff ff87 	bl	800b814 <prvSampleTimeNow>
 800b906:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b09      	cmp	r3, #9
 800b90c:	f200 809b 	bhi.w	800ba46 <prvProcessReceivedCommands+0x16e>
 800b910:	a201      	add	r2, pc, #4	; (adr r2, 800b918 <prvProcessReceivedCommands+0x40>)
 800b912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b916:	bf00      	nop
 800b918:	0800b941 	.word	0x0800b941
 800b91c:	0800b941 	.word	0x0800b941
 800b920:	0800b941 	.word	0x0800b941
 800b924:	0800b9b9 	.word	0x0800b9b9
 800b928:	0800b9cd 	.word	0x0800b9cd
 800b92c:	0800ba1b 	.word	0x0800ba1b
 800b930:	0800b941 	.word	0x0800b941
 800b934:	0800b941 	.word	0x0800b941
 800b938:	0800b9b9 	.word	0x0800b9b9
 800b93c:	0800b9cd 	.word	0x0800b9cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b946:	f043 0301 	orr.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b94e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b952:	68fa      	ldr	r2, [r7, #12]
 800b954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b956:	699b      	ldr	r3, [r3, #24]
 800b958:	18d1      	adds	r1, r2, r3
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	6a3a      	ldr	r2, [r7, #32]
 800b95e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b960:	f7ff ff78 	bl	800b854 <prvInsertTimerInActiveList>
 800b964:	4603      	mov	r3, r0
 800b966:	2b00      	cmp	r3, #0
 800b968:	d06d      	beq.n	800ba46 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96c:	6a1b      	ldr	r3, [r3, #32]
 800b96e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b970:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b978:	f003 0304 	and.w	r3, r3, #4
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d062      	beq.n	800ba46 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b984:	699b      	ldr	r3, [r3, #24]
 800b986:	441a      	add	r2, r3
 800b988:	2300      	movs	r3, #0
 800b98a:	9300      	str	r3, [sp, #0]
 800b98c:	2300      	movs	r3, #0
 800b98e:	2100      	movs	r1, #0
 800b990:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b992:	f7ff fe1d 	bl	800b5d0 <xTimerGenericCommand>
 800b996:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800b998:	69fb      	ldr	r3, [r7, #28]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d153      	bne.n	800ba46 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800b99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9a2:	b672      	cpsid	i
 800b9a4:	f383 8811 	msr	BASEPRI, r3
 800b9a8:	f3bf 8f6f 	isb	sy
 800b9ac:	f3bf 8f4f 	dsb	sy
 800b9b0:	b662      	cpsie	i
 800b9b2:	61bb      	str	r3, [r7, #24]
}
 800b9b4:	bf00      	nop
 800b9b6:	e7fe      	b.n	800b9b6 <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9be:	f023 0301 	bic.w	r3, r3, #1
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800b9ca:	e03c      	b.n	800ba46 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9d2:	f043 0301 	orr.w	r3, r3, #1
 800b9d6:	b2da      	uxtb	r2, r3
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d10c      	bne.n	800ba06 <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	b672      	cpsid	i
 800b9f2:	f383 8811 	msr	BASEPRI, r3
 800b9f6:	f3bf 8f6f 	isb	sy
 800b9fa:	f3bf 8f4f 	dsb	sy
 800b9fe:	b662      	cpsie	i
 800ba00:	617b      	str	r3, [r7, #20]
}
 800ba02:	bf00      	nop
 800ba04:	e7fe      	b.n	800ba04 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba08:	699a      	ldr	r2, [r3, #24]
 800ba0a:	6a3b      	ldr	r3, [r7, #32]
 800ba0c:	18d1      	adds	r1, r2, r3
 800ba0e:	6a3b      	ldr	r3, [r7, #32]
 800ba10:	6a3a      	ldr	r2, [r7, #32]
 800ba12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba14:	f7ff ff1e 	bl	800b854 <prvInsertTimerInActiveList>
					break;
 800ba18:	e015      	b.n	800ba46 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d103      	bne.n	800ba30 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800ba28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba2a:	f000 fbc5 	bl	800c1b8 <vPortFree>
 800ba2e:	e00a      	b.n	800ba46 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba36:	f023 0301 	bic.w	r3, r3, #1
 800ba3a:	b2da      	uxtb	r2, r3
 800ba3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ba42:	e000      	b.n	800ba46 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ba44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba46:	4b08      	ldr	r3, [pc, #32]	; (800ba68 <prvProcessReceivedCommands+0x190>)
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f107 0108 	add.w	r1, r7, #8
 800ba4e:	2200      	movs	r2, #0
 800ba50:	4618      	mov	r0, r3
 800ba52:	f7fe f863 	bl	8009b1c <xQueueReceive>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f47f af41 	bne.w	800b8e0 <prvProcessReceivedCommands+0x8>
	}
}
 800ba5e:	bf00      	nop
 800ba60:	bf00      	nop
 800ba62:	3728      	adds	r7, #40	; 0x28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	20000a70 	.word	0x20000a70

0800ba6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ba72:	e04a      	b.n	800bb0a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba74:	4b2e      	ldr	r3, [pc, #184]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68db      	ldr	r3, [r3, #12]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba7e:	4b2c      	ldr	r3, [pc, #176]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fd fc44 	bl	800931a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	6a1b      	ldr	r3, [r3, #32]
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800baa0:	f003 0304 	and.w	r3, r3, #4
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d030      	beq.n	800bb0a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	699b      	ldr	r3, [r3, #24]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	4413      	add	r3, r2
 800bab0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bab2:	68ba      	ldr	r2, [r7, #8]
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	429a      	cmp	r2, r3
 800bab8:	d90e      	bls.n	800bad8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	68ba      	ldr	r2, [r7, #8]
 800babe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	68fa      	ldr	r2, [r7, #12]
 800bac4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bac6:	4b1a      	ldr	r3, [pc, #104]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	3304      	adds	r3, #4
 800bace:	4619      	mov	r1, r3
 800bad0:	4610      	mov	r0, r2
 800bad2:	f7fd fbe9 	bl	80092a8 <vListInsert>
 800bad6:	e018      	b.n	800bb0a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bad8:	2300      	movs	r3, #0
 800bada:	9300      	str	r3, [sp, #0]
 800badc:	2300      	movs	r3, #0
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	2100      	movs	r1, #0
 800bae2:	68f8      	ldr	r0, [r7, #12]
 800bae4:	f7ff fd74 	bl	800b5d0 <xTimerGenericCommand>
 800bae8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10c      	bne.n	800bb0a <prvSwitchTimerLists+0x9e>
	__asm volatile
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	b672      	cpsid	i
 800baf6:	f383 8811 	msr	BASEPRI, r3
 800bafa:	f3bf 8f6f 	isb	sy
 800bafe:	f3bf 8f4f 	dsb	sy
 800bb02:	b662      	cpsie	i
 800bb04:	603b      	str	r3, [r7, #0]
}
 800bb06:	bf00      	nop
 800bb08:	e7fe      	b.n	800bb08 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb0a:	4b09      	ldr	r3, [pc, #36]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d1af      	bne.n	800ba74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb14:	4b06      	ldr	r3, [pc, #24]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb1a:	4b06      	ldr	r3, [pc, #24]	; (800bb34 <prvSwitchTimerLists+0xc8>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a04      	ldr	r2, [pc, #16]	; (800bb30 <prvSwitchTimerLists+0xc4>)
 800bb20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb22:	4a04      	ldr	r2, [pc, #16]	; (800bb34 <prvSwitchTimerLists+0xc8>)
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	6013      	str	r3, [r2, #0]
}
 800bb28:	bf00      	nop
 800bb2a:	3718      	adds	r7, #24
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}
 800bb30:	20000a68 	.word	0x20000a68
 800bb34:	20000a6c 	.word	0x20000a6c

0800bb38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bb3e:	f000 f945 	bl	800bdcc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bb42:	4b15      	ldr	r3, [pc, #84]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d120      	bne.n	800bb8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bb4a:	4814      	ldr	r0, [pc, #80]	; (800bb9c <prvCheckForValidListAndQueue+0x64>)
 800bb4c:	f7fd fb5b 	bl	8009206 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bb50:	4813      	ldr	r0, [pc, #76]	; (800bba0 <prvCheckForValidListAndQueue+0x68>)
 800bb52:	f7fd fb58 	bl	8009206 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bb56:	4b13      	ldr	r3, [pc, #76]	; (800bba4 <prvCheckForValidListAndQueue+0x6c>)
 800bb58:	4a10      	ldr	r2, [pc, #64]	; (800bb9c <prvCheckForValidListAndQueue+0x64>)
 800bb5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bb5c:	4b12      	ldr	r3, [pc, #72]	; (800bba8 <prvCheckForValidListAndQueue+0x70>)
 800bb5e:	4a10      	ldr	r2, [pc, #64]	; (800bba0 <prvCheckForValidListAndQueue+0x68>)
 800bb60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bb62:	2300      	movs	r3, #0
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	4b11      	ldr	r3, [pc, #68]	; (800bbac <prvCheckForValidListAndQueue+0x74>)
 800bb68:	4a11      	ldr	r2, [pc, #68]	; (800bbb0 <prvCheckForValidListAndQueue+0x78>)
 800bb6a:	210c      	movs	r1, #12
 800bb6c:	200a      	movs	r0, #10
 800bb6e:	f7fd fc69 	bl	8009444 <xQueueGenericCreateStatic>
 800bb72:	4603      	mov	r3, r0
 800bb74:	4a08      	ldr	r2, [pc, #32]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bb78:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d005      	beq.n	800bb8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bb80:	4b05      	ldr	r3, [pc, #20]	; (800bb98 <prvCheckForValidListAndQueue+0x60>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	490b      	ldr	r1, [pc, #44]	; (800bbb4 <prvCheckForValidListAndQueue+0x7c>)
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fe fbd6 	bl	800a338 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bb8c:	f000 f952 	bl	800be34 <vPortExitCritical>
}
 800bb90:	bf00      	nop
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	20000a70 	.word	0x20000a70
 800bb9c:	20000a40 	.word	0x20000a40
 800bba0:	20000a54 	.word	0x20000a54
 800bba4:	20000a68 	.word	0x20000a68
 800bba8:	20000a6c 	.word	0x20000a6c
 800bbac:	20000af4 	.word	0x20000af4
 800bbb0:	20000a7c 	.word	0x20000a7c
 800bbb4:	0801e258 	.word	0x0801e258

0800bbb8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b085      	sub	sp, #20
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	60f8      	str	r0, [r7, #12]
 800bbc0:	60b9      	str	r1, [r7, #8]
 800bbc2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	3b04      	subs	r3, #4
 800bbc8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bbd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3b04      	subs	r3, #4
 800bbd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f023 0201 	bic.w	r2, r3, #1
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	3b04      	subs	r3, #4
 800bbe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bbe8:	4a0c      	ldr	r2, [pc, #48]	; (800bc1c <pxPortInitialiseStack+0x64>)
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3b14      	subs	r3, #20
 800bbf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	3b04      	subs	r3, #4
 800bbfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f06f 0202 	mvn.w	r2, #2
 800bc06:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	3b20      	subs	r3, #32
 800bc0c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3714      	adds	r7, #20
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr
 800bc1c:	0800bc21 	.word	0x0800bc21

0800bc20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bc26:	2300      	movs	r3, #0
 800bc28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bc2a:	4b14      	ldr	r3, [pc, #80]	; (800bc7c <prvTaskExitError+0x5c>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc32:	d00c      	beq.n	800bc4e <prvTaskExitError+0x2e>
	__asm volatile
 800bc34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc38:	b672      	cpsid	i
 800bc3a:	f383 8811 	msr	BASEPRI, r3
 800bc3e:	f3bf 8f6f 	isb	sy
 800bc42:	f3bf 8f4f 	dsb	sy
 800bc46:	b662      	cpsie	i
 800bc48:	60fb      	str	r3, [r7, #12]
}
 800bc4a:	bf00      	nop
 800bc4c:	e7fe      	b.n	800bc4c <prvTaskExitError+0x2c>
	__asm volatile
 800bc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc52:	b672      	cpsid	i
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	b662      	cpsie	i
 800bc62:	60bb      	str	r3, [r7, #8]
}
 800bc64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bc66:	bf00      	nop
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d0fc      	beq.n	800bc68 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bc6e:	bf00      	nop
 800bc70:	bf00      	nop
 800bc72:	3714      	adds	r7, #20
 800bc74:	46bd      	mov	sp, r7
 800bc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7a:	4770      	bx	lr
 800bc7c:	2000000c 	.word	0x2000000c

0800bc80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bc80:	4b07      	ldr	r3, [pc, #28]	; (800bca0 <pxCurrentTCBConst2>)
 800bc82:	6819      	ldr	r1, [r3, #0]
 800bc84:	6808      	ldr	r0, [r1, #0]
 800bc86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	f380 8809 	msr	PSP, r0
 800bc8e:	f3bf 8f6f 	isb	sy
 800bc92:	f04f 0000 	mov.w	r0, #0
 800bc96:	f380 8811 	msr	BASEPRI, r0
 800bc9a:	4770      	bx	lr
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst2>:
 800bca0:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bca8:	4808      	ldr	r0, [pc, #32]	; (800bccc <prvPortStartFirstTask+0x24>)
 800bcaa:	6800      	ldr	r0, [r0, #0]
 800bcac:	6800      	ldr	r0, [r0, #0]
 800bcae:	f380 8808 	msr	MSP, r0
 800bcb2:	f04f 0000 	mov.w	r0, #0
 800bcb6:	f380 8814 	msr	CONTROL, r0
 800bcba:	b662      	cpsie	i
 800bcbc:	b661      	cpsie	f
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	f3bf 8f6f 	isb	sy
 800bcc6:	df00      	svc	0
 800bcc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bcca:	bf00      	nop
 800bccc:	e000ed08 	.word	0xe000ed08

0800bcd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bcd6:	4b37      	ldr	r3, [pc, #220]	; (800bdb4 <xPortStartScheduler+0xe4>)
 800bcd8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	b2db      	uxtb	r3, r3
 800bce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	22ff      	movs	r2, #255	; 0xff
 800bce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	b2db      	uxtb	r3, r3
 800bcee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bcf0:	78fb      	ldrb	r3, [r7, #3]
 800bcf2:	b2db      	uxtb	r3, r3
 800bcf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	4b2f      	ldr	r3, [pc, #188]	; (800bdb8 <xPortStartScheduler+0xe8>)
 800bcfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bcfe:	4b2f      	ldr	r3, [pc, #188]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd00:	2207      	movs	r2, #7
 800bd02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd04:	e009      	b.n	800bd1a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bd06:	4b2d      	ldr	r3, [pc, #180]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	4a2b      	ldr	r2, [pc, #172]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd10:	78fb      	ldrb	r3, [r7, #3]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd1a:	78fb      	ldrb	r3, [r7, #3]
 800bd1c:	b2db      	uxtb	r3, r3
 800bd1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd22:	2b80      	cmp	r3, #128	; 0x80
 800bd24:	d0ef      	beq.n	800bd06 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bd26:	4b25      	ldr	r3, [pc, #148]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1c3 0307 	rsb	r3, r3, #7
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d00c      	beq.n	800bd4c <xPortStartScheduler+0x7c>
	__asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd36:	b672      	cpsid	i
 800bd38:	f383 8811 	msr	BASEPRI, r3
 800bd3c:	f3bf 8f6f 	isb	sy
 800bd40:	f3bf 8f4f 	dsb	sy
 800bd44:	b662      	cpsie	i
 800bd46:	60bb      	str	r3, [r7, #8]
}
 800bd48:	bf00      	nop
 800bd4a:	e7fe      	b.n	800bd4a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bd4c:	4b1b      	ldr	r3, [pc, #108]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	021b      	lsls	r3, r3, #8
 800bd52:	4a1a      	ldr	r2, [pc, #104]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd54:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bd56:	4b19      	ldr	r3, [pc, #100]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bd5e:	4a17      	ldr	r2, [pc, #92]	; (800bdbc <xPortStartScheduler+0xec>)
 800bd60:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	b2da      	uxtb	r2, r3
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd6a:	4b15      	ldr	r3, [pc, #84]	; (800bdc0 <xPortStartScheduler+0xf0>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	4a14      	ldr	r2, [pc, #80]	; (800bdc0 <xPortStartScheduler+0xf0>)
 800bd70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bd74:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bd76:	4b12      	ldr	r3, [pc, #72]	; (800bdc0 <xPortStartScheduler+0xf0>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	4a11      	ldr	r2, [pc, #68]	; (800bdc0 <xPortStartScheduler+0xf0>)
 800bd7c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bd80:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bd82:	f000 f8dd 	bl	800bf40 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <xPortStartScheduler+0xf4>)
 800bd88:	2200      	movs	r2, #0
 800bd8a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bd8c:	f000 f8fc 	bl	800bf88 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bd90:	4b0d      	ldr	r3, [pc, #52]	; (800bdc8 <xPortStartScheduler+0xf8>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4a0c      	ldr	r2, [pc, #48]	; (800bdc8 <xPortStartScheduler+0xf8>)
 800bd96:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bd9a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bd9c:	f7ff ff84 	bl	800bca8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bda0:	f7fe ff16 	bl	800abd0 <vTaskSwitchContext>
	prvTaskExitError();
 800bda4:	f7ff ff3c 	bl	800bc20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	e000e400 	.word	0xe000e400
 800bdb8:	20000b3c 	.word	0x20000b3c
 800bdbc:	20000b40 	.word	0x20000b40
 800bdc0:	e000ed20 	.word	0xe000ed20
 800bdc4:	2000000c 	.word	0x2000000c
 800bdc8:	e000ef34 	.word	0xe000ef34

0800bdcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
	__asm volatile
 800bdd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdd6:	b672      	cpsid	i
 800bdd8:	f383 8811 	msr	BASEPRI, r3
 800bddc:	f3bf 8f6f 	isb	sy
 800bde0:	f3bf 8f4f 	dsb	sy
 800bde4:	b662      	cpsie	i
 800bde6:	607b      	str	r3, [r7, #4]
}
 800bde8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bdea:	4b10      	ldr	r3, [pc, #64]	; (800be2c <vPortEnterCritical+0x60>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	4a0e      	ldr	r2, [pc, #56]	; (800be2c <vPortEnterCritical+0x60>)
 800bdf2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bdf4:	4b0d      	ldr	r3, [pc, #52]	; (800be2c <vPortEnterCritical+0x60>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d111      	bne.n	800be20 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bdfc:	4b0c      	ldr	r3, [pc, #48]	; (800be30 <vPortEnterCritical+0x64>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d00c      	beq.n	800be20 <vPortEnterCritical+0x54>
	__asm volatile
 800be06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be0a:	b672      	cpsid	i
 800be0c:	f383 8811 	msr	BASEPRI, r3
 800be10:	f3bf 8f6f 	isb	sy
 800be14:	f3bf 8f4f 	dsb	sy
 800be18:	b662      	cpsie	i
 800be1a:	603b      	str	r3, [r7, #0]
}
 800be1c:	bf00      	nop
 800be1e:	e7fe      	b.n	800be1e <vPortEnterCritical+0x52>
	}
}
 800be20:	bf00      	nop
 800be22:	370c      	adds	r7, #12
 800be24:	46bd      	mov	sp, r7
 800be26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2a:	4770      	bx	lr
 800be2c:	2000000c 	.word	0x2000000c
 800be30:	e000ed04 	.word	0xe000ed04

0800be34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be3a:	4b13      	ldr	r3, [pc, #76]	; (800be88 <vPortExitCritical+0x54>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d10c      	bne.n	800be5c <vPortExitCritical+0x28>
	__asm volatile
 800be42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be46:	b672      	cpsid	i
 800be48:	f383 8811 	msr	BASEPRI, r3
 800be4c:	f3bf 8f6f 	isb	sy
 800be50:	f3bf 8f4f 	dsb	sy
 800be54:	b662      	cpsie	i
 800be56:	607b      	str	r3, [r7, #4]
}
 800be58:	bf00      	nop
 800be5a:	e7fe      	b.n	800be5a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800be5c:	4b0a      	ldr	r3, [pc, #40]	; (800be88 <vPortExitCritical+0x54>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	3b01      	subs	r3, #1
 800be62:	4a09      	ldr	r2, [pc, #36]	; (800be88 <vPortExitCritical+0x54>)
 800be64:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800be66:	4b08      	ldr	r3, [pc, #32]	; (800be88 <vPortExitCritical+0x54>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d105      	bne.n	800be7a <vPortExitCritical+0x46>
 800be6e:	2300      	movs	r3, #0
 800be70:	603b      	str	r3, [r7, #0]
	__asm volatile
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	f383 8811 	msr	BASEPRI, r3
}
 800be78:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800be7a:	bf00      	nop
 800be7c:	370c      	adds	r7, #12
 800be7e:	46bd      	mov	sp, r7
 800be80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be84:	4770      	bx	lr
 800be86:	bf00      	nop
 800be88:	2000000c 	.word	0x2000000c
 800be8c:	00000000 	.word	0x00000000

0800be90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be90:	f3ef 8009 	mrs	r0, PSP
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <pxCurrentTCBConst>)
 800be9a:	681a      	ldr	r2, [r3, #0]
 800be9c:	f01e 0f10 	tst.w	lr, #16
 800bea0:	bf08      	it	eq
 800bea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beaa:	6010      	str	r0, [r2, #0]
 800beac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800beb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800beb4:	b672      	cpsid	i
 800beb6:	f380 8811 	msr	BASEPRI, r0
 800beba:	f3bf 8f4f 	dsb	sy
 800bebe:	f3bf 8f6f 	isb	sy
 800bec2:	b662      	cpsie	i
 800bec4:	f7fe fe84 	bl	800abd0 <vTaskSwitchContext>
 800bec8:	f04f 0000 	mov.w	r0, #0
 800becc:	f380 8811 	msr	BASEPRI, r0
 800bed0:	bc09      	pop	{r0, r3}
 800bed2:	6819      	ldr	r1, [r3, #0]
 800bed4:	6808      	ldr	r0, [r1, #0]
 800bed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800beda:	f01e 0f10 	tst.w	lr, #16
 800bede:	bf08      	it	eq
 800bee0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bee4:	f380 8809 	msr	PSP, r0
 800bee8:	f3bf 8f6f 	isb	sy
 800beec:	4770      	bx	lr
 800beee:	bf00      	nop

0800bef0 <pxCurrentTCBConst>:
 800bef0:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bef4:	bf00      	nop
 800bef6:	bf00      	nop

0800bef8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	b672      	cpsid	i
 800bf04:	f383 8811 	msr	BASEPRI, r3
 800bf08:	f3bf 8f6f 	isb	sy
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	b662      	cpsie	i
 800bf12:	607b      	str	r3, [r7, #4]
}
 800bf14:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf16:	f7fe fda1 	bl	800aa5c <xTaskIncrementTick>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d003      	beq.n	800bf28 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bf20:	4b06      	ldr	r3, [pc, #24]	; (800bf3c <SysTick_Handler+0x44>)
 800bf22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf26:	601a      	str	r2, [r3, #0]
 800bf28:	2300      	movs	r3, #0
 800bf2a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	f383 8811 	msr	BASEPRI, r3
}
 800bf32:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bf34:	bf00      	nop
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	e000ed04 	.word	0xe000ed04

0800bf40 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bf40:	b480      	push	{r7}
 800bf42:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bf44:	4b0b      	ldr	r3, [pc, #44]	; (800bf74 <vPortSetupTimerInterrupt+0x34>)
 800bf46:	2200      	movs	r2, #0
 800bf48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bf4a:	4b0b      	ldr	r3, [pc, #44]	; (800bf78 <vPortSetupTimerInterrupt+0x38>)
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bf50:	4b0a      	ldr	r3, [pc, #40]	; (800bf7c <vPortSetupTimerInterrupt+0x3c>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	4a0a      	ldr	r2, [pc, #40]	; (800bf80 <vPortSetupTimerInterrupt+0x40>)
 800bf56:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5a:	099b      	lsrs	r3, r3, #6
 800bf5c:	4a09      	ldr	r2, [pc, #36]	; (800bf84 <vPortSetupTimerInterrupt+0x44>)
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bf62:	4b04      	ldr	r3, [pc, #16]	; (800bf74 <vPortSetupTimerInterrupt+0x34>)
 800bf64:	2207      	movs	r2, #7
 800bf66:	601a      	str	r2, [r3, #0]
}
 800bf68:	bf00      	nop
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	e000e010 	.word	0xe000e010
 800bf78:	e000e018 	.word	0xe000e018
 800bf7c:	20000000 	.word	0x20000000
 800bf80:	10624dd3 	.word	0x10624dd3
 800bf84:	e000e014 	.word	0xe000e014

0800bf88 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bf88:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bf98 <vPortEnableVFP+0x10>
 800bf8c:	6801      	ldr	r1, [r0, #0]
 800bf8e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bf92:	6001      	str	r1, [r0, #0]
 800bf94:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bf96:	bf00      	nop
 800bf98:	e000ed88 	.word	0xe000ed88

0800bf9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bfa2:	f3ef 8305 	mrs	r3, IPSR
 800bfa6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	2b0f      	cmp	r3, #15
 800bfac:	d916      	bls.n	800bfdc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bfae:	4a19      	ldr	r2, [pc, #100]	; (800c014 <vPortValidateInterruptPriority+0x78>)
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	781b      	ldrb	r3, [r3, #0]
 800bfb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bfb8:	4b17      	ldr	r3, [pc, #92]	; (800c018 <vPortValidateInterruptPriority+0x7c>)
 800bfba:	781b      	ldrb	r3, [r3, #0]
 800bfbc:	7afa      	ldrb	r2, [r7, #11]
 800bfbe:	429a      	cmp	r2, r3
 800bfc0:	d20c      	bcs.n	800bfdc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc6:	b672      	cpsid	i
 800bfc8:	f383 8811 	msr	BASEPRI, r3
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	b662      	cpsie	i
 800bfd6:	607b      	str	r3, [r7, #4]
}
 800bfd8:	bf00      	nop
 800bfda:	e7fe      	b.n	800bfda <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bfdc:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <vPortValidateInterruptPriority+0x80>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bfe4:	4b0e      	ldr	r3, [pc, #56]	; (800c020 <vPortValidateInterruptPriority+0x84>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d90c      	bls.n	800c006 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800bfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff0:	b672      	cpsid	i
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	b662      	cpsie	i
 800c000:	603b      	str	r3, [r7, #0]
}
 800c002:	bf00      	nop
 800c004:	e7fe      	b.n	800c004 <vPortValidateInterruptPriority+0x68>
	}
 800c006:	bf00      	nop
 800c008:	3714      	adds	r7, #20
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr
 800c012:	bf00      	nop
 800c014:	e000e3f0 	.word	0xe000e3f0
 800c018:	20000b3c 	.word	0x20000b3c
 800c01c:	e000ed0c 	.word	0xe000ed0c
 800c020:	20000b40 	.word	0x20000b40

0800c024 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b08a      	sub	sp, #40	; 0x28
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c02c:	2300      	movs	r3, #0
 800c02e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c030:	f7fe fc46 	bl	800a8c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c034:	4b5b      	ldr	r3, [pc, #364]	; (800c1a4 <pvPortMalloc+0x180>)
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c03c:	f000 f91a 	bl	800c274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c040:	4b59      	ldr	r3, [pc, #356]	; (800c1a8 <pvPortMalloc+0x184>)
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	4013      	ands	r3, r2
 800c048:	2b00      	cmp	r3, #0
 800c04a:	f040 8092 	bne.w	800c172 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d01f      	beq.n	800c094 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c054:	2208      	movs	r2, #8
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	4413      	add	r3, r2
 800c05a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f003 0307 	and.w	r3, r3, #7
 800c062:	2b00      	cmp	r3, #0
 800c064:	d016      	beq.n	800c094 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f023 0307 	bic.w	r3, r3, #7
 800c06c:	3308      	adds	r3, #8
 800c06e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f003 0307 	and.w	r3, r3, #7
 800c076:	2b00      	cmp	r3, #0
 800c078:	d00c      	beq.n	800c094 <pvPortMalloc+0x70>
	__asm volatile
 800c07a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07e:	b672      	cpsid	i
 800c080:	f383 8811 	msr	BASEPRI, r3
 800c084:	f3bf 8f6f 	isb	sy
 800c088:	f3bf 8f4f 	dsb	sy
 800c08c:	b662      	cpsie	i
 800c08e:	617b      	str	r3, [r7, #20]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d06b      	beq.n	800c172 <pvPortMalloc+0x14e>
 800c09a:	4b44      	ldr	r3, [pc, #272]	; (800c1ac <pvPortMalloc+0x188>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d866      	bhi.n	800c172 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c0a4:	4b42      	ldr	r3, [pc, #264]	; (800c1b0 <pvPortMalloc+0x18c>)
 800c0a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c0a8:	4b41      	ldr	r3, [pc, #260]	; (800c1b0 <pvPortMalloc+0x18c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ae:	e004      	b.n	800c0ba <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d903      	bls.n	800c0cc <pvPortMalloc+0xa8>
 800c0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d1f1      	bne.n	800c0b0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0cc:	4b35      	ldr	r3, [pc, #212]	; (800c1a4 <pvPortMalloc+0x180>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d04d      	beq.n	800c172 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0d6:	6a3b      	ldr	r3, [r7, #32]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2208      	movs	r2, #8
 800c0dc:	4413      	add	r3, r2
 800c0de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e2:	681a      	ldr	r2, [r3, #0]
 800c0e4:	6a3b      	ldr	r3, [r7, #32]
 800c0e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	1ad2      	subs	r2, r2, r3
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	005b      	lsls	r3, r3, #1
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d921      	bls.n	800c13c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c100:	69bb      	ldr	r3, [r7, #24]
 800c102:	f003 0307 	and.w	r3, r3, #7
 800c106:	2b00      	cmp	r3, #0
 800c108:	d00c      	beq.n	800c124 <pvPortMalloc+0x100>
	__asm volatile
 800c10a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c10e:	b672      	cpsid	i
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	b662      	cpsie	i
 800c11e:	613b      	str	r3, [r7, #16]
}
 800c120:	bf00      	nop
 800c122:	e7fe      	b.n	800c122 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c126:	685a      	ldr	r2, [r3, #4]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	1ad2      	subs	r2, r2, r3
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c136:	69b8      	ldr	r0, [r7, #24]
 800c138:	f000 f8fe 	bl	800c338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c13c:	4b1b      	ldr	r3, [pc, #108]	; (800c1ac <pvPortMalloc+0x188>)
 800c13e:	681a      	ldr	r2, [r3, #0]
 800c140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	1ad3      	subs	r3, r2, r3
 800c146:	4a19      	ldr	r2, [pc, #100]	; (800c1ac <pvPortMalloc+0x188>)
 800c148:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c14a:	4b18      	ldr	r3, [pc, #96]	; (800c1ac <pvPortMalloc+0x188>)
 800c14c:	681a      	ldr	r2, [r3, #0]
 800c14e:	4b19      	ldr	r3, [pc, #100]	; (800c1b4 <pvPortMalloc+0x190>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	429a      	cmp	r2, r3
 800c154:	d203      	bcs.n	800c15e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c156:	4b15      	ldr	r3, [pc, #84]	; (800c1ac <pvPortMalloc+0x188>)
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	4a16      	ldr	r2, [pc, #88]	; (800c1b4 <pvPortMalloc+0x190>)
 800c15c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c160:	685a      	ldr	r2, [r3, #4]
 800c162:	4b11      	ldr	r3, [pc, #68]	; (800c1a8 <pvPortMalloc+0x184>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	431a      	orrs	r2, r3
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16e:	2200      	movs	r2, #0
 800c170:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c172:	f7fe fbb3 	bl	800a8dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c176:	69fb      	ldr	r3, [r7, #28]
 800c178:	f003 0307 	and.w	r3, r3, #7
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d00c      	beq.n	800c19a <pvPortMalloc+0x176>
	__asm volatile
 800c180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c184:	b672      	cpsid	i
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	b662      	cpsie	i
 800c194:	60fb      	str	r3, [r7, #12]
}
 800c196:	bf00      	nop
 800c198:	e7fe      	b.n	800c198 <pvPortMalloc+0x174>
	return pvReturn;
 800c19a:	69fb      	ldr	r3, [r7, #28]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3728      	adds	r7, #40	; 0x28
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	2000474c 	.word	0x2000474c
 800c1a8:	20004758 	.word	0x20004758
 800c1ac:	20004750 	.word	0x20004750
 800c1b0:	20004744 	.word	0x20004744
 800c1b4:	20004754 	.word	0x20004754

0800c1b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b086      	sub	sp, #24
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d04c      	beq.n	800c264 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c1ca:	2308      	movs	r3, #8
 800c1cc:	425b      	negs	r3, r3
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	4413      	add	r3, r2
 800c1d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	685a      	ldr	r2, [r3, #4]
 800c1dc:	4b23      	ldr	r3, [pc, #140]	; (800c26c <vPortFree+0xb4>)
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	4013      	ands	r3, r2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d10c      	bne.n	800c200 <vPortFree+0x48>
	__asm volatile
 800c1e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ea:	b672      	cpsid	i
 800c1ec:	f383 8811 	msr	BASEPRI, r3
 800c1f0:	f3bf 8f6f 	isb	sy
 800c1f4:	f3bf 8f4f 	dsb	sy
 800c1f8:	b662      	cpsie	i
 800c1fa:	60fb      	str	r3, [r7, #12]
}
 800c1fc:	bf00      	nop
 800c1fe:	e7fe      	b.n	800c1fe <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00c      	beq.n	800c222 <vPortFree+0x6a>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	b672      	cpsid	i
 800c20e:	f383 8811 	msr	BASEPRI, r3
 800c212:	f3bf 8f6f 	isb	sy
 800c216:	f3bf 8f4f 	dsb	sy
 800c21a:	b662      	cpsie	i
 800c21c:	60bb      	str	r3, [r7, #8]
}
 800c21e:	bf00      	nop
 800c220:	e7fe      	b.n	800c220 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	685a      	ldr	r2, [r3, #4]
 800c226:	4b11      	ldr	r3, [pc, #68]	; (800c26c <vPortFree+0xb4>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4013      	ands	r3, r2
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d019      	beq.n	800c264 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d115      	bne.n	800c264 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c238:	693b      	ldr	r3, [r7, #16]
 800c23a:	685a      	ldr	r2, [r3, #4]
 800c23c:	4b0b      	ldr	r3, [pc, #44]	; (800c26c <vPortFree+0xb4>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	43db      	mvns	r3, r3
 800c242:	401a      	ands	r2, r3
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c248:	f7fe fb3a 	bl	800a8c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	685a      	ldr	r2, [r3, #4]
 800c250:	4b07      	ldr	r3, [pc, #28]	; (800c270 <vPortFree+0xb8>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	4413      	add	r3, r2
 800c256:	4a06      	ldr	r2, [pc, #24]	; (800c270 <vPortFree+0xb8>)
 800c258:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c25a:	6938      	ldr	r0, [r7, #16]
 800c25c:	f000 f86c 	bl	800c338 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c260:	f7fe fb3c 	bl	800a8dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c264:	bf00      	nop
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	20004758 	.word	0x20004758
 800c270:	20004750 	.word	0x20004750

0800c274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c274:	b480      	push	{r7}
 800c276:	b085      	sub	sp, #20
 800c278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c27a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c280:	4b27      	ldr	r3, [pc, #156]	; (800c320 <prvHeapInit+0xac>)
 800c282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	f003 0307 	and.w	r3, r3, #7
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d00c      	beq.n	800c2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	3307      	adds	r3, #7
 800c292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	f023 0307 	bic.w	r3, r3, #7
 800c29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	4a1f      	ldr	r2, [pc, #124]	; (800c320 <prvHeapInit+0xac>)
 800c2a4:	4413      	add	r3, r2
 800c2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c2ac:	4a1d      	ldr	r2, [pc, #116]	; (800c324 <prvHeapInit+0xb0>)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c2b2:	4b1c      	ldr	r3, [pc, #112]	; (800c324 <prvHeapInit+0xb0>)
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	68ba      	ldr	r2, [r7, #8]
 800c2bc:	4413      	add	r3, r2
 800c2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c2c0:	2208      	movs	r2, #8
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	1a9b      	subs	r3, r3, r2
 800c2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	f023 0307 	bic.w	r3, r3, #7
 800c2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	4a15      	ldr	r2, [pc, #84]	; (800c328 <prvHeapInit+0xb4>)
 800c2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c2d6:	4b14      	ldr	r3, [pc, #80]	; (800c328 <prvHeapInit+0xb4>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c2de:	4b12      	ldr	r3, [pc, #72]	; (800c328 <prvHeapInit+0xb4>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	1ad2      	subs	r2, r2, r3
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c2f4:	4b0c      	ldr	r3, [pc, #48]	; (800c328 <prvHeapInit+0xb4>)
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	4a0a      	ldr	r2, [pc, #40]	; (800c32c <prvHeapInit+0xb8>)
 800c302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	685b      	ldr	r3, [r3, #4]
 800c308:	4a09      	ldr	r2, [pc, #36]	; (800c330 <prvHeapInit+0xbc>)
 800c30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c30c:	4b09      	ldr	r3, [pc, #36]	; (800c334 <prvHeapInit+0xc0>)
 800c30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c312:	601a      	str	r2, [r3, #0]
}
 800c314:	bf00      	nop
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20000b44 	.word	0x20000b44
 800c324:	20004744 	.word	0x20004744
 800c328:	2000474c 	.word	0x2000474c
 800c32c:	20004754 	.word	0x20004754
 800c330:	20004750 	.word	0x20004750
 800c334:	20004758 	.word	0x20004758

0800c338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c338:	b480      	push	{r7}
 800c33a:	b085      	sub	sp, #20
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c340:	4b28      	ldr	r3, [pc, #160]	; (800c3e4 <prvInsertBlockIntoFreeList+0xac>)
 800c342:	60fb      	str	r3, [r7, #12]
 800c344:	e002      	b.n	800c34c <prvInsertBlockIntoFreeList+0x14>
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	60fb      	str	r3, [r7, #12]
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	429a      	cmp	r2, r3
 800c354:	d8f7      	bhi.n	800c346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	68ba      	ldr	r2, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	429a      	cmp	r2, r3
 800c366:	d108      	bne.n	800c37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	685a      	ldr	r2, [r3, #4]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	685b      	ldr	r3, [r3, #4]
 800c370:	441a      	add	r2, r3
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	685b      	ldr	r3, [r3, #4]
 800c382:	68ba      	ldr	r2, [r7, #8]
 800c384:	441a      	add	r2, r3
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d118      	bne.n	800c3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	4b15      	ldr	r3, [pc, #84]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	429a      	cmp	r2, r3
 800c398:	d00d      	beq.n	800c3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	441a      	add	r2, r3
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	681a      	ldr	r2, [r3, #0]
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	601a      	str	r2, [r3, #0]
 800c3b4:	e008      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c3b6:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800c3b8:	681a      	ldr	r2, [r3, #0]
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	e003      	b.n	800c3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	429a      	cmp	r2, r3
 800c3ce:	d002      	beq.n	800c3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	687a      	ldr	r2, [r7, #4]
 800c3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c3d6:	bf00      	nop
 800c3d8:	3714      	adds	r7, #20
 800c3da:	46bd      	mov	sp, r7
 800c3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e0:	4770      	bx	lr
 800c3e2:	bf00      	nop
 800c3e4:	20004744 	.word	0x20004744
 800c3e8:	2000474c 	.word	0x2000474c

0800c3ec <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	330c      	adds	r3, #12
 800c3fc:	461a      	mov	r2, r3
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f003 fcd5 	bl	800fdb0 <tcpip_send_msg_wait_sem>
 800c406:	4603      	mov	r3, r0
 800c408:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c40a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d103      	bne.n	800c41a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c418:	e001      	b.n	800c41e <netconn_apimsg+0x32>
  }
  return err;
 800c41a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3710      	adds	r7, #16
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}
	...

0800c428 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c428:	b580      	push	{r7, lr}
 800c42a:	b08c      	sub	sp, #48	; 0x30
 800c42c:	af00      	add	r7, sp, #0
 800c42e:	4603      	mov	r3, r0
 800c430:	603a      	str	r2, [r7, #0]
 800c432:	71fb      	strb	r3, [r7, #7]
 800c434:	460b      	mov	r3, r1
 800c436:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c438:	79fb      	ldrb	r3, [r7, #7]
 800c43a:	6839      	ldr	r1, [r7, #0]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f001 f82f 	bl	800d4a0 <netconn_alloc>
 800c442:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c446:	2b00      	cmp	r3, #0
 800c448:	d054      	beq.n	800c4f4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c44a:	79bb      	ldrb	r3, [r7, #6]
 800c44c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c44e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c450:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c452:	f107 0308 	add.w	r3, r7, #8
 800c456:	4619      	mov	r1, r3
 800c458:	4829      	ldr	r0, [pc, #164]	; (800c500 <netconn_new_with_proto_and_callback+0xd8>)
 800c45a:	f7ff ffc7 	bl	800c3ec <netconn_apimsg>
 800c45e:	4603      	mov	r3, r0
 800c460:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c464:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d043      	beq.n	800c4f4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	685b      	ldr	r3, [r3, #4]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d005      	beq.n	800c480 <netconn_new_with_proto_and_callback+0x58>
 800c474:	4b23      	ldr	r3, [pc, #140]	; (800c504 <netconn_new_with_proto_and_callback+0xdc>)
 800c476:	22a3      	movs	r2, #163	; 0xa3
 800c478:	4923      	ldr	r1, [pc, #140]	; (800c508 <netconn_new_with_proto_and_callback+0xe0>)
 800c47a:	4824      	ldr	r0, [pc, #144]	; (800c50c <netconn_new_with_proto_and_callback+0xe4>)
 800c47c:	f00f fc06 	bl	801bc8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	3310      	adds	r3, #16
 800c484:	4618      	mov	r0, r3
 800c486:	f00e fe3e 	bl	801b106 <sys_mbox_valid>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d105      	bne.n	800c49c <netconn_new_with_proto_and_callback+0x74>
 800c490:	4b1c      	ldr	r3, [pc, #112]	; (800c504 <netconn_new_with_proto_and_callback+0xdc>)
 800c492:	22a4      	movs	r2, #164	; 0xa4
 800c494:	491e      	ldr	r1, [pc, #120]	; (800c510 <netconn_new_with_proto_and_callback+0xe8>)
 800c496:	481d      	ldr	r0, [pc, #116]	; (800c50c <netconn_new_with_proto_and_callback+0xe4>)
 800c498:	f00f fbf8 	bl	801bc8c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c49e:	3314      	adds	r3, #20
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f00e fe30 	bl	801b106 <sys_mbox_valid>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d005      	beq.n	800c4b8 <netconn_new_with_proto_and_callback+0x90>
 800c4ac:	4b15      	ldr	r3, [pc, #84]	; (800c504 <netconn_new_with_proto_and_callback+0xdc>)
 800c4ae:	22a6      	movs	r2, #166	; 0xa6
 800c4b0:	4918      	ldr	r1, [pc, #96]	; (800c514 <netconn_new_with_proto_and_callback+0xec>)
 800c4b2:	4816      	ldr	r0, [pc, #88]	; (800c50c <netconn_new_with_proto_and_callback+0xe4>)
 800c4b4:	f00f fbea 	bl	801bc8c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c4b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ba:	330c      	adds	r3, #12
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f00e feb3 	bl	801b228 <sys_sem_valid>
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d105      	bne.n	800c4d4 <netconn_new_with_proto_and_callback+0xac>
 800c4c8:	4b0e      	ldr	r3, [pc, #56]	; (800c504 <netconn_new_with_proto_and_callback+0xdc>)
 800c4ca:	22a9      	movs	r2, #169	; 0xa9
 800c4cc:	4912      	ldr	r1, [pc, #72]	; (800c518 <netconn_new_with_proto_and_callback+0xf0>)
 800c4ce:	480f      	ldr	r0, [pc, #60]	; (800c50c <netconn_new_with_proto_and_callback+0xe4>)
 800c4d0:	f00f fbdc 	bl	801bc8c <iprintf>
      sys_sem_free(&conn->op_completed);
 800c4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d6:	330c      	adds	r3, #12
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f00e fe98 	bl	801b20e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e0:	3310      	adds	r3, #16
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f00e fd88 	bl	801aff8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c4e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4ea:	2007      	movs	r0, #7
 800c4ec:	f004 f9c8 	bl	8010880 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	e000      	b.n	800c4f6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3730      	adds	r7, #48	; 0x30
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}
 800c4fe:	bf00      	nop
 800c500:	0800d475 	.word	0x0800d475
 800c504:	0801e260 	.word	0x0801e260
 800c508:	0801e294 	.word	0x0801e294
 800c50c:	0801e2b8 	.word	0x0801e2b8
 800c510:	0801e2e0 	.word	0x0801e2e0
 800c514:	0801e2f8 	.word	0x0801e2f8
 800c518:	0801e31c 	.word	0x0801e31c

0800c51c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b08c      	sub	sp, #48	; 0x30
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d101      	bne.n	800c52e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	e014      	b.n	800c558 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c532:	2329      	movs	r3, #41	; 0x29
 800c534:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c536:	f107 030c 	add.w	r3, r7, #12
 800c53a:	4619      	mov	r1, r3
 800c53c:	4808      	ldr	r0, [pc, #32]	; (800c560 <netconn_prepare_delete+0x44>)
 800c53e:	f7ff ff55 	bl	800c3ec <netconn_apimsg>
 800c542:	4603      	mov	r3, r0
 800c544:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c548:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d002      	beq.n	800c556 <netconn_prepare_delete+0x3a>
    return err;
 800c550:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c554:	e000      	b.n	800c558 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c556:	2300      	movs	r3, #0
}
 800c558:	4618      	mov	r0, r3
 800c55a:	3730      	adds	r7, #48	; 0x30
 800c55c:	46bd      	mov	sp, r7
 800c55e:	bd80      	pop	{r7, pc}
 800c560:	0800d9d9 	.word	0x0800d9d9

0800c564 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b084      	sub	sp, #16
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <netconn_delete+0x12>
    return ERR_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	e00d      	b.n	800c592 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c576:	6878      	ldr	r0, [r7, #4]
 800c578:	f7ff ffd0 	bl	800c51c <netconn_prepare_delete>
 800c57c:	4603      	mov	r3, r0
 800c57e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d102      	bne.n	800c58e <netconn_delete+0x2a>
    netconn_free(conn);
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 fff7 	bl	800d57c <netconn_free>
  }
  return err;
 800c58e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08e      	sub	sp, #56	; 0x38
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	60f8      	str	r0, [r7, #12]
 800c5a4:	60b9      	str	r1, [r7, #8]
 800c5a6:	607a      	str	r2, [r7, #4]
 800c5a8:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d109      	bne.n	800c5c4 <netconn_getaddr+0x28>
 800c5b0:	4b1d      	ldr	r3, [pc, #116]	; (800c628 <netconn_getaddr+0x8c>)
 800c5b2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c5b6:	491d      	ldr	r1, [pc, #116]	; (800c62c <netconn_getaddr+0x90>)
 800c5b8:	481d      	ldr	r0, [pc, #116]	; (800c630 <netconn_getaddr+0x94>)
 800c5ba:	f00f fb67 	bl	801bc8c <iprintf>
 800c5be:	f06f 030f 	mvn.w	r3, #15
 800c5c2:	e02d      	b.n	800c620 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d109      	bne.n	800c5de <netconn_getaddr+0x42>
 800c5ca:	4b17      	ldr	r3, [pc, #92]	; (800c628 <netconn_getaddr+0x8c>)
 800c5cc:	f240 1213 	movw	r2, #275	; 0x113
 800c5d0:	4918      	ldr	r1, [pc, #96]	; (800c634 <netconn_getaddr+0x98>)
 800c5d2:	4817      	ldr	r0, [pc, #92]	; (800c630 <netconn_getaddr+0x94>)
 800c5d4:	f00f fb5a 	bl	801bc8c <iprintf>
 800c5d8:	f06f 030f 	mvn.w	r3, #15
 800c5dc:	e020      	b.n	800c620 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d109      	bne.n	800c5f8 <netconn_getaddr+0x5c>
 800c5e4:	4b10      	ldr	r3, [pc, #64]	; (800c628 <netconn_getaddr+0x8c>)
 800c5e6:	f44f 728a 	mov.w	r2, #276	; 0x114
 800c5ea:	4913      	ldr	r1, [pc, #76]	; (800c638 <netconn_getaddr+0x9c>)
 800c5ec:	4810      	ldr	r0, [pc, #64]	; (800c630 <netconn_getaddr+0x94>)
 800c5ee:	f00f fb4d 	bl	801bc8c <iprintf>
 800c5f2:	f06f 030f 	mvn.w	r3, #15
 800c5f6:	e013      	b.n	800c620 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800c5fc:	78fb      	ldrb	r3, [r7, #3]
 800c5fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800c60a:	f107 0314 	add.w	r3, r7, #20
 800c60e:	4619      	mov	r1, r3
 800c610:	480a      	ldr	r0, [pc, #40]	; (800c63c <netconn_getaddr+0xa0>)
 800c612:	f7ff feeb 	bl	800c3ec <netconn_apimsg>
 800c616:	4603      	mov	r3, r0
 800c618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800c61c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c620:	4618      	mov	r0, r3
 800c622:	3738      	adds	r7, #56	; 0x38
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}
 800c628:	0801e260 	.word	0x0801e260
 800c62c:	0801e338 	.word	0x0801e338
 800c630:	0801e2b8 	.word	0x0801e2b8
 800c634:	0801e358 	.word	0x0801e358
 800c638:	0801e378 	.word	0x0801e378
 800c63c:	0800e1c9 	.word	0x0800e1c9

0800c640 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b08e      	sub	sp, #56	; 0x38
 800c644:	af00      	add	r7, sp, #0
 800c646:	60f8      	str	r0, [r7, #12]
 800c648:	60b9      	str	r1, [r7, #8]
 800c64a:	4613      	mov	r3, r2
 800c64c:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d109      	bne.n	800c668 <netconn_bind+0x28>
 800c654:	4b11      	ldr	r3, [pc, #68]	; (800c69c <netconn_bind+0x5c>)
 800c656:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c65a:	4911      	ldr	r1, [pc, #68]	; (800c6a0 <netconn_bind+0x60>)
 800c65c:	4811      	ldr	r0, [pc, #68]	; (800c6a4 <netconn_bind+0x64>)
 800c65e:	f00f fb15 	bl	801bc8c <iprintf>
 800c662:	f06f 030f 	mvn.w	r3, #15
 800c666:	e015      	b.n	800c694 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d101      	bne.n	800c672 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c66e:	4b0e      	ldr	r3, [pc, #56]	; (800c6a8 <netconn_bind+0x68>)
 800c670:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c676:	68bb      	ldr	r3, [r7, #8]
 800c678:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c67a:	88fb      	ldrh	r3, [r7, #6]
 800c67c:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c67e:	f107 0314 	add.w	r3, r7, #20
 800c682:	4619      	mov	r1, r3
 800c684:	4809      	ldr	r0, [pc, #36]	; (800c6ac <netconn_bind+0x6c>)
 800c686:	f7ff feb1 	bl	800c3ec <netconn_apimsg>
 800c68a:	4603      	mov	r3, r0
 800c68c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c690:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c694:	4618      	mov	r0, r3
 800c696:	3738      	adds	r7, #56	; 0x38
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}
 800c69c:	0801e260 	.word	0x0801e260
 800c6a0:	0801e398 	.word	0x0801e398
 800c6a4:	0801e2b8 	.word	0x0801e2b8
 800c6a8:	08021ce8 	.word	0x08021ce8
 800c6ac:	0800dba1 	.word	0x0800dba1

0800c6b0 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b088      	sub	sp, #32
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	4613      	mov	r3, r2
 800c6bc:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d109      	bne.n	800c6dc <netconn_recv_data+0x2c>
 800c6c8:	4b58      	ldr	r3, [pc, #352]	; (800c82c <netconn_recv_data+0x17c>)
 800c6ca:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c6ce:	4958      	ldr	r1, [pc, #352]	; (800c830 <netconn_recv_data+0x180>)
 800c6d0:	4858      	ldr	r0, [pc, #352]	; (800c834 <netconn_recv_data+0x184>)
 800c6d2:	f00f fadb 	bl	801bc8c <iprintf>
 800c6d6:	f06f 030f 	mvn.w	r3, #15
 800c6da:	e0a2      	b.n	800c822 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d109      	bne.n	800c6fc <netconn_recv_data+0x4c>
 800c6e8:	4b50      	ldr	r3, [pc, #320]	; (800c82c <netconn_recv_data+0x17c>)
 800c6ea:	f240 224a 	movw	r2, #586	; 0x24a
 800c6ee:	4952      	ldr	r1, [pc, #328]	; (800c838 <netconn_recv_data+0x188>)
 800c6f0:	4850      	ldr	r0, [pc, #320]	; (800c834 <netconn_recv_data+0x184>)
 800c6f2:	f00f facb 	bl	801bc8c <iprintf>
 800c6f6:	f06f 030f 	mvn.w	r3, #15
 800c6fa:	e092      	b.n	800c822 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	3310      	adds	r3, #16
 800c700:	4618      	mov	r0, r3
 800c702:	f00e fd00 	bl	801b106 <sys_mbox_valid>
 800c706:	4603      	mov	r3, r0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10e      	bne.n	800c72a <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c70c:	68f8      	ldr	r0, [r7, #12]
 800c70e:	f000 fb01 	bl	800cd14 <netconn_err>
 800c712:	4603      	mov	r3, r0
 800c714:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c716:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d002      	beq.n	800c724 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c71e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c722:	e07e      	b.n	800c822 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c724:	f06f 030a 	mvn.w	r3, #10
 800c728:	e07b      	b.n	800c822 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	7f1b      	ldrb	r3, [r3, #28]
 800c72e:	f003 0302 	and.w	r3, r3, #2
 800c732:	2b00      	cmp	r3, #0
 800c734:	d10f      	bne.n	800c756 <netconn_recv_data+0xa6>
 800c736:	79fb      	ldrb	r3, [r7, #7]
 800c738:	f003 0304 	and.w	r3, r3, #4
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d10a      	bne.n	800c756 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	7f1b      	ldrb	r3, [r3, #28]
 800c744:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d104      	bne.n	800c756 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d023      	beq.n	800c79e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	3310      	adds	r3, #16
 800c75a:	f107 0218 	add.w	r2, r7, #24
 800c75e:	4611      	mov	r1, r2
 800c760:	4618      	mov	r0, r3
 800c762:	f00e fcb4 	bl	801b0ce <sys_arch_mbox_tryfetch>
 800c766:	4603      	mov	r3, r0
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d11f      	bne.n	800c7ae <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c76e:	68f8      	ldr	r0, [r7, #12]
 800c770:	f000 fad0 	bl	800cd14 <netconn_err>
 800c774:	4603      	mov	r3, r0
 800c776:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c778:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d002      	beq.n	800c786 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c780:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c784:	e04d      	b.n	800c822 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	7f1b      	ldrb	r3, [r3, #28]
 800c78a:	f003 0301 	and.w	r3, r3, #1
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d002      	beq.n	800c798 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c792:	f06f 030a 	mvn.w	r3, #10
 800c796:	e044      	b.n	800c822 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c798:	f06f 0306 	mvn.w	r3, #6
 800c79c:	e041      	b.n	800c822 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	3310      	adds	r3, #16
 800c7a2:	f107 0118 	add.w	r1, r7, #24
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f00e fc51 	bl	801b050 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	781b      	ldrb	r3, [r3, #0]
 800c7b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c7b6:	2b10      	cmp	r3, #16
 800c7b8:	d117      	bne.n	800c7ea <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	f107 0217 	add.w	r2, r7, #23
 800c7c0:	4611      	mov	r1, r2
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f000 faf8 	bl	800cdb8 <lwip_netconn_is_err_msg>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d009      	beq.n	800c7e2 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c7ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7d2:	f113 0f0f 	cmn.w	r3, #15
 800c7d6:	d101      	bne.n	800c7dc <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e022      	b.n	800c822 <netconn_recv_data+0x172>
      }
      return err;
 800c7dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c7e0:	e01f      	b.n	800c822 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	891b      	ldrh	r3, [r3, #8]
 800c7e6:	83fb      	strh	r3, [r7, #30]
 800c7e8:	e00d      	b.n	800c806 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c7ea:	69bb      	ldr	r3, [r7, #24]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d106      	bne.n	800c7fe <netconn_recv_data+0x14e>
 800c7f0:	4b0e      	ldr	r3, [pc, #56]	; (800c82c <netconn_recv_data+0x17c>)
 800c7f2:	f240 2291 	movw	r2, #657	; 0x291
 800c7f6:	4911      	ldr	r1, [pc, #68]	; (800c83c <netconn_recv_data+0x18c>)
 800c7f8:	480e      	ldr	r0, [pc, #56]	; (800c834 <netconn_recv_data+0x184>)
 800c7fa:	f00f fa47 	bl	801bc8c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	891b      	ldrh	r3, [r3, #8]
 800c804:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d005      	beq.n	800c81a <netconn_recv_data+0x16a>
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c812:	8bfa      	ldrh	r2, [r7, #30]
 800c814:	2101      	movs	r1, #1
 800c816:	68f8      	ldr	r0, [r7, #12]
 800c818:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c81a:	69ba      	ldr	r2, [r7, #24]
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3720      	adds	r7, #32
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}
 800c82a:	bf00      	nop
 800c82c:	0801e260 	.word	0x0801e260
 800c830:	0801e478 	.word	0x0801e478
 800c834:	0801e2b8 	.word	0x0801e2b8
 800c838:	0801e498 	.word	0x0801e498
 800c83c:	0801e4b4 	.word	0x0801e4b4

0800c840 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	60b9      	str	r1, [r7, #8]
 800c84a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d005      	beq.n	800c85e <netconn_tcp_recvd_msg+0x1e>
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c85a:	2b10      	cmp	r3, #16
 800c85c:	d009      	beq.n	800c872 <netconn_tcp_recvd_msg+0x32>
 800c85e:	4b0c      	ldr	r3, [pc, #48]	; (800c890 <netconn_tcp_recvd_msg+0x50>)
 800c860:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c864:	490b      	ldr	r1, [pc, #44]	; (800c894 <netconn_tcp_recvd_msg+0x54>)
 800c866:	480c      	ldr	r0, [pc, #48]	; (800c898 <netconn_tcp_recvd_msg+0x58>)
 800c868:	f00f fa10 	bl	801bc8c <iprintf>
 800c86c:	f06f 030f 	mvn.w	r3, #15
 800c870:	e00a      	b.n	800c888 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	68fa      	ldr	r2, [r7, #12]
 800c876:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	68ba      	ldr	r2, [r7, #8]
 800c87c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c87e:	6879      	ldr	r1, [r7, #4]
 800c880:	4806      	ldr	r0, [pc, #24]	; (800c89c <netconn_tcp_recvd_msg+0x5c>)
 800c882:	f7ff fdb3 	bl	800c3ec <netconn_apimsg>
 800c886:	4603      	mov	r3, r0
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	0801e260 	.word	0x0801e260
 800c894:	0801e4c0 	.word	0x0801e4c0
 800c898:	0801e2b8 	.word	0x0801e2b8
 800c89c:	0800dcaf 	.word	0x0800dcaf

0800c8a0 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08c      	sub	sp, #48	; 0x30
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
 800c8a8:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d005      	beq.n	800c8bc <netconn_tcp_recvd+0x1c>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8b8:	2b10      	cmp	r3, #16
 800c8ba:	d009      	beq.n	800c8d0 <netconn_tcp_recvd+0x30>
 800c8bc:	4b0c      	ldr	r3, [pc, #48]	; (800c8f0 <netconn_tcp_recvd+0x50>)
 800c8be:	f240 22b5 	movw	r2, #693	; 0x2b5
 800c8c2:	490c      	ldr	r1, [pc, #48]	; (800c8f4 <netconn_tcp_recvd+0x54>)
 800c8c4:	480c      	ldr	r0, [pc, #48]	; (800c8f8 <netconn_tcp_recvd+0x58>)
 800c8c6:	f00f f9e1 	bl	801bc8c <iprintf>
 800c8ca:	f06f 030f 	mvn.w	r3, #15
 800c8ce:	e00b      	b.n	800c8e8 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800c8d0:	f107 030c 	add.w	r3, r7, #12
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	6839      	ldr	r1, [r7, #0]
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f7ff ffb1 	bl	800c840 <netconn_tcp_recvd_msg>
 800c8de:	4603      	mov	r3, r0
 800c8e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800c8e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3730      	adds	r7, #48	; 0x30
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	0801e260 	.word	0x0801e260
 800c8f4:	0801e4c0 	.word	0x0801e4c0
 800c8f8:	0801e2b8 	.word	0x0801e2b8

0800c8fc <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b090      	sub	sp, #64	; 0x40
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	4613      	mov	r3, r2
 800c908:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	3310      	adds	r3, #16
 800c90e:	4618      	mov	r0, r3
 800c910:	f00e fbf9 	bl	801b106 <sys_mbox_valid>
 800c914:	4603      	mov	r3, r0
 800c916:	2b00      	cmp	r3, #0
 800c918:	d102      	bne.n	800c920 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c91a:	f06f 030a 	mvn.w	r3, #10
 800c91e:	e06d      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	7f1b      	ldrb	r3, [r3, #28]
 800c924:	b25b      	sxtb	r3, r3
 800c926:	2b00      	cmp	r3, #0
 800c928:	da07      	bge.n	800c93a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	7f1b      	ldrb	r3, [r3, #28]
 800c92e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c932:	b2da      	uxtb	r2, r3
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c938:	e039      	b.n	800c9ae <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c93a:	79fb      	ldrb	r3, [r7, #7]
 800c93c:	461a      	mov	r2, r3
 800c93e:	68b9      	ldr	r1, [r7, #8]
 800c940:	68f8      	ldr	r0, [r7, #12]
 800c942:	f7ff feb5 	bl	800c6b0 <netconn_recv_data>
 800c946:	4603      	mov	r3, r0
 800c948:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c94c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c950:	2b00      	cmp	r3, #0
 800c952:	d002      	beq.n	800c95a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c958:	e050      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c95a:	68bb      	ldr	r3, [r7, #8]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c960:	79fb      	ldrb	r3, [r7, #7]
 800c962:	f003 0308 	and.w	r3, r3, #8
 800c966:	2b00      	cmp	r3, #0
 800c968:	d10e      	bne.n	800c988 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <netconn_recv_data_tcp+0x7a>
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	891b      	ldrh	r3, [r3, #8]
 800c974:	e000      	b.n	800c978 <netconn_recv_data_tcp+0x7c>
 800c976:	2301      	movs	r3, #1
 800c978:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c97a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c97c:	f107 0214 	add.w	r2, r7, #20
 800c980:	4619      	mov	r1, r3
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff ff5c 	bl	800c840 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800c988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d134      	bne.n	800c9f8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800c98e:	79fb      	ldrb	r3, [r7, #7]
 800c990:	f003 0310 	and.w	r3, r3, #16
 800c994:	2b00      	cmp	r3, #0
 800c996:	d009      	beq.n	800c9ac <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	7f1b      	ldrb	r3, [r3, #28]
 800c99c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9a0:	b2da      	uxtb	r2, r3
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800c9a6:	f06f 0306 	mvn.w	r3, #6
 800c9aa:	e027      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800c9ac:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d005      	beq.n	800c9c2 <netconn_recv_data_tcp+0xc6>
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	2101      	movs	r1, #1
 800c9be:	68f8      	ldr	r0, [r7, #12]
 800c9c0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d10f      	bne.n	800c9ea <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	f000 f9a2 	bl	800cd14 <netconn_err>
 800c9d0:	4603      	mov	r3, r0
 800c9d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800c9d6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d002      	beq.n	800c9e4 <netconn_recv_data_tcp+0xe8>
          return err;
 800c9de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9e2:	e00b      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800c9e4:	f06f 030d 	mvn.w	r3, #13
 800c9e8:	e008      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800c9ea:	2101      	movs	r1, #1
 800c9ec:	68f8      	ldr	r0, [r7, #12]
 800c9ee:	f000 f961 	bl	800ccb4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800c9f2:	f06f 030e 	mvn.w	r3, #14
 800c9f6:	e001      	b.n	800c9fc <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800c9f8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3740      	adds	r7, #64	; 0x40
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	4613      	mov	r3, r2
 800ca10:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d005      	beq.n	800ca24 <netconn_recv_tcp_pbuf_flags+0x20>
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca20:	2b10      	cmp	r3, #16
 800ca22:	d009      	beq.n	800ca38 <netconn_recv_tcp_pbuf_flags+0x34>
 800ca24:	4b0a      	ldr	r3, [pc, #40]	; (800ca50 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800ca26:	f240 3225 	movw	r2, #805	; 0x325
 800ca2a:	490a      	ldr	r1, [pc, #40]	; (800ca54 <netconn_recv_tcp_pbuf_flags+0x50>)
 800ca2c:	480a      	ldr	r0, [pc, #40]	; (800ca58 <netconn_recv_tcp_pbuf_flags+0x54>)
 800ca2e:	f00f f92d 	bl	801bc8c <iprintf>
 800ca32:	f06f 030f 	mvn.w	r3, #15
 800ca36:	e006      	b.n	800ca46 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800ca38:	79fb      	ldrb	r3, [r7, #7]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	68b9      	ldr	r1, [r7, #8]
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f7ff ff5c 	bl	800c8fc <netconn_recv_data_tcp>
 800ca44:	4603      	mov	r3, r0
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	0801e260 	.word	0x0801e260
 800ca54:	0801e4c0 	.word	0x0801e4c0
 800ca58:	0801e2b8 	.word	0x0801e2b8

0800ca5c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b084      	sub	sp, #16
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	4613      	mov	r3, r2
 800ca68:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d005      	beq.n	800ca7c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	781b      	ldrb	r3, [r3, #0]
 800ca74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca78:	2b10      	cmp	r3, #16
 800ca7a:	d109      	bne.n	800ca90 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800ca7c:	4b0a      	ldr	r3, [pc, #40]	; (800caa8 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800ca7e:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800ca82:	490a      	ldr	r1, [pc, #40]	; (800caac <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800ca84:	480a      	ldr	r0, [pc, #40]	; (800cab0 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800ca86:	f00f f901 	bl	801bc8c <iprintf>
 800ca8a:	f06f 030f 	mvn.w	r3, #15
 800ca8e:	e006      	b.n	800ca9e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800ca90:	79fb      	ldrb	r3, [r7, #7]
 800ca92:	461a      	mov	r2, r3
 800ca94:	68b9      	ldr	r1, [r7, #8]
 800ca96:	68f8      	ldr	r0, [r7, #12]
 800ca98:	f7ff fe0a 	bl	800c6b0 <netconn_recv_data>
 800ca9c:	4603      	mov	r3, r0
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3710      	adds	r7, #16
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}
 800caa6:	bf00      	nop
 800caa8:	0801e260 	.word	0x0801e260
 800caac:	0801e4e4 	.word	0x0801e4e4
 800cab0:	0801e2b8 	.word	0x0801e2b8

0800cab4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08c      	sub	sp, #48	; 0x30
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
 800cabc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d109      	bne.n	800cad8 <netconn_send+0x24>
 800cac4:	4b0e      	ldr	r3, [pc, #56]	; (800cb00 <netconn_send+0x4c>)
 800cac6:	f240 32b2 	movw	r2, #946	; 0x3b2
 800caca:	490e      	ldr	r1, [pc, #56]	; (800cb04 <netconn_send+0x50>)
 800cacc:	480e      	ldr	r0, [pc, #56]	; (800cb08 <netconn_send+0x54>)
 800cace:	f00f f8dd 	bl	801bc8c <iprintf>
 800cad2:	f06f 030f 	mvn.w	r3, #15
 800cad6:	e00e      	b.n	800caf6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800cae0:	f107 030c 	add.w	r3, r7, #12
 800cae4:	4619      	mov	r1, r3
 800cae6:	4809      	ldr	r0, [pc, #36]	; (800cb0c <netconn_send+0x58>)
 800cae8:	f7ff fc80 	bl	800c3ec <netconn_apimsg>
 800caec:	4603      	mov	r3, r0
 800caee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800caf2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3730      	adds	r7, #48	; 0x30
 800cafa:	46bd      	mov	sp, r7
 800cafc:	bd80      	pop	{r7, pc}
 800cafe:	bf00      	nop
 800cb00:	0801e260 	.word	0x0801e260
 800cb04:	0801e51c 	.word	0x0801e51c
 800cb08:	0801e2b8 	.word	0x0801e2b8
 800cb0c:	0800dc15 	.word	0x0800dc15

0800cb10 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b088      	sub	sp, #32
 800cb14:	af02      	add	r7, sp, #8
 800cb16:	60f8      	str	r0, [r7, #12]
 800cb18:	60b9      	str	r1, [r7, #8]
 800cb1a:	607a      	str	r2, [r7, #4]
 800cb1c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800cb1e:	68bb      	ldr	r3, [r7, #8]
 800cb20:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800cb26:	78fa      	ldrb	r2, [r7, #3]
 800cb28:	f107 0110 	add.w	r1, r7, #16
 800cb2c:	6a3b      	ldr	r3, [r7, #32]
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	4613      	mov	r3, r2
 800cb32:	2201      	movs	r2, #1
 800cb34:	68f8      	ldr	r0, [r7, #12]
 800cb36:	f000 f805 	bl	800cb44 <netconn_write_vectors_partly>
 800cb3a:	4603      	mov	r3, r0
}
 800cb3c:	4618      	mov	r0, r3
 800cb3e:	3718      	adds	r7, #24
 800cb40:	46bd      	mov	sp, r7
 800cb42:	bd80      	pop	{r7, pc}

0800cb44 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b092      	sub	sp, #72	; 0x48
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4611      	mov	r1, r2
 800cb50:	461a      	mov	r2, r3
 800cb52:	460b      	mov	r3, r1
 800cb54:	80fb      	strh	r3, [r7, #6]
 800cb56:	4613      	mov	r3, r2
 800cb58:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d109      	bne.n	800cb74 <netconn_write_vectors_partly+0x30>
 800cb60:	4b4e      	ldr	r3, [pc, #312]	; (800cc9c <netconn_write_vectors_partly+0x158>)
 800cb62:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cb66:	494e      	ldr	r1, [pc, #312]	; (800cca0 <netconn_write_vectors_partly+0x15c>)
 800cb68:	484e      	ldr	r0, [pc, #312]	; (800cca4 <netconn_write_vectors_partly+0x160>)
 800cb6a:	f00f f88f 	bl	801bc8c <iprintf>
 800cb6e:	f06f 030f 	mvn.w	r3, #15
 800cb72:	e08e      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	781b      	ldrb	r3, [r3, #0]
 800cb78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb7c:	2b10      	cmp	r3, #16
 800cb7e:	d009      	beq.n	800cb94 <netconn_write_vectors_partly+0x50>
 800cb80:	4b46      	ldr	r3, [pc, #280]	; (800cc9c <netconn_write_vectors_partly+0x158>)
 800cb82:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cb86:	4948      	ldr	r1, [pc, #288]	; (800cca8 <netconn_write_vectors_partly+0x164>)
 800cb88:	4846      	ldr	r0, [pc, #280]	; (800cca4 <netconn_write_vectors_partly+0x160>)
 800cb8a:	f00f f87f 	bl	801bc8c <iprintf>
 800cb8e:	f06f 0305 	mvn.w	r3, #5
 800cb92:	e07e      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	7f1b      	ldrb	r3, [r3, #28]
 800cb98:	f003 0302 	and.w	r3, r3, #2
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d104      	bne.n	800cbaa <netconn_write_vectors_partly+0x66>
 800cba0:	797b      	ldrb	r3, [r7, #5]
 800cba2:	f003 0304 	and.w	r3, r3, #4
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d001      	beq.n	800cbae <netconn_write_vectors_partly+0x6a>
 800cbaa:	2301      	movs	r3, #1
 800cbac:	e000      	b.n	800cbb0 <netconn_write_vectors_partly+0x6c>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800cbb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d005      	beq.n	800cbc8 <netconn_write_vectors_partly+0x84>
 800cbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d102      	bne.n	800cbc8 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800cbc2:	f06f 0305 	mvn.w	r3, #5
 800cbc6:	e064      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800cbcc:	2300      	movs	r3, #0
 800cbce:	643b      	str	r3, [r7, #64]	; 0x40
 800cbd0:	e015      	b.n	800cbfe <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800cbd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbd4:	00db      	lsls	r3, r3, #3
 800cbd6:	68ba      	ldr	r2, [r7, #8]
 800cbd8:	4413      	add	r3, r2
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbde:	4413      	add	r3, r2
 800cbe0:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800cbe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	68ba      	ldr	r2, [r7, #8]
 800cbe8:	4413      	add	r3, r2
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d202      	bcs.n	800cbf8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800cbf2:	f06f 0305 	mvn.w	r3, #5
 800cbf6:	e04c      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800cbf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	643b      	str	r3, [r7, #64]	; 0x40
 800cbfe:	88fb      	ldrh	r3, [r7, #6]
 800cc00:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc02:	429a      	cmp	r2, r3
 800cc04:	dbe5      	blt.n	800cbd2 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800cc06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d101      	bne.n	800cc10 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	e040      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800cc10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	da0a      	bge.n	800cc2c <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800cc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d102      	bne.n	800cc22 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800cc1c:	f06f 0305 	mvn.w	r3, #5
 800cc20:	e037      	b.n	800cc92 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800cc22:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cc26:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800cc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2a:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800cc30:	68bb      	ldr	r3, [r7, #8]
 800cc32:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800cc34:	88fb      	ldrh	r3, [r7, #6]
 800cc36:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800cc3c:	797b      	ldrb	r3, [r7, #5]
 800cc3e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800cc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc44:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800cc46:	2300      	movs	r3, #0
 800cc48:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800cc4a:	f107 0314 	add.w	r3, r7, #20
 800cc4e:	4619      	mov	r1, r3
 800cc50:	4816      	ldr	r0, [pc, #88]	; (800ccac <netconn_write_vectors_partly+0x168>)
 800cc52:	f7ff fbcb 	bl	800c3ec <netconn_apimsg>
 800cc56:	4603      	mov	r3, r0
 800cc58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800cc5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d114      	bne.n	800cc8e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800cc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800cc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc6e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800cc70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d10a      	bne.n	800cc8e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc7c:	429a      	cmp	r2, r3
 800cc7e:	d006      	beq.n	800cc8e <netconn_write_vectors_partly+0x14a>
 800cc80:	4b06      	ldr	r3, [pc, #24]	; (800cc9c <netconn_write_vectors_partly+0x158>)
 800cc82:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cc86:	490a      	ldr	r1, [pc, #40]	; (800ccb0 <netconn_write_vectors_partly+0x16c>)
 800cc88:	4806      	ldr	r0, [pc, #24]	; (800cca4 <netconn_write_vectors_partly+0x160>)
 800cc8a:	f00e ffff 	bl	801bc8c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800cc8e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3748      	adds	r7, #72	; 0x48
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	0801e260 	.word	0x0801e260
 800cca0:	0801e538 	.word	0x0801e538
 800cca4:	0801e2b8 	.word	0x0801e2b8
 800cca8:	0801e554 	.word	0x0801e554
 800ccac:	0800e0b1 	.word	0x0800e0b1
 800ccb0:	0801e578 	.word	0x0801e578

0800ccb4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b08c      	sub	sp, #48	; 0x30
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
 800ccbc:	460b      	mov	r3, r1
 800ccbe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d109      	bne.n	800ccda <netconn_close_shutdown+0x26>
 800ccc6:	4b0f      	ldr	r3, [pc, #60]	; (800cd04 <netconn_close_shutdown+0x50>)
 800ccc8:	f240 4247 	movw	r2, #1095	; 0x447
 800cccc:	490e      	ldr	r1, [pc, #56]	; (800cd08 <netconn_close_shutdown+0x54>)
 800ccce:	480f      	ldr	r0, [pc, #60]	; (800cd0c <netconn_close_shutdown+0x58>)
 800ccd0:	f00e ffdc 	bl	801bc8c <iprintf>
 800ccd4:	f06f 030f 	mvn.w	r3, #15
 800ccd8:	e010      	b.n	800ccfc <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800ccde:	78fb      	ldrb	r3, [r7, #3]
 800cce0:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cce2:	2329      	movs	r3, #41	; 0x29
 800cce4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800cce6:	f107 030c 	add.w	r3, r7, #12
 800ccea:	4619      	mov	r1, r3
 800ccec:	4808      	ldr	r0, [pc, #32]	; (800cd10 <netconn_close_shutdown+0x5c>)
 800ccee:	f7ff fb7d 	bl	800c3ec <netconn_apimsg>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ccf8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3730      	adds	r7, #48	; 0x30
 800cd00:	46bd      	mov	sp, r7
 800cd02:	bd80      	pop	{r7, pc}
 800cd04:	0801e260 	.word	0x0801e260
 800cd08:	0801e59c 	.word	0x0801e59c
 800cd0c:	0801e2b8 	.word	0x0801e2b8
 800cd10:	0800e2d5 	.word	0x0800e2d5

0800cd14 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <netconn_err+0x12>
    return ERR_OK;
 800cd22:	2300      	movs	r3, #0
 800cd24:	e00d      	b.n	800cd42 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cd26:	f00e fb09 	bl	801b33c <sys_arch_protect>
 800cd2a:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	7a1b      	ldrb	r3, [r3, #8]
 800cd30:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	2200      	movs	r2, #0
 800cd36:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f00e fb0d 	bl	801b358 <sys_arch_unprotect>
  return err;
 800cd3e:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}
	...

0800cd4c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	4603      	mov	r3, r0
 800cd54:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cd56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd5a:	f113 0f0d 	cmn.w	r3, #13
 800cd5e:	d009      	beq.n	800cd74 <lwip_netconn_err_to_msg+0x28>
 800cd60:	f113 0f0d 	cmn.w	r3, #13
 800cd64:	dc0c      	bgt.n	800cd80 <lwip_netconn_err_to_msg+0x34>
 800cd66:	f113 0f0f 	cmn.w	r3, #15
 800cd6a:	d007      	beq.n	800cd7c <lwip_netconn_err_to_msg+0x30>
 800cd6c:	f113 0f0e 	cmn.w	r3, #14
 800cd70:	d002      	beq.n	800cd78 <lwip_netconn_err_to_msg+0x2c>
 800cd72:	e005      	b.n	800cd80 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cd74:	4b0a      	ldr	r3, [pc, #40]	; (800cda0 <lwip_netconn_err_to_msg+0x54>)
 800cd76:	e00e      	b.n	800cd96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cd78:	4b0a      	ldr	r3, [pc, #40]	; (800cda4 <lwip_netconn_err_to_msg+0x58>)
 800cd7a:	e00c      	b.n	800cd96 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <lwip_netconn_err_to_msg+0x5c>)
 800cd7e:	e00a      	b.n	800cd96 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800cd80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d005      	beq.n	800cd94 <lwip_netconn_err_to_msg+0x48>
 800cd88:	4b08      	ldr	r3, [pc, #32]	; (800cdac <lwip_netconn_err_to_msg+0x60>)
 800cd8a:	227d      	movs	r2, #125	; 0x7d
 800cd8c:	4908      	ldr	r1, [pc, #32]	; (800cdb0 <lwip_netconn_err_to_msg+0x64>)
 800cd8e:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <lwip_netconn_err_to_msg+0x68>)
 800cd90:	f00e ff7c 	bl	801bc8c <iprintf>
      return NULL;
 800cd94:	2300      	movs	r3, #0
  }
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3708      	adds	r7, #8
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	08021b90 	.word	0x08021b90
 800cda4:	08021b91 	.word	0x08021b91
 800cda8:	08021b92 	.word	0x08021b92
 800cdac:	0801e5b8 	.word	0x0801e5b8
 800cdb0:	0801e5ec 	.word	0x0801e5ec
 800cdb4:	0801e5fc 	.word	0x0801e5fc

0800cdb8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
 800cdc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800cdc2:	683b      	ldr	r3, [r7, #0]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d105      	bne.n	800cdd4 <lwip_netconn_is_err_msg+0x1c>
 800cdc8:	4b12      	ldr	r3, [pc, #72]	; (800ce14 <lwip_netconn_is_err_msg+0x5c>)
 800cdca:	2285      	movs	r2, #133	; 0x85
 800cdcc:	4912      	ldr	r1, [pc, #72]	; (800ce18 <lwip_netconn_is_err_msg+0x60>)
 800cdce:	4813      	ldr	r0, [pc, #76]	; (800ce1c <lwip_netconn_is_err_msg+0x64>)
 800cdd0:	f00e ff5c 	bl	801bc8c <iprintf>

  if (msg == &netconn_aborted) {
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	4a12      	ldr	r2, [pc, #72]	; (800ce20 <lwip_netconn_is_err_msg+0x68>)
 800cdd8:	4293      	cmp	r3, r2
 800cdda:	d104      	bne.n	800cde6 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	22f3      	movs	r2, #243	; 0xf3
 800cde0:	701a      	strb	r2, [r3, #0]
    return 1;
 800cde2:	2301      	movs	r3, #1
 800cde4:	e012      	b.n	800ce0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	4a0e      	ldr	r2, [pc, #56]	; (800ce24 <lwip_netconn_is_err_msg+0x6c>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d104      	bne.n	800cdf8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	22f2      	movs	r2, #242	; 0xf2
 800cdf2:	701a      	strb	r2, [r3, #0]
    return 1;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	e009      	b.n	800ce0c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	4a0b      	ldr	r2, [pc, #44]	; (800ce28 <lwip_netconn_is_err_msg+0x70>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d104      	bne.n	800ce0a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	22f1      	movs	r2, #241	; 0xf1
 800ce04:	701a      	strb	r2, [r3, #0]
    return 1;
 800ce06:	2301      	movs	r3, #1
 800ce08:	e000      	b.n	800ce0c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ce0a:	2300      	movs	r3, #0
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3708      	adds	r7, #8
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}
 800ce14:	0801e5b8 	.word	0x0801e5b8
 800ce18:	0801e624 	.word	0x0801e624
 800ce1c:	0801e5fc 	.word	0x0801e5fc
 800ce20:	08021b90 	.word	0x08021b90
 800ce24:	08021b91 	.word	0x08021b91
 800ce28:	08021b92 	.word	0x08021b92

0800ce2c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b088      	sub	sp, #32
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	607a      	str	r2, [r7, #4]
 800ce38:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d105      	bne.n	800ce4c <recv_udp+0x20>
 800ce40:	4b34      	ldr	r3, [pc, #208]	; (800cf14 <recv_udp+0xe8>)
 800ce42:	22e5      	movs	r2, #229	; 0xe5
 800ce44:	4934      	ldr	r1, [pc, #208]	; (800cf18 <recv_udp+0xec>)
 800ce46:	4835      	ldr	r0, [pc, #212]	; (800cf1c <recv_udp+0xf0>)
 800ce48:	f00e ff20 	bl	801bc8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d105      	bne.n	800ce5e <recv_udp+0x32>
 800ce52:	4b30      	ldr	r3, [pc, #192]	; (800cf14 <recv_udp+0xe8>)
 800ce54:	22e6      	movs	r2, #230	; 0xe6
 800ce56:	4932      	ldr	r1, [pc, #200]	; (800cf20 <recv_udp+0xf4>)
 800ce58:	4830      	ldr	r0, [pc, #192]	; (800cf1c <recv_udp+0xf0>)
 800ce5a:	f00e ff17 	bl	801bc8c <iprintf>
  conn = (struct netconn *)arg;
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ce62:	69fb      	ldr	r3, [r7, #28]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d103      	bne.n	800ce70 <recv_udp+0x44>
    pbuf_free(p);
 800ce68:	6878      	ldr	r0, [r7, #4]
 800ce6a:	f004 fbdf 	bl	801162c <pbuf_free>
    return;
 800ce6e:	e04d      	b.n	800cf0c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800ce70:	69fb      	ldr	r3, [r7, #28]
 800ce72:	685b      	ldr	r3, [r3, #4]
 800ce74:	68ba      	ldr	r2, [r7, #8]
 800ce76:	429a      	cmp	r2, r3
 800ce78:	d005      	beq.n	800ce86 <recv_udp+0x5a>
 800ce7a:	4b26      	ldr	r3, [pc, #152]	; (800cf14 <recv_udp+0xe8>)
 800ce7c:	22ee      	movs	r2, #238	; 0xee
 800ce7e:	4929      	ldr	r1, [pc, #164]	; (800cf24 <recv_udp+0xf8>)
 800ce80:	4826      	ldr	r0, [pc, #152]	; (800cf1c <recv_udp+0xf0>)
 800ce82:	f00e ff03 	bl	801bc8c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800ce86:	69fb      	ldr	r3, [r7, #28]
 800ce88:	3310      	adds	r3, #16
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f00e f93b 	bl	801b106 <sys_mbox_valid>
 800ce90:	4603      	mov	r3, r0
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d103      	bne.n	800ce9e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f004 fbc8 	bl	801162c <pbuf_free>
    return;
 800ce9c:	e036      	b.n	800cf0c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ce9e:	2006      	movs	r0, #6
 800cea0:	f003 fc9c 	bl	80107dc <memp_malloc>
 800cea4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d103      	bne.n	800ceb4 <recv_udp+0x88>
    pbuf_free(p);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f004 fbbd 	bl	801162c <pbuf_free>
    return;
 800ceb2:	e02b      	b.n	800cf0c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ceba:	69bb      	ldr	r3, [r7, #24]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cec0:	683b      	ldr	r3, [r7, #0]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d002      	beq.n	800cecc <recv_udp+0xa0>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	e000      	b.n	800cece <recv_udp+0xa2>
 800cecc:	2300      	movs	r3, #0
 800cece:	69ba      	ldr	r2, [r7, #24]
 800ced0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ced2:	69bb      	ldr	r3, [r7, #24]
 800ced4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ced6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	891b      	ldrh	r3, [r3, #8]
 800cedc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cede:	69fb      	ldr	r3, [r7, #28]
 800cee0:	3310      	adds	r3, #16
 800cee2:	69b9      	ldr	r1, [r7, #24]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f00e f899 	bl	801b01c <sys_mbox_trypost>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cef0:	69b8      	ldr	r0, [r7, #24]
 800cef2:	f001 fa99 	bl	800e428 <netbuf_delete>
    return;
 800cef6:	e009      	b.n	800cf0c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cef8:	69fb      	ldr	r3, [r7, #28]
 800cefa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d005      	beq.n	800cf0c <recv_udp+0xe0>
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf04:	8afa      	ldrh	r2, [r7, #22]
 800cf06:	2100      	movs	r1, #0
 800cf08:	69f8      	ldr	r0, [r7, #28]
 800cf0a:	4798      	blx	r3
  }
}
 800cf0c:	3720      	adds	r7, #32
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	0801e5b8 	.word	0x0801e5b8
 800cf18:	0801e630 	.word	0x0801e630
 800cf1c:	0801e5fc 	.word	0x0801e5fc
 800cf20:	0801e654 	.word	0x0801e654
 800cf24:	0801e674 	.word	0x0801e674

0800cf28 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b088      	sub	sp, #32
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	607a      	str	r2, [r7, #4]
 800cf34:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d106      	bne.n	800cf4a <recv_tcp+0x22>
 800cf3c:	4b36      	ldr	r3, [pc, #216]	; (800d018 <recv_tcp+0xf0>)
 800cf3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cf42:	4936      	ldr	r1, [pc, #216]	; (800d01c <recv_tcp+0xf4>)
 800cf44:	4836      	ldr	r0, [pc, #216]	; (800d020 <recv_tcp+0xf8>)
 800cf46:	f00e fea1 	bl	801bc8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d106      	bne.n	800cf5e <recv_tcp+0x36>
 800cf50:	4b31      	ldr	r3, [pc, #196]	; (800d018 <recv_tcp+0xf0>)
 800cf52:	f240 122d 	movw	r2, #301	; 0x12d
 800cf56:	4933      	ldr	r1, [pc, #204]	; (800d024 <recv_tcp+0xfc>)
 800cf58:	4831      	ldr	r0, [pc, #196]	; (800d020 <recv_tcp+0xf8>)
 800cf5a:	f00e fe97 	bl	801bc8c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cf5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d006      	beq.n	800cf74 <recv_tcp+0x4c>
 800cf66:	4b2c      	ldr	r3, [pc, #176]	; (800d018 <recv_tcp+0xf0>)
 800cf68:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cf6c:	492e      	ldr	r1, [pc, #184]	; (800d028 <recv_tcp+0x100>)
 800cf6e:	482c      	ldr	r0, [pc, #176]	; (800d020 <recv_tcp+0xf8>)
 800cf70:	f00e fe8c 	bl	801bc8c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cf78:	697b      	ldr	r3, [r7, #20]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d102      	bne.n	800cf84 <recv_tcp+0x5c>
    return ERR_VAL;
 800cf7e:	f06f 0305 	mvn.w	r3, #5
 800cf82:	e045      	b.n	800d010 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	685b      	ldr	r3, [r3, #4]
 800cf88:	68ba      	ldr	r2, [r7, #8]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d006      	beq.n	800cf9c <recv_tcp+0x74>
 800cf8e:	4b22      	ldr	r3, [pc, #136]	; (800d018 <recv_tcp+0xf0>)
 800cf90:	f240 1235 	movw	r2, #309	; 0x135
 800cf94:	4925      	ldr	r1, [pc, #148]	; (800d02c <recv_tcp+0x104>)
 800cf96:	4822      	ldr	r0, [pc, #136]	; (800d020 <recv_tcp+0xf8>)
 800cf98:	f00e fe78 	bl	801bc8c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cf9c:	697b      	ldr	r3, [r7, #20]
 800cf9e:	3310      	adds	r3, #16
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f00e f8b0 	bl	801b106 <sys_mbox_valid>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10d      	bne.n	800cfc8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d008      	beq.n	800cfc4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	891b      	ldrh	r3, [r3, #8]
 800cfb6:	4619      	mov	r1, r3
 800cfb8:	68b8      	ldr	r0, [r7, #8]
 800cfba:	f005 fa35 	bl	8012428 <tcp_recved>
      pbuf_free(p);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f004 fb34 	bl	801162c <pbuf_free>
    }
    return ERR_OK;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	e023      	b.n	800d010 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d005      	beq.n	800cfda <recv_tcp+0xb2>
    msg = p;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	891b      	ldrh	r3, [r3, #8]
 800cfd6:	83fb      	strh	r3, [r7, #30]
 800cfd8:	e003      	b.n	800cfe2 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800cfda:	4b15      	ldr	r3, [pc, #84]	; (800d030 <recv_tcp+0x108>)
 800cfdc:	61bb      	str	r3, [r7, #24]
    len = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	3310      	adds	r3, #16
 800cfe6:	69b9      	ldr	r1, [r7, #24]
 800cfe8:	4618      	mov	r0, r3
 800cfea:	f00e f817 	bl	801b01c <sys_mbox_trypost>
 800cfee:	4603      	mov	r3, r0
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d002      	beq.n	800cffa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800cff4:	f04f 33ff 	mov.w	r3, #4294967295
 800cff8:	e00a      	b.n	800d010 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cffa:	697b      	ldr	r3, [r7, #20]
 800cffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d005      	beq.n	800d00e <recv_tcp+0xe6>
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d006:	8bfa      	ldrh	r2, [r7, #30]
 800d008:	2100      	movs	r1, #0
 800d00a:	6978      	ldr	r0, [r7, #20]
 800d00c:	4798      	blx	r3
  }

  return ERR_OK;
 800d00e:	2300      	movs	r3, #0
}
 800d010:	4618      	mov	r0, r3
 800d012:	3720      	adds	r7, #32
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	0801e5b8 	.word	0x0801e5b8
 800d01c:	0801e694 	.word	0x0801e694
 800d020:	0801e5fc 	.word	0x0801e5fc
 800d024:	0801e6b8 	.word	0x0801e6b8
 800d028:	0801e6d8 	.word	0x0801e6d8
 800d02c:	0801e6f0 	.word	0x0801e6f0
 800d030:	08021b92 	.word	0x08021b92

0800d034 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b084      	sub	sp, #16
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d106      	bne.n	800d056 <poll_tcp+0x22>
 800d048:	4b29      	ldr	r3, [pc, #164]	; (800d0f0 <poll_tcp+0xbc>)
 800d04a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d04e:	4929      	ldr	r1, [pc, #164]	; (800d0f4 <poll_tcp+0xc0>)
 800d050:	4829      	ldr	r0, [pc, #164]	; (800d0f8 <poll_tcp+0xc4>)
 800d052:	f00e fe1b 	bl	801bc8c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	785b      	ldrb	r3, [r3, #1]
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d104      	bne.n	800d068 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d05e:	2101      	movs	r1, #1
 800d060:	68f8      	ldr	r0, [r7, #12]
 800d062:	f000 fe59 	bl	800dd18 <lwip_netconn_do_writemore>
 800d066:	e016      	b.n	800d096 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	785b      	ldrb	r3, [r3, #1]
 800d06c:	2b04      	cmp	r3, #4
 800d06e:	d112      	bne.n	800d096 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6a1b      	ldr	r3, [r3, #32]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d00a      	beq.n	800d08e <poll_tcp+0x5a>
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6a1b      	ldr	r3, [r3, #32]
 800d07c:	7a5b      	ldrb	r3, [r3, #9]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d005      	beq.n	800d08e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6a1b      	ldr	r3, [r3, #32]
 800d086:	7a5a      	ldrb	r2, [r3, #9]
 800d088:	3a01      	subs	r2, #1
 800d08a:	b2d2      	uxtb	r2, r2
 800d08c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d08e:	2101      	movs	r1, #1
 800d090:	68f8      	ldr	r0, [r7, #12]
 800d092:	f000 fb3b 	bl	800d70c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	7f1b      	ldrb	r3, [r3, #28]
 800d09a:	f003 0310 	and.w	r3, r3, #16
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d021      	beq.n	800d0e6 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	685b      	ldr	r3, [r3, #4]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d01d      	beq.n	800d0e6 <poll_tcp+0xb2>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d0b2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d0b6:	d316      	bcc.n	800d0e6 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	685b      	ldr	r3, [r3, #4]
 800d0bc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d0c0:	2b04      	cmp	r3, #4
 800d0c2:	d810      	bhi.n	800d0e6 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	7f1b      	ldrb	r3, [r3, #28]
 800d0c8:	f023 0310 	bic.w	r3, r3, #16
 800d0cc:	b2da      	uxtb	r2, r3
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d005      	beq.n	800d0e6 <poll_tcp+0xb2>
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0de:	2200      	movs	r2, #0
 800d0e0:	2102      	movs	r1, #2
 800d0e2:	68f8      	ldr	r0, [r7, #12]
 800d0e4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d0e6:	2300      	movs	r3, #0
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3710      	adds	r7, #16
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}
 800d0f0:	0801e5b8 	.word	0x0801e5b8
 800d0f4:	0801e710 	.word	0x0801e710
 800d0f8:	0801e5fc 	.word	0x0801e5fc

0800d0fc <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b086      	sub	sp, #24
 800d100:	af00      	add	r7, sp, #0
 800d102:	60f8      	str	r0, [r7, #12]
 800d104:	60b9      	str	r1, [r7, #8]
 800d106:	4613      	mov	r3, r2
 800d108:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <sent_tcp+0x26>
 800d114:	4b20      	ldr	r3, [pc, #128]	; (800d198 <sent_tcp+0x9c>)
 800d116:	f240 1293 	movw	r2, #403	; 0x193
 800d11a:	4920      	ldr	r1, [pc, #128]	; (800d19c <sent_tcp+0xa0>)
 800d11c:	4820      	ldr	r0, [pc, #128]	; (800d1a0 <sent_tcp+0xa4>)
 800d11e:	f00e fdb5 	bl	801bc8c <iprintf>

  if (conn) {
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d032      	beq.n	800d18e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d128:	697b      	ldr	r3, [r7, #20]
 800d12a:	785b      	ldrb	r3, [r3, #1]
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d104      	bne.n	800d13a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d130:	2101      	movs	r1, #1
 800d132:	6978      	ldr	r0, [r7, #20]
 800d134:	f000 fdf0 	bl	800dd18 <lwip_netconn_do_writemore>
 800d138:	e007      	b.n	800d14a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d13a:	697b      	ldr	r3, [r7, #20]
 800d13c:	785b      	ldrb	r3, [r3, #1]
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d103      	bne.n	800d14a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d142:	2101      	movs	r1, #1
 800d144:	6978      	ldr	r0, [r7, #20]
 800d146:	f000 fae1 	bl	800d70c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	685b      	ldr	r3, [r3, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d01d      	beq.n	800d18e <sent_tcp+0x92>
 800d152:	697b      	ldr	r3, [r7, #20]
 800d154:	685b      	ldr	r3, [r3, #4]
 800d156:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d15a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d15e:	d316      	bcc.n	800d18e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d168:	2b04      	cmp	r3, #4
 800d16a:	d810      	bhi.n	800d18e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	7f1b      	ldrb	r3, [r3, #28]
 800d170:	f023 0310 	bic.w	r3, r3, #16
 800d174:	b2da      	uxtb	r2, r3
 800d176:	697b      	ldr	r3, [r7, #20]
 800d178:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d17a:	697b      	ldr	r3, [r7, #20]
 800d17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d005      	beq.n	800d18e <sent_tcp+0x92>
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d186:	88fa      	ldrh	r2, [r7, #6]
 800d188:	2102      	movs	r1, #2
 800d18a:	6978      	ldr	r0, [r7, #20]
 800d18c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d18e:	2300      	movs	r3, #0
}
 800d190:	4618      	mov	r0, r3
 800d192:	3718      	adds	r7, #24
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}
 800d198:	0801e5b8 	.word	0x0801e5b8
 800d19c:	0801e710 	.word	0x0801e710
 800d1a0:	0801e5fc 	.word	0x0801e5fc

0800d1a4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b088      	sub	sp, #32
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	460b      	mov	r3, r1
 800d1ae:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d106      	bne.n	800d1c8 <err_tcp+0x24>
 800d1ba:	4b5f      	ldr	r3, [pc, #380]	; (800d338 <err_tcp+0x194>)
 800d1bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d1c0:	495e      	ldr	r1, [pc, #376]	; (800d33c <err_tcp+0x198>)
 800d1c2:	485f      	ldr	r0, [pc, #380]	; (800d340 <err_tcp+0x19c>)
 800d1c4:	f00e fd62 	bl	801bc8c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d1c8:	f00e f8b8 	bl	801b33c <sys_arch_protect>
 800d1cc:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d1d4:	69fb      	ldr	r3, [r7, #28]
 800d1d6:	78fa      	ldrb	r2, [r7, #3]
 800d1d8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d1da:	69fb      	ldr	r3, [r7, #28]
 800d1dc:	7f1b      	ldrb	r3, [r3, #28]
 800d1de:	f043 0301 	orr.w	r3, r3, #1
 800d1e2:	b2da      	uxtb	r2, r3
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	785b      	ldrb	r3, [r3, #1]
 800d1ec:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d1ee:	69fb      	ldr	r3, [r7, #28]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d1f4:	69b8      	ldr	r0, [r7, #24]
 800d1f6:	f00e f8af 	bl	801b358 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <err_tcp+0x6a>
 800d202:	69fb      	ldr	r3, [r7, #28]
 800d204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d206:	2200      	movs	r2, #0
 800d208:	2104      	movs	r1, #4
 800d20a:	69f8      	ldr	r0, [r7, #28]
 800d20c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d212:	2b00      	cmp	r3, #0
 800d214:	d005      	beq.n	800d222 <err_tcp+0x7e>
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d21a:	2200      	movs	r2, #0
 800d21c:	2100      	movs	r1, #0
 800d21e:	69f8      	ldr	r0, [r7, #28]
 800d220:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d226:	2b00      	cmp	r3, #0
 800d228:	d005      	beq.n	800d236 <err_tcp+0x92>
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d22e:	2200      	movs	r2, #0
 800d230:	2102      	movs	r1, #2
 800d232:	69f8      	ldr	r0, [r7, #28]
 800d234:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d236:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d23a:	4618      	mov	r0, r3
 800d23c:	f7ff fd86 	bl	800cd4c <lwip_netconn_err_to_msg>
 800d240:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	3310      	adds	r3, #16
 800d246:	4618      	mov	r0, r3
 800d248:	f00d ff5d 	bl	801b106 <sys_mbox_valid>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d005      	beq.n	800d25e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	3310      	adds	r3, #16
 800d256:	6939      	ldr	r1, [r7, #16]
 800d258:	4618      	mov	r0, r3
 800d25a:	f00d fedf 	bl	801b01c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	3314      	adds	r3, #20
 800d262:	4618      	mov	r0, r3
 800d264:	f00d ff4f 	bl	801b106 <sys_mbox_valid>
 800d268:	4603      	mov	r3, r0
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d005      	beq.n	800d27a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	3314      	adds	r3, #20
 800d272:	6939      	ldr	r1, [r7, #16]
 800d274:	4618      	mov	r0, r3
 800d276:	f00d fed1 	bl	801b01c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	2b01      	cmp	r3, #1
 800d27e:	d005      	beq.n	800d28c <err_tcp+0xe8>
 800d280:	7dfb      	ldrb	r3, [r7, #23]
 800d282:	2b04      	cmp	r3, #4
 800d284:	d002      	beq.n	800d28c <err_tcp+0xe8>
 800d286:	7dfb      	ldrb	r3, [r7, #23]
 800d288:	2b03      	cmp	r3, #3
 800d28a:	d143      	bne.n	800d314 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d28c:	69fb      	ldr	r3, [r7, #28]
 800d28e:	7f1b      	ldrb	r3, [r3, #28]
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	bf14      	ite	ne
 800d298:	2301      	movne	r3, #1
 800d29a:	2300      	moveq	r3, #0
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d2a0:	69fb      	ldr	r3, [r7, #28]
 800d2a2:	7f1b      	ldrb	r3, [r3, #28]
 800d2a4:	f023 0304 	bic.w	r3, r3, #4
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d13b      	bne.n	800d32c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	6a1b      	ldr	r3, [r3, #32]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d106      	bne.n	800d2ca <err_tcp+0x126>
 800d2bc:	4b1e      	ldr	r3, [pc, #120]	; (800d338 <err_tcp+0x194>)
 800d2be:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d2c2:	4920      	ldr	r1, [pc, #128]	; (800d344 <err_tcp+0x1a0>)
 800d2c4:	481e      	ldr	r0, [pc, #120]	; (800d340 <err_tcp+0x19c>)
 800d2c6:	f00e fce1 	bl	801bc8c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d2ca:	7dfb      	ldrb	r3, [r7, #23]
 800d2cc:	2b04      	cmp	r3, #4
 800d2ce:	d104      	bne.n	800d2da <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d2d0:	69fb      	ldr	r3, [r7, #28]
 800d2d2:	6a1b      	ldr	r3, [r3, #32]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	711a      	strb	r2, [r3, #4]
 800d2d8:	e003      	b.n	800d2e2 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	6a1b      	ldr	r3, [r3, #32]
 800d2de:	78fa      	ldrb	r2, [r7, #3]
 800d2e0:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	6a1b      	ldr	r3, [r3, #32]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	330c      	adds	r3, #12
 800d2ea:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d2ec:	68b8      	ldr	r0, [r7, #8]
 800d2ee:	f00d ff9b 	bl	801b228 <sys_sem_valid>
 800d2f2:	4603      	mov	r3, r0
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d106      	bne.n	800d306 <err_tcp+0x162>
 800d2f8:	4b0f      	ldr	r3, [pc, #60]	; (800d338 <err_tcp+0x194>)
 800d2fa:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d2fe:	4912      	ldr	r1, [pc, #72]	; (800d348 <err_tcp+0x1a4>)
 800d300:	480f      	ldr	r0, [pc, #60]	; (800d340 <err_tcp+0x19c>)
 800d302:	f00e fcc3 	bl	801bc8c <iprintf>
      conn->current_msg = NULL;
 800d306:	69fb      	ldr	r3, [r7, #28]
 800d308:	2200      	movs	r2, #0
 800d30a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d30c:	68b8      	ldr	r0, [r7, #8]
 800d30e:	f00d ff71 	bl	801b1f4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d312:	e00b      	b.n	800d32c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d314:	69fb      	ldr	r3, [r7, #28]
 800d316:	6a1b      	ldr	r3, [r3, #32]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d008      	beq.n	800d32e <err_tcp+0x18a>
 800d31c:	4b06      	ldr	r3, [pc, #24]	; (800d338 <err_tcp+0x194>)
 800d31e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d322:	490a      	ldr	r1, [pc, #40]	; (800d34c <err_tcp+0x1a8>)
 800d324:	4806      	ldr	r0, [pc, #24]	; (800d340 <err_tcp+0x19c>)
 800d326:	f00e fcb1 	bl	801bc8c <iprintf>
  }
}
 800d32a:	e000      	b.n	800d32e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d32c:	bf00      	nop
}
 800d32e:	bf00      	nop
 800d330:	3720      	adds	r7, #32
 800d332:	46bd      	mov	sp, r7
 800d334:	bd80      	pop	{r7, pc}
 800d336:	bf00      	nop
 800d338:	0801e5b8 	.word	0x0801e5b8
 800d33c:	0801e710 	.word	0x0801e710
 800d340:	0801e5fc 	.word	0x0801e5fc
 800d344:	0801e720 	.word	0x0801e720
 800d348:	0801e73c 	.word	0x0801e73c
 800d34c:	0801e758 	.word	0x0801e758

0800d350 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d35e:	6879      	ldr	r1, [r7, #4]
 800d360:	68f8      	ldr	r0, [r7, #12]
 800d362:	f005 ff27 	bl	80131b4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d366:	490a      	ldr	r1, [pc, #40]	; (800d390 <setup_tcp+0x40>)
 800d368:	68f8      	ldr	r0, [r7, #12]
 800d36a:	f005 ff35 	bl	80131d8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d36e:	4909      	ldr	r1, [pc, #36]	; (800d394 <setup_tcp+0x44>)
 800d370:	68f8      	ldr	r0, [r7, #12]
 800d372:	f005 ff53 	bl	801321c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d376:	2202      	movs	r2, #2
 800d378:	4907      	ldr	r1, [pc, #28]	; (800d398 <setup_tcp+0x48>)
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f005 ffaa 	bl	80132d4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d380:	4906      	ldr	r1, [pc, #24]	; (800d39c <setup_tcp+0x4c>)
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f005 ff6c 	bl	8013260 <tcp_err>
}
 800d388:	bf00      	nop
 800d38a:	3710      	adds	r7, #16
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	0800cf29 	.word	0x0800cf29
 800d394:	0800d0fd 	.word	0x0800d0fd
 800d398:	0800d035 	.word	0x0800d035
 800d39c:	0800d1a5 	.word	0x0800d1a5

0800d3a0 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d3a0:	b590      	push	{r4, r7, lr}
 800d3a2:	b085      	sub	sp, #20
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d006      	beq.n	800d3c4 <pcb_new+0x24>
 800d3b6:	4b2b      	ldr	r3, [pc, #172]	; (800d464 <pcb_new+0xc4>)
 800d3b8:	f240 2265 	movw	r2, #613	; 0x265
 800d3bc:	492a      	ldr	r1, [pc, #168]	; (800d468 <pcb_new+0xc8>)
 800d3be:	482b      	ldr	r0, [pc, #172]	; (800d46c <pcb_new+0xcc>)
 800d3c0:	f00e fc64 	bl	801bc8c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3ce:	2b10      	cmp	r3, #16
 800d3d0:	d022      	beq.n	800d418 <pcb_new+0x78>
 800d3d2:	2b20      	cmp	r3, #32
 800d3d4:	d133      	bne.n	800d43e <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681c      	ldr	r4, [r3, #0]
 800d3da:	7bfb      	ldrb	r3, [r7, #15]
 800d3dc:	4618      	mov	r0, r3
 800d3de:	f00b f9ae 	bl	801873e <udp_new_ip_type>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	685b      	ldr	r3, [r3, #4]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d02a      	beq.n	800d446 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	2b22      	cmp	r3, #34	; 0x22
 800d3f8:	d104      	bne.n	800d404 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	685b      	ldr	r3, [r3, #4]
 800d400:	2201      	movs	r2, #1
 800d402:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6858      	ldr	r0, [r3, #4]
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	461a      	mov	r2, r3
 800d410:	4917      	ldr	r1, [pc, #92]	; (800d470 <pcb_new+0xd0>)
 800d412:	f00b f91b 	bl	801864c <udp_recv>
      }
      break;
 800d416:	e016      	b.n	800d446 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681c      	ldr	r4, [r3, #0]
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	4618      	mov	r0, r3
 800d420:	f005 feba 	bl	8013198 <tcp_new_ip_type>
 800d424:	4603      	mov	r3, r0
 800d426:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	685b      	ldr	r3, [r3, #4]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d00b      	beq.n	800d44a <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4618      	mov	r0, r3
 800d438:	f7ff ff8a 	bl	800d350 <setup_tcp>
      }
      break;
 800d43c:	e005      	b.n	800d44a <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	22fa      	movs	r2, #250	; 0xfa
 800d442:	711a      	strb	r2, [r3, #4]
      return;
 800d444:	e00a      	b.n	800d45c <pcb_new+0xbc>
      break;
 800d446:	bf00      	nop
 800d448:	e000      	b.n	800d44c <pcb_new+0xac>
      break;
 800d44a:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	685b      	ldr	r3, [r3, #4]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d102      	bne.n	800d45c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	22ff      	movs	r2, #255	; 0xff
 800d45a:	711a      	strb	r2, [r3, #4]
  }
}
 800d45c:	3714      	adds	r7, #20
 800d45e:	46bd      	mov	sp, r7
 800d460:	bd90      	pop	{r4, r7, pc}
 800d462:	bf00      	nop
 800d464:	0801e5b8 	.word	0x0801e5b8
 800d468:	0801e79c 	.word	0x0801e79c
 800d46c:	0801e5fc 	.word	0x0801e5fc
 800d470:	0800ce2d 	.word	0x0800ce2d

0800d474 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d102      	bne.n	800d496 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f7ff ff85 	bl	800d3a0 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d496:	bf00      	nop
 800d498:	3710      	adds	r7, #16
 800d49a:	46bd      	mov	sp, r7
 800d49c:	bd80      	pop	{r7, pc}
	...

0800d4a0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b086      	sub	sp, #24
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	6039      	str	r1, [r7, #0]
 800d4aa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d4b0:	2007      	movs	r0, #7
 800d4b2:	f003 f993 	bl	80107dc <memp_malloc>
 800d4b6:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d101      	bne.n	800d4c2 <netconn_alloc+0x22>
    return NULL;
 800d4be:	2300      	movs	r3, #0
 800d4c0:	e052      	b.n	800d568 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	79fa      	ldrb	r2, [r7, #7]
 800d4cc:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	2200      	movs	r2, #0
 800d4d2:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d4d4:	79fb      	ldrb	r3, [r7, #7]
 800d4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d4da:	2b10      	cmp	r3, #16
 800d4dc:	d004      	beq.n	800d4e8 <netconn_alloc+0x48>
 800d4de:	2b20      	cmp	r3, #32
 800d4e0:	d105      	bne.n	800d4ee <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d4e2:	2306      	movs	r3, #6
 800d4e4:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d4e6:	e00a      	b.n	800d4fe <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d4e8:	2306      	movs	r3, #6
 800d4ea:	617b      	str	r3, [r7, #20]
      break;
 800d4ec:	e007      	b.n	800d4fe <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d4ee:	4b20      	ldr	r3, [pc, #128]	; (800d570 <netconn_alloc+0xd0>)
 800d4f0:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d4f4:	491f      	ldr	r1, [pc, #124]	; (800d574 <netconn_alloc+0xd4>)
 800d4f6:	4820      	ldr	r0, [pc, #128]	; (800d578 <netconn_alloc+0xd8>)
 800d4f8:	f00e fbc8 	bl	801bc8c <iprintf>
      goto free_and_return;
 800d4fc:	e02f      	b.n	800d55e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	3310      	adds	r3, #16
 800d502:	6979      	ldr	r1, [r7, #20]
 800d504:	4618      	mov	r0, r3
 800d506:	f00d fd55 	bl	801afb4 <sys_mbox_new>
 800d50a:	4603      	mov	r3, r0
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d125      	bne.n	800d55c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	330c      	adds	r3, #12
 800d514:	2100      	movs	r1, #0
 800d516:	4618      	mov	r0, r3
 800d518:	f00d fe13 	bl	801b142 <sys_sem_new>
 800d51c:	4603      	mov	r3, r0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d005      	beq.n	800d52e <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	3310      	adds	r3, #16
 800d526:	4618      	mov	r0, r3
 800d528:	f00d fd66 	bl	801aff8 <sys_mbox_free>
    goto free_and_return;
 800d52c:	e017      	b.n	800d55e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	3314      	adds	r3, #20
 800d532:	4618      	mov	r0, r3
 800d534:	f00d fdf8 	bl	801b128 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2200      	movs	r2, #0
 800d53c:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	f04f 32ff 	mov.w	r2, #4294967295
 800d544:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	683a      	ldr	r2, [r7, #0]
 800d54a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2200      	movs	r2, #0
 800d550:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	7cfa      	ldrb	r2, [r7, #19]
 800d556:	771a      	strb	r2, [r3, #28]
  return conn;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	e005      	b.n	800d568 <netconn_alloc+0xc8>
    goto free_and_return;
 800d55c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d55e:	68f9      	ldr	r1, [r7, #12]
 800d560:	2007      	movs	r0, #7
 800d562:	f003 f98d 	bl	8010880 <memp_free>
  return NULL;
 800d566:	2300      	movs	r3, #0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3718      	adds	r7, #24
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}
 800d570:	0801e5b8 	.word	0x0801e5b8
 800d574:	0801e7bc 	.word	0x0801e7bc
 800d578:	0801e5fc 	.word	0x0801e5fc

0800d57c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d006      	beq.n	800d59a <netconn_free+0x1e>
 800d58c:	4b1b      	ldr	r3, [pc, #108]	; (800d5fc <netconn_free+0x80>)
 800d58e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d592:	491b      	ldr	r1, [pc, #108]	; (800d600 <netconn_free+0x84>)
 800d594:	481b      	ldr	r0, [pc, #108]	; (800d604 <netconn_free+0x88>)
 800d596:	f00e fb79 	bl	801bc8c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	3310      	adds	r3, #16
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f00d fdb1 	bl	801b106 <sys_mbox_valid>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d006      	beq.n	800d5b8 <netconn_free+0x3c>
 800d5aa:	4b14      	ldr	r3, [pc, #80]	; (800d5fc <netconn_free+0x80>)
 800d5ac:	f240 3223 	movw	r2, #803	; 0x323
 800d5b0:	4915      	ldr	r1, [pc, #84]	; (800d608 <netconn_free+0x8c>)
 800d5b2:	4814      	ldr	r0, [pc, #80]	; (800d604 <netconn_free+0x88>)
 800d5b4:	f00e fb6a 	bl	801bc8c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	3314      	adds	r3, #20
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f00d fda2 	bl	801b106 <sys_mbox_valid>
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d006      	beq.n	800d5d6 <netconn_free+0x5a>
 800d5c8:	4b0c      	ldr	r3, [pc, #48]	; (800d5fc <netconn_free+0x80>)
 800d5ca:	f240 3226 	movw	r2, #806	; 0x326
 800d5ce:	490f      	ldr	r1, [pc, #60]	; (800d60c <netconn_free+0x90>)
 800d5d0:	480c      	ldr	r0, [pc, #48]	; (800d604 <netconn_free+0x88>)
 800d5d2:	f00e fb5b 	bl	801bc8c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	330c      	adds	r3, #12
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f00d fe17 	bl	801b20e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	330c      	adds	r3, #12
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f00d fe30 	bl	801b24a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d5ea:	6879      	ldr	r1, [r7, #4]
 800d5ec:	2007      	movs	r0, #7
 800d5ee:	f003 f947 	bl	8010880 <memp_free>
}
 800d5f2:	bf00      	nop
 800d5f4:	3708      	adds	r7, #8
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	0801e5b8 	.word	0x0801e5b8
 800d600:	0801e7e4 	.word	0x0801e7e4
 800d604:	0801e5fc 	.word	0x0801e5fc
 800d608:	0801e814 	.word	0x0801e814
 800d60c:	0801e850 	.word	0x0801e850

0800d610 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b086      	sub	sp, #24
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	3310      	adds	r3, #16
 800d61c:	4618      	mov	r0, r3
 800d61e:	f00d fd72 	bl	801b106 <sys_mbox_valid>
 800d622:	4603      	mov	r3, r0
 800d624:	2b00      	cmp	r3, #0
 800d626:	d02f      	beq.n	800d688 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d628:	e018      	b.n	800d65c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d632:	2b10      	cmp	r3, #16
 800d634:	d10e      	bne.n	800d654 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d636:	693b      	ldr	r3, [r7, #16]
 800d638:	f107 020f 	add.w	r2, r7, #15
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f7ff fbba 	bl	800cdb8 <lwip_netconn_is_err_msg>
 800d644:	4603      	mov	r3, r0
 800d646:	2b00      	cmp	r3, #0
 800d648:	d108      	bne.n	800d65c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f003 ffed 	bl	801162c <pbuf_free>
 800d652:	e003      	b.n	800d65c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 fee6 	bl	800e428 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	3310      	adds	r3, #16
 800d660:	f107 0210 	add.w	r2, r7, #16
 800d664:	4611      	mov	r1, r2
 800d666:	4618      	mov	r0, r3
 800d668:	f00d fd31 	bl	801b0ce <sys_arch_mbox_tryfetch>
 800d66c:	4603      	mov	r3, r0
 800d66e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d672:	d1da      	bne.n	800d62a <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3310      	adds	r3, #16
 800d678:	4618      	mov	r0, r3
 800d67a:	f00d fcbd 	bl	801aff8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	3310      	adds	r3, #16
 800d682:	4618      	mov	r0, r3
 800d684:	f00d fd50 	bl	801b128 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3314      	adds	r3, #20
 800d68c:	4618      	mov	r0, r3
 800d68e:	f00d fd3a 	bl	801b106 <sys_mbox_valid>
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d034      	beq.n	800d702 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d698:	e01d      	b.n	800d6d6 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d69a:	693b      	ldr	r3, [r7, #16]
 800d69c:	f107 020e 	add.w	r2, r7, #14
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	4618      	mov	r0, r3
 800d6a4:	f7ff fb88 	bl	800cdb8 <lwip_netconn_is_err_msg>
 800d6a8:	4603      	mov	r3, r0
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d113      	bne.n	800d6d6 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d6b2:	6978      	ldr	r0, [r7, #20]
 800d6b4:	f7ff ffac 	bl	800d610 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d007      	beq.n	800d6d0 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d6c0:	697b      	ldr	r3, [r7, #20]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f004 fdb1 	bl	801222c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d6d0:	6978      	ldr	r0, [r7, #20]
 800d6d2:	f7ff ff53 	bl	800d57c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	3314      	adds	r3, #20
 800d6da:	f107 0210 	add.w	r2, r7, #16
 800d6de:	4611      	mov	r1, r2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f00d fcf4 	bl	801b0ce <sys_arch_mbox_tryfetch>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ec:	d1d5      	bne.n	800d69a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	3314      	adds	r3, #20
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f00d fc80 	bl	801aff8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	3314      	adds	r3, #20
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f00d fd13 	bl	801b128 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d702:	bf00      	nop
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}
	...

0800d70c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b086      	sub	sp, #24
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	460b      	mov	r3, r1
 800d716:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d718:	2300      	movs	r3, #0
 800d71a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d106      	bne.n	800d730 <lwip_netconn_do_close_internal+0x24>
 800d722:	4ba1      	ldr	r3, [pc, #644]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d724:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d728:	49a0      	ldr	r1, [pc, #640]	; (800d9ac <lwip_netconn_do_close_internal+0x2a0>)
 800d72a:	48a1      	ldr	r0, [pc, #644]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d72c:	f00e faae 	bl	801bc8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d738:	2b10      	cmp	r3, #16
 800d73a:	d006      	beq.n	800d74a <lwip_netconn_do_close_internal+0x3e>
 800d73c:	4b9a      	ldr	r3, [pc, #616]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d73e:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d742:	499c      	ldr	r1, [pc, #624]	; (800d9b4 <lwip_netconn_do_close_internal+0x2a8>)
 800d744:	489a      	ldr	r0, [pc, #616]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d746:	f00e faa1 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	785b      	ldrb	r3, [r3, #1]
 800d74e:	2b04      	cmp	r3, #4
 800d750:	d006      	beq.n	800d760 <lwip_netconn_do_close_internal+0x54>
 800d752:	4b95      	ldr	r3, [pc, #596]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d754:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d758:	4997      	ldr	r1, [pc, #604]	; (800d9b8 <lwip_netconn_do_close_internal+0x2ac>)
 800d75a:	4895      	ldr	r0, [pc, #596]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d75c:	f00e fa96 	bl	801bc8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	685b      	ldr	r3, [r3, #4]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d106      	bne.n	800d776 <lwip_netconn_do_close_internal+0x6a>
 800d768:	4b8f      	ldr	r3, [pc, #572]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d76a:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d76e:	4993      	ldr	r1, [pc, #588]	; (800d9bc <lwip_netconn_do_close_internal+0x2b0>)
 800d770:	488f      	ldr	r0, [pc, #572]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d772:	f00e fa8b 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d106      	bne.n	800d78c <lwip_netconn_do_close_internal+0x80>
 800d77e:	4b8a      	ldr	r3, [pc, #552]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d780:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d784:	498e      	ldr	r1, [pc, #568]	; (800d9c0 <lwip_netconn_do_close_internal+0x2b4>)
 800d786:	488a      	ldr	r0, [pc, #552]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d788:	f00e fa80 	bl	801bc8c <iprintf>

  tpcb = conn->pcb.tcp;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	6a1b      	ldr	r3, [r3, #32]
 800d796:	7a1b      	ldrb	r3, [r3, #8]
 800d798:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
 800d7a4:	f003 0302 	and.w	r3, r3, #2
 800d7a8:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d7aa:	7bfb      	ldrb	r3, [r7, #15]
 800d7ac:	2b03      	cmp	r3, #3
 800d7ae:	d102      	bne.n	800d7b6 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	75bb      	strb	r3, [r7, #22]
 800d7b4:	e01f      	b.n	800d7f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d7b6:	7bbb      	ldrb	r3, [r7, #14]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d00e      	beq.n	800d7da <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d7c0:	2b05      	cmp	r3, #5
 800d7c2:	d007      	beq.n	800d7d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d7c4:	693b      	ldr	r3, [r7, #16]
 800d7c6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d7c8:	2b06      	cmp	r3, #6
 800d7ca:	d003      	beq.n	800d7d4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d7d0:	2b08      	cmp	r3, #8
 800d7d2:	d102      	bne.n	800d7da <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d7d4:	2301      	movs	r3, #1
 800d7d6:	75bb      	strb	r3, [r7, #22]
 800d7d8:	e00d      	b.n	800d7f6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d7da:	7b7b      	ldrb	r3, [r7, #13]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d008      	beq.n	800d7f2 <lwip_netconn_do_close_internal+0xe6>
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	8b5b      	ldrh	r3, [r3, #26]
 800d7e4:	f003 0310 	and.w	r3, r3, #16
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d002      	beq.n	800d7f2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	75bb      	strb	r3, [r7, #22]
 800d7f0:	e001      	b.n	800d7f6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d7f6:	7dbb      	ldrb	r3, [r7, #22]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d003      	beq.n	800d804 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d7fc:	2100      	movs	r1, #0
 800d7fe:	6938      	ldr	r0, [r7, #16]
 800d800:	f005 fcd8 	bl	80131b4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	7d1b      	ldrb	r3, [r3, #20]
 800d808:	2b01      	cmp	r3, #1
 800d80a:	d104      	bne.n	800d816 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d80c:	2100      	movs	r1, #0
 800d80e:	6938      	ldr	r0, [r7, #16]
 800d810:	f005 fd48 	bl	80132a4 <tcp_accept>
 800d814:	e01d      	b.n	800d852 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d816:	7bbb      	ldrb	r3, [r7, #14]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d007      	beq.n	800d82c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d81c:	2100      	movs	r1, #0
 800d81e:	6938      	ldr	r0, [r7, #16]
 800d820:	f005 fcda 	bl	80131d8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d824:	2100      	movs	r1, #0
 800d826:	6938      	ldr	r0, [r7, #16]
 800d828:	f005 fd3c 	bl	80132a4 <tcp_accept>
    }
    if (shut_tx) {
 800d82c:	7b7b      	ldrb	r3, [r7, #13]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d003      	beq.n	800d83a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d832:	2100      	movs	r1, #0
 800d834:	6938      	ldr	r0, [r7, #16]
 800d836:	f005 fcf1 	bl	801321c <tcp_sent>
    }
    if (shut_close) {
 800d83a:	7dbb      	ldrb	r3, [r7, #22]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d840:	2200      	movs	r2, #0
 800d842:	2100      	movs	r1, #0
 800d844:	6938      	ldr	r0, [r7, #16]
 800d846:	f005 fd45 	bl	80132d4 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d84a:	2100      	movs	r1, #0
 800d84c:	6938      	ldr	r0, [r7, #16]
 800d84e:	f005 fd07 	bl	8013260 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d852:	7dbb      	ldrb	r3, [r7, #22]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d005      	beq.n	800d864 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d858:	6938      	ldr	r0, [r7, #16]
 800d85a:	f004 fba1 	bl	8011fa0 <tcp_close>
 800d85e:	4603      	mov	r3, r0
 800d860:	75fb      	strb	r3, [r7, #23]
 800d862:	e007      	b.n	800d874 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	7b7a      	ldrb	r2, [r7, #13]
 800d868:	4619      	mov	r1, r3
 800d86a:	6938      	ldr	r0, [r7, #16]
 800d86c:	f004 fbc4 	bl	8011ff8 <tcp_shutdown>
 800d870:	4603      	mov	r3, r0
 800d872:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d874:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d102      	bne.n	800d882 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d87c:	2301      	movs	r3, #1
 800d87e:	757b      	strb	r3, [r7, #21]
 800d880:	e016      	b.n	800d8b0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d882:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d88a:	d10f      	bne.n	800d8ac <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6a1b      	ldr	r3, [r3, #32]
 800d890:	7a5b      	ldrb	r3, [r3, #9]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d10c      	bne.n	800d8b0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d896:	2301      	movs	r3, #1
 800d898:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d89a:	7dbb      	ldrb	r3, [r7, #22]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d007      	beq.n	800d8b0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d8a0:	6938      	ldr	r0, [r7, #16]
 800d8a2:	f004 fcc3 	bl	801222c <tcp_abort>
          err = ERR_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	75fb      	strb	r3, [r7, #23]
 800d8aa:	e001      	b.n	800d8b0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d8b0:	7d7b      	ldrb	r3, [r7, #21]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d044      	beq.n	800d940 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	6a1b      	ldr	r3, [r3, #32]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	330c      	adds	r3, #12
 800d8be:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a1b      	ldr	r3, [r3, #32]
 800d8c4:	7dfa      	ldrb	r2, [r7, #23]
 800d8c6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d129      	bne.n	800d930 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d8dc:	7dbb      	ldrb	r3, [r7, #22]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d00c      	beq.n	800d8fc <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d005      	beq.n	800d8fc <lwip_netconn_do_close_internal+0x1f0>
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	2104      	movs	r1, #4
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	4798      	blx	r3
      }
      if (shut_rx) {
 800d8fc:	7bbb      	ldrb	r3, [r7, #14]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d009      	beq.n	800d916 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d906:	2b00      	cmp	r3, #0
 800d908:	d005      	beq.n	800d916 <lwip_netconn_do_close_internal+0x20a>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d90e:	2200      	movs	r2, #0
 800d910:	2100      	movs	r1, #0
 800d912:	6878      	ldr	r0, [r7, #4]
 800d914:	4798      	blx	r3
      }
      if (shut_tx) {
 800d916:	7b7b      	ldrb	r3, [r7, #13]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d009      	beq.n	800d930 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	2b00      	cmp	r3, #0
 800d922:	d005      	beq.n	800d930 <lwip_netconn_do_close_internal+0x224>
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d928:	2200      	movs	r2, #0
 800d92a:	2102      	movs	r1, #2
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d930:	78fb      	ldrb	r3, [r7, #3]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d002      	beq.n	800d93c <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d936:	68b8      	ldr	r0, [r7, #8]
 800d938:	f00d fc5c 	bl	801b1f4 <sys_sem_signal>
    }
    return ERR_OK;
 800d93c:	2300      	movs	r3, #0
 800d93e:	e02e      	b.n	800d99e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800d940:	7d7b      	ldrb	r3, [r7, #21]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d11e      	bne.n	800d984 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	7d1b      	ldrb	r3, [r3, #20]
 800d94a:	2b01      	cmp	r3, #1
 800d94c:	d106      	bne.n	800d95c <lwip_netconn_do_close_internal+0x250>
 800d94e:	4b16      	ldr	r3, [pc, #88]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d950:	f240 4241 	movw	r2, #1089	; 0x441
 800d954:	491b      	ldr	r1, [pc, #108]	; (800d9c4 <lwip_netconn_do_close_internal+0x2b8>)
 800d956:	4816      	ldr	r0, [pc, #88]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d958:	f00e f998 	bl	801bc8c <iprintf>
    if (shut_tx) {
 800d95c:	7b7b      	ldrb	r3, [r7, #13]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d003      	beq.n	800d96a <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800d962:	4919      	ldr	r1, [pc, #100]	; (800d9c8 <lwip_netconn_do_close_internal+0x2bc>)
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f005 fc59 	bl	801321c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d96a:	2201      	movs	r2, #1
 800d96c:	4917      	ldr	r1, [pc, #92]	; (800d9cc <lwip_netconn_do_close_internal+0x2c0>)
 800d96e:	6938      	ldr	r0, [r7, #16]
 800d970:	f005 fcb0 	bl	80132d4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d974:	4916      	ldr	r1, [pc, #88]	; (800d9d0 <lwip_netconn_do_close_internal+0x2c4>)
 800d976:	6938      	ldr	r0, [r7, #16]
 800d978:	f005 fc72 	bl	8013260 <tcp_err>
    tcp_arg(tpcb, conn);
 800d97c:	6879      	ldr	r1, [r7, #4]
 800d97e:	6938      	ldr	r0, [r7, #16]
 800d980:	f005 fc18 	bl	80131b4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800d984:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d106      	bne.n	800d99a <lwip_netconn_do_close_internal+0x28e>
 800d98c:	4b06      	ldr	r3, [pc, #24]	; (800d9a8 <lwip_netconn_do_close_internal+0x29c>)
 800d98e:	f240 424d 	movw	r2, #1101	; 0x44d
 800d992:	4910      	ldr	r1, [pc, #64]	; (800d9d4 <lwip_netconn_do_close_internal+0x2c8>)
 800d994:	4806      	ldr	r0, [pc, #24]	; (800d9b0 <lwip_netconn_do_close_internal+0x2a4>)
 800d996:	f00e f979 	bl	801bc8c <iprintf>
  return err;
 800d99a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d99e:	4618      	mov	r0, r3
 800d9a0:	3718      	adds	r7, #24
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	bd80      	pop	{r7, pc}
 800d9a6:	bf00      	nop
 800d9a8:	0801e5b8 	.word	0x0801e5b8
 800d9ac:	0801e88c 	.word	0x0801e88c
 800d9b0:	0801e5fc 	.word	0x0801e5fc
 800d9b4:	0801e89c 	.word	0x0801e89c
 800d9b8:	0801e8bc 	.word	0x0801e8bc
 800d9bc:	0801e8e0 	.word	0x0801e8e0
 800d9c0:	0801e720 	.word	0x0801e720
 800d9c4:	0801e8f4 	.word	0x0801e8f4
 800d9c8:	0800d0fd 	.word	0x0800d0fd
 800d9cc:	0800d035 	.word	0x0800d035
 800d9d0:	0800d1a5 	.word	0x0800d1a5
 800d9d4:	0801e918 	.word	0x0801e918

0800d9d8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	b084      	sub	sp, #16
 800d9dc:	af00      	add	r7, sp, #0
 800d9de:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	785b      	ldrb	r3, [r3, #1]
 800d9ea:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800d9ec:	7afb      	ldrb	r3, [r7, #11]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d00d      	beq.n	800da0e <lwip_netconn_do_delconn+0x36>
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d9fc:	2b10      	cmp	r3, #16
 800d9fe:	d006      	beq.n	800da0e <lwip_netconn_do_delconn+0x36>
 800da00:	4b60      	ldr	r3, [pc, #384]	; (800db84 <lwip_netconn_do_delconn+0x1ac>)
 800da02:	f240 425e 	movw	r2, #1118	; 0x45e
 800da06:	4960      	ldr	r1, [pc, #384]	; (800db88 <lwip_netconn_do_delconn+0x1b0>)
 800da08:	4860      	ldr	r0, [pc, #384]	; (800db8c <lwip_netconn_do_delconn+0x1b4>)
 800da0a:	f00e f93f 	bl	801bc8c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800da0e:	7afb      	ldrb	r3, [r7, #11]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d005      	beq.n	800da20 <lwip_netconn_do_delconn+0x48>
 800da14:	7afb      	ldrb	r3, [r7, #11]
 800da16:	2b02      	cmp	r3, #2
 800da18:	d002      	beq.n	800da20 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800da1a:	7afb      	ldrb	r3, [r7, #11]
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d109      	bne.n	800da34 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800da20:	7afb      	ldrb	r3, [r7, #11]
 800da22:	2b03      	cmp	r3, #3
 800da24:	d10a      	bne.n	800da3c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	7f1b      	ldrb	r3, [r3, #28]
 800da2c:	f003 0304 	and.w	r3, r3, #4
 800da30:	2b00      	cmp	r3, #0
 800da32:	d103      	bne.n	800da3c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	22fb      	movs	r2, #251	; 0xfb
 800da38:	711a      	strb	r2, [r3, #4]
 800da3a:	e097      	b.n	800db6c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800da3c:	7afb      	ldrb	r3, [r7, #11]
 800da3e:	2b03      	cmp	r3, #3
 800da40:	d10d      	bne.n	800da5e <lwip_netconn_do_delconn+0x86>
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	7f1b      	ldrb	r3, [r3, #28]
 800da48:	f003 0304 	and.w	r3, r3, #4
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d106      	bne.n	800da5e <lwip_netconn_do_delconn+0x86>
 800da50:	4b4c      	ldr	r3, [pc, #304]	; (800db84 <lwip_netconn_do_delconn+0x1ac>)
 800da52:	f240 427a 	movw	r2, #1146	; 0x47a
 800da56:	494e      	ldr	r1, [pc, #312]	; (800db90 <lwip_netconn_do_delconn+0x1b8>)
 800da58:	484c      	ldr	r0, [pc, #304]	; (800db8c <lwip_netconn_do_delconn+0x1b4>)
 800da5a:	f00e f917 	bl	801bc8c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff fdd1 	bl	800d610 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	685b      	ldr	r3, [r3, #4]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d05f      	beq.n	800db38 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	781b      	ldrb	r3, [r3, #0]
 800da7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da82:	2b10      	cmp	r3, #16
 800da84:	d00d      	beq.n	800daa2 <lwip_netconn_do_delconn+0xca>
 800da86:	2b20      	cmp	r3, #32
 800da88:	d151      	bne.n	800db2e <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	685b      	ldr	r3, [r3, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	685b      	ldr	r3, [r3, #4]
 800da9a:	4618      	mov	r0, r3
 800da9c:	f00a fdf6 	bl	801868c <udp_remove>
          break;
 800daa0:	e046      	b.n	800db30 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	6a1b      	ldr	r3, [r3, #32]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d006      	beq.n	800daba <lwip_netconn_do_delconn+0xe2>
 800daac:	4b35      	ldr	r3, [pc, #212]	; (800db84 <lwip_netconn_do_delconn+0x1ac>)
 800daae:	f240 4294 	movw	r2, #1172	; 0x494
 800dab2:	4938      	ldr	r1, [pc, #224]	; (800db94 <lwip_netconn_do_delconn+0x1bc>)
 800dab4:	4835      	ldr	r0, [pc, #212]	; (800db8c <lwip_netconn_do_delconn+0x1b4>)
 800dab6:	f00e f8e9 	bl	801bc8c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	2204      	movs	r2, #4
 800dac0:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2203      	movs	r2, #3
 800dac6:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	68fa      	ldr	r2, [r7, #12]
 800dace:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2100      	movs	r1, #0
 800dad6:	4618      	mov	r0, r3
 800dad8:	f7ff fe18 	bl	800d70c <lwip_netconn_do_close_internal>
 800dadc:	4603      	mov	r3, r0
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d04b      	beq.n	800db7a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	785b      	ldrb	r3, [r3, #1]
 800dae8:	2b04      	cmp	r3, #4
 800daea:	d006      	beq.n	800dafa <lwip_netconn_do_delconn+0x122>
 800daec:	4b25      	ldr	r3, [pc, #148]	; (800db84 <lwip_netconn_do_delconn+0x1ac>)
 800daee:	f240 429a 	movw	r2, #1178	; 0x49a
 800daf2:	4929      	ldr	r1, [pc, #164]	; (800db98 <lwip_netconn_do_delconn+0x1c0>)
 800daf4:	4825      	ldr	r0, [pc, #148]	; (800db8c <lwip_netconn_do_delconn+0x1b4>)
 800daf6:	f00e f8c9 	bl	801bc8c <iprintf>
            UNLOCK_TCPIP_CORE();
 800dafa:	4828      	ldr	r0, [pc, #160]	; (800db9c <lwip_netconn_do_delconn+0x1c4>)
 800dafc:	f00d fbeb 	bl	801b2d6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	330c      	adds	r3, #12
 800db06:	2100      	movs	r1, #0
 800db08:	4618      	mov	r0, r3
 800db0a:	f00d fb42 	bl	801b192 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800db0e:	4823      	ldr	r0, [pc, #140]	; (800db9c <lwip_netconn_do_delconn+0x1c4>)
 800db10:	f00d fbd2 	bl	801b2b8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	785b      	ldrb	r3, [r3, #1]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d02d      	beq.n	800db7a <lwip_netconn_do_delconn+0x1a2>
 800db1e:	4b19      	ldr	r3, [pc, #100]	; (800db84 <lwip_netconn_do_delconn+0x1ac>)
 800db20:	f240 429e 	movw	r2, #1182	; 0x49e
 800db24:	491c      	ldr	r1, [pc, #112]	; (800db98 <lwip_netconn_do_delconn+0x1c0>)
 800db26:	4819      	ldr	r0, [pc, #100]	; (800db8c <lwip_netconn_do_delconn+0x1b4>)
 800db28:	f00e f8b0 	bl	801bc8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800db2c:	e025      	b.n	800db7a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800db2e:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	2200      	movs	r2, #0
 800db36:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d007      	beq.n	800db52 <lwip_netconn_do_delconn+0x17a>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	6810      	ldr	r0, [r2, #0]
 800db4c:	2200      	movs	r2, #0
 800db4e:	2100      	movs	r1, #0
 800db50:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d007      	beq.n	800db6c <lwip_netconn_do_delconn+0x194>
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	68fa      	ldr	r2, [r7, #12]
 800db64:	6810      	ldr	r0, [r2, #0]
 800db66:	2200      	movs	r2, #0
 800db68:	2102      	movs	r1, #2
 800db6a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	330c      	adds	r3, #12
 800db72:	4618      	mov	r0, r3
 800db74:	f00d fb58 	bl	801b228 <sys_sem_valid>
 800db78:	e000      	b.n	800db7c <lwip_netconn_do_delconn+0x1a4>
          return;
 800db7a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800db7c:	3710      	adds	r7, #16
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
 800db82:	bf00      	nop
 800db84:	0801e5b8 	.word	0x0801e5b8
 800db88:	0801e928 	.word	0x0801e928
 800db8c:	0801e5fc 	.word	0x0801e5fc
 800db90:	0801e93c 	.word	0x0801e93c
 800db94:	0801e95c 	.word	0x0801e95c
 800db98:	0801e978 	.word	0x0801e978
 800db9c:	2000a0a4 	.word	0x2000a0a4

0800dba0 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	2b00      	cmp	r3, #0
 800dbb4:	d025      	beq.n	800dc02 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	781b      	ldrb	r3, [r3, #0]
 800dbbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dbc0:	2b10      	cmp	r3, #16
 800dbc2:	d00e      	beq.n	800dbe2 <lwip_netconn_do_bind+0x42>
 800dbc4:	2b20      	cmp	r3, #32
 800dbc6:	d119      	bne.n	800dbfc <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dbc8:	68bb      	ldr	r3, [r7, #8]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6858      	ldr	r0, [r3, #4]
 800dbce:	68bb      	ldr	r3, [r7, #8]
 800dbd0:	6899      	ldr	r1, [r3, #8]
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	899b      	ldrh	r3, [r3, #12]
 800dbd6:	461a      	mov	r2, r3
 800dbd8:	f00a fcb0 	bl	801853c <udp_bind>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	73fb      	strb	r3, [r7, #15]
        break;
 800dbe0:	e011      	b.n	800dc06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	6858      	ldr	r0, [r3, #4]
 800dbe8:	68bb      	ldr	r3, [r7, #8]
 800dbea:	6899      	ldr	r1, [r3, #8]
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	899b      	ldrh	r3, [r3, #12]
 800dbf0:	461a      	mov	r2, r3
 800dbf2:	f004 fb27 	bl	8012244 <tcp_bind>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	73fb      	strb	r3, [r7, #15]
        break;
 800dbfa:	e004      	b.n	800dc06 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800dbfc:	23fa      	movs	r3, #250	; 0xfa
 800dbfe:	73fb      	strb	r3, [r7, #15]
        break;
 800dc00:	e001      	b.n	800dc06 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800dc02:	23fa      	movs	r3, #250	; 0xfa
 800dc04:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	7bfa      	ldrb	r2, [r7, #15]
 800dc0a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dc0c:	bf00      	nop
 800dc0e:	3710      	adds	r7, #16
 800dc10:	46bd      	mov	sp, r7
 800dc12:	bd80      	pop	{r7, pc}

0800dc14 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800dc14:	b580      	push	{r7, lr}
 800dc16:	b084      	sub	sp, #16
 800dc18:	af00      	add	r7, sp, #0
 800dc1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7ff f875 	bl	800cd14 <netconn_err>
 800dc2a:	4603      	mov	r3, r0
 800dc2c:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d134      	bne.n	800dca0 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	d02d      	beq.n	800dc9c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dc40:	68bb      	ldr	r3, [r7, #8]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	781b      	ldrb	r3, [r3, #0]
 800dc46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc4a:	2b20      	cmp	r3, #32
 800dc4c:	d123      	bne.n	800dc96 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d10c      	bne.n	800dc72 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	685a      	ldr	r2, [r3, #4]
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	689b      	ldr	r3, [r3, #8]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f00a fa7e 	bl	8018168 <udp_send>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800dc70:	e016      	b.n	800dca0 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	6858      	ldr	r0, [r3, #4]
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	689b      	ldr	r3, [r3, #8]
 800dc7c:	6819      	ldr	r1, [r3, #0]
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	689b      	ldr	r3, [r3, #8]
 800dc82:	f103 0208 	add.w	r2, r3, #8
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	899b      	ldrh	r3, [r3, #12]
 800dc8c:	f00a faa0 	bl	80181d0 <udp_sendto>
 800dc90:	4603      	mov	r3, r0
 800dc92:	73fb      	strb	r3, [r7, #15]
          break;
 800dc94:	e004      	b.n	800dca0 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800dc96:	23f5      	movs	r3, #245	; 0xf5
 800dc98:	73fb      	strb	r3, [r7, #15]
          break;
 800dc9a:	e001      	b.n	800dca0 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800dc9c:	23f5      	movs	r3, #245	; 0xf5
 800dc9e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	7bfa      	ldrb	r2, [r7, #15]
 800dca4:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dca6:	bf00      	nop
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}

0800dcae <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dcae:	b580      	push	{r7, lr}
 800dcb0:	b086      	sub	sp, #24
 800dcb2:	af00      	add	r7, sp, #0
 800dcb4:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	685b      	ldr	r3, [r3, #4]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d022      	beq.n	800dd10 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcd4:	2b10      	cmp	r3, #16
 800dcd6:	d11b      	bne.n	800dd10 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dcd8:	693b      	ldr	r3, [r7, #16]
 800dcda:	689b      	ldr	r3, [r3, #8]
 800dcdc:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dce4:	d202      	bcs.n	800dcec <lwip_netconn_do_recv+0x3e>
 800dce6:	697b      	ldr	r3, [r7, #20]
 800dce8:	b29b      	uxth	r3, r3
 800dcea:	e001      	b.n	800dcf0 <lwip_netconn_do_recv+0x42>
 800dcec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dcf0:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	685b      	ldr	r3, [r3, #4]
 800dcf8:	89fa      	ldrh	r2, [r7, #14]
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	f004 fb93 	bl	8012428 <tcp_recved>
        remaining -= recved;
 800dd02:	89fb      	ldrh	r3, [r7, #14]
 800dd04:	697a      	ldr	r2, [r7, #20]
 800dd06:	1ad3      	subs	r3, r2, r3
 800dd08:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1e6      	bne.n	800dcde <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dd10:	bf00      	nop
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b088      	sub	sp, #32
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]
 800dd20:	460b      	mov	r3, r1
 800dd22:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800dd24:	2300      	movs	r3, #0
 800dd26:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d106      	bne.n	800dd3c <lwip_netconn_do_writemore+0x24>
 800dd2e:	4b96      	ldr	r3, [pc, #600]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dd30:	f240 6273 	movw	r2, #1651	; 0x673
 800dd34:	4995      	ldr	r1, [pc, #596]	; (800df8c <lwip_netconn_do_writemore+0x274>)
 800dd36:	4896      	ldr	r0, [pc, #600]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800dd38:	f00d ffa8 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	785b      	ldrb	r3, [r3, #1]
 800dd40:	2b01      	cmp	r3, #1
 800dd42:	d006      	beq.n	800dd52 <lwip_netconn_do_writemore+0x3a>
 800dd44:	4b90      	ldr	r3, [pc, #576]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dd46:	f240 6274 	movw	r2, #1652	; 0x674
 800dd4a:	4992      	ldr	r1, [pc, #584]	; (800df94 <lwip_netconn_do_writemore+0x27c>)
 800dd4c:	4890      	ldr	r0, [pc, #576]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800dd4e:	f00d ff9d 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	6a1b      	ldr	r3, [r3, #32]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <lwip_netconn_do_writemore+0x50>
 800dd5a:	4b8b      	ldr	r3, [pc, #556]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dd5c:	f240 6275 	movw	r2, #1653	; 0x675
 800dd60:	498d      	ldr	r1, [pc, #564]	; (800df98 <lwip_netconn_do_writemore+0x280>)
 800dd62:	488b      	ldr	r0, [pc, #556]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800dd64:	f00d ff92 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d106      	bne.n	800dd7e <lwip_netconn_do_writemore+0x66>
 800dd70:	4b85      	ldr	r3, [pc, #532]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dd72:	f240 6276 	movw	r2, #1654	; 0x676
 800dd76:	4989      	ldr	r1, [pc, #548]	; (800df9c <lwip_netconn_do_writemore+0x284>)
 800dd78:	4885      	ldr	r0, [pc, #532]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800dd7a:	f00d ff87 	bl	801bc8c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	6a1b      	ldr	r3, [r3, #32]
 800dd82:	699a      	ldr	r2, [r3, #24]
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6a1b      	ldr	r3, [r3, #32]
 800dd88:	695b      	ldr	r3, [r3, #20]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d306      	bcc.n	800dd9c <lwip_netconn_do_writemore+0x84>
 800dd8e:	4b7e      	ldr	r3, [pc, #504]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dd90:	f240 6277 	movw	r2, #1655	; 0x677
 800dd94:	4982      	ldr	r1, [pc, #520]	; (800dfa0 <lwip_netconn_do_writemore+0x288>)
 800dd96:	487e      	ldr	r0, [pc, #504]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800dd98:	f00d ff78 	bl	801bc8c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6a1b      	ldr	r3, [r3, #32]
 800dda0:	899b      	ldrh	r3, [r3, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d106      	bne.n	800ddb4 <lwip_netconn_do_writemore+0x9c>
 800dda6:	4b78      	ldr	r3, [pc, #480]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800dda8:	f240 6279 	movw	r2, #1657	; 0x679
 800ddac:	497d      	ldr	r1, [pc, #500]	; (800dfa4 <lwip_netconn_do_writemore+0x28c>)
 800ddae:	4878      	ldr	r0, [pc, #480]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800ddb0:	f00d ff6c 	bl	801bc8c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a1b      	ldr	r3, [r3, #32]
 800ddb8:	7f1b      	ldrb	r3, [r3, #28]
 800ddba:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7f1b      	ldrb	r3, [r3, #28]
 800ddc0:	f003 0302 	and.w	r3, r3, #2
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d104      	bne.n	800ddd2 <lwip_netconn_do_writemore+0xba>
 800ddc8:	7ebb      	ldrb	r3, [r7, #26]
 800ddca:	f003 0304 	and.w	r3, r3, #4
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <lwip_netconn_do_writemore+0xbe>
 800ddd2:	2301      	movs	r3, #1
 800ddd4:	e000      	b.n	800ddd8 <lwip_netconn_do_writemore+0xc0>
 800ddd6:	2300      	movs	r3, #0
 800ddd8:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	6a1b      	ldr	r3, [r3, #32]
 800ddde:	689b      	ldr	r3, [r3, #8]
 800dde0:	681a      	ldr	r2, [r3, #0]
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6a1b      	ldr	r3, [r3, #32]
 800dde6:	691b      	ldr	r3, [r3, #16]
 800dde8:	4413      	add	r3, r2
 800ddea:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6a1b      	ldr	r3, [r3, #32]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	685a      	ldr	r2, [r3, #4]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6a1b      	ldr	r3, [r3, #32]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	1ad3      	subs	r3, r2, r3
 800ddfc:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de04:	d307      	bcc.n	800de16 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800de06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de0a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800de0c:	7ebb      	ldrb	r3, [r7, #26]
 800de0e:	f043 0302 	orr.w	r3, r3, #2
 800de12:	76bb      	strb	r3, [r7, #26]
 800de14:	e001      	b.n	800de1a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800de22:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800de24:	89fa      	ldrh	r2, [r7, #14]
 800de26:	8bbb      	ldrh	r3, [r7, #28]
 800de28:	429a      	cmp	r2, r3
 800de2a:	d216      	bcs.n	800de5a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800de2c:	89fb      	ldrh	r3, [r7, #14]
 800de2e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800de30:	7e3b      	ldrb	r3, [r7, #24]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d00d      	beq.n	800de52 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800de36:	8bbb      	ldrh	r3, [r7, #28]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d10e      	bne.n	800de5a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6a1b      	ldr	r3, [r3, #32]
 800de40:	699b      	ldr	r3, [r3, #24]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d102      	bne.n	800de4c <lwip_netconn_do_writemore+0x134>
 800de46:	f06f 0306 	mvn.w	r3, #6
 800de4a:	e000      	b.n	800de4e <lwip_netconn_do_writemore+0x136>
 800de4c:	2300      	movs	r3, #0
 800de4e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800de50:	e07d      	b.n	800df4e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800de52:	7ebb      	ldrb	r3, [r7, #26]
 800de54:	f043 0302 	orr.w	r3, r3, #2
 800de58:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	691a      	ldr	r2, [r3, #16]
 800de60:	8bbb      	ldrh	r3, [r7, #28]
 800de62:	441a      	add	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6a1b      	ldr	r3, [r3, #32]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	429a      	cmp	r2, r3
 800de6e:	d906      	bls.n	800de7e <lwip_netconn_do_writemore+0x166>
 800de70:	4b45      	ldr	r3, [pc, #276]	; (800df88 <lwip_netconn_do_writemore+0x270>)
 800de72:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800de76:	494c      	ldr	r1, [pc, #304]	; (800dfa8 <lwip_netconn_do_writemore+0x290>)
 800de78:	4845      	ldr	r0, [pc, #276]	; (800df90 <lwip_netconn_do_writemore+0x278>)
 800de7a:	f00d ff07 	bl	801bc8c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800de7e:	8bbb      	ldrh	r3, [r7, #28]
 800de80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800de84:	4293      	cmp	r3, r2
 800de86:	d103      	bne.n	800de90 <lwip_netconn_do_writemore+0x178>
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de8e:	d209      	bcs.n	800dea4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800de90:	693b      	ldr	r3, [r7, #16]
 800de92:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800de94:	8bba      	ldrh	r2, [r7, #28]
 800de96:	429a      	cmp	r2, r3
 800de98:	d10b      	bne.n	800deb2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	899b      	ldrh	r3, [r3, #12]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d906      	bls.n	800deb2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800dea4:	2301      	movs	r3, #1
 800dea6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800dea8:	7ebb      	ldrb	r3, [r7, #26]
 800deaa:	f043 0302 	orr.w	r3, r3, #2
 800deae:	76bb      	strb	r3, [r7, #26]
 800deb0:	e001      	b.n	800deb6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800deb2:	2300      	movs	r3, #0
 800deb4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6858      	ldr	r0, [r3, #4]
 800deba:	7ebb      	ldrb	r3, [r7, #26]
 800debc:	8bba      	ldrh	r2, [r7, #28]
 800debe:	6979      	ldr	r1, [r7, #20]
 800dec0:	f008 f8b6 	bl	8016030 <tcp_write>
 800dec4:	4603      	mov	r3, r0
 800dec6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800dec8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d12c      	bne.n	800df2a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6a1b      	ldr	r3, [r3, #32]
 800ded4:	6999      	ldr	r1, [r3, #24]
 800ded6:	8bba      	ldrh	r2, [r7, #28]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a1b      	ldr	r3, [r3, #32]
 800dedc:	440a      	add	r2, r1
 800dede:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	6a1b      	ldr	r3, [r3, #32]
 800dee4:	6919      	ldr	r1, [r3, #16]
 800dee6:	8bba      	ldrh	r2, [r7, #28]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6a1b      	ldr	r3, [r3, #32]
 800deec:	440a      	add	r2, r1
 800deee:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	6a1b      	ldr	r3, [r3, #32]
 800def4:	691a      	ldr	r2, [r3, #16]
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a1b      	ldr	r3, [r3, #32]
 800defa:	689b      	ldr	r3, [r3, #8]
 800defc:	685b      	ldr	r3, [r3, #4]
 800defe:	429a      	cmp	r2, r3
 800df00:	d113      	bne.n	800df2a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	899a      	ldrh	r2, [r3, #12]
 800df08:	3a01      	subs	r2, #1
 800df0a:	b292      	uxth	r2, r2
 800df0c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6a1b      	ldr	r3, [r3, #32]
 800df12:	899b      	ldrh	r3, [r3, #12]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d008      	beq.n	800df2a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a1b      	ldr	r3, [r3, #32]
 800df1c:	689a      	ldr	r2, [r3, #8]
 800df1e:	3208      	adds	r2, #8
 800df20:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	6a1b      	ldr	r3, [r3, #32]
 800df26:	2200      	movs	r2, #0
 800df28:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800df2a:	7e7b      	ldrb	r3, [r7, #25]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d004      	beq.n	800df3a <lwip_netconn_do_writemore+0x222>
 800df30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df34:	2b00      	cmp	r3, #0
 800df36:	f43f af50 	beq.w	800ddda <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800df3a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d004      	beq.n	800df4c <lwip_netconn_do_writemore+0x234>
 800df42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4a:	d146      	bne.n	800dfda <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800df4c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800df4e:	7e3b      	ldrb	r3, [r7, #24]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d02b      	beq.n	800dfac <lwip_netconn_do_writemore+0x294>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6a1b      	ldr	r3, [r3, #32]
 800df58:	699a      	ldr	r2, [r3, #24]
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6a1b      	ldr	r3, [r3, #32]
 800df5e:	695b      	ldr	r3, [r3, #20]
 800df60:	429a      	cmp	r2, r3
 800df62:	d223      	bcs.n	800dfac <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d005      	beq.n	800df78 <lwip_netconn_do_writemore+0x260>
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df70:	2200      	movs	r2, #0
 800df72:	2103      	movs	r1, #3
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	7f1b      	ldrb	r3, [r3, #28]
 800df7c:	f043 0310 	orr.w	r3, r3, #16
 800df80:	b2da      	uxtb	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	771a      	strb	r2, [r3, #28]
 800df86:	e028      	b.n	800dfda <lwip_netconn_do_writemore+0x2c2>
 800df88:	0801e5b8 	.word	0x0801e5b8
 800df8c:	0801e710 	.word	0x0801e710
 800df90:	0801e5fc 	.word	0x0801e5fc
 800df94:	0801ea18 	.word	0x0801ea18
 800df98:	0801e720 	.word	0x0801e720
 800df9c:	0801ea38 	.word	0x0801ea38
 800dfa0:	0801ea50 	.word	0x0801ea50
 800dfa4:	0801ea90 	.word	0x0801ea90
 800dfa8:	0801eab8 	.word	0x0801eab8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685b      	ldr	r3, [r3, #4]
 800dfb0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dfb4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dfb8:	d305      	bcc.n	800dfc6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800dfc2:	2b04      	cmp	r3, #4
 800dfc4:	d909      	bls.n	800dfda <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d005      	beq.n	800dfda <lwip_netconn_do_writemore+0x2c2>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	2103      	movs	r1, #3
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800dfda:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d11d      	bne.n	800e01e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6a1b      	ldr	r3, [r3, #32]
 800dfe6:	699a      	ldr	r2, [r3, #24]
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6a1b      	ldr	r3, [r3, #32]
 800dfec:	695b      	ldr	r3, [r3, #20]
 800dfee:	429a      	cmp	r2, r3
 800dff0:	d002      	beq.n	800dff8 <lwip_netconn_do_writemore+0x2e0>
 800dff2:	7e3b      	ldrb	r3, [r7, #24]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d001      	beq.n	800dffc <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800dff8:	2301      	movs	r3, #1
 800dffa:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	685b      	ldr	r3, [r3, #4]
 800e000:	4618      	mov	r0, r3
 800e002:	f008 fdff 	bl	8016c04 <tcp_output>
 800e006:	4603      	mov	r3, r0
 800e008:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e00a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e00e:	f113 0f04 	cmn.w	r3, #4
 800e012:	d12c      	bne.n	800e06e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e014:	7b3b      	ldrb	r3, [r7, #12]
 800e016:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e018:	2301      	movs	r3, #1
 800e01a:	76fb      	strb	r3, [r7, #27]
 800e01c:	e027      	b.n	800e06e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e01e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e022:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e026:	d120      	bne.n	800e06a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	4618      	mov	r0, r3
 800e02e:	f008 fde9 	bl	8016c04 <tcp_output>
 800e032:	4603      	mov	r3, r0
 800e034:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e036:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e03a:	f113 0f04 	cmn.w	r3, #4
 800e03e:	d104      	bne.n	800e04a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e040:	7b7b      	ldrb	r3, [r7, #13]
 800e042:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e044:	2301      	movs	r3, #1
 800e046:	76fb      	strb	r3, [r7, #27]
 800e048:	e011      	b.n	800e06e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e04a:	7e3b      	ldrb	r3, [r7, #24]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d00e      	beq.n	800e06e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6a1b      	ldr	r3, [r3, #32]
 800e054:	699b      	ldr	r3, [r3, #24]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d102      	bne.n	800e060 <lwip_netconn_do_writemore+0x348>
 800e05a:	f06f 0306 	mvn.w	r3, #6
 800e05e:	e000      	b.n	800e062 <lwip_netconn_do_writemore+0x34a>
 800e060:	2300      	movs	r3, #0
 800e062:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e064:	2301      	movs	r3, #1
 800e066:	76fb      	strb	r3, [r7, #27]
 800e068:	e001      	b.n	800e06e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e06a:	2301      	movs	r3, #1
 800e06c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e06e:	7efb      	ldrb	r3, [r7, #27]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d015      	beq.n	800e0a0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	6a1b      	ldr	r3, [r3, #32]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	330c      	adds	r3, #12
 800e07c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	7ffa      	ldrb	r2, [r7, #31]
 800e084:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e092:	78fb      	ldrb	r3, [r7, #3]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d006      	beq.n	800e0a6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e098:	68b8      	ldr	r0, [r7, #8]
 800e09a:	f00d f8ab 	bl	801b1f4 <sys_sem_signal>
 800e09e:	e002      	b.n	800e0a6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e0a0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a4:	e000      	b.n	800e0a8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3720      	adds	r7, #32
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b084      	sub	sp, #16
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e0bc:	68bb      	ldr	r3, [r7, #8]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7fe fe27 	bl	800cd14 <netconn_err>
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d166      	bne.n	800e1a0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0dc:	2b10      	cmp	r3, #16
 800e0de:	d15d      	bne.n	800e19c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	785b      	ldrb	r3, [r3, #1]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d002      	beq.n	800e0f0 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e0ea:	23fb      	movs	r3, #251	; 0xfb
 800e0ec:	73fb      	strb	r3, [r7, #15]
 800e0ee:	e057      	b.n	800e1a0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	685b      	ldr	r3, [r3, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d04d      	beq.n	800e196 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e0fa:	68bb      	ldr	r3, [r7, #8]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2201      	movs	r2, #1
 800e100:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e102:	68bb      	ldr	r3, [r7, #8]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	6a1b      	ldr	r3, [r3, #32]
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d006      	beq.n	800e11a <lwip_netconn_do_write+0x6a>
 800e10c:	4b28      	ldr	r3, [pc, #160]	; (800e1b0 <lwip_netconn_do_write+0x100>)
 800e10e:	f240 7223 	movw	r2, #1827	; 0x723
 800e112:	4928      	ldr	r1, [pc, #160]	; (800e1b4 <lwip_netconn_do_write+0x104>)
 800e114:	4828      	ldr	r0, [pc, #160]	; (800e1b8 <lwip_netconn_do_write+0x108>)
 800e116:	f00d fdb9 	bl	801bc8c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	695b      	ldr	r3, [r3, #20]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d106      	bne.n	800e130 <lwip_netconn_do_write+0x80>
 800e122:	4b23      	ldr	r3, [pc, #140]	; (800e1b0 <lwip_netconn_do_write+0x100>)
 800e124:	f240 7224 	movw	r2, #1828	; 0x724
 800e128:	4924      	ldr	r1, [pc, #144]	; (800e1bc <lwip_netconn_do_write+0x10c>)
 800e12a:	4823      	ldr	r0, [pc, #140]	; (800e1b8 <lwip_netconn_do_write+0x108>)
 800e12c:	f00d fdae 	bl	801bc8c <iprintf>
        msg->conn->current_msg = msg;
 800e130:	68bb      	ldr	r3, [r7, #8]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	68ba      	ldr	r2, [r7, #8]
 800e136:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e138:	68bb      	ldr	r3, [r7, #8]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	2100      	movs	r1, #0
 800e13e:	4618      	mov	r0, r3
 800e140:	f7ff fdea 	bl	800dd18 <lwip_netconn_do_writemore>
 800e144:	4603      	mov	r3, r0
 800e146:	2b00      	cmp	r3, #0
 800e148:	d02e      	beq.n	800e1a8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	785b      	ldrb	r3, [r3, #1]
 800e150:	2b01      	cmp	r3, #1
 800e152:	d006      	beq.n	800e162 <lwip_netconn_do_write+0xb2>
 800e154:	4b16      	ldr	r3, [pc, #88]	; (800e1b0 <lwip_netconn_do_write+0x100>)
 800e156:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e15a:	4919      	ldr	r1, [pc, #100]	; (800e1c0 <lwip_netconn_do_write+0x110>)
 800e15c:	4816      	ldr	r0, [pc, #88]	; (800e1b8 <lwip_netconn_do_write+0x108>)
 800e15e:	f00d fd95 	bl	801bc8c <iprintf>
          UNLOCK_TCPIP_CORE();
 800e162:	4818      	ldr	r0, [pc, #96]	; (800e1c4 <lwip_netconn_do_write+0x114>)
 800e164:	f00d f8b7 	bl	801b2d6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	330c      	adds	r3, #12
 800e16e:	2100      	movs	r1, #0
 800e170:	4618      	mov	r0, r3
 800e172:	f00d f80e 	bl	801b192 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e176:	4813      	ldr	r0, [pc, #76]	; (800e1c4 <lwip_netconn_do_write+0x114>)
 800e178:	f00d f89e 	bl	801b2b8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	785b      	ldrb	r3, [r3, #1]
 800e182:	2b01      	cmp	r3, #1
 800e184:	d110      	bne.n	800e1a8 <lwip_netconn_do_write+0xf8>
 800e186:	4b0a      	ldr	r3, [pc, #40]	; (800e1b0 <lwip_netconn_do_write+0x100>)
 800e188:	f240 722c 	movw	r2, #1836	; 0x72c
 800e18c:	490c      	ldr	r1, [pc, #48]	; (800e1c0 <lwip_netconn_do_write+0x110>)
 800e18e:	480a      	ldr	r0, [pc, #40]	; (800e1b8 <lwip_netconn_do_write+0x108>)
 800e190:	f00d fd7c 	bl	801bc8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e194:	e008      	b.n	800e1a8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e196:	23f5      	movs	r3, #245	; 0xf5
 800e198:	73fb      	strb	r3, [r7, #15]
 800e19a:	e001      	b.n	800e1a0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e19c:	23fa      	movs	r3, #250	; 0xfa
 800e19e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	7bfa      	ldrb	r2, [r7, #15]
 800e1a4:	711a      	strb	r2, [r3, #4]
 800e1a6:	e000      	b.n	800e1aa <lwip_netconn_do_write+0xfa>
        return;
 800e1a8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	0801e5b8 	.word	0x0801e5b8
 800e1b4:	0801e95c 	.word	0x0801e95c
 800e1b8:	0801e5fc 	.word	0x0801e5fc
 800e1bc:	0801eae4 	.word	0x0801eae4
 800e1c0:	0801e978 	.word	0x0801e978
 800e1c4:	2000a0a4 	.word	0x2000a0a4

0800e1c8 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b084      	sub	sp, #16
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	685b      	ldr	r3, [r3, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d06b      	beq.n	800e2b6 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	7c1b      	ldrb	r3, [r3, #16]
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d007      	beq.n	800e1f6 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	685a      	ldr	r2, [r3, #4]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	689b      	ldr	r3, [r3, #8]
 800e1f0:	6812      	ldr	r2, [r2, #0]
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	e006      	b.n	800e204 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	685a      	ldr	r2, [r3, #4]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	689b      	ldr	r3, [r3, #8]
 800e200:	6852      	ldr	r2, [r2, #4]
 800e202:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e214:	2b10      	cmp	r3, #16
 800e216:	d021      	beq.n	800e25c <lwip_netconn_do_getaddr+0x94>
 800e218:	2b20      	cmp	r3, #32
 800e21a:	d144      	bne.n	800e2a6 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	7c1b      	ldrb	r3, [r3, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d007      	beq.n	800e234 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	68db      	ldr	r3, [r3, #12]
 800e22e:	8a52      	ldrh	r2, [r2, #18]
 800e230:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800e232:	e044      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	7c1b      	ldrb	r3, [r3, #16]
 800e23c:	f003 0304 	and.w	r3, r3, #4
 800e240:	2b00      	cmp	r3, #0
 800e242:	d103      	bne.n	800e24c <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	22f5      	movs	r2, #245	; 0xf5
 800e248:	711a      	strb	r2, [r3, #4]
        break;
 800e24a:	e038      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	685a      	ldr	r2, [r3, #4]
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	8a92      	ldrh	r2, [r2, #20]
 800e258:	801a      	strh	r2, [r3, #0]
        break;
 800e25a:	e030      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	7c1b      	ldrb	r3, [r3, #16]
 800e260:	2b00      	cmp	r3, #0
 800e262:	d10f      	bne.n	800e284 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d005      	beq.n	800e27c <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	685b      	ldr	r3, [r3, #4]
 800e276:	7d1b      	ldrb	r3, [r3, #20]
 800e278:	2b01      	cmp	r3, #1
 800e27a:	d103      	bne.n	800e284 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	22f5      	movs	r2, #245	; 0xf5
 800e280:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800e282:	e01c      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	7c1b      	ldrb	r3, [r3, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <lwip_netconn_do_getaddr+0xce>
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	685b      	ldr	r3, [r3, #4]
 800e292:	8adb      	ldrh	r3, [r3, #22]
 800e294:	e003      	b.n	800e29e <lwip_netconn_do_getaddr+0xd6>
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	685b      	ldr	r3, [r3, #4]
 800e29c:	8b1b      	ldrh	r3, [r3, #24]
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	68d2      	ldr	r2, [r2, #12]
 800e2a2:	8013      	strh	r3, [r2, #0]
        break;
 800e2a4:	e00b      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800e2a6:	4b08      	ldr	r3, [pc, #32]	; (800e2c8 <lwip_netconn_do_getaddr+0x100>)
 800e2a8:	f240 727d 	movw	r2, #1917	; 0x77d
 800e2ac:	4907      	ldr	r1, [pc, #28]	; (800e2cc <lwip_netconn_do_getaddr+0x104>)
 800e2ae:	4808      	ldr	r0, [pc, #32]	; (800e2d0 <lwip_netconn_do_getaddr+0x108>)
 800e2b0:	f00d fcec 	bl	801bc8c <iprintf>
        break;
 800e2b4:	e003      	b.n	800e2be <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	22f5      	movs	r2, #245	; 0xf5
 800e2ba:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e2bc:	bf00      	nop
 800e2be:	bf00      	nop
 800e2c0:	3710      	adds	r7, #16
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}
 800e2c6:	bf00      	nop
 800e2c8:	0801e5b8 	.word	0x0801e5b8
 800e2cc:	0801eaf8 	.word	0x0801eaf8
 800e2d0:	0801e5fc 	.word	0x0801e5fc

0800e2d4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	785b      	ldrb	r3, [r3, #1]
 800e2e6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	685b      	ldr	r3, [r3, #4]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d069      	beq.n	800e3c6 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	781b      	ldrb	r3, [r3, #0]
 800e2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e2fc:	2b10      	cmp	r3, #16
 800e2fe:	d162      	bne.n	800e3c6 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e304:	2b03      	cmp	r3, #3
 800e306:	d002      	beq.n	800e30e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e308:	7afb      	ldrb	r3, [r7, #11]
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d05b      	beq.n	800e3c6 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e30e:	7afb      	ldrb	r3, [r7, #11]
 800e310:	2b03      	cmp	r3, #3
 800e312:	d103      	bne.n	800e31c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	22f5      	movs	r2, #245	; 0xf5
 800e318:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e31a:	e059      	b.n	800e3d0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e31c:	7afb      	ldrb	r3, [r7, #11]
 800e31e:	2b01      	cmp	r3, #1
 800e320:	d103      	bne.n	800e32a <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	22fb      	movs	r2, #251	; 0xfb
 800e326:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e328:	e052      	b.n	800e3d0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	7a1b      	ldrb	r3, [r3, #8]
 800e32e:	f003 0301 	and.w	r3, r3, #1
 800e332:	2b00      	cmp	r3, #0
 800e334:	d004      	beq.n	800e340 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7ff f968 	bl	800d610 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d006      	beq.n	800e358 <lwip_netconn_do_close+0x84>
 800e34a:	4b23      	ldr	r3, [pc, #140]	; (800e3d8 <lwip_netconn_do_close+0x104>)
 800e34c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e350:	4922      	ldr	r1, [pc, #136]	; (800e3dc <lwip_netconn_do_close+0x108>)
 800e352:	4823      	ldr	r0, [pc, #140]	; (800e3e0 <lwip_netconn_do_close+0x10c>)
 800e354:	f00d fc9a 	bl	801bc8c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	2204      	movs	r2, #4
 800e35e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68fa      	ldr	r2, [r7, #12]
 800e366:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	2100      	movs	r1, #0
 800e36e:	4618      	mov	r0, r3
 800e370:	f7ff f9cc 	bl	800d70c <lwip_netconn_do_close_internal>
 800e374:	4603      	mov	r3, r0
 800e376:	2b00      	cmp	r3, #0
 800e378:	d029      	beq.n	800e3ce <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	785b      	ldrb	r3, [r3, #1]
 800e380:	2b04      	cmp	r3, #4
 800e382:	d006      	beq.n	800e392 <lwip_netconn_do_close+0xbe>
 800e384:	4b14      	ldr	r3, [pc, #80]	; (800e3d8 <lwip_netconn_do_close+0x104>)
 800e386:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e38a:	4916      	ldr	r1, [pc, #88]	; (800e3e4 <lwip_netconn_do_close+0x110>)
 800e38c:	4814      	ldr	r0, [pc, #80]	; (800e3e0 <lwip_netconn_do_close+0x10c>)
 800e38e:	f00d fc7d 	bl	801bc8c <iprintf>
        UNLOCK_TCPIP_CORE();
 800e392:	4815      	ldr	r0, [pc, #84]	; (800e3e8 <lwip_netconn_do_close+0x114>)
 800e394:	f00c ff9f 	bl	801b2d6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	330c      	adds	r3, #12
 800e39e:	2100      	movs	r1, #0
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f00c fef6 	bl	801b192 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e3a6:	4810      	ldr	r0, [pc, #64]	; (800e3e8 <lwip_netconn_do_close+0x114>)
 800e3a8:	f00c ff86 	bl	801b2b8 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	785b      	ldrb	r3, [r3, #1]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d00b      	beq.n	800e3ce <lwip_netconn_do_close+0xfa>
 800e3b6:	4b08      	ldr	r3, [pc, #32]	; (800e3d8 <lwip_netconn_do_close+0x104>)
 800e3b8:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e3bc:	4909      	ldr	r1, [pc, #36]	; (800e3e4 <lwip_netconn_do_close+0x110>)
 800e3be:	4808      	ldr	r0, [pc, #32]	; (800e3e0 <lwip_netconn_do_close+0x10c>)
 800e3c0:	f00d fc64 	bl	801bc8c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e3c4:	e003      	b.n	800e3ce <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	22f5      	movs	r2, #245	; 0xf5
 800e3ca:	711a      	strb	r2, [r3, #4]
 800e3cc:	e000      	b.n	800e3d0 <lwip_netconn_do_close+0xfc>
      return;
 800e3ce:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e3d0:	3710      	adds	r7, #16
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bd80      	pop	{r7, pc}
 800e3d6:	bf00      	nop
 800e3d8:	0801e5b8 	.word	0x0801e5b8
 800e3dc:	0801e95c 	.word	0x0801e95c
 800e3e0:	0801e5fc 	.word	0x0801e5fc
 800e3e4:	0801e978 	.word	0x0801e978
 800e3e8:	2000a0a4 	.word	0x2000a0a4

0800e3ec <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e3ec:	b480      	push	{r7}
 800e3ee:	b083      	sub	sp, #12
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e3f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	dc04      	bgt.n	800e408 <err_to_errno+0x1c>
 800e3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e402:	f113 0f10 	cmn.w	r3, #16
 800e406:	da01      	bge.n	800e40c <err_to_errno+0x20>
    return EIO;
 800e408:	2305      	movs	r3, #5
 800e40a:	e005      	b.n	800e418 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e40c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e410:	425b      	negs	r3, r3
 800e412:	4a04      	ldr	r2, [pc, #16]	; (800e424 <err_to_errno+0x38>)
 800e414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	370c      	adds	r7, #12
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	08021b94 	.word	0x08021b94

0800e428 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d013      	beq.n	800e45e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d00b      	beq.n	800e456 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	4618      	mov	r0, r3
 800e444:	f003 f8f2 	bl	801162c <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	2200      	movs	r2, #0
 800e44c:	605a      	str	r2, [r3, #4]
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	685a      	ldr	r2, [r3, #4]
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e456:	6879      	ldr	r1, [r7, #4]
 800e458:	2006      	movs	r0, #6
 800e45a:	f002 fa11 	bl	8010880 <memp_free>
  }
}
 800e45e:	bf00      	nop
 800e460:	3708      	adds	r7, #8
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b082      	sub	sp, #8
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d106      	bne.n	800e484 <netbuf_free+0x1c>
 800e476:	4b0d      	ldr	r3, [pc, #52]	; (800e4ac <netbuf_free+0x44>)
 800e478:	2281      	movs	r2, #129	; 0x81
 800e47a:	490d      	ldr	r1, [pc, #52]	; (800e4b0 <netbuf_free+0x48>)
 800e47c:	480d      	ldr	r0, [pc, #52]	; (800e4b4 <netbuf_free+0x4c>)
 800e47e:	f00d fc05 	bl	801bc8c <iprintf>
 800e482:	e00f      	b.n	800e4a4 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d004      	beq.n	800e496 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f003 f8cb 	bl	801162c <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	605a      	str	r2, [r3, #4]
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	685a      	ldr	r2, [r3, #4]
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e4a4:	3708      	adds	r7, #8
 800e4a6:	46bd      	mov	sp, r7
 800e4a8:	bd80      	pop	{r7, pc}
 800e4aa:	bf00      	nop
 800e4ac:	0801eb10 	.word	0x0801eb10
 800e4b0:	0801ebac 	.word	0x0801ebac
 800e4b4:	0801eb60 	.word	0x0801eb60

0800e4b8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e4b8:	b580      	push	{r7, lr}
 800e4ba:	b084      	sub	sp, #16
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	60f8      	str	r0, [r7, #12]
 800e4c0:	60b9      	str	r1, [r7, #8]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d108      	bne.n	800e4de <netbuf_ref+0x26>
 800e4cc:	4b1c      	ldr	r3, [pc, #112]	; (800e540 <netbuf_ref+0x88>)
 800e4ce:	2299      	movs	r2, #153	; 0x99
 800e4d0:	491c      	ldr	r1, [pc, #112]	; (800e544 <netbuf_ref+0x8c>)
 800e4d2:	481d      	ldr	r0, [pc, #116]	; (800e548 <netbuf_ref+0x90>)
 800e4d4:	f00d fbda 	bl	801bc8c <iprintf>
 800e4d8:	f06f 030f 	mvn.w	r3, #15
 800e4dc:	e02b      	b.n	800e536 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f003 f89e 	bl	801162c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e4f0:	2241      	movs	r2, #65	; 0x41
 800e4f2:	2100      	movs	r1, #0
 800e4f4:	2036      	movs	r0, #54	; 0x36
 800e4f6:	f002 fd83 	bl	8011000 <pbuf_alloc>
 800e4fa:	4602      	mov	r2, r0
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d105      	bne.n	800e514 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2200      	movs	r2, #0
 800e50c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e50e:	f04f 33ff 	mov.w	r3, #4294967295
 800e512:	e010      	b.n	800e536 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	88fa      	ldrh	r2, [r7, #6]
 800e522:	811a      	strh	r2, [r3, #8]
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	6812      	ldr	r2, [r2, #0]
 800e528:	891b      	ldrh	r3, [r3, #8]
 800e52a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	681a      	ldr	r2, [r3, #0]
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e534:	2300      	movs	r3, #0
}
 800e536:	4618      	mov	r0, r3
 800e538:	3710      	adds	r7, #16
 800e53a:	46bd      	mov	sp, r7
 800e53c:	bd80      	pop	{r7, pc}
 800e53e:	bf00      	nop
 800e540:	0801eb10 	.word	0x0801eb10
 800e544:	0801ebc8 	.word	0x0801ebc8
 800e548:	0801eb60 	.word	0x0801eb60

0800e54c <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b085      	sub	sp, #20
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	db02      	blt.n	800e564 <tryget_socket_unconn_nouse+0x18>
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	2b03      	cmp	r3, #3
 800e562:	dd01      	ble.n	800e568 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e564:	2300      	movs	r3, #0
 800e566:	e003      	b.n	800e570 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	011b      	lsls	r3, r3, #4
 800e56c:	4a03      	ldr	r2, [pc, #12]	; (800e57c <tryget_socket_unconn_nouse+0x30>)
 800e56e:	4413      	add	r3, r2
}
 800e570:	4618      	mov	r0, r3
 800e572:	3714      	adds	r7, #20
 800e574:	46bd      	mov	sp, r7
 800e576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57a:	4770      	bx	lr
 800e57c:	2000475c 	.word	0x2000475c

0800e580 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b084      	sub	sp, #16
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e588:	6878      	ldr	r0, [r7, #4]
 800e58a:	f7ff ffdf 	bl	800e54c <tryget_socket_unconn_nouse>
 800e58e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e590:	68fb      	ldr	r3, [r7, #12]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3710      	adds	r7, #16
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b084      	sub	sp, #16
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e5a2:	6878      	ldr	r0, [r7, #4]
 800e5a4:	f7ff ffd2 	bl	800e54c <tryget_socket_unconn_nouse>
 800e5a8:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800e5aa:	68fb      	ldr	r3, [r7, #12]
}
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	3710      	adds	r7, #16
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7ff ffdf 	bl	800e580 <tryget_socket_unconn>
 800e5c2:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d005      	beq.n	800e5d6 <tryget_socket+0x22>
    if (sock->conn) {
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d001      	beq.n	800e5d6 <tryget_socket+0x22>
      return sock;
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	e000      	b.n	800e5d8 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e5d6:	2300      	movs	r3, #0
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3710      	adds	r7, #16
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e5e8:	6878      	ldr	r0, [r7, #4]
 800e5ea:	f7ff ffe3 	bl	800e5b4 <tryget_socket>
 800e5ee:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d104      	bne.n	800e600 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <get_socket+0x2c>)
 800e5f8:	2209      	movs	r2, #9
 800e5fa:	601a      	str	r2, [r3, #0]
    return NULL;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	e000      	b.n	800e602 <get_socket+0x22>
  }
  return sock;
 800e600:	68fb      	ldr	r3, [r7, #12]
}
 800e602:	4618      	mov	r0, r3
 800e604:	3710      	adds	r7, #16
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	2000d7d8 	.word	0x2000d7d8

0800e610 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b084      	sub	sp, #16
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e61a:	2300      	movs	r3, #0
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	e052      	b.n	800e6c6 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e620:	f00c fe8c 	bl	801b33c <sys_arch_protect>
 800e624:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e626:	4a2c      	ldr	r2, [pc, #176]	; (800e6d8 <alloc_socket+0xc8>)
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	011b      	lsls	r3, r3, #4
 800e62c:	4413      	add	r3, r2
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d142      	bne.n	800e6ba <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e634:	4a28      	ldr	r2, [pc, #160]	; (800e6d8 <alloc_socket+0xc8>)
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	011b      	lsls	r3, r3, #4
 800e63a:	4413      	add	r3, r2
 800e63c:	687a      	ldr	r2, [r7, #4]
 800e63e:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e640:	68b8      	ldr	r0, [r7, #8]
 800e642:	f00c fe89 	bl	801b358 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e646:	4a24      	ldr	r2, [pc, #144]	; (800e6d8 <alloc_socket+0xc8>)
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	011b      	lsls	r3, r3, #4
 800e64c:	4413      	add	r3, r2
 800e64e:	3304      	adds	r3, #4
 800e650:	2200      	movs	r2, #0
 800e652:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e654:	4a20      	ldr	r2, [pc, #128]	; (800e6d8 <alloc_socket+0xc8>)
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	011b      	lsls	r3, r3, #4
 800e65a:	4413      	add	r3, r2
 800e65c:	330e      	adds	r3, #14
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <alloc_socket+0x62>
 800e664:	4b1d      	ldr	r3, [pc, #116]	; (800e6dc <alloc_socket+0xcc>)
 800e666:	f240 220e 	movw	r2, #526	; 0x20e
 800e66a:	491d      	ldr	r1, [pc, #116]	; (800e6e0 <alloc_socket+0xd0>)
 800e66c:	481d      	ldr	r0, [pc, #116]	; (800e6e4 <alloc_socket+0xd4>)
 800e66e:	f00d fb0d 	bl	801bc8c <iprintf>
      sockets[i].rcvevent   = 0;
 800e672:	4a19      	ldr	r2, [pc, #100]	; (800e6d8 <alloc_socket+0xc8>)
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	011b      	lsls	r3, r3, #4
 800e678:	4413      	add	r3, r2
 800e67a:	3308      	adds	r3, #8
 800e67c:	2200      	movs	r2, #0
 800e67e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	781b      	ldrb	r3, [r3, #0]
 800e684:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e688:	2b10      	cmp	r3, #16
 800e68a:	d102      	bne.n	800e692 <alloc_socket+0x82>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d001      	beq.n	800e696 <alloc_socket+0x86>
 800e692:	2301      	movs	r3, #1
 800e694:	e000      	b.n	800e698 <alloc_socket+0x88>
 800e696:	2300      	movs	r3, #0
 800e698:	b299      	uxth	r1, r3
 800e69a:	4a0f      	ldr	r2, [pc, #60]	; (800e6d8 <alloc_socket+0xc8>)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	011b      	lsls	r3, r3, #4
 800e6a0:	4413      	add	r3, r2
 800e6a2:	330a      	adds	r3, #10
 800e6a4:	460a      	mov	r2, r1
 800e6a6:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e6a8:	4a0b      	ldr	r2, [pc, #44]	; (800e6d8 <alloc_socket+0xc8>)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	011b      	lsls	r3, r3, #4
 800e6ae:	4413      	add	r3, r2
 800e6b0:	330c      	adds	r3, #12
 800e6b2:	2200      	movs	r2, #0
 800e6b4:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	e00a      	b.n	800e6d0 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e6ba:	68b8      	ldr	r0, [r7, #8]
 800e6bc:	f00c fe4c 	bl	801b358 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	60fb      	str	r3, [r7, #12]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b03      	cmp	r3, #3
 800e6ca:	dda9      	ble.n	800e620 <alloc_socket+0x10>
  }
  return -1;
 800e6cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3710      	adds	r7, #16
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	bd80      	pop	{r7, pc}
 800e6d8:	2000475c 	.word	0x2000475c
 800e6dc:	0801eca8 	.word	0x0801eca8
 800e6e0:	0801ecdc 	.word	0x0801ecdc
 800e6e4:	0801ecfc 	.word	0x0801ecfc

0800e6e8 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	b08a      	sub	sp, #40	; 0x28
 800e6ec:	af00      	add	r7, sp, #0
 800e6ee:	60f8      	str	r0, [r7, #12]
 800e6f0:	60b9      	str	r1, [r7, #8]
 800e6f2:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800e6f4:	68f8      	ldr	r0, [r7, #12]
 800e6f6:	f7ff ff73 	bl	800e5e0 <get_socket>
 800e6fa:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800e6fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d102      	bne.n	800e708 <lwip_bind+0x20>
    return -1;
 800e702:	f04f 33ff 	mov.w	r3, #4294967295
 800e706:	e051      	b.n	800e7ac <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2b10      	cmp	r3, #16
 800e70c:	d108      	bne.n	800e720 <lwip_bind+0x38>
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	785b      	ldrb	r3, [r3, #1]
 800e712:	2b02      	cmp	r3, #2
 800e714:	d104      	bne.n	800e720 <lwip_bind+0x38>
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	f003 0303 	and.w	r3, r3, #3
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d014      	beq.n	800e74a <lwip_bind+0x62>
 800e720:	4b24      	ldr	r3, [pc, #144]	; (800e7b4 <lwip_bind+0xcc>)
 800e722:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e726:	4924      	ldr	r1, [pc, #144]	; (800e7b8 <lwip_bind+0xd0>)
 800e728:	4824      	ldr	r0, [pc, #144]	; (800e7bc <lwip_bind+0xd4>)
 800e72a:	f00d faaf 	bl	801bc8c <iprintf>
 800e72e:	f06f 000f 	mvn.w	r0, #15
 800e732:	f7ff fe5b 	bl	800e3ec <err_to_errno>
 800e736:	6178      	str	r0, [r7, #20]
 800e738:	697b      	ldr	r3, [r7, #20]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d002      	beq.n	800e744 <lwip_bind+0x5c>
 800e73e:	4a20      	ldr	r2, [pc, #128]	; (800e7c0 <lwip_bind+0xd8>)
 800e740:	697b      	ldr	r3, [r7, #20]
 800e742:	6013      	str	r3, [r2, #0]
 800e744:	f04f 33ff 	mov.w	r3, #4294967295
 800e748:	e030      	b.n	800e7ac <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e74a:	68bb      	ldr	r3, [r7, #8]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	613b      	str	r3, [r7, #16]
 800e750:	68bb      	ldr	r3, [r7, #8]
 800e752:	885b      	ldrh	r3, [r3, #2]
 800e754:	4618      	mov	r0, r3
 800e756:	f001 fb8b 	bl	800fe70 <lwip_htons>
 800e75a:	4603      	mov	r3, r0
 800e75c:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e764:	f107 0110 	add.w	r1, r7, #16
 800e768:	4618      	mov	r0, r3
 800e76a:	f7fd ff69 	bl	800c640 <netconn_bind>
 800e76e:	4603      	mov	r3, r0
 800e770:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800e774:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d00e      	beq.n	800e79a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e77c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e780:	4618      	mov	r0, r3
 800e782:	f7ff fe33 	bl	800e3ec <err_to_errno>
 800e786:	61b8      	str	r0, [r7, #24]
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d002      	beq.n	800e794 <lwip_bind+0xac>
 800e78e:	4a0c      	ldr	r2, [pc, #48]	; (800e7c0 <lwip_bind+0xd8>)
 800e790:	69bb      	ldr	r3, [r7, #24]
 800e792:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e794:	f04f 33ff 	mov.w	r3, #4294967295
 800e798:	e008      	b.n	800e7ac <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e79a:	2300      	movs	r3, #0
 800e79c:	61fb      	str	r3, [r7, #28]
 800e79e:	69fb      	ldr	r3, [r7, #28]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d002      	beq.n	800e7aa <lwip_bind+0xc2>
 800e7a4:	4a06      	ldr	r2, [pc, #24]	; (800e7c0 <lwip_bind+0xd8>)
 800e7a6:	69fb      	ldr	r3, [r7, #28]
 800e7a8:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e7aa:	2300      	movs	r3, #0
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3728      	adds	r7, #40	; 0x28
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}
 800e7b4:	0801eca8 	.word	0x0801eca8
 800e7b8:	0801ed4c 	.word	0x0801ed4c
 800e7bc:	0801ecfc 	.word	0x0801ecfc
 800e7c0:	2000d7d8 	.word	0x2000d7d8

0800e7c4 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08c      	sub	sp, #48	; 0x30
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	607a      	str	r2, [r7, #4]
 800e7d0:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e7d2:	2308      	movs	r3, #8
 800e7d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800e7d8:	2300      	movs	r3, #0
 800e7da:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	db01      	blt.n	800e7e6 <lwip_recv_tcp+0x22>
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	e001      	b.n	800e7ea <lwip_recv_tcp+0x26>
 800e7e6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e7ea:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d106      	bne.n	800e800 <lwip_recv_tcp+0x3c>
 800e7f2:	4b74      	ldr	r3, [pc, #464]	; (800e9c4 <lwip_recv_tcp+0x200>)
 800e7f4:	f240 329e 	movw	r2, #926	; 0x39e
 800e7f8:	4973      	ldr	r1, [pc, #460]	; (800e9c8 <lwip_recv_tcp+0x204>)
 800e7fa:	4874      	ldr	r0, [pc, #464]	; (800e9cc <lwip_recv_tcp+0x208>)
 800e7fc:	f00d fa46 	bl	801bc8c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e80a:	2b10      	cmp	r3, #16
 800e80c:	d006      	beq.n	800e81c <lwip_recv_tcp+0x58>
 800e80e:	4b6d      	ldr	r3, [pc, #436]	; (800e9c4 <lwip_recv_tcp+0x200>)
 800e810:	f240 329f 	movw	r2, #927	; 0x39f
 800e814:	496e      	ldr	r1, [pc, #440]	; (800e9d0 <lwip_recv_tcp+0x20c>)
 800e816:	486d      	ldr	r0, [pc, #436]	; (800e9cc <lwip_recv_tcp+0x208>)
 800e818:	f00d fa38 	bl	801bc8c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	f003 0308 	and.w	r3, r3, #8
 800e822:	2b00      	cmp	r3, #0
 800e824:	d005      	beq.n	800e832 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e82a:	f043 0304 	orr.w	r3, r3, #4
 800e82e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d003      	beq.n	800e842 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	617b      	str	r3, [r7, #20]
 800e840:	e036      	b.n	800e8b0 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e84a:	f107 0114 	add.w	r1, r7, #20
 800e84e:	4618      	mov	r0, r3
 800e850:	f7fe f8d8 	bl	800ca04 <netconn_recv_tcp_pbuf_flags>
 800e854:	4603      	mov	r3, r0
 800e856:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e85a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d019      	beq.n	800e896 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e864:	2b00      	cmp	r3, #0
 800e866:	f300 808d 	bgt.w	800e984 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e86a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e86e:	4618      	mov	r0, r3
 800e870:	f7ff fdbc 	bl	800e3ec <err_to_errno>
 800e874:	61f8      	str	r0, [r7, #28]
 800e876:	69fb      	ldr	r3, [r7, #28]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d002      	beq.n	800e882 <lwip_recv_tcp+0xbe>
 800e87c:	4a55      	ldr	r2, [pc, #340]	; (800e9d4 <lwip_recv_tcp+0x210>)
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e882:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e886:	f113 0f0f 	cmn.w	r3, #15
 800e88a:	d101      	bne.n	800e890 <lwip_recv_tcp+0xcc>
          return 0;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e094      	b.n	800e9ba <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e890:	f04f 33ff 	mov.w	r3, #4294967295
 800e894:	e091      	b.n	800e9ba <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e896:	697b      	ldr	r3, [r7, #20]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d106      	bne.n	800e8aa <lwip_recv_tcp+0xe6>
 800e89c:	4b49      	ldr	r3, [pc, #292]	; (800e9c4 <lwip_recv_tcp+0x200>)
 800e89e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800e8a2:	494d      	ldr	r1, [pc, #308]	; (800e9d8 <lwip_recv_tcp+0x214>)
 800e8a4:	4849      	ldr	r0, [pc, #292]	; (800e9cc <lwip_recv_tcp+0x208>)
 800e8a6:	f00d f9f1 	bl	801bc8c <iprintf>
      sock->lastdata.pbuf = p;
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	891b      	ldrh	r3, [r3, #8]
 800e8b4:	461a      	mov	r2, r3
 800e8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b8:	4293      	cmp	r3, r2
 800e8ba:	dd03      	ble.n	800e8c4 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e8bc:	697b      	ldr	r3, [r7, #20]
 800e8be:	891b      	ldrh	r3, [r3, #8]
 800e8c0:	847b      	strh	r3, [r7, #34]	; 0x22
 800e8c2:	e001      	b.n	800e8c8 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c6:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800e8c8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	4413      	add	r3, r2
 800e8ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	dd03      	ble.n	800e8dc <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d6:	b29b      	uxth	r3, r3
 800e8d8:	43db      	mvns	r3, r3
 800e8da:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e8dc:	6978      	ldr	r0, [r7, #20]
 800e8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e0:	68ba      	ldr	r2, [r7, #8]
 800e8e2:	18d1      	adds	r1, r2, r3
 800e8e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	f003 f8a6 	bl	8011a38 <pbuf_copy_partial>

    recvd += copylen;
 800e8ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8f0:	4413      	add	r3, r2
 800e8f2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e8f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e8f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	da06      	bge.n	800e90a <lwip_recv_tcp+0x146>
 800e8fc:	4b31      	ldr	r3, [pc, #196]	; (800e9c4 <lwip_recv_tcp+0x200>)
 800e8fe:	f240 32dd 	movw	r2, #989	; 0x3dd
 800e902:	4936      	ldr	r1, [pc, #216]	; (800e9dc <lwip_recv_tcp+0x218>)
 800e904:	4831      	ldr	r0, [pc, #196]	; (800e9cc <lwip_recv_tcp+0x208>)
 800e906:	f00d f9c1 	bl	801bc8c <iprintf>
    recv_left -= copylen;
 800e90a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e90c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	f003 0301 	and.w	r3, r3, #1
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d123      	bne.n	800e964 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e91c:	697b      	ldr	r3, [r7, #20]
 800e91e:	891b      	ldrh	r3, [r3, #8]
 800e920:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e922:	429a      	cmp	r2, r3
 800e924:	d906      	bls.n	800e934 <lwip_recv_tcp+0x170>
 800e926:	4b27      	ldr	r3, [pc, #156]	; (800e9c4 <lwip_recv_tcp+0x200>)
 800e928:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e92c:	492c      	ldr	r1, [pc, #176]	; (800e9e0 <lwip_recv_tcp+0x21c>)
 800e92e:	4827      	ldr	r0, [pc, #156]	; (800e9cc <lwip_recv_tcp+0x208>)
 800e930:	f00d f9ac 	bl	801bc8c <iprintf>
      if (p->tot_len - copylen > 0) {
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	891b      	ldrh	r3, [r3, #8]
 800e938:	461a      	mov	r2, r3
 800e93a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e93c:	1ad3      	subs	r3, r2, r3
 800e93e:	2b00      	cmp	r3, #0
 800e940:	dd09      	ble.n	800e956 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e946:	4611      	mov	r1, r2
 800e948:	4618      	mov	r0, r3
 800e94a:	f002 fe3c 	bl	80115c6 <pbuf_free_header>
 800e94e:	4602      	mov	r2, r0
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	605a      	str	r2, [r3, #4]
 800e954:	e006      	b.n	800e964 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2200      	movs	r2, #0
 800e95a:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e95c:	697b      	ldr	r3, [r7, #20]
 800e95e:	4618      	mov	r0, r3
 800e960:	f002 fe64 	bl	801162c <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e964:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e968:	f043 0314 	orr.w	r3, r3, #20
 800e96c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	2b00      	cmp	r3, #0
 800e974:	dd08      	ble.n	800e988 <lwip_recv_tcp+0x1c4>
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	f003 0301 	and.w	r3, r3, #1
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f43f af58 	beq.w	800e832 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800e982:	e001      	b.n	800e988 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800e984:	bf00      	nop
 800e986:	e000      	b.n	800e98a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800e988:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800e98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dd0b      	ble.n	800e9a8 <lwip_recv_tcp+0x1e4>
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	f003 0301 	and.w	r3, r3, #1
 800e996:	2b00      	cmp	r3, #0
 800e998:	d106      	bne.n	800e9a8 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e9a0:	4611      	mov	r1, r2
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	f7fd ff7c 	bl	800c8a0 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800e9a8:	2300      	movs	r3, #0
 800e9aa:	61bb      	str	r3, [r7, #24]
 800e9ac:	69bb      	ldr	r3, [r7, #24]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d002      	beq.n	800e9b8 <lwip_recv_tcp+0x1f4>
 800e9b2:	4a08      	ldr	r2, [pc, #32]	; (800e9d4 <lwip_recv_tcp+0x210>)
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	6013      	str	r3, [r2, #0]
  return recvd;
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3730      	adds	r7, #48	; 0x30
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	0801eca8 	.word	0x0801eca8
 800e9c8:	0801eda0 	.word	0x0801eda0
 800e9cc:	0801ecfc 	.word	0x0801ecfc
 800e9d0:	0801edb0 	.word	0x0801edb0
 800e9d4:	2000d7d8 	.word	0x2000d7d8
 800e9d8:	0801edd4 	.word	0x0801edd4
 800e9dc:	0801ede0 	.word	0x0801ede0
 800e9e0:	0801ee08 	.word	0x0801ee08

0800e9e4 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800e9e4:	b590      	push	{r4, r7, lr}
 800e9e6:	b08b      	sub	sp, #44	; 0x2c
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	60f8      	str	r0, [r7, #12]
 800e9ec:	60b9      	str	r1, [r7, #8]
 800e9ee:	603b      	str	r3, [r7, #0]
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d106      	bne.n	800ea0c <lwip_sock_make_addr+0x28>
 800e9fe:	4b2b      	ldr	r3, [pc, #172]	; (800eaac <lwip_sock_make_addr+0xc8>)
 800ea00:	f240 4207 	movw	r2, #1031	; 0x407
 800ea04:	492a      	ldr	r1, [pc, #168]	; (800eab0 <lwip_sock_make_addr+0xcc>)
 800ea06:	482b      	ldr	r0, [pc, #172]	; (800eab4 <lwip_sock_make_addr+0xd0>)
 800ea08:	f00d f940 	bl	801bc8c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ea0c:	683b      	ldr	r3, [r7, #0]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <lwip_sock_make_addr+0x3c>
 800ea12:	4b26      	ldr	r3, [pc, #152]	; (800eaac <lwip_sock_make_addr+0xc8>)
 800ea14:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ea18:	4927      	ldr	r1, [pc, #156]	; (800eab8 <lwip_sock_make_addr+0xd4>)
 800ea1a:	4826      	ldr	r0, [pc, #152]	; (800eab4 <lwip_sock_make_addr+0xd0>)
 800ea1c:	f00d f936 	bl	801bc8c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800ea20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	d106      	bne.n	800ea34 <lwip_sock_make_addr+0x50>
 800ea26:	4b21      	ldr	r3, [pc, #132]	; (800eaac <lwip_sock_make_addr+0xc8>)
 800ea28:	f240 4209 	movw	r2, #1033	; 0x409
 800ea2c:	4923      	ldr	r1, [pc, #140]	; (800eabc <lwip_sock_make_addr+0xd8>)
 800ea2e:	4821      	ldr	r0, [pc, #132]	; (800eab4 <lwip_sock_make_addr+0xd0>)
 800ea30:	f00d f92c 	bl	801bc8c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800ea34:	f107 0314 	add.w	r3, r7, #20
 800ea38:	2210      	movs	r2, #16
 800ea3a:	701a      	strb	r2, [r3, #0]
 800ea3c:	f107 0314 	add.w	r3, r7, #20
 800ea40:	2202      	movs	r2, #2
 800ea42:	705a      	strb	r2, [r3, #1]
 800ea44:	f107 0414 	add.w	r4, r7, #20
 800ea48:	88fb      	ldrh	r3, [r7, #6]
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f001 fa10 	bl	800fe70 <lwip_htons>
 800ea50:	4603      	mov	r3, r0
 800ea52:	8063      	strh	r3, [r4, #2]
 800ea54:	f107 0314 	add.w	r3, r7, #20
 800ea58:	68ba      	ldr	r2, [r7, #8]
 800ea5a:	6812      	ldr	r2, [r2, #0]
 800ea5c:	605a      	str	r2, [r3, #4]
 800ea5e:	f107 0314 	add.w	r3, r7, #20
 800ea62:	3308      	adds	r3, #8
 800ea64:	2208      	movs	r2, #8
 800ea66:	2100      	movs	r1, #0
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f00c fcc5 	bl	801b3f8 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800ea6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	7d3a      	ldrb	r2, [r7, #20]
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d202      	bcs.n	800ea7e <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ea7c:	e008      	b.n	800ea90 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800ea7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	7d3a      	ldrb	r2, [r7, #20]
 800ea84:	4293      	cmp	r3, r2
 800ea86:	d903      	bls.n	800ea90 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800ea88:	7d3b      	ldrb	r3, [r7, #20]
 800ea8a:	461a      	mov	r2, r3
 800ea8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea8e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800ea90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea92:	681a      	ldr	r2, [r3, #0]
 800ea94:	f107 0314 	add.w	r3, r7, #20
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6838      	ldr	r0, [r7, #0]
 800ea9c:	f00c fc9e 	bl	801b3dc <memcpy>
  return truncated;
 800eaa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	372c      	adds	r7, #44	; 0x2c
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd90      	pop	{r4, r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	0801eca8 	.word	0x0801eca8
 800eab0:	0801ee18 	.word	0x0801ee18
 800eab4:	0801ecfc 	.word	0x0801ecfc
 800eab8:	0801ee2c 	.word	0x0801ee2c
 800eabc:	0801ee3c 	.word	0x0801ee3c

0800eac0 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b088      	sub	sp, #32
 800eac4:	af02      	add	r7, sp, #8
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d101      	bne.n	800ead8 <lwip_recv_tcp_from+0x18>
    return 0;
 800ead4:	2300      	movs	r3, #0
 800ead6:	e021      	b.n	800eb1c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d01d      	beq.n	800eb1a <lwip_recv_tcp_from+0x5a>
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01a      	beq.n	800eb1a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6818      	ldr	r0, [r3, #0]
 800eae8:	f107 0216 	add.w	r2, r7, #22
 800eaec:	f107 0110 	add.w	r1, r7, #16
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	f7fd fd53 	bl	800c59c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800eaf6:	68bb      	ldr	r3, [r7, #8]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <lwip_recv_tcp_from+0x5a>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d00b      	beq.n	800eb1a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	6818      	ldr	r0, [r3, #0]
 800eb06:	8afa      	ldrh	r2, [r7, #22]
 800eb08:	f107 0110 	add.w	r1, r7, #16
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	9300      	str	r3, [sp, #0]
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f7ff ff67 	bl	800e9e4 <lwip_sock_make_addr>
 800eb16:	4603      	mov	r3, r0
 800eb18:	e000      	b.n	800eb1c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800eb24:	b590      	push	{r4, r7, lr}
 800eb26:	b08d      	sub	sp, #52	; 0x34
 800eb28:	af02      	add	r7, sp, #8
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	689b      	ldr	r3, [r3, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d10d      	bne.n	800eb56 <lwip_recvfrom_udp_raw+0x32>
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	68db      	ldr	r3, [r3, #12]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	dd09      	ble.n	800eb56 <lwip_recvfrom_udp_raw+0x32>
 800eb42:	4b5e      	ldr	r3, [pc, #376]	; (800ecbc <lwip_recvfrom_udp_raw+0x198>)
 800eb44:	f240 4249 	movw	r2, #1097	; 0x449
 800eb48:	495d      	ldr	r1, [pc, #372]	; (800ecc0 <lwip_recvfrom_udp_raw+0x19c>)
 800eb4a:	485e      	ldr	r0, [pc, #376]	; (800ecc4 <lwip_recvfrom_udp_raw+0x1a0>)
 800eb4c:	f00d f89e 	bl	801bc8c <iprintf>
 800eb50:	f06f 030f 	mvn.w	r3, #15
 800eb54:	e0ad      	b.n	800ecb2 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	f003 0308 	and.w	r3, r3, #8
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d003      	beq.n	800eb68 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800eb60:	2304      	movs	r3, #4
 800eb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb66:	e002      	b.n	800eb6e <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	685b      	ldr	r3, [r3, #4]
 800eb72:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d11e      	bne.n	800ebb8 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eb82:	f107 0110 	add.w	r1, r7, #16
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fd ff68 	bl	800ca5c <netconn_recv_udp_raw_netbuf_flags>
 800eb8c:	4603      	mov	r3, r0
 800eb8e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800eb90:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d002      	beq.n	800eb9e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800eb98:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800eb9c:	e089      	b.n	800ecb2 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d106      	bne.n	800ebb2 <lwip_recvfrom_udp_raw+0x8e>
 800eba4:	4b45      	ldr	r3, [pc, #276]	; (800ecbc <lwip_recvfrom_udp_raw+0x198>)
 800eba6:	f240 425e 	movw	r2, #1118	; 0x45e
 800ebaa:	4947      	ldr	r1, [pc, #284]	; (800ecc8 <lwip_recvfrom_udp_raw+0x1a4>)
 800ebac:	4845      	ldr	r0, [pc, #276]	; (800ecc4 <lwip_recvfrom_udp_raw+0x1a0>)
 800ebae:	f00d f86d 	bl	801bc8c <iprintf>
    sock->lastdata.netbuf = buf;
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ebb8:	693b      	ldr	r3, [r7, #16]
 800ebba:	681b      	ldr	r3, [r3, #0]
 800ebbc:	891b      	ldrh	r3, [r3, #8]
 800ebbe:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	61fb      	str	r3, [r7, #28]
 800ebc8:	e029      	b.n	800ec1e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ebca:	8b3a      	ldrh	r2, [r7, #24]
 800ebcc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	689a      	ldr	r2, [r3, #8]
 800ebd6:	69fb      	ldr	r3, [r7, #28]
 800ebd8:	00db      	lsls	r3, r3, #3
 800ebda:	4413      	add	r3, r2
 800ebdc:	685a      	ldr	r2, [r3, #4]
 800ebde:	8afb      	ldrh	r3, [r7, #22]
 800ebe0:	429a      	cmp	r2, r3
 800ebe2:	d902      	bls.n	800ebea <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ebe4:	8afb      	ldrh	r3, [r7, #22]
 800ebe6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ebe8:	e006      	b.n	800ebf8 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	689a      	ldr	r2, [r3, #8]
 800ebee:	69fb      	ldr	r3, [r7, #28]
 800ebf0:	00db      	lsls	r3, r3, #3
 800ebf2:	4413      	add	r3, r2
 800ebf4:	685b      	ldr	r3, [r3, #4]
 800ebf6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ebf8:	693b      	ldr	r3, [r7, #16]
 800ebfa:	6818      	ldr	r0, [r3, #0]
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	689a      	ldr	r2, [r3, #8]
 800ec00:	69fb      	ldr	r3, [r7, #28]
 800ec02:	00db      	lsls	r3, r3, #3
 800ec04:	4413      	add	r3, r2
 800ec06:	6819      	ldr	r1, [r3, #0]
 800ec08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec0c:	f002 ff14 	bl	8011a38 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800ec10:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec14:	4413      	add	r3, r2
 800ec16:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ec18:	69fb      	ldr	r3, [r7, #28]
 800ec1a:	3301      	adds	r3, #1
 800ec1c:	61fb      	str	r3, [r7, #28]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	69fa      	ldr	r2, [r7, #28]
 800ec24:	429a      	cmp	r2, r3
 800ec26:	da03      	bge.n	800ec30 <lwip_recvfrom_udp_raw+0x10c>
 800ec28:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec2a:	8b3b      	ldrh	r3, [r7, #24]
 800ec2c:	429a      	cmp	r2, r3
 800ec2e:	d3cc      	bcc.n	800ebca <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d01a      	beq.n	800ec6e <lwip_recvfrom_udp_raw+0x14a>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	685b      	ldr	r3, [r3, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d016      	beq.n	800ec6e <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d012      	beq.n	800ec6e <lwip_recvfrom_udp_raw+0x14a>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	685b      	ldr	r3, [r3, #4]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d00e      	beq.n	800ec6e <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	6818      	ldr	r0, [r3, #0]
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	f103 0108 	add.w	r1, r3, #8
 800ec5a:	693b      	ldr	r3, [r7, #16]
 800ec5c:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	3304      	adds	r3, #4
 800ec66:	9300      	str	r3, [sp, #0]
 800ec68:	4623      	mov	r3, r4
 800ec6a:	f7ff febb 	bl	800e9e4 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	691b      	ldr	r3, [r3, #16]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d007      	beq.n	800ec8c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ec80:	7d7b      	ldrb	r3, [r7, #21]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d102      	bne.n	800ec8c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2200      	movs	r2, #0
 800ec8a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ec8c:	68bb      	ldr	r3, [r7, #8]
 800ec8e:	f003 0301 	and.w	r3, r3, #1
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d106      	bne.n	800eca4 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f7ff fbc2 	bl	800e428 <netbuf_delete>
  }
  if (datagram_len) {
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d002      	beq.n	800ecb0 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	8b3a      	ldrh	r2, [r7, #24]
 800ecae:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ecb0:	2300      	movs	r3, #0
}
 800ecb2:	4618      	mov	r0, r3
 800ecb4:	372c      	adds	r7, #44	; 0x2c
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd90      	pop	{r4, r7, pc}
 800ecba:	bf00      	nop
 800ecbc:	0801eca8 	.word	0x0801eca8
 800ecc0:	0801ee4c 	.word	0x0801ee4c
 800ecc4:	0801ecfc 	.word	0x0801ecfc
 800ecc8:	0801ee78 	.word	0x0801ee78

0800eccc <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800eccc:	b580      	push	{r7, lr}
 800ecce:	b096      	sub	sp, #88	; 0x58
 800ecd0:	af02      	add	r7, sp, #8
 800ecd2:	60f8      	str	r0, [r7, #12]
 800ecd4:	60b9      	str	r1, [r7, #8]
 800ecd6:	607a      	str	r2, [r7, #4]
 800ecd8:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ecda:	68f8      	ldr	r0, [r7, #12]
 800ecdc:	f7ff fc80 	bl	800e5e0 <get_socket>
 800ece0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ece2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d102      	bne.n	800ecee <lwip_recvfrom+0x22>
    return -1;
 800ece8:	f04f 33ff 	mov.w	r3, #4294967295
 800ecec:	e078      	b.n	800ede0 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ecee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ecf8:	2b10      	cmp	r3, #16
 800ecfa:	d112      	bne.n	800ed22 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	687a      	ldr	r2, [r7, #4]
 800ed00:	68b9      	ldr	r1, [r7, #8]
 800ed02:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed04:	f7ff fd5e 	bl	800e7c4 <lwip_recv_tcp>
 800ed08:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ed0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed0c:	9301      	str	r3, [sp, #4]
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	9300      	str	r3, [sp, #0]
 800ed12:	4b35      	ldr	r3, [pc, #212]	; (800ede8 <lwip_recvfrom+0x11c>)
 800ed14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed1a:	f7ff fed1 	bl	800eac0 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ed1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed20:	e05e      	b.n	800ede0 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800ed22:	2300      	movs	r3, #0
 800ed24:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800ed32:	2300      	movs	r3, #0
 800ed34:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800ed3a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed3e:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800ed40:	2301      	movs	r3, #1
 800ed42:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800ed44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ed46:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800ed48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d002      	beq.n	800ed54 <lwip_recvfrom+0x88>
 800ed4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	e000      	b.n	800ed56 <lwip_recvfrom+0x8a>
 800ed54:	2300      	movs	r3, #0
 800ed56:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800ed58:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800ed5c:	f107 0214 	add.w	r2, r7, #20
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	9300      	str	r3, [sp, #0]
 800ed64:	460b      	mov	r3, r1
 800ed66:	6839      	ldr	r1, [r7, #0]
 800ed68:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed6a:	f7ff fedb 	bl	800eb24 <lwip_recvfrom_udp_raw>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800ed74:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d00e      	beq.n	800ed9a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800ed7c:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7ff fb33 	bl	800e3ec <err_to_errno>
 800ed86:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ed88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d002      	beq.n	800ed94 <lwip_recvfrom+0xc8>
 800ed8e:	4a17      	ldr	r2, [pc, #92]	; (800edec <lwip_recvfrom+0x120>)
 800ed90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed92:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ed94:	f04f 33ff 	mov.w	r3, #4294967295
 800ed98:	e022      	b.n	800ede0 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ed9a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ed9c:	461a      	mov	r2, r3
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	4293      	cmp	r3, r2
 800eda2:	bf28      	it	cs
 800eda4:	4613      	movcs	r3, r2
 800eda6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800edaa:	4293      	cmp	r3, r2
 800edac:	d206      	bcs.n	800edbc <lwip_recvfrom+0xf0>
 800edae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800edb0:	461a      	mov	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4293      	cmp	r3, r2
 800edb6:	bf28      	it	cs
 800edb8:	4613      	movcs	r3, r2
 800edba:	e001      	b.n	800edc0 <lwip_recvfrom+0xf4>
 800edbc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800edc0:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800edc2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d002      	beq.n	800edce <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edcc:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800edce:	2300      	movs	r3, #0
 800edd0:	643b      	str	r3, [r7, #64]	; 0x40
 800edd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d002      	beq.n	800edde <lwip_recvfrom+0x112>
 800edd8:	4a04      	ldr	r2, [pc, #16]	; (800edec <lwip_recvfrom+0x120>)
 800edda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eddc:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800edde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3750      	adds	r7, #80	; 0x50
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	0801ee84 	.word	0x0801ee84
 800edec:	2000d7d8 	.word	0x2000d7d8

0800edf0 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b08a      	sub	sp, #40	; 0x28
 800edf4:	af02      	add	r7, sp, #8
 800edf6:	60f8      	str	r0, [r7, #12]
 800edf8:	60b9      	str	r1, [r7, #8]
 800edfa:	607a      	str	r2, [r7, #4]
 800edfc:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	f7ff fbee 	bl	800e5e0 <get_socket>
 800ee04:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d102      	bne.n	800ee12 <lwip_send+0x22>
    return -1;
 800ee0c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee10:	e046      	b.n	800eea0 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ee12:	69fb      	ldr	r3, [r7, #28]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	781b      	ldrb	r3, [r3, #0]
 800ee18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee1c:	2b10      	cmp	r3, #16
 800ee1e:	d00b      	beq.n	800ee38 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800ee20:	2300      	movs	r3, #0
 800ee22:	9301      	str	r3, [sp, #4]
 800ee24:	2300      	movs	r3, #0
 800ee26:	9300      	str	r3, [sp, #0]
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	687a      	ldr	r2, [r7, #4]
 800ee2c:	68b9      	ldr	r1, [r7, #8]
 800ee2e:	68f8      	ldr	r0, [r7, #12]
 800ee30:	f000 f83c 	bl	800eeac <lwip_sendto>
 800ee34:	4603      	mov	r3, r0
 800ee36:	e033      	b.n	800eea0 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <lwip_send+0x56>
 800ee42:	2203      	movs	r2, #3
 800ee44:	e000      	b.n	800ee48 <lwip_send+0x58>
 800ee46:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	105b      	asrs	r3, r3, #1
 800ee4c:	b25b      	sxtb	r3, r3
 800ee4e:	f003 0304 	and.w	r3, r3, #4
 800ee52:	b25b      	sxtb	r3, r3
 800ee54:	4313      	orrs	r3, r2
 800ee56:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800ee58:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800ee5a:	2300      	movs	r3, #0
 800ee5c:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800ee5e:	69fb      	ldr	r3, [r7, #28]
 800ee60:	6818      	ldr	r0, [r3, #0]
 800ee62:	7efa      	ldrb	r2, [r7, #27]
 800ee64:	f107 0310 	add.w	r3, r7, #16
 800ee68:	9300      	str	r3, [sp, #0]
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	687a      	ldr	r2, [r7, #4]
 800ee6e:	68b9      	ldr	r1, [r7, #8]
 800ee70:	f7fd fe4e 	bl	800cb10 <netconn_write_partly>
 800ee74:	4603      	mov	r3, r0
 800ee76:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800ee78:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	f7ff fab5 	bl	800e3ec <err_to_errno>
 800ee82:	6178      	str	r0, [r7, #20]
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d002      	beq.n	800ee90 <lwip_send+0xa0>
 800ee8a:	4a07      	ldr	r2, [pc, #28]	; (800eea8 <lwip_send+0xb8>)
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800ee90:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d101      	bne.n	800ee9c <lwip_send+0xac>
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	e001      	b.n	800eea0 <lwip_send+0xb0>
 800ee9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eea0:	4618      	mov	r0, r3
 800eea2:	3720      	adds	r7, #32
 800eea4:	46bd      	mov	sp, r7
 800eea6:	bd80      	pop	{r7, pc}
 800eea8:	2000d7d8 	.word	0x2000d7d8

0800eeac <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800eeac:	b580      	push	{r7, lr}
 800eeae:	b08e      	sub	sp, #56	; 0x38
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60f8      	str	r0, [r7, #12]
 800eeb4:	60b9      	str	r1, [r7, #8]
 800eeb6:	607a      	str	r2, [r7, #4]
 800eeb8:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800eeba:	68f8      	ldr	r0, [r7, #12]
 800eebc:	f7ff fb90 	bl	800e5e0 <get_socket>
 800eec0:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800eec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eec4:	2b00      	cmp	r3, #0
 800eec6:	d102      	bne.n	800eece <lwip_sendto+0x22>
    return -1;
 800eec8:	f04f 33ff 	mov.w	r3, #4294967295
 800eecc:	e093      	b.n	800eff6 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	781b      	ldrb	r3, [r3, #0]
 800eed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800eed8:	2b10      	cmp	r3, #16
 800eeda:	d107      	bne.n	800eeec <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	68b9      	ldr	r1, [r7, #8]
 800eee2:	68f8      	ldr	r0, [r7, #12]
 800eee4:	f7ff ff84 	bl	800edf0 <lwip_send>
 800eee8:	4603      	mov	r3, r0
 800eeea:	e084      	b.n	800eff6 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eef2:	d30a      	bcc.n	800ef0a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800eef4:	235a      	movs	r3, #90	; 0x5a
 800eef6:	623b      	str	r3, [r7, #32]
 800eef8:	6a3b      	ldr	r3, [r7, #32]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d002      	beq.n	800ef04 <lwip_sendto+0x58>
 800eefe:	4a40      	ldr	r2, [pc, #256]	; (800f000 <lwip_sendto+0x154>)
 800ef00:	6a3b      	ldr	r3, [r7, #32]
 800ef02:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ef04:	f04f 33ff 	mov.w	r3, #4294967295
 800ef08:	e075      	b.n	800eff6 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ef0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d102      	bne.n	800ef1a <lwip_sendto+0x6e>
 800ef14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d023      	beq.n	800ef62 <lwip_sendto+0xb6>
 800ef1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef1c:	2b10      	cmp	r3, #16
 800ef1e:	d10b      	bne.n	800ef38 <lwip_sendto+0x8c>
 800ef20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d008      	beq.n	800ef38 <lwip_sendto+0x8c>
 800ef26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef28:	785b      	ldrb	r3, [r3, #1]
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	d104      	bne.n	800ef38 <lwip_sendto+0x8c>
 800ef2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef30:	f003 0303 	and.w	r3, r3, #3
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d014      	beq.n	800ef62 <lwip_sendto+0xb6>
 800ef38:	4b32      	ldr	r3, [pc, #200]	; (800f004 <lwip_sendto+0x158>)
 800ef3a:	f240 6252 	movw	r2, #1618	; 0x652
 800ef3e:	4932      	ldr	r1, [pc, #200]	; (800f008 <lwip_sendto+0x15c>)
 800ef40:	4832      	ldr	r0, [pc, #200]	; (800f00c <lwip_sendto+0x160>)
 800ef42:	f00c fea3 	bl	801bc8c <iprintf>
 800ef46:	f06f 000f 	mvn.w	r0, #15
 800ef4a:	f7ff fa4f 	bl	800e3ec <err_to_errno>
 800ef4e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ef50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d002      	beq.n	800ef5c <lwip_sendto+0xb0>
 800ef56:	4a2a      	ldr	r2, [pc, #168]	; (800f000 <lwip_sendto+0x154>)
 800ef58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5a:	6013      	str	r3, [r2, #0]
 800ef5c:	f04f 33ff 	mov.w	r3, #4294967295
 800ef60:	e049      	b.n	800eff6 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ef62:	2300      	movs	r3, #0
 800ef64:	617b      	str	r3, [r7, #20]
 800ef66:	697b      	ldr	r3, [r7, #20]
 800ef68:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ef6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00a      	beq.n	800ef86 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ef70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef72:	685b      	ldr	r3, [r3, #4]
 800ef74:	61bb      	str	r3, [r7, #24]
 800ef76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef78:	885b      	ldrh	r3, [r3, #2]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f000 ff78 	bl	800fe70 <lwip_htons>
 800ef80:	4603      	mov	r3, r0
 800ef82:	86bb      	strh	r3, [r7, #52]	; 0x34
 800ef84:	e003      	b.n	800ef8e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ef86:	2300      	movs	r3, #0
 800ef88:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ef8e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ef90:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ef92:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef94:	f107 0310 	add.w	r3, r7, #16
 800ef98:	68b9      	ldr	r1, [r7, #8]
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	f7ff fa8c 	bl	800e4b8 <netbuf_ref>
 800efa0:	4603      	mov	r3, r0
 800efa2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800efa6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d10a      	bne.n	800efc4 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800efae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	f107 0210 	add.w	r2, r7, #16
 800efb6:	4611      	mov	r1, r2
 800efb8:	4618      	mov	r0, r3
 800efba:	f7fd fd7b 	bl	800cab4 <netconn_send>
 800efbe:	4603      	mov	r3, r0
 800efc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800efc4:	f107 0310 	add.w	r3, r7, #16
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff fa4d 	bl	800e468 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800efce:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800efd2:	4618      	mov	r0, r3
 800efd4:	f7ff fa0a 	bl	800e3ec <err_to_errno>
 800efd8:	6278      	str	r0, [r7, #36]	; 0x24
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d002      	beq.n	800efe6 <lwip_sendto+0x13a>
 800efe0:	4a07      	ldr	r2, [pc, #28]	; (800f000 <lwip_sendto+0x154>)
 800efe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efe4:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800efe6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800efea:	2b00      	cmp	r3, #0
 800efec:	d101      	bne.n	800eff2 <lwip_sendto+0x146>
 800efee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eff0:	e001      	b.n	800eff6 <lwip_sendto+0x14a>
 800eff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eff6:	4618      	mov	r0, r3
 800eff8:	3738      	adds	r7, #56	; 0x38
 800effa:	46bd      	mov	sp, r7
 800effc:	bd80      	pop	{r7, pc}
 800effe:	bf00      	nop
 800f000:	2000d7d8 	.word	0x2000d7d8
 800f004:	0801eca8 	.word	0x0801eca8
 800f008:	0801ef88 	.word	0x0801ef88
 800f00c:	0801ecfc 	.word	0x0801ecfc

0800f010 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b086      	sub	sp, #24
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f01c:	68bb      	ldr	r3, [r7, #8]
 800f01e:	2b03      	cmp	r3, #3
 800f020:	d009      	beq.n	800f036 <lwip_socket+0x26>
 800f022:	68bb      	ldr	r3, [r7, #8]
 800f024:	2b03      	cmp	r3, #3
 800f026:	dc23      	bgt.n	800f070 <lwip_socket+0x60>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b01      	cmp	r3, #1
 800f02c:	d019      	beq.n	800f062 <lwip_socket+0x52>
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	2b02      	cmp	r3, #2
 800f032:	d009      	beq.n	800f048 <lwip_socket+0x38>
 800f034:	e01c      	b.n	800f070 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	b2db      	uxtb	r3, r3
 800f03a:	4a22      	ldr	r2, [pc, #136]	; (800f0c4 <lwip_socket+0xb4>)
 800f03c:	4619      	mov	r1, r3
 800f03e:	2040      	movs	r0, #64	; 0x40
 800f040:	f7fd f9f2 	bl	800c428 <netconn_new_with_proto_and_callback>
 800f044:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f046:	e019      	b.n	800f07c <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	2b88      	cmp	r3, #136	; 0x88
 800f04c:	d101      	bne.n	800f052 <lwip_socket+0x42>
 800f04e:	2321      	movs	r3, #33	; 0x21
 800f050:	e000      	b.n	800f054 <lwip_socket+0x44>
 800f052:	2320      	movs	r3, #32
 800f054:	4a1b      	ldr	r2, [pc, #108]	; (800f0c4 <lwip_socket+0xb4>)
 800f056:	2100      	movs	r1, #0
 800f058:	4618      	mov	r0, r3
 800f05a:	f7fd f9e5 	bl	800c428 <netconn_new_with_proto_and_callback>
 800f05e:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f060:	e00c      	b.n	800f07c <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f062:	4a18      	ldr	r2, [pc, #96]	; (800f0c4 <lwip_socket+0xb4>)
 800f064:	2100      	movs	r1, #0
 800f066:	2010      	movs	r0, #16
 800f068:	f7fd f9de 	bl	800c428 <netconn_new_with_proto_and_callback>
 800f06c:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f06e:	e005      	b.n	800f07c <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f070:	4b15      	ldr	r3, [pc, #84]	; (800f0c8 <lwip_socket+0xb8>)
 800f072:	2216      	movs	r2, #22
 800f074:	601a      	str	r2, [r3, #0]
      return -1;
 800f076:	f04f 33ff 	mov.w	r3, #4294967295
 800f07a:	e01e      	b.n	800f0ba <lwip_socket+0xaa>
  }

  if (!conn) {
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d105      	bne.n	800f08e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f082:	4b11      	ldr	r3, [pc, #68]	; (800f0c8 <lwip_socket+0xb8>)
 800f084:	2269      	movs	r2, #105	; 0x69
 800f086:	601a      	str	r2, [r3, #0]
    return -1;
 800f088:	f04f 33ff 	mov.w	r3, #4294967295
 800f08c:	e015      	b.n	800f0ba <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f08e:	2100      	movs	r1, #0
 800f090:	6978      	ldr	r0, [r7, #20]
 800f092:	f7ff fabd 	bl	800e610 <alloc_socket>
 800f096:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f098:	693b      	ldr	r3, [r7, #16]
 800f09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09e:	d108      	bne.n	800f0b2 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f0a0:	6978      	ldr	r0, [r7, #20]
 800f0a2:	f7fd fa5f 	bl	800c564 <netconn_delete>
    set_errno(ENFILE);
 800f0a6:	4b08      	ldr	r3, [pc, #32]	; (800f0c8 <lwip_socket+0xb8>)
 800f0a8:	2217      	movs	r2, #23
 800f0aa:	601a      	str	r2, [r3, #0]
    return -1;
 800f0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800f0b0:	e003      	b.n	800f0ba <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f0b8:	693b      	ldr	r3, [r7, #16]
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3718      	adds	r7, #24
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	bd80      	pop	{r7, pc}
 800f0c2:	bf00      	nop
 800f0c4:	0800f87d 	.word	0x0800f87d
 800f0c8:	2000d7d8 	.word	0x2000d7d8

0800f0cc <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b082      	sub	sp, #8
 800f0d0:	af00      	add	r7, sp, #0
 800f0d2:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f0d4:	480c      	ldr	r0, [pc, #48]	; (800f108 <lwip_link_select_cb+0x3c>)
 800f0d6:	f00c f8ef 	bl	801b2b8 <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800f0da:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <lwip_link_select_cb+0x40>)
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800f0e2:	4b0a      	ldr	r3, [pc, #40]	; (800f10c <lwip_link_select_cb+0x40>)
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800f0ea:	4b08      	ldr	r3, [pc, #32]	; (800f10c <lwip_link_select_cb+0x40>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	687a      	ldr	r2, [r7, #4]
 800f0f0:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800f0f2:	4a06      	ldr	r2, [pc, #24]	; (800f10c <lwip_link_select_cb+0x40>)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f0f8:	4803      	ldr	r0, [pc, #12]	; (800f108 <lwip_link_select_cb+0x3c>)
 800f0fa:	f00c f8ec 	bl	801b2d6 <sys_mutex_unlock>
}
 800f0fe:	bf00      	nop
 800f100:	3708      	adds	r7, #8
 800f102:	46bd      	mov	sp, r7
 800f104:	bd80      	pop	{r7, pc}
 800f106:	bf00      	nop
 800f108:	2000a0a4 	.word	0x2000a0a4
 800f10c:	2000479c 	.word	0x2000479c

0800f110 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f118:	481b      	ldr	r0, [pc, #108]	; (800f188 <lwip_unlink_select_cb+0x78>)
 800f11a:	f00c f8cd 	bl	801b2b8 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	681b      	ldr	r3, [r3, #0]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d004      	beq.n	800f130 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	6852      	ldr	r2, [r2, #4]
 800f12e:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800f130:	4b16      	ldr	r3, [pc, #88]	; (800f18c <lwip_unlink_select_cb+0x7c>)
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	687a      	ldr	r2, [r7, #4]
 800f136:	429a      	cmp	r2, r3
 800f138:	d10f      	bne.n	800f15a <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d006      	beq.n	800f150 <lwip_unlink_select_cb+0x40>
 800f142:	4b13      	ldr	r3, [pc, #76]	; (800f190 <lwip_unlink_select_cb+0x80>)
 800f144:	f240 720d 	movw	r2, #1805	; 0x70d
 800f148:	4912      	ldr	r1, [pc, #72]	; (800f194 <lwip_unlink_select_cb+0x84>)
 800f14a:	4813      	ldr	r0, [pc, #76]	; (800f198 <lwip_unlink_select_cb+0x88>)
 800f14c:	f00c fd9e 	bl	801bc8c <iprintf>
    select_cb_list = select_cb->next;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	4a0d      	ldr	r2, [pc, #52]	; (800f18c <lwip_unlink_select_cb+0x7c>)
 800f156:	6013      	str	r3, [r2, #0]
 800f158:	e00f      	b.n	800f17a <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d106      	bne.n	800f170 <lwip_unlink_select_cb+0x60>
 800f162:	4b0b      	ldr	r3, [pc, #44]	; (800f190 <lwip_unlink_select_cb+0x80>)
 800f164:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800f168:	490c      	ldr	r1, [pc, #48]	; (800f19c <lwip_unlink_select_cb+0x8c>)
 800f16a:	480b      	ldr	r0, [pc, #44]	; (800f198 <lwip_unlink_select_cb+0x88>)
 800f16c:	f00c fd8e 	bl	801bc8c <iprintf>
    select_cb->prev->next = select_cb->next;
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	687a      	ldr	r2, [r7, #4]
 800f176:	6812      	ldr	r2, [r2, #0]
 800f178:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f17a:	4803      	ldr	r0, [pc, #12]	; (800f188 <lwip_unlink_select_cb+0x78>)
 800f17c:	f00c f8ab 	bl	801b2d6 <sys_mutex_unlock>
}
 800f180:	bf00      	nop
 800f182:	3708      	adds	r7, #8
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}
 800f188:	2000a0a4 	.word	0x2000a0a4
 800f18c:	2000479c 	.word	0x2000479c
 800f190:	0801eca8 	.word	0x0801eca8
 800f194:	0801efa8 	.word	0x0801efa8
 800f198:	0801ecfc 	.word	0x0801ecfc
 800f19c:	0801efc0 	.word	0x0801efc0

0800f1a0 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b098      	sub	sp, #96	; 0x60
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	60f8      	str	r0, [r7, #12]
 800f1a8:	60b9      	str	r1, [r7, #8]
 800f1aa:	607a      	str	r2, [r7, #4]
 800f1ac:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800f1b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1b6:	653b      	str	r3, [r7, #80]	; 0x50
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	657b      	str	r3, [r7, #84]	; 0x54
 800f1bc:	e007      	b.n	800f1ce <lwip_selscan+0x2e>
 800f1be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1c0:	1c5a      	adds	r2, r3, #1
 800f1c2:	653a      	str	r2, [r7, #80]	; 0x50
 800f1c4:	2200      	movs	r2, #0
 800f1c6:	701a      	strb	r2, [r3, #0]
 800f1c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1ca:	3301      	adds	r3, #1
 800f1cc:	657b      	str	r3, [r7, #84]	; 0x54
 800f1ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f1d0:	2b07      	cmp	r3, #7
 800f1d2:	d9f4      	bls.n	800f1be <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800f1d4:	f107 031c 	add.w	r3, r7, #28
 800f1d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800f1da:	2300      	movs	r3, #0
 800f1dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1de:	e007      	b.n	800f1f0 <lwip_selscan+0x50>
 800f1e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f1e2:	1c5a      	adds	r2, r3, #1
 800f1e4:	64ba      	str	r2, [r7, #72]	; 0x48
 800f1e6:	2200      	movs	r2, #0
 800f1e8:	701a      	strb	r2, [r3, #0]
 800f1ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f1f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1f2:	2b07      	cmp	r3, #7
 800f1f4:	d9f4      	bls.n	800f1e0 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800f1f6:	f107 0314 	add.w	r3, r7, #20
 800f1fa:	643b      	str	r3, [r7, #64]	; 0x40
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800f200:	e007      	b.n	800f212 <lwip_selscan+0x72>
 800f202:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f204:	1c5a      	adds	r2, r3, #1
 800f206:	643a      	str	r2, [r7, #64]	; 0x40
 800f208:	2200      	movs	r2, #0
 800f20a:	701a      	strb	r2, [r3, #0]
 800f20c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f20e:	3301      	adds	r3, #1
 800f210:	647b      	str	r3, [r7, #68]	; 0x44
 800f212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f214:	2b07      	cmp	r3, #7
 800f216:	d9f4      	bls.n	800f202 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f218:	2300      	movs	r3, #0
 800f21a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f21c:	e0e1      	b.n	800f3e2 <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800f21e:	68bb      	ldr	r3, [r7, #8]
 800f220:	2b00      	cmp	r3, #0
 800f222:	d00d      	beq.n	800f240 <lwip_selscan+0xa0>
 800f224:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f226:	095a      	lsrs	r2, r3, #5
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f22e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f230:	f002 021f 	and.w	r2, r2, #31
 800f234:	2101      	movs	r1, #1
 800f236:	fa01 f202 	lsl.w	r2, r1, r2
 800f23a:	4013      	ands	r3, r2
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d123      	bne.n	800f288 <lwip_selscan+0xe8>
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d00d      	beq.n	800f262 <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800f246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f248:	095a      	lsrs	r2, r3, #5
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f250:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f252:	f002 021f 	and.w	r2, r2, #31
 800f256:	2101      	movs	r1, #1
 800f258:	fa01 f202 	lsl.w	r2, r1, r2
 800f25c:	4013      	ands	r3, r2
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d112      	bne.n	800f288 <lwip_selscan+0xe8>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	f000 80b8 	beq.w	800f3da <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800f26a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f26c:	095a      	lsrs	r2, r3, #5
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f274:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f276:	f002 021f 	and.w	r2, r2, #31
 800f27a:	2101      	movs	r1, #1
 800f27c:	fa01 f202 	lsl.w	r2, r1, r2
 800f280:	4013      	ands	r3, r2
 800f282:	2b00      	cmp	r3, #0
 800f284:	f000 80a9 	beq.w	800f3da <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800f288:	f00c f858 	bl	801b33c <sys_arch_protect>
 800f28c:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800f28e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f290:	f7ff f983 	bl	800e59a <tryget_socket_unconn_locked>
 800f294:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800f296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f000 8098 	beq.w	800f3ce <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 800f29e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800f2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a6:	891b      	ldrh	r3, [r3, #8]
 800f2a8:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800f2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ac:	895b      	ldrh	r3, [r3, #10]
 800f2ae:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	899b      	ldrh	r3, [r3, #12]
 800f2b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800f2b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f2b8:	f00c f84e 	bl	801b358 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d02c      	beq.n	800f31c <lwip_selscan+0x17c>
 800f2c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2c4:	095a      	lsrs	r2, r3, #5
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2ce:	f002 021f 	and.w	r2, r2, #31
 800f2d2:	2101      	movs	r1, #1
 800f2d4:	fa01 f202 	lsl.w	r2, r1, r2
 800f2d8:	4013      	ands	r3, r2
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d01e      	beq.n	800f31c <lwip_selscan+0x17c>
 800f2de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d103      	bne.n	800f2ec <lwip_selscan+0x14c>
 800f2e4:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	dd17      	ble.n	800f31c <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 800f2ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2ee:	095a      	lsrs	r2, r3, #5
 800f2f0:	0093      	lsls	r3, r2, #2
 800f2f2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f2f6:	440b      	add	r3, r1
 800f2f8:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f2fc:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f2fe:	f001 011f 	and.w	r1, r1, #31
 800f302:	2001      	movs	r0, #1
 800f304:	fa00 f101 	lsl.w	r1, r0, r1
 800f308:	4319      	orrs	r1, r3
 800f30a:	0093      	lsls	r3, r2, #2
 800f30c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f310:	4413      	add	r3, r2
 800f312:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800f316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f318:	3301      	adds	r3, #1
 800f31a:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d028      	beq.n	800f374 <lwip_selscan+0x1d4>
 800f322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f324:	095a      	lsrs	r2, r3, #5
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f32c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f32e:	f002 021f 	and.w	r2, r2, #31
 800f332:	2101      	movs	r1, #1
 800f334:	fa01 f202 	lsl.w	r2, r1, r2
 800f338:	4013      	ands	r3, r2
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d01a      	beq.n	800f374 <lwip_selscan+0x1d4>
 800f33e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f340:	2b00      	cmp	r3, #0
 800f342:	d017      	beq.n	800f374 <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 800f344:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f346:	095a      	lsrs	r2, r3, #5
 800f348:	0093      	lsls	r3, r2, #2
 800f34a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f34e:	440b      	add	r3, r1
 800f350:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f354:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f356:	f001 011f 	and.w	r1, r1, #31
 800f35a:	2001      	movs	r0, #1
 800f35c:	fa00 f101 	lsl.w	r1, r0, r1
 800f360:	4319      	orrs	r1, r3
 800f362:	0093      	lsls	r3, r2, #2
 800f364:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f368:	4413      	add	r3, r2
 800f36a:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800f36e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f370:	3301      	adds	r3, #1
 800f372:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d030      	beq.n	800f3dc <lwip_selscan+0x23c>
 800f37a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f37c:	095a      	lsrs	r2, r3, #5
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f384:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f386:	f002 021f 	and.w	r2, r2, #31
 800f38a:	2101      	movs	r1, #1
 800f38c:	fa01 f202 	lsl.w	r2, r1, r2
 800f390:	4013      	ands	r3, r2
 800f392:	2b00      	cmp	r3, #0
 800f394:	d022      	beq.n	800f3dc <lwip_selscan+0x23c>
 800f396:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d01f      	beq.n	800f3dc <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 800f39c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f39e:	095a      	lsrs	r2, r3, #5
 800f3a0:	0093      	lsls	r3, r2, #2
 800f3a2:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f3a6:	440b      	add	r3, r1
 800f3a8:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f3ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f3ae:	f001 011f 	and.w	r1, r1, #31
 800f3b2:	2001      	movs	r0, #1
 800f3b4:	fa00 f101 	lsl.w	r1, r0, r1
 800f3b8:	4319      	orrs	r1, r3
 800f3ba:	0093      	lsls	r3, r2, #2
 800f3bc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f3c0:	4413      	add	r3, r2
 800f3c2:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800f3c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3c8:	3301      	adds	r3, #1
 800f3ca:	65bb      	str	r3, [r7, #88]	; 0x58
 800f3cc:	e006      	b.n	800f3dc <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800f3ce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f3d0:	f00b ffc2 	bl	801b358 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800f3d4:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d8:	e02b      	b.n	800f432 <lwip_selscan+0x292>
      continue;
 800f3da:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f3dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3de:	3301      	adds	r3, #1
 800f3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f3e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	f6ff af19 	blt.w	800f21e <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800f3ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3f4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f3f8:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800f3fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f3fe:	461a      	mov	r2, r3
 800f400:	f107 031c 	add.w	r3, r7, #28
 800f404:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f408:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800f40c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f40e:	461a      	mov	r2, r3
 800f410:	f107 0314 	add.w	r3, r7, #20
 800f414:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f418:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800f41c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f41e:	2b00      	cmp	r3, #0
 800f420:	da06      	bge.n	800f430 <lwip_selscan+0x290>
 800f422:	4b06      	ldr	r3, [pc, #24]	; (800f43c <lwip_selscan+0x29c>)
 800f424:	f240 7269 	movw	r2, #1897	; 0x769
 800f428:	4905      	ldr	r1, [pc, #20]	; (800f440 <lwip_selscan+0x2a0>)
 800f42a:	4806      	ldr	r0, [pc, #24]	; (800f444 <lwip_selscan+0x2a4>)
 800f42c:	f00c fc2e 	bl	801bc8c <iprintf>
  return nready;
 800f430:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800f432:	4618      	mov	r0, r3
 800f434:	3760      	adds	r7, #96	; 0x60
 800f436:	46bd      	mov	sp, r7
 800f438:	bd80      	pop	{r7, pc}
 800f43a:	bf00      	nop
 800f43c:	0801eca8 	.word	0x0801eca8
 800f440:	0801efd8 	.word	0x0801efd8
 800f444:	0801ecfc 	.word	0x0801ecfc

0800f448 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b0a0      	sub	sp, #128	; 0x80
 800f44c:	af04      	add	r7, sp, #16
 800f44e:	60f8      	str	r0, [r7, #12]
 800f450:	60b9      	str	r1, [r7, #8]
 800f452:	607a      	str	r2, [r7, #4]
 800f454:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800f456:	2300      	movs	r3, #0
 800f458:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	db02      	blt.n	800f466 <lwip_select+0x1e>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2b40      	cmp	r3, #64	; 0x40
 800f464:	dd05      	ble.n	800f472 <lwip_select+0x2a>
    set_errno(EINVAL);
 800f466:	4b84      	ldr	r3, [pc, #528]	; (800f678 <lwip_select+0x230>)
 800f468:	2216      	movs	r2, #22
 800f46a:	601a      	str	r2, [r3, #0]
    return -1;
 800f46c:	f04f 33ff 	mov.w	r3, #4294967295
 800f470:	e1b3      	b.n	800f7da <lwip_select+0x392>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f472:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f476:	9302      	str	r3, [sp, #8]
 800f478:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f482:	9300      	str	r3, [sp, #0]
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	68b9      	ldr	r1, [r7, #8]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7ff fe88 	bl	800f1a0 <lwip_selscan>
 800f490:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800f492:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f494:	2b00      	cmp	r3, #0
 800f496:	da05      	bge.n	800f4a4 <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800f498:	4b77      	ldr	r3, [pc, #476]	; (800f678 <lwip_select+0x230>)
 800f49a:	2209      	movs	r2, #9
 800f49c:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800f49e:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a2:	e19a      	b.n	800f7da <lwip_select+0x392>
  } else if (nready > 0) {
 800f4a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f300 8175 	bgt.w	800f796 <lwip_select+0x34e>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800f4ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d009      	beq.n	800f4c6 <lwip_select+0x7e>
 800f4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b8:	4313      	orrs	r3, r2
 800f4ba:	d104      	bne.n	800f4c6 <lwip_select+0x7e>
 800f4bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f4be:	689b      	ldr	r3, [r3, #8]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	f000 8168 	beq.w	800f796 <lwip_select+0x34e>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800f4c6:	f107 0310 	add.w	r3, r7, #16
 800f4ca:	2224      	movs	r2, #36	; 0x24
 800f4cc:	2100      	movs	r1, #0
 800f4ce:	4618      	mov	r0, r3
 800f4d0:	f00b ff92 	bl	801b3f8 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800f4e0:	f107 0310 	add.w	r3, r7, #16
 800f4e4:	3320      	adds	r3, #32
 800f4e6:	2100      	movs	r1, #0
 800f4e8:	4618      	mov	r0, r3
 800f4ea:	f00b fe2a 	bl	801b142 <sys_sem_new>
 800f4ee:	4603      	mov	r3, r0
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d005      	beq.n	800f500 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800f4f4:	4b60      	ldr	r3, [pc, #384]	; (800f678 <lwip_select+0x230>)
 800f4f6:	220c      	movs	r2, #12
 800f4f8:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800f4fa:	f04f 33ff 	mov.w	r3, #4294967295
 800f4fe:	e16c      	b.n	800f7da <lwip_select+0x392>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f500:	f107 0310 	add.w	r3, r7, #16
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff fde1 	bl	800f0cc <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f50e:	2300      	movs	r3, #0
 800f510:	663b      	str	r3, [r7, #96]	; 0x60
 800f512:	e06b      	b.n	800f5ec <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d00d      	beq.n	800f536 <lwip_select+0xee>
 800f51a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f51c:	095a      	lsrs	r2, r3, #5
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f526:	f002 021f 	and.w	r2, r2, #31
 800f52a:	2101      	movs	r1, #1
 800f52c:	fa01 f202 	lsl.w	r2, r1, r2
 800f530:	4013      	ands	r3, r2
 800f532:	2b00      	cmp	r3, #0
 800f534:	d121      	bne.n	800f57a <lwip_select+0x132>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d00d      	beq.n	800f558 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 800f53c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f53e:	095a      	lsrs	r2, r3, #5
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f546:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f548:	f002 021f 	and.w	r2, r2, #31
 800f54c:	2101      	movs	r1, #1
 800f54e:	fa01 f202 	lsl.w	r2, r1, r2
 800f552:	4013      	ands	r3, r2
 800f554:	2b00      	cmp	r3, #0
 800f556:	d110      	bne.n	800f57a <lwip_select+0x132>
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d043      	beq.n	800f5e6 <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f55e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f560:	095a      	lsrs	r2, r3, #5
 800f562:	683b      	ldr	r3, [r7, #0]
 800f564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f568:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f56a:	f002 021f 	and.w	r2, r2, #31
 800f56e:	2101      	movs	r1, #1
 800f570:	fa01 f202 	lsl.w	r2, r1, r2
 800f574:	4013      	ands	r3, r2
 800f576:	2b00      	cmp	r3, #0
 800f578:	d035      	beq.n	800f5e6 <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f57a:	f00b fedf 	bl	801b33c <sys_arch_protect>
 800f57e:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f580:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f582:	f7ff f80a 	bl	800e59a <tryget_socket_unconn_locked>
 800f586:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800f588:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d01f      	beq.n	800f5ce <lwip_select+0x186>
            sock->select_waiting++;
 800f58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f590:	7b9b      	ldrb	r3, [r3, #14]
 800f592:	3301      	adds	r3, #1
 800f594:	b2da      	uxtb	r2, r3
 800f596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f598:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800f59a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f59c:	7b9b      	ldrb	r3, [r3, #14]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d111      	bne.n	800f5c6 <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800f5a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5a4:	7b9b      	ldrb	r3, [r3, #14]
 800f5a6:	3b01      	subs	r3, #1
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f5ac:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800f5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800f5b2:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800f5b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5b6:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800f5b8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5ba:	f00b fecd 	bl	801b358 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800f5be:	4b2e      	ldr	r3, [pc, #184]	; (800f678 <lwip_select+0x230>)
 800f5c0:	2210      	movs	r2, #16
 800f5c2:	601a      	str	r2, [r3, #0]
              break;
 800f5c4:	e016      	b.n	800f5f4 <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 800f5c6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5c8:	f00b fec6 	bl	801b358 <sys_arch_unprotect>
 800f5cc:	e00b      	b.n	800f5e6 <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800f5ce:	f04f 33ff 	mov.w	r3, #4294967295
 800f5d2:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800f5d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5d6:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800f5d8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5da:	f00b febd 	bl	801b358 <sys_arch_unprotect>
            set_errno(EBADF);
 800f5de:	4b26      	ldr	r3, [pc, #152]	; (800f678 <lwip_select+0x230>)
 800f5e0:	2209      	movs	r2, #9
 800f5e2:	601a      	str	r2, [r3, #0]
            break;
 800f5e4:	e006      	b.n	800f5f4 <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f5e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	663b      	str	r3, [r7, #96]	; 0x60
 800f5ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	db8f      	blt.n	800f514 <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800f5f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	db3b      	blt.n	800f672 <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f5fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f5fe:	9302      	str	r3, [sp, #8]
 800f600:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f604:	9301      	str	r3, [sp, #4]
 800f606:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	68b9      	ldr	r1, [r7, #8]
 800f612:	68f8      	ldr	r0, [r7, #12]
 800f614:	f7ff fdc4 	bl	800f1a0 <lwip_selscan>
 800f618:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800f61a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d128      	bne.n	800f672 <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800f620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f622:	2b00      	cmp	r3, #0
 800f624:	d102      	bne.n	800f62c <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 800f626:	2300      	movs	r3, #0
 800f628:	667b      	str	r3, [r7, #100]	; 0x64
 800f62a:	e01a      	b.n	800f662 <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800f62c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f62e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f632:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f636:	fb03 f202 	mul.w	r2, r3, r2
 800f63a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f642:	490e      	ldr	r1, [pc, #56]	; (800f67c <lwip_select+0x234>)
 800f644:	fb81 0103 	smull	r0, r1, r1, r3
 800f648:	1189      	asrs	r1, r1, #6
 800f64a:	17db      	asrs	r3, r3, #31
 800f64c:	1acb      	subs	r3, r1, r3
 800f64e:	4413      	add	r3, r2
 800f650:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800f652:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f654:	2b00      	cmp	r3, #0
 800f656:	dc02      	bgt.n	800f65e <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800f658:	2301      	movs	r3, #1
 800f65a:	667b      	str	r3, [r7, #100]	; 0x64
 800f65c:	e001      	b.n	800f662 <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 800f65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f660:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800f662:	f107 0310 	add.w	r3, r7, #16
 800f666:	3320      	adds	r3, #32
 800f668:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f66a:	4618      	mov	r0, r3
 800f66c:	f00b fd91 	bl	801b192 <sys_arch_sem_wait>
 800f670:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f672:	2300      	movs	r3, #0
 800f674:	663b      	str	r3, [r7, #96]	; 0x60
 800f676:	e065      	b.n	800f744 <lwip_select+0x2fc>
 800f678:	2000d7d8 	.word	0x2000d7d8
 800f67c:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800f680:	68bb      	ldr	r3, [r7, #8]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00d      	beq.n	800f6a2 <lwip_select+0x25a>
 800f686:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f688:	095a      	lsrs	r2, r3, #5
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f692:	f002 021f 	and.w	r2, r2, #31
 800f696:	2101      	movs	r1, #1
 800f698:	fa01 f202 	lsl.w	r2, r1, r2
 800f69c:	4013      	ands	r3, r2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d121      	bne.n	800f6e6 <lwip_select+0x29e>
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00d      	beq.n	800f6c4 <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 800f6a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6aa:	095a      	lsrs	r2, r3, #5
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f6b4:	f002 021f 	and.w	r2, r2, #31
 800f6b8:	2101      	movs	r1, #1
 800f6ba:	fa01 f202 	lsl.w	r2, r1, r2
 800f6be:	4013      	ands	r3, r2
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d110      	bne.n	800f6e6 <lwip_select+0x29e>
 800f6c4:	683b      	ldr	r3, [r7, #0]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d039      	beq.n	800f73e <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f6ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f6cc:	095a      	lsrs	r2, r3, #5
 800f6ce:	683b      	ldr	r3, [r7, #0]
 800f6d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f6d6:	f002 021f 	and.w	r2, r2, #31
 800f6da:	2101      	movs	r1, #1
 800f6dc:	fa01 f202 	lsl.w	r2, r1, r2
 800f6e0:	4013      	ands	r3, r2
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d02b      	beq.n	800f73e <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f6e6:	f00b fe29 	bl	801b33c <sys_arch_protect>
 800f6ea:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f6ec:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f6ee:	f7fe ff54 	bl	800e59a <tryget_socket_unconn_locked>
 800f6f2:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800f6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d018      	beq.n	800f72c <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800f6fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f6fc:	7b9b      	ldrb	r3, [r3, #14]
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d106      	bne.n	800f710 <lwip_select+0x2c8>
 800f702:	4b38      	ldr	r3, [pc, #224]	; (800f7e4 <lwip_select+0x39c>)
 800f704:	f640 023c 	movw	r2, #2108	; 0x83c
 800f708:	4937      	ldr	r1, [pc, #220]	; (800f7e8 <lwip_select+0x3a0>)
 800f70a:	4838      	ldr	r0, [pc, #224]	; (800f7ec <lwip_select+0x3a4>)
 800f70c:	f00c fabe 	bl	801bc8c <iprintf>
            if (sock->select_waiting > 0) {
 800f710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f712:	7b9b      	ldrb	r3, [r3, #14]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d005      	beq.n	800f724 <lwip_select+0x2dc>
              sock->select_waiting--;
 800f718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f71a:	7b9b      	ldrb	r3, [r3, #14]
 800f71c:	3b01      	subs	r3, #1
 800f71e:	b2da      	uxtb	r2, r3
 800f720:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f722:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800f724:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f726:	f00b fe17 	bl	801b358 <sys_arch_unprotect>
 800f72a:	e008      	b.n	800f73e <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800f72c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f72e:	f00b fe13 	bl	801b358 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800f732:	f04f 33ff 	mov.w	r3, #4294967295
 800f736:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800f738:	4b2d      	ldr	r3, [pc, #180]	; (800f7f0 <lwip_select+0x3a8>)
 800f73a:	2209      	movs	r2, #9
 800f73c:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f73e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f740:	3301      	adds	r3, #1
 800f742:	663b      	str	r3, [r7, #96]	; 0x60
 800f744:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f746:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f748:	429a      	cmp	r2, r3
 800f74a:	db99      	blt.n	800f680 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f74c:	f107 0310 	add.w	r3, r7, #16
 800f750:	4618      	mov	r0, r3
 800f752:	f7ff fcdd 	bl	800f110 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800f756:	f107 0310 	add.w	r3, r7, #16
 800f75a:	3320      	adds	r3, #32
 800f75c:	4618      	mov	r0, r3
 800f75e:	f00b fd56 	bl	801b20e <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800f762:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f764:	2b00      	cmp	r3, #0
 800f766:	da02      	bge.n	800f76e <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 800f768:	f04f 33ff 	mov.w	r3, #4294967295
 800f76c:	e035      	b.n	800f7da <lwip_select+0x392>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 800f76e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f774:	d00f      	beq.n	800f796 <lwip_select+0x34e>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f776:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f77a:	9302      	str	r3, [sp, #8]
 800f77c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f780:	9301      	str	r3, [sp, #4]
 800f782:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f786:	9300      	str	r3, [sp, #0]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	68b9      	ldr	r1, [r7, #8]
 800f78e:	68f8      	ldr	r0, [r7, #12]
 800f790:	f7ff fd06 	bl	800f1a0 <lwip_selscan>
 800f794:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d007      	beq.n	800f7ac <lwip_select+0x364>
    *readset = lreadset;
 800f79c:	68bb      	ldr	r3, [r7, #8]
 800f79e:	461a      	mov	r2, r3
 800f7a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f7a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7a8:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d007      	beq.n	800f7c2 <lwip_select+0x37a>
    *writeset = lwriteset;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	461a      	mov	r2, r3
 800f7b6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f7ba:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7be:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d007      	beq.n	800f7d8 <lwip_select+0x390>
    *exceptset = lexceptset;
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	461a      	mov	r2, r3
 800f7cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7d0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f7d4:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800f7d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800f7da:	4618      	mov	r0, r3
 800f7dc:	3770      	adds	r7, #112	; 0x70
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	bd80      	pop	{r7, pc}
 800f7e2:	bf00      	nop
 800f7e4:	0801eca8 	.word	0x0801eca8
 800f7e8:	0801efe4 	.word	0x0801efe4
 800f7ec:	0801ecfc 	.word	0x0801ecfc
 800f7f0:	2000d7d8 	.word	0x2000d7d8

0800f7f4 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f7f4:	b480      	push	{r7}
 800f7f6:	b087      	sub	sp, #28
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	607a      	str	r2, [r7, #4]
 800f800:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f802:	2300      	movs	r3, #0
 800f804:	617b      	str	r3, [r7, #20]
 800f806:	e02c      	b.n	800f862 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	695a      	ldr	r2, [r3, #20]
 800f80c:	697b      	ldr	r3, [r7, #20]
 800f80e:	00db      	lsls	r3, r3, #3
 800f810:	4413      	add	r3, r2
 800f812:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f814:	693b      	ldr	r3, [r7, #16]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d11e      	bne.n	800f85c <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2b00      	cmp	r3, #0
 800f822:	d009      	beq.n	800f838 <lwip_poll_should_wake+0x44>
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f82a:	b29b      	uxth	r3, r3
 800f82c:	f003 0301 	and.w	r3, r3, #1
 800f830:	2b00      	cmp	r3, #0
 800f832:	d001      	beq.n	800f838 <lwip_poll_should_wake+0x44>
        return 1;
 800f834:	2301      	movs	r3, #1
 800f836:	e01a      	b.n	800f86e <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f838:	683b      	ldr	r3, [r7, #0]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d009      	beq.n	800f852 <lwip_poll_should_wake+0x5e>
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f844:	b29b      	uxth	r3, r3
 800f846:	f003 0302 	and.w	r3, r3, #2
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <lwip_poll_should_wake+0x5e>
        return 1;
 800f84e:	2301      	movs	r3, #1
 800f850:	e00d      	b.n	800f86e <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f852:	6a3b      	ldr	r3, [r7, #32]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d001      	beq.n	800f85c <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f858:	2301      	movs	r3, #1
 800f85a:	e008      	b.n	800f86e <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	3301      	adds	r3, #1
 800f860:	617b      	str	r3, [r7, #20]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	699b      	ldr	r3, [r3, #24]
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	429a      	cmp	r2, r3
 800f86a:	d3cd      	bcc.n	800f808 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	371c      	adds	r7, #28
 800f872:	46bd      	mov	sp, r7
 800f874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f878:	4770      	bx	lr
	...

0800f87c <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b08a      	sub	sp, #40	; 0x28
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	460b      	mov	r3, r1
 800f886:	70fb      	strb	r3, [r7, #3]
 800f888:	4613      	mov	r3, r2
 800f88a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	f000 80a4 	beq.w	800f9dc <event_callback+0x160>
    s = conn->socket;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	699b      	ldr	r3, [r3, #24]
 800f898:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	da18      	bge.n	800f8d2 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f8a0:	f00b fd4c 	bl	801b33c <sys_arch_protect>
 800f8a4:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	699b      	ldr	r3, [r3, #24]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	da0b      	bge.n	800f8c6 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f8ae:	78fb      	ldrb	r3, [r7, #3]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d104      	bne.n	800f8be <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	699b      	ldr	r3, [r3, #24]
 800f8b8:	1e5a      	subs	r2, r3, #1
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f8be:	69f8      	ldr	r0, [r7, #28]
 800f8c0:	f00b fd4a 	bl	801b358 <sys_arch_unprotect>
        return;
 800f8c4:	e08d      	b.n	800f9e2 <event_callback+0x166>
      }
      s = conn->socket;
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f8cc:	69f8      	ldr	r0, [r7, #28]
 800f8ce:	f00b fd43 	bl	801b358 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f8d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f8d4:	f7fe fe84 	bl	800e5e0 <get_socket>
 800f8d8:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f8da:	69bb      	ldr	r3, [r7, #24]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d07f      	beq.n	800f9e0 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f8e4:	f00b fd2a 	bl	801b33c <sys_arch_protect>
 800f8e8:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	2b04      	cmp	r3, #4
 800f8ee:	d83e      	bhi.n	800f96e <event_callback+0xf2>
 800f8f0:	a201      	add	r2, pc, #4	; (adr r2, 800f8f8 <event_callback+0x7c>)
 800f8f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f6:	bf00      	nop
 800f8f8:	0800f90d 	.word	0x0800f90d
 800f8fc:	0800f92f 	.word	0x0800f92f
 800f900:	0800f947 	.word	0x0800f947
 800f904:	0800f95b 	.word	0x0800f95b
 800f908:	0800f967 	.word	0x0800f967
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f90c:	69bb      	ldr	r3, [r7, #24]
 800f90e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f912:	b29b      	uxth	r3, r3
 800f914:	3301      	adds	r3, #1
 800f916:	b29b      	uxth	r3, r3
 800f918:	b21a      	sxth	r2, r3
 800f91a:	69bb      	ldr	r3, [r7, #24]
 800f91c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f91e:	69bb      	ldr	r3, [r7, #24]
 800f920:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f924:	2b01      	cmp	r3, #1
 800f926:	dd2a      	ble.n	800f97e <event_callback+0x102>
        check_waiters = 0;
 800f928:	2300      	movs	r3, #0
 800f92a:	623b      	str	r3, [r7, #32]
      }
      break;
 800f92c:	e027      	b.n	800f97e <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f934:	b29b      	uxth	r3, r3
 800f936:	3b01      	subs	r3, #1
 800f938:	b29b      	uxth	r3, r3
 800f93a:	b21a      	sxth	r2, r3
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f940:	2300      	movs	r3, #0
 800f942:	623b      	str	r3, [r7, #32]
      break;
 800f944:	e01c      	b.n	800f980 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	895b      	ldrh	r3, [r3, #10]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <event_callback+0xd6>
        check_waiters = 0;
 800f94e:	2300      	movs	r3, #0
 800f950:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f952:	69bb      	ldr	r3, [r7, #24]
 800f954:	2201      	movs	r2, #1
 800f956:	815a      	strh	r2, [r3, #10]
      break;
 800f958:	e012      	b.n	800f980 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2200      	movs	r2, #0
 800f95e:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f960:	2300      	movs	r3, #0
 800f962:	623b      	str	r3, [r7, #32]
      break;
 800f964:	e00c      	b.n	800f980 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f966:	69bb      	ldr	r3, [r7, #24]
 800f968:	2201      	movs	r2, #1
 800f96a:	819a      	strh	r2, [r3, #12]
      break;
 800f96c:	e008      	b.n	800f980 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f96e:	4b1e      	ldr	r3, [pc, #120]	; (800f9e8 <event_callback+0x16c>)
 800f970:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800f974:	491d      	ldr	r1, [pc, #116]	; (800f9ec <event_callback+0x170>)
 800f976:	481e      	ldr	r0, [pc, #120]	; (800f9f0 <event_callback+0x174>)
 800f978:	f00c f988 	bl	801bc8c <iprintf>
      break;
 800f97c:	e000      	b.n	800f980 <event_callback+0x104>
      break;
 800f97e:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800f980:	69bb      	ldr	r3, [r7, #24]
 800f982:	7b9b      	ldrb	r3, [r3, #14]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d025      	beq.n	800f9d4 <event_callback+0x158>
 800f988:	6a3b      	ldr	r3, [r7, #32]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d022      	beq.n	800f9d4 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800f98e:	69bb      	ldr	r3, [r7, #24]
 800f990:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f994:	2b00      	cmp	r3, #0
 800f996:	bfcc      	ite	gt
 800f998:	2301      	movgt	r3, #1
 800f99a:	2300      	movle	r3, #0
 800f99c:	b2db      	uxtb	r3, r3
 800f99e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800f9a0:	69bb      	ldr	r3, [r7, #24]
 800f9a2:	895b      	ldrh	r3, [r3, #10]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	bf14      	ite	ne
 800f9a8:	2301      	movne	r3, #1
 800f9aa:	2300      	moveq	r3, #0
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800f9b0:	69bb      	ldr	r3, [r7, #24]
 800f9b2:	899b      	ldrh	r3, [r3, #12]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	bf14      	ite	ne
 800f9b8:	2301      	movne	r3, #1
 800f9ba:	2300      	moveq	r3, #0
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800f9c0:	69f8      	ldr	r0, [r7, #28]
 800f9c2:	f00b fcc9 	bl	801b358 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	693a      	ldr	r2, [r7, #16]
 800f9ca:	6979      	ldr	r1, [r7, #20]
 800f9cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f9ce:	f000 f811 	bl	800f9f4 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800f9d2:	e006      	b.n	800f9e2 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800f9d4:	69f8      	ldr	r0, [r7, #28]
 800f9d6:	f00b fcbf 	bl	801b358 <sys_arch_unprotect>
 800f9da:	e002      	b.n	800f9e2 <event_callback+0x166>
    return;
 800f9dc:	bf00      	nop
 800f9de:	e000      	b.n	800f9e2 <event_callback+0x166>
      return;
 800f9e0:	bf00      	nop
  }
  done_socket(sock);
}
 800f9e2:	3728      	adds	r7, #40	; 0x28
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}
 800f9e8:	0801eca8 	.word	0x0801eca8
 800f9ec:	0801f024 	.word	0x0801f024
 800f9f0:	0801ecfc 	.word	0x0801ecfc

0800f9f4 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b088      	sub	sp, #32
 800f9f8:	af02      	add	r7, sp, #8
 800f9fa:	60f8      	str	r0, [r7, #12]
 800f9fc:	60b9      	str	r1, [r7, #8]
 800f9fe:	607a      	str	r2, [r7, #4]
 800fa00:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800fa02:	4b3e      	ldr	r3, [pc, #248]	; (800fafc <select_check_waiters+0x108>)
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	617b      	str	r3, [r7, #20]
 800fa08:	e06f      	b.n	800faea <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800fa0a:	697b      	ldr	r3, [r7, #20]
 800fa0c:	69db      	ldr	r3, [r3, #28]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d168      	bne.n	800fae4 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800fa12:	2300      	movs	r3, #0
 800fa14:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800fa16:	697b      	ldr	r3, [r7, #20]
 800fa18:	695b      	ldr	r3, [r3, #20]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d009      	beq.n	800fa32 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	9300      	str	r3, [sp, #0]
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	68ba      	ldr	r2, [r7, #8]
 800fa26:	68f9      	ldr	r1, [r7, #12]
 800fa28:	6978      	ldr	r0, [r7, #20]
 800fa2a:	f7ff fee3 	bl	800f7f4 <lwip_poll_should_wake>
 800fa2e:	6138      	str	r0, [r7, #16]
 800fa30:	e04d      	b.n	800face <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800fa32:	68bb      	ldr	r3, [r7, #8]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d014      	beq.n	800fa62 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800fa38:	697b      	ldr	r3, [r7, #20]
 800fa3a:	689b      	ldr	r3, [r3, #8]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d010      	beq.n	800fa62 <select_check_waiters+0x6e>
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	689b      	ldr	r3, [r3, #8]
 800fa44:	68fa      	ldr	r2, [r7, #12]
 800fa46:	0952      	lsrs	r2, r2, #5
 800fa48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	f002 021f 	and.w	r2, r2, #31
 800fa52:	2101      	movs	r1, #1
 800fa54:	fa01 f202 	lsl.w	r2, r1, r2
 800fa58:	4013      	ands	r3, r2
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d001      	beq.n	800fa62 <select_check_waiters+0x6e>
            do_signal = 1;
 800fa5e:	2301      	movs	r3, #1
 800fa60:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d017      	beq.n	800fa98 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d114      	bne.n	800fa98 <select_check_waiters+0xa4>
 800fa6e:	697b      	ldr	r3, [r7, #20]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d010      	beq.n	800fa98 <select_check_waiters+0xa4>
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	68fa      	ldr	r2, [r7, #12]
 800fa7c:	0952      	lsrs	r2, r2, #5
 800fa7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa82:	68fa      	ldr	r2, [r7, #12]
 800fa84:	f002 021f 	and.w	r2, r2, #31
 800fa88:	2101      	movs	r1, #1
 800fa8a:	fa01 f202 	lsl.w	r2, r1, r2
 800fa8e:	4013      	ands	r3, r2
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d001      	beq.n	800fa98 <select_check_waiters+0xa4>
            do_signal = 1;
 800fa94:	2301      	movs	r3, #1
 800fa96:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800fa98:	683b      	ldr	r3, [r7, #0]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d017      	beq.n	800face <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800fa9e:	693b      	ldr	r3, [r7, #16]
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d114      	bne.n	800face <select_check_waiters+0xda>
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	691b      	ldr	r3, [r3, #16]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d010      	beq.n	800face <select_check_waiters+0xda>
 800faac:	697b      	ldr	r3, [r7, #20]
 800faae:	691b      	ldr	r3, [r3, #16]
 800fab0:	68fa      	ldr	r2, [r7, #12]
 800fab2:	0952      	lsrs	r2, r2, #5
 800fab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fab8:	68fa      	ldr	r2, [r7, #12]
 800faba:	f002 021f 	and.w	r2, r2, #31
 800fabe:	2101      	movs	r1, #1
 800fac0:	fa01 f202 	lsl.w	r2, r1, r2
 800fac4:	4013      	ands	r3, r2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <select_check_waiters+0xda>
            do_signal = 1;
 800faca:	2301      	movs	r3, #1
 800facc:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800face:	693b      	ldr	r3, [r7, #16]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d007      	beq.n	800fae4 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	2201      	movs	r2, #1
 800fad8:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800fada:	697b      	ldr	r3, [r7, #20]
 800fadc:	3320      	adds	r3, #32
 800fade:	4618      	mov	r0, r3
 800fae0:	f00b fb88 	bl	801b1f4 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	681b      	ldr	r3, [r3, #0]
 800fae8:	617b      	str	r3, [r7, #20]
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d18c      	bne.n	800fa0a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800faf0:	bf00      	nop
 800faf2:	bf00      	nop
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	2000479c 	.word	0x2000479c

0800fb00 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b084      	sub	sp, #16
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fb0a:	f008 f933 	bl	8017d74 <sys_timeouts_sleeptime>
 800fb0e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb16:	d10b      	bne.n	800fb30 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fb18:	4813      	ldr	r0, [pc, #76]	; (800fb68 <tcpip_timeouts_mbox_fetch+0x68>)
 800fb1a:	f00b fbdc 	bl	801b2d6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fb1e:	2200      	movs	r2, #0
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f00b fa94 	bl	801b050 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fb28:	480f      	ldr	r0, [pc, #60]	; (800fb68 <tcpip_timeouts_mbox_fetch+0x68>)
 800fb2a:	f00b fbc5 	bl	801b2b8 <sys_mutex_lock>
    return;
 800fb2e:	e018      	b.n	800fb62 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d102      	bne.n	800fb3c <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fb36:	f008 f8e3 	bl	8017d00 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fb3a:	e7e6      	b.n	800fb0a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fb3c:	480a      	ldr	r0, [pc, #40]	; (800fb68 <tcpip_timeouts_mbox_fetch+0x68>)
 800fb3e:	f00b fbca 	bl	801b2d6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fb42:	68fa      	ldr	r2, [r7, #12]
 800fb44:	6839      	ldr	r1, [r7, #0]
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f00b fa82 	bl	801b050 <sys_arch_mbox_fetch>
 800fb4c:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fb4e:	4806      	ldr	r0, [pc, #24]	; (800fb68 <tcpip_timeouts_mbox_fetch+0x68>)
 800fb50:	f00b fbb2 	bl	801b2b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fb54:	68bb      	ldr	r3, [r7, #8]
 800fb56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb5a:	d102      	bne.n	800fb62 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fb5c:	f008 f8d0 	bl	8017d00 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fb60:	e7d3      	b.n	800fb0a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fb62:	3710      	adds	r7, #16
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	2000a0a4 	.word	0x2000a0a4

0800fb6c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fb74:	4810      	ldr	r0, [pc, #64]	; (800fbb8 <tcpip_thread+0x4c>)
 800fb76:	f00b fb9f 	bl	801b2b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fb7a:	4b10      	ldr	r3, [pc, #64]	; (800fbbc <tcpip_thread+0x50>)
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	2b00      	cmp	r3, #0
 800fb80:	d005      	beq.n	800fb8e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fb82:	4b0e      	ldr	r3, [pc, #56]	; (800fbbc <tcpip_thread+0x50>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	4a0e      	ldr	r2, [pc, #56]	; (800fbc0 <tcpip_thread+0x54>)
 800fb88:	6812      	ldr	r2, [r2, #0]
 800fb8a:	4610      	mov	r0, r2
 800fb8c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	4619      	mov	r1, r3
 800fb94:	480b      	ldr	r0, [pc, #44]	; (800fbc4 <tcpip_thread+0x58>)
 800fb96:	f7ff ffb3 	bl	800fb00 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d106      	bne.n	800fbae <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fba0:	4b09      	ldr	r3, [pc, #36]	; (800fbc8 <tcpip_thread+0x5c>)
 800fba2:	2291      	movs	r2, #145	; 0x91
 800fba4:	4909      	ldr	r1, [pc, #36]	; (800fbcc <tcpip_thread+0x60>)
 800fba6:	480a      	ldr	r0, [pc, #40]	; (800fbd0 <tcpip_thread+0x64>)
 800fba8:	f00c f870 	bl	801bc8c <iprintf>
      continue;
 800fbac:	e003      	b.n	800fbb6 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f000 f80f 	bl	800fbd4 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fbb6:	e7ea      	b.n	800fb8e <tcpip_thread+0x22>
 800fbb8:	2000a0a4 	.word	0x2000a0a4
 800fbbc:	200047a0 	.word	0x200047a0
 800fbc0:	200047a4 	.word	0x200047a4
 800fbc4:	200047a8 	.word	0x200047a8
 800fbc8:	0801f078 	.word	0x0801f078
 800fbcc:	0801f0a8 	.word	0x0801f0a8
 800fbd0:	0801f0c8 	.word	0x0801f0c8

0800fbd4 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b02      	cmp	r3, #2
 800fbe2:	d026      	beq.n	800fc32 <tcpip_thread_handle_msg+0x5e>
 800fbe4:	2b02      	cmp	r3, #2
 800fbe6:	dc2b      	bgt.n	800fc40 <tcpip_thread_handle_msg+0x6c>
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d002      	beq.n	800fbf2 <tcpip_thread_handle_msg+0x1e>
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d015      	beq.n	800fc1c <tcpip_thread_handle_msg+0x48>
 800fbf0:	e026      	b.n	800fc40 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	687a      	ldr	r2, [r7, #4]
 800fbf8:	6850      	ldr	r0, [r2, #4]
 800fbfa:	687a      	ldr	r2, [r7, #4]
 800fbfc:	6892      	ldr	r2, [r2, #8]
 800fbfe:	4611      	mov	r1, r2
 800fc00:	4798      	blx	r3
 800fc02:	4603      	mov	r3, r0
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d004      	beq.n	800fc12 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f001 fd0d 	bl	801162c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fc12:	6879      	ldr	r1, [r7, #4]
 800fc14:	2009      	movs	r0, #9
 800fc16:	f000 fe33 	bl	8010880 <memp_free>
      break;
 800fc1a:	e018      	b.n	800fc4e <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	685b      	ldr	r3, [r3, #4]
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	6892      	ldr	r2, [r2, #8]
 800fc24:	4610      	mov	r0, r2
 800fc26:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fc28:	6879      	ldr	r1, [r7, #4]
 800fc2a:	2008      	movs	r0, #8
 800fc2c:	f000 fe28 	bl	8010880 <memp_free>
      break;
 800fc30:	e00d      	b.n	800fc4e <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	685b      	ldr	r3, [r3, #4]
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	6892      	ldr	r2, [r2, #8]
 800fc3a:	4610      	mov	r0, r2
 800fc3c:	4798      	blx	r3
      break;
 800fc3e:	e006      	b.n	800fc4e <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fc40:	4b05      	ldr	r3, [pc, #20]	; (800fc58 <tcpip_thread_handle_msg+0x84>)
 800fc42:	22cf      	movs	r2, #207	; 0xcf
 800fc44:	4905      	ldr	r1, [pc, #20]	; (800fc5c <tcpip_thread_handle_msg+0x88>)
 800fc46:	4806      	ldr	r0, [pc, #24]	; (800fc60 <tcpip_thread_handle_msg+0x8c>)
 800fc48:	f00c f820 	bl	801bc8c <iprintf>
      break;
 800fc4c:	bf00      	nop
  }
}
 800fc4e:	bf00      	nop
 800fc50:	3708      	adds	r7, #8
 800fc52:	46bd      	mov	sp, r7
 800fc54:	bd80      	pop	{r7, pc}
 800fc56:	bf00      	nop
 800fc58:	0801f078 	.word	0x0801f078
 800fc5c:	0801f0a8 	.word	0x0801f0a8
 800fc60:	0801f0c8 	.word	0x0801f0c8

0800fc64 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	60f8      	str	r0, [r7, #12]
 800fc6c:	60b9      	str	r1, [r7, #8]
 800fc6e:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fc70:	481a      	ldr	r0, [pc, #104]	; (800fcdc <tcpip_inpkt+0x78>)
 800fc72:	f00b fa48 	bl	801b106 <sys_mbox_valid>
 800fc76:	4603      	mov	r3, r0
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d105      	bne.n	800fc88 <tcpip_inpkt+0x24>
 800fc7c:	4b18      	ldr	r3, [pc, #96]	; (800fce0 <tcpip_inpkt+0x7c>)
 800fc7e:	22fc      	movs	r2, #252	; 0xfc
 800fc80:	4918      	ldr	r1, [pc, #96]	; (800fce4 <tcpip_inpkt+0x80>)
 800fc82:	4819      	ldr	r0, [pc, #100]	; (800fce8 <tcpip_inpkt+0x84>)
 800fc84:	f00c f802 	bl	801bc8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fc88:	2009      	movs	r0, #9
 800fc8a:	f000 fda7 	bl	80107dc <memp_malloc>
 800fc8e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d102      	bne.n	800fc9c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fc96:	f04f 33ff 	mov.w	r3, #4294967295
 800fc9a:	e01a      	b.n	800fcd2 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	2200      	movs	r2, #0
 800fca0:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	68fa      	ldr	r2, [r7, #12]
 800fca6:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	68ba      	ldr	r2, [r7, #8]
 800fcac:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fcb4:	6979      	ldr	r1, [r7, #20]
 800fcb6:	4809      	ldr	r0, [pc, #36]	; (800fcdc <tcpip_inpkt+0x78>)
 800fcb8:	f00b f9b0 	bl	801b01c <sys_mbox_trypost>
 800fcbc:	4603      	mov	r3, r0
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d006      	beq.n	800fcd0 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fcc2:	6979      	ldr	r1, [r7, #20]
 800fcc4:	2009      	movs	r0, #9
 800fcc6:	f000 fddb 	bl	8010880 <memp_free>
    return ERR_MEM;
 800fcca:	f04f 33ff 	mov.w	r3, #4294967295
 800fcce:	e000      	b.n	800fcd2 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800fcd0:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3718      	adds	r7, #24
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}
 800fcda:	bf00      	nop
 800fcdc:	200047a8 	.word	0x200047a8
 800fce0:	0801f078 	.word	0x0801f078
 800fce4:	0801f0f0 	.word	0x0801f0f0
 800fce8:	0801f0c8 	.word	0x0801f0c8

0800fcec <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcfc:	f003 0318 	and.w	r3, r3, #24
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d006      	beq.n	800fd12 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800fd04:	4a08      	ldr	r2, [pc, #32]	; (800fd28 <tcpip_input+0x3c>)
 800fd06:	6839      	ldr	r1, [r7, #0]
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f7ff ffab 	bl	800fc64 <tcpip_inpkt>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	e005      	b.n	800fd1e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800fd12:	4a06      	ldr	r2, [pc, #24]	; (800fd2c <tcpip_input+0x40>)
 800fd14:	6839      	ldr	r1, [r7, #0]
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7ff ffa4 	bl	800fc64 <tcpip_inpkt>
 800fd1c:	4603      	mov	r3, r0
}
 800fd1e:	4618      	mov	r0, r3
 800fd20:	3708      	adds	r7, #8
 800fd22:	46bd      	mov	sp, r7
 800fd24:	bd80      	pop	{r7, pc}
 800fd26:	bf00      	nop
 800fd28:	0801ae09 	.word	0x0801ae09
 800fd2c:	08019aa1 	.word	0x08019aa1

0800fd30 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b084      	sub	sp, #16
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
 800fd38:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fd3a:	4819      	ldr	r0, [pc, #100]	; (800fda0 <tcpip_try_callback+0x70>)
 800fd3c:	f00b f9e3 	bl	801b106 <sys_mbox_valid>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d106      	bne.n	800fd54 <tcpip_try_callback+0x24>
 800fd46:	4b17      	ldr	r3, [pc, #92]	; (800fda4 <tcpip_try_callback+0x74>)
 800fd48:	f240 125d 	movw	r2, #349	; 0x15d
 800fd4c:	4916      	ldr	r1, [pc, #88]	; (800fda8 <tcpip_try_callback+0x78>)
 800fd4e:	4817      	ldr	r0, [pc, #92]	; (800fdac <tcpip_try_callback+0x7c>)
 800fd50:	f00b ff9c 	bl	801bc8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800fd54:	2008      	movs	r0, #8
 800fd56:	f000 fd41 	bl	80107dc <memp_malloc>
 800fd5a:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d102      	bne.n	800fd68 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800fd62:	f04f 33ff 	mov.w	r3, #4294967295
 800fd66:	e017      	b.n	800fd98 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	683a      	ldr	r2, [r7, #0]
 800fd78:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fd7a:	68f9      	ldr	r1, [r7, #12]
 800fd7c:	4808      	ldr	r0, [pc, #32]	; (800fda0 <tcpip_try_callback+0x70>)
 800fd7e:	f00b f94d 	bl	801b01c <sys_mbox_trypost>
 800fd82:	4603      	mov	r3, r0
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d006      	beq.n	800fd96 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fd88:	68f9      	ldr	r1, [r7, #12]
 800fd8a:	2008      	movs	r0, #8
 800fd8c:	f000 fd78 	bl	8010880 <memp_free>
    return ERR_MEM;
 800fd90:	f04f 33ff 	mov.w	r3, #4294967295
 800fd94:	e000      	b.n	800fd98 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fd96:	2300      	movs	r3, #0
}
 800fd98:	4618      	mov	r0, r3
 800fd9a:	3710      	adds	r7, #16
 800fd9c:	46bd      	mov	sp, r7
 800fd9e:	bd80      	pop	{r7, pc}
 800fda0:	200047a8 	.word	0x200047a8
 800fda4:	0801f078 	.word	0x0801f078
 800fda8:	0801f0f0 	.word	0x0801f0f0
 800fdac:	0801f0c8 	.word	0x0801f0c8

0800fdb0 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	60f8      	str	r0, [r7, #12]
 800fdb8:	60b9      	str	r1, [r7, #8]
 800fdba:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800fdbc:	4806      	ldr	r0, [pc, #24]	; (800fdd8 <tcpip_send_msg_wait_sem+0x28>)
 800fdbe:	f00b fa7b 	bl	801b2b8 <sys_mutex_lock>
  fn(apimsg);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	68b8      	ldr	r0, [r7, #8]
 800fdc6:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800fdc8:	4803      	ldr	r0, [pc, #12]	; (800fdd8 <tcpip_send_msg_wait_sem+0x28>)
 800fdca:	f00b fa84 	bl	801b2d6 <sys_mutex_unlock>
  return ERR_OK;
 800fdce:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3710      	adds	r7, #16
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	2000a0a4 	.word	0x2000a0a4

0800fddc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af02      	add	r7, sp, #8
 800fde2:	6078      	str	r0, [r7, #4]
 800fde4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800fde6:	f000 f871 	bl	800fecc <lwip_init>

  tcpip_init_done = initfunc;
 800fdea:	4a17      	ldr	r2, [pc, #92]	; (800fe48 <tcpip_init+0x6c>)
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800fdf0:	4a16      	ldr	r2, [pc, #88]	; (800fe4c <tcpip_init+0x70>)
 800fdf2:	683b      	ldr	r3, [r7, #0]
 800fdf4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800fdf6:	2106      	movs	r1, #6
 800fdf8:	4815      	ldr	r0, [pc, #84]	; (800fe50 <tcpip_init+0x74>)
 800fdfa:	f00b f8db 	bl	801afb4 <sys_mbox_new>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d006      	beq.n	800fe12 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800fe04:	4b13      	ldr	r3, [pc, #76]	; (800fe54 <tcpip_init+0x78>)
 800fe06:	f240 2261 	movw	r2, #609	; 0x261
 800fe0a:	4913      	ldr	r1, [pc, #76]	; (800fe58 <tcpip_init+0x7c>)
 800fe0c:	4813      	ldr	r0, [pc, #76]	; (800fe5c <tcpip_init+0x80>)
 800fe0e:	f00b ff3d 	bl	801bc8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800fe12:	4813      	ldr	r0, [pc, #76]	; (800fe60 <tcpip_init+0x84>)
 800fe14:	f00b fa34 	bl	801b280 <sys_mutex_new>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d006      	beq.n	800fe2c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800fe1e:	4b0d      	ldr	r3, [pc, #52]	; (800fe54 <tcpip_init+0x78>)
 800fe20:	f240 2265 	movw	r2, #613	; 0x265
 800fe24:	490f      	ldr	r1, [pc, #60]	; (800fe64 <tcpip_init+0x88>)
 800fe26:	480d      	ldr	r0, [pc, #52]	; (800fe5c <tcpip_init+0x80>)
 800fe28:	f00b ff30 	bl	801bc8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800fe2c:	2300      	movs	r3, #0
 800fe2e:	9300      	str	r3, [sp, #0]
 800fe30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe34:	2200      	movs	r2, #0
 800fe36:	490c      	ldr	r1, [pc, #48]	; (800fe68 <tcpip_init+0x8c>)
 800fe38:	480c      	ldr	r0, [pc, #48]	; (800fe6c <tcpip_init+0x90>)
 800fe3a:	f00b fa59 	bl	801b2f0 <sys_thread_new>
}
 800fe3e:	bf00      	nop
 800fe40:	3708      	adds	r7, #8
 800fe42:	46bd      	mov	sp, r7
 800fe44:	bd80      	pop	{r7, pc}
 800fe46:	bf00      	nop
 800fe48:	200047a0 	.word	0x200047a0
 800fe4c:	200047a4 	.word	0x200047a4
 800fe50:	200047a8 	.word	0x200047a8
 800fe54:	0801f078 	.word	0x0801f078
 800fe58:	0801f100 	.word	0x0801f100
 800fe5c:	0801f0c8 	.word	0x0801f0c8
 800fe60:	2000a0a4 	.word	0x2000a0a4
 800fe64:	0801f124 	.word	0x0801f124
 800fe68:	0800fb6d 	.word	0x0800fb6d
 800fe6c:	0801f148 	.word	0x0801f148

0800fe70 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fe70:	b480      	push	{r7}
 800fe72:	b083      	sub	sp, #12
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	4603      	mov	r3, r0
 800fe78:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fe7a:	88fb      	ldrh	r3, [r7, #6]
 800fe7c:	021b      	lsls	r3, r3, #8
 800fe7e:	b21a      	sxth	r2, r3
 800fe80:	88fb      	ldrh	r3, [r7, #6]
 800fe82:	0a1b      	lsrs	r3, r3, #8
 800fe84:	b29b      	uxth	r3, r3
 800fe86:	b21b      	sxth	r3, r3
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	b21b      	sxth	r3, r3
 800fe8c:	b29b      	uxth	r3, r3
}
 800fe8e:	4618      	mov	r0, r3
 800fe90:	370c      	adds	r7, #12
 800fe92:	46bd      	mov	sp, r7
 800fe94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe98:	4770      	bx	lr

0800fe9a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fe9a:	b480      	push	{r7}
 800fe9c:	b083      	sub	sp, #12
 800fe9e:	af00      	add	r7, sp, #0
 800fea0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	061a      	lsls	r2, r3, #24
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	021b      	lsls	r3, r3, #8
 800feaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800feae:	431a      	orrs	r2, r3
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	0a1b      	lsrs	r3, r3, #8
 800feb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800feb8:	431a      	orrs	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	0e1b      	lsrs	r3, r3, #24
 800febe:	4313      	orrs	r3, r2
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	370c      	adds	r7, #12
 800fec4:	46bd      	mov	sp, r7
 800fec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feca:	4770      	bx	lr

0800fecc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	b082      	sub	sp, #8
 800fed0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fed2:	2300      	movs	r3, #0
 800fed4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fed6:	f00b f9c5 	bl	801b264 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800feda:	f000 f8d5 	bl	8010088 <mem_init>
  memp_init();
 800fede:	f000 fc31 	bl	8010744 <memp_init>
  pbuf_init();
  netif_init();
 800fee2:	f000 fcf7 	bl	80108d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fee6:	f007 ff7d 	bl	8017de4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800feea:	f001 fe49 	bl	8011b80 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800feee:	f007 febf 	bl	8017c70 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fef2:	bf00      	nop
 800fef4:	3708      	adds	r7, #8
 800fef6:	46bd      	mov	sp, r7
 800fef8:	bd80      	pop	{r7, pc}
	...

0800fefc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	4603      	mov	r3, r0
 800ff04:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ff06:	4b05      	ldr	r3, [pc, #20]	; (800ff1c <ptr_to_mem+0x20>)
 800ff08:	681a      	ldr	r2, [r3, #0]
 800ff0a:	88fb      	ldrh	r3, [r7, #6]
 800ff0c:	4413      	add	r3, r2
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr
 800ff1a:	bf00      	nop
 800ff1c:	200047ac 	.word	0x200047ac

0800ff20 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ff20:	b480      	push	{r7}
 800ff22:	b083      	sub	sp, #12
 800ff24:	af00      	add	r7, sp, #0
 800ff26:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ff28:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <mem_to_ptr+0x20>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	687a      	ldr	r2, [r7, #4]
 800ff2e:	1ad3      	subs	r3, r2, r3
 800ff30:	b29b      	uxth	r3, r3
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	370c      	adds	r7, #12
 800ff36:	46bd      	mov	sp, r7
 800ff38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3c:	4770      	bx	lr
 800ff3e:	bf00      	nop
 800ff40:	200047ac 	.word	0x200047ac

0800ff44 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ff44:	b590      	push	{r4, r7, lr}
 800ff46:	b085      	sub	sp, #20
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ff4c:	4b45      	ldr	r3, [pc, #276]	; (8010064 <plug_holes+0x120>)
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	687a      	ldr	r2, [r7, #4]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d206      	bcs.n	800ff64 <plug_holes+0x20>
 800ff56:	4b44      	ldr	r3, [pc, #272]	; (8010068 <plug_holes+0x124>)
 800ff58:	f240 12df 	movw	r2, #479	; 0x1df
 800ff5c:	4943      	ldr	r1, [pc, #268]	; (801006c <plug_holes+0x128>)
 800ff5e:	4844      	ldr	r0, [pc, #272]	; (8010070 <plug_holes+0x12c>)
 800ff60:	f00b fe94 	bl	801bc8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ff64:	4b43      	ldr	r3, [pc, #268]	; (8010074 <plug_holes+0x130>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	429a      	cmp	r2, r3
 800ff6c:	d306      	bcc.n	800ff7c <plug_holes+0x38>
 800ff6e:	4b3e      	ldr	r3, [pc, #248]	; (8010068 <plug_holes+0x124>)
 800ff70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ff74:	4940      	ldr	r1, [pc, #256]	; (8010078 <plug_holes+0x134>)
 800ff76:	483e      	ldr	r0, [pc, #248]	; (8010070 <plug_holes+0x12c>)
 800ff78:	f00b fe88 	bl	801bc8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	791b      	ldrb	r3, [r3, #4]
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d006      	beq.n	800ff92 <plug_holes+0x4e>
 800ff84:	4b38      	ldr	r3, [pc, #224]	; (8010068 <plug_holes+0x124>)
 800ff86:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ff8a:	493c      	ldr	r1, [pc, #240]	; (801007c <plug_holes+0x138>)
 800ff8c:	4838      	ldr	r0, [pc, #224]	; (8010070 <plug_holes+0x12c>)
 800ff8e:	f00b fe7d 	bl	801bc8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	881b      	ldrh	r3, [r3, #0]
 800ff96:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ff9a:	d906      	bls.n	800ffaa <plug_holes+0x66>
 800ff9c:	4b32      	ldr	r3, [pc, #200]	; (8010068 <plug_holes+0x124>)
 800ff9e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ffa2:	4937      	ldr	r1, [pc, #220]	; (8010080 <plug_holes+0x13c>)
 800ffa4:	4832      	ldr	r0, [pc, #200]	; (8010070 <plug_holes+0x12c>)
 800ffa6:	f00b fe71 	bl	801bc8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7ff ffa4 	bl	800fefc <ptr_to_mem>
 800ffb4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d024      	beq.n	8010008 <plug_holes+0xc4>
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	791b      	ldrb	r3, [r3, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d120      	bne.n	8010008 <plug_holes+0xc4>
 800ffc6:	4b2b      	ldr	r3, [pc, #172]	; (8010074 <plug_holes+0x130>)
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	68fa      	ldr	r2, [r7, #12]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d01b      	beq.n	8010008 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ffd0:	4b2c      	ldr	r3, [pc, #176]	; (8010084 <plug_holes+0x140>)
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	68fa      	ldr	r2, [r7, #12]
 800ffd6:	429a      	cmp	r2, r3
 800ffd8:	d102      	bne.n	800ffe0 <plug_holes+0x9c>
      lfree = mem;
 800ffda:	4a2a      	ldr	r2, [pc, #168]	; (8010084 <plug_holes+0x140>)
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	881a      	ldrh	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	881b      	ldrh	r3, [r3, #0]
 800ffec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800fff0:	d00a      	beq.n	8010008 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fff2:	68fb      	ldr	r3, [r7, #12]
 800fff4:	881b      	ldrh	r3, [r3, #0]
 800fff6:	4618      	mov	r0, r3
 800fff8:	f7ff ff80 	bl	800fefc <ptr_to_mem>
 800fffc:	4604      	mov	r4, r0
 800fffe:	6878      	ldr	r0, [r7, #4]
 8010000:	f7ff ff8e 	bl	800ff20 <mem_to_ptr>
 8010004:	4603      	mov	r3, r0
 8010006:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	885b      	ldrh	r3, [r3, #2]
 801000c:	4618      	mov	r0, r3
 801000e:	f7ff ff75 	bl	800fefc <ptr_to_mem>
 8010012:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010014:	68ba      	ldr	r2, [r7, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	429a      	cmp	r2, r3
 801001a:	d01f      	beq.n	801005c <plug_holes+0x118>
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	791b      	ldrb	r3, [r3, #4]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d11b      	bne.n	801005c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010024:	4b17      	ldr	r3, [pc, #92]	; (8010084 <plug_holes+0x140>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	429a      	cmp	r2, r3
 801002c:	d102      	bne.n	8010034 <plug_holes+0xf0>
      lfree = pmem;
 801002e:	4a15      	ldr	r2, [pc, #84]	; (8010084 <plug_holes+0x140>)
 8010030:	68bb      	ldr	r3, [r7, #8]
 8010032:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	881a      	ldrh	r2, [r3, #0]
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	881b      	ldrh	r3, [r3, #0]
 8010040:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010044:	d00a      	beq.n	801005c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	881b      	ldrh	r3, [r3, #0]
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ff56 	bl	800fefc <ptr_to_mem>
 8010050:	4604      	mov	r4, r0
 8010052:	68b8      	ldr	r0, [r7, #8]
 8010054:	f7ff ff64 	bl	800ff20 <mem_to_ptr>
 8010058:	4603      	mov	r3, r0
 801005a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801005c:	bf00      	nop
 801005e:	3714      	adds	r7, #20
 8010060:	46bd      	mov	sp, r7
 8010062:	bd90      	pop	{r4, r7, pc}
 8010064:	200047ac 	.word	0x200047ac
 8010068:	0801f158 	.word	0x0801f158
 801006c:	0801f188 	.word	0x0801f188
 8010070:	0801f1a0 	.word	0x0801f1a0
 8010074:	200047b0 	.word	0x200047b0
 8010078:	0801f1c8 	.word	0x0801f1c8
 801007c:	0801f1e4 	.word	0x0801f1e4
 8010080:	0801f200 	.word	0x0801f200
 8010084:	200047b8 	.word	0x200047b8

08010088 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801008e:	4b1f      	ldr	r3, [pc, #124]	; (801010c <mem_init+0x84>)
 8010090:	3303      	adds	r3, #3
 8010092:	f023 0303 	bic.w	r3, r3, #3
 8010096:	461a      	mov	r2, r3
 8010098:	4b1d      	ldr	r3, [pc, #116]	; (8010110 <mem_init+0x88>)
 801009a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801009c:	4b1c      	ldr	r3, [pc, #112]	; (8010110 <mem_init+0x88>)
 801009e:	681b      	ldr	r3, [r3, #0]
 80100a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	2200      	movs	r2, #0
 80100ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80100b6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80100ba:	f7ff ff1f 	bl	800fefc <ptr_to_mem>
 80100be:	4603      	mov	r3, r0
 80100c0:	4a14      	ldr	r2, [pc, #80]	; (8010114 <mem_init+0x8c>)
 80100c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80100c4:	4b13      	ldr	r3, [pc, #76]	; (8010114 <mem_init+0x8c>)
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2201      	movs	r2, #1
 80100ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80100cc:	4b11      	ldr	r3, [pc, #68]	; (8010114 <mem_init+0x8c>)
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80100d6:	4b0f      	ldr	r3, [pc, #60]	; (8010114 <mem_init+0x8c>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80100de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80100e0:	4b0b      	ldr	r3, [pc, #44]	; (8010110 <mem_init+0x88>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	4a0c      	ldr	r2, [pc, #48]	; (8010118 <mem_init+0x90>)
 80100e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80100e8:	480c      	ldr	r0, [pc, #48]	; (801011c <mem_init+0x94>)
 80100ea:	f00b f8c9 	bl	801b280 <sys_mutex_new>
 80100ee:	4603      	mov	r3, r0
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80100f4:	4b0a      	ldr	r3, [pc, #40]	; (8010120 <mem_init+0x98>)
 80100f6:	f240 221f 	movw	r2, #543	; 0x21f
 80100fa:	490a      	ldr	r1, [pc, #40]	; (8010124 <mem_init+0x9c>)
 80100fc:	480a      	ldr	r0, [pc, #40]	; (8010128 <mem_init+0xa0>)
 80100fe:	f00b fdc5 	bl	801bc8c <iprintf>
  }
}
 8010102:	bf00      	nop
 8010104:	3708      	adds	r7, #8
 8010106:	46bd      	mov	sp, r7
 8010108:	bd80      	pop	{r7, pc}
 801010a:	bf00      	nop
 801010c:	2000a0c0 	.word	0x2000a0c0
 8010110:	200047ac 	.word	0x200047ac
 8010114:	200047b0 	.word	0x200047b0
 8010118:	200047b8 	.word	0x200047b8
 801011c:	200047b4 	.word	0x200047b4
 8010120:	0801f158 	.word	0x0801f158
 8010124:	0801f22c 	.word	0x0801f22c
 8010128:	0801f1a0 	.word	0x0801f1a0

0801012c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801012c:	b580      	push	{r7, lr}
 801012e:	b086      	sub	sp, #24
 8010130:	af00      	add	r7, sp, #0
 8010132:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010134:	6878      	ldr	r0, [r7, #4]
 8010136:	f7ff fef3 	bl	800ff20 <mem_to_ptr>
 801013a:	4603      	mov	r3, r0
 801013c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	881b      	ldrh	r3, [r3, #0]
 8010142:	4618      	mov	r0, r3
 8010144:	f7ff feda 	bl	800fefc <ptr_to_mem>
 8010148:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	885b      	ldrh	r3, [r3, #2]
 801014e:	4618      	mov	r0, r3
 8010150:	f7ff fed4 	bl	800fefc <ptr_to_mem>
 8010154:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	881b      	ldrh	r3, [r3, #0]
 801015a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801015e:	d818      	bhi.n	8010192 <mem_link_valid+0x66>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	885b      	ldrh	r3, [r3, #2]
 8010164:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010168:	d813      	bhi.n	8010192 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801016e:	8afa      	ldrh	r2, [r7, #22]
 8010170:	429a      	cmp	r2, r3
 8010172:	d004      	beq.n	801017e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	881b      	ldrh	r3, [r3, #0]
 8010178:	8afa      	ldrh	r2, [r7, #22]
 801017a:	429a      	cmp	r2, r3
 801017c:	d109      	bne.n	8010192 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801017e:	4b08      	ldr	r3, [pc, #32]	; (80101a0 <mem_link_valid+0x74>)
 8010180:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010182:	693a      	ldr	r2, [r7, #16]
 8010184:	429a      	cmp	r2, r3
 8010186:	d006      	beq.n	8010196 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010188:	693b      	ldr	r3, [r7, #16]
 801018a:	885b      	ldrh	r3, [r3, #2]
 801018c:	8afa      	ldrh	r2, [r7, #22]
 801018e:	429a      	cmp	r2, r3
 8010190:	d001      	beq.n	8010196 <mem_link_valid+0x6a>
    return 0;
 8010192:	2300      	movs	r3, #0
 8010194:	e000      	b.n	8010198 <mem_link_valid+0x6c>
  }
  return 1;
 8010196:	2301      	movs	r3, #1
}
 8010198:	4618      	mov	r0, r3
 801019a:	3718      	adds	r7, #24
 801019c:	46bd      	mov	sp, r7
 801019e:	bd80      	pop	{r7, pc}
 80101a0:	200047b0 	.word	0x200047b0

080101a4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b088      	sub	sp, #32
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d070      	beq.n	8010294 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f003 0303 	and.w	r3, r3, #3
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	d00d      	beq.n	80101d8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80101bc:	4b37      	ldr	r3, [pc, #220]	; (801029c <mem_free+0xf8>)
 80101be:	f240 2273 	movw	r2, #627	; 0x273
 80101c2:	4937      	ldr	r1, [pc, #220]	; (80102a0 <mem_free+0xfc>)
 80101c4:	4837      	ldr	r0, [pc, #220]	; (80102a4 <mem_free+0x100>)
 80101c6:	f00b fd61 	bl	801bc8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80101ca:	f00b f8b7 	bl	801b33c <sys_arch_protect>
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	68f8      	ldr	r0, [r7, #12]
 80101d2:	f00b f8c1 	bl	801b358 <sys_arch_unprotect>
    return;
 80101d6:	e05e      	b.n	8010296 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	3b08      	subs	r3, #8
 80101dc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80101de:	4b32      	ldr	r3, [pc, #200]	; (80102a8 <mem_free+0x104>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	69fa      	ldr	r2, [r7, #28]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d306      	bcc.n	80101f6 <mem_free+0x52>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f103 020c 	add.w	r2, r3, #12
 80101ee:	4b2f      	ldr	r3, [pc, #188]	; (80102ac <mem_free+0x108>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	429a      	cmp	r2, r3
 80101f4:	d90d      	bls.n	8010212 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80101f6:	4b29      	ldr	r3, [pc, #164]	; (801029c <mem_free+0xf8>)
 80101f8:	f240 227f 	movw	r2, #639	; 0x27f
 80101fc:	492c      	ldr	r1, [pc, #176]	; (80102b0 <mem_free+0x10c>)
 80101fe:	4829      	ldr	r0, [pc, #164]	; (80102a4 <mem_free+0x100>)
 8010200:	f00b fd44 	bl	801bc8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010204:	f00b f89a 	bl	801b33c <sys_arch_protect>
 8010208:	6138      	str	r0, [r7, #16]
 801020a:	6938      	ldr	r0, [r7, #16]
 801020c:	f00b f8a4 	bl	801b358 <sys_arch_unprotect>
    return;
 8010210:	e041      	b.n	8010296 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010212:	4828      	ldr	r0, [pc, #160]	; (80102b4 <mem_free+0x110>)
 8010214:	f00b f850 	bl	801b2b8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010218:	69fb      	ldr	r3, [r7, #28]
 801021a:	791b      	ldrb	r3, [r3, #4]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d110      	bne.n	8010242 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010220:	4b1e      	ldr	r3, [pc, #120]	; (801029c <mem_free+0xf8>)
 8010222:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010226:	4924      	ldr	r1, [pc, #144]	; (80102b8 <mem_free+0x114>)
 8010228:	481e      	ldr	r0, [pc, #120]	; (80102a4 <mem_free+0x100>)
 801022a:	f00b fd2f 	bl	801bc8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801022e:	4821      	ldr	r0, [pc, #132]	; (80102b4 <mem_free+0x110>)
 8010230:	f00b f851 	bl	801b2d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010234:	f00b f882 	bl	801b33c <sys_arch_protect>
 8010238:	6178      	str	r0, [r7, #20]
 801023a:	6978      	ldr	r0, [r7, #20]
 801023c:	f00b f88c 	bl	801b358 <sys_arch_unprotect>
    return;
 8010240:	e029      	b.n	8010296 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010242:	69f8      	ldr	r0, [r7, #28]
 8010244:	f7ff ff72 	bl	801012c <mem_link_valid>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d110      	bne.n	8010270 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801024e:	4b13      	ldr	r3, [pc, #76]	; (801029c <mem_free+0xf8>)
 8010250:	f240 2295 	movw	r2, #661	; 0x295
 8010254:	4919      	ldr	r1, [pc, #100]	; (80102bc <mem_free+0x118>)
 8010256:	4813      	ldr	r0, [pc, #76]	; (80102a4 <mem_free+0x100>)
 8010258:	f00b fd18 	bl	801bc8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801025c:	4815      	ldr	r0, [pc, #84]	; (80102b4 <mem_free+0x110>)
 801025e:	f00b f83a 	bl	801b2d6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010262:	f00b f86b 	bl	801b33c <sys_arch_protect>
 8010266:	61b8      	str	r0, [r7, #24]
 8010268:	69b8      	ldr	r0, [r7, #24]
 801026a:	f00b f875 	bl	801b358 <sys_arch_unprotect>
    return;
 801026e:	e012      	b.n	8010296 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	2200      	movs	r2, #0
 8010274:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010276:	4b12      	ldr	r3, [pc, #72]	; (80102c0 <mem_free+0x11c>)
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	69fa      	ldr	r2, [r7, #28]
 801027c:	429a      	cmp	r2, r3
 801027e:	d202      	bcs.n	8010286 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010280:	4a0f      	ldr	r2, [pc, #60]	; (80102c0 <mem_free+0x11c>)
 8010282:	69fb      	ldr	r3, [r7, #28]
 8010284:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010286:	69f8      	ldr	r0, [r7, #28]
 8010288:	f7ff fe5c 	bl	800ff44 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801028c:	4809      	ldr	r0, [pc, #36]	; (80102b4 <mem_free+0x110>)
 801028e:	f00b f822 	bl	801b2d6 <sys_mutex_unlock>
 8010292:	e000      	b.n	8010296 <mem_free+0xf2>
    return;
 8010294:	bf00      	nop
}
 8010296:	3720      	adds	r7, #32
 8010298:	46bd      	mov	sp, r7
 801029a:	bd80      	pop	{r7, pc}
 801029c:	0801f158 	.word	0x0801f158
 80102a0:	0801f248 	.word	0x0801f248
 80102a4:	0801f1a0 	.word	0x0801f1a0
 80102a8:	200047ac 	.word	0x200047ac
 80102ac:	200047b0 	.word	0x200047b0
 80102b0:	0801f26c 	.word	0x0801f26c
 80102b4:	200047b4 	.word	0x200047b4
 80102b8:	0801f288 	.word	0x0801f288
 80102bc:	0801f2b0 	.word	0x0801f2b0
 80102c0:	200047b8 	.word	0x200047b8

080102c4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b088      	sub	sp, #32
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	460b      	mov	r3, r1
 80102ce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80102d0:	887b      	ldrh	r3, [r7, #2]
 80102d2:	3303      	adds	r3, #3
 80102d4:	b29b      	uxth	r3, r3
 80102d6:	f023 0303 	bic.w	r3, r3, #3
 80102da:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80102dc:	8bfb      	ldrh	r3, [r7, #30]
 80102de:	2b0b      	cmp	r3, #11
 80102e0:	d801      	bhi.n	80102e6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80102e2:	230c      	movs	r3, #12
 80102e4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80102e6:	8bfb      	ldrh	r3, [r7, #30]
 80102e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80102ec:	d803      	bhi.n	80102f6 <mem_trim+0x32>
 80102ee:	8bfa      	ldrh	r2, [r7, #30]
 80102f0:	887b      	ldrh	r3, [r7, #2]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d201      	bcs.n	80102fa <mem_trim+0x36>
    return NULL;
 80102f6:	2300      	movs	r3, #0
 80102f8:	e0d8      	b.n	80104ac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80102fa:	4b6e      	ldr	r3, [pc, #440]	; (80104b4 <mem_trim+0x1f0>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	429a      	cmp	r2, r3
 8010302:	d304      	bcc.n	801030e <mem_trim+0x4a>
 8010304:	4b6c      	ldr	r3, [pc, #432]	; (80104b8 <mem_trim+0x1f4>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	429a      	cmp	r2, r3
 801030c:	d306      	bcc.n	801031c <mem_trim+0x58>
 801030e:	4b6b      	ldr	r3, [pc, #428]	; (80104bc <mem_trim+0x1f8>)
 8010310:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010314:	496a      	ldr	r1, [pc, #424]	; (80104c0 <mem_trim+0x1fc>)
 8010316:	486b      	ldr	r0, [pc, #428]	; (80104c4 <mem_trim+0x200>)
 8010318:	f00b fcb8 	bl	801bc8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801031c:	4b65      	ldr	r3, [pc, #404]	; (80104b4 <mem_trim+0x1f0>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	429a      	cmp	r2, r3
 8010324:	d304      	bcc.n	8010330 <mem_trim+0x6c>
 8010326:	4b64      	ldr	r3, [pc, #400]	; (80104b8 <mem_trim+0x1f4>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	687a      	ldr	r2, [r7, #4]
 801032c:	429a      	cmp	r2, r3
 801032e:	d307      	bcc.n	8010340 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010330:	f00b f804 	bl	801b33c <sys_arch_protect>
 8010334:	60b8      	str	r0, [r7, #8]
 8010336:	68b8      	ldr	r0, [r7, #8]
 8010338:	f00b f80e 	bl	801b358 <sys_arch_unprotect>
    return rmem;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	e0b5      	b.n	80104ac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	3b08      	subs	r3, #8
 8010344:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010346:	69b8      	ldr	r0, [r7, #24]
 8010348:	f7ff fdea 	bl	800ff20 <mem_to_ptr>
 801034c:	4603      	mov	r3, r0
 801034e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	881a      	ldrh	r2, [r3, #0]
 8010354:	8afb      	ldrh	r3, [r7, #22]
 8010356:	1ad3      	subs	r3, r2, r3
 8010358:	b29b      	uxth	r3, r3
 801035a:	3b08      	subs	r3, #8
 801035c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801035e:	8bfa      	ldrh	r2, [r7, #30]
 8010360:	8abb      	ldrh	r3, [r7, #20]
 8010362:	429a      	cmp	r2, r3
 8010364:	d906      	bls.n	8010374 <mem_trim+0xb0>
 8010366:	4b55      	ldr	r3, [pc, #340]	; (80104bc <mem_trim+0x1f8>)
 8010368:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801036c:	4956      	ldr	r1, [pc, #344]	; (80104c8 <mem_trim+0x204>)
 801036e:	4855      	ldr	r0, [pc, #340]	; (80104c4 <mem_trim+0x200>)
 8010370:	f00b fc8c 	bl	801bc8c <iprintf>
  if (newsize > size) {
 8010374:	8bfa      	ldrh	r2, [r7, #30]
 8010376:	8abb      	ldrh	r3, [r7, #20]
 8010378:	429a      	cmp	r2, r3
 801037a:	d901      	bls.n	8010380 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801037c:	2300      	movs	r3, #0
 801037e:	e095      	b.n	80104ac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010380:	8bfa      	ldrh	r2, [r7, #30]
 8010382:	8abb      	ldrh	r3, [r7, #20]
 8010384:	429a      	cmp	r2, r3
 8010386:	d101      	bne.n	801038c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	e08f      	b.n	80104ac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801038c:	484f      	ldr	r0, [pc, #316]	; (80104cc <mem_trim+0x208>)
 801038e:	f00a ff93 	bl	801b2b8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	881b      	ldrh	r3, [r3, #0]
 8010396:	4618      	mov	r0, r3
 8010398:	f7ff fdb0 	bl	800fefc <ptr_to_mem>
 801039c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801039e:	693b      	ldr	r3, [r7, #16]
 80103a0:	791b      	ldrb	r3, [r3, #4]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d13f      	bne.n	8010426 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	881b      	ldrh	r3, [r3, #0]
 80103aa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80103ae:	d106      	bne.n	80103be <mem_trim+0xfa>
 80103b0:	4b42      	ldr	r3, [pc, #264]	; (80104bc <mem_trim+0x1f8>)
 80103b2:	f240 22f5 	movw	r2, #757	; 0x2f5
 80103b6:	4946      	ldr	r1, [pc, #280]	; (80104d0 <mem_trim+0x20c>)
 80103b8:	4842      	ldr	r0, [pc, #264]	; (80104c4 <mem_trim+0x200>)
 80103ba:	f00b fc67 	bl	801bc8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80103be:	693b      	ldr	r3, [r7, #16]
 80103c0:	881b      	ldrh	r3, [r3, #0]
 80103c2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80103c4:	8afa      	ldrh	r2, [r7, #22]
 80103c6:	8bfb      	ldrh	r3, [r7, #30]
 80103c8:	4413      	add	r3, r2
 80103ca:	b29b      	uxth	r3, r3
 80103cc:	3308      	adds	r3, #8
 80103ce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80103d0:	4b40      	ldr	r3, [pc, #256]	; (80104d4 <mem_trim+0x210>)
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	693a      	ldr	r2, [r7, #16]
 80103d6:	429a      	cmp	r2, r3
 80103d8:	d106      	bne.n	80103e8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80103da:	89fb      	ldrh	r3, [r7, #14]
 80103dc:	4618      	mov	r0, r3
 80103de:	f7ff fd8d 	bl	800fefc <ptr_to_mem>
 80103e2:	4603      	mov	r3, r0
 80103e4:	4a3b      	ldr	r2, [pc, #236]	; (80104d4 <mem_trim+0x210>)
 80103e6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80103e8:	89fb      	ldrh	r3, [r7, #14]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff fd86 	bl	800fefc <ptr_to_mem>
 80103f0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	2200      	movs	r2, #0
 80103f6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80103f8:	693b      	ldr	r3, [r7, #16]
 80103fa:	89ba      	ldrh	r2, [r7, #12]
 80103fc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	8afa      	ldrh	r2, [r7, #22]
 8010402:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010404:	69bb      	ldr	r3, [r7, #24]
 8010406:	89fa      	ldrh	r2, [r7, #14]
 8010408:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	881b      	ldrh	r3, [r3, #0]
 801040e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010412:	d047      	beq.n	80104a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010414:	693b      	ldr	r3, [r7, #16]
 8010416:	881b      	ldrh	r3, [r3, #0]
 8010418:	4618      	mov	r0, r3
 801041a:	f7ff fd6f 	bl	800fefc <ptr_to_mem>
 801041e:	4602      	mov	r2, r0
 8010420:	89fb      	ldrh	r3, [r7, #14]
 8010422:	8053      	strh	r3, [r2, #2]
 8010424:	e03e      	b.n	80104a4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010426:	8bfb      	ldrh	r3, [r7, #30]
 8010428:	f103 0214 	add.w	r2, r3, #20
 801042c:	8abb      	ldrh	r3, [r7, #20]
 801042e:	429a      	cmp	r2, r3
 8010430:	d838      	bhi.n	80104a4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010432:	8afa      	ldrh	r2, [r7, #22]
 8010434:	8bfb      	ldrh	r3, [r7, #30]
 8010436:	4413      	add	r3, r2
 8010438:	b29b      	uxth	r3, r3
 801043a:	3308      	adds	r3, #8
 801043c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801043e:	69bb      	ldr	r3, [r7, #24]
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010446:	d106      	bne.n	8010456 <mem_trim+0x192>
 8010448:	4b1c      	ldr	r3, [pc, #112]	; (80104bc <mem_trim+0x1f8>)
 801044a:	f240 3216 	movw	r2, #790	; 0x316
 801044e:	4920      	ldr	r1, [pc, #128]	; (80104d0 <mem_trim+0x20c>)
 8010450:	481c      	ldr	r0, [pc, #112]	; (80104c4 <mem_trim+0x200>)
 8010452:	f00b fc1b 	bl	801bc8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010456:	89fb      	ldrh	r3, [r7, #14]
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff fd4f 	bl	800fefc <ptr_to_mem>
 801045e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010460:	4b1c      	ldr	r3, [pc, #112]	; (80104d4 <mem_trim+0x210>)
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	693a      	ldr	r2, [r7, #16]
 8010466:	429a      	cmp	r2, r3
 8010468:	d202      	bcs.n	8010470 <mem_trim+0x1ac>
      lfree = mem2;
 801046a:	4a1a      	ldr	r2, [pc, #104]	; (80104d4 <mem_trim+0x210>)
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010470:	693b      	ldr	r3, [r7, #16]
 8010472:	2200      	movs	r2, #0
 8010474:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	881a      	ldrh	r2, [r3, #0]
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	8afa      	ldrh	r2, [r7, #22]
 8010482:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	89fa      	ldrh	r2, [r7, #14]
 8010488:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010492:	d007      	beq.n	80104a4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fd2f 	bl	800fefc <ptr_to_mem>
 801049e:	4602      	mov	r2, r0
 80104a0:	89fb      	ldrh	r3, [r7, #14]
 80104a2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80104a4:	4809      	ldr	r0, [pc, #36]	; (80104cc <mem_trim+0x208>)
 80104a6:	f00a ff16 	bl	801b2d6 <sys_mutex_unlock>
  return rmem;
 80104aa:	687b      	ldr	r3, [r7, #4]
}
 80104ac:	4618      	mov	r0, r3
 80104ae:	3720      	adds	r7, #32
 80104b0:	46bd      	mov	sp, r7
 80104b2:	bd80      	pop	{r7, pc}
 80104b4:	200047ac 	.word	0x200047ac
 80104b8:	200047b0 	.word	0x200047b0
 80104bc:	0801f158 	.word	0x0801f158
 80104c0:	0801f2e4 	.word	0x0801f2e4
 80104c4:	0801f1a0 	.word	0x0801f1a0
 80104c8:	0801f2fc 	.word	0x0801f2fc
 80104cc:	200047b4 	.word	0x200047b4
 80104d0:	0801f31c 	.word	0x0801f31c
 80104d4:	200047b8 	.word	0x200047b8

080104d8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b088      	sub	sp, #32
 80104dc:	af00      	add	r7, sp, #0
 80104de:	4603      	mov	r3, r0
 80104e0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80104e2:	88fb      	ldrh	r3, [r7, #6]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d101      	bne.n	80104ec <mem_malloc+0x14>
    return NULL;
 80104e8:	2300      	movs	r3, #0
 80104ea:	e0e2      	b.n	80106b2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80104ec:	88fb      	ldrh	r3, [r7, #6]
 80104ee:	3303      	adds	r3, #3
 80104f0:	b29b      	uxth	r3, r3
 80104f2:	f023 0303 	bic.w	r3, r3, #3
 80104f6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80104f8:	8bbb      	ldrh	r3, [r7, #28]
 80104fa:	2b0b      	cmp	r3, #11
 80104fc:	d801      	bhi.n	8010502 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80104fe:	230c      	movs	r3, #12
 8010500:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010502:	8bbb      	ldrh	r3, [r7, #28]
 8010504:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010508:	d803      	bhi.n	8010512 <mem_malloc+0x3a>
 801050a:	8bba      	ldrh	r2, [r7, #28]
 801050c:	88fb      	ldrh	r3, [r7, #6]
 801050e:	429a      	cmp	r2, r3
 8010510:	d201      	bcs.n	8010516 <mem_malloc+0x3e>
    return NULL;
 8010512:	2300      	movs	r3, #0
 8010514:	e0cd      	b.n	80106b2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010516:	4869      	ldr	r0, [pc, #420]	; (80106bc <mem_malloc+0x1e4>)
 8010518:	f00a fece 	bl	801b2b8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801051c:	4b68      	ldr	r3, [pc, #416]	; (80106c0 <mem_malloc+0x1e8>)
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	4618      	mov	r0, r3
 8010522:	f7ff fcfd 	bl	800ff20 <mem_to_ptr>
 8010526:	4603      	mov	r3, r0
 8010528:	83fb      	strh	r3, [r7, #30]
 801052a:	e0b7      	b.n	801069c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801052c:	8bfb      	ldrh	r3, [r7, #30]
 801052e:	4618      	mov	r0, r3
 8010530:	f7ff fce4 	bl	800fefc <ptr_to_mem>
 8010534:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	791b      	ldrb	r3, [r3, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	f040 80a7 	bne.w	801068e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010540:	697b      	ldr	r3, [r7, #20]
 8010542:	881b      	ldrh	r3, [r3, #0]
 8010544:	461a      	mov	r2, r3
 8010546:	8bfb      	ldrh	r3, [r7, #30]
 8010548:	1ad3      	subs	r3, r2, r3
 801054a:	f1a3 0208 	sub.w	r2, r3, #8
 801054e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010550:	429a      	cmp	r2, r3
 8010552:	f0c0 809c 	bcc.w	801068e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010556:	697b      	ldr	r3, [r7, #20]
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	461a      	mov	r2, r3
 801055c:	8bfb      	ldrh	r3, [r7, #30]
 801055e:	1ad3      	subs	r3, r2, r3
 8010560:	f1a3 0208 	sub.w	r2, r3, #8
 8010564:	8bbb      	ldrh	r3, [r7, #28]
 8010566:	3314      	adds	r3, #20
 8010568:	429a      	cmp	r2, r3
 801056a:	d333      	bcc.n	80105d4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801056c:	8bfa      	ldrh	r2, [r7, #30]
 801056e:	8bbb      	ldrh	r3, [r7, #28]
 8010570:	4413      	add	r3, r2
 8010572:	b29b      	uxth	r3, r3
 8010574:	3308      	adds	r3, #8
 8010576:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010578:	8a7b      	ldrh	r3, [r7, #18]
 801057a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801057e:	d106      	bne.n	801058e <mem_malloc+0xb6>
 8010580:	4b50      	ldr	r3, [pc, #320]	; (80106c4 <mem_malloc+0x1ec>)
 8010582:	f240 3287 	movw	r2, #903	; 0x387
 8010586:	4950      	ldr	r1, [pc, #320]	; (80106c8 <mem_malloc+0x1f0>)
 8010588:	4850      	ldr	r0, [pc, #320]	; (80106cc <mem_malloc+0x1f4>)
 801058a:	f00b fb7f 	bl	801bc8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801058e:	8a7b      	ldrh	r3, [r7, #18]
 8010590:	4618      	mov	r0, r3
 8010592:	f7ff fcb3 	bl	800fefc <ptr_to_mem>
 8010596:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	2200      	movs	r2, #0
 801059c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801059e:	697b      	ldr	r3, [r7, #20]
 80105a0:	881a      	ldrh	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	8bfa      	ldrh	r2, [r7, #30]
 80105aa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80105ac:	697b      	ldr	r3, [r7, #20]
 80105ae:	8a7a      	ldrh	r2, [r7, #18]
 80105b0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80105b2:	697b      	ldr	r3, [r7, #20]
 80105b4:	2201      	movs	r2, #1
 80105b6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	881b      	ldrh	r3, [r3, #0]
 80105bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105c0:	d00b      	beq.n	80105da <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7ff fc98 	bl	800fefc <ptr_to_mem>
 80105cc:	4602      	mov	r2, r0
 80105ce:	8a7b      	ldrh	r3, [r7, #18]
 80105d0:	8053      	strh	r3, [r2, #2]
 80105d2:	e002      	b.n	80105da <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	2201      	movs	r2, #1
 80105d8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80105da:	4b39      	ldr	r3, [pc, #228]	; (80106c0 <mem_malloc+0x1e8>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	697a      	ldr	r2, [r7, #20]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d127      	bne.n	8010634 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80105e4:	4b36      	ldr	r3, [pc, #216]	; (80106c0 <mem_malloc+0x1e8>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80105ea:	e005      	b.n	80105f8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80105ec:	69bb      	ldr	r3, [r7, #24]
 80105ee:	881b      	ldrh	r3, [r3, #0]
 80105f0:	4618      	mov	r0, r3
 80105f2:	f7ff fc83 	bl	800fefc <ptr_to_mem>
 80105f6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80105f8:	69bb      	ldr	r3, [r7, #24]
 80105fa:	791b      	ldrb	r3, [r3, #4]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d004      	beq.n	801060a <mem_malloc+0x132>
 8010600:	4b33      	ldr	r3, [pc, #204]	; (80106d0 <mem_malloc+0x1f8>)
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	69ba      	ldr	r2, [r7, #24]
 8010606:	429a      	cmp	r2, r3
 8010608:	d1f0      	bne.n	80105ec <mem_malloc+0x114>
          }
          lfree = cur;
 801060a:	4a2d      	ldr	r2, [pc, #180]	; (80106c0 <mem_malloc+0x1e8>)
 801060c:	69bb      	ldr	r3, [r7, #24]
 801060e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010610:	4b2b      	ldr	r3, [pc, #172]	; (80106c0 <mem_malloc+0x1e8>)
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	4b2e      	ldr	r3, [pc, #184]	; (80106d0 <mem_malloc+0x1f8>)
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	429a      	cmp	r2, r3
 801061a:	d00b      	beq.n	8010634 <mem_malloc+0x15c>
 801061c:	4b28      	ldr	r3, [pc, #160]	; (80106c0 <mem_malloc+0x1e8>)
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	791b      	ldrb	r3, [r3, #4]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d006      	beq.n	8010634 <mem_malloc+0x15c>
 8010626:	4b27      	ldr	r3, [pc, #156]	; (80106c4 <mem_malloc+0x1ec>)
 8010628:	f240 32b5 	movw	r2, #949	; 0x3b5
 801062c:	4929      	ldr	r1, [pc, #164]	; (80106d4 <mem_malloc+0x1fc>)
 801062e:	4827      	ldr	r0, [pc, #156]	; (80106cc <mem_malloc+0x1f4>)
 8010630:	f00b fb2c 	bl	801bc8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010634:	4821      	ldr	r0, [pc, #132]	; (80106bc <mem_malloc+0x1e4>)
 8010636:	f00a fe4e 	bl	801b2d6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801063a:	8bba      	ldrh	r2, [r7, #28]
 801063c:	697b      	ldr	r3, [r7, #20]
 801063e:	4413      	add	r3, r2
 8010640:	3308      	adds	r3, #8
 8010642:	4a23      	ldr	r2, [pc, #140]	; (80106d0 <mem_malloc+0x1f8>)
 8010644:	6812      	ldr	r2, [r2, #0]
 8010646:	4293      	cmp	r3, r2
 8010648:	d906      	bls.n	8010658 <mem_malloc+0x180>
 801064a:	4b1e      	ldr	r3, [pc, #120]	; (80106c4 <mem_malloc+0x1ec>)
 801064c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010650:	4921      	ldr	r1, [pc, #132]	; (80106d8 <mem_malloc+0x200>)
 8010652:	481e      	ldr	r0, [pc, #120]	; (80106cc <mem_malloc+0x1f4>)
 8010654:	f00b fb1a 	bl	801bc8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010658:	697b      	ldr	r3, [r7, #20]
 801065a:	f003 0303 	and.w	r3, r3, #3
 801065e:	2b00      	cmp	r3, #0
 8010660:	d006      	beq.n	8010670 <mem_malloc+0x198>
 8010662:	4b18      	ldr	r3, [pc, #96]	; (80106c4 <mem_malloc+0x1ec>)
 8010664:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010668:	491c      	ldr	r1, [pc, #112]	; (80106dc <mem_malloc+0x204>)
 801066a:	4818      	ldr	r0, [pc, #96]	; (80106cc <mem_malloc+0x1f4>)
 801066c:	f00b fb0e 	bl	801bc8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010670:	697b      	ldr	r3, [r7, #20]
 8010672:	f003 0303 	and.w	r3, r3, #3
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <mem_malloc+0x1b0>
 801067a:	4b12      	ldr	r3, [pc, #72]	; (80106c4 <mem_malloc+0x1ec>)
 801067c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010680:	4917      	ldr	r1, [pc, #92]	; (80106e0 <mem_malloc+0x208>)
 8010682:	4812      	ldr	r0, [pc, #72]	; (80106cc <mem_malloc+0x1f4>)
 8010684:	f00b fb02 	bl	801bc8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	3308      	adds	r3, #8
 801068c:	e011      	b.n	80106b2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801068e:	8bfb      	ldrh	r3, [r7, #30]
 8010690:	4618      	mov	r0, r3
 8010692:	f7ff fc33 	bl	800fefc <ptr_to_mem>
 8010696:	4603      	mov	r3, r0
 8010698:	881b      	ldrh	r3, [r3, #0]
 801069a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801069c:	8bfa      	ldrh	r2, [r7, #30]
 801069e:	8bbb      	ldrh	r3, [r7, #28]
 80106a0:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80106a4:	429a      	cmp	r2, r3
 80106a6:	f4ff af41 	bcc.w	801052c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80106aa:	4804      	ldr	r0, [pc, #16]	; (80106bc <mem_malloc+0x1e4>)
 80106ac:	f00a fe13 	bl	801b2d6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80106b0:	2300      	movs	r3, #0
}
 80106b2:	4618      	mov	r0, r3
 80106b4:	3720      	adds	r7, #32
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	200047b4 	.word	0x200047b4
 80106c0:	200047b8 	.word	0x200047b8
 80106c4:	0801f158 	.word	0x0801f158
 80106c8:	0801f31c 	.word	0x0801f31c
 80106cc:	0801f1a0 	.word	0x0801f1a0
 80106d0:	200047b0 	.word	0x200047b0
 80106d4:	0801f330 	.word	0x0801f330
 80106d8:	0801f34c 	.word	0x0801f34c
 80106dc:	0801f37c 	.word	0x0801f37c
 80106e0:	0801f3ac 	.word	0x0801f3ac

080106e4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80106e4:	b480      	push	{r7}
 80106e6:	b085      	sub	sp, #20
 80106e8:	af00      	add	r7, sp, #0
 80106ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	689b      	ldr	r3, [r3, #8]
 80106f0:	2200      	movs	r2, #0
 80106f2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	3303      	adds	r3, #3
 80106fa:	f023 0303 	bic.w	r3, r3, #3
 80106fe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010700:	2300      	movs	r3, #0
 8010702:	60fb      	str	r3, [r7, #12]
 8010704:	e011      	b.n	801072a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	689b      	ldr	r3, [r3, #8]
 801070a:	681a      	ldr	r2, [r3, #0]
 801070c:	68bb      	ldr	r3, [r7, #8]
 801070e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	68ba      	ldr	r2, [r7, #8]
 8010716:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	881b      	ldrh	r3, [r3, #0]
 801071c:	461a      	mov	r2, r3
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	4413      	add	r3, r2
 8010722:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	3301      	adds	r3, #1
 8010728:	60fb      	str	r3, [r7, #12]
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	885b      	ldrh	r3, [r3, #2]
 801072e:	461a      	mov	r2, r3
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	4293      	cmp	r3, r2
 8010734:	dbe7      	blt.n	8010706 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010736:	bf00      	nop
 8010738:	bf00      	nop
 801073a:	3714      	adds	r7, #20
 801073c:	46bd      	mov	sp, r7
 801073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010742:	4770      	bx	lr

08010744 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801074a:	2300      	movs	r3, #0
 801074c:	80fb      	strh	r3, [r7, #6]
 801074e:	e009      	b.n	8010764 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010750:	88fb      	ldrh	r3, [r7, #6]
 8010752:	4a08      	ldr	r2, [pc, #32]	; (8010774 <memp_init+0x30>)
 8010754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010758:	4618      	mov	r0, r3
 801075a:	f7ff ffc3 	bl	80106e4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801075e:	88fb      	ldrh	r3, [r7, #6]
 8010760:	3301      	adds	r3, #1
 8010762:	80fb      	strh	r3, [r7, #6]
 8010764:	88fb      	ldrh	r3, [r7, #6]
 8010766:	2b0c      	cmp	r3, #12
 8010768:	d9f2      	bls.n	8010750 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801076a:	bf00      	nop
 801076c:	bf00      	nop
 801076e:	3708      	adds	r7, #8
 8010770:	46bd      	mov	sp, r7
 8010772:	bd80      	pop	{r7, pc}
 8010774:	08021c74 	.word	0x08021c74

08010778 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010780:	f00a fddc 	bl	801b33c <sys_arch_protect>
 8010784:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d015      	beq.n	80107c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	68ba      	ldr	r2, [r7, #8]
 801079a:	6812      	ldr	r2, [r2, #0]
 801079c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	f003 0303 	and.w	r3, r3, #3
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d006      	beq.n	80107b6 <do_memp_malloc_pool+0x3e>
 80107a8:	4b09      	ldr	r3, [pc, #36]	; (80107d0 <do_memp_malloc_pool+0x58>)
 80107aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 80107ae:	4909      	ldr	r1, [pc, #36]	; (80107d4 <do_memp_malloc_pool+0x5c>)
 80107b0:	4809      	ldr	r0, [pc, #36]	; (80107d8 <do_memp_malloc_pool+0x60>)
 80107b2:	f00b fa6b 	bl	801bc8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80107b6:	68f8      	ldr	r0, [r7, #12]
 80107b8:	f00a fdce 	bl	801b358 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	e003      	b.n	80107c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80107c0:	68f8      	ldr	r0, [r7, #12]
 80107c2:	f00a fdc9 	bl	801b358 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3710      	adds	r7, #16
 80107cc:	46bd      	mov	sp, r7
 80107ce:	bd80      	pop	{r7, pc}
 80107d0:	0801f3d0 	.word	0x0801f3d0
 80107d4:	0801f400 	.word	0x0801f400
 80107d8:	0801f424 	.word	0x0801f424

080107dc <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b084      	sub	sp, #16
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	2b0c      	cmp	r3, #12
 80107ea:	d908      	bls.n	80107fe <memp_malloc+0x22>
 80107ec:	4b0a      	ldr	r3, [pc, #40]	; (8010818 <memp_malloc+0x3c>)
 80107ee:	f240 1257 	movw	r2, #343	; 0x157
 80107f2:	490a      	ldr	r1, [pc, #40]	; (801081c <memp_malloc+0x40>)
 80107f4:	480a      	ldr	r0, [pc, #40]	; (8010820 <memp_malloc+0x44>)
 80107f6:	f00b fa49 	bl	801bc8c <iprintf>
 80107fa:	2300      	movs	r3, #0
 80107fc:	e008      	b.n	8010810 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80107fe:	79fb      	ldrb	r3, [r7, #7]
 8010800:	4a08      	ldr	r2, [pc, #32]	; (8010824 <memp_malloc+0x48>)
 8010802:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010806:	4618      	mov	r0, r3
 8010808:	f7ff ffb6 	bl	8010778 <do_memp_malloc_pool>
 801080c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801080e:	68fb      	ldr	r3, [r7, #12]
}
 8010810:	4618      	mov	r0, r3
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}
 8010818:	0801f3d0 	.word	0x0801f3d0
 801081c:	0801f460 	.word	0x0801f460
 8010820:	0801f424 	.word	0x0801f424
 8010824:	08021c74 	.word	0x08021c74

08010828 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b084      	sub	sp, #16
 801082c:	af00      	add	r7, sp, #0
 801082e:	6078      	str	r0, [r7, #4]
 8010830:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010832:	683b      	ldr	r3, [r7, #0]
 8010834:	f003 0303 	and.w	r3, r3, #3
 8010838:	2b00      	cmp	r3, #0
 801083a:	d006      	beq.n	801084a <do_memp_free_pool+0x22>
 801083c:	4b0d      	ldr	r3, [pc, #52]	; (8010874 <do_memp_free_pool+0x4c>)
 801083e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010842:	490d      	ldr	r1, [pc, #52]	; (8010878 <do_memp_free_pool+0x50>)
 8010844:	480d      	ldr	r0, [pc, #52]	; (801087c <do_memp_free_pool+0x54>)
 8010846:	f00b fa21 	bl	801bc8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801084a:	683b      	ldr	r3, [r7, #0]
 801084c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801084e:	f00a fd75 	bl	801b33c <sys_arch_protect>
 8010852:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	689b      	ldr	r3, [r3, #8]
 8010858:	681a      	ldr	r2, [r3, #0]
 801085a:	68fb      	ldr	r3, [r7, #12]
 801085c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	689b      	ldr	r3, [r3, #8]
 8010862:	68fa      	ldr	r2, [r7, #12]
 8010864:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010866:	68b8      	ldr	r0, [r7, #8]
 8010868:	f00a fd76 	bl	801b358 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801086c:	bf00      	nop
 801086e:	3710      	adds	r7, #16
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}
 8010874:	0801f3d0 	.word	0x0801f3d0
 8010878:	0801f480 	.word	0x0801f480
 801087c:	0801f424 	.word	0x0801f424

08010880 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b082      	sub	sp, #8
 8010884:	af00      	add	r7, sp, #0
 8010886:	4603      	mov	r3, r0
 8010888:	6039      	str	r1, [r7, #0]
 801088a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801088c:	79fb      	ldrb	r3, [r7, #7]
 801088e:	2b0c      	cmp	r3, #12
 8010890:	d907      	bls.n	80108a2 <memp_free+0x22>
 8010892:	4b0c      	ldr	r3, [pc, #48]	; (80108c4 <memp_free+0x44>)
 8010894:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010898:	490b      	ldr	r1, [pc, #44]	; (80108c8 <memp_free+0x48>)
 801089a:	480c      	ldr	r0, [pc, #48]	; (80108cc <memp_free+0x4c>)
 801089c:	f00b f9f6 	bl	801bc8c <iprintf>
 80108a0:	e00c      	b.n	80108bc <memp_free+0x3c>

  if (mem == NULL) {
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d008      	beq.n	80108ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80108a8:	79fb      	ldrb	r3, [r7, #7]
 80108aa:	4a09      	ldr	r2, [pc, #36]	; (80108d0 <memp_free+0x50>)
 80108ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108b0:	6839      	ldr	r1, [r7, #0]
 80108b2:	4618      	mov	r0, r3
 80108b4:	f7ff ffb8 	bl	8010828 <do_memp_free_pool>
 80108b8:	e000      	b.n	80108bc <memp_free+0x3c>
    return;
 80108ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80108bc:	3708      	adds	r7, #8
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	0801f3d0 	.word	0x0801f3d0
 80108c8:	0801f4a0 	.word	0x0801f4a0
 80108cc:	0801f424 	.word	0x0801f424
 80108d0:	08021c74 	.word	0x08021c74

080108d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80108d4:	b480      	push	{r7}
 80108d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80108d8:	bf00      	nop
 80108da:	46bd      	mov	sp, r7
 80108dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e0:	4770      	bx	lr
	...

080108e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b086      	sub	sp, #24
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
 80108f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d108      	bne.n	801090a <netif_add+0x26>
 80108f8:	4b57      	ldr	r3, [pc, #348]	; (8010a58 <netif_add+0x174>)
 80108fa:	f240 1227 	movw	r2, #295	; 0x127
 80108fe:	4957      	ldr	r1, [pc, #348]	; (8010a5c <netif_add+0x178>)
 8010900:	4857      	ldr	r0, [pc, #348]	; (8010a60 <netif_add+0x17c>)
 8010902:	f00b f9c3 	bl	801bc8c <iprintf>
 8010906:	2300      	movs	r3, #0
 8010908:	e0a2      	b.n	8010a50 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801090a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801090c:	2b00      	cmp	r3, #0
 801090e:	d108      	bne.n	8010922 <netif_add+0x3e>
 8010910:	4b51      	ldr	r3, [pc, #324]	; (8010a58 <netif_add+0x174>)
 8010912:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010916:	4953      	ldr	r1, [pc, #332]	; (8010a64 <netif_add+0x180>)
 8010918:	4851      	ldr	r0, [pc, #324]	; (8010a60 <netif_add+0x17c>)
 801091a:	f00b f9b7 	bl	801bc8c <iprintf>
 801091e:	2300      	movs	r3, #0
 8010920:	e096      	b.n	8010a50 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d101      	bne.n	801092c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010928:	4b4f      	ldr	r3, [pc, #316]	; (8010a68 <netif_add+0x184>)
 801092a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d101      	bne.n	8010936 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010932:	4b4d      	ldr	r3, [pc, #308]	; (8010a68 <netif_add+0x184>)
 8010934:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d101      	bne.n	8010940 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801093c:	4b4a      	ldr	r3, [pc, #296]	; (8010a68 <netif_add+0x184>)
 801093e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	2200      	movs	r2, #0
 8010944:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	2200      	movs	r2, #0
 801094a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801094c:	68fb      	ldr	r3, [r7, #12]
 801094e:	2200      	movs	r2, #0
 8010950:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	4a45      	ldr	r2, [pc, #276]	; (8010a6c <netif_add+0x188>)
 8010956:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	2200      	movs	r2, #0
 801095c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2200      	movs	r2, #0
 8010962:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2200      	movs	r2, #0
 801096a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	6a3a      	ldr	r2, [r7, #32]
 8010970:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010972:	4b3f      	ldr	r3, [pc, #252]	; (8010a70 <netif_add+0x18c>)
 8010974:	781a      	ldrb	r2, [r3, #0]
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801097c:	68fb      	ldr	r3, [r7, #12]
 801097e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010980:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010982:	683b      	ldr	r3, [r7, #0]
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	68b9      	ldr	r1, [r7, #8]
 8010988:	68f8      	ldr	r0, [r7, #12]
 801098a:	f000 f913 	bl	8010bb4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	4798      	blx	r3
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d001      	beq.n	801099e <netif_add+0xba>
    return NULL;
 801099a:	2300      	movs	r3, #0
 801099c:	e058      	b.n	8010a50 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801099e:	68fb      	ldr	r3, [r7, #12]
 80109a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109a4:	2bff      	cmp	r3, #255	; 0xff
 80109a6:	d103      	bne.n	80109b0 <netif_add+0xcc>
        netif->num = 0;
 80109a8:	68fb      	ldr	r3, [r7, #12]
 80109aa:	2200      	movs	r2, #0
 80109ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109b4:	4b2f      	ldr	r3, [pc, #188]	; (8010a74 <netif_add+0x190>)
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	617b      	str	r3, [r7, #20]
 80109ba:	e02b      	b.n	8010a14 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80109bc:	697a      	ldr	r2, [r7, #20]
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d106      	bne.n	80109d2 <netif_add+0xee>
 80109c4:	4b24      	ldr	r3, [pc, #144]	; (8010a58 <netif_add+0x174>)
 80109c6:	f240 128b 	movw	r2, #395	; 0x18b
 80109ca:	492b      	ldr	r1, [pc, #172]	; (8010a78 <netif_add+0x194>)
 80109cc:	4824      	ldr	r0, [pc, #144]	; (8010a60 <netif_add+0x17c>)
 80109ce:	f00b f95d 	bl	801bc8c <iprintf>
        num_netifs++;
 80109d2:	693b      	ldr	r3, [r7, #16]
 80109d4:	3301      	adds	r3, #1
 80109d6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80109d8:	693b      	ldr	r3, [r7, #16]
 80109da:	2bff      	cmp	r3, #255	; 0xff
 80109dc:	dd06      	ble.n	80109ec <netif_add+0x108>
 80109de:	4b1e      	ldr	r3, [pc, #120]	; (8010a58 <netif_add+0x174>)
 80109e0:	f240 128d 	movw	r2, #397	; 0x18d
 80109e4:	4925      	ldr	r1, [pc, #148]	; (8010a7c <netif_add+0x198>)
 80109e6:	481e      	ldr	r0, [pc, #120]	; (8010a60 <netif_add+0x17c>)
 80109e8:	f00b f950 	bl	801bc8c <iprintf>
        if (netif2->num == netif->num) {
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109f8:	429a      	cmp	r2, r3
 80109fa:	d108      	bne.n	8010a0e <netif_add+0x12a>
          netif->num++;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a02:	3301      	adds	r3, #1
 8010a04:	b2da      	uxtb	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010a0c:	e005      	b.n	8010a1a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	617b      	str	r3, [r7, #20]
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d1d0      	bne.n	80109bc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010a1a:	697b      	ldr	r3, [r7, #20]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d1be      	bne.n	801099e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a26:	2bfe      	cmp	r3, #254	; 0xfe
 8010a28:	d103      	bne.n	8010a32 <netif_add+0x14e>
    netif_num = 0;
 8010a2a:	4b11      	ldr	r3, [pc, #68]	; (8010a70 <netif_add+0x18c>)
 8010a2c:	2200      	movs	r2, #0
 8010a2e:	701a      	strb	r2, [r3, #0]
 8010a30:	e006      	b.n	8010a40 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a38:	3301      	adds	r3, #1
 8010a3a:	b2da      	uxtb	r2, r3
 8010a3c:	4b0c      	ldr	r3, [pc, #48]	; (8010a70 <netif_add+0x18c>)
 8010a3e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010a40:	4b0c      	ldr	r3, [pc, #48]	; (8010a74 <netif_add+0x190>)
 8010a42:	681a      	ldr	r2, [r3, #0]
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010a48:	4a0a      	ldr	r2, [pc, #40]	; (8010a74 <netif_add+0x190>)
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010a4e:	68fb      	ldr	r3, [r7, #12]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	3718      	adds	r7, #24
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	0801f4bc 	.word	0x0801f4bc
 8010a5c:	0801f550 	.word	0x0801f550
 8010a60:	0801f50c 	.word	0x0801f50c
 8010a64:	0801f56c 	.word	0x0801f56c
 8010a68:	08021ce8 	.word	0x08021ce8
 8010a6c:	08010e8f 	.word	0x08010e8f
 8010a70:	200047f0 	.word	0x200047f0
 8010a74:	2000d7ac 	.word	0x2000d7ac
 8010a78:	0801f590 	.word	0x0801f590
 8010a7c:	0801f5a4 	.word	0x0801f5a4

08010a80 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a8a:	6839      	ldr	r1, [r7, #0]
 8010a8c:	6878      	ldr	r0, [r7, #4]
 8010a8e:	f002 fdc7 	bl	8013620 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f007 fe5f 	bl	8018758 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010a9a:	bf00      	nop
 8010a9c:	3708      	adds	r7, #8
 8010a9e:	46bd      	mov	sp, r7
 8010aa0:	bd80      	pop	{r7, pc}
	...

08010aa4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b086      	sub	sp, #24
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	60f8      	str	r0, [r7, #12]
 8010aac:	60b9      	str	r1, [r7, #8]
 8010aae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	2b00      	cmp	r3, #0
 8010ab4:	d106      	bne.n	8010ac4 <netif_do_set_ipaddr+0x20>
 8010ab6:	4b1d      	ldr	r3, [pc, #116]	; (8010b2c <netif_do_set_ipaddr+0x88>)
 8010ab8:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010abc:	491c      	ldr	r1, [pc, #112]	; (8010b30 <netif_do_set_ipaddr+0x8c>)
 8010abe:	481d      	ldr	r0, [pc, #116]	; (8010b34 <netif_do_set_ipaddr+0x90>)
 8010ac0:	f00b f8e4 	bl	801bc8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d106      	bne.n	8010ad8 <netif_do_set_ipaddr+0x34>
 8010aca:	4b18      	ldr	r3, [pc, #96]	; (8010b2c <netif_do_set_ipaddr+0x88>)
 8010acc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010ad0:	4917      	ldr	r1, [pc, #92]	; (8010b30 <netif_do_set_ipaddr+0x8c>)
 8010ad2:	4818      	ldr	r0, [pc, #96]	; (8010b34 <netif_do_set_ipaddr+0x90>)
 8010ad4:	f00b f8da 	bl	801bc8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	3304      	adds	r3, #4
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	429a      	cmp	r2, r3
 8010ae4:	d01c      	beq.n	8010b20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010ae6:	68bb      	ldr	r3, [r7, #8]
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	3304      	adds	r3, #4
 8010af0:	681a      	ldr	r2, [r3, #0]
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010af6:	f107 0314 	add.w	r3, r7, #20
 8010afa:	4619      	mov	r1, r3
 8010afc:	6878      	ldr	r0, [r7, #4]
 8010afe:	f7ff ffbf 	bl	8010a80 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010b02:	68bb      	ldr	r3, [r7, #8]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d002      	beq.n	8010b0e <netif_do_set_ipaddr+0x6a>
 8010b08:	68bb      	ldr	r3, [r7, #8]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	e000      	b.n	8010b10 <netif_do_set_ipaddr+0x6c>
 8010b0e:	2300      	movs	r3, #0
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010b14:	2101      	movs	r1, #1
 8010b16:	68f8      	ldr	r0, [r7, #12]
 8010b18:	f000 f8d2 	bl	8010cc0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	e000      	b.n	8010b22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010b20:	2300      	movs	r3, #0
}
 8010b22:	4618      	mov	r0, r3
 8010b24:	3718      	adds	r7, #24
 8010b26:	46bd      	mov	sp, r7
 8010b28:	bd80      	pop	{r7, pc}
 8010b2a:	bf00      	nop
 8010b2c:	0801f4bc 	.word	0x0801f4bc
 8010b30:	0801f5d4 	.word	0x0801f5d4
 8010b34:	0801f50c 	.word	0x0801f50c

08010b38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010b38:	b480      	push	{r7}
 8010b3a:	b085      	sub	sp, #20
 8010b3c:	af00      	add	r7, sp, #0
 8010b3e:	60f8      	str	r0, [r7, #12]
 8010b40:	60b9      	str	r1, [r7, #8]
 8010b42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	681a      	ldr	r2, [r3, #0]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	3308      	adds	r3, #8
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d00a      	beq.n	8010b68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010b52:	68bb      	ldr	r3, [r7, #8]
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d002      	beq.n	8010b5e <netif_do_set_netmask+0x26>
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	e000      	b.n	8010b60 <netif_do_set_netmask+0x28>
 8010b5e:	2300      	movs	r3, #0
 8010b60:	68fa      	ldr	r2, [r7, #12]
 8010b62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010b64:	2301      	movs	r3, #1
 8010b66:	e000      	b.n	8010b6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010b68:	2300      	movs	r3, #0
}
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	3714      	adds	r7, #20
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr

08010b76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010b76:	b480      	push	{r7}
 8010b78:	b085      	sub	sp, #20
 8010b7a:	af00      	add	r7, sp, #0
 8010b7c:	60f8      	str	r0, [r7, #12]
 8010b7e:	60b9      	str	r1, [r7, #8]
 8010b80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	681a      	ldr	r2, [r3, #0]
 8010b86:	68fb      	ldr	r3, [r7, #12]
 8010b88:	330c      	adds	r3, #12
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	429a      	cmp	r2, r3
 8010b8e:	d00a      	beq.n	8010ba6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010b90:	68bb      	ldr	r3, [r7, #8]
 8010b92:	2b00      	cmp	r3, #0
 8010b94:	d002      	beq.n	8010b9c <netif_do_set_gw+0x26>
 8010b96:	68bb      	ldr	r3, [r7, #8]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	e000      	b.n	8010b9e <netif_do_set_gw+0x28>
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010ba2:	2301      	movs	r3, #1
 8010ba4:	e000      	b.n	8010ba8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3714      	adds	r7, #20
 8010bac:	46bd      	mov	sp, r7
 8010bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb2:	4770      	bx	lr

08010bb4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b088      	sub	sp, #32
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	60f8      	str	r0, [r7, #12]
 8010bbc:	60b9      	str	r1, [r7, #8]
 8010bbe:	607a      	str	r2, [r7, #4]
 8010bc0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010bc6:	2300      	movs	r3, #0
 8010bc8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010bca:	68bb      	ldr	r3, [r7, #8]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010bd0:	4b1c      	ldr	r3, [pc, #112]	; (8010c44 <netif_set_addr+0x90>)
 8010bd2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d101      	bne.n	8010bde <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010bda:	4b1a      	ldr	r3, [pc, #104]	; (8010c44 <netif_set_addr+0x90>)
 8010bdc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010bde:	683b      	ldr	r3, [r7, #0]
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d101      	bne.n	8010be8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010be4:	4b17      	ldr	r3, [pc, #92]	; (8010c44 <netif_set_addr+0x90>)
 8010be6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010be8:	68bb      	ldr	r3, [r7, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d003      	beq.n	8010bf6 <netif_set_addr+0x42>
 8010bee:	68bb      	ldr	r3, [r7, #8]
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d101      	bne.n	8010bfa <netif_set_addr+0x46>
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	e000      	b.n	8010bfc <netif_set_addr+0x48>
 8010bfa:	2300      	movs	r3, #0
 8010bfc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010bfe:	697b      	ldr	r3, [r7, #20]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d006      	beq.n	8010c12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c04:	f107 0310 	add.w	r3, r7, #16
 8010c08:	461a      	mov	r2, r3
 8010c0a:	68b9      	ldr	r1, [r7, #8]
 8010c0c:	68f8      	ldr	r0, [r7, #12]
 8010c0e:	f7ff ff49 	bl	8010aa4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010c12:	69fa      	ldr	r2, [r7, #28]
 8010c14:	6879      	ldr	r1, [r7, #4]
 8010c16:	68f8      	ldr	r0, [r7, #12]
 8010c18:	f7ff ff8e 	bl	8010b38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010c1c:	69ba      	ldr	r2, [r7, #24]
 8010c1e:	6839      	ldr	r1, [r7, #0]
 8010c20:	68f8      	ldr	r0, [r7, #12]
 8010c22:	f7ff ffa8 	bl	8010b76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010c26:	697b      	ldr	r3, [r7, #20]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d106      	bne.n	8010c3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c2c:	f107 0310 	add.w	r3, r7, #16
 8010c30:	461a      	mov	r2, r3
 8010c32:	68b9      	ldr	r1, [r7, #8]
 8010c34:	68f8      	ldr	r0, [r7, #12]
 8010c36:	f7ff ff35 	bl	8010aa4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010c3a:	bf00      	nop
 8010c3c:	3720      	adds	r7, #32
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}
 8010c42:	bf00      	nop
 8010c44:	08021ce8 	.word	0x08021ce8

08010c48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010c48:	b480      	push	{r7}
 8010c4a:	b083      	sub	sp, #12
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010c50:	4a04      	ldr	r2, [pc, #16]	; (8010c64 <netif_set_default+0x1c>)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010c56:	bf00      	nop
 8010c58:	370c      	adds	r7, #12
 8010c5a:	46bd      	mov	sp, r7
 8010c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop
 8010c64:	2000d7b0 	.word	0x2000d7b0

08010c68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	b082      	sub	sp, #8
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d107      	bne.n	8010c86 <netif_set_up+0x1e>
 8010c76:	4b0f      	ldr	r3, [pc, #60]	; (8010cb4 <netif_set_up+0x4c>)
 8010c78:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010c7c:	490e      	ldr	r1, [pc, #56]	; (8010cb8 <netif_set_up+0x50>)
 8010c7e:	480f      	ldr	r0, [pc, #60]	; (8010cbc <netif_set_up+0x54>)
 8010c80:	f00b f804 	bl	801bc8c <iprintf>
 8010c84:	e013      	b.n	8010cae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c8c:	f003 0301 	and.w	r3, r3, #1
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10c      	bne.n	8010cae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c9a:	f043 0301 	orr.w	r3, r3, #1
 8010c9e:	b2da      	uxtb	r2, r3
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010ca6:	2103      	movs	r1, #3
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 f809 	bl	8010cc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}
 8010cb4:	0801f4bc 	.word	0x0801f4bc
 8010cb8:	0801f644 	.word	0x0801f644
 8010cbc:	0801f50c 	.word	0x0801f50c

08010cc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b082      	sub	sp, #8
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	460b      	mov	r3, r1
 8010cca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d106      	bne.n	8010ce0 <netif_issue_reports+0x20>
 8010cd2:	4b18      	ldr	r3, [pc, #96]	; (8010d34 <netif_issue_reports+0x74>)
 8010cd4:	f240 326d 	movw	r2, #877	; 0x36d
 8010cd8:	4917      	ldr	r1, [pc, #92]	; (8010d38 <netif_issue_reports+0x78>)
 8010cda:	4818      	ldr	r0, [pc, #96]	; (8010d3c <netif_issue_reports+0x7c>)
 8010cdc:	f00a ffd6 	bl	801bc8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ce6:	f003 0304 	and.w	r3, r3, #4
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d01e      	beq.n	8010d2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cf4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d017      	beq.n	8010d2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010cfc:	78fb      	ldrb	r3, [r7, #3]
 8010cfe:	f003 0301 	and.w	r3, r3, #1
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d013      	beq.n	8010d2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	3304      	adds	r3, #4
 8010d0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00e      	beq.n	8010d2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d16:	f003 0308 	and.w	r3, r3, #8
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d007      	beq.n	8010d2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	3304      	adds	r3, #4
 8010d22:	4619      	mov	r1, r3
 8010d24:	6878      	ldr	r0, [r7, #4]
 8010d26:	f008 fc81 	bl	801962c <etharp_request>
 8010d2a:	e000      	b.n	8010d2e <netif_issue_reports+0x6e>
    return;
 8010d2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	0801f4bc 	.word	0x0801f4bc
 8010d38:	0801f660 	.word	0x0801f660
 8010d3c:	0801f50c 	.word	0x0801f50c

08010d40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d107      	bne.n	8010d5e <netif_set_down+0x1e>
 8010d4e:	4b12      	ldr	r3, [pc, #72]	; (8010d98 <netif_set_down+0x58>)
 8010d50:	f240 329b 	movw	r2, #923	; 0x39b
 8010d54:	4911      	ldr	r1, [pc, #68]	; (8010d9c <netif_set_down+0x5c>)
 8010d56:	4812      	ldr	r0, [pc, #72]	; (8010da0 <netif_set_down+0x60>)
 8010d58:	f00a ff98 	bl	801bc8c <iprintf>
 8010d5c:	e019      	b.n	8010d92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d64:	f003 0301 	and.w	r3, r3, #1
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d012      	beq.n	8010d92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d72:	f023 0301 	bic.w	r3, r3, #1
 8010d76:	b2da      	uxtb	r2, r3
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d84:	f003 0308 	and.w	r3, r3, #8
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d002      	beq.n	8010d92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010d8c:	6878      	ldr	r0, [r7, #4]
 8010d8e:	f008 f80b 	bl	8018da8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010d92:	3708      	adds	r7, #8
 8010d94:	46bd      	mov	sp, r7
 8010d96:	bd80      	pop	{r7, pc}
 8010d98:	0801f4bc 	.word	0x0801f4bc
 8010d9c:	0801f684 	.word	0x0801f684
 8010da0:	0801f50c 	.word	0x0801f50c

08010da4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d107      	bne.n	8010dc2 <netif_set_link_up+0x1e>
 8010db2:	4b13      	ldr	r3, [pc, #76]	; (8010e00 <netif_set_link_up+0x5c>)
 8010db4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010db8:	4912      	ldr	r1, [pc, #72]	; (8010e04 <netif_set_link_up+0x60>)
 8010dba:	4813      	ldr	r0, [pc, #76]	; (8010e08 <netif_set_link_up+0x64>)
 8010dbc:	f00a ff66 	bl	801bc8c <iprintf>
 8010dc0:	e01b      	b.n	8010dfa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dc8:	f003 0304 	and.w	r3, r3, #4
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d114      	bne.n	8010dfa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dd6:	f043 0304 	orr.w	r3, r3, #4
 8010dda:	b2da      	uxtb	r2, r3
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010de2:	2103      	movs	r1, #3
 8010de4:	6878      	ldr	r0, [r7, #4]
 8010de6:	f7ff ff6b 	bl	8010cc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	69db      	ldr	r3, [r3, #28]
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d003      	beq.n	8010dfa <netif_set_link_up+0x56>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010dfa:	3708      	adds	r7, #8
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	bd80      	pop	{r7, pc}
 8010e00:	0801f4bc 	.word	0x0801f4bc
 8010e04:	0801f6a4 	.word	0x0801f6a4
 8010e08:	0801f50c 	.word	0x0801f50c

08010e0c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b082      	sub	sp, #8
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d107      	bne.n	8010e2a <netif_set_link_down+0x1e>
 8010e1a:	4b11      	ldr	r3, [pc, #68]	; (8010e60 <netif_set_link_down+0x54>)
 8010e1c:	f240 4206 	movw	r2, #1030	; 0x406
 8010e20:	4910      	ldr	r1, [pc, #64]	; (8010e64 <netif_set_link_down+0x58>)
 8010e22:	4811      	ldr	r0, [pc, #68]	; (8010e68 <netif_set_link_down+0x5c>)
 8010e24:	f00a ff32 	bl	801bc8c <iprintf>
 8010e28:	e017      	b.n	8010e5a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e30:	f003 0304 	and.w	r3, r3, #4
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d010      	beq.n	8010e5a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e3e:	f023 0304 	bic.w	r3, r3, #4
 8010e42:	b2da      	uxtb	r2, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	69db      	ldr	r3, [r3, #28]
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d003      	beq.n	8010e5a <netif_set_link_down+0x4e>
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e5a:	3708      	adds	r7, #8
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	bd80      	pop	{r7, pc}
 8010e60:	0801f4bc 	.word	0x0801f4bc
 8010e64:	0801f6c8 	.word	0x0801f6c8
 8010e68:	0801f50c 	.word	0x0801f50c

08010e6c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010e6c:	b480      	push	{r7}
 8010e6e:	b083      	sub	sp, #12
 8010e70:	af00      	add	r7, sp, #0
 8010e72:	6078      	str	r0, [r7, #4]
 8010e74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d002      	beq.n	8010e82 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	683a      	ldr	r2, [r7, #0]
 8010e80:	61da      	str	r2, [r3, #28]
  }
}
 8010e82:	bf00      	nop
 8010e84:	370c      	adds	r7, #12
 8010e86:	46bd      	mov	sp, r7
 8010e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8c:	4770      	bx	lr

08010e8e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e8e:	b480      	push	{r7}
 8010e90:	b085      	sub	sp, #20
 8010e92:	af00      	add	r7, sp, #0
 8010e94:	60f8      	str	r0, [r7, #12]
 8010e96:	60b9      	str	r1, [r7, #8]
 8010e98:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010e9a:	f06f 030b 	mvn.w	r3, #11
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3714      	adds	r7, #20
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea8:	4770      	bx	lr
	...

08010eac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010eac:	b480      	push	{r7}
 8010eae:	b085      	sub	sp, #20
 8010eb0:	af00      	add	r7, sp, #0
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010eb6:	79fb      	ldrb	r3, [r7, #7]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d013      	beq.n	8010ee4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010ebc:	4b0d      	ldr	r3, [pc, #52]	; (8010ef4 <netif_get_by_index+0x48>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	60fb      	str	r3, [r7, #12]
 8010ec2:	e00c      	b.n	8010ede <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010eca:	3301      	adds	r3, #1
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	79fa      	ldrb	r2, [r7, #7]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d101      	bne.n	8010ed8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	e006      	b.n	8010ee6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	60fb      	str	r3, [r7, #12]
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d1ef      	bne.n	8010ec4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010ee4:	2300      	movs	r3, #0
}
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	3714      	adds	r7, #20
 8010eea:	46bd      	mov	sp, r7
 8010eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef0:	4770      	bx	lr
 8010ef2:	bf00      	nop
 8010ef4:	2000d7ac 	.word	0x2000d7ac

08010ef8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b082      	sub	sp, #8
 8010efc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010efe:	f00a fa1d 	bl	801b33c <sys_arch_protect>
 8010f02:	6038      	str	r0, [r7, #0]
 8010f04:	4b0d      	ldr	r3, [pc, #52]	; (8010f3c <pbuf_free_ooseq+0x44>)
 8010f06:	2200      	movs	r2, #0
 8010f08:	701a      	strb	r2, [r3, #0]
 8010f0a:	6838      	ldr	r0, [r7, #0]
 8010f0c:	f00a fa24 	bl	801b358 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f10:	4b0b      	ldr	r3, [pc, #44]	; (8010f40 <pbuf_free_ooseq+0x48>)
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	607b      	str	r3, [r7, #4]
 8010f16:	e00a      	b.n	8010f2e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d003      	beq.n	8010f28 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010f20:	6878      	ldr	r0, [r7, #4]
 8010f22:	f002 fbbb 	bl	801369c <tcp_free_ooseq>
      return;
 8010f26:	e005      	b.n	8010f34 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	68db      	ldr	r3, [r3, #12]
 8010f2c:	607b      	str	r3, [r7, #4]
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d1f1      	bne.n	8010f18 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010f34:	3708      	adds	r7, #8
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	2000d7b4 	.word	0x2000d7b4
 8010f40:	2000d7bc 	.word	0x2000d7bc

08010f44 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010f4c:	f7ff ffd4 	bl	8010ef8 <pbuf_free_ooseq>
}
 8010f50:	bf00      	nop
 8010f52:	3708      	adds	r7, #8
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}

08010f58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010f5e:	f00a f9ed 	bl	801b33c <sys_arch_protect>
 8010f62:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010f64:	4b0f      	ldr	r3, [pc, #60]	; (8010fa4 <pbuf_pool_is_empty+0x4c>)
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010f6a:	4b0e      	ldr	r3, [pc, #56]	; (8010fa4 <pbuf_pool_is_empty+0x4c>)
 8010f6c:	2201      	movs	r2, #1
 8010f6e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010f70:	6878      	ldr	r0, [r7, #4]
 8010f72:	f00a f9f1 	bl	801b358 <sys_arch_unprotect>

  if (!queued) {
 8010f76:	78fb      	ldrb	r3, [r7, #3]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d10f      	bne.n	8010f9c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	480a      	ldr	r0, [pc, #40]	; (8010fa8 <pbuf_pool_is_empty+0x50>)
 8010f80:	f7fe fed6 	bl	800fd30 <tcpip_try_callback>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d008      	beq.n	8010f9c <pbuf_pool_is_empty+0x44>
 8010f8a:	f00a f9d7 	bl	801b33c <sys_arch_protect>
 8010f8e:	6078      	str	r0, [r7, #4]
 8010f90:	4b04      	ldr	r3, [pc, #16]	; (8010fa4 <pbuf_pool_is_empty+0x4c>)
 8010f92:	2200      	movs	r2, #0
 8010f94:	701a      	strb	r2, [r3, #0]
 8010f96:	6878      	ldr	r0, [r7, #4]
 8010f98:	f00a f9de 	bl	801b358 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	2000d7b4 	.word	0x2000d7b4
 8010fa8:	08010f45 	.word	0x08010f45

08010fac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010fac:	b480      	push	{r7}
 8010fae:	b085      	sub	sp, #20
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	60f8      	str	r0, [r7, #12]
 8010fb4:	60b9      	str	r1, [r7, #8]
 8010fb6:	4611      	mov	r1, r2
 8010fb8:	461a      	mov	r2, r3
 8010fba:	460b      	mov	r3, r1
 8010fbc:	80fb      	strh	r3, [r7, #6]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	88fa      	ldrh	r2, [r7, #6]
 8010fd2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	88ba      	ldrh	r2, [r7, #4]
 8010fd8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010fda:	8b3b      	ldrh	r3, [r7, #24]
 8010fdc:	b2da      	uxtb	r2, r3
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	7f3a      	ldrb	r2, [r7, #28]
 8010fe6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2201      	movs	r2, #1
 8010fec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	73da      	strb	r2, [r3, #15]
}
 8010ff4:	bf00      	nop
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011000:	b580      	push	{r7, lr}
 8011002:	b08c      	sub	sp, #48	; 0x30
 8011004:	af02      	add	r7, sp, #8
 8011006:	4603      	mov	r3, r0
 8011008:	71fb      	strb	r3, [r7, #7]
 801100a:	460b      	mov	r3, r1
 801100c:	80bb      	strh	r3, [r7, #4]
 801100e:	4613      	mov	r3, r2
 8011010:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011012:	79fb      	ldrb	r3, [r7, #7]
 8011014:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011016:	887b      	ldrh	r3, [r7, #2]
 8011018:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801101c:	d07f      	beq.n	801111e <pbuf_alloc+0x11e>
 801101e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8011022:	f300 80c8 	bgt.w	80111b6 <pbuf_alloc+0x1b6>
 8011026:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801102a:	d010      	beq.n	801104e <pbuf_alloc+0x4e>
 801102c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8011030:	f300 80c1 	bgt.w	80111b6 <pbuf_alloc+0x1b6>
 8011034:	2b01      	cmp	r3, #1
 8011036:	d002      	beq.n	801103e <pbuf_alloc+0x3e>
 8011038:	2b41      	cmp	r3, #65	; 0x41
 801103a:	f040 80bc 	bne.w	80111b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801103e:	887a      	ldrh	r2, [r7, #2]
 8011040:	88bb      	ldrh	r3, [r7, #4]
 8011042:	4619      	mov	r1, r3
 8011044:	2000      	movs	r0, #0
 8011046:	f000 f8d1 	bl	80111ec <pbuf_alloc_reference>
 801104a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801104c:	e0bd      	b.n	80111ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801104e:	2300      	movs	r3, #0
 8011050:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011052:	2300      	movs	r3, #0
 8011054:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011056:	88bb      	ldrh	r3, [r7, #4]
 8011058:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801105a:	200c      	movs	r0, #12
 801105c:	f7ff fbbe 	bl	80107dc <memp_malloc>
 8011060:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011062:	693b      	ldr	r3, [r7, #16]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d109      	bne.n	801107c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011068:	f7ff ff76 	bl	8010f58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	2b00      	cmp	r3, #0
 8011070:	d002      	beq.n	8011078 <pbuf_alloc+0x78>
            pbuf_free(p);
 8011072:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011074:	f000 fada 	bl	801162c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011078:	2300      	movs	r3, #0
 801107a:	e0a7      	b.n	80111cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801107c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801107e:	3303      	adds	r3, #3
 8011080:	b29b      	uxth	r3, r3
 8011082:	f023 0303 	bic.w	r3, r3, #3
 8011086:	b29b      	uxth	r3, r3
 8011088:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801108c:	b29b      	uxth	r3, r3
 801108e:	8b7a      	ldrh	r2, [r7, #26]
 8011090:	4293      	cmp	r3, r2
 8011092:	bf28      	it	cs
 8011094:	4613      	movcs	r3, r2
 8011096:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011098:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801109a:	3310      	adds	r3, #16
 801109c:	693a      	ldr	r2, [r7, #16]
 801109e:	4413      	add	r3, r2
 80110a0:	3303      	adds	r3, #3
 80110a2:	f023 0303 	bic.w	r3, r3, #3
 80110a6:	4618      	mov	r0, r3
 80110a8:	89f9      	ldrh	r1, [r7, #14]
 80110aa:	8b7a      	ldrh	r2, [r7, #26]
 80110ac:	2300      	movs	r3, #0
 80110ae:	9301      	str	r3, [sp, #4]
 80110b0:	887b      	ldrh	r3, [r7, #2]
 80110b2:	9300      	str	r3, [sp, #0]
 80110b4:	460b      	mov	r3, r1
 80110b6:	4601      	mov	r1, r0
 80110b8:	6938      	ldr	r0, [r7, #16]
 80110ba:	f7ff ff77 	bl	8010fac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	685b      	ldr	r3, [r3, #4]
 80110c2:	f003 0303 	and.w	r3, r3, #3
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d006      	beq.n	80110d8 <pbuf_alloc+0xd8>
 80110ca:	4b42      	ldr	r3, [pc, #264]	; (80111d4 <pbuf_alloc+0x1d4>)
 80110cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80110d0:	4941      	ldr	r1, [pc, #260]	; (80111d8 <pbuf_alloc+0x1d8>)
 80110d2:	4842      	ldr	r0, [pc, #264]	; (80111dc <pbuf_alloc+0x1dc>)
 80110d4:	f00a fdda 	bl	801bc8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80110d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110da:	3303      	adds	r3, #3
 80110dc:	f023 0303 	bic.w	r3, r3, #3
 80110e0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80110e4:	d106      	bne.n	80110f4 <pbuf_alloc+0xf4>
 80110e6:	4b3b      	ldr	r3, [pc, #236]	; (80111d4 <pbuf_alloc+0x1d4>)
 80110e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80110ec:	493c      	ldr	r1, [pc, #240]	; (80111e0 <pbuf_alloc+0x1e0>)
 80110ee:	483b      	ldr	r0, [pc, #236]	; (80111dc <pbuf_alloc+0x1dc>)
 80110f0:	f00a fdcc 	bl	801bc8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80110f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d102      	bne.n	8011100 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80110fa:	693b      	ldr	r3, [r7, #16]
 80110fc:	627b      	str	r3, [r7, #36]	; 0x24
 80110fe:	e002      	b.n	8011106 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	693a      	ldr	r2, [r7, #16]
 8011104:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801110a:	8b7a      	ldrh	r2, [r7, #26]
 801110c:	89fb      	ldrh	r3, [r7, #14]
 801110e:	1ad3      	subs	r3, r2, r3
 8011110:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011112:	2300      	movs	r3, #0
 8011114:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011116:	8b7b      	ldrh	r3, [r7, #26]
 8011118:	2b00      	cmp	r3, #0
 801111a:	d19e      	bne.n	801105a <pbuf_alloc+0x5a>
      break;
 801111c:	e055      	b.n	80111ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801111e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011120:	3303      	adds	r3, #3
 8011122:	b29b      	uxth	r3, r3
 8011124:	f023 0303 	bic.w	r3, r3, #3
 8011128:	b29a      	uxth	r2, r3
 801112a:	88bb      	ldrh	r3, [r7, #4]
 801112c:	3303      	adds	r3, #3
 801112e:	b29b      	uxth	r3, r3
 8011130:	f023 0303 	bic.w	r3, r3, #3
 8011134:	b29b      	uxth	r3, r3
 8011136:	4413      	add	r3, r2
 8011138:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801113a:	8b3b      	ldrh	r3, [r7, #24]
 801113c:	3310      	adds	r3, #16
 801113e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011140:	8b3a      	ldrh	r2, [r7, #24]
 8011142:	88bb      	ldrh	r3, [r7, #4]
 8011144:	3303      	adds	r3, #3
 8011146:	f023 0303 	bic.w	r3, r3, #3
 801114a:	429a      	cmp	r2, r3
 801114c:	d306      	bcc.n	801115c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801114e:	8afa      	ldrh	r2, [r7, #22]
 8011150:	88bb      	ldrh	r3, [r7, #4]
 8011152:	3303      	adds	r3, #3
 8011154:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011158:	429a      	cmp	r2, r3
 801115a:	d201      	bcs.n	8011160 <pbuf_alloc+0x160>
        return NULL;
 801115c:	2300      	movs	r3, #0
 801115e:	e035      	b.n	80111cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011160:	8afb      	ldrh	r3, [r7, #22]
 8011162:	4618      	mov	r0, r3
 8011164:	f7ff f9b8 	bl	80104d8 <mem_malloc>
 8011168:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801116a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <pbuf_alloc+0x174>
        return NULL;
 8011170:	2300      	movs	r3, #0
 8011172:	e02b      	b.n	80111cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011174:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011176:	3310      	adds	r3, #16
 8011178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801117a:	4413      	add	r3, r2
 801117c:	3303      	adds	r3, #3
 801117e:	f023 0303 	bic.w	r3, r3, #3
 8011182:	4618      	mov	r0, r3
 8011184:	88b9      	ldrh	r1, [r7, #4]
 8011186:	88ba      	ldrh	r2, [r7, #4]
 8011188:	2300      	movs	r3, #0
 801118a:	9301      	str	r3, [sp, #4]
 801118c:	887b      	ldrh	r3, [r7, #2]
 801118e:	9300      	str	r3, [sp, #0]
 8011190:	460b      	mov	r3, r1
 8011192:	4601      	mov	r1, r0
 8011194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011196:	f7ff ff09 	bl	8010fac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801119a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801119c:	685b      	ldr	r3, [r3, #4]
 801119e:	f003 0303 	and.w	r3, r3, #3
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d010      	beq.n	80111c8 <pbuf_alloc+0x1c8>
 80111a6:	4b0b      	ldr	r3, [pc, #44]	; (80111d4 <pbuf_alloc+0x1d4>)
 80111a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80111ac:	490d      	ldr	r1, [pc, #52]	; (80111e4 <pbuf_alloc+0x1e4>)
 80111ae:	480b      	ldr	r0, [pc, #44]	; (80111dc <pbuf_alloc+0x1dc>)
 80111b0:	f00a fd6c 	bl	801bc8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80111b4:	e008      	b.n	80111c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80111b6:	4b07      	ldr	r3, [pc, #28]	; (80111d4 <pbuf_alloc+0x1d4>)
 80111b8:	f240 1227 	movw	r2, #295	; 0x127
 80111bc:	490a      	ldr	r1, [pc, #40]	; (80111e8 <pbuf_alloc+0x1e8>)
 80111be:	4807      	ldr	r0, [pc, #28]	; (80111dc <pbuf_alloc+0x1dc>)
 80111c0:	f00a fd64 	bl	801bc8c <iprintf>
      return NULL;
 80111c4:	2300      	movs	r3, #0
 80111c6:	e001      	b.n	80111cc <pbuf_alloc+0x1cc>
      break;
 80111c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80111ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3728      	adds	r7, #40	; 0x28
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}
 80111d4:	0801f6ec 	.word	0x0801f6ec
 80111d8:	0801f71c 	.word	0x0801f71c
 80111dc:	0801f74c 	.word	0x0801f74c
 80111e0:	0801f774 	.word	0x0801f774
 80111e4:	0801f7a8 	.word	0x0801f7a8
 80111e8:	0801f7d4 	.word	0x0801f7d4

080111ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b086      	sub	sp, #24
 80111f0:	af02      	add	r7, sp, #8
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	460b      	mov	r3, r1
 80111f6:	807b      	strh	r3, [r7, #2]
 80111f8:	4613      	mov	r3, r2
 80111fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80111fc:	883b      	ldrh	r3, [r7, #0]
 80111fe:	2b41      	cmp	r3, #65	; 0x41
 8011200:	d009      	beq.n	8011216 <pbuf_alloc_reference+0x2a>
 8011202:	883b      	ldrh	r3, [r7, #0]
 8011204:	2b01      	cmp	r3, #1
 8011206:	d006      	beq.n	8011216 <pbuf_alloc_reference+0x2a>
 8011208:	4b0f      	ldr	r3, [pc, #60]	; (8011248 <pbuf_alloc_reference+0x5c>)
 801120a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801120e:	490f      	ldr	r1, [pc, #60]	; (801124c <pbuf_alloc_reference+0x60>)
 8011210:	480f      	ldr	r0, [pc, #60]	; (8011250 <pbuf_alloc_reference+0x64>)
 8011212:	f00a fd3b 	bl	801bc8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011216:	200b      	movs	r0, #11
 8011218:	f7ff fae0 	bl	80107dc <memp_malloc>
 801121c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d101      	bne.n	8011228 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011224:	2300      	movs	r3, #0
 8011226:	e00b      	b.n	8011240 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011228:	8879      	ldrh	r1, [r7, #2]
 801122a:	887a      	ldrh	r2, [r7, #2]
 801122c:	2300      	movs	r3, #0
 801122e:	9301      	str	r3, [sp, #4]
 8011230:	883b      	ldrh	r3, [r7, #0]
 8011232:	9300      	str	r3, [sp, #0]
 8011234:	460b      	mov	r3, r1
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	68f8      	ldr	r0, [r7, #12]
 801123a:	f7ff feb7 	bl	8010fac <pbuf_init_alloced_pbuf>
  return p;
 801123e:	68fb      	ldr	r3, [r7, #12]
}
 8011240:	4618      	mov	r0, r3
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	0801f6ec 	.word	0x0801f6ec
 801124c:	0801f7f0 	.word	0x0801f7f0
 8011250:	0801f74c 	.word	0x0801f74c

08011254 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b088      	sub	sp, #32
 8011258:	af02      	add	r7, sp, #8
 801125a:	607b      	str	r3, [r7, #4]
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
 8011260:	460b      	mov	r3, r1
 8011262:	81bb      	strh	r3, [r7, #12]
 8011264:	4613      	mov	r3, r2
 8011266:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011268:	7bfb      	ldrb	r3, [r7, #15]
 801126a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801126c:	8a7b      	ldrh	r3, [r7, #18]
 801126e:	3303      	adds	r3, #3
 8011270:	f023 0203 	bic.w	r2, r3, #3
 8011274:	89bb      	ldrh	r3, [r7, #12]
 8011276:	441a      	add	r2, r3
 8011278:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801127a:	429a      	cmp	r2, r3
 801127c:	d901      	bls.n	8011282 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801127e:	2300      	movs	r3, #0
 8011280:	e018      	b.n	80112b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011282:	6a3b      	ldr	r3, [r7, #32]
 8011284:	2b00      	cmp	r3, #0
 8011286:	d007      	beq.n	8011298 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011288:	8a7b      	ldrh	r3, [r7, #18]
 801128a:	3303      	adds	r3, #3
 801128c:	f023 0303 	bic.w	r3, r3, #3
 8011290:	6a3a      	ldr	r2, [r7, #32]
 8011292:	4413      	add	r3, r2
 8011294:	617b      	str	r3, [r7, #20]
 8011296:	e001      	b.n	801129c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011298:	2300      	movs	r3, #0
 801129a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	89b9      	ldrh	r1, [r7, #12]
 80112a0:	89ba      	ldrh	r2, [r7, #12]
 80112a2:	2302      	movs	r3, #2
 80112a4:	9301      	str	r3, [sp, #4]
 80112a6:	897b      	ldrh	r3, [r7, #10]
 80112a8:	9300      	str	r3, [sp, #0]
 80112aa:	460b      	mov	r3, r1
 80112ac:	6979      	ldr	r1, [r7, #20]
 80112ae:	f7ff fe7d 	bl	8010fac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80112b2:	687b      	ldr	r3, [r7, #4]
}
 80112b4:	4618      	mov	r0, r3
 80112b6:	3718      	adds	r7, #24
 80112b8:	46bd      	mov	sp, r7
 80112ba:	bd80      	pop	{r7, pc}

080112bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	460b      	mov	r3, r1
 80112c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d106      	bne.n	80112dc <pbuf_realloc+0x20>
 80112ce:	4b3a      	ldr	r3, [pc, #232]	; (80113b8 <pbuf_realloc+0xfc>)
 80112d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80112d4:	4939      	ldr	r1, [pc, #228]	; (80113bc <pbuf_realloc+0x100>)
 80112d6:	483a      	ldr	r0, [pc, #232]	; (80113c0 <pbuf_realloc+0x104>)
 80112d8:	f00a fcd8 	bl	801bc8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	891b      	ldrh	r3, [r3, #8]
 80112e0:	887a      	ldrh	r2, [r7, #2]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d263      	bcs.n	80113ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	891a      	ldrh	r2, [r3, #8]
 80112ea:	887b      	ldrh	r3, [r7, #2]
 80112ec:	1ad3      	subs	r3, r2, r3
 80112ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80112f0:	887b      	ldrh	r3, [r7, #2]
 80112f2:	817b      	strh	r3, [r7, #10]
  q = p;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80112f8:	e018      	b.n	801132c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	895b      	ldrh	r3, [r3, #10]
 80112fe:	897a      	ldrh	r2, [r7, #10]
 8011300:	1ad3      	subs	r3, r2, r3
 8011302:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	891a      	ldrh	r2, [r3, #8]
 8011308:	893b      	ldrh	r3, [r7, #8]
 801130a:	1ad3      	subs	r3, r2, r3
 801130c:	b29a      	uxth	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d106      	bne.n	801132c <pbuf_realloc+0x70>
 801131e:	4b26      	ldr	r3, [pc, #152]	; (80113b8 <pbuf_realloc+0xfc>)
 8011320:	f240 12af 	movw	r2, #431	; 0x1af
 8011324:	4927      	ldr	r1, [pc, #156]	; (80113c4 <pbuf_realloc+0x108>)
 8011326:	4826      	ldr	r0, [pc, #152]	; (80113c0 <pbuf_realloc+0x104>)
 8011328:	f00a fcb0 	bl	801bc8c <iprintf>
  while (rem_len > q->len) {
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	895b      	ldrh	r3, [r3, #10]
 8011330:	897a      	ldrh	r2, [r7, #10]
 8011332:	429a      	cmp	r2, r3
 8011334:	d8e1      	bhi.n	80112fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	7b1b      	ldrb	r3, [r3, #12]
 801133a:	f003 030f 	and.w	r3, r3, #15
 801133e:	2b00      	cmp	r3, #0
 8011340:	d121      	bne.n	8011386 <pbuf_realloc+0xca>
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	895b      	ldrh	r3, [r3, #10]
 8011346:	897a      	ldrh	r2, [r7, #10]
 8011348:	429a      	cmp	r2, r3
 801134a:	d01c      	beq.n	8011386 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	7b5b      	ldrb	r3, [r3, #13]
 8011350:	f003 0302 	and.w	r3, r3, #2
 8011354:	2b00      	cmp	r3, #0
 8011356:	d116      	bne.n	8011386 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	685a      	ldr	r2, [r3, #4]
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	b29a      	uxth	r2, r3
 8011362:	897b      	ldrh	r3, [r7, #10]
 8011364:	4413      	add	r3, r2
 8011366:	b29b      	uxth	r3, r3
 8011368:	4619      	mov	r1, r3
 801136a:	68f8      	ldr	r0, [r7, #12]
 801136c:	f7fe ffaa 	bl	80102c4 <mem_trim>
 8011370:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011372:	68fb      	ldr	r3, [r7, #12]
 8011374:	2b00      	cmp	r3, #0
 8011376:	d106      	bne.n	8011386 <pbuf_realloc+0xca>
 8011378:	4b0f      	ldr	r3, [pc, #60]	; (80113b8 <pbuf_realloc+0xfc>)
 801137a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801137e:	4912      	ldr	r1, [pc, #72]	; (80113c8 <pbuf_realloc+0x10c>)
 8011380:	480f      	ldr	r0, [pc, #60]	; (80113c0 <pbuf_realloc+0x104>)
 8011382:	f00a fc83 	bl	801bc8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	897a      	ldrh	r2, [r7, #10]
 801138a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	895a      	ldrh	r2, [r3, #10]
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d004      	beq.n	80113a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	4618      	mov	r0, r3
 80113a2:	f000 f943 	bl	801162c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	2200      	movs	r2, #0
 80113aa:	601a      	str	r2, [r3, #0]
 80113ac:	e000      	b.n	80113b0 <pbuf_realloc+0xf4>
    return;
 80113ae:	bf00      	nop

}
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	0801f6ec 	.word	0x0801f6ec
 80113bc:	0801f804 	.word	0x0801f804
 80113c0:	0801f74c 	.word	0x0801f74c
 80113c4:	0801f81c 	.word	0x0801f81c
 80113c8:	0801f834 	.word	0x0801f834

080113cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	4613      	mov	r3, r2
 80113d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d106      	bne.n	80113ee <pbuf_add_header_impl+0x22>
 80113e0:	4b2b      	ldr	r3, [pc, #172]	; (8011490 <pbuf_add_header_impl+0xc4>)
 80113e2:	f240 12df 	movw	r2, #479	; 0x1df
 80113e6:	492b      	ldr	r1, [pc, #172]	; (8011494 <pbuf_add_header_impl+0xc8>)
 80113e8:	482b      	ldr	r0, [pc, #172]	; (8011498 <pbuf_add_header_impl+0xcc>)
 80113ea:	f00a fc4f 	bl	801bc8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d003      	beq.n	80113fc <pbuf_add_header_impl+0x30>
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113fa:	d301      	bcc.n	8011400 <pbuf_add_header_impl+0x34>
    return 1;
 80113fc:	2301      	movs	r3, #1
 80113fe:	e043      	b.n	8011488 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011400:	68bb      	ldr	r3, [r7, #8]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d101      	bne.n	801140a <pbuf_add_header_impl+0x3e>
    return 0;
 8011406:	2300      	movs	r3, #0
 8011408:	e03e      	b.n	8011488 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	891a      	ldrh	r2, [r3, #8]
 8011412:	8a7b      	ldrh	r3, [r7, #18]
 8011414:	4413      	add	r3, r2
 8011416:	b29b      	uxth	r3, r3
 8011418:	8a7a      	ldrh	r2, [r7, #18]
 801141a:	429a      	cmp	r2, r3
 801141c:	d901      	bls.n	8011422 <pbuf_add_header_impl+0x56>
    return 1;
 801141e:	2301      	movs	r3, #1
 8011420:	e032      	b.n	8011488 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	7b1b      	ldrb	r3, [r3, #12]
 8011426:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011428:	8a3b      	ldrh	r3, [r7, #16]
 801142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801142e:	2b00      	cmp	r3, #0
 8011430:	d00c      	beq.n	801144c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	685a      	ldr	r2, [r3, #4]
 8011436:	68bb      	ldr	r3, [r7, #8]
 8011438:	425b      	negs	r3, r3
 801143a:	4413      	add	r3, r2
 801143c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3310      	adds	r3, #16
 8011442:	697a      	ldr	r2, [r7, #20]
 8011444:	429a      	cmp	r2, r3
 8011446:	d20d      	bcs.n	8011464 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011448:	2301      	movs	r3, #1
 801144a:	e01d      	b.n	8011488 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801144c:	79fb      	ldrb	r3, [r7, #7]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d006      	beq.n	8011460 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	685a      	ldr	r2, [r3, #4]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	425b      	negs	r3, r3
 801145a:	4413      	add	r3, r2
 801145c:	617b      	str	r3, [r7, #20]
 801145e:	e001      	b.n	8011464 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011460:	2301      	movs	r3, #1
 8011462:	e011      	b.n	8011488 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	697a      	ldr	r2, [r7, #20]
 8011468:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801146a:	68fb      	ldr	r3, [r7, #12]
 801146c:	895a      	ldrh	r2, [r3, #10]
 801146e:	8a7b      	ldrh	r3, [r7, #18]
 8011470:	4413      	add	r3, r2
 8011472:	b29a      	uxth	r2, r3
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	891a      	ldrh	r2, [r3, #8]
 801147c:	8a7b      	ldrh	r3, [r7, #18]
 801147e:	4413      	add	r3, r2
 8011480:	b29a      	uxth	r2, r3
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	811a      	strh	r2, [r3, #8]


  return 0;
 8011486:	2300      	movs	r3, #0
}
 8011488:	4618      	mov	r0, r3
 801148a:	3718      	adds	r7, #24
 801148c:	46bd      	mov	sp, r7
 801148e:	bd80      	pop	{r7, pc}
 8011490:	0801f6ec 	.word	0x0801f6ec
 8011494:	0801f850 	.word	0x0801f850
 8011498:	0801f74c 	.word	0x0801f74c

0801149c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b082      	sub	sp, #8
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
 80114a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80114a6:	2200      	movs	r2, #0
 80114a8:	6839      	ldr	r1, [r7, #0]
 80114aa:	6878      	ldr	r0, [r7, #4]
 80114ac:	f7ff ff8e 	bl	80113cc <pbuf_add_header_impl>
 80114b0:	4603      	mov	r3, r0
}
 80114b2:	4618      	mov	r0, r3
 80114b4:	3708      	adds	r7, #8
 80114b6:	46bd      	mov	sp, r7
 80114b8:	bd80      	pop	{r7, pc}
	...

080114bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80114bc:	b580      	push	{r7, lr}
 80114be:	b084      	sub	sp, #16
 80114c0:	af00      	add	r7, sp, #0
 80114c2:	6078      	str	r0, [r7, #4]
 80114c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d106      	bne.n	80114da <pbuf_remove_header+0x1e>
 80114cc:	4b20      	ldr	r3, [pc, #128]	; (8011550 <pbuf_remove_header+0x94>)
 80114ce:	f240 224b 	movw	r2, #587	; 0x24b
 80114d2:	4920      	ldr	r1, [pc, #128]	; (8011554 <pbuf_remove_header+0x98>)
 80114d4:	4820      	ldr	r0, [pc, #128]	; (8011558 <pbuf_remove_header+0x9c>)
 80114d6:	f00a fbd9 	bl	801bc8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d003      	beq.n	80114e8 <pbuf_remove_header+0x2c>
 80114e0:	683b      	ldr	r3, [r7, #0]
 80114e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80114e6:	d301      	bcc.n	80114ec <pbuf_remove_header+0x30>
    return 1;
 80114e8:	2301      	movs	r3, #1
 80114ea:	e02c      	b.n	8011546 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d101      	bne.n	80114f6 <pbuf_remove_header+0x3a>
    return 0;
 80114f2:	2300      	movs	r3, #0
 80114f4:	e027      	b.n	8011546 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	895b      	ldrh	r3, [r3, #10]
 80114fe:	89fa      	ldrh	r2, [r7, #14]
 8011500:	429a      	cmp	r2, r3
 8011502:	d908      	bls.n	8011516 <pbuf_remove_header+0x5a>
 8011504:	4b12      	ldr	r3, [pc, #72]	; (8011550 <pbuf_remove_header+0x94>)
 8011506:	f240 2255 	movw	r2, #597	; 0x255
 801150a:	4914      	ldr	r1, [pc, #80]	; (801155c <pbuf_remove_header+0xa0>)
 801150c:	4812      	ldr	r0, [pc, #72]	; (8011558 <pbuf_remove_header+0x9c>)
 801150e:	f00a fbbd 	bl	801bc8c <iprintf>
 8011512:	2301      	movs	r3, #1
 8011514:	e017      	b.n	8011546 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	685b      	ldr	r3, [r3, #4]
 801151a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685a      	ldr	r2, [r3, #4]
 8011520:	683b      	ldr	r3, [r7, #0]
 8011522:	441a      	add	r2, r3
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	895a      	ldrh	r2, [r3, #10]
 801152c:	89fb      	ldrh	r3, [r7, #14]
 801152e:	1ad3      	subs	r3, r2, r3
 8011530:	b29a      	uxth	r2, r3
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	891a      	ldrh	r2, [r3, #8]
 801153a:	89fb      	ldrh	r3, [r7, #14]
 801153c:	1ad3      	subs	r3, r2, r3
 801153e:	b29a      	uxth	r2, r3
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011544:	2300      	movs	r3, #0
}
 8011546:	4618      	mov	r0, r3
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
 801154e:	bf00      	nop
 8011550:	0801f6ec 	.word	0x0801f6ec
 8011554:	0801f850 	.word	0x0801f850
 8011558:	0801f74c 	.word	0x0801f74c
 801155c:	0801f85c 	.word	0x0801f85c

08011560 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011560:	b580      	push	{r7, lr}
 8011562:	b082      	sub	sp, #8
 8011564:	af00      	add	r7, sp, #0
 8011566:	6078      	str	r0, [r7, #4]
 8011568:	460b      	mov	r3, r1
 801156a:	807b      	strh	r3, [r7, #2]
 801156c:	4613      	mov	r3, r2
 801156e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011574:	2b00      	cmp	r3, #0
 8011576:	da08      	bge.n	801158a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011578:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801157c:	425b      	negs	r3, r3
 801157e:	4619      	mov	r1, r3
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f7ff ff9b 	bl	80114bc <pbuf_remove_header>
 8011586:	4603      	mov	r3, r0
 8011588:	e007      	b.n	801159a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801158a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801158e:	787a      	ldrb	r2, [r7, #1]
 8011590:	4619      	mov	r1, r3
 8011592:	6878      	ldr	r0, [r7, #4]
 8011594:	f7ff ff1a 	bl	80113cc <pbuf_add_header_impl>
 8011598:	4603      	mov	r3, r0
  }
}
 801159a:	4618      	mov	r0, r3
 801159c:	3708      	adds	r7, #8
 801159e:	46bd      	mov	sp, r7
 80115a0:	bd80      	pop	{r7, pc}

080115a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80115a2:	b580      	push	{r7, lr}
 80115a4:	b082      	sub	sp, #8
 80115a6:	af00      	add	r7, sp, #0
 80115a8:	6078      	str	r0, [r7, #4]
 80115aa:	460b      	mov	r3, r1
 80115ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80115ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115b2:	2201      	movs	r2, #1
 80115b4:	4619      	mov	r1, r3
 80115b6:	6878      	ldr	r0, [r7, #4]
 80115b8:	f7ff ffd2 	bl	8011560 <pbuf_header_impl>
 80115bc:	4603      	mov	r3, r0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3708      	adds	r7, #8
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}

080115c6 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 80115c6:	b580      	push	{r7, lr}
 80115c8:	b086      	sub	sp, #24
 80115ca:	af00      	add	r7, sp, #0
 80115cc:	6078      	str	r0, [r7, #4]
 80115ce:	460b      	mov	r3, r1
 80115d0:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 80115d6:	887b      	ldrh	r3, [r7, #2]
 80115d8:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 80115da:	e01c      	b.n	8011616 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	895b      	ldrh	r3, [r3, #10]
 80115e0:	8a7a      	ldrh	r2, [r7, #18]
 80115e2:	429a      	cmp	r2, r3
 80115e4:	d310      	bcc.n	8011608 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 80115ea:	697b      	ldr	r3, [r7, #20]
 80115ec:	895b      	ldrh	r3, [r3, #10]
 80115ee:	8a7a      	ldrh	r2, [r7, #18]
 80115f0:	1ad3      	subs	r3, r2, r3
 80115f2:	827b      	strh	r3, [r7, #18]
      p = p->next;
 80115f4:	697b      	ldr	r3, [r7, #20]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	617b      	str	r3, [r7, #20]
      f->next = 0;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8011600:	68f8      	ldr	r0, [r7, #12]
 8011602:	f000 f813 	bl	801162c <pbuf_free>
 8011606:	e006      	b.n	8011616 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011608:	8a7b      	ldrh	r3, [r7, #18]
 801160a:	4619      	mov	r1, r3
 801160c:	6978      	ldr	r0, [r7, #20]
 801160e:	f7ff ff55 	bl	80114bc <pbuf_remove_header>
      free_left = 0;
 8011612:	2300      	movs	r3, #0
 8011614:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011616:	8a7b      	ldrh	r3, [r7, #18]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d002      	beq.n	8011622 <pbuf_free_header+0x5c>
 801161c:	697b      	ldr	r3, [r7, #20]
 801161e:	2b00      	cmp	r3, #0
 8011620:	d1dc      	bne.n	80115dc <pbuf_free_header+0x16>
    }
  }
  return p;
 8011622:	697b      	ldr	r3, [r7, #20]
}
 8011624:	4618      	mov	r0, r3
 8011626:	3718      	adds	r7, #24
 8011628:	46bd      	mov	sp, r7
 801162a:	bd80      	pop	{r7, pc}

0801162c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801162c:	b580      	push	{r7, lr}
 801162e:	b088      	sub	sp, #32
 8011630:	af00      	add	r7, sp, #0
 8011632:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d10b      	bne.n	8011652 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d106      	bne.n	801164e <pbuf_free+0x22>
 8011640:	4b3b      	ldr	r3, [pc, #236]	; (8011730 <pbuf_free+0x104>)
 8011642:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011646:	493b      	ldr	r1, [pc, #236]	; (8011734 <pbuf_free+0x108>)
 8011648:	483b      	ldr	r0, [pc, #236]	; (8011738 <pbuf_free+0x10c>)
 801164a:	f00a fb1f 	bl	801bc8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801164e:	2300      	movs	r3, #0
 8011650:	e069      	b.n	8011726 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011652:	2300      	movs	r3, #0
 8011654:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011656:	e062      	b.n	801171e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011658:	f009 fe70 	bl	801b33c <sys_arch_protect>
 801165c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	7b9b      	ldrb	r3, [r3, #14]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <pbuf_free+0x48>
 8011666:	4b32      	ldr	r3, [pc, #200]	; (8011730 <pbuf_free+0x104>)
 8011668:	f240 22f1 	movw	r2, #753	; 0x2f1
 801166c:	4933      	ldr	r1, [pc, #204]	; (801173c <pbuf_free+0x110>)
 801166e:	4832      	ldr	r0, [pc, #200]	; (8011738 <pbuf_free+0x10c>)
 8011670:	f00a fb0c 	bl	801bc8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	7b9b      	ldrb	r3, [r3, #14]
 8011678:	3b01      	subs	r3, #1
 801167a:	b2da      	uxtb	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	739a      	strb	r2, [r3, #14]
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	7b9b      	ldrb	r3, [r3, #14]
 8011684:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011686:	69b8      	ldr	r0, [r7, #24]
 8011688:	f009 fe66 	bl	801b358 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801168c:	7dfb      	ldrb	r3, [r7, #23]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d143      	bne.n	801171a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	7b1b      	ldrb	r3, [r3, #12]
 801169c:	f003 030f 	and.w	r3, r3, #15
 80116a0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	7b5b      	ldrb	r3, [r3, #13]
 80116a6:	f003 0302 	and.w	r3, r3, #2
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d011      	beq.n	80116d2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	691b      	ldr	r3, [r3, #16]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d106      	bne.n	80116c8 <pbuf_free+0x9c>
 80116ba:	4b1d      	ldr	r3, [pc, #116]	; (8011730 <pbuf_free+0x104>)
 80116bc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80116c0:	491f      	ldr	r1, [pc, #124]	; (8011740 <pbuf_free+0x114>)
 80116c2:	481d      	ldr	r0, [pc, #116]	; (8011738 <pbuf_free+0x10c>)
 80116c4:	f00a fae2 	bl	801bc8c <iprintf>
        pc->custom_free_function(p);
 80116c8:	68bb      	ldr	r3, [r7, #8]
 80116ca:	691b      	ldr	r3, [r3, #16]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	4798      	blx	r3
 80116d0:	e01d      	b.n	801170e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80116d2:	7bfb      	ldrb	r3, [r7, #15]
 80116d4:	2b02      	cmp	r3, #2
 80116d6:	d104      	bne.n	80116e2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80116d8:	6879      	ldr	r1, [r7, #4]
 80116da:	200c      	movs	r0, #12
 80116dc:	f7ff f8d0 	bl	8010880 <memp_free>
 80116e0:	e015      	b.n	801170e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80116e2:	7bfb      	ldrb	r3, [r7, #15]
 80116e4:	2b01      	cmp	r3, #1
 80116e6:	d104      	bne.n	80116f2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80116e8:	6879      	ldr	r1, [r7, #4]
 80116ea:	200b      	movs	r0, #11
 80116ec:	f7ff f8c8 	bl	8010880 <memp_free>
 80116f0:	e00d      	b.n	801170e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80116f2:	7bfb      	ldrb	r3, [r7, #15]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d103      	bne.n	8011700 <pbuf_free+0xd4>
          mem_free(p);
 80116f8:	6878      	ldr	r0, [r7, #4]
 80116fa:	f7fe fd53 	bl	80101a4 <mem_free>
 80116fe:	e006      	b.n	801170e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011700:	4b0b      	ldr	r3, [pc, #44]	; (8011730 <pbuf_free+0x104>)
 8011702:	f240 320f 	movw	r2, #783	; 0x30f
 8011706:	490f      	ldr	r1, [pc, #60]	; (8011744 <pbuf_free+0x118>)
 8011708:	480b      	ldr	r0, [pc, #44]	; (8011738 <pbuf_free+0x10c>)
 801170a:	f00a fabf 	bl	801bc8c <iprintf>
        }
      }
      count++;
 801170e:	7ffb      	ldrb	r3, [r7, #31]
 8011710:	3301      	adds	r3, #1
 8011712:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011714:	693b      	ldr	r3, [r7, #16]
 8011716:	607b      	str	r3, [r7, #4]
 8011718:	e001      	b.n	801171e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801171a:	2300      	movs	r3, #0
 801171c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	2b00      	cmp	r3, #0
 8011722:	d199      	bne.n	8011658 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011724:	7ffb      	ldrb	r3, [r7, #31]
}
 8011726:	4618      	mov	r0, r3
 8011728:	3720      	adds	r7, #32
 801172a:	46bd      	mov	sp, r7
 801172c:	bd80      	pop	{r7, pc}
 801172e:	bf00      	nop
 8011730:	0801f6ec 	.word	0x0801f6ec
 8011734:	0801f850 	.word	0x0801f850
 8011738:	0801f74c 	.word	0x0801f74c
 801173c:	0801f87c 	.word	0x0801f87c
 8011740:	0801f894 	.word	0x0801f894
 8011744:	0801f8b8 	.word	0x0801f8b8

08011748 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011748:	b480      	push	{r7}
 801174a:	b085      	sub	sp, #20
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011750:	2300      	movs	r3, #0
 8011752:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011754:	e005      	b.n	8011762 <pbuf_clen+0x1a>
    ++len;
 8011756:	89fb      	ldrh	r3, [r7, #14]
 8011758:	3301      	adds	r3, #1
 801175a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d1f6      	bne.n	8011756 <pbuf_clen+0xe>
  }
  return len;
 8011768:	89fb      	ldrh	r3, [r7, #14]
}
 801176a:	4618      	mov	r0, r3
 801176c:	3714      	adds	r7, #20
 801176e:	46bd      	mov	sp, r7
 8011770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011774:	4770      	bx	lr
	...

08011778 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d016      	beq.n	80117b4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011786:	f009 fdd9 	bl	801b33c <sys_arch_protect>
 801178a:	60f8      	str	r0, [r7, #12]
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	7b9b      	ldrb	r3, [r3, #14]
 8011790:	3301      	adds	r3, #1
 8011792:	b2da      	uxtb	r2, r3
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	739a      	strb	r2, [r3, #14]
 8011798:	68f8      	ldr	r0, [r7, #12]
 801179a:	f009 fddd 	bl	801b358 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	7b9b      	ldrb	r3, [r3, #14]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d106      	bne.n	80117b4 <pbuf_ref+0x3c>
 80117a6:	4b05      	ldr	r3, [pc, #20]	; (80117bc <pbuf_ref+0x44>)
 80117a8:	f240 3242 	movw	r2, #834	; 0x342
 80117ac:	4904      	ldr	r1, [pc, #16]	; (80117c0 <pbuf_ref+0x48>)
 80117ae:	4805      	ldr	r0, [pc, #20]	; (80117c4 <pbuf_ref+0x4c>)
 80117b0:	f00a fa6c 	bl	801bc8c <iprintf>
  }
}
 80117b4:	bf00      	nop
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}
 80117bc:	0801f6ec 	.word	0x0801f6ec
 80117c0:	0801f8cc 	.word	0x0801f8cc
 80117c4:	0801f74c 	.word	0x0801f74c

080117c8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	b084      	sub	sp, #16
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
 80117d0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d002      	beq.n	80117de <pbuf_cat+0x16>
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	2b00      	cmp	r3, #0
 80117dc:	d107      	bne.n	80117ee <pbuf_cat+0x26>
 80117de:	4b20      	ldr	r3, [pc, #128]	; (8011860 <pbuf_cat+0x98>)
 80117e0:	f240 3259 	movw	r2, #857	; 0x359
 80117e4:	491f      	ldr	r1, [pc, #124]	; (8011864 <pbuf_cat+0x9c>)
 80117e6:	4820      	ldr	r0, [pc, #128]	; (8011868 <pbuf_cat+0xa0>)
 80117e8:	f00a fa50 	bl	801bc8c <iprintf>
 80117ec:	e034      	b.n	8011858 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	60fb      	str	r3, [r7, #12]
 80117f2:	e00a      	b.n	801180a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	891a      	ldrh	r2, [r3, #8]
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	891b      	ldrh	r3, [r3, #8]
 80117fc:	4413      	add	r3, r2
 80117fe:	b29a      	uxth	r2, r3
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	60fb      	str	r3, [r7, #12]
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d1f0      	bne.n	80117f4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	891a      	ldrh	r2, [r3, #8]
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	895b      	ldrh	r3, [r3, #10]
 801181a:	429a      	cmp	r2, r3
 801181c:	d006      	beq.n	801182c <pbuf_cat+0x64>
 801181e:	4b10      	ldr	r3, [pc, #64]	; (8011860 <pbuf_cat+0x98>)
 8011820:	f240 3262 	movw	r2, #866	; 0x362
 8011824:	4911      	ldr	r1, [pc, #68]	; (801186c <pbuf_cat+0xa4>)
 8011826:	4810      	ldr	r0, [pc, #64]	; (8011868 <pbuf_cat+0xa0>)
 8011828:	f00a fa30 	bl	801bc8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	2b00      	cmp	r3, #0
 8011832:	d006      	beq.n	8011842 <pbuf_cat+0x7a>
 8011834:	4b0a      	ldr	r3, [pc, #40]	; (8011860 <pbuf_cat+0x98>)
 8011836:	f240 3263 	movw	r2, #867	; 0x363
 801183a:	490d      	ldr	r1, [pc, #52]	; (8011870 <pbuf_cat+0xa8>)
 801183c:	480a      	ldr	r0, [pc, #40]	; (8011868 <pbuf_cat+0xa0>)
 801183e:	f00a fa25 	bl	801bc8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	891a      	ldrh	r2, [r3, #8]
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	891b      	ldrh	r3, [r3, #8]
 801184a:	4413      	add	r3, r2
 801184c:	b29a      	uxth	r2, r3
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	683a      	ldr	r2, [r7, #0]
 8011856:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011858:	3710      	adds	r7, #16
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	0801f6ec 	.word	0x0801f6ec
 8011864:	0801f8e0 	.word	0x0801f8e0
 8011868:	0801f74c 	.word	0x0801f74c
 801186c:	0801f918 	.word	0x0801f918
 8011870:	0801f948 	.word	0x0801f948

08011874 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b082      	sub	sp, #8
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801187e:	6839      	ldr	r1, [r7, #0]
 8011880:	6878      	ldr	r0, [r7, #4]
 8011882:	f7ff ffa1 	bl	80117c8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011886:	6838      	ldr	r0, [r7, #0]
 8011888:	f7ff ff76 	bl	8011778 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801188c:	bf00      	nop
 801188e:	3708      	adds	r7, #8
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}

08011894 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011894:	b580      	push	{r7, lr}
 8011896:	b086      	sub	sp, #24
 8011898:	af00      	add	r7, sp, #0
 801189a:	6078      	str	r0, [r7, #4]
 801189c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801189e:	2300      	movs	r3, #0
 80118a0:	617b      	str	r3, [r7, #20]
 80118a2:	2300      	movs	r3, #0
 80118a4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d008      	beq.n	80118be <pbuf_copy+0x2a>
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d005      	beq.n	80118be <pbuf_copy+0x2a>
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	891a      	ldrh	r2, [r3, #8]
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	891b      	ldrh	r3, [r3, #8]
 80118ba:	429a      	cmp	r2, r3
 80118bc:	d209      	bcs.n	80118d2 <pbuf_copy+0x3e>
 80118be:	4b57      	ldr	r3, [pc, #348]	; (8011a1c <pbuf_copy+0x188>)
 80118c0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80118c4:	4956      	ldr	r1, [pc, #344]	; (8011a20 <pbuf_copy+0x18c>)
 80118c6:	4857      	ldr	r0, [pc, #348]	; (8011a24 <pbuf_copy+0x190>)
 80118c8:	f00a f9e0 	bl	801bc8c <iprintf>
 80118cc:	f06f 030f 	mvn.w	r3, #15
 80118d0:	e09f      	b.n	8011a12 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	895b      	ldrh	r3, [r3, #10]
 80118d6:	461a      	mov	r2, r3
 80118d8:	697b      	ldr	r3, [r7, #20]
 80118da:	1ad2      	subs	r2, r2, r3
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	895b      	ldrh	r3, [r3, #10]
 80118e0:	4619      	mov	r1, r3
 80118e2:	693b      	ldr	r3, [r7, #16]
 80118e4:	1acb      	subs	r3, r1, r3
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d306      	bcc.n	80118f8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	895b      	ldrh	r3, [r3, #10]
 80118ee:	461a      	mov	r2, r3
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	1ad3      	subs	r3, r2, r3
 80118f4:	60fb      	str	r3, [r7, #12]
 80118f6:	e005      	b.n	8011904 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	895b      	ldrh	r3, [r3, #10]
 80118fc:	461a      	mov	r2, r3
 80118fe:	697b      	ldr	r3, [r7, #20]
 8011900:	1ad3      	subs	r3, r2, r3
 8011902:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	685a      	ldr	r2, [r3, #4]
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	18d0      	adds	r0, r2, r3
 801190c:	683b      	ldr	r3, [r7, #0]
 801190e:	685a      	ldr	r2, [r3, #4]
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	4413      	add	r3, r2
 8011914:	68fa      	ldr	r2, [r7, #12]
 8011916:	4619      	mov	r1, r3
 8011918:	f009 fd60 	bl	801b3dc <memcpy>
    offset_to += len;
 801191c:	697a      	ldr	r2, [r7, #20]
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	4413      	add	r3, r2
 8011922:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011924:	693a      	ldr	r2, [r7, #16]
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	4413      	add	r3, r2
 801192a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	895b      	ldrh	r3, [r3, #10]
 8011930:	461a      	mov	r2, r3
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	4293      	cmp	r3, r2
 8011936:	d906      	bls.n	8011946 <pbuf_copy+0xb2>
 8011938:	4b38      	ldr	r3, [pc, #224]	; (8011a1c <pbuf_copy+0x188>)
 801193a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801193e:	493a      	ldr	r1, [pc, #232]	; (8011a28 <pbuf_copy+0x194>)
 8011940:	4838      	ldr	r0, [pc, #224]	; (8011a24 <pbuf_copy+0x190>)
 8011942:	f00a f9a3 	bl	801bc8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011946:	683b      	ldr	r3, [r7, #0]
 8011948:	895b      	ldrh	r3, [r3, #10]
 801194a:	461a      	mov	r2, r3
 801194c:	693b      	ldr	r3, [r7, #16]
 801194e:	4293      	cmp	r3, r2
 8011950:	d906      	bls.n	8011960 <pbuf_copy+0xcc>
 8011952:	4b32      	ldr	r3, [pc, #200]	; (8011a1c <pbuf_copy+0x188>)
 8011954:	f240 32da 	movw	r2, #986	; 0x3da
 8011958:	4934      	ldr	r1, [pc, #208]	; (8011a2c <pbuf_copy+0x198>)
 801195a:	4832      	ldr	r0, [pc, #200]	; (8011a24 <pbuf_copy+0x190>)
 801195c:	f00a f996 	bl	801bc8c <iprintf>
    if (offset_from >= p_from->len) {
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	895b      	ldrh	r3, [r3, #10]
 8011964:	461a      	mov	r2, r3
 8011966:	693b      	ldr	r3, [r7, #16]
 8011968:	4293      	cmp	r3, r2
 801196a:	d304      	bcc.n	8011976 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	895b      	ldrh	r3, [r3, #10]
 801197a:	461a      	mov	r2, r3
 801197c:	697b      	ldr	r3, [r7, #20]
 801197e:	4293      	cmp	r3, r2
 8011980:	d114      	bne.n	80119ac <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011982:	2300      	movs	r3, #0
 8011984:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d10c      	bne.n	80119ac <pbuf_copy+0x118>
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d009      	beq.n	80119ac <pbuf_copy+0x118>
 8011998:	4b20      	ldr	r3, [pc, #128]	; (8011a1c <pbuf_copy+0x188>)
 801199a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801199e:	4924      	ldr	r1, [pc, #144]	; (8011a30 <pbuf_copy+0x19c>)
 80119a0:	4820      	ldr	r0, [pc, #128]	; (8011a24 <pbuf_copy+0x190>)
 80119a2:	f00a f973 	bl	801bc8c <iprintf>
 80119a6:	f06f 030f 	mvn.w	r3, #15
 80119aa:	e032      	b.n	8011a12 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80119ac:	683b      	ldr	r3, [r7, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d013      	beq.n	80119da <pbuf_copy+0x146>
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	895a      	ldrh	r2, [r3, #10]
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	891b      	ldrh	r3, [r3, #8]
 80119ba:	429a      	cmp	r2, r3
 80119bc:	d10d      	bne.n	80119da <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80119be:	683b      	ldr	r3, [r7, #0]
 80119c0:	681b      	ldr	r3, [r3, #0]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d009      	beq.n	80119da <pbuf_copy+0x146>
 80119c6:	4b15      	ldr	r3, [pc, #84]	; (8011a1c <pbuf_copy+0x188>)
 80119c8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80119cc:	4919      	ldr	r1, [pc, #100]	; (8011a34 <pbuf_copy+0x1a0>)
 80119ce:	4815      	ldr	r0, [pc, #84]	; (8011a24 <pbuf_copy+0x190>)
 80119d0:	f00a f95c 	bl	801bc8c <iprintf>
 80119d4:	f06f 0305 	mvn.w	r3, #5
 80119d8:	e01b      	b.n	8011a12 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d013      	beq.n	8011a08 <pbuf_copy+0x174>
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	895a      	ldrh	r2, [r3, #10]
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	891b      	ldrh	r3, [r3, #8]
 80119e8:	429a      	cmp	r2, r3
 80119ea:	d10d      	bne.n	8011a08 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d009      	beq.n	8011a08 <pbuf_copy+0x174>
 80119f4:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <pbuf_copy+0x188>)
 80119f6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80119fa:	490e      	ldr	r1, [pc, #56]	; (8011a34 <pbuf_copy+0x1a0>)
 80119fc:	4809      	ldr	r0, [pc, #36]	; (8011a24 <pbuf_copy+0x190>)
 80119fe:	f00a f945 	bl	801bc8c <iprintf>
 8011a02:	f06f 0305 	mvn.w	r3, #5
 8011a06:	e004      	b.n	8011a12 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011a08:	683b      	ldr	r3, [r7, #0]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	f47f af61 	bne.w	80118d2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011a10:	2300      	movs	r3, #0
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3718      	adds	r7, #24
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}
 8011a1a:	bf00      	nop
 8011a1c:	0801f6ec 	.word	0x0801f6ec
 8011a20:	0801f994 	.word	0x0801f994
 8011a24:	0801f74c 	.word	0x0801f74c
 8011a28:	0801f9c4 	.word	0x0801f9c4
 8011a2c:	0801f9dc 	.word	0x0801f9dc
 8011a30:	0801f9f8 	.word	0x0801f9f8
 8011a34:	0801fa08 	.word	0x0801fa08

08011a38 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b088      	sub	sp, #32
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	4611      	mov	r1, r2
 8011a44:	461a      	mov	r2, r3
 8011a46:	460b      	mov	r3, r1
 8011a48:	80fb      	strh	r3, [r7, #6]
 8011a4a:	4613      	mov	r3, r2
 8011a4c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d108      	bne.n	8011a6e <pbuf_copy_partial+0x36>
 8011a5c:	4b2b      	ldr	r3, [pc, #172]	; (8011b0c <pbuf_copy_partial+0xd4>)
 8011a5e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011a62:	492b      	ldr	r1, [pc, #172]	; (8011b10 <pbuf_copy_partial+0xd8>)
 8011a64:	482b      	ldr	r0, [pc, #172]	; (8011b14 <pbuf_copy_partial+0xdc>)
 8011a66:	f00a f911 	bl	801bc8c <iprintf>
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e04a      	b.n	8011b04 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011a6e:	68bb      	ldr	r3, [r7, #8]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d108      	bne.n	8011a86 <pbuf_copy_partial+0x4e>
 8011a74:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <pbuf_copy_partial+0xd4>)
 8011a76:	f240 420b 	movw	r2, #1035	; 0x40b
 8011a7a:	4927      	ldr	r1, [pc, #156]	; (8011b18 <pbuf_copy_partial+0xe0>)
 8011a7c:	4825      	ldr	r0, [pc, #148]	; (8011b14 <pbuf_copy_partial+0xdc>)
 8011a7e:	f00a f905 	bl	801bc8c <iprintf>
 8011a82:	2300      	movs	r3, #0
 8011a84:	e03e      	b.n	8011b04 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	61fb      	str	r3, [r7, #28]
 8011a8a:	e034      	b.n	8011af6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011a8c:	88bb      	ldrh	r3, [r7, #4]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00a      	beq.n	8011aa8 <pbuf_copy_partial+0x70>
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	895b      	ldrh	r3, [r3, #10]
 8011a96:	88ba      	ldrh	r2, [r7, #4]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d305      	bcc.n	8011aa8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011a9c:	69fb      	ldr	r3, [r7, #28]
 8011a9e:	895b      	ldrh	r3, [r3, #10]
 8011aa0:	88ba      	ldrh	r2, [r7, #4]
 8011aa2:	1ad3      	subs	r3, r2, r3
 8011aa4:	80bb      	strh	r3, [r7, #4]
 8011aa6:	e023      	b.n	8011af0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011aa8:	69fb      	ldr	r3, [r7, #28]
 8011aaa:	895a      	ldrh	r2, [r3, #10]
 8011aac:	88bb      	ldrh	r3, [r7, #4]
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011ab2:	8b3a      	ldrh	r2, [r7, #24]
 8011ab4:	88fb      	ldrh	r3, [r7, #6]
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	d901      	bls.n	8011abe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011aba:	88fb      	ldrh	r3, [r7, #6]
 8011abc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011abe:	8b7b      	ldrh	r3, [r7, #26]
 8011ac0:	68ba      	ldr	r2, [r7, #8]
 8011ac2:	18d0      	adds	r0, r2, r3
 8011ac4:	69fb      	ldr	r3, [r7, #28]
 8011ac6:	685a      	ldr	r2, [r3, #4]
 8011ac8:	88bb      	ldrh	r3, [r7, #4]
 8011aca:	4413      	add	r3, r2
 8011acc:	8b3a      	ldrh	r2, [r7, #24]
 8011ace:	4619      	mov	r1, r3
 8011ad0:	f009 fc84 	bl	801b3dc <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011ad4:	8afa      	ldrh	r2, [r7, #22]
 8011ad6:	8b3b      	ldrh	r3, [r7, #24]
 8011ad8:	4413      	add	r3, r2
 8011ada:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011adc:	8b7a      	ldrh	r2, [r7, #26]
 8011ade:	8b3b      	ldrh	r3, [r7, #24]
 8011ae0:	4413      	add	r3, r2
 8011ae2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011ae4:	88fa      	ldrh	r2, [r7, #6]
 8011ae6:	8b3b      	ldrh	r3, [r7, #24]
 8011ae8:	1ad3      	subs	r3, r2, r3
 8011aea:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011aec:	2300      	movs	r3, #0
 8011aee:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011af0:	69fb      	ldr	r3, [r7, #28]
 8011af2:	681b      	ldr	r3, [r3, #0]
 8011af4:	61fb      	str	r3, [r7, #28]
 8011af6:	88fb      	ldrh	r3, [r7, #6]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d002      	beq.n	8011b02 <pbuf_copy_partial+0xca>
 8011afc:	69fb      	ldr	r3, [r7, #28]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d1c4      	bne.n	8011a8c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011b02:	8afb      	ldrh	r3, [r7, #22]
}
 8011b04:	4618      	mov	r0, r3
 8011b06:	3720      	adds	r7, #32
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	bd80      	pop	{r7, pc}
 8011b0c:	0801f6ec 	.word	0x0801f6ec
 8011b10:	0801fa34 	.word	0x0801fa34
 8011b14:	0801f74c 	.word	0x0801f74c
 8011b18:	0801fa54 	.word	0x0801fa54

08011b1c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011b1c:	b580      	push	{r7, lr}
 8011b1e:	b084      	sub	sp, #16
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	4603      	mov	r3, r0
 8011b24:	603a      	str	r2, [r7, #0]
 8011b26:	71fb      	strb	r3, [r7, #7]
 8011b28:	460b      	mov	r3, r1
 8011b2a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	8919      	ldrh	r1, [r3, #8]
 8011b30:	88ba      	ldrh	r2, [r7, #4]
 8011b32:	79fb      	ldrb	r3, [r7, #7]
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7ff fa63 	bl	8011000 <pbuf_alloc>
 8011b3a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d101      	bne.n	8011b46 <pbuf_clone+0x2a>
    return NULL;
 8011b42:	2300      	movs	r3, #0
 8011b44:	e011      	b.n	8011b6a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011b46:	6839      	ldr	r1, [r7, #0]
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f7ff fea3 	bl	8011894 <pbuf_copy>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011b52:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d006      	beq.n	8011b68 <pbuf_clone+0x4c>
 8011b5a:	4b06      	ldr	r3, [pc, #24]	; (8011b74 <pbuf_clone+0x58>)
 8011b5c:	f240 5224 	movw	r2, #1316	; 0x524
 8011b60:	4905      	ldr	r1, [pc, #20]	; (8011b78 <pbuf_clone+0x5c>)
 8011b62:	4806      	ldr	r0, [pc, #24]	; (8011b7c <pbuf_clone+0x60>)
 8011b64:	f00a f892 	bl	801bc8c <iprintf>
  return q;
 8011b68:	68fb      	ldr	r3, [r7, #12]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}
 8011b72:	bf00      	nop
 8011b74:	0801f6ec 	.word	0x0801f6ec
 8011b78:	0801fb60 	.word	0x0801fb60
 8011b7c:	0801f74c 	.word	0x0801f74c

08011b80 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011b84:	f00a f910 	bl	801bda8 <rand>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	b29b      	uxth	r3, r3
 8011b8c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011b90:	b29b      	uxth	r3, r3
 8011b92:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	4b01      	ldr	r3, [pc, #4]	; (8011ba0 <tcp_init+0x20>)
 8011b9a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011b9c:	bf00      	nop
 8011b9e:	bd80      	pop	{r7, pc}
 8011ba0:	20000010 	.word	0x20000010

08011ba4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011ba4:	b580      	push	{r7, lr}
 8011ba6:	b082      	sub	sp, #8
 8011ba8:	af00      	add	r7, sp, #0
 8011baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	7d1b      	ldrb	r3, [r3, #20]
 8011bb0:	2b01      	cmp	r3, #1
 8011bb2:	d105      	bne.n	8011bc0 <tcp_free+0x1c>
 8011bb4:	4b06      	ldr	r3, [pc, #24]	; (8011bd0 <tcp_free+0x2c>)
 8011bb6:	22d4      	movs	r2, #212	; 0xd4
 8011bb8:	4906      	ldr	r1, [pc, #24]	; (8011bd4 <tcp_free+0x30>)
 8011bba:	4807      	ldr	r0, [pc, #28]	; (8011bd8 <tcp_free+0x34>)
 8011bbc:	f00a f866 	bl	801bc8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011bc0:	6879      	ldr	r1, [r7, #4]
 8011bc2:	2001      	movs	r0, #1
 8011bc4:	f7fe fe5c 	bl	8010880 <memp_free>
}
 8011bc8:	bf00      	nop
 8011bca:	3708      	adds	r7, #8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	0801fbec 	.word	0x0801fbec
 8011bd4:	0801fc1c 	.word	0x0801fc1c
 8011bd8:	0801fc30 	.word	0x0801fc30

08011bdc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	7d1b      	ldrb	r3, [r3, #20]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d105      	bne.n	8011bf8 <tcp_free_listen+0x1c>
 8011bec:	4b06      	ldr	r3, [pc, #24]	; (8011c08 <tcp_free_listen+0x2c>)
 8011bee:	22df      	movs	r2, #223	; 0xdf
 8011bf0:	4906      	ldr	r1, [pc, #24]	; (8011c0c <tcp_free_listen+0x30>)
 8011bf2:	4807      	ldr	r0, [pc, #28]	; (8011c10 <tcp_free_listen+0x34>)
 8011bf4:	f00a f84a 	bl	801bc8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	2002      	movs	r0, #2
 8011bfc:	f7fe fe40 	bl	8010880 <memp_free>
}
 8011c00:	bf00      	nop
 8011c02:	3708      	adds	r7, #8
 8011c04:	46bd      	mov	sp, r7
 8011c06:	bd80      	pop	{r7, pc}
 8011c08:	0801fbec 	.word	0x0801fbec
 8011c0c:	0801fc58 	.word	0x0801fc58
 8011c10:	0801fc30 	.word	0x0801fc30

08011c14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011c14:	b580      	push	{r7, lr}
 8011c16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011c18:	f000 ffdc 	bl	8012bd4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011c1c:	4b07      	ldr	r3, [pc, #28]	; (8011c3c <tcp_tmr+0x28>)
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	3301      	adds	r3, #1
 8011c22:	b2da      	uxtb	r2, r3
 8011c24:	4b05      	ldr	r3, [pc, #20]	; (8011c3c <tcp_tmr+0x28>)
 8011c26:	701a      	strb	r2, [r3, #0]
 8011c28:	4b04      	ldr	r3, [pc, #16]	; (8011c3c <tcp_tmr+0x28>)
 8011c2a:	781b      	ldrb	r3, [r3, #0]
 8011c2c:	f003 0301 	and.w	r3, r3, #1
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d001      	beq.n	8011c38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011c34:	f000 fc8e 	bl	8012554 <tcp_slowtmr>
  }
}
 8011c38:	bf00      	nop
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	200047f1 	.word	0x200047f1

08011c40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d105      	bne.n	8011c5c <tcp_remove_listener+0x1c>
 8011c50:	4b0d      	ldr	r3, [pc, #52]	; (8011c88 <tcp_remove_listener+0x48>)
 8011c52:	22ff      	movs	r2, #255	; 0xff
 8011c54:	490d      	ldr	r1, [pc, #52]	; (8011c8c <tcp_remove_listener+0x4c>)
 8011c56:	480e      	ldr	r0, [pc, #56]	; (8011c90 <tcp_remove_listener+0x50>)
 8011c58:	f00a f818 	bl	801bc8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	60fb      	str	r3, [r7, #12]
 8011c60:	e00a      	b.n	8011c78 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011c62:	68fb      	ldr	r3, [r7, #12]
 8011c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c66:	683a      	ldr	r2, [r7, #0]
 8011c68:	429a      	cmp	r2, r3
 8011c6a:	d102      	bne.n	8011c72 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011c6c:	68fb      	ldr	r3, [r7, #12]
 8011c6e:	2200      	movs	r2, #0
 8011c70:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	60fb      	str	r3, [r7, #12]
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d1f1      	bne.n	8011c62 <tcp_remove_listener+0x22>
    }
  }
}
 8011c7e:	bf00      	nop
 8011c80:	bf00      	nop
 8011c82:	3710      	adds	r7, #16
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	0801fbec 	.word	0x0801fbec
 8011c8c:	0801fc74 	.word	0x0801fc74
 8011c90:	0801fc30 	.word	0x0801fc30

08011c94 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	b084      	sub	sp, #16
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d106      	bne.n	8011cb0 <tcp_listen_closed+0x1c>
 8011ca2:	4b14      	ldr	r3, [pc, #80]	; (8011cf4 <tcp_listen_closed+0x60>)
 8011ca4:	f240 1211 	movw	r2, #273	; 0x111
 8011ca8:	4913      	ldr	r1, [pc, #76]	; (8011cf8 <tcp_listen_closed+0x64>)
 8011caa:	4814      	ldr	r0, [pc, #80]	; (8011cfc <tcp_listen_closed+0x68>)
 8011cac:	f009 ffee 	bl	801bc8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	7d1b      	ldrb	r3, [r3, #20]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d006      	beq.n	8011cc6 <tcp_listen_closed+0x32>
 8011cb8:	4b0e      	ldr	r3, [pc, #56]	; (8011cf4 <tcp_listen_closed+0x60>)
 8011cba:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011cbe:	4910      	ldr	r1, [pc, #64]	; (8011d00 <tcp_listen_closed+0x6c>)
 8011cc0:	480e      	ldr	r0, [pc, #56]	; (8011cfc <tcp_listen_closed+0x68>)
 8011cc2:	f009 ffe3 	bl	801bc8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011cc6:	2301      	movs	r3, #1
 8011cc8:	60fb      	str	r3, [r7, #12]
 8011cca:	e00b      	b.n	8011ce4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011ccc:	4a0d      	ldr	r2, [pc, #52]	; (8011d04 <tcp_listen_closed+0x70>)
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	6879      	ldr	r1, [r7, #4]
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7ff ffb1 	bl	8011c40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	3301      	adds	r3, #1
 8011ce2:	60fb      	str	r3, [r7, #12]
 8011ce4:	68fb      	ldr	r3, [r7, #12]
 8011ce6:	2b03      	cmp	r3, #3
 8011ce8:	d9f0      	bls.n	8011ccc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011cea:	bf00      	nop
 8011cec:	bf00      	nop
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}
 8011cf4:	0801fbec 	.word	0x0801fbec
 8011cf8:	0801fc9c 	.word	0x0801fc9c
 8011cfc:	0801fc30 	.word	0x0801fc30
 8011d00:	0801fca8 	.word	0x0801fca8
 8011d04:	08021cc0 	.word	0x08021cc0

08011d08 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011d08:	b5b0      	push	{r4, r5, r7, lr}
 8011d0a:	b088      	sub	sp, #32
 8011d0c:	af04      	add	r7, sp, #16
 8011d0e:	6078      	str	r0, [r7, #4]
 8011d10:	460b      	mov	r3, r1
 8011d12:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <tcp_close_shutdown+0x20>
 8011d1a:	4b63      	ldr	r3, [pc, #396]	; (8011ea8 <tcp_close_shutdown+0x1a0>)
 8011d1c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011d20:	4962      	ldr	r1, [pc, #392]	; (8011eac <tcp_close_shutdown+0x1a4>)
 8011d22:	4863      	ldr	r0, [pc, #396]	; (8011eb0 <tcp_close_shutdown+0x1a8>)
 8011d24:	f009 ffb2 	bl	801bc8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011d28:	78fb      	ldrb	r3, [r7, #3]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d066      	beq.n	8011dfc <tcp_close_shutdown+0xf4>
 8011d2e:	687b      	ldr	r3, [r7, #4]
 8011d30:	7d1b      	ldrb	r3, [r3, #20]
 8011d32:	2b04      	cmp	r3, #4
 8011d34:	d003      	beq.n	8011d3e <tcp_close_shutdown+0x36>
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	7d1b      	ldrb	r3, [r3, #20]
 8011d3a:	2b07      	cmp	r3, #7
 8011d3c:	d15e      	bne.n	8011dfc <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d104      	bne.n	8011d50 <tcp_close_shutdown+0x48>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d4a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011d4e:	d055      	beq.n	8011dfc <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	8b5b      	ldrh	r3, [r3, #26]
 8011d54:	f003 0310 	and.w	r3, r3, #16
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d106      	bne.n	8011d6a <tcp_close_shutdown+0x62>
 8011d5c:	4b52      	ldr	r3, [pc, #328]	; (8011ea8 <tcp_close_shutdown+0x1a0>)
 8011d5e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011d62:	4954      	ldr	r1, [pc, #336]	; (8011eb4 <tcp_close_shutdown+0x1ac>)
 8011d64:	4852      	ldr	r0, [pc, #328]	; (8011eb0 <tcp_close_shutdown+0x1a8>)
 8011d66:	f009 ff91 	bl	801bc8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011d72:	687d      	ldr	r5, [r7, #4]
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	3304      	adds	r3, #4
 8011d78:	687a      	ldr	r2, [r7, #4]
 8011d7a:	8ad2      	ldrh	r2, [r2, #22]
 8011d7c:	6879      	ldr	r1, [r7, #4]
 8011d7e:	8b09      	ldrh	r1, [r1, #24]
 8011d80:	9102      	str	r1, [sp, #8]
 8011d82:	9201      	str	r2, [sp, #4]
 8011d84:	9300      	str	r3, [sp, #0]
 8011d86:	462b      	mov	r3, r5
 8011d88:	4622      	mov	r2, r4
 8011d8a:	4601      	mov	r1, r0
 8011d8c:	6878      	ldr	r0, [r7, #4]
 8011d8e:	f005 fced 	bl	801776c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f001 face 	bl	8013334 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011d98:	4b47      	ldr	r3, [pc, #284]	; (8011eb8 <tcp_close_shutdown+0x1b0>)
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d105      	bne.n	8011dae <tcp_close_shutdown+0xa6>
 8011da2:	4b45      	ldr	r3, [pc, #276]	; (8011eb8 <tcp_close_shutdown+0x1b0>)
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	68db      	ldr	r3, [r3, #12]
 8011da8:	4a43      	ldr	r2, [pc, #268]	; (8011eb8 <tcp_close_shutdown+0x1b0>)
 8011daa:	6013      	str	r3, [r2, #0]
 8011dac:	e013      	b.n	8011dd6 <tcp_close_shutdown+0xce>
 8011dae:	4b42      	ldr	r3, [pc, #264]	; (8011eb8 <tcp_close_shutdown+0x1b0>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	60fb      	str	r3, [r7, #12]
 8011db4:	e00c      	b.n	8011dd0 <tcp_close_shutdown+0xc8>
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	68db      	ldr	r3, [r3, #12]
 8011dba:	687a      	ldr	r2, [r7, #4]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d104      	bne.n	8011dca <tcp_close_shutdown+0xc2>
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	68da      	ldr	r2, [r3, #12]
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	60da      	str	r2, [r3, #12]
 8011dc8:	e005      	b.n	8011dd6 <tcp_close_shutdown+0xce>
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	68db      	ldr	r3, [r3, #12]
 8011dce:	60fb      	str	r3, [r7, #12]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d1ef      	bne.n	8011db6 <tcp_close_shutdown+0xae>
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	2200      	movs	r2, #0
 8011dda:	60da      	str	r2, [r3, #12]
 8011ddc:	4b37      	ldr	r3, [pc, #220]	; (8011ebc <tcp_close_shutdown+0x1b4>)
 8011dde:	2201      	movs	r2, #1
 8011de0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011de2:	4b37      	ldr	r3, [pc, #220]	; (8011ec0 <tcp_close_shutdown+0x1b8>)
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	687a      	ldr	r2, [r7, #4]
 8011de8:	429a      	cmp	r2, r3
 8011dea:	d102      	bne.n	8011df2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011dec:	f003 ff62 	bl	8015cb4 <tcp_trigger_input_pcb_close>
 8011df0:	e002      	b.n	8011df8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011df2:	6878      	ldr	r0, [r7, #4]
 8011df4:	f7ff fed6 	bl	8011ba4 <tcp_free>
      }
      return ERR_OK;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	e050      	b.n	8011e9e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	7d1b      	ldrb	r3, [r3, #20]
 8011e00:	2b02      	cmp	r3, #2
 8011e02:	d03b      	beq.n	8011e7c <tcp_close_shutdown+0x174>
 8011e04:	2b02      	cmp	r3, #2
 8011e06:	dc44      	bgt.n	8011e92 <tcp_close_shutdown+0x18a>
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d002      	beq.n	8011e12 <tcp_close_shutdown+0x10a>
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d02a      	beq.n	8011e66 <tcp_close_shutdown+0x15e>
 8011e10:	e03f      	b.n	8011e92 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8adb      	ldrh	r3, [r3, #22]
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d021      	beq.n	8011e5e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011e1a:	4b2a      	ldr	r3, [pc, #168]	; (8011ec4 <tcp_close_shutdown+0x1bc>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d105      	bne.n	8011e30 <tcp_close_shutdown+0x128>
 8011e24:	4b27      	ldr	r3, [pc, #156]	; (8011ec4 <tcp_close_shutdown+0x1bc>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	68db      	ldr	r3, [r3, #12]
 8011e2a:	4a26      	ldr	r2, [pc, #152]	; (8011ec4 <tcp_close_shutdown+0x1bc>)
 8011e2c:	6013      	str	r3, [r2, #0]
 8011e2e:	e013      	b.n	8011e58 <tcp_close_shutdown+0x150>
 8011e30:	4b24      	ldr	r3, [pc, #144]	; (8011ec4 <tcp_close_shutdown+0x1bc>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	60bb      	str	r3, [r7, #8]
 8011e36:	e00c      	b.n	8011e52 <tcp_close_shutdown+0x14a>
 8011e38:	68bb      	ldr	r3, [r7, #8]
 8011e3a:	68db      	ldr	r3, [r3, #12]
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d104      	bne.n	8011e4c <tcp_close_shutdown+0x144>
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	68da      	ldr	r2, [r3, #12]
 8011e46:	68bb      	ldr	r3, [r7, #8]
 8011e48:	60da      	str	r2, [r3, #12]
 8011e4a:	e005      	b.n	8011e58 <tcp_close_shutdown+0x150>
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	60bb      	str	r3, [r7, #8]
 8011e52:	68bb      	ldr	r3, [r7, #8]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d1ef      	bne.n	8011e38 <tcp_close_shutdown+0x130>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ff fea0 	bl	8011ba4 <tcp_free>
      break;
 8011e64:	e01a      	b.n	8011e9c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7ff ff14 	bl	8011c94 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011e6c:	6879      	ldr	r1, [r7, #4]
 8011e6e:	4816      	ldr	r0, [pc, #88]	; (8011ec8 <tcp_close_shutdown+0x1c0>)
 8011e70:	f001 fab0 	bl	80133d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011e74:	6878      	ldr	r0, [r7, #4]
 8011e76:	f7ff feb1 	bl	8011bdc <tcp_free_listen>
      break;
 8011e7a:	e00f      	b.n	8011e9c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011e7c:	6879      	ldr	r1, [r7, #4]
 8011e7e:	480e      	ldr	r0, [pc, #56]	; (8011eb8 <tcp_close_shutdown+0x1b0>)
 8011e80:	f001 faa8 	bl	80133d4 <tcp_pcb_remove>
 8011e84:	4b0d      	ldr	r3, [pc, #52]	; (8011ebc <tcp_close_shutdown+0x1b4>)
 8011e86:	2201      	movs	r2, #1
 8011e88:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011e8a:	6878      	ldr	r0, [r7, #4]
 8011e8c:	f7ff fe8a 	bl	8011ba4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011e90:	e004      	b.n	8011e9c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 f81a 	bl	8011ecc <tcp_close_shutdown_fin>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	e000      	b.n	8011e9e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011e9c:	2300      	movs	r3, #0
}
 8011e9e:	4618      	mov	r0, r3
 8011ea0:	3710      	adds	r7, #16
 8011ea2:	46bd      	mov	sp, r7
 8011ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ea6:	bf00      	nop
 8011ea8:	0801fbec 	.word	0x0801fbec
 8011eac:	0801fcc0 	.word	0x0801fcc0
 8011eb0:	0801fc30 	.word	0x0801fc30
 8011eb4:	0801fce0 	.word	0x0801fce0
 8011eb8:	2000d7bc 	.word	0x2000d7bc
 8011ebc:	2000d7b8 	.word	0x2000d7b8
 8011ec0:	2000d7d0 	.word	0x2000d7d0
 8011ec4:	2000d7c8 	.word	0x2000d7c8
 8011ec8:	2000d7c4 	.word	0x2000d7c4

08011ecc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011ecc:	b580      	push	{r7, lr}
 8011ece:	b084      	sub	sp, #16
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d106      	bne.n	8011ee8 <tcp_close_shutdown_fin+0x1c>
 8011eda:	4b2e      	ldr	r3, [pc, #184]	; (8011f94 <tcp_close_shutdown_fin+0xc8>)
 8011edc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011ee0:	492d      	ldr	r1, [pc, #180]	; (8011f98 <tcp_close_shutdown_fin+0xcc>)
 8011ee2:	482e      	ldr	r0, [pc, #184]	; (8011f9c <tcp_close_shutdown_fin+0xd0>)
 8011ee4:	f009 fed2 	bl	801bc8c <iprintf>

  switch (pcb->state) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	7d1b      	ldrb	r3, [r3, #20]
 8011eec:	2b07      	cmp	r3, #7
 8011eee:	d020      	beq.n	8011f32 <tcp_close_shutdown_fin+0x66>
 8011ef0:	2b07      	cmp	r3, #7
 8011ef2:	dc2b      	bgt.n	8011f4c <tcp_close_shutdown_fin+0x80>
 8011ef4:	2b03      	cmp	r3, #3
 8011ef6:	d002      	beq.n	8011efe <tcp_close_shutdown_fin+0x32>
 8011ef8:	2b04      	cmp	r3, #4
 8011efa:	d00d      	beq.n	8011f18 <tcp_close_shutdown_fin+0x4c>
 8011efc:	e026      	b.n	8011f4c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f004 fd42 	bl	8016988 <tcp_send_fin>
 8011f04:	4603      	mov	r3, r0
 8011f06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d11f      	bne.n	8011f50 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	2205      	movs	r2, #5
 8011f14:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f16:	e01b      	b.n	8011f50 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011f18:	6878      	ldr	r0, [r7, #4]
 8011f1a:	f004 fd35 	bl	8016988 <tcp_send_fin>
 8011f1e:	4603      	mov	r3, r0
 8011f20:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d114      	bne.n	8011f54 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	2205      	movs	r2, #5
 8011f2e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f30:	e010      	b.n	8011f54 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f004 fd28 	bl	8016988 <tcp_send_fin>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d109      	bne.n	8011f58 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2209      	movs	r2, #9
 8011f48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f4a:	e005      	b.n	8011f58 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	e01c      	b.n	8011f8a <tcp_close_shutdown_fin+0xbe>
      break;
 8011f50:	bf00      	nop
 8011f52:	e002      	b.n	8011f5a <tcp_close_shutdown_fin+0x8e>
      break;
 8011f54:	bf00      	nop
 8011f56:	e000      	b.n	8011f5a <tcp_close_shutdown_fin+0x8e>
      break;
 8011f58:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d103      	bne.n	8011f6a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011f62:	6878      	ldr	r0, [r7, #4]
 8011f64:	f004 fe4e 	bl	8016c04 <tcp_output>
 8011f68:	e00d      	b.n	8011f86 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f72:	d108      	bne.n	8011f86 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	8b5b      	ldrh	r3, [r3, #26]
 8011f78:	f043 0308 	orr.w	r3, r3, #8
 8011f7c:	b29a      	uxth	r2, r3
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011f82:	2300      	movs	r3, #0
 8011f84:	e001      	b.n	8011f8a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	0801fbec 	.word	0x0801fbec
 8011f98:	0801fc9c 	.word	0x0801fc9c
 8011f9c:	0801fc30 	.word	0x0801fc30

08011fa0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d109      	bne.n	8011fc2 <tcp_close+0x22>
 8011fae:	4b0f      	ldr	r3, [pc, #60]	; (8011fec <tcp_close+0x4c>)
 8011fb0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011fb4:	490e      	ldr	r1, [pc, #56]	; (8011ff0 <tcp_close+0x50>)
 8011fb6:	480f      	ldr	r0, [pc, #60]	; (8011ff4 <tcp_close+0x54>)
 8011fb8:	f009 fe68 	bl	801bc8c <iprintf>
 8011fbc:	f06f 030f 	mvn.w	r3, #15
 8011fc0:	e00f      	b.n	8011fe2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	7d1b      	ldrb	r3, [r3, #20]
 8011fc6:	2b01      	cmp	r3, #1
 8011fc8:	d006      	beq.n	8011fd8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	8b5b      	ldrh	r3, [r3, #26]
 8011fce:	f043 0310 	orr.w	r3, r3, #16
 8011fd2:	b29a      	uxth	r2, r3
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011fd8:	2101      	movs	r1, #1
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7ff fe94 	bl	8011d08 <tcp_close_shutdown>
 8011fe0:	4603      	mov	r3, r0
}
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	3708      	adds	r7, #8
 8011fe6:	46bd      	mov	sp, r7
 8011fe8:	bd80      	pop	{r7, pc}
 8011fea:	bf00      	nop
 8011fec:	0801fbec 	.word	0x0801fbec
 8011ff0:	0801fcfc 	.word	0x0801fcfc
 8011ff4:	0801fc30 	.word	0x0801fc30

08011ff8 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	60f8      	str	r0, [r7, #12]
 8012000:	60b9      	str	r1, [r7, #8]
 8012002:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d109      	bne.n	801201e <tcp_shutdown+0x26>
 801200a:	4b26      	ldr	r3, [pc, #152]	; (80120a4 <tcp_shutdown+0xac>)
 801200c:	f240 2207 	movw	r2, #519	; 0x207
 8012010:	4925      	ldr	r1, [pc, #148]	; (80120a8 <tcp_shutdown+0xb0>)
 8012012:	4826      	ldr	r0, [pc, #152]	; (80120ac <tcp_shutdown+0xb4>)
 8012014:	f009 fe3a 	bl	801bc8c <iprintf>
 8012018:	f06f 030f 	mvn.w	r3, #15
 801201c:	e03d      	b.n	801209a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	7d1b      	ldrb	r3, [r3, #20]
 8012022:	2b01      	cmp	r3, #1
 8012024:	d102      	bne.n	801202c <tcp_shutdown+0x34>
    return ERR_CONN;
 8012026:	f06f 030a 	mvn.w	r3, #10
 801202a:	e036      	b.n	801209a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 801202c:	68bb      	ldr	r3, [r7, #8]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d01b      	beq.n	801206a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	8b5b      	ldrh	r3, [r3, #26]
 8012036:	f043 0310 	orr.w	r3, r3, #16
 801203a:	b29a      	uxth	r2, r3
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d005      	beq.n	8012052 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8012046:	2101      	movs	r1, #1
 8012048:	68f8      	ldr	r0, [r7, #12]
 801204a:	f7ff fe5d 	bl	8011d08 <tcp_close_shutdown>
 801204e:	4603      	mov	r3, r0
 8012050:	e023      	b.n	801209a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012056:	2b00      	cmp	r3, #0
 8012058:	d007      	beq.n	801206a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801205e:	4618      	mov	r0, r3
 8012060:	f7ff fae4 	bl	801162c <pbuf_free>
      pcb->refused_data = NULL;
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	2200      	movs	r2, #0
 8012068:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	2b00      	cmp	r3, #0
 801206e:	d013      	beq.n	8012098 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	7d1b      	ldrb	r3, [r3, #20]
 8012074:	2b04      	cmp	r3, #4
 8012076:	dc02      	bgt.n	801207e <tcp_shutdown+0x86>
 8012078:	2b03      	cmp	r3, #3
 801207a:	da02      	bge.n	8012082 <tcp_shutdown+0x8a>
 801207c:	e009      	b.n	8012092 <tcp_shutdown+0x9a>
 801207e:	2b07      	cmp	r3, #7
 8012080:	d107      	bne.n	8012092 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012082:	68bb      	ldr	r3, [r7, #8]
 8012084:	b2db      	uxtb	r3, r3
 8012086:	4619      	mov	r1, r3
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f7ff fe3d 	bl	8011d08 <tcp_close_shutdown>
 801208e:	4603      	mov	r3, r0
 8012090:	e003      	b.n	801209a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012092:	f06f 030a 	mvn.w	r3, #10
 8012096:	e000      	b.n	801209a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	3710      	adds	r7, #16
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd80      	pop	{r7, pc}
 80120a2:	bf00      	nop
 80120a4:	0801fbec 	.word	0x0801fbec
 80120a8:	0801fd14 	.word	0x0801fd14
 80120ac:	0801fc30 	.word	0x0801fc30

080120b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08e      	sub	sp, #56	; 0x38
 80120b4:	af04      	add	r7, sp, #16
 80120b6:	6078      	str	r0, [r7, #4]
 80120b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d107      	bne.n	80120d0 <tcp_abandon+0x20>
 80120c0:	4b52      	ldr	r3, [pc, #328]	; (801220c <tcp_abandon+0x15c>)
 80120c2:	f240 223d 	movw	r2, #573	; 0x23d
 80120c6:	4952      	ldr	r1, [pc, #328]	; (8012210 <tcp_abandon+0x160>)
 80120c8:	4852      	ldr	r0, [pc, #328]	; (8012214 <tcp_abandon+0x164>)
 80120ca:	f009 fddf 	bl	801bc8c <iprintf>
 80120ce:	e099      	b.n	8012204 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	7d1b      	ldrb	r3, [r3, #20]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d106      	bne.n	80120e6 <tcp_abandon+0x36>
 80120d8:	4b4c      	ldr	r3, [pc, #304]	; (801220c <tcp_abandon+0x15c>)
 80120da:	f44f 7210 	mov.w	r2, #576	; 0x240
 80120de:	494e      	ldr	r1, [pc, #312]	; (8012218 <tcp_abandon+0x168>)
 80120e0:	484c      	ldr	r0, [pc, #304]	; (8012214 <tcp_abandon+0x164>)
 80120e2:	f009 fdd3 	bl	801bc8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	7d1b      	ldrb	r3, [r3, #20]
 80120ea:	2b0a      	cmp	r3, #10
 80120ec:	d107      	bne.n	80120fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80120ee:	6879      	ldr	r1, [r7, #4]
 80120f0:	484a      	ldr	r0, [pc, #296]	; (801221c <tcp_abandon+0x16c>)
 80120f2:	f001 f96f 	bl	80133d4 <tcp_pcb_remove>
    tcp_free(pcb);
 80120f6:	6878      	ldr	r0, [r7, #4]
 80120f8:	f7ff fd54 	bl	8011ba4 <tcp_free>
 80120fc:	e082      	b.n	8012204 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80120fe:	2300      	movs	r3, #0
 8012100:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012102:	2300      	movs	r3, #0
 8012104:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801210a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012110:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012118:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	691b      	ldr	r3, [r3, #16]
 801211e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	7d1b      	ldrb	r3, [r3, #20]
 8012124:	2b00      	cmp	r3, #0
 8012126:	d126      	bne.n	8012176 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	8adb      	ldrh	r3, [r3, #22]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d02e      	beq.n	801218e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012130:	4b3b      	ldr	r3, [pc, #236]	; (8012220 <tcp_abandon+0x170>)
 8012132:	681b      	ldr	r3, [r3, #0]
 8012134:	687a      	ldr	r2, [r7, #4]
 8012136:	429a      	cmp	r2, r3
 8012138:	d105      	bne.n	8012146 <tcp_abandon+0x96>
 801213a:	4b39      	ldr	r3, [pc, #228]	; (8012220 <tcp_abandon+0x170>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	68db      	ldr	r3, [r3, #12]
 8012140:	4a37      	ldr	r2, [pc, #220]	; (8012220 <tcp_abandon+0x170>)
 8012142:	6013      	str	r3, [r2, #0]
 8012144:	e013      	b.n	801216e <tcp_abandon+0xbe>
 8012146:	4b36      	ldr	r3, [pc, #216]	; (8012220 <tcp_abandon+0x170>)
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	61fb      	str	r3, [r7, #28]
 801214c:	e00c      	b.n	8012168 <tcp_abandon+0xb8>
 801214e:	69fb      	ldr	r3, [r7, #28]
 8012150:	68db      	ldr	r3, [r3, #12]
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	429a      	cmp	r2, r3
 8012156:	d104      	bne.n	8012162 <tcp_abandon+0xb2>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	68da      	ldr	r2, [r3, #12]
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	60da      	str	r2, [r3, #12]
 8012160:	e005      	b.n	801216e <tcp_abandon+0xbe>
 8012162:	69fb      	ldr	r3, [r7, #28]
 8012164:	68db      	ldr	r3, [r3, #12]
 8012166:	61fb      	str	r3, [r7, #28]
 8012168:	69fb      	ldr	r3, [r7, #28]
 801216a:	2b00      	cmp	r3, #0
 801216c:	d1ef      	bne.n	801214e <tcp_abandon+0x9e>
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	2200      	movs	r2, #0
 8012172:	60da      	str	r2, [r3, #12]
 8012174:	e00b      	b.n	801218e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	8adb      	ldrh	r3, [r3, #22]
 801217e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	4828      	ldr	r0, [pc, #160]	; (8012224 <tcp_abandon+0x174>)
 8012184:	f001 f926 	bl	80133d4 <tcp_pcb_remove>
 8012188:	4b27      	ldr	r3, [pc, #156]	; (8012228 <tcp_abandon+0x178>)
 801218a:	2201      	movs	r2, #1
 801218c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012192:	2b00      	cmp	r3, #0
 8012194:	d004      	beq.n	80121a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012196:	687b      	ldr	r3, [r7, #4]
 8012198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801219a:	4618      	mov	r0, r3
 801219c:	f000 fdfa 	bl	8012d94 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d004      	beq.n	80121b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121ac:	4618      	mov	r0, r3
 80121ae:	f000 fdf1 	bl	8012d94 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d004      	beq.n	80121c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80121ba:	687b      	ldr	r3, [r7, #4]
 80121bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121be:	4618      	mov	r0, r3
 80121c0:	f000 fde8 	bl	8012d94 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d00e      	beq.n	80121e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80121ca:	6879      	ldr	r1, [r7, #4]
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	3304      	adds	r3, #4
 80121d0:	687a      	ldr	r2, [r7, #4]
 80121d2:	8b12      	ldrh	r2, [r2, #24]
 80121d4:	9202      	str	r2, [sp, #8]
 80121d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80121d8:	9201      	str	r2, [sp, #4]
 80121da:	9300      	str	r3, [sp, #0]
 80121dc:	460b      	mov	r3, r1
 80121de:	697a      	ldr	r2, [r7, #20]
 80121e0:	69b9      	ldr	r1, [r7, #24]
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f005 fac2 	bl	801776c <tcp_rst>
    }
    last_state = pcb->state;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	7d1b      	ldrb	r3, [r3, #20]
 80121ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff fcd8 	bl	8011ba4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80121f4:	693b      	ldr	r3, [r7, #16]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d004      	beq.n	8012204 <tcp_abandon+0x154>
 80121fa:	693b      	ldr	r3, [r7, #16]
 80121fc:	f06f 010c 	mvn.w	r1, #12
 8012200:	68f8      	ldr	r0, [r7, #12]
 8012202:	4798      	blx	r3
  }
}
 8012204:	3728      	adds	r7, #40	; 0x28
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	0801fbec 	.word	0x0801fbec
 8012210:	0801fd30 	.word	0x0801fd30
 8012214:	0801fc30 	.word	0x0801fc30
 8012218:	0801fd4c 	.word	0x0801fd4c
 801221c:	2000d7cc 	.word	0x2000d7cc
 8012220:	2000d7c8 	.word	0x2000d7c8
 8012224:	2000d7bc 	.word	0x2000d7bc
 8012228:	2000d7b8 	.word	0x2000d7b8

0801222c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	b082      	sub	sp, #8
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012234:	2101      	movs	r1, #1
 8012236:	6878      	ldr	r0, [r7, #4]
 8012238:	f7ff ff3a 	bl	80120b0 <tcp_abandon>
}
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b088      	sub	sp, #32
 8012248:	af00      	add	r7, sp, #0
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	4613      	mov	r3, r2
 8012250:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012252:	2304      	movs	r3, #4
 8012254:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012256:	68bb      	ldr	r3, [r7, #8]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d101      	bne.n	8012260 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801225c:	4b3e      	ldr	r3, [pc, #248]	; (8012358 <tcp_bind+0x114>)
 801225e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d109      	bne.n	801227a <tcp_bind+0x36>
 8012266:	4b3d      	ldr	r3, [pc, #244]	; (801235c <tcp_bind+0x118>)
 8012268:	f240 22a9 	movw	r2, #681	; 0x2a9
 801226c:	493c      	ldr	r1, [pc, #240]	; (8012360 <tcp_bind+0x11c>)
 801226e:	483d      	ldr	r0, [pc, #244]	; (8012364 <tcp_bind+0x120>)
 8012270:	f009 fd0c 	bl	801bc8c <iprintf>
 8012274:	f06f 030f 	mvn.w	r3, #15
 8012278:	e06a      	b.n	8012350 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801227a:	68fb      	ldr	r3, [r7, #12]
 801227c:	7d1b      	ldrb	r3, [r3, #20]
 801227e:	2b00      	cmp	r3, #0
 8012280:	d009      	beq.n	8012296 <tcp_bind+0x52>
 8012282:	4b36      	ldr	r3, [pc, #216]	; (801235c <tcp_bind+0x118>)
 8012284:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012288:	4937      	ldr	r1, [pc, #220]	; (8012368 <tcp_bind+0x124>)
 801228a:	4836      	ldr	r0, [pc, #216]	; (8012364 <tcp_bind+0x120>)
 801228c:	f009 fcfe 	bl	801bc8c <iprintf>
 8012290:	f06f 0305 	mvn.w	r3, #5
 8012294:	e05c      	b.n	8012350 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012296:	88fb      	ldrh	r3, [r7, #6]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d109      	bne.n	80122b0 <tcp_bind+0x6c>
    port = tcp_new_port();
 801229c:	f000 f914 	bl	80124c8 <tcp_new_port>
 80122a0:	4603      	mov	r3, r0
 80122a2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80122a4:	88fb      	ldrh	r3, [r7, #6]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d135      	bne.n	8012316 <tcp_bind+0xd2>
      return ERR_BUF;
 80122aa:	f06f 0301 	mvn.w	r3, #1
 80122ae:	e04f      	b.n	8012350 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80122b0:	2300      	movs	r3, #0
 80122b2:	61fb      	str	r3, [r7, #28]
 80122b4:	e02b      	b.n	801230e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80122b6:	4a2d      	ldr	r2, [pc, #180]	; (801236c <tcp_bind+0x128>)
 80122b8:	69fb      	ldr	r3, [r7, #28]
 80122ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	61bb      	str	r3, [r7, #24]
 80122c2:	e01e      	b.n	8012302 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80122c4:	69bb      	ldr	r3, [r7, #24]
 80122c6:	8adb      	ldrh	r3, [r3, #22]
 80122c8:	88fa      	ldrh	r2, [r7, #6]
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d116      	bne.n	80122fc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80122ce:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d010      	beq.n	80122f6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80122d4:	69bb      	ldr	r3, [r7, #24]
 80122d6:	681b      	ldr	r3, [r3, #0]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00c      	beq.n	80122f6 <tcp_bind+0xb2>
 80122dc:	68bb      	ldr	r3, [r7, #8]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d009      	beq.n	80122f6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d005      	beq.n	80122f6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80122ea:	69bb      	ldr	r3, [r7, #24]
 80122ec:	681a      	ldr	r2, [r3, #0]
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80122f2:	429a      	cmp	r2, r3
 80122f4:	d102      	bne.n	80122fc <tcp_bind+0xb8>
              return ERR_USE;
 80122f6:	f06f 0307 	mvn.w	r3, #7
 80122fa:	e029      	b.n	8012350 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80122fc:	69bb      	ldr	r3, [r7, #24]
 80122fe:	68db      	ldr	r3, [r3, #12]
 8012300:	61bb      	str	r3, [r7, #24]
 8012302:	69bb      	ldr	r3, [r7, #24]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d1dd      	bne.n	80122c4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012308:	69fb      	ldr	r3, [r7, #28]
 801230a:	3301      	adds	r3, #1
 801230c:	61fb      	str	r3, [r7, #28]
 801230e:	69fa      	ldr	r2, [r7, #28]
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	429a      	cmp	r2, r3
 8012314:	dbcf      	blt.n	80122b6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d00c      	beq.n	8012336 <tcp_bind+0xf2>
 801231c:	68bb      	ldr	r3, [r7, #8]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d008      	beq.n	8012336 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <tcp_bind+0xec>
 801232a:	68bb      	ldr	r3, [r7, #8]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	e000      	b.n	8012332 <tcp_bind+0xee>
 8012330:	2300      	movs	r3, #0
 8012332:	68fa      	ldr	r2, [r7, #12]
 8012334:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	88fa      	ldrh	r2, [r7, #6]
 801233a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801233c:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <tcp_bind+0x12c>)
 801233e:	681a      	ldr	r2, [r3, #0]
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	60da      	str	r2, [r3, #12]
 8012344:	4a0a      	ldr	r2, [pc, #40]	; (8012370 <tcp_bind+0x12c>)
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6013      	str	r3, [r2, #0]
 801234a:	f005 fbd1 	bl	8017af0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3720      	adds	r7, #32
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	08021ce8 	.word	0x08021ce8
 801235c:	0801fbec 	.word	0x0801fbec
 8012360:	0801fd80 	.word	0x0801fd80
 8012364:	0801fc30 	.word	0x0801fc30
 8012368:	0801fd98 	.word	0x0801fd98
 801236c:	08021cc0 	.word	0x08021cc0
 8012370:	2000d7c8 	.word	0x2000d7c8

08012374 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d106      	bne.n	8012390 <tcp_update_rcv_ann_wnd+0x1c>
 8012382:	4b25      	ldr	r3, [pc, #148]	; (8012418 <tcp_update_rcv_ann_wnd+0xa4>)
 8012384:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012388:	4924      	ldr	r1, [pc, #144]	; (801241c <tcp_update_rcv_ann_wnd+0xa8>)
 801238a:	4825      	ldr	r0, [pc, #148]	; (8012420 <tcp_update_rcv_ann_wnd+0xac>)
 801238c:	f009 fc7e 	bl	801bc8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012394:	687a      	ldr	r2, [r7, #4]
 8012396:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012398:	4413      	add	r3, r2
 801239a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123a0:	687a      	ldr	r2, [r7, #4]
 80123a2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80123a4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80123a8:	bf28      	it	cs
 80123aa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80123ae:	b292      	uxth	r2, r2
 80123b0:	4413      	add	r3, r2
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	1ad3      	subs	r3, r2, r3
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	db08      	blt.n	80123cc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c6:	68fa      	ldr	r2, [r7, #12]
 80123c8:	1ad3      	subs	r3, r2, r3
 80123ca:	e020      	b.n	801240e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123d4:	1ad3      	subs	r3, r2, r3
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	dd03      	ble.n	80123e2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	2200      	movs	r2, #0
 80123de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80123e0:	e014      	b.n	801240c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ea:	1ad3      	subs	r3, r2, r3
 80123ec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80123ee:	68bb      	ldr	r3, [r7, #8]
 80123f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123f4:	d306      	bcc.n	8012404 <tcp_update_rcv_ann_wnd+0x90>
 80123f6:	4b08      	ldr	r3, [pc, #32]	; (8012418 <tcp_update_rcv_ann_wnd+0xa4>)
 80123f8:	f240 32b6 	movw	r2, #950	; 0x3b6
 80123fc:	4909      	ldr	r1, [pc, #36]	; (8012424 <tcp_update_rcv_ann_wnd+0xb0>)
 80123fe:	4808      	ldr	r0, [pc, #32]	; (8012420 <tcp_update_rcv_ann_wnd+0xac>)
 8012400:	f009 fc44 	bl	801bc8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012404:	68bb      	ldr	r3, [r7, #8]
 8012406:	b29a      	uxth	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801240c:	2300      	movs	r3, #0
  }
}
 801240e:	4618      	mov	r0, r3
 8012410:	3710      	adds	r7, #16
 8012412:	46bd      	mov	sp, r7
 8012414:	bd80      	pop	{r7, pc}
 8012416:	bf00      	nop
 8012418:	0801fbec 	.word	0x0801fbec
 801241c:	0801fe48 	.word	0x0801fe48
 8012420:	0801fc30 	.word	0x0801fc30
 8012424:	0801fe6c 	.word	0x0801fe6c

08012428 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	460b      	mov	r3, r1
 8012432:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	2b00      	cmp	r3, #0
 8012438:	d107      	bne.n	801244a <tcp_recved+0x22>
 801243a:	4b1f      	ldr	r3, [pc, #124]	; (80124b8 <tcp_recved+0x90>)
 801243c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012440:	491e      	ldr	r1, [pc, #120]	; (80124bc <tcp_recved+0x94>)
 8012442:	481f      	ldr	r0, [pc, #124]	; (80124c0 <tcp_recved+0x98>)
 8012444:	f009 fc22 	bl	801bc8c <iprintf>
 8012448:	e032      	b.n	80124b0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7d1b      	ldrb	r3, [r3, #20]
 801244e:	2b01      	cmp	r3, #1
 8012450:	d106      	bne.n	8012460 <tcp_recved+0x38>
 8012452:	4b19      	ldr	r3, [pc, #100]	; (80124b8 <tcp_recved+0x90>)
 8012454:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012458:	491a      	ldr	r1, [pc, #104]	; (80124c4 <tcp_recved+0x9c>)
 801245a:	4819      	ldr	r0, [pc, #100]	; (80124c0 <tcp_recved+0x98>)
 801245c:	f009 fc16 	bl	801bc8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012464:	887b      	ldrh	r3, [r7, #2]
 8012466:	4413      	add	r3, r2
 8012468:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801246a:	89fb      	ldrh	r3, [r7, #14]
 801246c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012470:	d804      	bhi.n	801247c <tcp_recved+0x54>
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012476:	89fa      	ldrh	r2, [r7, #14]
 8012478:	429a      	cmp	r2, r3
 801247a:	d204      	bcs.n	8012486 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012482:	851a      	strh	r2, [r3, #40]	; 0x28
 8012484:	e002      	b.n	801248c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	89fa      	ldrh	r2, [r7, #14]
 801248a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f7ff ff71 	bl	8012374 <tcp_update_rcv_ann_wnd>
 8012492:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801249a:	d309      	bcc.n	80124b0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	8b5b      	ldrh	r3, [r3, #26]
 80124a0:	f043 0302 	orr.w	r3, r3, #2
 80124a4:	b29a      	uxth	r2, r3
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80124aa:	6878      	ldr	r0, [r7, #4]
 80124ac:	f004 fbaa 	bl	8016c04 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80124b0:	3710      	adds	r7, #16
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}
 80124b6:	bf00      	nop
 80124b8:	0801fbec 	.word	0x0801fbec
 80124bc:	0801fe88 	.word	0x0801fe88
 80124c0:	0801fc30 	.word	0x0801fc30
 80124c4:	0801fea0 	.word	0x0801fea0

080124c8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80124ce:	2300      	movs	r3, #0
 80124d0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80124d2:	4b1e      	ldr	r3, [pc, #120]	; (801254c <tcp_new_port+0x84>)
 80124d4:	881b      	ldrh	r3, [r3, #0]
 80124d6:	3301      	adds	r3, #1
 80124d8:	b29a      	uxth	r2, r3
 80124da:	4b1c      	ldr	r3, [pc, #112]	; (801254c <tcp_new_port+0x84>)
 80124dc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80124de:	4b1b      	ldr	r3, [pc, #108]	; (801254c <tcp_new_port+0x84>)
 80124e0:	881b      	ldrh	r3, [r3, #0]
 80124e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124e6:	4293      	cmp	r3, r2
 80124e8:	d103      	bne.n	80124f2 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80124ea:	4b18      	ldr	r3, [pc, #96]	; (801254c <tcp_new_port+0x84>)
 80124ec:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80124f0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80124f2:	2300      	movs	r3, #0
 80124f4:	71fb      	strb	r3, [r7, #7]
 80124f6:	e01e      	b.n	8012536 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80124f8:	79fb      	ldrb	r3, [r7, #7]
 80124fa:	4a15      	ldr	r2, [pc, #84]	; (8012550 <tcp_new_port+0x88>)
 80124fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	603b      	str	r3, [r7, #0]
 8012504:	e011      	b.n	801252a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	8ada      	ldrh	r2, [r3, #22]
 801250a:	4b10      	ldr	r3, [pc, #64]	; (801254c <tcp_new_port+0x84>)
 801250c:	881b      	ldrh	r3, [r3, #0]
 801250e:	429a      	cmp	r2, r3
 8012510:	d108      	bne.n	8012524 <tcp_new_port+0x5c>
        n++;
 8012512:	88bb      	ldrh	r3, [r7, #4]
 8012514:	3301      	adds	r3, #1
 8012516:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012518:	88bb      	ldrh	r3, [r7, #4]
 801251a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801251e:	d3d8      	bcc.n	80124d2 <tcp_new_port+0xa>
          return 0;
 8012520:	2300      	movs	r3, #0
 8012522:	e00d      	b.n	8012540 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012524:	683b      	ldr	r3, [r7, #0]
 8012526:	68db      	ldr	r3, [r3, #12]
 8012528:	603b      	str	r3, [r7, #0]
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2b00      	cmp	r3, #0
 801252e:	d1ea      	bne.n	8012506 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012530:	79fb      	ldrb	r3, [r7, #7]
 8012532:	3301      	adds	r3, #1
 8012534:	71fb      	strb	r3, [r7, #7]
 8012536:	79fb      	ldrb	r3, [r7, #7]
 8012538:	2b03      	cmp	r3, #3
 801253a:	d9dd      	bls.n	80124f8 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801253c:	4b03      	ldr	r3, [pc, #12]	; (801254c <tcp_new_port+0x84>)
 801253e:	881b      	ldrh	r3, [r3, #0]
}
 8012540:	4618      	mov	r0, r3
 8012542:	370c      	adds	r7, #12
 8012544:	46bd      	mov	sp, r7
 8012546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254a:	4770      	bx	lr
 801254c:	20000010 	.word	0x20000010
 8012550:	08021cc0 	.word	0x08021cc0

08012554 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012554:	b5b0      	push	{r4, r5, r7, lr}
 8012556:	b090      	sub	sp, #64	; 0x40
 8012558:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801255a:	2300      	movs	r3, #0
 801255c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012560:	4b94      	ldr	r3, [pc, #592]	; (80127b4 <tcp_slowtmr+0x260>)
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	3301      	adds	r3, #1
 8012566:	4a93      	ldr	r2, [pc, #588]	; (80127b4 <tcp_slowtmr+0x260>)
 8012568:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801256a:	4b93      	ldr	r3, [pc, #588]	; (80127b8 <tcp_slowtmr+0x264>)
 801256c:	781b      	ldrb	r3, [r3, #0]
 801256e:	3301      	adds	r3, #1
 8012570:	b2da      	uxtb	r2, r3
 8012572:	4b91      	ldr	r3, [pc, #580]	; (80127b8 <tcp_slowtmr+0x264>)
 8012574:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012576:	2300      	movs	r3, #0
 8012578:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801257a:	4b90      	ldr	r3, [pc, #576]	; (80127bc <tcp_slowtmr+0x268>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012580:	e29d      	b.n	8012abe <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012584:	7d1b      	ldrb	r3, [r3, #20]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d106      	bne.n	8012598 <tcp_slowtmr+0x44>
 801258a:	4b8d      	ldr	r3, [pc, #564]	; (80127c0 <tcp_slowtmr+0x26c>)
 801258c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012590:	498c      	ldr	r1, [pc, #560]	; (80127c4 <tcp_slowtmr+0x270>)
 8012592:	488d      	ldr	r0, [pc, #564]	; (80127c8 <tcp_slowtmr+0x274>)
 8012594:	f009 fb7a 	bl	801bc8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259a:	7d1b      	ldrb	r3, [r3, #20]
 801259c:	2b01      	cmp	r3, #1
 801259e:	d106      	bne.n	80125ae <tcp_slowtmr+0x5a>
 80125a0:	4b87      	ldr	r3, [pc, #540]	; (80127c0 <tcp_slowtmr+0x26c>)
 80125a2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80125a6:	4989      	ldr	r1, [pc, #548]	; (80127cc <tcp_slowtmr+0x278>)
 80125a8:	4887      	ldr	r0, [pc, #540]	; (80127c8 <tcp_slowtmr+0x274>)
 80125aa:	f009 fb6f 	bl	801bc8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80125ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b0:	7d1b      	ldrb	r3, [r3, #20]
 80125b2:	2b0a      	cmp	r3, #10
 80125b4:	d106      	bne.n	80125c4 <tcp_slowtmr+0x70>
 80125b6:	4b82      	ldr	r3, [pc, #520]	; (80127c0 <tcp_slowtmr+0x26c>)
 80125b8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80125bc:	4984      	ldr	r1, [pc, #528]	; (80127d0 <tcp_slowtmr+0x27c>)
 80125be:	4882      	ldr	r0, [pc, #520]	; (80127c8 <tcp_slowtmr+0x274>)
 80125c0:	f009 fb64 	bl	801bc8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80125c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125c6:	7f9a      	ldrb	r2, [r3, #30]
 80125c8:	4b7b      	ldr	r3, [pc, #492]	; (80127b8 <tcp_slowtmr+0x264>)
 80125ca:	781b      	ldrb	r3, [r3, #0]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	d105      	bne.n	80125dc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80125d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80125d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125d6:	68db      	ldr	r3, [r3, #12]
 80125d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80125da:	e270      	b.n	8012abe <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80125dc:	4b76      	ldr	r3, [pc, #472]	; (80127b8 <tcp_slowtmr+0x264>)
 80125de:	781a      	ldrb	r2, [r3, #0]
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80125e4:	2300      	movs	r3, #0
 80125e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80125ea:	2300      	movs	r3, #0
 80125ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80125f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f2:	7d1b      	ldrb	r3, [r3, #20]
 80125f4:	2b02      	cmp	r3, #2
 80125f6:	d10a      	bne.n	801260e <tcp_slowtmr+0xba>
 80125f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125fe:	2b05      	cmp	r3, #5
 8012600:	d905      	bls.n	801260e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012602:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012606:	3301      	adds	r3, #1
 8012608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801260c:	e11e      	b.n	801284c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012610:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012614:	2b0b      	cmp	r3, #11
 8012616:	d905      	bls.n	8012624 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801261c:	3301      	adds	r3, #1
 801261e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012622:	e113      	b.n	801284c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012626:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801262a:	2b00      	cmp	r3, #0
 801262c:	d075      	beq.n	801271a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012632:	2b00      	cmp	r3, #0
 8012634:	d006      	beq.n	8012644 <tcp_slowtmr+0xf0>
 8012636:	4b62      	ldr	r3, [pc, #392]	; (80127c0 <tcp_slowtmr+0x26c>)
 8012638:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801263c:	4965      	ldr	r1, [pc, #404]	; (80127d4 <tcp_slowtmr+0x280>)
 801263e:	4862      	ldr	r0, [pc, #392]	; (80127c8 <tcp_slowtmr+0x274>)
 8012640:	f009 fb24 	bl	801bc8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012648:	2b00      	cmp	r3, #0
 801264a:	d106      	bne.n	801265a <tcp_slowtmr+0x106>
 801264c:	4b5c      	ldr	r3, [pc, #368]	; (80127c0 <tcp_slowtmr+0x26c>)
 801264e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012652:	4961      	ldr	r1, [pc, #388]	; (80127d8 <tcp_slowtmr+0x284>)
 8012654:	485c      	ldr	r0, [pc, #368]	; (80127c8 <tcp_slowtmr+0x274>)
 8012656:	f009 fb19 	bl	801bc8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801265a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012660:	2b0b      	cmp	r3, #11
 8012662:	d905      	bls.n	8012670 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012668:	3301      	adds	r3, #1
 801266a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801266e:	e0ed      	b.n	801284c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012676:	3b01      	subs	r3, #1
 8012678:	4a58      	ldr	r2, [pc, #352]	; (80127dc <tcp_slowtmr+0x288>)
 801267a:	5cd3      	ldrb	r3, [r2, r3]
 801267c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012680:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012684:	7c7a      	ldrb	r2, [r7, #17]
 8012686:	429a      	cmp	r2, r3
 8012688:	d907      	bls.n	801269a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801268a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801268c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012690:	3301      	adds	r3, #1
 8012692:	b2da      	uxtb	r2, r3
 8012694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012696:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801269a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801269c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80126a0:	7c7a      	ldrb	r2, [r7, #17]
 80126a2:	429a      	cmp	r2, r3
 80126a4:	f200 80d2 	bhi.w	801284c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80126a8:	2301      	movs	r3, #1
 80126aa:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80126ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d108      	bne.n	80126c8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80126b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126b8:	f005 f94c 	bl	8017954 <tcp_zero_window_probe>
 80126bc:	4603      	mov	r3, r0
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d014      	beq.n	80126ec <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80126c2:	2300      	movs	r3, #0
 80126c4:	623b      	str	r3, [r7, #32]
 80126c6:	e011      	b.n	80126ec <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80126c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126ce:	4619      	mov	r1, r3
 80126d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126d2:	f004 f811 	bl	80166f8 <tcp_split_unsent_seg>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d107      	bne.n	80126ec <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80126dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126de:	f004 fa91 	bl	8016c04 <tcp_output>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d101      	bne.n	80126ec <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80126e8:	2300      	movs	r3, #0
 80126ea:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80126ec:	6a3b      	ldr	r3, [r7, #32]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f000 80ac 	beq.w	801284c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80126f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f6:	2200      	movs	r2, #0
 80126f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80126fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012702:	2b06      	cmp	r3, #6
 8012704:	f200 80a2 	bhi.w	801284c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801270e:	3301      	adds	r3, #1
 8012710:	b2da      	uxtb	r2, r3
 8012712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012714:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012718:	e098      	b.n	801284c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012720:	2b00      	cmp	r3, #0
 8012722:	db0f      	blt.n	8012744 <tcp_slowtmr+0x1f0>
 8012724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012726:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801272a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801272e:	4293      	cmp	r3, r2
 8012730:	d008      	beq.n	8012744 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012738:	b29b      	uxth	r3, r3
 801273a:	3301      	adds	r3, #1
 801273c:	b29b      	uxth	r3, r3
 801273e:	b21a      	sxth	r2, r3
 8012740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012742:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8012744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012746:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801274a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012750:	429a      	cmp	r2, r3
 8012752:	db7b      	blt.n	801284c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8012754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012756:	f004 fd47 	bl	80171e8 <tcp_rexmit_rto_prepare>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d007      	beq.n	8012770 <tcp_slowtmr+0x21c>
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012764:	2b00      	cmp	r3, #0
 8012766:	d171      	bne.n	801284c <tcp_slowtmr+0x2f8>
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801276c:	2b00      	cmp	r3, #0
 801276e:	d06d      	beq.n	801284c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012772:	7d1b      	ldrb	r3, [r3, #20]
 8012774:	2b02      	cmp	r3, #2
 8012776:	d03a      	beq.n	80127ee <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801277e:	2b0c      	cmp	r3, #12
 8012780:	bf28      	it	cs
 8012782:	230c      	movcs	r3, #12
 8012784:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012788:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801278c:	10db      	asrs	r3, r3, #3
 801278e:	b21b      	sxth	r3, r3
 8012790:	461a      	mov	r2, r3
 8012792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012794:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012798:	4413      	add	r3, r2
 801279a:	7efa      	ldrb	r2, [r7, #27]
 801279c:	4910      	ldr	r1, [pc, #64]	; (80127e0 <tcp_slowtmr+0x28c>)
 801279e:	5c8a      	ldrb	r2, [r1, r2]
 80127a0:	4093      	lsls	r3, r2
 80127a2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80127aa:	4293      	cmp	r3, r2
 80127ac:	dc1a      	bgt.n	80127e4 <tcp_slowtmr+0x290>
 80127ae:	697b      	ldr	r3, [r7, #20]
 80127b0:	b21a      	sxth	r2, r3
 80127b2:	e019      	b.n	80127e8 <tcp_slowtmr+0x294>
 80127b4:	2000d7c0 	.word	0x2000d7c0
 80127b8:	200047f2 	.word	0x200047f2
 80127bc:	2000d7bc 	.word	0x2000d7bc
 80127c0:	0801fbec 	.word	0x0801fbec
 80127c4:	0801ff30 	.word	0x0801ff30
 80127c8:	0801fc30 	.word	0x0801fc30
 80127cc:	0801ff5c 	.word	0x0801ff5c
 80127d0:	0801ff88 	.word	0x0801ff88
 80127d4:	0801ffb8 	.word	0x0801ffb8
 80127d8:	0801ffec 	.word	0x0801ffec
 80127dc:	08021cb8 	.word	0x08021cb8
 80127e0:	08021ca8 	.word	0x08021ca8
 80127e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80127ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f0:	2200      	movs	r2, #0
 80127f2:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80127f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80127fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012800:	4293      	cmp	r3, r2
 8012802:	bf28      	it	cs
 8012804:	4613      	movcs	r3, r2
 8012806:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012808:	8a7b      	ldrh	r3, [r7, #18]
 801280a:	085b      	lsrs	r3, r3, #1
 801280c:	b29a      	uxth	r2, r3
 801280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012810:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012816:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801281a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801281e:	005b      	lsls	r3, r3, #1
 8012820:	b29b      	uxth	r3, r3
 8012822:	429a      	cmp	r2, r3
 8012824:	d206      	bcs.n	8012834 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801282a:	005b      	lsls	r3, r3, #1
 801282c:	b29a      	uxth	r2, r3
 801282e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012830:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801283e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012840:	2200      	movs	r2, #0
 8012842:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8012846:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012848:	f004 fd3e 	bl	80172c8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284e:	7d1b      	ldrb	r3, [r3, #20]
 8012850:	2b06      	cmp	r3, #6
 8012852:	d111      	bne.n	8012878 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012856:	8b5b      	ldrh	r3, [r3, #26]
 8012858:	f003 0310 	and.w	r3, r3, #16
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00b      	beq.n	8012878 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012860:	4b9c      	ldr	r3, [pc, #624]	; (8012ad4 <tcp_slowtmr+0x580>)
 8012862:	681a      	ldr	r2, [r3, #0]
 8012864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012866:	6a1b      	ldr	r3, [r3, #32]
 8012868:	1ad3      	subs	r3, r2, r3
 801286a:	2b28      	cmp	r3, #40	; 0x28
 801286c:	d904      	bls.n	8012878 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801286e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012872:	3301      	adds	r3, #1
 8012874:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287a:	7a5b      	ldrb	r3, [r3, #9]
 801287c:	f003 0308 	and.w	r3, r3, #8
 8012880:	2b00      	cmp	r3, #0
 8012882:	d04a      	beq.n	801291a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012886:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012888:	2b04      	cmp	r3, #4
 801288a:	d003      	beq.n	8012894 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801288c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801288e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012890:	2b07      	cmp	r3, #7
 8012892:	d142      	bne.n	801291a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012894:	4b8f      	ldr	r3, [pc, #572]	; (8012ad4 <tcp_slowtmr+0x580>)
 8012896:	681a      	ldr	r2, [r3, #0]
 8012898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289a:	6a1b      	ldr	r3, [r3, #32]
 801289c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801289e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80128a4:	4b8c      	ldr	r3, [pc, #560]	; (8012ad8 <tcp_slowtmr+0x584>)
 80128a6:	440b      	add	r3, r1
 80128a8:	498c      	ldr	r1, [pc, #560]	; (8012adc <tcp_slowtmr+0x588>)
 80128aa:	fba1 1303 	umull	r1, r3, r1, r3
 80128ae:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128b0:	429a      	cmp	r2, r3
 80128b2:	d90a      	bls.n	80128ca <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80128b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128b8:	3301      	adds	r3, #1
 80128ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80128be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128c2:	3301      	adds	r3, #1
 80128c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80128c8:	e027      	b.n	801291a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128ca:	4b82      	ldr	r3, [pc, #520]	; (8012ad4 <tcp_slowtmr+0x580>)
 80128cc:	681a      	ldr	r2, [r3, #0]
 80128ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d0:	6a1b      	ldr	r3, [r3, #32]
 80128d2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80128da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128dc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80128e0:	4618      	mov	r0, r3
 80128e2:	4b7f      	ldr	r3, [pc, #508]	; (8012ae0 <tcp_slowtmr+0x58c>)
 80128e4:	fb03 f300 	mul.w	r3, r3, r0
 80128e8:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80128ea:	497c      	ldr	r1, [pc, #496]	; (8012adc <tcp_slowtmr+0x588>)
 80128ec:	fba1 1303 	umull	r1, r3, r1, r3
 80128f0:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128f2:	429a      	cmp	r2, r3
 80128f4:	d911      	bls.n	801291a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80128f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128f8:	f004 ffec 	bl	80178d4 <tcp_keepalive>
 80128fc:	4603      	mov	r3, r0
 80128fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012902:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012906:	2b00      	cmp	r3, #0
 8012908:	d107      	bne.n	801291a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801290a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012910:	3301      	adds	r3, #1
 8012912:	b2da      	uxtb	r2, r3
 8012914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012916:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801291e:	2b00      	cmp	r3, #0
 8012920:	d011      	beq.n	8012946 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8012922:	4b6c      	ldr	r3, [pc, #432]	; (8012ad4 <tcp_slowtmr+0x580>)
 8012924:	681a      	ldr	r2, [r3, #0]
 8012926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012928:	6a1b      	ldr	r3, [r3, #32]
 801292a:	1ad2      	subs	r2, r2, r3
 801292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801292e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012932:	4619      	mov	r1, r3
 8012934:	460b      	mov	r3, r1
 8012936:	005b      	lsls	r3, r3, #1
 8012938:	440b      	add	r3, r1
 801293a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801293c:	429a      	cmp	r2, r3
 801293e:	d302      	bcc.n	8012946 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012940:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012942:	f000 feab 	bl	801369c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012948:	7d1b      	ldrb	r3, [r3, #20]
 801294a:	2b03      	cmp	r3, #3
 801294c:	d10b      	bne.n	8012966 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801294e:	4b61      	ldr	r3, [pc, #388]	; (8012ad4 <tcp_slowtmr+0x580>)
 8012950:	681a      	ldr	r2, [r3, #0]
 8012952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012954:	6a1b      	ldr	r3, [r3, #32]
 8012956:	1ad3      	subs	r3, r2, r3
 8012958:	2b28      	cmp	r3, #40	; 0x28
 801295a:	d904      	bls.n	8012966 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801295c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012960:	3301      	adds	r3, #1
 8012962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012968:	7d1b      	ldrb	r3, [r3, #20]
 801296a:	2b09      	cmp	r3, #9
 801296c:	d10b      	bne.n	8012986 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801296e:	4b59      	ldr	r3, [pc, #356]	; (8012ad4 <tcp_slowtmr+0x580>)
 8012970:	681a      	ldr	r2, [r3, #0]
 8012972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012974:	6a1b      	ldr	r3, [r3, #32]
 8012976:	1ad3      	subs	r3, r2, r3
 8012978:	2bf0      	cmp	r3, #240	; 0xf0
 801297a:	d904      	bls.n	8012986 <tcp_slowtmr+0x432>
        ++pcb_remove;
 801297c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012980:	3301      	adds	r3, #1
 8012982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012986:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801298a:	2b00      	cmp	r3, #0
 801298c:	d060      	beq.n	8012a50 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801298e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012994:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012998:	f000 fccc 	bl	8013334 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801299c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d010      	beq.n	80129c4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80129a2:	4b50      	ldr	r3, [pc, #320]	; (8012ae4 <tcp_slowtmr+0x590>)
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d106      	bne.n	80129ba <tcp_slowtmr+0x466>
 80129ac:	4b4e      	ldr	r3, [pc, #312]	; (8012ae8 <tcp_slowtmr+0x594>)
 80129ae:	f240 526d 	movw	r2, #1389	; 0x56d
 80129b2:	494e      	ldr	r1, [pc, #312]	; (8012aec <tcp_slowtmr+0x598>)
 80129b4:	484e      	ldr	r0, [pc, #312]	; (8012af0 <tcp_slowtmr+0x59c>)
 80129b6:	f009 f969 	bl	801bc8c <iprintf>
        prev->next = pcb->next;
 80129ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129bc:	68da      	ldr	r2, [r3, #12]
 80129be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c0:	60da      	str	r2, [r3, #12]
 80129c2:	e00f      	b.n	80129e4 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80129c4:	4b47      	ldr	r3, [pc, #284]	; (8012ae4 <tcp_slowtmr+0x590>)
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d006      	beq.n	80129dc <tcp_slowtmr+0x488>
 80129ce:	4b46      	ldr	r3, [pc, #280]	; (8012ae8 <tcp_slowtmr+0x594>)
 80129d0:	f240 5271 	movw	r2, #1393	; 0x571
 80129d4:	4947      	ldr	r1, [pc, #284]	; (8012af4 <tcp_slowtmr+0x5a0>)
 80129d6:	4846      	ldr	r0, [pc, #280]	; (8012af0 <tcp_slowtmr+0x59c>)
 80129d8:	f009 f958 	bl	801bc8c <iprintf>
        tcp_active_pcbs = pcb->next;
 80129dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129de:	68db      	ldr	r3, [r3, #12]
 80129e0:	4a40      	ldr	r2, [pc, #256]	; (8012ae4 <tcp_slowtmr+0x590>)
 80129e2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80129e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d013      	beq.n	8012a14 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80129ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ee:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80129f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f2:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80129f4:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80129f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f8:	3304      	adds	r3, #4
 80129fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129fc:	8ad2      	ldrh	r2, [r2, #22]
 80129fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a00:	8b09      	ldrh	r1, [r1, #24]
 8012a02:	9102      	str	r1, [sp, #8]
 8012a04:	9201      	str	r2, [sp, #4]
 8012a06:	9300      	str	r3, [sp, #0]
 8012a08:	462b      	mov	r3, r5
 8012a0a:	4622      	mov	r2, r4
 8012a0c:	4601      	mov	r1, r0
 8012a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a10:	f004 feac 	bl	801776c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a16:	691b      	ldr	r3, [r3, #16]
 8012a18:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a1c:	7d1b      	ldrb	r3, [r3, #20]
 8012a1e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a22:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a26:	68db      	ldr	r3, [r3, #12]
 8012a28:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012a2a:	6838      	ldr	r0, [r7, #0]
 8012a2c:	f7ff f8ba 	bl	8011ba4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012a30:	4b31      	ldr	r3, [pc, #196]	; (8012af8 <tcp_slowtmr+0x5a4>)
 8012a32:	2200      	movs	r2, #0
 8012a34:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d004      	beq.n	8012a46 <tcp_slowtmr+0x4f2>
 8012a3c:	68fb      	ldr	r3, [r7, #12]
 8012a3e:	f06f 010c 	mvn.w	r1, #12
 8012a42:	68b8      	ldr	r0, [r7, #8]
 8012a44:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012a46:	4b2c      	ldr	r3, [pc, #176]	; (8012af8 <tcp_slowtmr+0x5a4>)
 8012a48:	781b      	ldrb	r3, [r3, #0]
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d037      	beq.n	8012abe <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012a4e:	e592      	b.n	8012576 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a52:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	7f1b      	ldrb	r3, [r3, #28]
 8012a5e:	3301      	adds	r3, #1
 8012a60:	b2da      	uxtb	r2, r3
 8012a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a64:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	7f1a      	ldrb	r2, [r3, #28]
 8012a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a6c:	7f5b      	ldrb	r3, [r3, #29]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d325      	bcc.n	8012abe <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a74:	2200      	movs	r2, #0
 8012a76:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012a78:	4b1f      	ldr	r3, [pc, #124]	; (8012af8 <tcp_slowtmr+0x5a4>)
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d00b      	beq.n	8012aa0 <tcp_slowtmr+0x54c>
 8012a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a90:	6912      	ldr	r2, [r2, #16]
 8012a92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a94:	4610      	mov	r0, r2
 8012a96:	4798      	blx	r3
 8012a98:	4603      	mov	r3, r0
 8012a9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012a9e:	e002      	b.n	8012aa6 <tcp_slowtmr+0x552>
 8012aa0:	2300      	movs	r3, #0
 8012aa2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012aa6:	4b14      	ldr	r3, [pc, #80]	; (8012af8 <tcp_slowtmr+0x5a4>)
 8012aa8:	781b      	ldrb	r3, [r3, #0]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d000      	beq.n	8012ab0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012aae:	e562      	b.n	8012576 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012ab0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d102      	bne.n	8012abe <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aba:	f004 f8a3 	bl	8016c04 <tcp_output>
  while (pcb != NULL) {
 8012abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f47f ad5e 	bne.w	8012582 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012aca:	4b0c      	ldr	r3, [pc, #48]	; (8012afc <tcp_slowtmr+0x5a8>)
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012ad0:	e069      	b.n	8012ba6 <tcp_slowtmr+0x652>
 8012ad2:	bf00      	nop
 8012ad4:	2000d7c0 	.word	0x2000d7c0
 8012ad8:	000a4cb8 	.word	0x000a4cb8
 8012adc:	10624dd3 	.word	0x10624dd3
 8012ae0:	000124f8 	.word	0x000124f8
 8012ae4:	2000d7bc 	.word	0x2000d7bc
 8012ae8:	0801fbec 	.word	0x0801fbec
 8012aec:	08020024 	.word	0x08020024
 8012af0:	0801fc30 	.word	0x0801fc30
 8012af4:	08020050 	.word	0x08020050
 8012af8:	2000d7b8 	.word	0x2000d7b8
 8012afc:	2000d7cc 	.word	0x2000d7cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b02:	7d1b      	ldrb	r3, [r3, #20]
 8012b04:	2b0a      	cmp	r3, #10
 8012b06:	d006      	beq.n	8012b16 <tcp_slowtmr+0x5c2>
 8012b08:	4b2b      	ldr	r3, [pc, #172]	; (8012bb8 <tcp_slowtmr+0x664>)
 8012b0a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012b0e:	492b      	ldr	r1, [pc, #172]	; (8012bbc <tcp_slowtmr+0x668>)
 8012b10:	482b      	ldr	r0, [pc, #172]	; (8012bc0 <tcp_slowtmr+0x66c>)
 8012b12:	f009 f8bb 	bl	801bc8c <iprintf>
    pcb_remove = 0;
 8012b16:	2300      	movs	r3, #0
 8012b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b1c:	4b29      	ldr	r3, [pc, #164]	; (8012bc4 <tcp_slowtmr+0x670>)
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b22:	6a1b      	ldr	r3, [r3, #32]
 8012b24:	1ad3      	subs	r3, r2, r3
 8012b26:	2bf0      	cmp	r3, #240	; 0xf0
 8012b28:	d904      	bls.n	8012b34 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b2e:	3301      	adds	r3, #1
 8012b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d02f      	beq.n	8012b9c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012b3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b3e:	f000 fbf9 	bl	8013334 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d010      	beq.n	8012b6a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012b48:	4b1f      	ldr	r3, [pc, #124]	; (8012bc8 <tcp_slowtmr+0x674>)
 8012b4a:	681b      	ldr	r3, [r3, #0]
 8012b4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d106      	bne.n	8012b60 <tcp_slowtmr+0x60c>
 8012b52:	4b19      	ldr	r3, [pc, #100]	; (8012bb8 <tcp_slowtmr+0x664>)
 8012b54:	f240 52af 	movw	r2, #1455	; 0x5af
 8012b58:	491c      	ldr	r1, [pc, #112]	; (8012bcc <tcp_slowtmr+0x678>)
 8012b5a:	4819      	ldr	r0, [pc, #100]	; (8012bc0 <tcp_slowtmr+0x66c>)
 8012b5c:	f009 f896 	bl	801bc8c <iprintf>
        prev->next = pcb->next;
 8012b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b62:	68da      	ldr	r2, [r3, #12]
 8012b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b66:	60da      	str	r2, [r3, #12]
 8012b68:	e00f      	b.n	8012b8a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012b6a:	4b17      	ldr	r3, [pc, #92]	; (8012bc8 <tcp_slowtmr+0x674>)
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d006      	beq.n	8012b82 <tcp_slowtmr+0x62e>
 8012b74:	4b10      	ldr	r3, [pc, #64]	; (8012bb8 <tcp_slowtmr+0x664>)
 8012b76:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012b7a:	4915      	ldr	r1, [pc, #84]	; (8012bd0 <tcp_slowtmr+0x67c>)
 8012b7c:	4810      	ldr	r0, [pc, #64]	; (8012bc0 <tcp_slowtmr+0x66c>)
 8012b7e:	f009 f885 	bl	801bc8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b84:	68db      	ldr	r3, [r3, #12]
 8012b86:	4a10      	ldr	r2, [pc, #64]	; (8012bc8 <tcp_slowtmr+0x674>)
 8012b88:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012b94:	69f8      	ldr	r0, [r7, #28]
 8012b96:	f7ff f805 	bl	8011ba4 <tcp_free>
 8012b9a:	e004      	b.n	8012ba6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d1a9      	bne.n	8012b00 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012bac:	bf00      	nop
 8012bae:	bf00      	nop
 8012bb0:	3730      	adds	r7, #48	; 0x30
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8012bb6:	bf00      	nop
 8012bb8:	0801fbec 	.word	0x0801fbec
 8012bbc:	0802007c 	.word	0x0802007c
 8012bc0:	0801fc30 	.word	0x0801fc30
 8012bc4:	2000d7c0 	.word	0x2000d7c0
 8012bc8:	2000d7cc 	.word	0x2000d7cc
 8012bcc:	080200ac 	.word	0x080200ac
 8012bd0:	080200d4 	.word	0x080200d4

08012bd4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b082      	sub	sp, #8
 8012bd8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012bda:	4b2d      	ldr	r3, [pc, #180]	; (8012c90 <tcp_fasttmr+0xbc>)
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	3301      	adds	r3, #1
 8012be0:	b2da      	uxtb	r2, r3
 8012be2:	4b2b      	ldr	r3, [pc, #172]	; (8012c90 <tcp_fasttmr+0xbc>)
 8012be4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012be6:	4b2b      	ldr	r3, [pc, #172]	; (8012c94 <tcp_fasttmr+0xc0>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012bec:	e048      	b.n	8012c80 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	7f9a      	ldrb	r2, [r3, #30]
 8012bf2:	4b27      	ldr	r3, [pc, #156]	; (8012c90 <tcp_fasttmr+0xbc>)
 8012bf4:	781b      	ldrb	r3, [r3, #0]
 8012bf6:	429a      	cmp	r2, r3
 8012bf8:	d03f      	beq.n	8012c7a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012bfa:	4b25      	ldr	r3, [pc, #148]	; (8012c90 <tcp_fasttmr+0xbc>)
 8012bfc:	781a      	ldrb	r2, [r3, #0]
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	8b5b      	ldrh	r3, [r3, #26]
 8012c06:	f003 0301 	and.w	r3, r3, #1
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d010      	beq.n	8012c30 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	8b5b      	ldrh	r3, [r3, #26]
 8012c12:	f043 0302 	orr.w	r3, r3, #2
 8012c16:	b29a      	uxth	r2, r3
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f003 fff1 	bl	8016c04 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	8b5b      	ldrh	r3, [r3, #26]
 8012c26:	f023 0303 	bic.w	r3, r3, #3
 8012c2a:	b29a      	uxth	r2, r3
 8012c2c:	687b      	ldr	r3, [r7, #4]
 8012c2e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	8b5b      	ldrh	r3, [r3, #26]
 8012c34:	f003 0308 	and.w	r3, r3, #8
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d009      	beq.n	8012c50 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	8b5b      	ldrh	r3, [r3, #26]
 8012c40:	f023 0308 	bic.w	r3, r3, #8
 8012c44:	b29a      	uxth	r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012c4a:	6878      	ldr	r0, [r7, #4]
 8012c4c:	f7ff f93e 	bl	8011ecc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d00a      	beq.n	8012c74 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012c5e:	4b0e      	ldr	r3, [pc, #56]	; (8012c98 <tcp_fasttmr+0xc4>)
 8012c60:	2200      	movs	r2, #0
 8012c62:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f000 f819 	bl	8012c9c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012c6a:	4b0b      	ldr	r3, [pc, #44]	; (8012c98 <tcp_fasttmr+0xc4>)
 8012c6c:	781b      	ldrb	r3, [r3, #0]
 8012c6e:	2b00      	cmp	r3, #0
 8012c70:	d000      	beq.n	8012c74 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012c72:	e7b8      	b.n	8012be6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012c74:	683b      	ldr	r3, [r7, #0]
 8012c76:	607b      	str	r3, [r7, #4]
 8012c78:	e002      	b.n	8012c80 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d1b3      	bne.n	8012bee <tcp_fasttmr+0x1a>
    }
  }
}
 8012c86:	bf00      	nop
 8012c88:	bf00      	nop
 8012c8a:	3708      	adds	r7, #8
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	200047f2 	.word	0x200047f2
 8012c94:	2000d7bc 	.word	0x2000d7bc
 8012c98:	2000d7b8 	.word	0x2000d7b8

08012c9c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c9c:	b590      	push	{r4, r7, lr}
 8012c9e:	b085      	sub	sp, #20
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d109      	bne.n	8012cbe <tcp_process_refused_data+0x22>
 8012caa:	4b37      	ldr	r3, [pc, #220]	; (8012d88 <tcp_process_refused_data+0xec>)
 8012cac:	f240 6209 	movw	r2, #1545	; 0x609
 8012cb0:	4936      	ldr	r1, [pc, #216]	; (8012d8c <tcp_process_refused_data+0xf0>)
 8012cb2:	4837      	ldr	r0, [pc, #220]	; (8012d90 <tcp_process_refused_data+0xf4>)
 8012cb4:	f008 ffea 	bl	801bc8c <iprintf>
 8012cb8:	f06f 030f 	mvn.w	r3, #15
 8012cbc:	e060      	b.n	8012d80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cc2:	7b5b      	ldrb	r3, [r3, #13]
 8012cc4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cca:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	2200      	movs	r2, #0
 8012cd0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d00b      	beq.n	8012cf4 <tcp_process_refused_data+0x58>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ce2:	687b      	ldr	r3, [r7, #4]
 8012ce4:	6918      	ldr	r0, [r3, #16]
 8012ce6:	2300      	movs	r3, #0
 8012ce8:	68ba      	ldr	r2, [r7, #8]
 8012cea:	6879      	ldr	r1, [r7, #4]
 8012cec:	47a0      	blx	r4
 8012cee:	4603      	mov	r3, r0
 8012cf0:	73fb      	strb	r3, [r7, #15]
 8012cf2:	e007      	b.n	8012d04 <tcp_process_refused_data+0x68>
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	68ba      	ldr	r2, [r7, #8]
 8012cf8:	6879      	ldr	r1, [r7, #4]
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	f000 f8a4 	bl	8012e48 <tcp_recv_null>
 8012d00:	4603      	mov	r3, r0
 8012d02:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012d04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d12a      	bne.n	8012d62 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012d0c:	7bbb      	ldrb	r3, [r7, #14]
 8012d0e:	f003 0320 	and.w	r3, r3, #32
 8012d12:	2b00      	cmp	r3, #0
 8012d14:	d033      	beq.n	8012d7e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d1a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012d1e:	d005      	beq.n	8012d2c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d24:	3301      	adds	r3, #1
 8012d26:	b29a      	uxth	r2, r3
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d00b      	beq.n	8012d4e <tcp_process_refused_data+0xb2>
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	6918      	ldr	r0, [r3, #16]
 8012d40:	2300      	movs	r3, #0
 8012d42:	2200      	movs	r2, #0
 8012d44:	6879      	ldr	r1, [r7, #4]
 8012d46:	47a0      	blx	r4
 8012d48:	4603      	mov	r3, r0
 8012d4a:	73fb      	strb	r3, [r7, #15]
 8012d4c:	e001      	b.n	8012d52 <tcp_process_refused_data+0xb6>
 8012d4e:	2300      	movs	r3, #0
 8012d50:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d56:	f113 0f0d 	cmn.w	r3, #13
 8012d5a:	d110      	bne.n	8012d7e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012d5c:	f06f 030c 	mvn.w	r3, #12
 8012d60:	e00e      	b.n	8012d80 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d66:	f113 0f0d 	cmn.w	r3, #13
 8012d6a:	d102      	bne.n	8012d72 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012d6c:	f06f 030c 	mvn.w	r3, #12
 8012d70:	e006      	b.n	8012d80 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	68ba      	ldr	r2, [r7, #8]
 8012d76:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012d78:	f06f 0304 	mvn.w	r3, #4
 8012d7c:	e000      	b.n	8012d80 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012d7e:	2300      	movs	r3, #0
}
 8012d80:	4618      	mov	r0, r3
 8012d82:	3714      	adds	r7, #20
 8012d84:	46bd      	mov	sp, r7
 8012d86:	bd90      	pop	{r4, r7, pc}
 8012d88:	0801fbec 	.word	0x0801fbec
 8012d8c:	080200fc 	.word	0x080200fc
 8012d90:	0801fc30 	.word	0x0801fc30

08012d94 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b084      	sub	sp, #16
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d9c:	e007      	b.n	8012dae <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012da4:	6878      	ldr	r0, [r7, #4]
 8012da6:	f000 f80a 	bl	8012dbe <tcp_seg_free>
    seg = next;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d1f4      	bne.n	8012d9e <tcp_segs_free+0xa>
  }
}
 8012db4:	bf00      	nop
 8012db6:	bf00      	nop
 8012db8:	3710      	adds	r7, #16
 8012dba:	46bd      	mov	sp, r7
 8012dbc:	bd80      	pop	{r7, pc}

08012dbe <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012dbe:	b580      	push	{r7, lr}
 8012dc0:	b082      	sub	sp, #8
 8012dc2:	af00      	add	r7, sp, #0
 8012dc4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00c      	beq.n	8012de6 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d004      	beq.n	8012dde <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	f7fe fc27 	bl	801162c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012dde:	6879      	ldr	r1, [r7, #4]
 8012de0:	2003      	movs	r0, #3
 8012de2:	f7fd fd4d 	bl	8010880 <memp_free>
  }
}
 8012de6:	bf00      	nop
 8012de8:	3708      	adds	r7, #8
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
	...

08012df0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b084      	sub	sp, #16
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d106      	bne.n	8012e0c <tcp_seg_copy+0x1c>
 8012dfe:	4b0f      	ldr	r3, [pc, #60]	; (8012e3c <tcp_seg_copy+0x4c>)
 8012e00:	f240 6282 	movw	r2, #1666	; 0x682
 8012e04:	490e      	ldr	r1, [pc, #56]	; (8012e40 <tcp_seg_copy+0x50>)
 8012e06:	480f      	ldr	r0, [pc, #60]	; (8012e44 <tcp_seg_copy+0x54>)
 8012e08:	f008 ff40 	bl	801bc8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e0c:	2003      	movs	r0, #3
 8012e0e:	f7fd fce5 	bl	80107dc <memp_malloc>
 8012e12:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d101      	bne.n	8012e1e <tcp_seg_copy+0x2e>
    return NULL;
 8012e1a:	2300      	movs	r3, #0
 8012e1c:	e00a      	b.n	8012e34 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012e1e:	2210      	movs	r2, #16
 8012e20:	6879      	ldr	r1, [r7, #4]
 8012e22:	68f8      	ldr	r0, [r7, #12]
 8012e24:	f008 fada 	bl	801b3dc <memcpy>
  pbuf_ref(cseg->p);
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	685b      	ldr	r3, [r3, #4]
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	f7fe fca3 	bl	8011778 <pbuf_ref>
  return cseg;
 8012e32:	68fb      	ldr	r3, [r7, #12]
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3710      	adds	r7, #16
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	0801fbec 	.word	0x0801fbec
 8012e40:	08020140 	.word	0x08020140
 8012e44:	0801fc30 	.word	0x0801fc30

08012e48 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b084      	sub	sp, #16
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	60f8      	str	r0, [r7, #12]
 8012e50:	60b9      	str	r1, [r7, #8]
 8012e52:	607a      	str	r2, [r7, #4]
 8012e54:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e56:	68bb      	ldr	r3, [r7, #8]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d109      	bne.n	8012e70 <tcp_recv_null+0x28>
 8012e5c:	4b12      	ldr	r3, [pc, #72]	; (8012ea8 <tcp_recv_null+0x60>)
 8012e5e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e62:	4912      	ldr	r1, [pc, #72]	; (8012eac <tcp_recv_null+0x64>)
 8012e64:	4812      	ldr	r0, [pc, #72]	; (8012eb0 <tcp_recv_null+0x68>)
 8012e66:	f008 ff11 	bl	801bc8c <iprintf>
 8012e6a:	f06f 030f 	mvn.w	r3, #15
 8012e6e:	e016      	b.n	8012e9e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d009      	beq.n	8012e8a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	891b      	ldrh	r3, [r3, #8]
 8012e7a:	4619      	mov	r1, r3
 8012e7c:	68b8      	ldr	r0, [r7, #8]
 8012e7e:	f7ff fad3 	bl	8012428 <tcp_recved>
    pbuf_free(p);
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f7fe fbd2 	bl	801162c <pbuf_free>
 8012e88:	e008      	b.n	8012e9c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012e8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d104      	bne.n	8012e9c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012e92:	68b8      	ldr	r0, [r7, #8]
 8012e94:	f7ff f884 	bl	8011fa0 <tcp_close>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	e000      	b.n	8012e9e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3710      	adds	r7, #16
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	0801fbec 	.word	0x0801fbec
 8012eac:	0802015c 	.word	0x0802015c
 8012eb0:	0801fc30 	.word	0x0801fc30

08012eb4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	db01      	blt.n	8012eca <tcp_kill_prio+0x16>
 8012ec6:	79fb      	ldrb	r3, [r7, #7]
 8012ec8:	e000      	b.n	8012ecc <tcp_kill_prio+0x18>
 8012eca:	237f      	movs	r3, #127	; 0x7f
 8012ecc:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012ece:	7afb      	ldrb	r3, [r7, #11]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d034      	beq.n	8012f3e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012ed4:	7afb      	ldrb	r3, [r7, #11]
 8012ed6:	3b01      	subs	r3, #1
 8012ed8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ee2:	4b19      	ldr	r3, [pc, #100]	; (8012f48 <tcp_kill_prio+0x94>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	617b      	str	r3, [r7, #20]
 8012ee8:	e01f      	b.n	8012f2a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012eea:	697b      	ldr	r3, [r7, #20]
 8012eec:	7d5b      	ldrb	r3, [r3, #21]
 8012eee:	7afa      	ldrb	r2, [r7, #11]
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d80c      	bhi.n	8012f0e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012ef4:	697b      	ldr	r3, [r7, #20]
 8012ef6:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012ef8:	7afa      	ldrb	r2, [r7, #11]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d112      	bne.n	8012f24 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012efe:	4b13      	ldr	r3, [pc, #76]	; (8012f4c <tcp_kill_prio+0x98>)
 8012f00:	681a      	ldr	r2, [r3, #0]
 8012f02:	697b      	ldr	r3, [r7, #20]
 8012f04:	6a1b      	ldr	r3, [r3, #32]
 8012f06:	1ad3      	subs	r3, r2, r3
 8012f08:	68fa      	ldr	r2, [r7, #12]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d80a      	bhi.n	8012f24 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f0e:	4b0f      	ldr	r3, [pc, #60]	; (8012f4c <tcp_kill_prio+0x98>)
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	6a1b      	ldr	r3, [r3, #32]
 8012f16:	1ad3      	subs	r3, r2, r3
 8012f18:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f1a:	697b      	ldr	r3, [r7, #20]
 8012f1c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	7d5b      	ldrb	r3, [r3, #21]
 8012f22:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f24:	697b      	ldr	r3, [r7, #20]
 8012f26:	68db      	ldr	r3, [r3, #12]
 8012f28:	617b      	str	r3, [r7, #20]
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d1dc      	bne.n	8012eea <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012f30:	693b      	ldr	r3, [r7, #16]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d004      	beq.n	8012f40 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f36:	6938      	ldr	r0, [r7, #16]
 8012f38:	f7ff f978 	bl	801222c <tcp_abort>
 8012f3c:	e000      	b.n	8012f40 <tcp_kill_prio+0x8c>
    return;
 8012f3e:	bf00      	nop
  }
}
 8012f40:	3718      	adds	r7, #24
 8012f42:	46bd      	mov	sp, r7
 8012f44:	bd80      	pop	{r7, pc}
 8012f46:	bf00      	nop
 8012f48:	2000d7bc 	.word	0x2000d7bc
 8012f4c:	2000d7c0 	.word	0x2000d7c0

08012f50 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	4603      	mov	r3, r0
 8012f58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012f5a:	79fb      	ldrb	r3, [r7, #7]
 8012f5c:	2b08      	cmp	r3, #8
 8012f5e:	d009      	beq.n	8012f74 <tcp_kill_state+0x24>
 8012f60:	79fb      	ldrb	r3, [r7, #7]
 8012f62:	2b09      	cmp	r3, #9
 8012f64:	d006      	beq.n	8012f74 <tcp_kill_state+0x24>
 8012f66:	4b1a      	ldr	r3, [pc, #104]	; (8012fd0 <tcp_kill_state+0x80>)
 8012f68:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012f6c:	4919      	ldr	r1, [pc, #100]	; (8012fd4 <tcp_kill_state+0x84>)
 8012f6e:	481a      	ldr	r0, [pc, #104]	; (8012fd8 <tcp_kill_state+0x88>)
 8012f70:	f008 fe8c 	bl	801bc8c <iprintf>

  inactivity = 0;
 8012f74:	2300      	movs	r3, #0
 8012f76:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f7c:	4b17      	ldr	r3, [pc, #92]	; (8012fdc <tcp_kill_state+0x8c>)
 8012f7e:	681b      	ldr	r3, [r3, #0]
 8012f80:	617b      	str	r3, [r7, #20]
 8012f82:	e017      	b.n	8012fb4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012f84:	697b      	ldr	r3, [r7, #20]
 8012f86:	7d1b      	ldrb	r3, [r3, #20]
 8012f88:	79fa      	ldrb	r2, [r7, #7]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d10f      	bne.n	8012fae <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f8e:	4b14      	ldr	r3, [pc, #80]	; (8012fe0 <tcp_kill_state+0x90>)
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	6a1b      	ldr	r3, [r3, #32]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	68fa      	ldr	r2, [r7, #12]
 8012f9a:	429a      	cmp	r2, r3
 8012f9c:	d807      	bhi.n	8012fae <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012f9e:	4b10      	ldr	r3, [pc, #64]	; (8012fe0 <tcp_kill_state+0x90>)
 8012fa0:	681a      	ldr	r2, [r3, #0]
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	6a1b      	ldr	r3, [r3, #32]
 8012fa6:	1ad3      	subs	r3, r2, r3
 8012fa8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	68db      	ldr	r3, [r3, #12]
 8012fb2:	617b      	str	r3, [r7, #20]
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d1e4      	bne.n	8012f84 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d003      	beq.n	8012fc8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012fc0:	2100      	movs	r1, #0
 8012fc2:	6938      	ldr	r0, [r7, #16]
 8012fc4:	f7ff f874 	bl	80120b0 <tcp_abandon>
  }
}
 8012fc8:	bf00      	nop
 8012fca:	3718      	adds	r7, #24
 8012fcc:	46bd      	mov	sp, r7
 8012fce:	bd80      	pop	{r7, pc}
 8012fd0:	0801fbec 	.word	0x0801fbec
 8012fd4:	08020178 	.word	0x08020178
 8012fd8:	0801fc30 	.word	0x0801fc30
 8012fdc:	2000d7bc 	.word	0x2000d7bc
 8012fe0:	2000d7c0 	.word	0x2000d7c0

08012fe4 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012fea:	2300      	movs	r3, #0
 8012fec:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012fee:	2300      	movs	r3, #0
 8012ff0:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ff2:	4b12      	ldr	r3, [pc, #72]	; (801303c <tcp_kill_timewait+0x58>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	60fb      	str	r3, [r7, #12]
 8012ff8:	e012      	b.n	8013020 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012ffa:	4b11      	ldr	r3, [pc, #68]	; (8013040 <tcp_kill_timewait+0x5c>)
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	6a1b      	ldr	r3, [r3, #32]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	687a      	ldr	r2, [r7, #4]
 8013006:	429a      	cmp	r2, r3
 8013008:	d807      	bhi.n	801301a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801300a:	4b0d      	ldr	r3, [pc, #52]	; (8013040 <tcp_kill_timewait+0x5c>)
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	6a1b      	ldr	r3, [r3, #32]
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013016:	68fb      	ldr	r3, [r7, #12]
 8013018:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801301a:	68fb      	ldr	r3, [r7, #12]
 801301c:	68db      	ldr	r3, [r3, #12]
 801301e:	60fb      	str	r3, [r7, #12]
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d1e9      	bne.n	8012ffa <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013026:	68bb      	ldr	r3, [r7, #8]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d002      	beq.n	8013032 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801302c:	68b8      	ldr	r0, [r7, #8]
 801302e:	f7ff f8fd 	bl	801222c <tcp_abort>
  }
}
 8013032:	bf00      	nop
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}
 801303a:	bf00      	nop
 801303c:	2000d7cc 	.word	0x2000d7cc
 8013040:	2000d7c0 	.word	0x2000d7c0

08013044 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b082      	sub	sp, #8
 8013048:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801304a:	4b10      	ldr	r3, [pc, #64]	; (801308c <tcp_handle_closepend+0x48>)
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013050:	e014      	b.n	801307c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	8b5b      	ldrh	r3, [r3, #26]
 801305c:	f003 0308 	and.w	r3, r3, #8
 8013060:	2b00      	cmp	r3, #0
 8013062:	d009      	beq.n	8013078 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	8b5b      	ldrh	r3, [r3, #26]
 8013068:	f023 0308 	bic.w	r3, r3, #8
 801306c:	b29a      	uxth	r2, r3
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7fe ff2a 	bl	8011ecc <tcp_close_shutdown_fin>
    }
    pcb = next;
 8013078:	683b      	ldr	r3, [r7, #0]
 801307a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	2b00      	cmp	r3, #0
 8013080:	d1e7      	bne.n	8013052 <tcp_handle_closepend+0xe>
  }
}
 8013082:	bf00      	nop
 8013084:	bf00      	nop
 8013086:	3708      	adds	r7, #8
 8013088:	46bd      	mov	sp, r7
 801308a:	bd80      	pop	{r7, pc}
 801308c:	2000d7bc 	.word	0x2000d7bc

08013090 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b084      	sub	sp, #16
 8013094:	af00      	add	r7, sp, #0
 8013096:	4603      	mov	r3, r0
 8013098:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801309a:	2001      	movs	r0, #1
 801309c:	f7fd fb9e 	bl	80107dc <memp_malloc>
 80130a0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d126      	bne.n	80130f6 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80130a8:	f7ff ffcc 	bl	8013044 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80130ac:	f7ff ff9a 	bl	8012fe4 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130b0:	2001      	movs	r0, #1
 80130b2:	f7fd fb93 	bl	80107dc <memp_malloc>
 80130b6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2b00      	cmp	r3, #0
 80130bc:	d11b      	bne.n	80130f6 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80130be:	2009      	movs	r0, #9
 80130c0:	f7ff ff46 	bl	8012f50 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130c4:	2001      	movs	r0, #1
 80130c6:	f7fd fb89 	bl	80107dc <memp_malloc>
 80130ca:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d111      	bne.n	80130f6 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80130d2:	2008      	movs	r0, #8
 80130d4:	f7ff ff3c 	bl	8012f50 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130d8:	2001      	movs	r0, #1
 80130da:	f7fd fb7f 	bl	80107dc <memp_malloc>
 80130de:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d107      	bne.n	80130f6 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80130e6:	79fb      	ldrb	r3, [r7, #7]
 80130e8:	4618      	mov	r0, r3
 80130ea:	f7ff fee3 	bl	8012eb4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130ee:	2001      	movs	r0, #1
 80130f0:	f7fd fb74 	bl	80107dc <memp_malloc>
 80130f4:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d03f      	beq.n	801317c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80130fc:	229c      	movs	r2, #156	; 0x9c
 80130fe:	2100      	movs	r1, #0
 8013100:	68f8      	ldr	r0, [r7, #12]
 8013102:	f008 f979 	bl	801b3f8 <memset>
    pcb->prio = prio;
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	79fa      	ldrb	r2, [r7, #7]
 801310a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013112:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801311c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	22ff      	movs	r2, #255	; 0xff
 801312a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013132:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	2206      	movs	r2, #6
 8013138:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2206      	movs	r2, #6
 8013140:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013148:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	2201      	movs	r2, #1
 801314e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013152:	4b0d      	ldr	r3, [pc, #52]	; (8013188 <tcp_alloc+0xf8>)
 8013154:	681a      	ldr	r2, [r3, #0]
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801315a:	4b0c      	ldr	r3, [pc, #48]	; (801318c <tcp_alloc+0xfc>)
 801315c:	781a      	ldrb	r2, [r3, #0]
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013162:	68fb      	ldr	r3, [r7, #12]
 8013164:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013168:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	4a08      	ldr	r2, [pc, #32]	; (8013190 <tcp_alloc+0x100>)
 8013170:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	4a07      	ldr	r2, [pc, #28]	; (8013194 <tcp_alloc+0x104>)
 8013178:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801317c:	68fb      	ldr	r3, [r7, #12]
}
 801317e:	4618      	mov	r0, r3
 8013180:	3710      	adds	r7, #16
 8013182:	46bd      	mov	sp, r7
 8013184:	bd80      	pop	{r7, pc}
 8013186:	bf00      	nop
 8013188:	2000d7c0 	.word	0x2000d7c0
 801318c:	200047f2 	.word	0x200047f2
 8013190:	08012e49 	.word	0x08012e49
 8013194:	006ddd00 	.word	0x006ddd00

08013198 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
 801319e:	4603      	mov	r3, r0
 80131a0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 80131a2:	2040      	movs	r0, #64	; 0x40
 80131a4:	f7ff ff74 	bl	8013090 <tcp_alloc>
 80131a8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80131aa:	68fb      	ldr	r3, [r7, #12]
}
 80131ac:	4618      	mov	r0, r3
 80131ae:	3710      	adds	r7, #16
 80131b0:	46bd      	mov	sp, r7
 80131b2:	bd80      	pop	{r7, pc}

080131b4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80131b4:	b480      	push	{r7}
 80131b6:	b083      	sub	sp, #12
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d002      	beq.n	80131ca <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	683a      	ldr	r2, [r7, #0]
 80131c8:	611a      	str	r2, [r3, #16]
  }
}
 80131ca:	bf00      	nop
 80131cc:	370c      	adds	r7, #12
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr
	...

080131d8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80131d8:	b580      	push	{r7, lr}
 80131da:	b082      	sub	sp, #8
 80131dc:	af00      	add	r7, sp, #0
 80131de:	6078      	str	r0, [r7, #4]
 80131e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d00e      	beq.n	8013206 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	7d1b      	ldrb	r3, [r3, #20]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d106      	bne.n	80131fe <tcp_recv+0x26>
 80131f0:	4b07      	ldr	r3, [pc, #28]	; (8013210 <tcp_recv+0x38>)
 80131f2:	f240 72df 	movw	r2, #2015	; 0x7df
 80131f6:	4907      	ldr	r1, [pc, #28]	; (8013214 <tcp_recv+0x3c>)
 80131f8:	4807      	ldr	r0, [pc, #28]	; (8013218 <tcp_recv+0x40>)
 80131fa:	f008 fd47 	bl	801bc8c <iprintf>
    pcb->recv = recv;
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	683a      	ldr	r2, [r7, #0]
 8013202:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013206:	bf00      	nop
 8013208:	3708      	adds	r7, #8
 801320a:	46bd      	mov	sp, r7
 801320c:	bd80      	pop	{r7, pc}
 801320e:	bf00      	nop
 8013210:	0801fbec 	.word	0x0801fbec
 8013214:	08020188 	.word	0x08020188
 8013218:	0801fc30 	.word	0x0801fc30

0801321c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b082      	sub	sp, #8
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
 8013224:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d00e      	beq.n	801324a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	7d1b      	ldrb	r3, [r3, #20]
 8013230:	2b01      	cmp	r3, #1
 8013232:	d106      	bne.n	8013242 <tcp_sent+0x26>
 8013234:	4b07      	ldr	r3, [pc, #28]	; (8013254 <tcp_sent+0x38>)
 8013236:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801323a:	4907      	ldr	r1, [pc, #28]	; (8013258 <tcp_sent+0x3c>)
 801323c:	4807      	ldr	r0, [pc, #28]	; (801325c <tcp_sent+0x40>)
 801323e:	f008 fd25 	bl	801bc8c <iprintf>
    pcb->sent = sent;
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	683a      	ldr	r2, [r7, #0]
 8013246:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801324a:	bf00      	nop
 801324c:	3708      	adds	r7, #8
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}
 8013252:	bf00      	nop
 8013254:	0801fbec 	.word	0x0801fbec
 8013258:	080201b0 	.word	0x080201b0
 801325c:	0801fc30 	.word	0x0801fc30

08013260 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013260:	b580      	push	{r7, lr}
 8013262:	b082      	sub	sp, #8
 8013264:	af00      	add	r7, sp, #0
 8013266:	6078      	str	r0, [r7, #4]
 8013268:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d00e      	beq.n	801328e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	7d1b      	ldrb	r3, [r3, #20]
 8013274:	2b01      	cmp	r3, #1
 8013276:	d106      	bne.n	8013286 <tcp_err+0x26>
 8013278:	4b07      	ldr	r3, [pc, #28]	; (8013298 <tcp_err+0x38>)
 801327a:	f640 020d 	movw	r2, #2061	; 0x80d
 801327e:	4907      	ldr	r1, [pc, #28]	; (801329c <tcp_err+0x3c>)
 8013280:	4807      	ldr	r0, [pc, #28]	; (80132a0 <tcp_err+0x40>)
 8013282:	f008 fd03 	bl	801bc8c <iprintf>
    pcb->errf = err;
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801328e:	bf00      	nop
 8013290:	3708      	adds	r7, #8
 8013292:	46bd      	mov	sp, r7
 8013294:	bd80      	pop	{r7, pc}
 8013296:	bf00      	nop
 8013298:	0801fbec 	.word	0x0801fbec
 801329c:	080201d8 	.word	0x080201d8
 80132a0:	0801fc30 	.word	0x0801fc30

080132a4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b085      	sub	sp, #20
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
 80132ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d008      	beq.n	80132c6 <tcp_accept+0x22>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	7d1b      	ldrb	r3, [r3, #20]
 80132b8:	2b01      	cmp	r3, #1
 80132ba:	d104      	bne.n	80132c6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	683a      	ldr	r2, [r7, #0]
 80132c4:	619a      	str	r2, [r3, #24]
  }
}
 80132c6:	bf00      	nop
 80132c8:	3714      	adds	r7, #20
 80132ca:	46bd      	mov	sp, r7
 80132cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d0:	4770      	bx	lr
	...

080132d4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b084      	sub	sp, #16
 80132d8:	af00      	add	r7, sp, #0
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	4613      	mov	r3, r2
 80132e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d107      	bne.n	80132f8 <tcp_poll+0x24>
 80132e8:	4b0e      	ldr	r3, [pc, #56]	; (8013324 <tcp_poll+0x50>)
 80132ea:	f640 023d 	movw	r2, #2109	; 0x83d
 80132ee:	490e      	ldr	r1, [pc, #56]	; (8013328 <tcp_poll+0x54>)
 80132f0:	480e      	ldr	r0, [pc, #56]	; (801332c <tcp_poll+0x58>)
 80132f2:	f008 fccb 	bl	801bc8c <iprintf>
 80132f6:	e011      	b.n	801331c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	7d1b      	ldrb	r3, [r3, #20]
 80132fc:	2b01      	cmp	r3, #1
 80132fe:	d106      	bne.n	801330e <tcp_poll+0x3a>
 8013300:	4b08      	ldr	r3, [pc, #32]	; (8013324 <tcp_poll+0x50>)
 8013302:	f640 023e 	movw	r2, #2110	; 0x83e
 8013306:	490a      	ldr	r1, [pc, #40]	; (8013330 <tcp_poll+0x5c>)
 8013308:	4808      	ldr	r0, [pc, #32]	; (801332c <tcp_poll+0x58>)
 801330a:	f008 fcbf 	bl	801bc8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	68ba      	ldr	r2, [r7, #8]
 8013312:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	79fa      	ldrb	r2, [r7, #7]
 801331a:	775a      	strb	r2, [r3, #29]
}
 801331c:	3710      	adds	r7, #16
 801331e:	46bd      	mov	sp, r7
 8013320:	bd80      	pop	{r7, pc}
 8013322:	bf00      	nop
 8013324:	0801fbec 	.word	0x0801fbec
 8013328:	08020200 	.word	0x08020200
 801332c:	0801fc30 	.word	0x0801fc30
 8013330:	08020218 	.word	0x08020218

08013334 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013334:	b580      	push	{r7, lr}
 8013336:	b082      	sub	sp, #8
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2b00      	cmp	r3, #0
 8013340:	d107      	bne.n	8013352 <tcp_pcb_purge+0x1e>
 8013342:	4b21      	ldr	r3, [pc, #132]	; (80133c8 <tcp_pcb_purge+0x94>)
 8013344:	f640 0251 	movw	r2, #2129	; 0x851
 8013348:	4920      	ldr	r1, [pc, #128]	; (80133cc <tcp_pcb_purge+0x98>)
 801334a:	4821      	ldr	r0, [pc, #132]	; (80133d0 <tcp_pcb_purge+0x9c>)
 801334c:	f008 fc9e 	bl	801bc8c <iprintf>
 8013350:	e037      	b.n	80133c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	7d1b      	ldrb	r3, [r3, #20]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d033      	beq.n	80133c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801335e:	2b0a      	cmp	r3, #10
 8013360:	d02f      	beq.n	80133c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013366:	2b01      	cmp	r3, #1
 8013368:	d02b      	beq.n	80133c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801336e:	2b00      	cmp	r3, #0
 8013370:	d007      	beq.n	8013382 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013376:	4618      	mov	r0, r3
 8013378:	f7fe f958 	bl	801162c <pbuf_free>
      pcb->refused_data = NULL;
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	2200      	movs	r2, #0
 8013380:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013386:	2b00      	cmp	r3, #0
 8013388:	d002      	beq.n	8013390 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f000 f986 	bl	801369c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013396:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801339c:	4618      	mov	r0, r3
 801339e:	f7ff fcf9 	bl	8012d94 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7ff fcf4 	bl	8012d94 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2200      	movs	r2, #0
 80133b0:	66da      	str	r2, [r3, #108]	; 0x6c
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	2200      	movs	r2, #0
 80133be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80133c2:	3708      	adds	r7, #8
 80133c4:	46bd      	mov	sp, r7
 80133c6:	bd80      	pop	{r7, pc}
 80133c8:	0801fbec 	.word	0x0801fbec
 80133cc:	08020238 	.word	0x08020238
 80133d0:	0801fc30 	.word	0x0801fc30

080133d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b084      	sub	sp, #16
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
 80133dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d106      	bne.n	80133f2 <tcp_pcb_remove+0x1e>
 80133e4:	4b3e      	ldr	r3, [pc, #248]	; (80134e0 <tcp_pcb_remove+0x10c>)
 80133e6:	f640 0283 	movw	r2, #2179	; 0x883
 80133ea:	493e      	ldr	r1, [pc, #248]	; (80134e4 <tcp_pcb_remove+0x110>)
 80133ec:	483e      	ldr	r0, [pc, #248]	; (80134e8 <tcp_pcb_remove+0x114>)
 80133ee:	f008 fc4d 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d106      	bne.n	8013406 <tcp_pcb_remove+0x32>
 80133f8:	4b39      	ldr	r3, [pc, #228]	; (80134e0 <tcp_pcb_remove+0x10c>)
 80133fa:	f640 0284 	movw	r2, #2180	; 0x884
 80133fe:	493b      	ldr	r1, [pc, #236]	; (80134ec <tcp_pcb_remove+0x118>)
 8013400:	4839      	ldr	r0, [pc, #228]	; (80134e8 <tcp_pcb_remove+0x114>)
 8013402:	f008 fc43 	bl	801bc8c <iprintf>

  TCP_RMV(pcblist, pcb);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	681b      	ldr	r3, [r3, #0]
 801340a:	683a      	ldr	r2, [r7, #0]
 801340c:	429a      	cmp	r2, r3
 801340e:	d105      	bne.n	801341c <tcp_pcb_remove+0x48>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	68da      	ldr	r2, [r3, #12]
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	601a      	str	r2, [r3, #0]
 801341a:	e013      	b.n	8013444 <tcp_pcb_remove+0x70>
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	60fb      	str	r3, [r7, #12]
 8013422:	e00c      	b.n	801343e <tcp_pcb_remove+0x6a>
 8013424:	68fb      	ldr	r3, [r7, #12]
 8013426:	68db      	ldr	r3, [r3, #12]
 8013428:	683a      	ldr	r2, [r7, #0]
 801342a:	429a      	cmp	r2, r3
 801342c:	d104      	bne.n	8013438 <tcp_pcb_remove+0x64>
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	68da      	ldr	r2, [r3, #12]
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	60da      	str	r2, [r3, #12]
 8013436:	e005      	b.n	8013444 <tcp_pcb_remove+0x70>
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	68db      	ldr	r3, [r3, #12]
 801343c:	60fb      	str	r3, [r7, #12]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	2b00      	cmp	r3, #0
 8013442:	d1ef      	bne.n	8013424 <tcp_pcb_remove+0x50>
 8013444:	683b      	ldr	r3, [r7, #0]
 8013446:	2200      	movs	r2, #0
 8013448:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801344a:	6838      	ldr	r0, [r7, #0]
 801344c:	f7ff ff72 	bl	8013334 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	7d1b      	ldrb	r3, [r3, #20]
 8013454:	2b0a      	cmp	r3, #10
 8013456:	d013      	beq.n	8013480 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013458:	683b      	ldr	r3, [r7, #0]
 801345a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801345c:	2b01      	cmp	r3, #1
 801345e:	d00f      	beq.n	8013480 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	8b5b      	ldrh	r3, [r3, #26]
 8013464:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013468:	2b00      	cmp	r3, #0
 801346a:	d009      	beq.n	8013480 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801346c:	683b      	ldr	r3, [r7, #0]
 801346e:	8b5b      	ldrh	r3, [r3, #26]
 8013470:	f043 0302 	orr.w	r3, r3, #2
 8013474:	b29a      	uxth	r2, r3
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801347a:	6838      	ldr	r0, [r7, #0]
 801347c:	f003 fbc2 	bl	8016c04 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	7d1b      	ldrb	r3, [r3, #20]
 8013484:	2b01      	cmp	r3, #1
 8013486:	d020      	beq.n	80134ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801348c:	2b00      	cmp	r3, #0
 801348e:	d006      	beq.n	801349e <tcp_pcb_remove+0xca>
 8013490:	4b13      	ldr	r3, [pc, #76]	; (80134e0 <tcp_pcb_remove+0x10c>)
 8013492:	f640 0293 	movw	r2, #2195	; 0x893
 8013496:	4916      	ldr	r1, [pc, #88]	; (80134f0 <tcp_pcb_remove+0x11c>)
 8013498:	4813      	ldr	r0, [pc, #76]	; (80134e8 <tcp_pcb_remove+0x114>)
 801349a:	f008 fbf7 	bl	801bc8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d006      	beq.n	80134b4 <tcp_pcb_remove+0xe0>
 80134a6:	4b0e      	ldr	r3, [pc, #56]	; (80134e0 <tcp_pcb_remove+0x10c>)
 80134a8:	f640 0294 	movw	r2, #2196	; 0x894
 80134ac:	4911      	ldr	r1, [pc, #68]	; (80134f4 <tcp_pcb_remove+0x120>)
 80134ae:	480e      	ldr	r0, [pc, #56]	; (80134e8 <tcp_pcb_remove+0x114>)
 80134b0:	f008 fbec 	bl	801bc8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d006      	beq.n	80134ca <tcp_pcb_remove+0xf6>
 80134bc:	4b08      	ldr	r3, [pc, #32]	; (80134e0 <tcp_pcb_remove+0x10c>)
 80134be:	f640 0296 	movw	r2, #2198	; 0x896
 80134c2:	490d      	ldr	r1, [pc, #52]	; (80134f8 <tcp_pcb_remove+0x124>)
 80134c4:	4808      	ldr	r0, [pc, #32]	; (80134e8 <tcp_pcb_remove+0x114>)
 80134c6:	f008 fbe1 	bl	801bc8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80134ca:	683b      	ldr	r3, [r7, #0]
 80134cc:	2200      	movs	r2, #0
 80134ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	2200      	movs	r2, #0
 80134d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80134d6:	bf00      	nop
 80134d8:	3710      	adds	r7, #16
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	0801fbec 	.word	0x0801fbec
 80134e4:	08020254 	.word	0x08020254
 80134e8:	0801fc30 	.word	0x0801fc30
 80134ec:	08020270 	.word	0x08020270
 80134f0:	08020290 	.word	0x08020290
 80134f4:	080202a8 	.word	0x080202a8
 80134f8:	080202c4 	.word	0x080202c4

080134fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
 8013502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d106      	bne.n	8013518 <tcp_next_iss+0x1c>
 801350a:	4b0a      	ldr	r3, [pc, #40]	; (8013534 <tcp_next_iss+0x38>)
 801350c:	f640 02af 	movw	r2, #2223	; 0x8af
 8013510:	4909      	ldr	r1, [pc, #36]	; (8013538 <tcp_next_iss+0x3c>)
 8013512:	480a      	ldr	r0, [pc, #40]	; (801353c <tcp_next_iss+0x40>)
 8013514:	f008 fbba 	bl	801bc8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013518:	4b09      	ldr	r3, [pc, #36]	; (8013540 <tcp_next_iss+0x44>)
 801351a:	681a      	ldr	r2, [r3, #0]
 801351c:	4b09      	ldr	r3, [pc, #36]	; (8013544 <tcp_next_iss+0x48>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	4413      	add	r3, r2
 8013522:	4a07      	ldr	r2, [pc, #28]	; (8013540 <tcp_next_iss+0x44>)
 8013524:	6013      	str	r3, [r2, #0]
  return iss;
 8013526:	4b06      	ldr	r3, [pc, #24]	; (8013540 <tcp_next_iss+0x44>)
 8013528:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801352a:	4618      	mov	r0, r3
 801352c:	3708      	adds	r7, #8
 801352e:	46bd      	mov	sp, r7
 8013530:	bd80      	pop	{r7, pc}
 8013532:	bf00      	nop
 8013534:	0801fbec 	.word	0x0801fbec
 8013538:	080202dc 	.word	0x080202dc
 801353c:	0801fc30 	.word	0x0801fc30
 8013540:	20000014 	.word	0x20000014
 8013544:	2000d7c0 	.word	0x2000d7c0

08013548 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013548:	b580      	push	{r7, lr}
 801354a:	b086      	sub	sp, #24
 801354c:	af00      	add	r7, sp, #0
 801354e:	4603      	mov	r3, r0
 8013550:	60b9      	str	r1, [r7, #8]
 8013552:	607a      	str	r2, [r7, #4]
 8013554:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d106      	bne.n	801356a <tcp_eff_send_mss_netif+0x22>
 801355c:	4b14      	ldr	r3, [pc, #80]	; (80135b0 <tcp_eff_send_mss_netif+0x68>)
 801355e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013562:	4914      	ldr	r1, [pc, #80]	; (80135b4 <tcp_eff_send_mss_netif+0x6c>)
 8013564:	4814      	ldr	r0, [pc, #80]	; (80135b8 <tcp_eff_send_mss_netif+0x70>)
 8013566:	f008 fb91 	bl	801bc8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801356a:	68bb      	ldr	r3, [r7, #8]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d101      	bne.n	8013574 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013570:	89fb      	ldrh	r3, [r7, #14]
 8013572:	e019      	b.n	80135a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013578:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801357a:	8afb      	ldrh	r3, [r7, #22]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d012      	beq.n	80135a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013580:	2328      	movs	r3, #40	; 0x28
 8013582:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013584:	8afa      	ldrh	r2, [r7, #22]
 8013586:	8abb      	ldrh	r3, [r7, #20]
 8013588:	429a      	cmp	r2, r3
 801358a:	d904      	bls.n	8013596 <tcp_eff_send_mss_netif+0x4e>
 801358c:	8afa      	ldrh	r2, [r7, #22]
 801358e:	8abb      	ldrh	r3, [r7, #20]
 8013590:	1ad3      	subs	r3, r2, r3
 8013592:	b29b      	uxth	r3, r3
 8013594:	e000      	b.n	8013598 <tcp_eff_send_mss_netif+0x50>
 8013596:	2300      	movs	r3, #0
 8013598:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801359a:	8a7a      	ldrh	r2, [r7, #18]
 801359c:	89fb      	ldrh	r3, [r7, #14]
 801359e:	4293      	cmp	r3, r2
 80135a0:	bf28      	it	cs
 80135a2:	4613      	movcs	r3, r2
 80135a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80135a6:	89fb      	ldrh	r3, [r7, #14]
}
 80135a8:	4618      	mov	r0, r3
 80135aa:	3718      	adds	r7, #24
 80135ac:	46bd      	mov	sp, r7
 80135ae:	bd80      	pop	{r7, pc}
 80135b0:	0801fbec 	.word	0x0801fbec
 80135b4:	080202f8 	.word	0x080202f8
 80135b8:	0801fc30 	.word	0x0801fc30

080135bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b084      	sub	sp, #16
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
 80135c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80135c6:	683b      	ldr	r3, [r7, #0]
 80135c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d119      	bne.n	8013604 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80135d0:	4b10      	ldr	r3, [pc, #64]	; (8013614 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80135d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80135d6:	4910      	ldr	r1, [pc, #64]	; (8013618 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80135d8:	4810      	ldr	r0, [pc, #64]	; (801361c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80135da:	f008 fb57 	bl	801bc8c <iprintf>

  while (pcb != NULL) {
 80135de:	e011      	b.n	8013604 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	681a      	ldr	r2, [r3, #0]
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	d108      	bne.n	80135fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80135f2:	68f8      	ldr	r0, [r7, #12]
 80135f4:	f7fe fe1a 	bl	801222c <tcp_abort>
      pcb = next;
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	60fb      	str	r3, [r7, #12]
 80135fc:	e002      	b.n	8013604 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	68db      	ldr	r3, [r3, #12]
 8013602:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d1ea      	bne.n	80135e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801360a:	bf00      	nop
 801360c:	bf00      	nop
 801360e:	3710      	adds	r7, #16
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}
 8013614:	0801fbec 	.word	0x0801fbec
 8013618:	08020320 	.word	0x08020320
 801361c:	0801fc30 	.word	0x0801fc30

08013620 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d02a      	beq.n	8013686 <tcp_netif_ip_addr_changed+0x66>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d026      	beq.n	8013686 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013638:	4b15      	ldr	r3, [pc, #84]	; (8013690 <tcp_netif_ip_addr_changed+0x70>)
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	4619      	mov	r1, r3
 801363e:	6878      	ldr	r0, [r7, #4]
 8013640:	f7ff ffbc 	bl	80135bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013644:	4b13      	ldr	r3, [pc, #76]	; (8013694 <tcp_netif_ip_addr_changed+0x74>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4619      	mov	r1, r3
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7ff ffb6 	bl	80135bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013650:	683b      	ldr	r3, [r7, #0]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d017      	beq.n	8013686 <tcp_netif_ip_addr_changed+0x66>
 8013656:	683b      	ldr	r3, [r7, #0]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2b00      	cmp	r3, #0
 801365c:	d013      	beq.n	8013686 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801365e:	4b0e      	ldr	r3, [pc, #56]	; (8013698 <tcp_netif_ip_addr_changed+0x78>)
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	60fb      	str	r3, [r7, #12]
 8013664:	e00c      	b.n	8013680 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	429a      	cmp	r2, r3
 8013670:	d103      	bne.n	801367a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013672:	683b      	ldr	r3, [r7, #0]
 8013674:	681a      	ldr	r2, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	68db      	ldr	r3, [r3, #12]
 801367e:	60fb      	str	r3, [r7, #12]
 8013680:	68fb      	ldr	r3, [r7, #12]
 8013682:	2b00      	cmp	r3, #0
 8013684:	d1ef      	bne.n	8013666 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013686:	bf00      	nop
 8013688:	3710      	adds	r7, #16
 801368a:	46bd      	mov	sp, r7
 801368c:	bd80      	pop	{r7, pc}
 801368e:	bf00      	nop
 8013690:	2000d7bc 	.word	0x2000d7bc
 8013694:	2000d7c8 	.word	0x2000d7c8
 8013698:	2000d7c4 	.word	0x2000d7c4

0801369c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b082      	sub	sp, #8
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d007      	beq.n	80136bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff fb6f 	bl	8012d94 <tcp_segs_free>
    pcb->ooseq = NULL;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	2200      	movs	r2, #0
 80136ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80136bc:	bf00      	nop
 80136be:	3708      	adds	r7, #8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}

080136c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80136c4:	b590      	push	{r4, r7, lr}
 80136c6:	b08d      	sub	sp, #52	; 0x34
 80136c8:	af04      	add	r7, sp, #16
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d105      	bne.n	80136e0 <tcp_input+0x1c>
 80136d4:	4b9b      	ldr	r3, [pc, #620]	; (8013944 <tcp_input+0x280>)
 80136d6:	2283      	movs	r2, #131	; 0x83
 80136d8:	499b      	ldr	r1, [pc, #620]	; (8013948 <tcp_input+0x284>)
 80136da:	489c      	ldr	r0, [pc, #624]	; (801394c <tcp_input+0x288>)
 80136dc:	f008 fad6 	bl	801bc8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	685b      	ldr	r3, [r3, #4]
 80136e4:	4a9a      	ldr	r2, [pc, #616]	; (8013950 <tcp_input+0x28c>)
 80136e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80136e8:	687b      	ldr	r3, [r7, #4]
 80136ea:	895b      	ldrh	r3, [r3, #10]
 80136ec:	2b13      	cmp	r3, #19
 80136ee:	f240 83c4 	bls.w	8013e7a <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136f2:	4b98      	ldr	r3, [pc, #608]	; (8013954 <tcp_input+0x290>)
 80136f4:	695b      	ldr	r3, [r3, #20]
 80136f6:	4a97      	ldr	r2, [pc, #604]	; (8013954 <tcp_input+0x290>)
 80136f8:	6812      	ldr	r2, [r2, #0]
 80136fa:	4611      	mov	r1, r2
 80136fc:	4618      	mov	r0, r3
 80136fe:	f006 fbcb 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8013702:	4603      	mov	r3, r0
 8013704:	2b00      	cmp	r3, #0
 8013706:	f040 83ba 	bne.w	8013e7e <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801370a:	4b92      	ldr	r3, [pc, #584]	; (8013954 <tcp_input+0x290>)
 801370c:	695b      	ldr	r3, [r3, #20]
 801370e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013712:	2be0      	cmp	r3, #224	; 0xe0
 8013714:	f000 83b3 	beq.w	8013e7e <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013718:	4b8d      	ldr	r3, [pc, #564]	; (8013950 <tcp_input+0x28c>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	899b      	ldrh	r3, [r3, #12]
 801371e:	b29b      	uxth	r3, r3
 8013720:	4618      	mov	r0, r3
 8013722:	f7fc fba5 	bl	800fe70 <lwip_htons>
 8013726:	4603      	mov	r3, r0
 8013728:	0b1b      	lsrs	r3, r3, #12
 801372a:	b29b      	uxth	r3, r3
 801372c:	b2db      	uxtb	r3, r3
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013732:	7cbb      	ldrb	r3, [r7, #18]
 8013734:	2b13      	cmp	r3, #19
 8013736:	f240 83a4 	bls.w	8013e82 <tcp_input+0x7be>
 801373a:	7cbb      	ldrb	r3, [r7, #18]
 801373c:	b29a      	uxth	r2, r3
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	891b      	ldrh	r3, [r3, #8]
 8013742:	429a      	cmp	r2, r3
 8013744:	f200 839d 	bhi.w	8013e82 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013748:	7cbb      	ldrb	r3, [r7, #18]
 801374a:	b29b      	uxth	r3, r3
 801374c:	3b14      	subs	r3, #20
 801374e:	b29a      	uxth	r2, r3
 8013750:	4b81      	ldr	r3, [pc, #516]	; (8013958 <tcp_input+0x294>)
 8013752:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8013754:	4b81      	ldr	r3, [pc, #516]	; (801395c <tcp_input+0x298>)
 8013756:	2200      	movs	r2, #0
 8013758:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	895a      	ldrh	r2, [r3, #10]
 801375e:	7cbb      	ldrb	r3, [r7, #18]
 8013760:	b29b      	uxth	r3, r3
 8013762:	429a      	cmp	r2, r3
 8013764:	d309      	bcc.n	801377a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8013766:	4b7c      	ldr	r3, [pc, #496]	; (8013958 <tcp_input+0x294>)
 8013768:	881a      	ldrh	r2, [r3, #0]
 801376a:	4b7d      	ldr	r3, [pc, #500]	; (8013960 <tcp_input+0x29c>)
 801376c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801376e:	7cbb      	ldrb	r3, [r7, #18]
 8013770:	4619      	mov	r1, r3
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f7fd fea2 	bl	80114bc <pbuf_remove_header>
 8013778:	e04e      	b.n	8013818 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d105      	bne.n	801378e <tcp_input+0xca>
 8013782:	4b70      	ldr	r3, [pc, #448]	; (8013944 <tcp_input+0x280>)
 8013784:	22c2      	movs	r2, #194	; 0xc2
 8013786:	4977      	ldr	r1, [pc, #476]	; (8013964 <tcp_input+0x2a0>)
 8013788:	4870      	ldr	r0, [pc, #448]	; (801394c <tcp_input+0x288>)
 801378a:	f008 fa7f 	bl	801bc8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801378e:	2114      	movs	r1, #20
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7fd fe93 	bl	80114bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	895a      	ldrh	r2, [r3, #10]
 801379a:	4b71      	ldr	r3, [pc, #452]	; (8013960 <tcp_input+0x29c>)
 801379c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801379e:	4b6e      	ldr	r3, [pc, #440]	; (8013958 <tcp_input+0x294>)
 80137a0:	881a      	ldrh	r2, [r3, #0]
 80137a2:	4b6f      	ldr	r3, [pc, #444]	; (8013960 <tcp_input+0x29c>)
 80137a4:	881b      	ldrh	r3, [r3, #0]
 80137a6:	1ad3      	subs	r3, r2, r3
 80137a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80137aa:	4b6d      	ldr	r3, [pc, #436]	; (8013960 <tcp_input+0x29c>)
 80137ac:	881b      	ldrh	r3, [r3, #0]
 80137ae:	4619      	mov	r1, r3
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f7fd fe83 	bl	80114bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681b      	ldr	r3, [r3, #0]
 80137ba:	895b      	ldrh	r3, [r3, #10]
 80137bc:	8a3a      	ldrh	r2, [r7, #16]
 80137be:	429a      	cmp	r2, r3
 80137c0:	f200 8361 	bhi.w	8013e86 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	685b      	ldr	r3, [r3, #4]
 80137ca:	4a64      	ldr	r2, [pc, #400]	; (801395c <tcp_input+0x298>)
 80137cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	8a3a      	ldrh	r2, [r7, #16]
 80137d4:	4611      	mov	r1, r2
 80137d6:	4618      	mov	r0, r3
 80137d8:	f7fd fe70 	bl	80114bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	891a      	ldrh	r2, [r3, #8]
 80137e0:	8a3b      	ldrh	r3, [r7, #16]
 80137e2:	1ad3      	subs	r3, r2, r3
 80137e4:	b29a      	uxth	r2, r3
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	895b      	ldrh	r3, [r3, #10]
 80137ee:	2b00      	cmp	r3, #0
 80137f0:	d005      	beq.n	80137fe <tcp_input+0x13a>
 80137f2:	4b54      	ldr	r3, [pc, #336]	; (8013944 <tcp_input+0x280>)
 80137f4:	22df      	movs	r2, #223	; 0xdf
 80137f6:	495c      	ldr	r1, [pc, #368]	; (8013968 <tcp_input+0x2a4>)
 80137f8:	4854      	ldr	r0, [pc, #336]	; (801394c <tcp_input+0x288>)
 80137fa:	f008 fa47 	bl	801bc8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	891a      	ldrh	r2, [r3, #8]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	891b      	ldrh	r3, [r3, #8]
 8013808:	429a      	cmp	r2, r3
 801380a:	d005      	beq.n	8013818 <tcp_input+0x154>
 801380c:	4b4d      	ldr	r3, [pc, #308]	; (8013944 <tcp_input+0x280>)
 801380e:	22e0      	movs	r2, #224	; 0xe0
 8013810:	4956      	ldr	r1, [pc, #344]	; (801396c <tcp_input+0x2a8>)
 8013812:	484e      	ldr	r0, [pc, #312]	; (801394c <tcp_input+0x288>)
 8013814:	f008 fa3a 	bl	801bc8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013818:	4b4d      	ldr	r3, [pc, #308]	; (8013950 <tcp_input+0x28c>)
 801381a:	681b      	ldr	r3, [r3, #0]
 801381c:	881b      	ldrh	r3, [r3, #0]
 801381e:	b29b      	uxth	r3, r3
 8013820:	4a4b      	ldr	r2, [pc, #300]	; (8013950 <tcp_input+0x28c>)
 8013822:	6814      	ldr	r4, [r2, #0]
 8013824:	4618      	mov	r0, r3
 8013826:	f7fc fb23 	bl	800fe70 <lwip_htons>
 801382a:	4603      	mov	r3, r0
 801382c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801382e:	4b48      	ldr	r3, [pc, #288]	; (8013950 <tcp_input+0x28c>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	885b      	ldrh	r3, [r3, #2]
 8013834:	b29b      	uxth	r3, r3
 8013836:	4a46      	ldr	r2, [pc, #280]	; (8013950 <tcp_input+0x28c>)
 8013838:	6814      	ldr	r4, [r2, #0]
 801383a:	4618      	mov	r0, r3
 801383c:	f7fc fb18 	bl	800fe70 <lwip_htons>
 8013840:	4603      	mov	r3, r0
 8013842:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013844:	4b42      	ldr	r3, [pc, #264]	; (8013950 <tcp_input+0x28c>)
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	4a41      	ldr	r2, [pc, #260]	; (8013950 <tcp_input+0x28c>)
 801384c:	6814      	ldr	r4, [r2, #0]
 801384e:	4618      	mov	r0, r3
 8013850:	f7fc fb23 	bl	800fe9a <lwip_htonl>
 8013854:	4603      	mov	r3, r0
 8013856:	6063      	str	r3, [r4, #4]
 8013858:	6863      	ldr	r3, [r4, #4]
 801385a:	4a45      	ldr	r2, [pc, #276]	; (8013970 <tcp_input+0x2ac>)
 801385c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801385e:	4b3c      	ldr	r3, [pc, #240]	; (8013950 <tcp_input+0x28c>)
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	689b      	ldr	r3, [r3, #8]
 8013864:	4a3a      	ldr	r2, [pc, #232]	; (8013950 <tcp_input+0x28c>)
 8013866:	6814      	ldr	r4, [r2, #0]
 8013868:	4618      	mov	r0, r3
 801386a:	f7fc fb16 	bl	800fe9a <lwip_htonl>
 801386e:	4603      	mov	r3, r0
 8013870:	60a3      	str	r3, [r4, #8]
 8013872:	68a3      	ldr	r3, [r4, #8]
 8013874:	4a3f      	ldr	r2, [pc, #252]	; (8013974 <tcp_input+0x2b0>)
 8013876:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013878:	4b35      	ldr	r3, [pc, #212]	; (8013950 <tcp_input+0x28c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	89db      	ldrh	r3, [r3, #14]
 801387e:	b29b      	uxth	r3, r3
 8013880:	4a33      	ldr	r2, [pc, #204]	; (8013950 <tcp_input+0x28c>)
 8013882:	6814      	ldr	r4, [r2, #0]
 8013884:	4618      	mov	r0, r3
 8013886:	f7fc faf3 	bl	800fe70 <lwip_htons>
 801388a:	4603      	mov	r3, r0
 801388c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801388e:	4b30      	ldr	r3, [pc, #192]	; (8013950 <tcp_input+0x28c>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	899b      	ldrh	r3, [r3, #12]
 8013894:	b29b      	uxth	r3, r3
 8013896:	4618      	mov	r0, r3
 8013898:	f7fc faea 	bl	800fe70 <lwip_htons>
 801389c:	4603      	mov	r3, r0
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138a4:	b2da      	uxtb	r2, r3
 80138a6:	4b34      	ldr	r3, [pc, #208]	; (8013978 <tcp_input+0x2b4>)
 80138a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	891a      	ldrh	r2, [r3, #8]
 80138ae:	4b33      	ldr	r3, [pc, #204]	; (801397c <tcp_input+0x2b8>)
 80138b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80138b2:	4b31      	ldr	r3, [pc, #196]	; (8013978 <tcp_input+0x2b4>)
 80138b4:	781b      	ldrb	r3, [r3, #0]
 80138b6:	f003 0303 	and.w	r3, r3, #3
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d00c      	beq.n	80138d8 <tcp_input+0x214>
    tcplen++;
 80138be:	4b2f      	ldr	r3, [pc, #188]	; (801397c <tcp_input+0x2b8>)
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	3301      	adds	r3, #1
 80138c4:	b29a      	uxth	r2, r3
 80138c6:	4b2d      	ldr	r3, [pc, #180]	; (801397c <tcp_input+0x2b8>)
 80138c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	891a      	ldrh	r2, [r3, #8]
 80138ce:	4b2b      	ldr	r3, [pc, #172]	; (801397c <tcp_input+0x2b8>)
 80138d0:	881b      	ldrh	r3, [r3, #0]
 80138d2:	429a      	cmp	r2, r3
 80138d4:	f200 82d9 	bhi.w	8013e8a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80138d8:	2300      	movs	r3, #0
 80138da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138dc:	4b28      	ldr	r3, [pc, #160]	; (8013980 <tcp_input+0x2bc>)
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	61fb      	str	r3, [r7, #28]
 80138e2:	e09d      	b.n	8013a20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80138e4:	69fb      	ldr	r3, [r7, #28]
 80138e6:	7d1b      	ldrb	r3, [r3, #20]
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d105      	bne.n	80138f8 <tcp_input+0x234>
 80138ec:	4b15      	ldr	r3, [pc, #84]	; (8013944 <tcp_input+0x280>)
 80138ee:	22fb      	movs	r2, #251	; 0xfb
 80138f0:	4924      	ldr	r1, [pc, #144]	; (8013984 <tcp_input+0x2c0>)
 80138f2:	4816      	ldr	r0, [pc, #88]	; (801394c <tcp_input+0x288>)
 80138f4:	f008 f9ca 	bl	801bc8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	7d1b      	ldrb	r3, [r3, #20]
 80138fc:	2b0a      	cmp	r3, #10
 80138fe:	d105      	bne.n	801390c <tcp_input+0x248>
 8013900:	4b10      	ldr	r3, [pc, #64]	; (8013944 <tcp_input+0x280>)
 8013902:	22fc      	movs	r2, #252	; 0xfc
 8013904:	4920      	ldr	r1, [pc, #128]	; (8013988 <tcp_input+0x2c4>)
 8013906:	4811      	ldr	r0, [pc, #68]	; (801394c <tcp_input+0x288>)
 8013908:	f008 f9c0 	bl	801bc8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	7d1b      	ldrb	r3, [r3, #20]
 8013910:	2b01      	cmp	r3, #1
 8013912:	d105      	bne.n	8013920 <tcp_input+0x25c>
 8013914:	4b0b      	ldr	r3, [pc, #44]	; (8013944 <tcp_input+0x280>)
 8013916:	22fd      	movs	r2, #253	; 0xfd
 8013918:	491c      	ldr	r1, [pc, #112]	; (801398c <tcp_input+0x2c8>)
 801391a:	480c      	ldr	r0, [pc, #48]	; (801394c <tcp_input+0x288>)
 801391c:	f008 f9b6 	bl	801bc8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	7a1b      	ldrb	r3, [r3, #8]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d033      	beq.n	8013990 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	7a1a      	ldrb	r2, [r3, #8]
 801392c:	4b09      	ldr	r3, [pc, #36]	; (8013954 <tcp_input+0x290>)
 801392e:	685b      	ldr	r3, [r3, #4]
 8013930:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013934:	3301      	adds	r3, #1
 8013936:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013938:	429a      	cmp	r2, r3
 801393a:	d029      	beq.n	8013990 <tcp_input+0x2cc>
      prev = pcb;
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	61bb      	str	r3, [r7, #24]
      continue;
 8013940:	e06b      	b.n	8013a1a <tcp_input+0x356>
 8013942:	bf00      	nop
 8013944:	08020354 	.word	0x08020354
 8013948:	08020388 	.word	0x08020388
 801394c:	080203a0 	.word	0x080203a0
 8013950:	20004804 	.word	0x20004804
 8013954:	2000a0a8 	.word	0x2000a0a8
 8013958:	20004808 	.word	0x20004808
 801395c:	2000480c 	.word	0x2000480c
 8013960:	2000480a 	.word	0x2000480a
 8013964:	080203c8 	.word	0x080203c8
 8013968:	080203d8 	.word	0x080203d8
 801396c:	080203e4 	.word	0x080203e4
 8013970:	20004814 	.word	0x20004814
 8013974:	20004818 	.word	0x20004818
 8013978:	20004820 	.word	0x20004820
 801397c:	2000481e 	.word	0x2000481e
 8013980:	2000d7bc 	.word	0x2000d7bc
 8013984:	08020404 	.word	0x08020404
 8013988:	0802042c 	.word	0x0802042c
 801398c:	08020458 	.word	0x08020458
    }

    if (pcb->remote_port == tcphdr->src &&
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	8b1a      	ldrh	r2, [r3, #24]
 8013994:	4b94      	ldr	r3, [pc, #592]	; (8013be8 <tcp_input+0x524>)
 8013996:	681b      	ldr	r3, [r3, #0]
 8013998:	881b      	ldrh	r3, [r3, #0]
 801399a:	b29b      	uxth	r3, r3
 801399c:	429a      	cmp	r2, r3
 801399e:	d13a      	bne.n	8013a16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	8ada      	ldrh	r2, [r3, #22]
 80139a4:	4b90      	ldr	r3, [pc, #576]	; (8013be8 <tcp_input+0x524>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	885b      	ldrh	r3, [r3, #2]
 80139aa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d132      	bne.n	8013a16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	685a      	ldr	r2, [r3, #4]
 80139b4:	4b8d      	ldr	r3, [pc, #564]	; (8013bec <tcp_input+0x528>)
 80139b6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d12c      	bne.n	8013a16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	681a      	ldr	r2, [r3, #0]
 80139c0:	4b8a      	ldr	r3, [pc, #552]	; (8013bec <tcp_input+0x528>)
 80139c2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d126      	bne.n	8013a16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	68db      	ldr	r3, [r3, #12]
 80139cc:	69fa      	ldr	r2, [r7, #28]
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d106      	bne.n	80139e0 <tcp_input+0x31c>
 80139d2:	4b87      	ldr	r3, [pc, #540]	; (8013bf0 <tcp_input+0x52c>)
 80139d4:	f240 120d 	movw	r2, #269	; 0x10d
 80139d8:	4986      	ldr	r1, [pc, #536]	; (8013bf4 <tcp_input+0x530>)
 80139da:	4887      	ldr	r0, [pc, #540]	; (8013bf8 <tcp_input+0x534>)
 80139dc:	f008 f956 	bl	801bc8c <iprintf>
      if (prev != NULL) {
 80139e0:	69bb      	ldr	r3, [r7, #24]
 80139e2:	2b00      	cmp	r3, #0
 80139e4:	d00a      	beq.n	80139fc <tcp_input+0x338>
        prev->next = pcb->next;
 80139e6:	69fb      	ldr	r3, [r7, #28]
 80139e8:	68da      	ldr	r2, [r3, #12]
 80139ea:	69bb      	ldr	r3, [r7, #24]
 80139ec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80139ee:	4b83      	ldr	r3, [pc, #524]	; (8013bfc <tcp_input+0x538>)
 80139f0:	681a      	ldr	r2, [r3, #0]
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80139f6:	4a81      	ldr	r2, [pc, #516]	; (8013bfc <tcp_input+0x538>)
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80139fc:	69fb      	ldr	r3, [r7, #28]
 80139fe:	68db      	ldr	r3, [r3, #12]
 8013a00:	69fa      	ldr	r2, [r7, #28]
 8013a02:	429a      	cmp	r2, r3
 8013a04:	d111      	bne.n	8013a2a <tcp_input+0x366>
 8013a06:	4b7a      	ldr	r3, [pc, #488]	; (8013bf0 <tcp_input+0x52c>)
 8013a08:	f240 1215 	movw	r2, #277	; 0x115
 8013a0c:	497c      	ldr	r1, [pc, #496]	; (8013c00 <tcp_input+0x53c>)
 8013a0e:	487a      	ldr	r0, [pc, #488]	; (8013bf8 <tcp_input+0x534>)
 8013a10:	f008 f93c 	bl	801bc8c <iprintf>
      break;
 8013a14:	e009      	b.n	8013a2a <tcp_input+0x366>
    }
    prev = pcb;
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	61fb      	str	r3, [r7, #28]
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	f47f af5e 	bne.w	80138e4 <tcp_input+0x220>
 8013a28:	e000      	b.n	8013a2c <tcp_input+0x368>
      break;
 8013a2a:	bf00      	nop
  }

  if (pcb == NULL) {
 8013a2c:	69fb      	ldr	r3, [r7, #28]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	f040 8095 	bne.w	8013b5e <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a34:	4b73      	ldr	r3, [pc, #460]	; (8013c04 <tcp_input+0x540>)
 8013a36:	681b      	ldr	r3, [r3, #0]
 8013a38:	61fb      	str	r3, [r7, #28]
 8013a3a:	e03f      	b.n	8013abc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	7d1b      	ldrb	r3, [r3, #20]
 8013a40:	2b0a      	cmp	r3, #10
 8013a42:	d006      	beq.n	8013a52 <tcp_input+0x38e>
 8013a44:	4b6a      	ldr	r3, [pc, #424]	; (8013bf0 <tcp_input+0x52c>)
 8013a46:	f240 121f 	movw	r2, #287	; 0x11f
 8013a4a:	496f      	ldr	r1, [pc, #444]	; (8013c08 <tcp_input+0x544>)
 8013a4c:	486a      	ldr	r0, [pc, #424]	; (8013bf8 <tcp_input+0x534>)
 8013a4e:	f008 f91d 	bl	801bc8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a52:	69fb      	ldr	r3, [r7, #28]
 8013a54:	7a1b      	ldrb	r3, [r3, #8]
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d009      	beq.n	8013a6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	7a1a      	ldrb	r2, [r3, #8]
 8013a5e:	4b63      	ldr	r3, [pc, #396]	; (8013bec <tcp_input+0x528>)
 8013a60:	685b      	ldr	r3, [r3, #4]
 8013a62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a66:	3301      	adds	r3, #1
 8013a68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d122      	bne.n	8013ab4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013a6e:	69fb      	ldr	r3, [r7, #28]
 8013a70:	8b1a      	ldrh	r2, [r3, #24]
 8013a72:	4b5d      	ldr	r3, [pc, #372]	; (8013be8 <tcp_input+0x524>)
 8013a74:	681b      	ldr	r3, [r3, #0]
 8013a76:	881b      	ldrh	r3, [r3, #0]
 8013a78:	b29b      	uxth	r3, r3
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d11b      	bne.n	8013ab6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013a7e:	69fb      	ldr	r3, [r7, #28]
 8013a80:	8ada      	ldrh	r2, [r3, #22]
 8013a82:	4b59      	ldr	r3, [pc, #356]	; (8013be8 <tcp_input+0x524>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	885b      	ldrh	r3, [r3, #2]
 8013a88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a8a:	429a      	cmp	r2, r3
 8013a8c:	d113      	bne.n	8013ab6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a8e:	69fb      	ldr	r3, [r7, #28]
 8013a90:	685a      	ldr	r2, [r3, #4]
 8013a92:	4b56      	ldr	r3, [pc, #344]	; (8013bec <tcp_input+0x528>)
 8013a94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a96:	429a      	cmp	r2, r3
 8013a98:	d10d      	bne.n	8013ab6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	681a      	ldr	r2, [r3, #0]
 8013a9e:	4b53      	ldr	r3, [pc, #332]	; (8013bec <tcp_input+0x528>)
 8013aa0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d107      	bne.n	8013ab6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013aa6:	69f8      	ldr	r0, [r7, #28]
 8013aa8:	f000 fb54 	bl	8014154 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013aac:	6878      	ldr	r0, [r7, #4]
 8013aae:	f7fd fdbd 	bl	801162c <pbuf_free>
        return;
 8013ab2:	e1f0      	b.n	8013e96 <tcp_input+0x7d2>
        continue;
 8013ab4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	68db      	ldr	r3, [r3, #12]
 8013aba:	61fb      	str	r3, [r7, #28]
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d1bc      	bne.n	8013a3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ac6:	4b51      	ldr	r3, [pc, #324]	; (8013c0c <tcp_input+0x548>)
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	617b      	str	r3, [r7, #20]
 8013acc:	e02a      	b.n	8013b24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ace:	697b      	ldr	r3, [r7, #20]
 8013ad0:	7a1b      	ldrb	r3, [r3, #8]
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d00c      	beq.n	8013af0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	7a1a      	ldrb	r2, [r3, #8]
 8013ada:	4b44      	ldr	r3, [pc, #272]	; (8013bec <tcp_input+0x528>)
 8013adc:	685b      	ldr	r3, [r3, #4]
 8013ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ae2:	3301      	adds	r3, #1
 8013ae4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ae6:	429a      	cmp	r2, r3
 8013ae8:	d002      	beq.n	8013af0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	61bb      	str	r3, [r7, #24]
        continue;
 8013aee:	e016      	b.n	8013b1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013af0:	697b      	ldr	r3, [r7, #20]
 8013af2:	8ada      	ldrh	r2, [r3, #22]
 8013af4:	4b3c      	ldr	r3, [pc, #240]	; (8013be8 <tcp_input+0x524>)
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	885b      	ldrh	r3, [r3, #2]
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	429a      	cmp	r2, r3
 8013afe:	d10c      	bne.n	8013b1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	681a      	ldr	r2, [r3, #0]
 8013b04:	4b39      	ldr	r3, [pc, #228]	; (8013bec <tcp_input+0x528>)
 8013b06:	695b      	ldr	r3, [r3, #20]
 8013b08:	429a      	cmp	r2, r3
 8013b0a:	d00f      	beq.n	8013b2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d00d      	beq.n	8013b2e <tcp_input+0x46a>
 8013b12:	697b      	ldr	r3, [r7, #20]
 8013b14:	681b      	ldr	r3, [r3, #0]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d009      	beq.n	8013b2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b1a:	697b      	ldr	r3, [r7, #20]
 8013b1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	68db      	ldr	r3, [r3, #12]
 8013b22:	617b      	str	r3, [r7, #20]
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d1d1      	bne.n	8013ace <tcp_input+0x40a>
 8013b2a:	e000      	b.n	8013b2e <tcp_input+0x46a>
            break;
 8013b2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013b2e:	697b      	ldr	r3, [r7, #20]
 8013b30:	2b00      	cmp	r3, #0
 8013b32:	d014      	beq.n	8013b5e <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013b34:	69bb      	ldr	r3, [r7, #24]
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	d00a      	beq.n	8013b50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013b3a:	697b      	ldr	r3, [r7, #20]
 8013b3c:	68da      	ldr	r2, [r3, #12]
 8013b3e:	69bb      	ldr	r3, [r7, #24]
 8013b40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013b42:	4b32      	ldr	r3, [pc, #200]	; (8013c0c <tcp_input+0x548>)
 8013b44:	681a      	ldr	r2, [r3, #0]
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b4a:	4a30      	ldr	r2, [pc, #192]	; (8013c0c <tcp_input+0x548>)
 8013b4c:	697b      	ldr	r3, [r7, #20]
 8013b4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b50:	6978      	ldr	r0, [r7, #20]
 8013b52:	f000 fa01 	bl	8013f58 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b56:	6878      	ldr	r0, [r7, #4]
 8013b58:	f7fd fd68 	bl	801162c <pbuf_free>
      return;
 8013b5c:	e19b      	b.n	8013e96 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b5e:	69fb      	ldr	r3, [r7, #28]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	f000 8160 	beq.w	8013e26 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b66:	4b2a      	ldr	r3, [pc, #168]	; (8013c10 <tcp_input+0x54c>)
 8013b68:	2200      	movs	r2, #0
 8013b6a:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	891a      	ldrh	r2, [r3, #8]
 8013b70:	4b27      	ldr	r3, [pc, #156]	; (8013c10 <tcp_input+0x54c>)
 8013b72:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b74:	4a26      	ldr	r2, [pc, #152]	; (8013c10 <tcp_input+0x54c>)
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b7a:	4b1b      	ldr	r3, [pc, #108]	; (8013be8 <tcp_input+0x524>)
 8013b7c:	681b      	ldr	r3, [r3, #0]
 8013b7e:	4a24      	ldr	r2, [pc, #144]	; (8013c10 <tcp_input+0x54c>)
 8013b80:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b82:	4b24      	ldr	r3, [pc, #144]	; (8013c14 <tcp_input+0x550>)
 8013b84:	2200      	movs	r2, #0
 8013b86:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013b88:	4b23      	ldr	r3, [pc, #140]	; (8013c18 <tcp_input+0x554>)
 8013b8a:	2200      	movs	r2, #0
 8013b8c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013b8e:	4b23      	ldr	r3, [pc, #140]	; (8013c1c <tcp_input+0x558>)
 8013b90:	2200      	movs	r2, #0
 8013b92:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013b94:	4b22      	ldr	r3, [pc, #136]	; (8013c20 <tcp_input+0x55c>)
 8013b96:	781b      	ldrb	r3, [r3, #0]
 8013b98:	f003 0308 	and.w	r3, r3, #8
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d006      	beq.n	8013bae <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	7b5b      	ldrb	r3, [r3, #13]
 8013ba4:	f043 0301 	orr.w	r3, r3, #1
 8013ba8:	b2da      	uxtb	r2, r3
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013bae:	69fb      	ldr	r3, [r7, #28]
 8013bb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d038      	beq.n	8013c28 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bb6:	69f8      	ldr	r0, [r7, #28]
 8013bb8:	f7ff f870 	bl	8012c9c <tcp_process_refused_data>
 8013bbc:	4603      	mov	r3, r0
 8013bbe:	f113 0f0d 	cmn.w	r3, #13
 8013bc2:	d007      	beq.n	8013bd4 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d02d      	beq.n	8013c28 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bcc:	4b15      	ldr	r3, [pc, #84]	; (8013c24 <tcp_input+0x560>)
 8013bce:	881b      	ldrh	r3, [r3, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d029      	beq.n	8013c28 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013bd4:	69fb      	ldr	r3, [r7, #28]
 8013bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	f040 8104 	bne.w	8013de6 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013bde:	69f8      	ldr	r0, [r7, #28]
 8013be0:	f003 fe16 	bl	8017810 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013be4:	e0ff      	b.n	8013de6 <tcp_input+0x722>
 8013be6:	bf00      	nop
 8013be8:	20004804 	.word	0x20004804
 8013bec:	2000a0a8 	.word	0x2000a0a8
 8013bf0:	08020354 	.word	0x08020354
 8013bf4:	08020480 	.word	0x08020480
 8013bf8:	080203a0 	.word	0x080203a0
 8013bfc:	2000d7bc 	.word	0x2000d7bc
 8013c00:	080204ac 	.word	0x080204ac
 8013c04:	2000d7cc 	.word	0x2000d7cc
 8013c08:	080204d8 	.word	0x080204d8
 8013c0c:	2000d7c4 	.word	0x2000d7c4
 8013c10:	200047f4 	.word	0x200047f4
 8013c14:	20004824 	.word	0x20004824
 8013c18:	20004821 	.word	0x20004821
 8013c1c:	2000481c 	.word	0x2000481c
 8013c20:	20004820 	.word	0x20004820
 8013c24:	2000481e 	.word	0x2000481e
      }
    }
    tcp_input_pcb = pcb;
 8013c28:	4a9c      	ldr	r2, [pc, #624]	; (8013e9c <tcp_input+0x7d8>)
 8013c2a:	69fb      	ldr	r3, [r7, #28]
 8013c2c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013c2e:	69f8      	ldr	r0, [r7, #28]
 8013c30:	f000 fb0a 	bl	8014248 <tcp_process>
 8013c34:	4603      	mov	r3, r0
 8013c36:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013c38:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c3c:	f113 0f0d 	cmn.w	r3, #13
 8013c40:	f000 80d3 	beq.w	8013dea <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013c44:	4b96      	ldr	r3, [pc, #600]	; (8013ea0 <tcp_input+0x7dc>)
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	f003 0308 	and.w	r3, r3, #8
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d015      	beq.n	8013c7c <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013c50:	69fb      	ldr	r3, [r7, #28]
 8013c52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c56:	2b00      	cmp	r3, #0
 8013c58:	d008      	beq.n	8013c6c <tcp_input+0x5a8>
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c60:	69fa      	ldr	r2, [r7, #28]
 8013c62:	6912      	ldr	r2, [r2, #16]
 8013c64:	f06f 010d 	mvn.w	r1, #13
 8013c68:	4610      	mov	r0, r2
 8013c6a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c6c:	69f9      	ldr	r1, [r7, #28]
 8013c6e:	488d      	ldr	r0, [pc, #564]	; (8013ea4 <tcp_input+0x7e0>)
 8013c70:	f7ff fbb0 	bl	80133d4 <tcp_pcb_remove>
        tcp_free(pcb);
 8013c74:	69f8      	ldr	r0, [r7, #28]
 8013c76:	f7fd ff95 	bl	8011ba4 <tcp_free>
 8013c7a:	e0c1      	b.n	8013e00 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013c80:	4b89      	ldr	r3, [pc, #548]	; (8013ea8 <tcp_input+0x7e4>)
 8013c82:	881b      	ldrh	r3, [r3, #0]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d01d      	beq.n	8013cc4 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013c88:	4b87      	ldr	r3, [pc, #540]	; (8013ea8 <tcp_input+0x7e4>)
 8013c8a:	881b      	ldrh	r3, [r3, #0]
 8013c8c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013c8e:	69fb      	ldr	r3, [r7, #28]
 8013c90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d00a      	beq.n	8013cae <tcp_input+0x5ea>
 8013c98:	69fb      	ldr	r3, [r7, #28]
 8013c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c9e:	69fa      	ldr	r2, [r7, #28]
 8013ca0:	6910      	ldr	r0, [r2, #16]
 8013ca2:	89fa      	ldrh	r2, [r7, #14]
 8013ca4:	69f9      	ldr	r1, [r7, #28]
 8013ca6:	4798      	blx	r3
 8013ca8:	4603      	mov	r3, r0
 8013caa:	74fb      	strb	r3, [r7, #19]
 8013cac:	e001      	b.n	8013cb2 <tcp_input+0x5ee>
 8013cae:	2300      	movs	r3, #0
 8013cb0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013cb2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cb6:	f113 0f0d 	cmn.w	r3, #13
 8013cba:	f000 8098 	beq.w	8013dee <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013cbe:	4b7a      	ldr	r3, [pc, #488]	; (8013ea8 <tcp_input+0x7e4>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013cc4:	69f8      	ldr	r0, [r7, #28]
 8013cc6:	f000 f907 	bl	8013ed8 <tcp_input_delayed_close>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	f040 8090 	bne.w	8013df2 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013cd2:	4b76      	ldr	r3, [pc, #472]	; (8013eac <tcp_input+0x7e8>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d041      	beq.n	8013d5e <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d006      	beq.n	8013cf0 <tcp_input+0x62c>
 8013ce2:	4b73      	ldr	r3, [pc, #460]	; (8013eb0 <tcp_input+0x7ec>)
 8013ce4:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013ce8:	4972      	ldr	r1, [pc, #456]	; (8013eb4 <tcp_input+0x7f0>)
 8013cea:	4873      	ldr	r0, [pc, #460]	; (8013eb8 <tcp_input+0x7f4>)
 8013cec:	f007 ffce 	bl	801bc8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013cf0:	69fb      	ldr	r3, [r7, #28]
 8013cf2:	8b5b      	ldrh	r3, [r3, #26]
 8013cf4:	f003 0310 	and.w	r3, r3, #16
 8013cf8:	2b00      	cmp	r3, #0
 8013cfa:	d008      	beq.n	8013d0e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013cfc:	4b6b      	ldr	r3, [pc, #428]	; (8013eac <tcp_input+0x7e8>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	4618      	mov	r0, r3
 8013d02:	f7fd fc93 	bl	801162c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013d06:	69f8      	ldr	r0, [r7, #28]
 8013d08:	f7fe fa90 	bl	801222c <tcp_abort>
            goto aborted;
 8013d0c:	e078      	b.n	8013e00 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d00c      	beq.n	8013d32 <tcp_input+0x66e>
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d1e:	69fb      	ldr	r3, [r7, #28]
 8013d20:	6918      	ldr	r0, [r3, #16]
 8013d22:	4b62      	ldr	r3, [pc, #392]	; (8013eac <tcp_input+0x7e8>)
 8013d24:	681a      	ldr	r2, [r3, #0]
 8013d26:	2300      	movs	r3, #0
 8013d28:	69f9      	ldr	r1, [r7, #28]
 8013d2a:	47a0      	blx	r4
 8013d2c:	4603      	mov	r3, r0
 8013d2e:	74fb      	strb	r3, [r7, #19]
 8013d30:	e008      	b.n	8013d44 <tcp_input+0x680>
 8013d32:	4b5e      	ldr	r3, [pc, #376]	; (8013eac <tcp_input+0x7e8>)
 8013d34:	681a      	ldr	r2, [r3, #0]
 8013d36:	2300      	movs	r3, #0
 8013d38:	69f9      	ldr	r1, [r7, #28]
 8013d3a:	2000      	movs	r0, #0
 8013d3c:	f7ff f884 	bl	8012e48 <tcp_recv_null>
 8013d40:	4603      	mov	r3, r0
 8013d42:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013d44:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d48:	f113 0f0d 	cmn.w	r3, #13
 8013d4c:	d053      	beq.n	8013df6 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013d4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d003      	beq.n	8013d5e <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013d56:	4b55      	ldr	r3, [pc, #340]	; (8013eac <tcp_input+0x7e8>)
 8013d58:	681a      	ldr	r2, [r3, #0]
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013d5e:	4b50      	ldr	r3, [pc, #320]	; (8013ea0 <tcp_input+0x7dc>)
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	f003 0320 	and.w	r3, r3, #32
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d030      	beq.n	8013dcc <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013d6a:	69fb      	ldr	r3, [r7, #28]
 8013d6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d009      	beq.n	8013d86 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d76:	7b5a      	ldrb	r2, [r3, #13]
 8013d78:	69fb      	ldr	r3, [r7, #28]
 8013d7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d7c:	f042 0220 	orr.w	r2, r2, #32
 8013d80:	b2d2      	uxtb	r2, r2
 8013d82:	735a      	strb	r2, [r3, #13]
 8013d84:	e022      	b.n	8013dcc <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013d86:	69fb      	ldr	r3, [r7, #28]
 8013d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013d8e:	d005      	beq.n	8013d9c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013d94:	3301      	adds	r3, #1
 8013d96:	b29a      	uxth	r2, r3
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d00b      	beq.n	8013dbe <tcp_input+0x6fa>
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013dac:	69fb      	ldr	r3, [r7, #28]
 8013dae:	6918      	ldr	r0, [r3, #16]
 8013db0:	2300      	movs	r3, #0
 8013db2:	2200      	movs	r2, #0
 8013db4:	69f9      	ldr	r1, [r7, #28]
 8013db6:	47a0      	blx	r4
 8013db8:	4603      	mov	r3, r0
 8013dba:	74fb      	strb	r3, [r7, #19]
 8013dbc:	e001      	b.n	8013dc2 <tcp_input+0x6fe>
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013dc2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dc6:	f113 0f0d 	cmn.w	r3, #13
 8013dca:	d016      	beq.n	8013dfa <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013dcc:	4b33      	ldr	r3, [pc, #204]	; (8013e9c <tcp_input+0x7d8>)
 8013dce:	2200      	movs	r2, #0
 8013dd0:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013dd2:	69f8      	ldr	r0, [r7, #28]
 8013dd4:	f000 f880 	bl	8013ed8 <tcp_input_delayed_close>
 8013dd8:	4603      	mov	r3, r0
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d10f      	bne.n	8013dfe <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013dde:	69f8      	ldr	r0, [r7, #28]
 8013de0:	f002 ff10 	bl	8016c04 <tcp_output>
 8013de4:	e00c      	b.n	8013e00 <tcp_input+0x73c>
        goto aborted;
 8013de6:	bf00      	nop
 8013de8:	e00a      	b.n	8013e00 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013dea:	bf00      	nop
 8013dec:	e008      	b.n	8013e00 <tcp_input+0x73c>
              goto aborted;
 8013dee:	bf00      	nop
 8013df0:	e006      	b.n	8013e00 <tcp_input+0x73c>
          goto aborted;
 8013df2:	bf00      	nop
 8013df4:	e004      	b.n	8013e00 <tcp_input+0x73c>
            goto aborted;
 8013df6:	bf00      	nop
 8013df8:	e002      	b.n	8013e00 <tcp_input+0x73c>
              goto aborted;
 8013dfa:	bf00      	nop
 8013dfc:	e000      	b.n	8013e00 <tcp_input+0x73c>
          goto aborted;
 8013dfe:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e00:	4b26      	ldr	r3, [pc, #152]	; (8013e9c <tcp_input+0x7d8>)
 8013e02:	2200      	movs	r2, #0
 8013e04:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e06:	4b29      	ldr	r3, [pc, #164]	; (8013eac <tcp_input+0x7e8>)
 8013e08:	2200      	movs	r2, #0
 8013e0a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e0c:	4b2b      	ldr	r3, [pc, #172]	; (8013ebc <tcp_input+0x7f8>)
 8013e0e:	685b      	ldr	r3, [r3, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d03f      	beq.n	8013e94 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013e14:	4b29      	ldr	r3, [pc, #164]	; (8013ebc <tcp_input+0x7f8>)
 8013e16:	685b      	ldr	r3, [r3, #4]
 8013e18:	4618      	mov	r0, r3
 8013e1a:	f7fd fc07 	bl	801162c <pbuf_free>
      inseg.p = NULL;
 8013e1e:	4b27      	ldr	r3, [pc, #156]	; (8013ebc <tcp_input+0x7f8>)
 8013e20:	2200      	movs	r2, #0
 8013e22:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013e24:	e036      	b.n	8013e94 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013e26:	4b26      	ldr	r3, [pc, #152]	; (8013ec0 <tcp_input+0x7fc>)
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	899b      	ldrh	r3, [r3, #12]
 8013e2c:	b29b      	uxth	r3, r3
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7fc f81e 	bl	800fe70 <lwip_htons>
 8013e34:	4603      	mov	r3, r0
 8013e36:	b2db      	uxtb	r3, r3
 8013e38:	f003 0304 	and.w	r3, r3, #4
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d118      	bne.n	8013e72 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e40:	4b20      	ldr	r3, [pc, #128]	; (8013ec4 <tcp_input+0x800>)
 8013e42:	6819      	ldr	r1, [r3, #0]
 8013e44:	4b20      	ldr	r3, [pc, #128]	; (8013ec8 <tcp_input+0x804>)
 8013e46:	881b      	ldrh	r3, [r3, #0]
 8013e48:	461a      	mov	r2, r3
 8013e4a:	4b20      	ldr	r3, [pc, #128]	; (8013ecc <tcp_input+0x808>)
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e50:	4b1b      	ldr	r3, [pc, #108]	; (8013ec0 <tcp_input+0x7fc>)
 8013e52:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e54:	885b      	ldrh	r3, [r3, #2]
 8013e56:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e58:	4a19      	ldr	r2, [pc, #100]	; (8013ec0 <tcp_input+0x7fc>)
 8013e5a:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e5c:	8812      	ldrh	r2, [r2, #0]
 8013e5e:	b292      	uxth	r2, r2
 8013e60:	9202      	str	r2, [sp, #8]
 8013e62:	9301      	str	r3, [sp, #4]
 8013e64:	4b1a      	ldr	r3, [pc, #104]	; (8013ed0 <tcp_input+0x80c>)
 8013e66:	9300      	str	r3, [sp, #0]
 8013e68:	4b1a      	ldr	r3, [pc, #104]	; (8013ed4 <tcp_input+0x810>)
 8013e6a:	4602      	mov	r2, r0
 8013e6c:	2000      	movs	r0, #0
 8013e6e:	f003 fc7d 	bl	801776c <tcp_rst>
    pbuf_free(p);
 8013e72:	6878      	ldr	r0, [r7, #4]
 8013e74:	f7fd fbda 	bl	801162c <pbuf_free>
  return;
 8013e78:	e00c      	b.n	8013e94 <tcp_input+0x7d0>
    goto dropped;
 8013e7a:	bf00      	nop
 8013e7c:	e006      	b.n	8013e8c <tcp_input+0x7c8>
    goto dropped;
 8013e7e:	bf00      	nop
 8013e80:	e004      	b.n	8013e8c <tcp_input+0x7c8>
    goto dropped;
 8013e82:	bf00      	nop
 8013e84:	e002      	b.n	8013e8c <tcp_input+0x7c8>
      goto dropped;
 8013e86:	bf00      	nop
 8013e88:	e000      	b.n	8013e8c <tcp_input+0x7c8>
      goto dropped;
 8013e8a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e8c:	6878      	ldr	r0, [r7, #4]
 8013e8e:	f7fd fbcd 	bl	801162c <pbuf_free>
 8013e92:	e000      	b.n	8013e96 <tcp_input+0x7d2>
  return;
 8013e94:	bf00      	nop
}
 8013e96:	3724      	adds	r7, #36	; 0x24
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd90      	pop	{r4, r7, pc}
 8013e9c:	2000d7d0 	.word	0x2000d7d0
 8013ea0:	20004821 	.word	0x20004821
 8013ea4:	2000d7bc 	.word	0x2000d7bc
 8013ea8:	2000481c 	.word	0x2000481c
 8013eac:	20004824 	.word	0x20004824
 8013eb0:	08020354 	.word	0x08020354
 8013eb4:	08020508 	.word	0x08020508
 8013eb8:	080203a0 	.word	0x080203a0
 8013ebc:	200047f4 	.word	0x200047f4
 8013ec0:	20004804 	.word	0x20004804
 8013ec4:	20004818 	.word	0x20004818
 8013ec8:	2000481e 	.word	0x2000481e
 8013ecc:	20004814 	.word	0x20004814
 8013ed0:	2000a0b8 	.word	0x2000a0b8
 8013ed4:	2000a0bc 	.word	0x2000a0bc

08013ed8 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ed8:	b580      	push	{r7, lr}
 8013eda:	b082      	sub	sp, #8
 8013edc:	af00      	add	r7, sp, #0
 8013ede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d106      	bne.n	8013ef4 <tcp_input_delayed_close+0x1c>
 8013ee6:	4b17      	ldr	r3, [pc, #92]	; (8013f44 <tcp_input_delayed_close+0x6c>)
 8013ee8:	f240 225a 	movw	r2, #602	; 0x25a
 8013eec:	4916      	ldr	r1, [pc, #88]	; (8013f48 <tcp_input_delayed_close+0x70>)
 8013eee:	4817      	ldr	r0, [pc, #92]	; (8013f4c <tcp_input_delayed_close+0x74>)
 8013ef0:	f007 fecc 	bl	801bc8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013ef4:	4b16      	ldr	r3, [pc, #88]	; (8013f50 <tcp_input_delayed_close+0x78>)
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	f003 0310 	and.w	r3, r3, #16
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d01c      	beq.n	8013f3a <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013f00:	687b      	ldr	r3, [r7, #4]
 8013f02:	8b5b      	ldrh	r3, [r3, #26]
 8013f04:	f003 0310 	and.w	r3, r3, #16
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d10d      	bne.n	8013f28 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d008      	beq.n	8013f28 <tcp_input_delayed_close+0x50>
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f1c:	687a      	ldr	r2, [r7, #4]
 8013f1e:	6912      	ldr	r2, [r2, #16]
 8013f20:	f06f 010e 	mvn.w	r1, #14
 8013f24:	4610      	mov	r0, r2
 8013f26:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f28:	6879      	ldr	r1, [r7, #4]
 8013f2a:	480a      	ldr	r0, [pc, #40]	; (8013f54 <tcp_input_delayed_close+0x7c>)
 8013f2c:	f7ff fa52 	bl	80133d4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f7fd fe37 	bl	8011ba4 <tcp_free>
    return 1;
 8013f36:	2301      	movs	r3, #1
 8013f38:	e000      	b.n	8013f3c <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013f3a:	2300      	movs	r3, #0
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3708      	adds	r7, #8
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}
 8013f44:	08020354 	.word	0x08020354
 8013f48:	08020524 	.word	0x08020524
 8013f4c:	080203a0 	.word	0x080203a0
 8013f50:	20004821 	.word	0x20004821
 8013f54:	2000d7bc 	.word	0x2000d7bc

08013f58 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013f58:	b590      	push	{r4, r7, lr}
 8013f5a:	b08b      	sub	sp, #44	; 0x2c
 8013f5c:	af04      	add	r7, sp, #16
 8013f5e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013f60:	4b6f      	ldr	r3, [pc, #444]	; (8014120 <tcp_listen_input+0x1c8>)
 8013f62:	781b      	ldrb	r3, [r3, #0]
 8013f64:	f003 0304 	and.w	r3, r3, #4
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f040 80d2 	bne.w	8014112 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d106      	bne.n	8013f82 <tcp_listen_input+0x2a>
 8013f74:	4b6b      	ldr	r3, [pc, #428]	; (8014124 <tcp_listen_input+0x1cc>)
 8013f76:	f240 2281 	movw	r2, #641	; 0x281
 8013f7a:	496b      	ldr	r1, [pc, #428]	; (8014128 <tcp_listen_input+0x1d0>)
 8013f7c:	486b      	ldr	r0, [pc, #428]	; (801412c <tcp_listen_input+0x1d4>)
 8013f7e:	f007 fe85 	bl	801bc8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f82:	4b67      	ldr	r3, [pc, #412]	; (8014120 <tcp_listen_input+0x1c8>)
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	f003 0310 	and.w	r3, r3, #16
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d019      	beq.n	8013fc2 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f8e:	4b68      	ldr	r3, [pc, #416]	; (8014130 <tcp_listen_input+0x1d8>)
 8013f90:	6819      	ldr	r1, [r3, #0]
 8013f92:	4b68      	ldr	r3, [pc, #416]	; (8014134 <tcp_listen_input+0x1dc>)
 8013f94:	881b      	ldrh	r3, [r3, #0]
 8013f96:	461a      	mov	r2, r3
 8013f98:	4b67      	ldr	r3, [pc, #412]	; (8014138 <tcp_listen_input+0x1e0>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f9e:	4b67      	ldr	r3, [pc, #412]	; (801413c <tcp_listen_input+0x1e4>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fa2:	885b      	ldrh	r3, [r3, #2]
 8013fa4:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fa6:	4a65      	ldr	r2, [pc, #404]	; (801413c <tcp_listen_input+0x1e4>)
 8013fa8:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013faa:	8812      	ldrh	r2, [r2, #0]
 8013fac:	b292      	uxth	r2, r2
 8013fae:	9202      	str	r2, [sp, #8]
 8013fb0:	9301      	str	r3, [sp, #4]
 8013fb2:	4b63      	ldr	r3, [pc, #396]	; (8014140 <tcp_listen_input+0x1e8>)
 8013fb4:	9300      	str	r3, [sp, #0]
 8013fb6:	4b63      	ldr	r3, [pc, #396]	; (8014144 <tcp_listen_input+0x1ec>)
 8013fb8:	4602      	mov	r2, r0
 8013fba:	6878      	ldr	r0, [r7, #4]
 8013fbc:	f003 fbd6 	bl	801776c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013fc0:	e0a9      	b.n	8014116 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013fc2:	4b57      	ldr	r3, [pc, #348]	; (8014120 <tcp_listen_input+0x1c8>)
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	f003 0302 	and.w	r3, r3, #2
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	f000 80a3 	beq.w	8014116 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	7d5b      	ldrb	r3, [r3, #21]
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7ff f85b 	bl	8013090 <tcp_alloc>
 8013fda:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d111      	bne.n	8014006 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	699b      	ldr	r3, [r3, #24]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d00a      	beq.n	8014000 <tcp_listen_input+0xa8>
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	699b      	ldr	r3, [r3, #24]
 8013fee:	687a      	ldr	r2, [r7, #4]
 8013ff0:	6910      	ldr	r0, [r2, #16]
 8013ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8013ff6:	2100      	movs	r1, #0
 8013ff8:	4798      	blx	r3
 8013ffa:	4603      	mov	r3, r0
 8013ffc:	73bb      	strb	r3, [r7, #14]
      return;
 8013ffe:	e08b      	b.n	8014118 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014000:	23f0      	movs	r3, #240	; 0xf0
 8014002:	73bb      	strb	r3, [r7, #14]
      return;
 8014004:	e088      	b.n	8014118 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014006:	4b50      	ldr	r3, [pc, #320]	; (8014148 <tcp_listen_input+0x1f0>)
 8014008:	695a      	ldr	r2, [r3, #20]
 801400a:	697b      	ldr	r3, [r7, #20]
 801400c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801400e:	4b4e      	ldr	r3, [pc, #312]	; (8014148 <tcp_listen_input+0x1f0>)
 8014010:	691a      	ldr	r2, [r3, #16]
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	8ada      	ldrh	r2, [r3, #22]
 801401a:	697b      	ldr	r3, [r7, #20]
 801401c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801401e:	4b47      	ldr	r3, [pc, #284]	; (801413c <tcp_listen_input+0x1e4>)
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	b29a      	uxth	r2, r3
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2203      	movs	r2, #3
 801402e:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014030:	4b41      	ldr	r3, [pc, #260]	; (8014138 <tcp_listen_input+0x1e0>)
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	1c5a      	adds	r2, r3, #1
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8014042:	6978      	ldr	r0, [r7, #20]
 8014044:	f7ff fa5a 	bl	80134fc <tcp_next_iss>
 8014048:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801404a:	697b      	ldr	r3, [r7, #20]
 801404c:	693a      	ldr	r2, [r7, #16]
 801404e:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	693a      	ldr	r2, [r7, #16]
 8014054:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	693a      	ldr	r2, [r7, #16]
 801405a:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	693a      	ldr	r2, [r7, #16]
 8014060:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014062:	4b35      	ldr	r3, [pc, #212]	; (8014138 <tcp_listen_input+0x1e0>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	1e5a      	subs	r2, r3, #1
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	691a      	ldr	r2, [r3, #16]
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	7a5b      	ldrb	r3, [r3, #9]
 801407e:	f003 030c 	and.w	r3, r3, #12
 8014082:	b2da      	uxtb	r2, r3
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	7a1a      	ldrb	r2, [r3, #8]
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014090:	4b2e      	ldr	r3, [pc, #184]	; (801414c <tcp_listen_input+0x1f4>)
 8014092:	681a      	ldr	r2, [r3, #0]
 8014094:	697b      	ldr	r3, [r7, #20]
 8014096:	60da      	str	r2, [r3, #12]
 8014098:	4a2c      	ldr	r2, [pc, #176]	; (801414c <tcp_listen_input+0x1f4>)
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	6013      	str	r3, [r2, #0]
 801409e:	f003 fd27 	bl	8017af0 <tcp_timer_needed>
 80140a2:	4b2b      	ldr	r3, [pc, #172]	; (8014150 <tcp_listen_input+0x1f8>)
 80140a4:	2201      	movs	r2, #1
 80140a6:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80140a8:	6978      	ldr	r0, [r7, #20]
 80140aa:	f001 fd8d 	bl	8015bc8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80140ae:	4b23      	ldr	r3, [pc, #140]	; (801413c <tcp_listen_input+0x1e4>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	89db      	ldrh	r3, [r3, #14]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140c2:	697b      	ldr	r3, [r7, #20]
 80140c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80140cc:	697b      	ldr	r3, [r7, #20]
 80140ce:	3304      	adds	r3, #4
 80140d0:	4618      	mov	r0, r3
 80140d2:	f005 fc4b 	bl	801996c <ip4_route>
 80140d6:	4601      	mov	r1, r0
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	3304      	adds	r3, #4
 80140dc:	461a      	mov	r2, r3
 80140de:	4620      	mov	r0, r4
 80140e0:	f7ff fa32 	bl	8013548 <tcp_eff_send_mss_netif>
 80140e4:	4603      	mov	r3, r0
 80140e6:	461a      	mov	r2, r3
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80140ec:	2112      	movs	r1, #18
 80140ee:	6978      	ldr	r0, [r7, #20]
 80140f0:	f002 fc9a 	bl	8016a28 <tcp_enqueue_flags>
 80140f4:	4603      	mov	r3, r0
 80140f6:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80140f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d004      	beq.n	801410a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014100:	2100      	movs	r1, #0
 8014102:	6978      	ldr	r0, [r7, #20]
 8014104:	f7fd ffd4 	bl	80120b0 <tcp_abandon>
      return;
 8014108:	e006      	b.n	8014118 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801410a:	6978      	ldr	r0, [r7, #20]
 801410c:	f002 fd7a 	bl	8016c04 <tcp_output>
  return;
 8014110:	e001      	b.n	8014116 <tcp_listen_input+0x1be>
    return;
 8014112:	bf00      	nop
 8014114:	e000      	b.n	8014118 <tcp_listen_input+0x1c0>
  return;
 8014116:	bf00      	nop
}
 8014118:	371c      	adds	r7, #28
 801411a:	46bd      	mov	sp, r7
 801411c:	bd90      	pop	{r4, r7, pc}
 801411e:	bf00      	nop
 8014120:	20004820 	.word	0x20004820
 8014124:	08020354 	.word	0x08020354
 8014128:	0802054c 	.word	0x0802054c
 801412c:	080203a0 	.word	0x080203a0
 8014130:	20004818 	.word	0x20004818
 8014134:	2000481e 	.word	0x2000481e
 8014138:	20004814 	.word	0x20004814
 801413c:	20004804 	.word	0x20004804
 8014140:	2000a0b8 	.word	0x2000a0b8
 8014144:	2000a0bc 	.word	0x2000a0bc
 8014148:	2000a0a8 	.word	0x2000a0a8
 801414c:	2000d7bc 	.word	0x2000d7bc
 8014150:	2000d7b8 	.word	0x2000d7b8

08014154 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014154:	b580      	push	{r7, lr}
 8014156:	b086      	sub	sp, #24
 8014158:	af04      	add	r7, sp, #16
 801415a:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801415c:	4b2f      	ldr	r3, [pc, #188]	; (801421c <tcp_timewait_input+0xc8>)
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	f003 0304 	and.w	r3, r3, #4
 8014164:	2b00      	cmp	r3, #0
 8014166:	d153      	bne.n	8014210 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2b00      	cmp	r3, #0
 801416c:	d106      	bne.n	801417c <tcp_timewait_input+0x28>
 801416e:	4b2c      	ldr	r3, [pc, #176]	; (8014220 <tcp_timewait_input+0xcc>)
 8014170:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014174:	492b      	ldr	r1, [pc, #172]	; (8014224 <tcp_timewait_input+0xd0>)
 8014176:	482c      	ldr	r0, [pc, #176]	; (8014228 <tcp_timewait_input+0xd4>)
 8014178:	f007 fd88 	bl	801bc8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801417c:	4b27      	ldr	r3, [pc, #156]	; (801421c <tcp_timewait_input+0xc8>)
 801417e:	781b      	ldrb	r3, [r3, #0]
 8014180:	f003 0302 	and.w	r3, r3, #2
 8014184:	2b00      	cmp	r3, #0
 8014186:	d02a      	beq.n	80141de <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014188:	4b28      	ldr	r3, [pc, #160]	; (801422c <tcp_timewait_input+0xd8>)
 801418a:	681a      	ldr	r2, [r3, #0]
 801418c:	687b      	ldr	r3, [r7, #4]
 801418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	db2d      	blt.n	80141f2 <tcp_timewait_input+0x9e>
 8014196:	4b25      	ldr	r3, [pc, #148]	; (801422c <tcp_timewait_input+0xd8>)
 8014198:	681a      	ldr	r2, [r3, #0]
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801419e:	6879      	ldr	r1, [r7, #4]
 80141a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141a2:	440b      	add	r3, r1
 80141a4:	1ad3      	subs	r3, r2, r3
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	dc23      	bgt.n	80141f2 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141aa:	4b21      	ldr	r3, [pc, #132]	; (8014230 <tcp_timewait_input+0xdc>)
 80141ac:	6819      	ldr	r1, [r3, #0]
 80141ae:	4b21      	ldr	r3, [pc, #132]	; (8014234 <tcp_timewait_input+0xe0>)
 80141b0:	881b      	ldrh	r3, [r3, #0]
 80141b2:	461a      	mov	r2, r3
 80141b4:	4b1d      	ldr	r3, [pc, #116]	; (801422c <tcp_timewait_input+0xd8>)
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141ba:	4b1f      	ldr	r3, [pc, #124]	; (8014238 <tcp_timewait_input+0xe4>)
 80141bc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141be:	885b      	ldrh	r3, [r3, #2]
 80141c0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141c2:	4a1d      	ldr	r2, [pc, #116]	; (8014238 <tcp_timewait_input+0xe4>)
 80141c4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141c6:	8812      	ldrh	r2, [r2, #0]
 80141c8:	b292      	uxth	r2, r2
 80141ca:	9202      	str	r2, [sp, #8]
 80141cc:	9301      	str	r3, [sp, #4]
 80141ce:	4b1b      	ldr	r3, [pc, #108]	; (801423c <tcp_timewait_input+0xe8>)
 80141d0:	9300      	str	r3, [sp, #0]
 80141d2:	4b1b      	ldr	r3, [pc, #108]	; (8014240 <tcp_timewait_input+0xec>)
 80141d4:	4602      	mov	r2, r0
 80141d6:	6878      	ldr	r0, [r7, #4]
 80141d8:	f003 fac8 	bl	801776c <tcp_rst>
      return;
 80141dc:	e01b      	b.n	8014216 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80141de:	4b0f      	ldr	r3, [pc, #60]	; (801421c <tcp_timewait_input+0xc8>)
 80141e0:	781b      	ldrb	r3, [r3, #0]
 80141e2:	f003 0301 	and.w	r3, r3, #1
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d003      	beq.n	80141f2 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80141ea:	4b16      	ldr	r3, [pc, #88]	; (8014244 <tcp_timewait_input+0xf0>)
 80141ec:	681a      	ldr	r2, [r3, #0]
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80141f2:	4b10      	ldr	r3, [pc, #64]	; (8014234 <tcp_timewait_input+0xe0>)
 80141f4:	881b      	ldrh	r3, [r3, #0]
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d00c      	beq.n	8014214 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	8b5b      	ldrh	r3, [r3, #26]
 80141fe:	f043 0302 	orr.w	r3, r3, #2
 8014202:	b29a      	uxth	r2, r3
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014208:	6878      	ldr	r0, [r7, #4]
 801420a:	f002 fcfb 	bl	8016c04 <tcp_output>
  }
  return;
 801420e:	e001      	b.n	8014214 <tcp_timewait_input+0xc0>
    return;
 8014210:	bf00      	nop
 8014212:	e000      	b.n	8014216 <tcp_timewait_input+0xc2>
  return;
 8014214:	bf00      	nop
}
 8014216:	3708      	adds	r7, #8
 8014218:	46bd      	mov	sp, r7
 801421a:	bd80      	pop	{r7, pc}
 801421c:	20004820 	.word	0x20004820
 8014220:	08020354 	.word	0x08020354
 8014224:	0802056c 	.word	0x0802056c
 8014228:	080203a0 	.word	0x080203a0
 801422c:	20004814 	.word	0x20004814
 8014230:	20004818 	.word	0x20004818
 8014234:	2000481e 	.word	0x2000481e
 8014238:	20004804 	.word	0x20004804
 801423c:	2000a0b8 	.word	0x2000a0b8
 8014240:	2000a0bc 	.word	0x2000a0bc
 8014244:	2000d7c0 	.word	0x2000d7c0

08014248 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014248:	b590      	push	{r4, r7, lr}
 801424a:	b08d      	sub	sp, #52	; 0x34
 801424c:	af04      	add	r7, sp, #16
 801424e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014250:	2300      	movs	r3, #0
 8014252:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014254:	2300      	movs	r3, #0
 8014256:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2b00      	cmp	r3, #0
 801425c:	d106      	bne.n	801426c <tcp_process+0x24>
 801425e:	4ba5      	ldr	r3, [pc, #660]	; (80144f4 <tcp_process+0x2ac>)
 8014260:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014264:	49a4      	ldr	r1, [pc, #656]	; (80144f8 <tcp_process+0x2b0>)
 8014266:	48a5      	ldr	r0, [pc, #660]	; (80144fc <tcp_process+0x2b4>)
 8014268:	f007 fd10 	bl	801bc8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801426c:	4ba4      	ldr	r3, [pc, #656]	; (8014500 <tcp_process+0x2b8>)
 801426e:	781b      	ldrb	r3, [r3, #0]
 8014270:	f003 0304 	and.w	r3, r3, #4
 8014274:	2b00      	cmp	r3, #0
 8014276:	d04e      	beq.n	8014316 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	7d1b      	ldrb	r3, [r3, #20]
 801427c:	2b02      	cmp	r3, #2
 801427e:	d108      	bne.n	8014292 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014284:	4b9f      	ldr	r3, [pc, #636]	; (8014504 <tcp_process+0x2bc>)
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	429a      	cmp	r2, r3
 801428a:	d123      	bne.n	80142d4 <tcp_process+0x8c>
        acceptable = 1;
 801428c:	2301      	movs	r3, #1
 801428e:	76fb      	strb	r3, [r7, #27]
 8014290:	e020      	b.n	80142d4 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014296:	4b9c      	ldr	r3, [pc, #624]	; (8014508 <tcp_process+0x2c0>)
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	429a      	cmp	r2, r3
 801429c:	d102      	bne.n	80142a4 <tcp_process+0x5c>
        acceptable = 1;
 801429e:	2301      	movs	r3, #1
 80142a0:	76fb      	strb	r3, [r7, #27]
 80142a2:	e017      	b.n	80142d4 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142a4:	4b98      	ldr	r3, [pc, #608]	; (8014508 <tcp_process+0x2c0>)
 80142a6:	681a      	ldr	r2, [r3, #0]
 80142a8:	687b      	ldr	r3, [r7, #4]
 80142aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ac:	1ad3      	subs	r3, r2, r3
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	db10      	blt.n	80142d4 <tcp_process+0x8c>
 80142b2:	4b95      	ldr	r3, [pc, #596]	; (8014508 <tcp_process+0x2c0>)
 80142b4:	681a      	ldr	r2, [r3, #0]
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142ba:	6879      	ldr	r1, [r7, #4]
 80142bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142be:	440b      	add	r3, r1
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	2b00      	cmp	r3, #0
 80142c4:	dc06      	bgt.n	80142d4 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	8b5b      	ldrh	r3, [r3, #26]
 80142ca:	f043 0302 	orr.w	r3, r3, #2
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80142d4:	7efb      	ldrb	r3, [r7, #27]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d01b      	beq.n	8014312 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	7d1b      	ldrb	r3, [r3, #20]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d106      	bne.n	80142f0 <tcp_process+0xa8>
 80142e2:	4b84      	ldr	r3, [pc, #528]	; (80144f4 <tcp_process+0x2ac>)
 80142e4:	f44f 724e 	mov.w	r2, #824	; 0x338
 80142e8:	4988      	ldr	r1, [pc, #544]	; (801450c <tcp_process+0x2c4>)
 80142ea:	4884      	ldr	r0, [pc, #528]	; (80144fc <tcp_process+0x2b4>)
 80142ec:	f007 fcce 	bl	801bc8c <iprintf>
      recv_flags |= TF_RESET;
 80142f0:	4b87      	ldr	r3, [pc, #540]	; (8014510 <tcp_process+0x2c8>)
 80142f2:	781b      	ldrb	r3, [r3, #0]
 80142f4:	f043 0308 	orr.w	r3, r3, #8
 80142f8:	b2da      	uxtb	r2, r3
 80142fa:	4b85      	ldr	r3, [pc, #532]	; (8014510 <tcp_process+0x2c8>)
 80142fc:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	8b5b      	ldrh	r3, [r3, #26]
 8014302:	f023 0301 	bic.w	r3, r3, #1
 8014306:	b29a      	uxth	r2, r3
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801430c:	f06f 030d 	mvn.w	r3, #13
 8014310:	e37a      	b.n	8014a08 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014312:	2300      	movs	r3, #0
 8014314:	e378      	b.n	8014a08 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014316:	4b7a      	ldr	r3, [pc, #488]	; (8014500 <tcp_process+0x2b8>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	f003 0302 	and.w	r3, r3, #2
 801431e:	2b00      	cmp	r3, #0
 8014320:	d010      	beq.n	8014344 <tcp_process+0xfc>
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	7d1b      	ldrb	r3, [r3, #20]
 8014326:	2b02      	cmp	r3, #2
 8014328:	d00c      	beq.n	8014344 <tcp_process+0xfc>
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	7d1b      	ldrb	r3, [r3, #20]
 801432e:	2b03      	cmp	r3, #3
 8014330:	d008      	beq.n	8014344 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	8b5b      	ldrh	r3, [r3, #26]
 8014336:	f043 0302 	orr.w	r3, r3, #2
 801433a:	b29a      	uxth	r2, r3
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014340:	2300      	movs	r3, #0
 8014342:	e361      	b.n	8014a08 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	8b5b      	ldrh	r3, [r3, #26]
 8014348:	f003 0310 	and.w	r3, r3, #16
 801434c:	2b00      	cmp	r3, #0
 801434e:	d103      	bne.n	8014358 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014350:	4b70      	ldr	r3, [pc, #448]	; (8014514 <tcp_process+0x2cc>)
 8014352:	681a      	ldr	r2, [r3, #0]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2200      	movs	r2, #0
 801435c:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2200      	movs	r2, #0
 8014364:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f001 fc2d 	bl	8015bc8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	7d1b      	ldrb	r3, [r3, #20]
 8014372:	3b02      	subs	r3, #2
 8014374:	2b07      	cmp	r3, #7
 8014376:	f200 8337 	bhi.w	80149e8 <tcp_process+0x7a0>
 801437a:	a201      	add	r2, pc, #4	; (adr r2, 8014380 <tcp_process+0x138>)
 801437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014380:	080143a1 	.word	0x080143a1
 8014384:	080145d1 	.word	0x080145d1
 8014388:	08014749 	.word	0x08014749
 801438c:	08014773 	.word	0x08014773
 8014390:	08014897 	.word	0x08014897
 8014394:	08014749 	.word	0x08014749
 8014398:	08014923 	.word	0x08014923
 801439c:	080149b3 	.word	0x080149b3
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80143a0:	4b57      	ldr	r3, [pc, #348]	; (8014500 <tcp_process+0x2b8>)
 80143a2:	781b      	ldrb	r3, [r3, #0]
 80143a4:	f003 0310 	and.w	r3, r3, #16
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	f000 80e4 	beq.w	8014576 <tcp_process+0x32e>
 80143ae:	4b54      	ldr	r3, [pc, #336]	; (8014500 <tcp_process+0x2b8>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	f003 0302 	and.w	r3, r3, #2
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	f000 80dd 	beq.w	8014576 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143c0:	1c5a      	adds	r2, r3, #1
 80143c2:	4b50      	ldr	r3, [pc, #320]	; (8014504 <tcp_process+0x2bc>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	429a      	cmp	r2, r3
 80143c8:	f040 80d5 	bne.w	8014576 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80143cc:	4b4e      	ldr	r3, [pc, #312]	; (8014508 <tcp_process+0x2c0>)
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	1c5a      	adds	r2, r3, #1
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80143de:	4b49      	ldr	r3, [pc, #292]	; (8014504 <tcp_process+0x2bc>)
 80143e0:	681a      	ldr	r2, [r3, #0]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80143e6:	4b4c      	ldr	r3, [pc, #304]	; (8014518 <tcp_process+0x2d0>)
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	89db      	ldrh	r3, [r3, #14]
 80143ec:	b29a      	uxth	r2, r3
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014400:	4b41      	ldr	r3, [pc, #260]	; (8014508 <tcp_process+0x2c0>)
 8014402:	681b      	ldr	r3, [r3, #0]
 8014404:	1e5a      	subs	r2, r3, #1
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	2204      	movs	r2, #4
 801440e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	3304      	adds	r3, #4
 8014418:	4618      	mov	r0, r3
 801441a:	f005 faa7 	bl	801996c <ip4_route>
 801441e:	4601      	mov	r1, r0
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	3304      	adds	r3, #4
 8014424:	461a      	mov	r2, r3
 8014426:	4620      	mov	r0, r4
 8014428:	f7ff f88e 	bl	8013548 <tcp_eff_send_mss_netif>
 801442c:	4603      	mov	r3, r0
 801442e:	461a      	mov	r2, r3
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014438:	009a      	lsls	r2, r3, #2
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801443e:	005b      	lsls	r3, r3, #1
 8014440:	f241 111c 	movw	r1, #4380	; 0x111c
 8014444:	428b      	cmp	r3, r1
 8014446:	bf38      	it	cc
 8014448:	460b      	movcc	r3, r1
 801444a:	429a      	cmp	r2, r3
 801444c:	d204      	bcs.n	8014458 <tcp_process+0x210>
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014452:	009b      	lsls	r3, r3, #2
 8014454:	b29b      	uxth	r3, r3
 8014456:	e00d      	b.n	8014474 <tcp_process+0x22c>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014462:	4293      	cmp	r3, r2
 8014464:	d904      	bls.n	8014470 <tcp_process+0x228>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	b29b      	uxth	r3, r3
 801446e:	e001      	b.n	8014474 <tcp_process+0x22c>
 8014470:	f241 131c 	movw	r3, #4380	; 0x111c
 8014474:	687a      	ldr	r2, [r7, #4]
 8014476:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014480:	2b00      	cmp	r3, #0
 8014482:	d106      	bne.n	8014492 <tcp_process+0x24a>
 8014484:	4b1b      	ldr	r3, [pc, #108]	; (80144f4 <tcp_process+0x2ac>)
 8014486:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801448a:	4924      	ldr	r1, [pc, #144]	; (801451c <tcp_process+0x2d4>)
 801448c:	481b      	ldr	r0, [pc, #108]	; (80144fc <tcp_process+0x2b4>)
 801448e:	f007 fbfd 	bl	801bc8c <iprintf>
        --pcb->snd_queuelen;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014498:	3b01      	subs	r3, #1
 801449a:	b29a      	uxth	r2, r3
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144a6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80144a8:	69fb      	ldr	r3, [r7, #28]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d111      	bne.n	80144d2 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144b2:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80144b4:	69fb      	ldr	r3, [r7, #28]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d106      	bne.n	80144c8 <tcp_process+0x280>
 80144ba:	4b0e      	ldr	r3, [pc, #56]	; (80144f4 <tcp_process+0x2ac>)
 80144bc:	f44f 725d 	mov.w	r2, #884	; 0x374
 80144c0:	4917      	ldr	r1, [pc, #92]	; (8014520 <tcp_process+0x2d8>)
 80144c2:	480e      	ldr	r0, [pc, #56]	; (80144fc <tcp_process+0x2b4>)
 80144c4:	f007 fbe2 	bl	801bc8c <iprintf>
          pcb->unsent = rseg->next;
 80144c8:	69fb      	ldr	r3, [r7, #28]
 80144ca:	681a      	ldr	r2, [r3, #0]
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	66da      	str	r2, [r3, #108]	; 0x6c
 80144d0:	e003      	b.n	80144da <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80144d2:	69fb      	ldr	r3, [r7, #28]
 80144d4:	681a      	ldr	r2, [r3, #0]
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80144da:	69f8      	ldr	r0, [r7, #28]
 80144dc:	f7fe fc6f 	bl	8012dbe <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d11d      	bne.n	8014524 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80144ee:	861a      	strh	r2, [r3, #48]	; 0x30
 80144f0:	e01f      	b.n	8014532 <tcp_process+0x2ea>
 80144f2:	bf00      	nop
 80144f4:	08020354 	.word	0x08020354
 80144f8:	0802058c 	.word	0x0802058c
 80144fc:	080203a0 	.word	0x080203a0
 8014500:	20004820 	.word	0x20004820
 8014504:	20004818 	.word	0x20004818
 8014508:	20004814 	.word	0x20004814
 801450c:	080205a8 	.word	0x080205a8
 8014510:	20004821 	.word	0x20004821
 8014514:	2000d7c0 	.word	0x2000d7c0
 8014518:	20004804 	.word	0x20004804
 801451c:	080205c8 	.word	0x080205c8
 8014520:	080205e0 	.word	0x080205e0
        } else {
          pcb->rtime = 0;
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014538:	2b00      	cmp	r3, #0
 801453a:	d00a      	beq.n	8014552 <tcp_process+0x30a>
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014542:	687a      	ldr	r2, [r7, #4]
 8014544:	6910      	ldr	r0, [r2, #16]
 8014546:	2200      	movs	r2, #0
 8014548:	6879      	ldr	r1, [r7, #4]
 801454a:	4798      	blx	r3
 801454c:	4603      	mov	r3, r0
 801454e:	76bb      	strb	r3, [r7, #26]
 8014550:	e001      	b.n	8014556 <tcp_process+0x30e>
 8014552:	2300      	movs	r3, #0
 8014554:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014556:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801455a:	f113 0f0d 	cmn.w	r3, #13
 801455e:	d102      	bne.n	8014566 <tcp_process+0x31e>
          return ERR_ABRT;
 8014560:	f06f 030c 	mvn.w	r3, #12
 8014564:	e250      	b.n	8014a08 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	8b5b      	ldrh	r3, [r3, #26]
 801456a:	f043 0302 	orr.w	r3, r3, #2
 801456e:	b29a      	uxth	r2, r3
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014574:	e23a      	b.n	80149ec <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014576:	4b9d      	ldr	r3, [pc, #628]	; (80147ec <tcp_process+0x5a4>)
 8014578:	781b      	ldrb	r3, [r3, #0]
 801457a:	f003 0310 	and.w	r3, r3, #16
 801457e:	2b00      	cmp	r3, #0
 8014580:	f000 8234 	beq.w	80149ec <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014584:	4b9a      	ldr	r3, [pc, #616]	; (80147f0 <tcp_process+0x5a8>)
 8014586:	6819      	ldr	r1, [r3, #0]
 8014588:	4b9a      	ldr	r3, [pc, #616]	; (80147f4 <tcp_process+0x5ac>)
 801458a:	881b      	ldrh	r3, [r3, #0]
 801458c:	461a      	mov	r2, r3
 801458e:	4b9a      	ldr	r3, [pc, #616]	; (80147f8 <tcp_process+0x5b0>)
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014594:	4b99      	ldr	r3, [pc, #612]	; (80147fc <tcp_process+0x5b4>)
 8014596:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014598:	885b      	ldrh	r3, [r3, #2]
 801459a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801459c:	4a97      	ldr	r2, [pc, #604]	; (80147fc <tcp_process+0x5b4>)
 801459e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145a0:	8812      	ldrh	r2, [r2, #0]
 80145a2:	b292      	uxth	r2, r2
 80145a4:	9202      	str	r2, [sp, #8]
 80145a6:	9301      	str	r3, [sp, #4]
 80145a8:	4b95      	ldr	r3, [pc, #596]	; (8014800 <tcp_process+0x5b8>)
 80145aa:	9300      	str	r3, [sp, #0]
 80145ac:	4b95      	ldr	r3, [pc, #596]	; (8014804 <tcp_process+0x5bc>)
 80145ae:	4602      	mov	r2, r0
 80145b0:	6878      	ldr	r0, [r7, #4]
 80145b2:	f003 f8db 	bl	801776c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145bc:	2b05      	cmp	r3, #5
 80145be:	f200 8215 	bhi.w	80149ec <tcp_process+0x7a4>
          pcb->rtime = 0;
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2200      	movs	r2, #0
 80145c6:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f002 fea5 	bl	8017318 <tcp_rexmit_rto>
      break;
 80145ce:	e20d      	b.n	80149ec <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80145d0:	4b86      	ldr	r3, [pc, #536]	; (80147ec <tcp_process+0x5a4>)
 80145d2:	781b      	ldrb	r3, [r3, #0]
 80145d4:	f003 0310 	and.w	r3, r3, #16
 80145d8:	2b00      	cmp	r3, #0
 80145da:	f000 80a1 	beq.w	8014720 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145de:	4b84      	ldr	r3, [pc, #528]	; (80147f0 <tcp_process+0x5a8>)
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145e6:	1ad3      	subs	r3, r2, r3
 80145e8:	3b01      	subs	r3, #1
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	db7e      	blt.n	80146ec <tcp_process+0x4a4>
 80145ee:	4b80      	ldr	r3, [pc, #512]	; (80147f0 <tcp_process+0x5a8>)
 80145f0:	681a      	ldr	r2, [r3, #0]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f6:	1ad3      	subs	r3, r2, r3
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	dc77      	bgt.n	80146ec <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2204      	movs	r2, #4
 8014600:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014606:	2b00      	cmp	r3, #0
 8014608:	d102      	bne.n	8014610 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801460a:	23fa      	movs	r3, #250	; 0xfa
 801460c:	76bb      	strb	r3, [r7, #26]
 801460e:	e01d      	b.n	801464c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014614:	699b      	ldr	r3, [r3, #24]
 8014616:	2b00      	cmp	r3, #0
 8014618:	d106      	bne.n	8014628 <tcp_process+0x3e0>
 801461a:	4b7b      	ldr	r3, [pc, #492]	; (8014808 <tcp_process+0x5c0>)
 801461c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014620:	497a      	ldr	r1, [pc, #488]	; (801480c <tcp_process+0x5c4>)
 8014622:	487b      	ldr	r0, [pc, #492]	; (8014810 <tcp_process+0x5c8>)
 8014624:	f007 fb32 	bl	801bc8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801462c:	699b      	ldr	r3, [r3, #24]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00a      	beq.n	8014648 <tcp_process+0x400>
 8014632:	687b      	ldr	r3, [r7, #4]
 8014634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014636:	699b      	ldr	r3, [r3, #24]
 8014638:	687a      	ldr	r2, [r7, #4]
 801463a:	6910      	ldr	r0, [r2, #16]
 801463c:	2200      	movs	r2, #0
 801463e:	6879      	ldr	r1, [r7, #4]
 8014640:	4798      	blx	r3
 8014642:	4603      	mov	r3, r0
 8014644:	76bb      	strb	r3, [r7, #26]
 8014646:	e001      	b.n	801464c <tcp_process+0x404>
 8014648:	23f0      	movs	r3, #240	; 0xf0
 801464a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801464c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014650:	2b00      	cmp	r3, #0
 8014652:	d00a      	beq.n	801466a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014654:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014658:	f113 0f0d 	cmn.w	r3, #13
 801465c:	d002      	beq.n	8014664 <tcp_process+0x41c>
              tcp_abort(pcb);
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f7fd fde4 	bl	801222c <tcp_abort>
            }
            return ERR_ABRT;
 8014664:	f06f 030c 	mvn.w	r3, #12
 8014668:	e1ce      	b.n	8014a08 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801466a:	6878      	ldr	r0, [r7, #4]
 801466c:	f000 fae0 	bl	8014c30 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014670:	4b68      	ldr	r3, [pc, #416]	; (8014814 <tcp_process+0x5cc>)
 8014672:	881b      	ldrh	r3, [r3, #0]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d005      	beq.n	8014684 <tcp_process+0x43c>
            recv_acked--;
 8014678:	4b66      	ldr	r3, [pc, #408]	; (8014814 <tcp_process+0x5cc>)
 801467a:	881b      	ldrh	r3, [r3, #0]
 801467c:	3b01      	subs	r3, #1
 801467e:	b29a      	uxth	r2, r3
 8014680:	4b64      	ldr	r3, [pc, #400]	; (8014814 <tcp_process+0x5cc>)
 8014682:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014688:	009a      	lsls	r2, r3, #2
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801468e:	005b      	lsls	r3, r3, #1
 8014690:	f241 111c 	movw	r1, #4380	; 0x111c
 8014694:	428b      	cmp	r3, r1
 8014696:	bf38      	it	cc
 8014698:	460b      	movcc	r3, r1
 801469a:	429a      	cmp	r2, r3
 801469c:	d204      	bcs.n	80146a8 <tcp_process+0x460>
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	b29b      	uxth	r3, r3
 80146a6:	e00d      	b.n	80146c4 <tcp_process+0x47c>
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ac:	005b      	lsls	r3, r3, #1
 80146ae:	f241 121c 	movw	r2, #4380	; 0x111c
 80146b2:	4293      	cmp	r3, r2
 80146b4:	d904      	bls.n	80146c0 <tcp_process+0x478>
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ba:	005b      	lsls	r3, r3, #1
 80146bc:	b29b      	uxth	r3, r3
 80146be:	e001      	b.n	80146c4 <tcp_process+0x47c>
 80146c0:	f241 131c 	movw	r3, #4380	; 0x111c
 80146c4:	687a      	ldr	r2, [r7, #4]
 80146c6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80146ca:	4b53      	ldr	r3, [pc, #332]	; (8014818 <tcp_process+0x5d0>)
 80146cc:	781b      	ldrb	r3, [r3, #0]
 80146ce:	f003 0320 	and.w	r3, r3, #32
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d037      	beq.n	8014746 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	8b5b      	ldrh	r3, [r3, #26]
 80146da:	f043 0302 	orr.w	r3, r3, #2
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	2207      	movs	r2, #7
 80146e8:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80146ea:	e02c      	b.n	8014746 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80146ec:	4b40      	ldr	r3, [pc, #256]	; (80147f0 <tcp_process+0x5a8>)
 80146ee:	6819      	ldr	r1, [r3, #0]
 80146f0:	4b40      	ldr	r3, [pc, #256]	; (80147f4 <tcp_process+0x5ac>)
 80146f2:	881b      	ldrh	r3, [r3, #0]
 80146f4:	461a      	mov	r2, r3
 80146f6:	4b40      	ldr	r3, [pc, #256]	; (80147f8 <tcp_process+0x5b0>)
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80146fc:	4b3f      	ldr	r3, [pc, #252]	; (80147fc <tcp_process+0x5b4>)
 80146fe:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014700:	885b      	ldrh	r3, [r3, #2]
 8014702:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014704:	4a3d      	ldr	r2, [pc, #244]	; (80147fc <tcp_process+0x5b4>)
 8014706:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014708:	8812      	ldrh	r2, [r2, #0]
 801470a:	b292      	uxth	r2, r2
 801470c:	9202      	str	r2, [sp, #8]
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	4b3b      	ldr	r3, [pc, #236]	; (8014800 <tcp_process+0x5b8>)
 8014712:	9300      	str	r3, [sp, #0]
 8014714:	4b3b      	ldr	r3, [pc, #236]	; (8014804 <tcp_process+0x5bc>)
 8014716:	4602      	mov	r2, r0
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	f003 f827 	bl	801776c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801471e:	e167      	b.n	80149f0 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014720:	4b32      	ldr	r3, [pc, #200]	; (80147ec <tcp_process+0x5a4>)
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	f003 0302 	and.w	r3, r3, #2
 8014728:	2b00      	cmp	r3, #0
 801472a:	f000 8161 	beq.w	80149f0 <tcp_process+0x7a8>
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014732:	1e5a      	subs	r2, r3, #1
 8014734:	4b30      	ldr	r3, [pc, #192]	; (80147f8 <tcp_process+0x5b0>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	429a      	cmp	r2, r3
 801473a:	f040 8159 	bne.w	80149f0 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801473e:	6878      	ldr	r0, [r7, #4]
 8014740:	f002 fe0c 	bl	801735c <tcp_rexmit>
      break;
 8014744:	e154      	b.n	80149f0 <tcp_process+0x7a8>
 8014746:	e153      	b.n	80149f0 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014748:	6878      	ldr	r0, [r7, #4]
 801474a:	f000 fa71 	bl	8014c30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801474e:	4b32      	ldr	r3, [pc, #200]	; (8014818 <tcp_process+0x5d0>)
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	f003 0320 	and.w	r3, r3, #32
 8014756:	2b00      	cmp	r3, #0
 8014758:	f000 814c 	beq.w	80149f4 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	8b5b      	ldrh	r3, [r3, #26]
 8014760:	f043 0302 	orr.w	r3, r3, #2
 8014764:	b29a      	uxth	r2, r3
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	2207      	movs	r2, #7
 801476e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014770:	e140      	b.n	80149f4 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8014772:	6878      	ldr	r0, [r7, #4]
 8014774:	f000 fa5c 	bl	8014c30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014778:	4b27      	ldr	r3, [pc, #156]	; (8014818 <tcp_process+0x5d0>)
 801477a:	781b      	ldrb	r3, [r3, #0]
 801477c:	f003 0320 	and.w	r3, r3, #32
 8014780:	2b00      	cmp	r3, #0
 8014782:	d071      	beq.n	8014868 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014784:	4b19      	ldr	r3, [pc, #100]	; (80147ec <tcp_process+0x5a4>)
 8014786:	781b      	ldrb	r3, [r3, #0]
 8014788:	f003 0310 	and.w	r3, r3, #16
 801478c:	2b00      	cmp	r3, #0
 801478e:	d060      	beq.n	8014852 <tcp_process+0x60a>
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014794:	4b16      	ldr	r3, [pc, #88]	; (80147f0 <tcp_process+0x5a8>)
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	429a      	cmp	r2, r3
 801479a:	d15a      	bne.n	8014852 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d156      	bne.n	8014852 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	8b5b      	ldrh	r3, [r3, #26]
 80147a8:	f043 0302 	orr.w	r3, r3, #2
 80147ac:	b29a      	uxth	r2, r3
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80147b2:	6878      	ldr	r0, [r7, #4]
 80147b4:	f7fe fdbe 	bl	8013334 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80147b8:	4b18      	ldr	r3, [pc, #96]	; (801481c <tcp_process+0x5d4>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	429a      	cmp	r2, r3
 80147c0:	d105      	bne.n	80147ce <tcp_process+0x586>
 80147c2:	4b16      	ldr	r3, [pc, #88]	; (801481c <tcp_process+0x5d4>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	68db      	ldr	r3, [r3, #12]
 80147c8:	4a14      	ldr	r2, [pc, #80]	; (801481c <tcp_process+0x5d4>)
 80147ca:	6013      	str	r3, [r2, #0]
 80147cc:	e02e      	b.n	801482c <tcp_process+0x5e4>
 80147ce:	4b13      	ldr	r3, [pc, #76]	; (801481c <tcp_process+0x5d4>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	617b      	str	r3, [r7, #20]
 80147d4:	e027      	b.n	8014826 <tcp_process+0x5de>
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	68db      	ldr	r3, [r3, #12]
 80147da:	687a      	ldr	r2, [r7, #4]
 80147dc:	429a      	cmp	r2, r3
 80147de:	d11f      	bne.n	8014820 <tcp_process+0x5d8>
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	68da      	ldr	r2, [r3, #12]
 80147e4:	697b      	ldr	r3, [r7, #20]
 80147e6:	60da      	str	r2, [r3, #12]
 80147e8:	e020      	b.n	801482c <tcp_process+0x5e4>
 80147ea:	bf00      	nop
 80147ec:	20004820 	.word	0x20004820
 80147f0:	20004818 	.word	0x20004818
 80147f4:	2000481e 	.word	0x2000481e
 80147f8:	20004814 	.word	0x20004814
 80147fc:	20004804 	.word	0x20004804
 8014800:	2000a0b8 	.word	0x2000a0b8
 8014804:	2000a0bc 	.word	0x2000a0bc
 8014808:	08020354 	.word	0x08020354
 801480c:	080205f4 	.word	0x080205f4
 8014810:	080203a0 	.word	0x080203a0
 8014814:	2000481c 	.word	0x2000481c
 8014818:	20004821 	.word	0x20004821
 801481c:	2000d7bc 	.word	0x2000d7bc
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	68db      	ldr	r3, [r3, #12]
 8014824:	617b      	str	r3, [r7, #20]
 8014826:	697b      	ldr	r3, [r7, #20]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d1d4      	bne.n	80147d6 <tcp_process+0x58e>
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2200      	movs	r2, #0
 8014830:	60da      	str	r2, [r3, #12]
 8014832:	4b77      	ldr	r3, [pc, #476]	; (8014a10 <tcp_process+0x7c8>)
 8014834:	2201      	movs	r2, #1
 8014836:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	220a      	movs	r2, #10
 801483c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801483e:	4b75      	ldr	r3, [pc, #468]	; (8014a14 <tcp_process+0x7cc>)
 8014840:	681a      	ldr	r2, [r3, #0]
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	60da      	str	r2, [r3, #12]
 8014846:	4a73      	ldr	r2, [pc, #460]	; (8014a14 <tcp_process+0x7cc>)
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	f003 f950 	bl	8017af0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014850:	e0d2      	b.n	80149f8 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	8b5b      	ldrh	r3, [r3, #26]
 8014856:	f043 0302 	orr.w	r3, r3, #2
 801485a:	b29a      	uxth	r2, r3
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	2208      	movs	r2, #8
 8014864:	751a      	strb	r2, [r3, #20]
      break;
 8014866:	e0c7      	b.n	80149f8 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014868:	4b6b      	ldr	r3, [pc, #428]	; (8014a18 <tcp_process+0x7d0>)
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	f003 0310 	and.w	r3, r3, #16
 8014870:	2b00      	cmp	r3, #0
 8014872:	f000 80c1 	beq.w	80149f8 <tcp_process+0x7b0>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801487a:	4b68      	ldr	r3, [pc, #416]	; (8014a1c <tcp_process+0x7d4>)
 801487c:	681b      	ldr	r3, [r3, #0]
 801487e:	429a      	cmp	r2, r3
 8014880:	f040 80ba 	bne.w	80149f8 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014888:	2b00      	cmp	r3, #0
 801488a:	f040 80b5 	bne.w	80149f8 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	2206      	movs	r2, #6
 8014892:	751a      	strb	r2, [r3, #20]
      break;
 8014894:	e0b0      	b.n	80149f8 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014896:	6878      	ldr	r0, [r7, #4]
 8014898:	f000 f9ca 	bl	8014c30 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801489c:	4b60      	ldr	r3, [pc, #384]	; (8014a20 <tcp_process+0x7d8>)
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	f003 0320 	and.w	r3, r3, #32
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	f000 80a9 	beq.w	80149fc <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	8b5b      	ldrh	r3, [r3, #26]
 80148ae:	f043 0302 	orr.w	r3, r3, #2
 80148b2:	b29a      	uxth	r2, r3
 80148b4:	687b      	ldr	r3, [r7, #4]
 80148b6:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80148b8:	6878      	ldr	r0, [r7, #4]
 80148ba:	f7fe fd3b 	bl	8013334 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148be:	4b59      	ldr	r3, [pc, #356]	; (8014a24 <tcp_process+0x7dc>)
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	687a      	ldr	r2, [r7, #4]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d105      	bne.n	80148d4 <tcp_process+0x68c>
 80148c8:	4b56      	ldr	r3, [pc, #344]	; (8014a24 <tcp_process+0x7dc>)
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	68db      	ldr	r3, [r3, #12]
 80148ce:	4a55      	ldr	r2, [pc, #340]	; (8014a24 <tcp_process+0x7dc>)
 80148d0:	6013      	str	r3, [r2, #0]
 80148d2:	e013      	b.n	80148fc <tcp_process+0x6b4>
 80148d4:	4b53      	ldr	r3, [pc, #332]	; (8014a24 <tcp_process+0x7dc>)
 80148d6:	681b      	ldr	r3, [r3, #0]
 80148d8:	613b      	str	r3, [r7, #16]
 80148da:	e00c      	b.n	80148f6 <tcp_process+0x6ae>
 80148dc:	693b      	ldr	r3, [r7, #16]
 80148de:	68db      	ldr	r3, [r3, #12]
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	429a      	cmp	r2, r3
 80148e4:	d104      	bne.n	80148f0 <tcp_process+0x6a8>
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	68da      	ldr	r2, [r3, #12]
 80148ea:	693b      	ldr	r3, [r7, #16]
 80148ec:	60da      	str	r2, [r3, #12]
 80148ee:	e005      	b.n	80148fc <tcp_process+0x6b4>
 80148f0:	693b      	ldr	r3, [r7, #16]
 80148f2:	68db      	ldr	r3, [r3, #12]
 80148f4:	613b      	str	r3, [r7, #16]
 80148f6:	693b      	ldr	r3, [r7, #16]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d1ef      	bne.n	80148dc <tcp_process+0x694>
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	2200      	movs	r2, #0
 8014900:	60da      	str	r2, [r3, #12]
 8014902:	4b43      	ldr	r3, [pc, #268]	; (8014a10 <tcp_process+0x7c8>)
 8014904:	2201      	movs	r2, #1
 8014906:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	220a      	movs	r2, #10
 801490c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801490e:	4b41      	ldr	r3, [pc, #260]	; (8014a14 <tcp_process+0x7cc>)
 8014910:	681a      	ldr	r2, [r3, #0]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	60da      	str	r2, [r3, #12]
 8014916:	4a3f      	ldr	r2, [pc, #252]	; (8014a14 <tcp_process+0x7cc>)
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	6013      	str	r3, [r2, #0]
 801491c:	f003 f8e8 	bl	8017af0 <tcp_timer_needed>
      }
      break;
 8014920:	e06c      	b.n	80149fc <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014922:	6878      	ldr	r0, [r7, #4]
 8014924:	f000 f984 	bl	8014c30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014928:	4b3b      	ldr	r3, [pc, #236]	; (8014a18 <tcp_process+0x7d0>)
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	f003 0310 	and.w	r3, r3, #16
 8014930:	2b00      	cmp	r3, #0
 8014932:	d065      	beq.n	8014a00 <tcp_process+0x7b8>
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014938:	4b38      	ldr	r3, [pc, #224]	; (8014a1c <tcp_process+0x7d4>)
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	429a      	cmp	r2, r3
 801493e:	d15f      	bne.n	8014a00 <tcp_process+0x7b8>
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014944:	2b00      	cmp	r3, #0
 8014946:	d15b      	bne.n	8014a00 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f7fe fcf3 	bl	8013334 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801494e:	4b35      	ldr	r3, [pc, #212]	; (8014a24 <tcp_process+0x7dc>)
 8014950:	681b      	ldr	r3, [r3, #0]
 8014952:	687a      	ldr	r2, [r7, #4]
 8014954:	429a      	cmp	r2, r3
 8014956:	d105      	bne.n	8014964 <tcp_process+0x71c>
 8014958:	4b32      	ldr	r3, [pc, #200]	; (8014a24 <tcp_process+0x7dc>)
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	4a31      	ldr	r2, [pc, #196]	; (8014a24 <tcp_process+0x7dc>)
 8014960:	6013      	str	r3, [r2, #0]
 8014962:	e013      	b.n	801498c <tcp_process+0x744>
 8014964:	4b2f      	ldr	r3, [pc, #188]	; (8014a24 <tcp_process+0x7dc>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	60fb      	str	r3, [r7, #12]
 801496a:	e00c      	b.n	8014986 <tcp_process+0x73e>
 801496c:	68fb      	ldr	r3, [r7, #12]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	687a      	ldr	r2, [r7, #4]
 8014972:	429a      	cmp	r2, r3
 8014974:	d104      	bne.n	8014980 <tcp_process+0x738>
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	68da      	ldr	r2, [r3, #12]
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	60da      	str	r2, [r3, #12]
 801497e:	e005      	b.n	801498c <tcp_process+0x744>
 8014980:	68fb      	ldr	r3, [r7, #12]
 8014982:	68db      	ldr	r3, [r3, #12]
 8014984:	60fb      	str	r3, [r7, #12]
 8014986:	68fb      	ldr	r3, [r7, #12]
 8014988:	2b00      	cmp	r3, #0
 801498a:	d1ef      	bne.n	801496c <tcp_process+0x724>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	2200      	movs	r2, #0
 8014990:	60da      	str	r2, [r3, #12]
 8014992:	4b1f      	ldr	r3, [pc, #124]	; (8014a10 <tcp_process+0x7c8>)
 8014994:	2201      	movs	r2, #1
 8014996:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	220a      	movs	r2, #10
 801499c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801499e:	4b1d      	ldr	r3, [pc, #116]	; (8014a14 <tcp_process+0x7cc>)
 80149a0:	681a      	ldr	r2, [r3, #0]
 80149a2:	687b      	ldr	r3, [r7, #4]
 80149a4:	60da      	str	r2, [r3, #12]
 80149a6:	4a1b      	ldr	r2, [pc, #108]	; (8014a14 <tcp_process+0x7cc>)
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6013      	str	r3, [r2, #0]
 80149ac:	f003 f8a0 	bl	8017af0 <tcp_timer_needed>
      }
      break;
 80149b0:	e026      	b.n	8014a00 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80149b2:	6878      	ldr	r0, [r7, #4]
 80149b4:	f000 f93c 	bl	8014c30 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80149b8:	4b17      	ldr	r3, [pc, #92]	; (8014a18 <tcp_process+0x7d0>)
 80149ba:	781b      	ldrb	r3, [r3, #0]
 80149bc:	f003 0310 	and.w	r3, r3, #16
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d01f      	beq.n	8014a04 <tcp_process+0x7bc>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149c8:	4b14      	ldr	r3, [pc, #80]	; (8014a1c <tcp_process+0x7d4>)
 80149ca:	681b      	ldr	r3, [r3, #0]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d119      	bne.n	8014a04 <tcp_process+0x7bc>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d115      	bne.n	8014a04 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80149d8:	4b11      	ldr	r3, [pc, #68]	; (8014a20 <tcp_process+0x7d8>)
 80149da:	781b      	ldrb	r3, [r3, #0]
 80149dc:	f043 0310 	orr.w	r3, r3, #16
 80149e0:	b2da      	uxtb	r2, r3
 80149e2:	4b0f      	ldr	r3, [pc, #60]	; (8014a20 <tcp_process+0x7d8>)
 80149e4:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149e6:	e00d      	b.n	8014a04 <tcp_process+0x7bc>
    default:
      break;
 80149e8:	bf00      	nop
 80149ea:	e00c      	b.n	8014a06 <tcp_process+0x7be>
      break;
 80149ec:	bf00      	nop
 80149ee:	e00a      	b.n	8014a06 <tcp_process+0x7be>
      break;
 80149f0:	bf00      	nop
 80149f2:	e008      	b.n	8014a06 <tcp_process+0x7be>
      break;
 80149f4:	bf00      	nop
 80149f6:	e006      	b.n	8014a06 <tcp_process+0x7be>
      break;
 80149f8:	bf00      	nop
 80149fa:	e004      	b.n	8014a06 <tcp_process+0x7be>
      break;
 80149fc:	bf00      	nop
 80149fe:	e002      	b.n	8014a06 <tcp_process+0x7be>
      break;
 8014a00:	bf00      	nop
 8014a02:	e000      	b.n	8014a06 <tcp_process+0x7be>
      break;
 8014a04:	bf00      	nop
  }
  return ERR_OK;
 8014a06:	2300      	movs	r3, #0
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3724      	adds	r7, #36	; 0x24
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd90      	pop	{r4, r7, pc}
 8014a10:	2000d7b8 	.word	0x2000d7b8
 8014a14:	2000d7cc 	.word	0x2000d7cc
 8014a18:	20004820 	.word	0x20004820
 8014a1c:	20004818 	.word	0x20004818
 8014a20:	20004821 	.word	0x20004821
 8014a24:	2000d7bc 	.word	0x2000d7bc

08014a28 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014a28:	b590      	push	{r4, r7, lr}
 8014a2a:	b085      	sub	sp, #20
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d106      	bne.n	8014a46 <tcp_oos_insert_segment+0x1e>
 8014a38:	4b3b      	ldr	r3, [pc, #236]	; (8014b28 <tcp_oos_insert_segment+0x100>)
 8014a3a:	f240 421f 	movw	r2, #1055	; 0x41f
 8014a3e:	493b      	ldr	r1, [pc, #236]	; (8014b2c <tcp_oos_insert_segment+0x104>)
 8014a40:	483b      	ldr	r0, [pc, #236]	; (8014b30 <tcp_oos_insert_segment+0x108>)
 8014a42:	f007 f923 	bl	801bc8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	68db      	ldr	r3, [r3, #12]
 8014a4a:	899b      	ldrh	r3, [r3, #12]
 8014a4c:	b29b      	uxth	r3, r3
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7fb fa0e 	bl	800fe70 <lwip_htons>
 8014a54:	4603      	mov	r3, r0
 8014a56:	b2db      	uxtb	r3, r3
 8014a58:	f003 0301 	and.w	r3, r3, #1
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d028      	beq.n	8014ab2 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014a60:	6838      	ldr	r0, [r7, #0]
 8014a62:	f7fe f997 	bl	8012d94 <tcp_segs_free>
    next = NULL;
 8014a66:	2300      	movs	r3, #0
 8014a68:	603b      	str	r3, [r7, #0]
 8014a6a:	e056      	b.n	8014b1a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014a6c:	683b      	ldr	r3, [r7, #0]
 8014a6e:	68db      	ldr	r3, [r3, #12]
 8014a70:	899b      	ldrh	r3, [r3, #12]
 8014a72:	b29b      	uxth	r3, r3
 8014a74:	4618      	mov	r0, r3
 8014a76:	f7fb f9fb 	bl	800fe70 <lwip_htons>
 8014a7a:	4603      	mov	r3, r0
 8014a7c:	b2db      	uxtb	r3, r3
 8014a7e:	f003 0301 	and.w	r3, r3, #1
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00d      	beq.n	8014aa2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	68db      	ldr	r3, [r3, #12]
 8014a8a:	899b      	ldrh	r3, [r3, #12]
 8014a8c:	b29c      	uxth	r4, r3
 8014a8e:	2001      	movs	r0, #1
 8014a90:	f7fb f9ee 	bl	800fe70 <lwip_htons>
 8014a94:	4603      	mov	r3, r0
 8014a96:	461a      	mov	r2, r3
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	68db      	ldr	r3, [r3, #12]
 8014a9c:	4322      	orrs	r2, r4
 8014a9e:	b292      	uxth	r2, r2
 8014aa0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014aa6:	683b      	ldr	r3, [r7, #0]
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014aac:	68f8      	ldr	r0, [r7, #12]
 8014aae:	f7fe f986 	bl	8012dbe <tcp_seg_free>
    while (next &&
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00e      	beq.n	8014ad6 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	891b      	ldrh	r3, [r3, #8]
 8014abc:	461a      	mov	r2, r3
 8014abe:	4b1d      	ldr	r3, [pc, #116]	; (8014b34 <tcp_oos_insert_segment+0x10c>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	441a      	add	r2, r3
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	685b      	ldr	r3, [r3, #4]
 8014aca:	6839      	ldr	r1, [r7, #0]
 8014acc:	8909      	ldrh	r1, [r1, #8]
 8014ace:	440b      	add	r3, r1
 8014ad0:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	daca      	bge.n	8014a6c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d01e      	beq.n	8014b1a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014adc:	687b      	ldr	r3, [r7, #4]
 8014ade:	891b      	ldrh	r3, [r3, #8]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	4b14      	ldr	r3, [pc, #80]	; (8014b34 <tcp_oos_insert_segment+0x10c>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	441a      	add	r2, r3
 8014ae8:	683b      	ldr	r3, [r7, #0]
 8014aea:	68db      	ldr	r3, [r3, #12]
 8014aec:	685b      	ldr	r3, [r3, #4]
 8014aee:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	dd12      	ble.n	8014b1a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	68db      	ldr	r3, [r3, #12]
 8014af8:	685b      	ldr	r3, [r3, #4]
 8014afa:	b29a      	uxth	r2, r3
 8014afc:	4b0d      	ldr	r3, [pc, #52]	; (8014b34 <tcp_oos_insert_segment+0x10c>)
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	b29b      	uxth	r3, r3
 8014b02:	1ad3      	subs	r3, r2, r3
 8014b04:	b29a      	uxth	r2, r3
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	685a      	ldr	r2, [r3, #4]
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	891b      	ldrh	r3, [r3, #8]
 8014b12:	4619      	mov	r1, r3
 8014b14:	4610      	mov	r0, r2
 8014b16:	f7fc fbd1 	bl	80112bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	683a      	ldr	r2, [r7, #0]
 8014b1e:	601a      	str	r2, [r3, #0]
}
 8014b20:	bf00      	nop
 8014b22:	3714      	adds	r7, #20
 8014b24:	46bd      	mov	sp, r7
 8014b26:	bd90      	pop	{r4, r7, pc}
 8014b28:	08020354 	.word	0x08020354
 8014b2c:	08020614 	.word	0x08020614
 8014b30:	080203a0 	.word	0x080203a0
 8014b34:	20004814 	.word	0x20004814

08014b38 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014b38:	b5b0      	push	{r4, r5, r7, lr}
 8014b3a:	b086      	sub	sp, #24
 8014b3c:	af00      	add	r7, sp, #0
 8014b3e:	60f8      	str	r0, [r7, #12]
 8014b40:	60b9      	str	r1, [r7, #8]
 8014b42:	607a      	str	r2, [r7, #4]
 8014b44:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b46:	e03e      	b.n	8014bc6 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	681b      	ldr	r3, [r3, #0]
 8014b50:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	685b      	ldr	r3, [r3, #4]
 8014b56:	4618      	mov	r0, r3
 8014b58:	f7fc fdf6 	bl	8011748 <pbuf_clen>
 8014b5c:	4603      	mov	r3, r0
 8014b5e:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014b60:	68fb      	ldr	r3, [r7, #12]
 8014b62:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b66:	8a7a      	ldrh	r2, [r7, #18]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d906      	bls.n	8014b7a <tcp_free_acked_segments+0x42>
 8014b6c:	4b2a      	ldr	r3, [pc, #168]	; (8014c18 <tcp_free_acked_segments+0xe0>)
 8014b6e:	f240 4257 	movw	r2, #1111	; 0x457
 8014b72:	492a      	ldr	r1, [pc, #168]	; (8014c1c <tcp_free_acked_segments+0xe4>)
 8014b74:	482a      	ldr	r0, [pc, #168]	; (8014c20 <tcp_free_acked_segments+0xe8>)
 8014b76:	f007 f889 	bl	801bc8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014b80:	8a7b      	ldrh	r3, [r7, #18]
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	68fb      	ldr	r3, [r7, #12]
 8014b88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014b8c:	697b      	ldr	r3, [r7, #20]
 8014b8e:	891a      	ldrh	r2, [r3, #8]
 8014b90:	4b24      	ldr	r3, [pc, #144]	; (8014c24 <tcp_free_acked_segments+0xec>)
 8014b92:	881b      	ldrh	r3, [r3, #0]
 8014b94:	4413      	add	r3, r2
 8014b96:	b29a      	uxth	r2, r3
 8014b98:	4b22      	ldr	r3, [pc, #136]	; (8014c24 <tcp_free_acked_segments+0xec>)
 8014b9a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b9c:	6978      	ldr	r0, [r7, #20]
 8014b9e:	f7fe f90e 	bl	8012dbe <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	d00c      	beq.n	8014bc6 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014bac:	68bb      	ldr	r3, [r7, #8]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d109      	bne.n	8014bc6 <tcp_free_acked_segments+0x8e>
 8014bb2:	683b      	ldr	r3, [r7, #0]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d106      	bne.n	8014bc6 <tcp_free_acked_segments+0x8e>
 8014bb8:	4b17      	ldr	r3, [pc, #92]	; (8014c18 <tcp_free_acked_segments+0xe0>)
 8014bba:	f240 4261 	movw	r2, #1121	; 0x461
 8014bbe:	491a      	ldr	r1, [pc, #104]	; (8014c28 <tcp_free_acked_segments+0xf0>)
 8014bc0:	4817      	ldr	r0, [pc, #92]	; (8014c20 <tcp_free_acked_segments+0xe8>)
 8014bc2:	f007 f863 	bl	801bc8c <iprintf>
  while (seg_list != NULL &&
 8014bc6:	68bb      	ldr	r3, [r7, #8]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d020      	beq.n	8014c0e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	68db      	ldr	r3, [r3, #12]
 8014bd0:	685b      	ldr	r3, [r3, #4]
 8014bd2:	4618      	mov	r0, r3
 8014bd4:	f7fb f961 	bl	800fe9a <lwip_htonl>
 8014bd8:	4604      	mov	r4, r0
 8014bda:	68bb      	ldr	r3, [r7, #8]
 8014bdc:	891b      	ldrh	r3, [r3, #8]
 8014bde:	461d      	mov	r5, r3
 8014be0:	68bb      	ldr	r3, [r7, #8]
 8014be2:	68db      	ldr	r3, [r3, #12]
 8014be4:	899b      	ldrh	r3, [r3, #12]
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	4618      	mov	r0, r3
 8014bea:	f7fb f941 	bl	800fe70 <lwip_htons>
 8014bee:	4603      	mov	r3, r0
 8014bf0:	b2db      	uxtb	r3, r3
 8014bf2:	f003 0303 	and.w	r3, r3, #3
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d001      	beq.n	8014bfe <tcp_free_acked_segments+0xc6>
 8014bfa:	2301      	movs	r3, #1
 8014bfc:	e000      	b.n	8014c00 <tcp_free_acked_segments+0xc8>
 8014bfe:	2300      	movs	r3, #0
 8014c00:	442b      	add	r3, r5
 8014c02:	18e2      	adds	r2, r4, r3
 8014c04:	4b09      	ldr	r3, [pc, #36]	; (8014c2c <tcp_free_acked_segments+0xf4>)
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	dd9c      	ble.n	8014b48 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c0e:	68bb      	ldr	r3, [r7, #8]
}
 8014c10:	4618      	mov	r0, r3
 8014c12:	3718      	adds	r7, #24
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bdb0      	pop	{r4, r5, r7, pc}
 8014c18:	08020354 	.word	0x08020354
 8014c1c:	0802063c 	.word	0x0802063c
 8014c20:	080203a0 	.word	0x080203a0
 8014c24:	2000481c 	.word	0x2000481c
 8014c28:	08020664 	.word	0x08020664
 8014c2c:	20004818 	.word	0x20004818

08014c30 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014c30:	b5b0      	push	{r4, r5, r7, lr}
 8014c32:	b094      	sub	sp, #80	; 0x50
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014c38:	2300      	movs	r3, #0
 8014c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d106      	bne.n	8014c50 <tcp_receive+0x20>
 8014c42:	4ba6      	ldr	r3, [pc, #664]	; (8014edc <tcp_receive+0x2ac>)
 8014c44:	f240 427b 	movw	r2, #1147	; 0x47b
 8014c48:	49a5      	ldr	r1, [pc, #660]	; (8014ee0 <tcp_receive+0x2b0>)
 8014c4a:	48a6      	ldr	r0, [pc, #664]	; (8014ee4 <tcp_receive+0x2b4>)
 8014c4c:	f007 f81e 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	7d1b      	ldrb	r3, [r3, #20]
 8014c54:	2b03      	cmp	r3, #3
 8014c56:	d806      	bhi.n	8014c66 <tcp_receive+0x36>
 8014c58:	4ba0      	ldr	r3, [pc, #640]	; (8014edc <tcp_receive+0x2ac>)
 8014c5a:	f240 427c 	movw	r2, #1148	; 0x47c
 8014c5e:	49a2      	ldr	r1, [pc, #648]	; (8014ee8 <tcp_receive+0x2b8>)
 8014c60:	48a0      	ldr	r0, [pc, #640]	; (8014ee4 <tcp_receive+0x2b4>)
 8014c62:	f007 f813 	bl	801bc8c <iprintf>

  if (flags & TCP_ACK) {
 8014c66:	4ba1      	ldr	r3, [pc, #644]	; (8014eec <tcp_receive+0x2bc>)
 8014c68:	781b      	ldrb	r3, [r3, #0]
 8014c6a:	f003 0310 	and.w	r3, r3, #16
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	f000 8263 	beq.w	801513a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014c74:	687b      	ldr	r3, [r7, #4]
 8014c76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c7a:	461a      	mov	r2, r3
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c80:	4413      	add	r3, r2
 8014c82:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c88:	4b99      	ldr	r3, [pc, #612]	; (8014ef0 <tcp_receive+0x2c0>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	1ad3      	subs	r3, r2, r3
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	db1b      	blt.n	8014cca <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c96:	4b96      	ldr	r3, [pc, #600]	; (8014ef0 <tcp_receive+0x2c0>)
 8014c98:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d106      	bne.n	8014cac <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014ca2:	4b94      	ldr	r3, [pc, #592]	; (8014ef4 <tcp_receive+0x2c4>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	1ad3      	subs	r3, r2, r3
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	db0e      	blt.n	8014cca <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cb0:	4b90      	ldr	r3, [pc, #576]	; (8014ef4 <tcp_receive+0x2c4>)
 8014cb2:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cb4:	429a      	cmp	r2, r3
 8014cb6:	d125      	bne.n	8014d04 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cb8:	4b8f      	ldr	r3, [pc, #572]	; (8014ef8 <tcp_receive+0x2c8>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	89db      	ldrh	r3, [r3, #14]
 8014cbe:	b29a      	uxth	r2, r3
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d91c      	bls.n	8014d04 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014cca:	4b8b      	ldr	r3, [pc, #556]	; (8014ef8 <tcp_receive+0x2c8>)
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	89db      	ldrh	r3, [r3, #14]
 8014cd0:	b29a      	uxth	r2, r3
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d205      	bcs.n	8014cf4 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014cf4:	4b7e      	ldr	r3, [pc, #504]	; (8014ef0 <tcp_receive+0x2c0>)
 8014cf6:	681a      	ldr	r2, [r3, #0]
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014cfc:	4b7d      	ldr	r3, [pc, #500]	; (8014ef4 <tcp_receive+0x2c4>)
 8014cfe:	681a      	ldr	r2, [r3, #0]
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d04:	4b7b      	ldr	r3, [pc, #492]	; (8014ef4 <tcp_receive+0x2c4>)
 8014d06:	681a      	ldr	r2, [r3, #0]
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d0c:	1ad3      	subs	r3, r2, r3
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	dc58      	bgt.n	8014dc4 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d12:	4b7a      	ldr	r3, [pc, #488]	; (8014efc <tcp_receive+0x2cc>)
 8014d14:	881b      	ldrh	r3, [r3, #0]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d14b      	bne.n	8014db2 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d1e:	687a      	ldr	r2, [r7, #4]
 8014d20:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014d24:	4413      	add	r3, r2
 8014d26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	d142      	bne.n	8014db2 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	db3d      	blt.n	8014db2 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d3a:	4b6e      	ldr	r3, [pc, #440]	; (8014ef4 <tcp_receive+0x2c4>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d137      	bne.n	8014db2 <tcp_receive+0x182>
              found_dupack = 1;
 8014d42:	2301      	movs	r3, #1
 8014d44:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d4c:	2bff      	cmp	r3, #255	; 0xff
 8014d4e:	d007      	beq.n	8014d60 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d56:	3301      	adds	r3, #1
 8014d58:	b2da      	uxtb	r2, r3
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d66:	2b03      	cmp	r3, #3
 8014d68:	d91b      	bls.n	8014da2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d74:	4413      	add	r3, r2
 8014d76:	b29a      	uxth	r2, r3
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d7e:	429a      	cmp	r2, r3
 8014d80:	d30a      	bcc.n	8014d98 <tcp_receive+0x168>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d8c:	4413      	add	r3, r2
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014d96:	e004      	b.n	8014da2 <tcp_receive+0x172>
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d9e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014da8:	2b02      	cmp	r3, #2
 8014daa:	d902      	bls.n	8014db2 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014dac:	6878      	ldr	r0, [r7, #4]
 8014dae:	f002 fb41 	bl	8017434 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	f040 8160 	bne.w	801507a <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	2200      	movs	r2, #0
 8014dbe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014dc2:	e15a      	b.n	801507a <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014dc4:	4b4b      	ldr	r3, [pc, #300]	; (8014ef4 <tcp_receive+0x2c4>)
 8014dc6:	681a      	ldr	r2, [r3, #0]
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014dcc:	1ad3      	subs	r3, r2, r3
 8014dce:	3b01      	subs	r3, #1
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	f2c0 814d 	blt.w	8015070 <tcp_receive+0x440>
 8014dd6:	4b47      	ldr	r3, [pc, #284]	; (8014ef4 <tcp_receive+0x2c4>)
 8014dd8:	681a      	ldr	r2, [r3, #0]
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014dde:	1ad3      	subs	r3, r2, r3
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	f300 8145 	bgt.w	8015070 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	8b5b      	ldrh	r3, [r3, #26]
 8014dea:	f003 0304 	and.w	r3, r3, #4
 8014dee:	2b00      	cmp	r3, #0
 8014df0:	d010      	beq.n	8014e14 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	8b5b      	ldrh	r3, [r3, #26]
 8014df6:	f023 0304 	bic.w	r3, r3, #4
 8014dfa:	b29a      	uxth	r2, r3
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	2200      	movs	r2, #0
 8014e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e22:	10db      	asrs	r3, r3, #3
 8014e24:	b21b      	sxth	r3, r3
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	4413      	add	r3, r2
 8014e32:	b29b      	uxth	r3, r3
 8014e34:	b21a      	sxth	r2, r3
 8014e36:	687b      	ldr	r3, [r7, #4]
 8014e38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014e3c:	4b2d      	ldr	r3, [pc, #180]	; (8014ef4 <tcp_receive+0x2c4>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	b29a      	uxth	r2, r3
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	1ad3      	subs	r3, r2, r3
 8014e4a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014e54:	4b27      	ldr	r3, [pc, #156]	; (8014ef4 <tcp_receive+0x2c4>)
 8014e56:	681a      	ldr	r2, [r3, #0]
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	7d1b      	ldrb	r3, [r3, #20]
 8014e60:	2b03      	cmp	r3, #3
 8014e62:	f240 8096 	bls.w	8014f92 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e72:	429a      	cmp	r2, r3
 8014e74:	d244      	bcs.n	8014f00 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	8b5b      	ldrh	r3, [r3, #26]
 8014e7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d001      	beq.n	8014e86 <tcp_receive+0x256>
 8014e82:	2301      	movs	r3, #1
 8014e84:	e000      	b.n	8014e88 <tcp_receive+0x258>
 8014e86:	2302      	movs	r3, #2
 8014e88:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014e8c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e96:	fb12 f303 	smulbb	r3, r2, r3
 8014e9a:	b29b      	uxth	r3, r3
 8014e9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014e9e:	4293      	cmp	r3, r2
 8014ea0:	bf28      	it	cs
 8014ea2:	4613      	movcs	r3, r2
 8014ea4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014eac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014eae:	4413      	add	r3, r2
 8014eb0:	b29a      	uxth	r2, r3
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014eb8:	429a      	cmp	r2, r3
 8014eba:	d309      	bcc.n	8014ed0 <tcp_receive+0x2a0>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ec2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ec4:	4413      	add	r3, r2
 8014ec6:	b29a      	uxth	r2, r3
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ece:	e060      	b.n	8014f92 <tcp_receive+0x362>
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014ed6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014eda:	e05a      	b.n	8014f92 <tcp_receive+0x362>
 8014edc:	08020354 	.word	0x08020354
 8014ee0:	08020684 	.word	0x08020684
 8014ee4:	080203a0 	.word	0x080203a0
 8014ee8:	080206a0 	.word	0x080206a0
 8014eec:	20004820 	.word	0x20004820
 8014ef0:	20004814 	.word	0x20004814
 8014ef4:	20004818 	.word	0x20004818
 8014ef8:	20004804 	.word	0x20004804
 8014efc:	2000481e 	.word	0x2000481e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f06:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f08:	4413      	add	r3, r2
 8014f0a:	b29a      	uxth	r2, r3
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d309      	bcc.n	8014f2a <tcp_receive+0x2fa>
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f1e:	4413      	add	r3, r2
 8014f20:	b29a      	uxth	r2, r3
 8014f22:	687b      	ldr	r3, [r7, #4]
 8014f24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014f28:	e004      	b.n	8014f34 <tcp_receive+0x304>
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f40:	429a      	cmp	r2, r3
 8014f42:	d326      	bcc.n	8014f92 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f50:	1ad3      	subs	r3, r2, r3
 8014f52:	b29a      	uxth	r2, r3
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f64:	4413      	add	r3, r2
 8014f66:	b29a      	uxth	r2, r3
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f6e:	429a      	cmp	r2, r3
 8014f70:	d30a      	bcc.n	8014f88 <tcp_receive+0x358>
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f7c:	4413      	add	r3, r2
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f86:	e004      	b.n	8014f92 <tcp_receive+0x362>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f9a:	4a98      	ldr	r2, [pc, #608]	; (80151fc <tcp_receive+0x5cc>)
 8014f9c:	6878      	ldr	r0, [r7, #4]
 8014f9e:	f7ff fdcb 	bl	8014b38 <tcp_free_acked_segments>
 8014fa2:	4602      	mov	r2, r0
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fb0:	4a93      	ldr	r2, [pc, #588]	; (8015200 <tcp_receive+0x5d0>)
 8014fb2:	6878      	ldr	r0, [r7, #4]
 8014fb4:	f7ff fdc0 	bl	8014b38 <tcp_free_acked_segments>
 8014fb8:	4602      	mov	r2, r0
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d104      	bne.n	8014fd0 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fcc:	861a      	strh	r2, [r3, #48]	; 0x30
 8014fce:	e002      	b.n	8014fd6 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d103      	bne.n	8014fec <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	2200      	movs	r2, #0
 8014fe8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8014ff2:	4b84      	ldr	r3, [pc, #528]	; (8015204 <tcp_receive+0x5d4>)
 8014ff4:	881b      	ldrh	r3, [r3, #0]
 8014ff6:	4413      	add	r3, r2
 8014ff8:	b29a      	uxth	r2, r3
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	8b5b      	ldrh	r3, [r3, #26]
 8015004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015008:	2b00      	cmp	r3, #0
 801500a:	d035      	beq.n	8015078 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015010:	2b00      	cmp	r3, #0
 8015012:	d118      	bne.n	8015046 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015018:	2b00      	cmp	r3, #0
 801501a:	d00c      	beq.n	8015036 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015024:	68db      	ldr	r3, [r3, #12]
 8015026:	685b      	ldr	r3, [r3, #4]
 8015028:	4618      	mov	r0, r3
 801502a:	f7fa ff36 	bl	800fe9a <lwip_htonl>
 801502e:	4603      	mov	r3, r0
 8015030:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015032:	2b00      	cmp	r3, #0
 8015034:	dc20      	bgt.n	8015078 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	8b5b      	ldrh	r3, [r3, #26]
 801503a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801503e:	b29a      	uxth	r2, r3
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015044:	e018      	b.n	8015078 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801504e:	68db      	ldr	r3, [r3, #12]
 8015050:	685b      	ldr	r3, [r3, #4]
 8015052:	4618      	mov	r0, r3
 8015054:	f7fa ff21 	bl	800fe9a <lwip_htonl>
 8015058:	4603      	mov	r3, r0
 801505a:	1ae3      	subs	r3, r4, r3
 801505c:	2b00      	cmp	r3, #0
 801505e:	dc0b      	bgt.n	8015078 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	8b5b      	ldrh	r3, [r3, #26]
 8015064:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015068:	b29a      	uxth	r2, r3
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801506e:	e003      	b.n	8015078 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015070:	6878      	ldr	r0, [r7, #4]
 8015072:	f002 fbcd 	bl	8017810 <tcp_send_empty_ack>
 8015076:	e000      	b.n	801507a <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015078:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801507e:	2b00      	cmp	r3, #0
 8015080:	d05b      	beq.n	801513a <tcp_receive+0x50a>
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015086:	4b60      	ldr	r3, [pc, #384]	; (8015208 <tcp_receive+0x5d8>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	1ad3      	subs	r3, r2, r3
 801508c:	2b00      	cmp	r3, #0
 801508e:	da54      	bge.n	801513a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015090:	4b5e      	ldr	r3, [pc, #376]	; (801520c <tcp_receive+0x5dc>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	b29a      	uxth	r2, r3
 8015096:	687b      	ldr	r3, [r7, #4]
 8015098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801509a:	b29b      	uxth	r3, r3
 801509c:	1ad3      	subs	r3, r2, r3
 801509e:	b29b      	uxth	r3, r3
 80150a0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80150a4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150ae:	10db      	asrs	r3, r3, #3
 80150b0:	b21b      	sxth	r3, r3
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150c2:	b29a      	uxth	r2, r3
 80150c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150c8:	4413      	add	r3, r2
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	b21a      	sxth	r2, r3
 80150ce:	687b      	ldr	r3, [r7, #4]
 80150d0:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80150d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80150d6:	2b00      	cmp	r3, #0
 80150d8:	da05      	bge.n	80150e6 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80150da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150de:	425b      	negs	r3, r3
 80150e0:	b29b      	uxth	r3, r3
 80150e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80150e6:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80150f0:	109b      	asrs	r3, r3, #2
 80150f2:	b21b      	sxth	r3, r3
 80150f4:	b29b      	uxth	r3, r3
 80150f6:	1ad3      	subs	r3, r2, r3
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015104:	b29a      	uxth	r2, r3
 8015106:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801510a:	4413      	add	r3, r2
 801510c:	b29b      	uxth	r3, r3
 801510e:	b21a      	sxth	r2, r3
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801511a:	10db      	asrs	r3, r3, #3
 801511c:	b21b      	sxth	r3, r3
 801511e:	b29a      	uxth	r2, r3
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015126:	b29b      	uxth	r3, r3
 8015128:	4413      	add	r3, r2
 801512a:	b29b      	uxth	r3, r3
 801512c:	b21a      	sxth	r2, r3
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	2200      	movs	r2, #0
 8015138:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801513a:	4b35      	ldr	r3, [pc, #212]	; (8015210 <tcp_receive+0x5e0>)
 801513c:	881b      	ldrh	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	f000 84e1 	beq.w	8015b06 <tcp_receive+0xed6>
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	7d1b      	ldrb	r3, [r3, #20]
 8015148:	2b06      	cmp	r3, #6
 801514a:	f200 84dc 	bhi.w	8015b06 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015152:	4b30      	ldr	r3, [pc, #192]	; (8015214 <tcp_receive+0x5e4>)
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	1ad3      	subs	r3, r2, r3
 8015158:	3b01      	subs	r3, #1
 801515a:	2b00      	cmp	r3, #0
 801515c:	f2c0 808e 	blt.w	801527c <tcp_receive+0x64c>
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015164:	4b2a      	ldr	r3, [pc, #168]	; (8015210 <tcp_receive+0x5e0>)
 8015166:	881b      	ldrh	r3, [r3, #0]
 8015168:	4619      	mov	r1, r3
 801516a:	4b2a      	ldr	r3, [pc, #168]	; (8015214 <tcp_receive+0x5e4>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	440b      	add	r3, r1
 8015170:	1ad3      	subs	r3, r2, r3
 8015172:	3301      	adds	r3, #1
 8015174:	2b00      	cmp	r3, #0
 8015176:	f300 8081 	bgt.w	801527c <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801517a:	4b27      	ldr	r3, [pc, #156]	; (8015218 <tcp_receive+0x5e8>)
 801517c:	685b      	ldr	r3, [r3, #4]
 801517e:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015184:	4b23      	ldr	r3, [pc, #140]	; (8015214 <tcp_receive+0x5e4>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801518c:	4b22      	ldr	r3, [pc, #136]	; (8015218 <tcp_receive+0x5e8>)
 801518e:	685b      	ldr	r3, [r3, #4]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d106      	bne.n	80151a2 <tcp_receive+0x572>
 8015194:	4b21      	ldr	r3, [pc, #132]	; (801521c <tcp_receive+0x5ec>)
 8015196:	f240 5294 	movw	r2, #1428	; 0x594
 801519a:	4921      	ldr	r1, [pc, #132]	; (8015220 <tcp_receive+0x5f0>)
 801519c:	4821      	ldr	r0, [pc, #132]	; (8015224 <tcp_receive+0x5f4>)
 801519e:	f006 fd75 	bl	801bc8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80151a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80151a8:	4293      	cmp	r3, r2
 80151aa:	d906      	bls.n	80151ba <tcp_receive+0x58a>
 80151ac:	4b1b      	ldr	r3, [pc, #108]	; (801521c <tcp_receive+0x5ec>)
 80151ae:	f240 5295 	movw	r2, #1429	; 0x595
 80151b2:	491d      	ldr	r1, [pc, #116]	; (8015228 <tcp_receive+0x5f8>)
 80151b4:	481b      	ldr	r0, [pc, #108]	; (8015224 <tcp_receive+0x5f4>)
 80151b6:	f006 fd69 	bl	801bc8c <iprintf>
      off = (u16_t)off32;
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80151c0:	4b15      	ldr	r3, [pc, #84]	; (8015218 <tcp_receive+0x5e8>)
 80151c2:	685b      	ldr	r3, [r3, #4]
 80151c4:	891b      	ldrh	r3, [r3, #8]
 80151c6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151ca:	429a      	cmp	r2, r3
 80151cc:	d906      	bls.n	80151dc <tcp_receive+0x5ac>
 80151ce:	4b13      	ldr	r3, [pc, #76]	; (801521c <tcp_receive+0x5ec>)
 80151d0:	f240 5297 	movw	r2, #1431	; 0x597
 80151d4:	4915      	ldr	r1, [pc, #84]	; (801522c <tcp_receive+0x5fc>)
 80151d6:	4813      	ldr	r0, [pc, #76]	; (8015224 <tcp_receive+0x5f4>)
 80151d8:	f006 fd58 	bl	801bc8c <iprintf>
      inseg.len -= off;
 80151dc:	4b0e      	ldr	r3, [pc, #56]	; (8015218 <tcp_receive+0x5e8>)
 80151de:	891a      	ldrh	r2, [r3, #8]
 80151e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	b29a      	uxth	r2, r3
 80151e8:	4b0b      	ldr	r3, [pc, #44]	; (8015218 <tcp_receive+0x5e8>)
 80151ea:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80151ec:	4b0a      	ldr	r3, [pc, #40]	; (8015218 <tcp_receive+0x5e8>)
 80151ee:	685b      	ldr	r3, [r3, #4]
 80151f0:	891a      	ldrh	r2, [r3, #8]
 80151f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80151fa:	e029      	b.n	8015250 <tcp_receive+0x620>
 80151fc:	080206bc 	.word	0x080206bc
 8015200:	080206c4 	.word	0x080206c4
 8015204:	2000481c 	.word	0x2000481c
 8015208:	20004818 	.word	0x20004818
 801520c:	2000d7c0 	.word	0x2000d7c0
 8015210:	2000481e 	.word	0x2000481e
 8015214:	20004814 	.word	0x20004814
 8015218:	200047f4 	.word	0x200047f4
 801521c:	08020354 	.word	0x08020354
 8015220:	080206cc 	.word	0x080206cc
 8015224:	080203a0 	.word	0x080203a0
 8015228:	080206dc 	.word	0x080206dc
 801522c:	080206ec 	.word	0x080206ec
        off -= p->len;
 8015230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015232:	895b      	ldrh	r3, [r3, #10]
 8015234:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015238:	1ad3      	subs	r3, r2, r3
 801523a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801523e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015240:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015242:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015246:	2200      	movs	r2, #0
 8015248:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801524a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801524c:	681b      	ldr	r3, [r3, #0]
 801524e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015252:	895b      	ldrh	r3, [r3, #10]
 8015254:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015258:	429a      	cmp	r2, r3
 801525a:	d8e9      	bhi.n	8015230 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801525c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015260:	4619      	mov	r1, r3
 8015262:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015264:	f7fc f92a 	bl	80114bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801526c:	4a91      	ldr	r2, [pc, #580]	; (80154b4 <tcp_receive+0x884>)
 801526e:	6013      	str	r3, [r2, #0]
 8015270:	4b91      	ldr	r3, [pc, #580]	; (80154b8 <tcp_receive+0x888>)
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	4a8f      	ldr	r2, [pc, #572]	; (80154b4 <tcp_receive+0x884>)
 8015276:	6812      	ldr	r2, [r2, #0]
 8015278:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801527a:	e00d      	b.n	8015298 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801527c:	4b8d      	ldr	r3, [pc, #564]	; (80154b4 <tcp_receive+0x884>)
 801527e:	681a      	ldr	r2, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015284:	1ad3      	subs	r3, r2, r3
 8015286:	2b00      	cmp	r3, #0
 8015288:	da06      	bge.n	8015298 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	8b5b      	ldrh	r3, [r3, #26]
 801528e:	f043 0302 	orr.w	r3, r3, #2
 8015292:	b29a      	uxth	r2, r3
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015298:	4b86      	ldr	r3, [pc, #536]	; (80154b4 <tcp_receive+0x884>)
 801529a:	681a      	ldr	r2, [r3, #0]
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a0:	1ad3      	subs	r3, r2, r3
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	f2c0 842a 	blt.w	8015afc <tcp_receive+0xecc>
 80152a8:	4b82      	ldr	r3, [pc, #520]	; (80154b4 <tcp_receive+0x884>)
 80152aa:	681a      	ldr	r2, [r3, #0]
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b0:	6879      	ldr	r1, [r7, #4]
 80152b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80152b4:	440b      	add	r3, r1
 80152b6:	1ad3      	subs	r3, r2, r3
 80152b8:	3301      	adds	r3, #1
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f300 841e 	bgt.w	8015afc <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152c4:	4b7b      	ldr	r3, [pc, #492]	; (80154b4 <tcp_receive+0x884>)
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	429a      	cmp	r2, r3
 80152ca:	f040 829a 	bne.w	8015802 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80152ce:	4b7a      	ldr	r3, [pc, #488]	; (80154b8 <tcp_receive+0x888>)
 80152d0:	891c      	ldrh	r4, [r3, #8]
 80152d2:	4b79      	ldr	r3, [pc, #484]	; (80154b8 <tcp_receive+0x888>)
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	899b      	ldrh	r3, [r3, #12]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	4618      	mov	r0, r3
 80152dc:	f7fa fdc8 	bl	800fe70 <lwip_htons>
 80152e0:	4603      	mov	r3, r0
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	f003 0303 	and.w	r3, r3, #3
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d001      	beq.n	80152f0 <tcp_receive+0x6c0>
 80152ec:	2301      	movs	r3, #1
 80152ee:	e000      	b.n	80152f2 <tcp_receive+0x6c2>
 80152f0:	2300      	movs	r3, #0
 80152f2:	4423      	add	r3, r4
 80152f4:	b29a      	uxth	r2, r3
 80152f6:	4b71      	ldr	r3, [pc, #452]	; (80154bc <tcp_receive+0x88c>)
 80152f8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80152fe:	4b6f      	ldr	r3, [pc, #444]	; (80154bc <tcp_receive+0x88c>)
 8015300:	881b      	ldrh	r3, [r3, #0]
 8015302:	429a      	cmp	r2, r3
 8015304:	d275      	bcs.n	80153f2 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015306:	4b6c      	ldr	r3, [pc, #432]	; (80154b8 <tcp_receive+0x888>)
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	899b      	ldrh	r3, [r3, #12]
 801530c:	b29b      	uxth	r3, r3
 801530e:	4618      	mov	r0, r3
 8015310:	f7fa fdae 	bl	800fe70 <lwip_htons>
 8015314:	4603      	mov	r3, r0
 8015316:	b2db      	uxtb	r3, r3
 8015318:	f003 0301 	and.w	r3, r3, #1
 801531c:	2b00      	cmp	r3, #0
 801531e:	d01f      	beq.n	8015360 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015320:	4b65      	ldr	r3, [pc, #404]	; (80154b8 <tcp_receive+0x888>)
 8015322:	68db      	ldr	r3, [r3, #12]
 8015324:	899b      	ldrh	r3, [r3, #12]
 8015326:	b29b      	uxth	r3, r3
 8015328:	b21b      	sxth	r3, r3
 801532a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801532e:	b21c      	sxth	r4, r3
 8015330:	4b61      	ldr	r3, [pc, #388]	; (80154b8 <tcp_receive+0x888>)
 8015332:	68db      	ldr	r3, [r3, #12]
 8015334:	899b      	ldrh	r3, [r3, #12]
 8015336:	b29b      	uxth	r3, r3
 8015338:	4618      	mov	r0, r3
 801533a:	f7fa fd99 	bl	800fe70 <lwip_htons>
 801533e:	4603      	mov	r3, r0
 8015340:	b2db      	uxtb	r3, r3
 8015342:	b29b      	uxth	r3, r3
 8015344:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015348:	b29b      	uxth	r3, r3
 801534a:	4618      	mov	r0, r3
 801534c:	f7fa fd90 	bl	800fe70 <lwip_htons>
 8015350:	4603      	mov	r3, r0
 8015352:	b21b      	sxth	r3, r3
 8015354:	4323      	orrs	r3, r4
 8015356:	b21a      	sxth	r2, r3
 8015358:	4b57      	ldr	r3, [pc, #348]	; (80154b8 <tcp_receive+0x888>)
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	b292      	uxth	r2, r2
 801535e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015364:	4b54      	ldr	r3, [pc, #336]	; (80154b8 <tcp_receive+0x888>)
 8015366:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015368:	4b53      	ldr	r3, [pc, #332]	; (80154b8 <tcp_receive+0x888>)
 801536a:	68db      	ldr	r3, [r3, #12]
 801536c:	899b      	ldrh	r3, [r3, #12]
 801536e:	b29b      	uxth	r3, r3
 8015370:	4618      	mov	r0, r3
 8015372:	f7fa fd7d 	bl	800fe70 <lwip_htons>
 8015376:	4603      	mov	r3, r0
 8015378:	b2db      	uxtb	r3, r3
 801537a:	f003 0302 	and.w	r3, r3, #2
 801537e:	2b00      	cmp	r3, #0
 8015380:	d005      	beq.n	801538e <tcp_receive+0x75e>
            inseg.len -= 1;
 8015382:	4b4d      	ldr	r3, [pc, #308]	; (80154b8 <tcp_receive+0x888>)
 8015384:	891b      	ldrh	r3, [r3, #8]
 8015386:	3b01      	subs	r3, #1
 8015388:	b29a      	uxth	r2, r3
 801538a:	4b4b      	ldr	r3, [pc, #300]	; (80154b8 <tcp_receive+0x888>)
 801538c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801538e:	4b4a      	ldr	r3, [pc, #296]	; (80154b8 <tcp_receive+0x888>)
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	4a49      	ldr	r2, [pc, #292]	; (80154b8 <tcp_receive+0x888>)
 8015394:	8912      	ldrh	r2, [r2, #8]
 8015396:	4611      	mov	r1, r2
 8015398:	4618      	mov	r0, r3
 801539a:	f7fb ff8f 	bl	80112bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801539e:	4b46      	ldr	r3, [pc, #280]	; (80154b8 <tcp_receive+0x888>)
 80153a0:	891c      	ldrh	r4, [r3, #8]
 80153a2:	4b45      	ldr	r3, [pc, #276]	; (80154b8 <tcp_receive+0x888>)
 80153a4:	68db      	ldr	r3, [r3, #12]
 80153a6:	899b      	ldrh	r3, [r3, #12]
 80153a8:	b29b      	uxth	r3, r3
 80153aa:	4618      	mov	r0, r3
 80153ac:	f7fa fd60 	bl	800fe70 <lwip_htons>
 80153b0:	4603      	mov	r3, r0
 80153b2:	b2db      	uxtb	r3, r3
 80153b4:	f003 0303 	and.w	r3, r3, #3
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d001      	beq.n	80153c0 <tcp_receive+0x790>
 80153bc:	2301      	movs	r3, #1
 80153be:	e000      	b.n	80153c2 <tcp_receive+0x792>
 80153c0:	2300      	movs	r3, #0
 80153c2:	4423      	add	r3, r4
 80153c4:	b29a      	uxth	r2, r3
 80153c6:	4b3d      	ldr	r3, [pc, #244]	; (80154bc <tcp_receive+0x88c>)
 80153c8:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80153ca:	4b3c      	ldr	r3, [pc, #240]	; (80154bc <tcp_receive+0x88c>)
 80153cc:	881b      	ldrh	r3, [r3, #0]
 80153ce:	461a      	mov	r2, r3
 80153d0:	4b38      	ldr	r3, [pc, #224]	; (80154b4 <tcp_receive+0x884>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	441a      	add	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153da:	6879      	ldr	r1, [r7, #4]
 80153dc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80153de:	440b      	add	r3, r1
 80153e0:	429a      	cmp	r2, r3
 80153e2:	d006      	beq.n	80153f2 <tcp_receive+0x7c2>
 80153e4:	4b36      	ldr	r3, [pc, #216]	; (80154c0 <tcp_receive+0x890>)
 80153e6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80153ea:	4936      	ldr	r1, [pc, #216]	; (80154c4 <tcp_receive+0x894>)
 80153ec:	4836      	ldr	r0, [pc, #216]	; (80154c8 <tcp_receive+0x898>)
 80153ee:	f006 fc4d 	bl	801bc8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	f000 80e7 	beq.w	80155ca <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80153fc:	4b2e      	ldr	r3, [pc, #184]	; (80154b8 <tcp_receive+0x888>)
 80153fe:	68db      	ldr	r3, [r3, #12]
 8015400:	899b      	ldrh	r3, [r3, #12]
 8015402:	b29b      	uxth	r3, r3
 8015404:	4618      	mov	r0, r3
 8015406:	f7fa fd33 	bl	800fe70 <lwip_htons>
 801540a:	4603      	mov	r3, r0
 801540c:	b2db      	uxtb	r3, r3
 801540e:	f003 0301 	and.w	r3, r3, #1
 8015412:	2b00      	cmp	r3, #0
 8015414:	d010      	beq.n	8015438 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015416:	e00a      	b.n	801542e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801541c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015422:	681a      	ldr	r2, [r3, #0]
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015428:	68f8      	ldr	r0, [r7, #12]
 801542a:	f7fd fcc8 	bl	8012dbe <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015432:	2b00      	cmp	r3, #0
 8015434:	d1f0      	bne.n	8015418 <tcp_receive+0x7e8>
 8015436:	e0c8      	b.n	80155ca <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801543c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801543e:	e052      	b.n	80154e6 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	899b      	ldrh	r3, [r3, #12]
 8015446:	b29b      	uxth	r3, r3
 8015448:	4618      	mov	r0, r3
 801544a:	f7fa fd11 	bl	800fe70 <lwip_htons>
 801544e:	4603      	mov	r3, r0
 8015450:	b2db      	uxtb	r3, r3
 8015452:	f003 0301 	and.w	r3, r3, #1
 8015456:	2b00      	cmp	r3, #0
 8015458:	d03d      	beq.n	80154d6 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801545a:	4b17      	ldr	r3, [pc, #92]	; (80154b8 <tcp_receive+0x888>)
 801545c:	68db      	ldr	r3, [r3, #12]
 801545e:	899b      	ldrh	r3, [r3, #12]
 8015460:	b29b      	uxth	r3, r3
 8015462:	4618      	mov	r0, r3
 8015464:	f7fa fd04 	bl	800fe70 <lwip_htons>
 8015468:	4603      	mov	r3, r0
 801546a:	b2db      	uxtb	r3, r3
 801546c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015470:	2b00      	cmp	r3, #0
 8015472:	d130      	bne.n	80154d6 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015474:	4b10      	ldr	r3, [pc, #64]	; (80154b8 <tcp_receive+0x888>)
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	899b      	ldrh	r3, [r3, #12]
 801547a:	b29c      	uxth	r4, r3
 801547c:	2001      	movs	r0, #1
 801547e:	f7fa fcf7 	bl	800fe70 <lwip_htons>
 8015482:	4603      	mov	r3, r0
 8015484:	461a      	mov	r2, r3
 8015486:	4b0c      	ldr	r3, [pc, #48]	; (80154b8 <tcp_receive+0x888>)
 8015488:	68db      	ldr	r3, [r3, #12]
 801548a:	4322      	orrs	r2, r4
 801548c:	b292      	uxth	r2, r2
 801548e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015490:	4b09      	ldr	r3, [pc, #36]	; (80154b8 <tcp_receive+0x888>)
 8015492:	891c      	ldrh	r4, [r3, #8]
 8015494:	4b08      	ldr	r3, [pc, #32]	; (80154b8 <tcp_receive+0x888>)
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	899b      	ldrh	r3, [r3, #12]
 801549a:	b29b      	uxth	r3, r3
 801549c:	4618      	mov	r0, r3
 801549e:	f7fa fce7 	bl	800fe70 <lwip_htons>
 80154a2:	4603      	mov	r3, r0
 80154a4:	b2db      	uxtb	r3, r3
 80154a6:	f003 0303 	and.w	r3, r3, #3
 80154aa:	2b00      	cmp	r3, #0
 80154ac:	d00e      	beq.n	80154cc <tcp_receive+0x89c>
 80154ae:	2301      	movs	r3, #1
 80154b0:	e00d      	b.n	80154ce <tcp_receive+0x89e>
 80154b2:	bf00      	nop
 80154b4:	20004814 	.word	0x20004814
 80154b8:	200047f4 	.word	0x200047f4
 80154bc:	2000481e 	.word	0x2000481e
 80154c0:	08020354 	.word	0x08020354
 80154c4:	080206fc 	.word	0x080206fc
 80154c8:	080203a0 	.word	0x080203a0
 80154cc:	2300      	movs	r3, #0
 80154ce:	4423      	add	r3, r4
 80154d0:	b29a      	uxth	r2, r3
 80154d2:	4b98      	ldr	r3, [pc, #608]	; (8015734 <tcp_receive+0xb04>)
 80154d4:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80154d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154d8:	613b      	str	r3, [r7, #16]
              next = next->next;
 80154da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80154e0:	6938      	ldr	r0, [r7, #16]
 80154e2:	f7fd fc6c 	bl	8012dbe <tcp_seg_free>
            while (next &&
 80154e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d00e      	beq.n	801550a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80154ec:	4b91      	ldr	r3, [pc, #580]	; (8015734 <tcp_receive+0xb04>)
 80154ee:	881b      	ldrh	r3, [r3, #0]
 80154f0:	461a      	mov	r2, r3
 80154f2:	4b91      	ldr	r3, [pc, #580]	; (8015738 <tcp_receive+0xb08>)
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	441a      	add	r2, r3
 80154f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154fa:	68db      	ldr	r3, [r3, #12]
 80154fc:	685b      	ldr	r3, [r3, #4]
 80154fe:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015500:	8909      	ldrh	r1, [r1, #8]
 8015502:	440b      	add	r3, r1
 8015504:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015506:	2b00      	cmp	r3, #0
 8015508:	da9a      	bge.n	8015440 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801550a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801550c:	2b00      	cmp	r3, #0
 801550e:	d059      	beq.n	80155c4 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015510:	4b88      	ldr	r3, [pc, #544]	; (8015734 <tcp_receive+0xb04>)
 8015512:	881b      	ldrh	r3, [r3, #0]
 8015514:	461a      	mov	r2, r3
 8015516:	4b88      	ldr	r3, [pc, #544]	; (8015738 <tcp_receive+0xb08>)
 8015518:	681b      	ldr	r3, [r3, #0]
 801551a:	441a      	add	r2, r3
 801551c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015524:	2b00      	cmp	r3, #0
 8015526:	dd4d      	ble.n	80155c4 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	b29a      	uxth	r2, r3
 8015530:	4b81      	ldr	r3, [pc, #516]	; (8015738 <tcp_receive+0xb08>)
 8015532:	681b      	ldr	r3, [r3, #0]
 8015534:	b29b      	uxth	r3, r3
 8015536:	1ad3      	subs	r3, r2, r3
 8015538:	b29a      	uxth	r2, r3
 801553a:	4b80      	ldr	r3, [pc, #512]	; (801573c <tcp_receive+0xb0c>)
 801553c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801553e:	4b7f      	ldr	r3, [pc, #508]	; (801573c <tcp_receive+0xb0c>)
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	899b      	ldrh	r3, [r3, #12]
 8015544:	b29b      	uxth	r3, r3
 8015546:	4618      	mov	r0, r3
 8015548:	f7fa fc92 	bl	800fe70 <lwip_htons>
 801554c:	4603      	mov	r3, r0
 801554e:	b2db      	uxtb	r3, r3
 8015550:	f003 0302 	and.w	r3, r3, #2
 8015554:	2b00      	cmp	r3, #0
 8015556:	d005      	beq.n	8015564 <tcp_receive+0x934>
                inseg.len -= 1;
 8015558:	4b78      	ldr	r3, [pc, #480]	; (801573c <tcp_receive+0xb0c>)
 801555a:	891b      	ldrh	r3, [r3, #8]
 801555c:	3b01      	subs	r3, #1
 801555e:	b29a      	uxth	r2, r3
 8015560:	4b76      	ldr	r3, [pc, #472]	; (801573c <tcp_receive+0xb0c>)
 8015562:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015564:	4b75      	ldr	r3, [pc, #468]	; (801573c <tcp_receive+0xb0c>)
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	4a74      	ldr	r2, [pc, #464]	; (801573c <tcp_receive+0xb0c>)
 801556a:	8912      	ldrh	r2, [r2, #8]
 801556c:	4611      	mov	r1, r2
 801556e:	4618      	mov	r0, r3
 8015570:	f7fb fea4 	bl	80112bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015574:	4b71      	ldr	r3, [pc, #452]	; (801573c <tcp_receive+0xb0c>)
 8015576:	891c      	ldrh	r4, [r3, #8]
 8015578:	4b70      	ldr	r3, [pc, #448]	; (801573c <tcp_receive+0xb0c>)
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	899b      	ldrh	r3, [r3, #12]
 801557e:	b29b      	uxth	r3, r3
 8015580:	4618      	mov	r0, r3
 8015582:	f7fa fc75 	bl	800fe70 <lwip_htons>
 8015586:	4603      	mov	r3, r0
 8015588:	b2db      	uxtb	r3, r3
 801558a:	f003 0303 	and.w	r3, r3, #3
 801558e:	2b00      	cmp	r3, #0
 8015590:	d001      	beq.n	8015596 <tcp_receive+0x966>
 8015592:	2301      	movs	r3, #1
 8015594:	e000      	b.n	8015598 <tcp_receive+0x968>
 8015596:	2300      	movs	r3, #0
 8015598:	4423      	add	r3, r4
 801559a:	b29a      	uxth	r2, r3
 801559c:	4b65      	ldr	r3, [pc, #404]	; (8015734 <tcp_receive+0xb04>)
 801559e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80155a0:	4b64      	ldr	r3, [pc, #400]	; (8015734 <tcp_receive+0xb04>)
 80155a2:	881b      	ldrh	r3, [r3, #0]
 80155a4:	461a      	mov	r2, r3
 80155a6:	4b64      	ldr	r3, [pc, #400]	; (8015738 <tcp_receive+0xb08>)
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	441a      	add	r2, r3
 80155ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155ae:	68db      	ldr	r3, [r3, #12]
 80155b0:	685b      	ldr	r3, [r3, #4]
 80155b2:	429a      	cmp	r2, r3
 80155b4:	d006      	beq.n	80155c4 <tcp_receive+0x994>
 80155b6:	4b62      	ldr	r3, [pc, #392]	; (8015740 <tcp_receive+0xb10>)
 80155b8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80155bc:	4961      	ldr	r1, [pc, #388]	; (8015744 <tcp_receive+0xb14>)
 80155be:	4862      	ldr	r0, [pc, #392]	; (8015748 <tcp_receive+0xb18>)
 80155c0:	f006 fb64 	bl	801bc8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155c8:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80155ca:	4b5a      	ldr	r3, [pc, #360]	; (8015734 <tcp_receive+0xb04>)
 80155cc:	881b      	ldrh	r3, [r3, #0]
 80155ce:	461a      	mov	r2, r3
 80155d0:	4b59      	ldr	r3, [pc, #356]	; (8015738 <tcp_receive+0xb08>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	441a      	add	r2, r3
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155de:	4b55      	ldr	r3, [pc, #340]	; (8015734 <tcp_receive+0xb04>)
 80155e0:	881b      	ldrh	r3, [r3, #0]
 80155e2:	429a      	cmp	r2, r3
 80155e4:	d206      	bcs.n	80155f4 <tcp_receive+0x9c4>
 80155e6:	4b56      	ldr	r3, [pc, #344]	; (8015740 <tcp_receive+0xb10>)
 80155e8:	f240 6207 	movw	r2, #1543	; 0x607
 80155ec:	4957      	ldr	r1, [pc, #348]	; (801574c <tcp_receive+0xb1c>)
 80155ee:	4856      	ldr	r0, [pc, #344]	; (8015748 <tcp_receive+0xb18>)
 80155f0:	f006 fb4c 	bl	801bc8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155f8:	4b4e      	ldr	r3, [pc, #312]	; (8015734 <tcp_receive+0xb04>)
 80155fa:	881b      	ldrh	r3, [r3, #0]
 80155fc:	1ad3      	subs	r3, r2, r3
 80155fe:	b29a      	uxth	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015604:	6878      	ldr	r0, [r7, #4]
 8015606:	f7fc feb5 	bl	8012374 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801560a:	4b4c      	ldr	r3, [pc, #304]	; (801573c <tcp_receive+0xb0c>)
 801560c:	685b      	ldr	r3, [r3, #4]
 801560e:	891b      	ldrh	r3, [r3, #8]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d006      	beq.n	8015622 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015614:	4b49      	ldr	r3, [pc, #292]	; (801573c <tcp_receive+0xb0c>)
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	4a4d      	ldr	r2, [pc, #308]	; (8015750 <tcp_receive+0xb20>)
 801561a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801561c:	4b47      	ldr	r3, [pc, #284]	; (801573c <tcp_receive+0xb0c>)
 801561e:	2200      	movs	r2, #0
 8015620:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015622:	4b46      	ldr	r3, [pc, #280]	; (801573c <tcp_receive+0xb0c>)
 8015624:	68db      	ldr	r3, [r3, #12]
 8015626:	899b      	ldrh	r3, [r3, #12]
 8015628:	b29b      	uxth	r3, r3
 801562a:	4618      	mov	r0, r3
 801562c:	f7fa fc20 	bl	800fe70 <lwip_htons>
 8015630:	4603      	mov	r3, r0
 8015632:	b2db      	uxtb	r3, r3
 8015634:	f003 0301 	and.w	r3, r3, #1
 8015638:	2b00      	cmp	r3, #0
 801563a:	f000 80b8 	beq.w	80157ae <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801563e:	4b45      	ldr	r3, [pc, #276]	; (8015754 <tcp_receive+0xb24>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	f043 0320 	orr.w	r3, r3, #32
 8015646:	b2da      	uxtb	r2, r3
 8015648:	4b42      	ldr	r3, [pc, #264]	; (8015754 <tcp_receive+0xb24>)
 801564a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801564c:	e0af      	b.n	80157ae <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015652:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	685b      	ldr	r3, [r3, #4]
 801565c:	4a36      	ldr	r2, [pc, #216]	; (8015738 <tcp_receive+0xb08>)
 801565e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015660:	68bb      	ldr	r3, [r7, #8]
 8015662:	891b      	ldrh	r3, [r3, #8]
 8015664:	461c      	mov	r4, r3
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	68db      	ldr	r3, [r3, #12]
 801566a:	899b      	ldrh	r3, [r3, #12]
 801566c:	b29b      	uxth	r3, r3
 801566e:	4618      	mov	r0, r3
 8015670:	f7fa fbfe 	bl	800fe70 <lwip_htons>
 8015674:	4603      	mov	r3, r0
 8015676:	b2db      	uxtb	r3, r3
 8015678:	f003 0303 	and.w	r3, r3, #3
 801567c:	2b00      	cmp	r3, #0
 801567e:	d001      	beq.n	8015684 <tcp_receive+0xa54>
 8015680:	2301      	movs	r3, #1
 8015682:	e000      	b.n	8015686 <tcp_receive+0xa56>
 8015684:	2300      	movs	r3, #0
 8015686:	191a      	adds	r2, r3, r4
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801568c:	441a      	add	r2, r3
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015696:	461c      	mov	r4, r3
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	891b      	ldrh	r3, [r3, #8]
 801569c:	461d      	mov	r5, r3
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	899b      	ldrh	r3, [r3, #12]
 80156a4:	b29b      	uxth	r3, r3
 80156a6:	4618      	mov	r0, r3
 80156a8:	f7fa fbe2 	bl	800fe70 <lwip_htons>
 80156ac:	4603      	mov	r3, r0
 80156ae:	b2db      	uxtb	r3, r3
 80156b0:	f003 0303 	and.w	r3, r3, #3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d001      	beq.n	80156bc <tcp_receive+0xa8c>
 80156b8:	2301      	movs	r3, #1
 80156ba:	e000      	b.n	80156be <tcp_receive+0xa8e>
 80156bc:	2300      	movs	r3, #0
 80156be:	442b      	add	r3, r5
 80156c0:	429c      	cmp	r4, r3
 80156c2:	d206      	bcs.n	80156d2 <tcp_receive+0xaa2>
 80156c4:	4b1e      	ldr	r3, [pc, #120]	; (8015740 <tcp_receive+0xb10>)
 80156c6:	f240 622b 	movw	r2, #1579	; 0x62b
 80156ca:	4923      	ldr	r1, [pc, #140]	; (8015758 <tcp_receive+0xb28>)
 80156cc:	481e      	ldr	r0, [pc, #120]	; (8015748 <tcp_receive+0xb18>)
 80156ce:	f006 fadd 	bl	801bc8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	891b      	ldrh	r3, [r3, #8]
 80156d6:	461c      	mov	r4, r3
 80156d8:	68bb      	ldr	r3, [r7, #8]
 80156da:	68db      	ldr	r3, [r3, #12]
 80156dc:	899b      	ldrh	r3, [r3, #12]
 80156de:	b29b      	uxth	r3, r3
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7fa fbc5 	bl	800fe70 <lwip_htons>
 80156e6:	4603      	mov	r3, r0
 80156e8:	b2db      	uxtb	r3, r3
 80156ea:	f003 0303 	and.w	r3, r3, #3
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d001      	beq.n	80156f6 <tcp_receive+0xac6>
 80156f2:	2301      	movs	r3, #1
 80156f4:	e000      	b.n	80156f8 <tcp_receive+0xac8>
 80156f6:	2300      	movs	r3, #0
 80156f8:	1919      	adds	r1, r3, r4
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80156fe:	b28b      	uxth	r3, r1
 8015700:	1ad3      	subs	r3, r2, r3
 8015702:	b29a      	uxth	r2, r3
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015708:	6878      	ldr	r0, [r7, #4]
 801570a:	f7fc fe33 	bl	8012374 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801570e:	68bb      	ldr	r3, [r7, #8]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	891b      	ldrh	r3, [r3, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d028      	beq.n	801576a <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015718:	4b0d      	ldr	r3, [pc, #52]	; (8015750 <tcp_receive+0xb20>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d01d      	beq.n	801575c <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015720:	4b0b      	ldr	r3, [pc, #44]	; (8015750 <tcp_receive+0xb20>)
 8015722:	681a      	ldr	r2, [r3, #0]
 8015724:	68bb      	ldr	r3, [r7, #8]
 8015726:	685b      	ldr	r3, [r3, #4]
 8015728:	4619      	mov	r1, r3
 801572a:	4610      	mov	r0, r2
 801572c:	f7fc f84c 	bl	80117c8 <pbuf_cat>
 8015730:	e018      	b.n	8015764 <tcp_receive+0xb34>
 8015732:	bf00      	nop
 8015734:	2000481e 	.word	0x2000481e
 8015738:	20004814 	.word	0x20004814
 801573c:	200047f4 	.word	0x200047f4
 8015740:	08020354 	.word	0x08020354
 8015744:	08020734 	.word	0x08020734
 8015748:	080203a0 	.word	0x080203a0
 801574c:	08020770 	.word	0x08020770
 8015750:	20004824 	.word	0x20004824
 8015754:	20004821 	.word	0x20004821
 8015758:	08020790 	.word	0x08020790
            } else {
              recv_data = cseg->p;
 801575c:	68bb      	ldr	r3, [r7, #8]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	4a70      	ldr	r2, [pc, #448]	; (8015924 <tcp_receive+0xcf4>)
 8015762:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	2200      	movs	r2, #0
 8015768:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	68db      	ldr	r3, [r3, #12]
 801576e:	899b      	ldrh	r3, [r3, #12]
 8015770:	b29b      	uxth	r3, r3
 8015772:	4618      	mov	r0, r3
 8015774:	f7fa fb7c 	bl	800fe70 <lwip_htons>
 8015778:	4603      	mov	r3, r0
 801577a:	b2db      	uxtb	r3, r3
 801577c:	f003 0301 	and.w	r3, r3, #1
 8015780:	2b00      	cmp	r3, #0
 8015782:	d00d      	beq.n	80157a0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015784:	4b68      	ldr	r3, [pc, #416]	; (8015928 <tcp_receive+0xcf8>)
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	f043 0320 	orr.w	r3, r3, #32
 801578c:	b2da      	uxtb	r2, r3
 801578e:	4b66      	ldr	r3, [pc, #408]	; (8015928 <tcp_receive+0xcf8>)
 8015790:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	7d1b      	ldrb	r3, [r3, #20]
 8015796:	2b04      	cmp	r3, #4
 8015798:	d102      	bne.n	80157a0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801579a:	687b      	ldr	r3, [r7, #4]
 801579c:	2207      	movs	r2, #7
 801579e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80157a8:	68b8      	ldr	r0, [r7, #8]
 80157aa:	f7fd fb08 	bl	8012dbe <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d008      	beq.n	80157c8 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157ba:	68db      	ldr	r3, [r3, #12]
 80157bc:	685a      	ldr	r2, [r3, #4]
 80157be:	687b      	ldr	r3, [r7, #4]
 80157c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80157c2:	429a      	cmp	r2, r3
 80157c4:	f43f af43 	beq.w	801564e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	8b5b      	ldrh	r3, [r3, #26]
 80157cc:	f003 0301 	and.w	r3, r3, #1
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00e      	beq.n	80157f2 <tcp_receive+0xbc2>
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	8b5b      	ldrh	r3, [r3, #26]
 80157d8:	f023 0301 	bic.w	r3, r3, #1
 80157dc:	b29a      	uxth	r2, r3
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	835a      	strh	r2, [r3, #26]
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	8b5b      	ldrh	r3, [r3, #26]
 80157e6:	f043 0302 	orr.w	r3, r3, #2
 80157ea:	b29a      	uxth	r2, r3
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80157f0:	e188      	b.n	8015b04 <tcp_receive+0xed4>
        tcp_ack(pcb);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	8b5b      	ldrh	r3, [r3, #26]
 80157f6:	f043 0301 	orr.w	r3, r3, #1
 80157fa:	b29a      	uxth	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015800:	e180      	b.n	8015b04 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015802:	687b      	ldr	r3, [r7, #4]
 8015804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015806:	2b00      	cmp	r3, #0
 8015808:	d106      	bne.n	8015818 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801580a:	4848      	ldr	r0, [pc, #288]	; (801592c <tcp_receive+0xcfc>)
 801580c:	f7fd faf0 	bl	8012df0 <tcp_seg_copy>
 8015810:	4602      	mov	r2, r0
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	675a      	str	r2, [r3, #116]	; 0x74
 8015816:	e16d      	b.n	8015af4 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015818:	2300      	movs	r3, #0
 801581a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015820:	63bb      	str	r3, [r7, #56]	; 0x38
 8015822:	e157      	b.n	8015ad4 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8015824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015826:	68db      	ldr	r3, [r3, #12]
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	4b41      	ldr	r3, [pc, #260]	; (8015930 <tcp_receive+0xd00>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	429a      	cmp	r2, r3
 8015830:	d11d      	bne.n	801586e <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015832:	4b3e      	ldr	r3, [pc, #248]	; (801592c <tcp_receive+0xcfc>)
 8015834:	891a      	ldrh	r2, [r3, #8]
 8015836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015838:	891b      	ldrh	r3, [r3, #8]
 801583a:	429a      	cmp	r2, r3
 801583c:	f240 814f 	bls.w	8015ade <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015840:	483a      	ldr	r0, [pc, #232]	; (801592c <tcp_receive+0xcfc>)
 8015842:	f7fd fad5 	bl	8012df0 <tcp_seg_copy>
 8015846:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015848:	697b      	ldr	r3, [r7, #20]
 801584a:	2b00      	cmp	r3, #0
 801584c:	f000 8149 	beq.w	8015ae2 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015852:	2b00      	cmp	r3, #0
 8015854:	d003      	beq.n	801585e <tcp_receive+0xc2e>
                    prev->next = cseg;
 8015856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015858:	697a      	ldr	r2, [r7, #20]
 801585a:	601a      	str	r2, [r3, #0]
 801585c:	e002      	b.n	8015864 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	697a      	ldr	r2, [r7, #20]
 8015862:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015864:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015866:	6978      	ldr	r0, [r7, #20]
 8015868:	f7ff f8de 	bl	8014a28 <tcp_oos_insert_segment>
                }
                break;
 801586c:	e139      	b.n	8015ae2 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015870:	2b00      	cmp	r3, #0
 8015872:	d117      	bne.n	80158a4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8015874:	4b2e      	ldr	r3, [pc, #184]	; (8015930 <tcp_receive+0xd00>)
 8015876:	681a      	ldr	r2, [r3, #0]
 8015878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801587a:	68db      	ldr	r3, [r3, #12]
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	1ad3      	subs	r3, r2, r3
 8015880:	2b00      	cmp	r3, #0
 8015882:	da57      	bge.n	8015934 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015884:	4829      	ldr	r0, [pc, #164]	; (801592c <tcp_receive+0xcfc>)
 8015886:	f7fd fab3 	bl	8012df0 <tcp_seg_copy>
 801588a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801588c:	69bb      	ldr	r3, [r7, #24]
 801588e:	2b00      	cmp	r3, #0
 8015890:	f000 8129 	beq.w	8015ae6 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	69ba      	ldr	r2, [r7, #24]
 8015898:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801589a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801589c:	69b8      	ldr	r0, [r7, #24]
 801589e:	f7ff f8c3 	bl	8014a28 <tcp_oos_insert_segment>
                  }
                  break;
 80158a2:	e120      	b.n	8015ae6 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80158a4:	4b22      	ldr	r3, [pc, #136]	; (8015930 <tcp_receive+0xd00>)
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	685b      	ldr	r3, [r3, #4]
 80158ae:	1ad3      	subs	r3, r2, r3
 80158b0:	3b01      	subs	r3, #1
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	db3e      	blt.n	8015934 <tcp_receive+0xd04>
 80158b6:	4b1e      	ldr	r3, [pc, #120]	; (8015930 <tcp_receive+0xd00>)
 80158b8:	681a      	ldr	r2, [r3, #0]
 80158ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158bc:	68db      	ldr	r3, [r3, #12]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	1ad3      	subs	r3, r2, r3
 80158c2:	3301      	adds	r3, #1
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	dc35      	bgt.n	8015934 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158c8:	4818      	ldr	r0, [pc, #96]	; (801592c <tcp_receive+0xcfc>)
 80158ca:	f7fd fa91 	bl	8012df0 <tcp_seg_copy>
 80158ce:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	f000 8109 	beq.w	8015aea <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80158d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158da:	68db      	ldr	r3, [r3, #12]
 80158dc:	685b      	ldr	r3, [r3, #4]
 80158de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158e0:	8912      	ldrh	r2, [r2, #8]
 80158e2:	441a      	add	r2, r3
 80158e4:	4b12      	ldr	r3, [pc, #72]	; (8015930 <tcp_receive+0xd00>)
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	dd12      	ble.n	8015914 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80158ee:	4b10      	ldr	r3, [pc, #64]	; (8015930 <tcp_receive+0xd00>)
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	b29a      	uxth	r2, r3
 80158f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158f6:	68db      	ldr	r3, [r3, #12]
 80158f8:	685b      	ldr	r3, [r3, #4]
 80158fa:	b29b      	uxth	r3, r3
 80158fc:	1ad3      	subs	r3, r2, r3
 80158fe:	b29a      	uxth	r2, r3
 8015900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015902:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015906:	685a      	ldr	r2, [r3, #4]
 8015908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801590a:	891b      	ldrh	r3, [r3, #8]
 801590c:	4619      	mov	r1, r3
 801590e:	4610      	mov	r0, r2
 8015910:	f7fb fcd4 	bl	80112bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015914:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015916:	69fa      	ldr	r2, [r7, #28]
 8015918:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801591a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801591c:	69f8      	ldr	r0, [r7, #28]
 801591e:	f7ff f883 	bl	8014a28 <tcp_oos_insert_segment>
                  }
                  break;
 8015922:	e0e2      	b.n	8015aea <tcp_receive+0xeba>
 8015924:	20004824 	.word	0x20004824
 8015928:	20004821 	.word	0x20004821
 801592c:	200047f4 	.word	0x200047f4
 8015930:	20004814 	.word	0x20004814
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015936:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	2b00      	cmp	r3, #0
 801593e:	f040 80c6 	bne.w	8015ace <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015942:	4b80      	ldr	r3, [pc, #512]	; (8015b44 <tcp_receive+0xf14>)
 8015944:	681a      	ldr	r2, [r3, #0]
 8015946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015948:	68db      	ldr	r3, [r3, #12]
 801594a:	685b      	ldr	r3, [r3, #4]
 801594c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801594e:	2b00      	cmp	r3, #0
 8015950:	f340 80bd 	ble.w	8015ace <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015956:	68db      	ldr	r3, [r3, #12]
 8015958:	899b      	ldrh	r3, [r3, #12]
 801595a:	b29b      	uxth	r3, r3
 801595c:	4618      	mov	r0, r3
 801595e:	f7fa fa87 	bl	800fe70 <lwip_htons>
 8015962:	4603      	mov	r3, r0
 8015964:	b2db      	uxtb	r3, r3
 8015966:	f003 0301 	and.w	r3, r3, #1
 801596a:	2b00      	cmp	r3, #0
 801596c:	f040 80bf 	bne.w	8015aee <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015970:	4875      	ldr	r0, [pc, #468]	; (8015b48 <tcp_receive+0xf18>)
 8015972:	f7fd fa3d 	bl	8012df0 <tcp_seg_copy>
 8015976:	4602      	mov	r2, r0
 8015978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801597e:	681b      	ldr	r3, [r3, #0]
 8015980:	2b00      	cmp	r3, #0
 8015982:	f000 80b6 	beq.w	8015af2 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015988:	68db      	ldr	r3, [r3, #12]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801598e:	8912      	ldrh	r2, [r2, #8]
 8015990:	441a      	add	r2, r3
 8015992:	4b6c      	ldr	r3, [pc, #432]	; (8015b44 <tcp_receive+0xf14>)
 8015994:	681b      	ldr	r3, [r3, #0]
 8015996:	1ad3      	subs	r3, r2, r3
 8015998:	2b00      	cmp	r3, #0
 801599a:	dd12      	ble.n	80159c2 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801599c:	4b69      	ldr	r3, [pc, #420]	; (8015b44 <tcp_receive+0xf14>)
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	b29a      	uxth	r2, r3
 80159a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	685b      	ldr	r3, [r3, #4]
 80159a8:	b29b      	uxth	r3, r3
 80159aa:	1ad3      	subs	r3, r2, r3
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80159b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b4:	685a      	ldr	r2, [r3, #4]
 80159b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b8:	891b      	ldrh	r3, [r3, #8]
 80159ba:	4619      	mov	r1, r3
 80159bc:	4610      	mov	r0, r2
 80159be:	f7fb fc7d 	bl	80112bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80159c2:	4b62      	ldr	r3, [pc, #392]	; (8015b4c <tcp_receive+0xf1c>)
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	461a      	mov	r2, r3
 80159c8:	4b5e      	ldr	r3, [pc, #376]	; (8015b44 <tcp_receive+0xf14>)
 80159ca:	681b      	ldr	r3, [r3, #0]
 80159cc:	441a      	add	r2, r3
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159d2:	6879      	ldr	r1, [r7, #4]
 80159d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159d6:	440b      	add	r3, r1
 80159d8:	1ad3      	subs	r3, r2, r3
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f340 8089 	ble.w	8015af2 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80159e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	899b      	ldrh	r3, [r3, #12]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7fa fa40 	bl	800fe70 <lwip_htons>
 80159f0:	4603      	mov	r3, r0
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	f003 0301 	and.w	r3, r3, #1
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d022      	beq.n	8015a42 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80159fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	899b      	ldrh	r3, [r3, #12]
 8015a04:	b29b      	uxth	r3, r3
 8015a06:	b21b      	sxth	r3, r3
 8015a08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a0c:	b21c      	sxth	r4, r3
 8015a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	68db      	ldr	r3, [r3, #12]
 8015a14:	899b      	ldrh	r3, [r3, #12]
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	4618      	mov	r0, r3
 8015a1a:	f7fa fa29 	bl	800fe70 <lwip_htons>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	b2db      	uxtb	r3, r3
 8015a22:	b29b      	uxth	r3, r3
 8015a24:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f7fa fa20 	bl	800fe70 <lwip_htons>
 8015a30:	4603      	mov	r3, r0
 8015a32:	b21b      	sxth	r3, r3
 8015a34:	4323      	orrs	r3, r4
 8015a36:	b21a      	sxth	r2, r3
 8015a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	68db      	ldr	r3, [r3, #12]
 8015a3e:	b292      	uxth	r2, r2
 8015a40:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a46:	b29a      	uxth	r2, r3
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a4c:	4413      	add	r3, r2
 8015a4e:	b299      	uxth	r1, r3
 8015a50:	4b3c      	ldr	r3, [pc, #240]	; (8015b44 <tcp_receive+0xf14>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	b29a      	uxth	r2, r3
 8015a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	1a8a      	subs	r2, r1, r2
 8015a5c:	b292      	uxth	r2, r2
 8015a5e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	685a      	ldr	r2, [r3, #4]
 8015a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	891b      	ldrh	r3, [r3, #8]
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	4610      	mov	r0, r2
 8015a70:	f7fb fc24 	bl	80112bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	891c      	ldrh	r4, [r3, #8]
 8015a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	899b      	ldrh	r3, [r3, #12]
 8015a82:	b29b      	uxth	r3, r3
 8015a84:	4618      	mov	r0, r3
 8015a86:	f7fa f9f3 	bl	800fe70 <lwip_htons>
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	b2db      	uxtb	r3, r3
 8015a8e:	f003 0303 	and.w	r3, r3, #3
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d001      	beq.n	8015a9a <tcp_receive+0xe6a>
 8015a96:	2301      	movs	r3, #1
 8015a98:	e000      	b.n	8015a9c <tcp_receive+0xe6c>
 8015a9a:	2300      	movs	r3, #0
 8015a9c:	4423      	add	r3, r4
 8015a9e:	b29a      	uxth	r2, r3
 8015aa0:	4b2a      	ldr	r3, [pc, #168]	; (8015b4c <tcp_receive+0xf1c>)
 8015aa2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015aa4:	4b29      	ldr	r3, [pc, #164]	; (8015b4c <tcp_receive+0xf1c>)
 8015aa6:	881b      	ldrh	r3, [r3, #0]
 8015aa8:	461a      	mov	r2, r3
 8015aaa:	4b26      	ldr	r3, [pc, #152]	; (8015b44 <tcp_receive+0xf14>)
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	441a      	add	r2, r3
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ab4:	6879      	ldr	r1, [r7, #4]
 8015ab6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ab8:	440b      	add	r3, r1
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d019      	beq.n	8015af2 <tcp_receive+0xec2>
 8015abe:	4b24      	ldr	r3, [pc, #144]	; (8015b50 <tcp_receive+0xf20>)
 8015ac0:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015ac4:	4923      	ldr	r1, [pc, #140]	; (8015b54 <tcp_receive+0xf24>)
 8015ac6:	4824      	ldr	r0, [pc, #144]	; (8015b58 <tcp_receive+0xf28>)
 8015ac8:	f006 f8e0 	bl	801bc8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015acc:	e011      	b.n	8015af2 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	f47f aea4 	bne.w	8015824 <tcp_receive+0xbf4>
 8015adc:	e00a      	b.n	8015af4 <tcp_receive+0xec4>
                break;
 8015ade:	bf00      	nop
 8015ae0:	e008      	b.n	8015af4 <tcp_receive+0xec4>
                break;
 8015ae2:	bf00      	nop
 8015ae4:	e006      	b.n	8015af4 <tcp_receive+0xec4>
                  break;
 8015ae6:	bf00      	nop
 8015ae8:	e004      	b.n	8015af4 <tcp_receive+0xec4>
                  break;
 8015aea:	bf00      	nop
 8015aec:	e002      	b.n	8015af4 <tcp_receive+0xec4>
                  break;
 8015aee:	bf00      	nop
 8015af0:	e000      	b.n	8015af4 <tcp_receive+0xec4>
                break;
 8015af2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f001 fe8b 	bl	8017810 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015afa:	e003      	b.n	8015b04 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015afc:	6878      	ldr	r0, [r7, #4]
 8015afe:	f001 fe87 	bl	8017810 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b02:	e01a      	b.n	8015b3a <tcp_receive+0xf0a>
 8015b04:	e019      	b.n	8015b3a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b06:	4b0f      	ldr	r3, [pc, #60]	; (8015b44 <tcp_receive+0xf14>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b0e:	1ad3      	subs	r3, r2, r3
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	db0a      	blt.n	8015b2a <tcp_receive+0xefa>
 8015b14:	4b0b      	ldr	r3, [pc, #44]	; (8015b44 <tcp_receive+0xf14>)
 8015b16:	681a      	ldr	r2, [r3, #0]
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b1c:	6879      	ldr	r1, [r7, #4]
 8015b1e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b20:	440b      	add	r3, r1
 8015b22:	1ad3      	subs	r3, r2, r3
 8015b24:	3301      	adds	r3, #1
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	dd07      	ble.n	8015b3a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015b2a:	687b      	ldr	r3, [r7, #4]
 8015b2c:	8b5b      	ldrh	r3, [r3, #26]
 8015b2e:	f043 0302 	orr.w	r3, r3, #2
 8015b32:	b29a      	uxth	r2, r3
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b38:	e7ff      	b.n	8015b3a <tcp_receive+0xf0a>
 8015b3a:	bf00      	nop
 8015b3c:	3750      	adds	r7, #80	; 0x50
 8015b3e:	46bd      	mov	sp, r7
 8015b40:	bdb0      	pop	{r4, r5, r7, pc}
 8015b42:	bf00      	nop
 8015b44:	20004814 	.word	0x20004814
 8015b48:	200047f4 	.word	0x200047f4
 8015b4c:	2000481e 	.word	0x2000481e
 8015b50:	08020354 	.word	0x08020354
 8015b54:	080206fc 	.word	0x080206fc
 8015b58:	080203a0 	.word	0x080203a0

08015b5c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b5c:	b480      	push	{r7}
 8015b5e:	b083      	sub	sp, #12
 8015b60:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b62:	4b15      	ldr	r3, [pc, #84]	; (8015bb8 <tcp_get_next_optbyte+0x5c>)
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	1c5a      	adds	r2, r3, #1
 8015b68:	b291      	uxth	r1, r2
 8015b6a:	4a13      	ldr	r2, [pc, #76]	; (8015bb8 <tcp_get_next_optbyte+0x5c>)
 8015b6c:	8011      	strh	r1, [r2, #0]
 8015b6e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b70:	4b12      	ldr	r3, [pc, #72]	; (8015bbc <tcp_get_next_optbyte+0x60>)
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d004      	beq.n	8015b82 <tcp_get_next_optbyte+0x26>
 8015b78:	4b11      	ldr	r3, [pc, #68]	; (8015bc0 <tcp_get_next_optbyte+0x64>)
 8015b7a:	881b      	ldrh	r3, [r3, #0]
 8015b7c:	88fa      	ldrh	r2, [r7, #6]
 8015b7e:	429a      	cmp	r2, r3
 8015b80:	d208      	bcs.n	8015b94 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b82:	4b10      	ldr	r3, [pc, #64]	; (8015bc4 <tcp_get_next_optbyte+0x68>)
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	3314      	adds	r3, #20
 8015b88:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015b8a:	88fb      	ldrh	r3, [r7, #6]
 8015b8c:	683a      	ldr	r2, [r7, #0]
 8015b8e:	4413      	add	r3, r2
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	e00b      	b.n	8015bac <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015b94:	88fb      	ldrh	r3, [r7, #6]
 8015b96:	b2da      	uxtb	r2, r3
 8015b98:	4b09      	ldr	r3, [pc, #36]	; (8015bc0 <tcp_get_next_optbyte+0x64>)
 8015b9a:	881b      	ldrh	r3, [r3, #0]
 8015b9c:	b2db      	uxtb	r3, r3
 8015b9e:	1ad3      	subs	r3, r2, r3
 8015ba0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015ba2:	4b06      	ldr	r3, [pc, #24]	; (8015bbc <tcp_get_next_optbyte+0x60>)
 8015ba4:	681a      	ldr	r2, [r3, #0]
 8015ba6:	797b      	ldrb	r3, [r7, #5]
 8015ba8:	4413      	add	r3, r2
 8015baa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bac:	4618      	mov	r0, r3
 8015bae:	370c      	adds	r7, #12
 8015bb0:	46bd      	mov	sp, r7
 8015bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb6:	4770      	bx	lr
 8015bb8:	20004810 	.word	0x20004810
 8015bbc:	2000480c 	.word	0x2000480c
 8015bc0:	2000480a 	.word	0x2000480a
 8015bc4:	20004804 	.word	0x20004804

08015bc8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d106      	bne.n	8015be4 <tcp_parseopt+0x1c>
 8015bd6:	4b32      	ldr	r3, [pc, #200]	; (8015ca0 <tcp_parseopt+0xd8>)
 8015bd8:	f240 727d 	movw	r2, #1917	; 0x77d
 8015bdc:	4931      	ldr	r1, [pc, #196]	; (8015ca4 <tcp_parseopt+0xdc>)
 8015bde:	4832      	ldr	r0, [pc, #200]	; (8015ca8 <tcp_parseopt+0xe0>)
 8015be0:	f006 f854 	bl	801bc8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015be4:	4b31      	ldr	r3, [pc, #196]	; (8015cac <tcp_parseopt+0xe4>)
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	2b00      	cmp	r3, #0
 8015bea:	d055      	beq.n	8015c98 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015bec:	4b30      	ldr	r3, [pc, #192]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015bee:	2200      	movs	r2, #0
 8015bf0:	801a      	strh	r2, [r3, #0]
 8015bf2:	e045      	b.n	8015c80 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015bf4:	f7ff ffb2 	bl	8015b5c <tcp_get_next_optbyte>
 8015bf8:	4603      	mov	r3, r0
 8015bfa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015bfc:	7bfb      	ldrb	r3, [r7, #15]
 8015bfe:	2b02      	cmp	r3, #2
 8015c00:	d006      	beq.n	8015c10 <tcp_parseopt+0x48>
 8015c02:	2b02      	cmp	r3, #2
 8015c04:	dc2b      	bgt.n	8015c5e <tcp_parseopt+0x96>
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d041      	beq.n	8015c8e <tcp_parseopt+0xc6>
 8015c0a:	2b01      	cmp	r3, #1
 8015c0c:	d127      	bne.n	8015c5e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015c0e:	e037      	b.n	8015c80 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c10:	f7ff ffa4 	bl	8015b5c <tcp_get_next_optbyte>
 8015c14:	4603      	mov	r3, r0
 8015c16:	2b04      	cmp	r3, #4
 8015c18:	d13b      	bne.n	8015c92 <tcp_parseopt+0xca>
 8015c1a:	4b25      	ldr	r3, [pc, #148]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c1c:	881b      	ldrh	r3, [r3, #0]
 8015c1e:	3301      	adds	r3, #1
 8015c20:	4a22      	ldr	r2, [pc, #136]	; (8015cac <tcp_parseopt+0xe4>)
 8015c22:	8812      	ldrh	r2, [r2, #0]
 8015c24:	4293      	cmp	r3, r2
 8015c26:	da34      	bge.n	8015c92 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015c28:	f7ff ff98 	bl	8015b5c <tcp_get_next_optbyte>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	b29b      	uxth	r3, r3
 8015c30:	021b      	lsls	r3, r3, #8
 8015c32:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015c34:	f7ff ff92 	bl	8015b5c <tcp_get_next_optbyte>
 8015c38:	4603      	mov	r3, r0
 8015c3a:	b29a      	uxth	r2, r3
 8015c3c:	89bb      	ldrh	r3, [r7, #12]
 8015c3e:	4313      	orrs	r3, r2
 8015c40:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c42:	89bb      	ldrh	r3, [r7, #12]
 8015c44:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015c48:	d804      	bhi.n	8015c54 <tcp_parseopt+0x8c>
 8015c4a:	89bb      	ldrh	r3, [r7, #12]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d001      	beq.n	8015c54 <tcp_parseopt+0x8c>
 8015c50:	89ba      	ldrh	r2, [r7, #12]
 8015c52:	e001      	b.n	8015c58 <tcp_parseopt+0x90>
 8015c54:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015c5c:	e010      	b.n	8015c80 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c5e:	f7ff ff7d 	bl	8015b5c <tcp_get_next_optbyte>
 8015c62:	4603      	mov	r3, r0
 8015c64:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c66:	7afb      	ldrb	r3, [r7, #11]
 8015c68:	2b01      	cmp	r3, #1
 8015c6a:	d914      	bls.n	8015c96 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c6c:	7afb      	ldrb	r3, [r7, #11]
 8015c6e:	b29a      	uxth	r2, r3
 8015c70:	4b0f      	ldr	r3, [pc, #60]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c72:	881b      	ldrh	r3, [r3, #0]
 8015c74:	4413      	add	r3, r2
 8015c76:	b29b      	uxth	r3, r3
 8015c78:	3b02      	subs	r3, #2
 8015c7a:	b29a      	uxth	r2, r3
 8015c7c:	4b0c      	ldr	r3, [pc, #48]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c7e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c80:	4b0b      	ldr	r3, [pc, #44]	; (8015cb0 <tcp_parseopt+0xe8>)
 8015c82:	881a      	ldrh	r2, [r3, #0]
 8015c84:	4b09      	ldr	r3, [pc, #36]	; (8015cac <tcp_parseopt+0xe4>)
 8015c86:	881b      	ldrh	r3, [r3, #0]
 8015c88:	429a      	cmp	r2, r3
 8015c8a:	d3b3      	bcc.n	8015bf4 <tcp_parseopt+0x2c>
 8015c8c:	e004      	b.n	8015c98 <tcp_parseopt+0xd0>
          return;
 8015c8e:	bf00      	nop
 8015c90:	e002      	b.n	8015c98 <tcp_parseopt+0xd0>
            return;
 8015c92:	bf00      	nop
 8015c94:	e000      	b.n	8015c98 <tcp_parseopt+0xd0>
            return;
 8015c96:	bf00      	nop
      }
    }
  }
}
 8015c98:	3710      	adds	r7, #16
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}
 8015c9e:	bf00      	nop
 8015ca0:	08020354 	.word	0x08020354
 8015ca4:	080207b8 	.word	0x080207b8
 8015ca8:	080203a0 	.word	0x080203a0
 8015cac:	20004808 	.word	0x20004808
 8015cb0:	20004810 	.word	0x20004810

08015cb4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015cb4:	b480      	push	{r7}
 8015cb6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015cb8:	4b05      	ldr	r3, [pc, #20]	; (8015cd0 <tcp_trigger_input_pcb_close+0x1c>)
 8015cba:	781b      	ldrb	r3, [r3, #0]
 8015cbc:	f043 0310 	orr.w	r3, r3, #16
 8015cc0:	b2da      	uxtb	r2, r3
 8015cc2:	4b03      	ldr	r3, [pc, #12]	; (8015cd0 <tcp_trigger_input_pcb_close+0x1c>)
 8015cc4:	701a      	strb	r2, [r3, #0]
}
 8015cc6:	bf00      	nop
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cce:	4770      	bx	lr
 8015cd0:	20004821 	.word	0x20004821

08015cd4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b084      	sub	sp, #16
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	60f8      	str	r0, [r7, #12]
 8015cdc:	60b9      	str	r1, [r7, #8]
 8015cde:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d00a      	beq.n	8015cfc <tcp_route+0x28>
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	7a1b      	ldrb	r3, [r3, #8]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d006      	beq.n	8015cfc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015cee:	68fb      	ldr	r3, [r7, #12]
 8015cf0:	7a1b      	ldrb	r3, [r3, #8]
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	f7fb f8da 	bl	8010eac <netif_get_by_index>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	e003      	b.n	8015d04 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	f003 fe35 	bl	801996c <ip4_route>
 8015d02:	4603      	mov	r3, r0
  }
}
 8015d04:	4618      	mov	r0, r3
 8015d06:	3710      	adds	r7, #16
 8015d08:	46bd      	mov	sp, r7
 8015d0a:	bd80      	pop	{r7, pc}

08015d0c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d0c:	b590      	push	{r4, r7, lr}
 8015d0e:	b087      	sub	sp, #28
 8015d10:	af00      	add	r7, sp, #0
 8015d12:	60f8      	str	r0, [r7, #12]
 8015d14:	60b9      	str	r1, [r7, #8]
 8015d16:	603b      	str	r3, [r7, #0]
 8015d18:	4613      	mov	r3, r2
 8015d1a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d105      	bne.n	8015d2e <tcp_create_segment+0x22>
 8015d22:	4b44      	ldr	r3, [pc, #272]	; (8015e34 <tcp_create_segment+0x128>)
 8015d24:	22a3      	movs	r2, #163	; 0xa3
 8015d26:	4944      	ldr	r1, [pc, #272]	; (8015e38 <tcp_create_segment+0x12c>)
 8015d28:	4844      	ldr	r0, [pc, #272]	; (8015e3c <tcp_create_segment+0x130>)
 8015d2a:	f005 ffaf 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015d2e:	68bb      	ldr	r3, [r7, #8]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d105      	bne.n	8015d40 <tcp_create_segment+0x34>
 8015d34:	4b3f      	ldr	r3, [pc, #252]	; (8015e34 <tcp_create_segment+0x128>)
 8015d36:	22a4      	movs	r2, #164	; 0xa4
 8015d38:	4941      	ldr	r1, [pc, #260]	; (8015e40 <tcp_create_segment+0x134>)
 8015d3a:	4840      	ldr	r0, [pc, #256]	; (8015e3c <tcp_create_segment+0x130>)
 8015d3c:	f005 ffa6 	bl	801bc8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	b2db      	uxtb	r3, r3
 8015d48:	f003 0304 	and.w	r3, r3, #4
 8015d4c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d4e:	2003      	movs	r0, #3
 8015d50:	f7fa fd44 	bl	80107dc <memp_malloc>
 8015d54:	6138      	str	r0, [r7, #16]
 8015d56:	693b      	ldr	r3, [r7, #16]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d104      	bne.n	8015d66 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d5c:	68b8      	ldr	r0, [r7, #8]
 8015d5e:	f7fb fc65 	bl	801162c <pbuf_free>
    return NULL;
 8015d62:	2300      	movs	r3, #0
 8015d64:	e061      	b.n	8015e2a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d6c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2200      	movs	r2, #0
 8015d72:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	68ba      	ldr	r2, [r7, #8]
 8015d78:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	891a      	ldrh	r2, [r3, #8]
 8015d7e:	7dfb      	ldrb	r3, [r7, #23]
 8015d80:	b29b      	uxth	r3, r3
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d205      	bcs.n	8015d92 <tcp_create_segment+0x86>
 8015d86:	4b2b      	ldr	r3, [pc, #172]	; (8015e34 <tcp_create_segment+0x128>)
 8015d88:	22b0      	movs	r2, #176	; 0xb0
 8015d8a:	492e      	ldr	r1, [pc, #184]	; (8015e44 <tcp_create_segment+0x138>)
 8015d8c:	482b      	ldr	r0, [pc, #172]	; (8015e3c <tcp_create_segment+0x130>)
 8015d8e:	f005 ff7d 	bl	801bc8c <iprintf>
  seg->len = p->tot_len - optlen;
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	891a      	ldrh	r2, [r3, #8]
 8015d96:	7dfb      	ldrb	r3, [r7, #23]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	1ad3      	subs	r3, r2, r3
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	693b      	ldr	r3, [r7, #16]
 8015da0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015da2:	2114      	movs	r1, #20
 8015da4:	68b8      	ldr	r0, [r7, #8]
 8015da6:	f7fb fb79 	bl	801149c <pbuf_add_header>
 8015daa:	4603      	mov	r3, r0
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d004      	beq.n	8015dba <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015db0:	6938      	ldr	r0, [r7, #16]
 8015db2:	f7fd f804 	bl	8012dbe <tcp_seg_free>
    return NULL;
 8015db6:	2300      	movs	r3, #0
 8015db8:	e037      	b.n	8015e2a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015dba:	693b      	ldr	r3, [r7, #16]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	685a      	ldr	r2, [r3, #4]
 8015dc0:	693b      	ldr	r3, [r7, #16]
 8015dc2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	8ada      	ldrh	r2, [r3, #22]
 8015dc8:	693b      	ldr	r3, [r7, #16]
 8015dca:	68dc      	ldr	r4, [r3, #12]
 8015dcc:	4610      	mov	r0, r2
 8015dce:	f7fa f84f 	bl	800fe70 <lwip_htons>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	8b1a      	ldrh	r2, [r3, #24]
 8015dda:	693b      	ldr	r3, [r7, #16]
 8015ddc:	68dc      	ldr	r4, [r3, #12]
 8015dde:	4610      	mov	r0, r2
 8015de0:	f7fa f846 	bl	800fe70 <lwip_htons>
 8015de4:	4603      	mov	r3, r0
 8015de6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015de8:	693b      	ldr	r3, [r7, #16]
 8015dea:	68dc      	ldr	r4, [r3, #12]
 8015dec:	6838      	ldr	r0, [r7, #0]
 8015dee:	f7fa f854 	bl	800fe9a <lwip_htonl>
 8015df2:	4603      	mov	r3, r0
 8015df4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015df6:	7dfb      	ldrb	r3, [r7, #23]
 8015df8:	089b      	lsrs	r3, r3, #2
 8015dfa:	b2db      	uxtb	r3, r3
 8015dfc:	b29b      	uxth	r3, r3
 8015dfe:	3305      	adds	r3, #5
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	031b      	lsls	r3, r3, #12
 8015e04:	b29a      	uxth	r2, r3
 8015e06:	79fb      	ldrb	r3, [r7, #7]
 8015e08:	b29b      	uxth	r3, r3
 8015e0a:	4313      	orrs	r3, r2
 8015e0c:	b29a      	uxth	r2, r3
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	68dc      	ldr	r4, [r3, #12]
 8015e12:	4610      	mov	r0, r2
 8015e14:	f7fa f82c 	bl	800fe70 <lwip_htons>
 8015e18:	4603      	mov	r3, r0
 8015e1a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e1c:	693b      	ldr	r3, [r7, #16]
 8015e1e:	68db      	ldr	r3, [r3, #12]
 8015e20:	2200      	movs	r2, #0
 8015e22:	749a      	strb	r2, [r3, #18]
 8015e24:	2200      	movs	r2, #0
 8015e26:	74da      	strb	r2, [r3, #19]
  return seg;
 8015e28:	693b      	ldr	r3, [r7, #16]
}
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	371c      	adds	r7, #28
 8015e2e:	46bd      	mov	sp, r7
 8015e30:	bd90      	pop	{r4, r7, pc}
 8015e32:	bf00      	nop
 8015e34:	080207d4 	.word	0x080207d4
 8015e38:	08020808 	.word	0x08020808
 8015e3c:	08020828 	.word	0x08020828
 8015e40:	08020850 	.word	0x08020850
 8015e44:	08020874 	.word	0x08020874

08015e48 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b086      	sub	sp, #24
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	607b      	str	r3, [r7, #4]
 8015e50:	4603      	mov	r3, r0
 8015e52:	73fb      	strb	r3, [r7, #15]
 8015e54:	460b      	mov	r3, r1
 8015e56:	81bb      	strh	r3, [r7, #12]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015e5c:	89bb      	ldrh	r3, [r7, #12]
 8015e5e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d105      	bne.n	8015e72 <tcp_pbuf_prealloc+0x2a>
 8015e66:	4b30      	ldr	r3, [pc, #192]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015e68:	22e8      	movs	r2, #232	; 0xe8
 8015e6a:	4930      	ldr	r1, [pc, #192]	; (8015f2c <tcp_pbuf_prealloc+0xe4>)
 8015e6c:	4830      	ldr	r0, [pc, #192]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015e6e:	f005 ff0d 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015e72:	6a3b      	ldr	r3, [r7, #32]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d105      	bne.n	8015e84 <tcp_pbuf_prealloc+0x3c>
 8015e78:	4b2b      	ldr	r3, [pc, #172]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015e7a:	22e9      	movs	r2, #233	; 0xe9
 8015e7c:	492d      	ldr	r1, [pc, #180]	; (8015f34 <tcp_pbuf_prealloc+0xec>)
 8015e7e:	482c      	ldr	r0, [pc, #176]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015e80:	f005 ff04 	bl	801bc8c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e84:	89ba      	ldrh	r2, [r7, #12]
 8015e86:	897b      	ldrh	r3, [r7, #10]
 8015e88:	429a      	cmp	r2, r3
 8015e8a:	d221      	bcs.n	8015ed0 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e8c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015e90:	f003 0302 	and.w	r3, r3, #2
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d111      	bne.n	8015ebc <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015e98:	6a3b      	ldr	r3, [r7, #32]
 8015e9a:	8b5b      	ldrh	r3, [r3, #26]
 8015e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d115      	bne.n	8015ed0 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ea4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d007      	beq.n	8015ebc <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015eac:	6a3b      	ldr	r3, [r7, #32]
 8015eae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d103      	bne.n	8015ebc <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015eb4:	6a3b      	ldr	r3, [r7, #32]
 8015eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d009      	beq.n	8015ed0 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015ebc:	89bb      	ldrh	r3, [r7, #12]
 8015ebe:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015ec2:	f023 0203 	bic.w	r2, r3, #3
 8015ec6:	897b      	ldrh	r3, [r7, #10]
 8015ec8:	4293      	cmp	r3, r2
 8015eca:	bf28      	it	cs
 8015ecc:	4613      	movcs	r3, r2
 8015ece:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015ed0:	8af9      	ldrh	r1, [r7, #22]
 8015ed2:	7bfb      	ldrb	r3, [r7, #15]
 8015ed4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7fb f891 	bl	8011000 <pbuf_alloc>
 8015ede:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ee0:	693b      	ldr	r3, [r7, #16]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d101      	bne.n	8015eea <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015ee6:	2300      	movs	r3, #0
 8015ee8:	e019      	b.n	8015f1e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	681b      	ldr	r3, [r3, #0]
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d006      	beq.n	8015f00 <tcp_pbuf_prealloc+0xb8>
 8015ef2:	4b0d      	ldr	r3, [pc, #52]	; (8015f28 <tcp_pbuf_prealloc+0xe0>)
 8015ef4:	f240 120b 	movw	r2, #267	; 0x10b
 8015ef8:	490f      	ldr	r1, [pc, #60]	; (8015f38 <tcp_pbuf_prealloc+0xf0>)
 8015efa:	480d      	ldr	r0, [pc, #52]	; (8015f30 <tcp_pbuf_prealloc+0xe8>)
 8015efc:	f005 fec6 	bl	801bc8c <iprintf>
  *oversize = p->len - length;
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	895a      	ldrh	r2, [r3, #10]
 8015f04:	89bb      	ldrh	r3, [r7, #12]
 8015f06:	1ad3      	subs	r3, r2, r3
 8015f08:	b29a      	uxth	r2, r3
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015f0e:	693b      	ldr	r3, [r7, #16]
 8015f10:	89ba      	ldrh	r2, [r7, #12]
 8015f12:	811a      	strh	r2, [r3, #8]
 8015f14:	693b      	ldr	r3, [r7, #16]
 8015f16:	891a      	ldrh	r2, [r3, #8]
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	815a      	strh	r2, [r3, #10]
  return p;
 8015f1c:	693b      	ldr	r3, [r7, #16]
}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	3718      	adds	r7, #24
 8015f22:	46bd      	mov	sp, r7
 8015f24:	bd80      	pop	{r7, pc}
 8015f26:	bf00      	nop
 8015f28:	080207d4 	.word	0x080207d4
 8015f2c:	0802088c 	.word	0x0802088c
 8015f30:	08020828 	.word	0x08020828
 8015f34:	080208b0 	.word	0x080208b0
 8015f38:	080208d0 	.word	0x080208d0

08015f3c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b082      	sub	sp, #8
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	460b      	mov	r3, r1
 8015f46:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d106      	bne.n	8015f5c <tcp_write_checks+0x20>
 8015f4e:	4b33      	ldr	r3, [pc, #204]	; (801601c <tcp_write_checks+0xe0>)
 8015f50:	f240 1233 	movw	r2, #307	; 0x133
 8015f54:	4932      	ldr	r1, [pc, #200]	; (8016020 <tcp_write_checks+0xe4>)
 8015f56:	4833      	ldr	r0, [pc, #204]	; (8016024 <tcp_write_checks+0xe8>)
 8015f58:	f005 fe98 	bl	801bc8c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	7d1b      	ldrb	r3, [r3, #20]
 8015f60:	2b04      	cmp	r3, #4
 8015f62:	d00e      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015f64:	687b      	ldr	r3, [r7, #4]
 8015f66:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015f68:	2b07      	cmp	r3, #7
 8015f6a:	d00a      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015f70:	2b02      	cmp	r3, #2
 8015f72:	d006      	beq.n	8015f82 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015f78:	2b03      	cmp	r3, #3
 8015f7a:	d002      	beq.n	8015f82 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f7c:	f06f 030a 	mvn.w	r3, #10
 8015f80:	e048      	b.n	8016014 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f82:	887b      	ldrh	r3, [r7, #2]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d101      	bne.n	8015f8c <tcp_write_checks+0x50>
    return ERR_OK;
 8015f88:	2300      	movs	r3, #0
 8015f8a:	e043      	b.n	8016014 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f92:	887a      	ldrh	r2, [r7, #2]
 8015f94:	429a      	cmp	r2, r3
 8015f96:	d909      	bls.n	8015fac <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	8b5b      	ldrh	r3, [r3, #26]
 8015f9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fa0:	b29a      	uxth	r2, r3
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8015faa:	e033      	b.n	8016014 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fb2:	2b08      	cmp	r3, #8
 8015fb4:	d909      	bls.n	8015fca <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	8b5b      	ldrh	r3, [r3, #26]
 8015fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc8:	e024      	b.n	8016014 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d00f      	beq.n	8015ff4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d11a      	bne.n	8016012 <tcp_write_checks+0xd6>
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d116      	bne.n	8016012 <tcp_write_checks+0xd6>
 8015fe4:	4b0d      	ldr	r3, [pc, #52]	; (801601c <tcp_write_checks+0xe0>)
 8015fe6:	f240 1255 	movw	r2, #341	; 0x155
 8015fea:	490f      	ldr	r1, [pc, #60]	; (8016028 <tcp_write_checks+0xec>)
 8015fec:	480d      	ldr	r0, [pc, #52]	; (8016024 <tcp_write_checks+0xe8>)
 8015fee:	f005 fe4d 	bl	801bc8c <iprintf>
 8015ff2:	e00e      	b.n	8016012 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d103      	bne.n	8016004 <tcp_write_checks+0xc8>
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016000:	2b00      	cmp	r3, #0
 8016002:	d006      	beq.n	8016012 <tcp_write_checks+0xd6>
 8016004:	4b05      	ldr	r3, [pc, #20]	; (801601c <tcp_write_checks+0xe0>)
 8016006:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801600a:	4908      	ldr	r1, [pc, #32]	; (801602c <tcp_write_checks+0xf0>)
 801600c:	4805      	ldr	r0, [pc, #20]	; (8016024 <tcp_write_checks+0xe8>)
 801600e:	f005 fe3d 	bl	801bc8c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016012:	2300      	movs	r3, #0
}
 8016014:	4618      	mov	r0, r3
 8016016:	3708      	adds	r7, #8
 8016018:	46bd      	mov	sp, r7
 801601a:	bd80      	pop	{r7, pc}
 801601c:	080207d4 	.word	0x080207d4
 8016020:	080208e4 	.word	0x080208e4
 8016024:	08020828 	.word	0x08020828
 8016028:	08020904 	.word	0x08020904
 801602c:	08020940 	.word	0x08020940

08016030 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016030:	b590      	push	{r4, r7, lr}
 8016032:	b09b      	sub	sp, #108	; 0x6c
 8016034:	af04      	add	r7, sp, #16
 8016036:	60f8      	str	r0, [r7, #12]
 8016038:	60b9      	str	r1, [r7, #8]
 801603a:	4611      	mov	r1, r2
 801603c:	461a      	mov	r2, r3
 801603e:	460b      	mov	r3, r1
 8016040:	80fb      	strh	r3, [r7, #6]
 8016042:	4613      	mov	r3, r2
 8016044:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016046:	2300      	movs	r3, #0
 8016048:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801604a:	2300      	movs	r3, #0
 801604c:	653b      	str	r3, [r7, #80]	; 0x50
 801604e:	2300      	movs	r3, #0
 8016050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016052:	2300      	movs	r3, #0
 8016054:	64bb      	str	r3, [r7, #72]	; 0x48
 8016056:	2300      	movs	r3, #0
 8016058:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801605a:	2300      	movs	r3, #0
 801605c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016060:	2300      	movs	r3, #0
 8016062:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8016066:	2300      	movs	r3, #0
 8016068:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801606a:	2300      	movs	r3, #0
 801606c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801606e:	2300      	movs	r3, #0
 8016070:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	2b00      	cmp	r3, #0
 8016076:	d109      	bne.n	801608c <tcp_write+0x5c>
 8016078:	4ba4      	ldr	r3, [pc, #656]	; (801630c <tcp_write+0x2dc>)
 801607a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801607e:	49a4      	ldr	r1, [pc, #656]	; (8016310 <tcp_write+0x2e0>)
 8016080:	48a4      	ldr	r0, [pc, #656]	; (8016314 <tcp_write+0x2e4>)
 8016082:	f005 fe03 	bl	801bc8c <iprintf>
 8016086:	f06f 030f 	mvn.w	r3, #15
 801608a:	e32a      	b.n	80166e2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016092:	085b      	lsrs	r3, r3, #1
 8016094:	b29a      	uxth	r2, r3
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801609a:	4293      	cmp	r3, r2
 801609c:	bf28      	it	cs
 801609e:	4613      	movcs	r3, r2
 80160a0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80160a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d102      	bne.n	80160ae <tcp_write+0x7e>
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ac:	e000      	b.n	80160b0 <tcp_write+0x80>
 80160ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160b0:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80160b2:	68bb      	ldr	r3, [r7, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d109      	bne.n	80160cc <tcp_write+0x9c>
 80160b8:	4b94      	ldr	r3, [pc, #592]	; (801630c <tcp_write+0x2dc>)
 80160ba:	f240 12ad 	movw	r2, #429	; 0x1ad
 80160be:	4996      	ldr	r1, [pc, #600]	; (8016318 <tcp_write+0x2e8>)
 80160c0:	4894      	ldr	r0, [pc, #592]	; (8016314 <tcp_write+0x2e4>)
 80160c2:	f005 fde3 	bl	801bc8c <iprintf>
 80160c6:	f06f 030f 	mvn.w	r3, #15
 80160ca:	e30a      	b.n	80166e2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80160cc:	88fb      	ldrh	r3, [r7, #6]
 80160ce:	4619      	mov	r1, r3
 80160d0:	68f8      	ldr	r0, [r7, #12]
 80160d2:	f7ff ff33 	bl	8015f3c <tcp_write_checks>
 80160d6:	4603      	mov	r3, r0
 80160d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80160dc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d002      	beq.n	80160ea <tcp_write+0xba>
    return err;
 80160e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160e8:	e2fb      	b.n	80166e2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80160f0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80160f4:	2300      	movs	r3, #0
 80160f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80160fa:	68fb      	ldr	r3, [r7, #12]
 80160fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80160fe:	2b00      	cmp	r3, #0
 8016100:	f000 80f6 	beq.w	80162f0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016108:	653b      	str	r3, [r7, #80]	; 0x50
 801610a:	e002      	b.n	8016112 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801610c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801610e:	681b      	ldr	r3, [r3, #0]
 8016110:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d1f8      	bne.n	801610c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801611a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801611c:	7a9b      	ldrb	r3, [r3, #10]
 801611e:	009b      	lsls	r3, r3, #2
 8016120:	b29b      	uxth	r3, r3
 8016122:	f003 0304 	and.w	r3, r3, #4
 8016126:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016128:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801612c:	891b      	ldrh	r3, [r3, #8]
 801612e:	4619      	mov	r1, r3
 8016130:	8c3b      	ldrh	r3, [r7, #32]
 8016132:	440b      	add	r3, r1
 8016134:	429a      	cmp	r2, r3
 8016136:	da06      	bge.n	8016146 <tcp_write+0x116>
 8016138:	4b74      	ldr	r3, [pc, #464]	; (801630c <tcp_write+0x2dc>)
 801613a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801613e:	4977      	ldr	r1, [pc, #476]	; (801631c <tcp_write+0x2ec>)
 8016140:	4874      	ldr	r0, [pc, #464]	; (8016314 <tcp_write+0x2e4>)
 8016142:	f005 fda3 	bl	801bc8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016148:	891a      	ldrh	r2, [r3, #8]
 801614a:	8c3b      	ldrh	r3, [r7, #32]
 801614c:	4413      	add	r3, r2
 801614e:	b29b      	uxth	r3, r3
 8016150:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016152:	1ad3      	subs	r3, r2, r3
 8016154:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801615c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801615e:	8a7b      	ldrh	r3, [r7, #18]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d026      	beq.n	80161b2 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016164:	8a7b      	ldrh	r3, [r7, #18]
 8016166:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016168:	429a      	cmp	r2, r3
 801616a:	d206      	bcs.n	801617a <tcp_write+0x14a>
 801616c:	4b67      	ldr	r3, [pc, #412]	; (801630c <tcp_write+0x2dc>)
 801616e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016172:	496b      	ldr	r1, [pc, #428]	; (8016320 <tcp_write+0x2f0>)
 8016174:	4867      	ldr	r0, [pc, #412]	; (8016314 <tcp_write+0x2e4>)
 8016176:	f005 fd89 	bl	801bc8c <iprintf>
      seg = last_unsent;
 801617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801617c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801617e:	8a7b      	ldrh	r3, [r7, #18]
 8016180:	88fa      	ldrh	r2, [r7, #6]
 8016182:	4293      	cmp	r3, r2
 8016184:	bf28      	it	cs
 8016186:	4613      	movcs	r3, r2
 8016188:	b29b      	uxth	r3, r3
 801618a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801618c:	4293      	cmp	r3, r2
 801618e:	bf28      	it	cs
 8016190:	4613      	movcs	r3, r2
 8016192:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016194:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801619a:	4413      	add	r3, r2
 801619c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80161a0:	8a7a      	ldrh	r2, [r7, #18]
 80161a2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161a4:	1ad3      	subs	r3, r2, r3
 80161a6:	b29b      	uxth	r3, r3
 80161a8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80161aa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ae:	1ad3      	subs	r3, r2, r3
 80161b0:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80161b2:	8a7b      	ldrh	r3, [r7, #18]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00b      	beq.n	80161d0 <tcp_write+0x1a0>
 80161b8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161bc:	88fb      	ldrh	r3, [r7, #6]
 80161be:	429a      	cmp	r2, r3
 80161c0:	d006      	beq.n	80161d0 <tcp_write+0x1a0>
 80161c2:	4b52      	ldr	r3, [pc, #328]	; (801630c <tcp_write+0x2dc>)
 80161c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161c8:	4956      	ldr	r1, [pc, #344]	; (8016324 <tcp_write+0x2f4>)
 80161ca:	4852      	ldr	r0, [pc, #328]	; (8016314 <tcp_write+0x2e4>)
 80161cc:	f005 fd5e 	bl	801bc8c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80161d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161d4:	88fb      	ldrh	r3, [r7, #6]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	f080 8167 	bcs.w	80164aa <tcp_write+0x47a>
 80161dc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161de:	2b00      	cmp	r3, #0
 80161e0:	f000 8163 	beq.w	80164aa <tcp_write+0x47a>
 80161e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161e6:	891b      	ldrh	r3, [r3, #8]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	f000 815e 	beq.w	80164aa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80161ee:	88fa      	ldrh	r2, [r7, #6]
 80161f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161f4:	1ad2      	subs	r2, r2, r3
 80161f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161f8:	4293      	cmp	r3, r2
 80161fa:	bfa8      	it	ge
 80161fc:	4613      	movge	r3, r2
 80161fe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016200:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016202:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016204:	797b      	ldrb	r3, [r7, #5]
 8016206:	f003 0301 	and.w	r3, r3, #1
 801620a:	2b00      	cmp	r3, #0
 801620c:	d027      	beq.n	801625e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801620e:	f107 0012 	add.w	r0, r7, #18
 8016212:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016214:	8bf9      	ldrh	r1, [r7, #30]
 8016216:	2301      	movs	r3, #1
 8016218:	9302      	str	r3, [sp, #8]
 801621a:	797b      	ldrb	r3, [r7, #5]
 801621c:	9301      	str	r3, [sp, #4]
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	9300      	str	r3, [sp, #0]
 8016222:	4603      	mov	r3, r0
 8016224:	2000      	movs	r0, #0
 8016226:	f7ff fe0f 	bl	8015e48 <tcp_pbuf_prealloc>
 801622a:	6578      	str	r0, [r7, #84]	; 0x54
 801622c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 8225 	beq.w	801667e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016234:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016236:	6858      	ldr	r0, [r3, #4]
 8016238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801623c:	68ba      	ldr	r2, [r7, #8]
 801623e:	4413      	add	r3, r2
 8016240:	8bfa      	ldrh	r2, [r7, #30]
 8016242:	4619      	mov	r1, r3
 8016244:	f005 f8ca 	bl	801b3dc <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016248:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801624a:	f7fb fa7d 	bl	8011748 <pbuf_clen>
 801624e:	4603      	mov	r3, r0
 8016250:	461a      	mov	r2, r3
 8016252:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016256:	4413      	add	r3, r2
 8016258:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801625c:	e041      	b.n	80162e2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801625e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	637b      	str	r3, [r7, #52]	; 0x34
 8016264:	e002      	b.n	801626c <tcp_write+0x23c>
 8016266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	637b      	str	r3, [r7, #52]	; 0x34
 801626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d1f8      	bne.n	8016266 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016276:	7b1b      	ldrb	r3, [r3, #12]
 8016278:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801627c:	2b00      	cmp	r3, #0
 801627e:	d115      	bne.n	80162ac <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016282:	685b      	ldr	r3, [r3, #4]
 8016284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016286:	8952      	ldrh	r2, [r2, #10]
 8016288:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801628a:	68ba      	ldr	r2, [r7, #8]
 801628c:	429a      	cmp	r2, r3
 801628e:	d10d      	bne.n	80162ac <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016290:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016294:	2b00      	cmp	r3, #0
 8016296:	d006      	beq.n	80162a6 <tcp_write+0x276>
 8016298:	4b1c      	ldr	r3, [pc, #112]	; (801630c <tcp_write+0x2dc>)
 801629a:	f240 2231 	movw	r2, #561	; 0x231
 801629e:	4922      	ldr	r1, [pc, #136]	; (8016328 <tcp_write+0x2f8>)
 80162a0:	481c      	ldr	r0, [pc, #112]	; (8016314 <tcp_write+0x2e4>)
 80162a2:	f005 fcf3 	bl	801bc8c <iprintf>
          extendlen = seglen;
 80162a6:	8bfb      	ldrh	r3, [r7, #30]
 80162a8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162aa:	e01a      	b.n	80162e2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80162ac:	8bfb      	ldrh	r3, [r7, #30]
 80162ae:	2201      	movs	r2, #1
 80162b0:	4619      	mov	r1, r3
 80162b2:	2000      	movs	r0, #0
 80162b4:	f7fa fea4 	bl	8011000 <pbuf_alloc>
 80162b8:	6578      	str	r0, [r7, #84]	; 0x54
 80162ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162bc:	2b00      	cmp	r3, #0
 80162be:	f000 81e0 	beq.w	8016682 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80162c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162c6:	68ba      	ldr	r2, [r7, #8]
 80162c8:	441a      	add	r2, r3
 80162ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162cc:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80162ce:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80162d0:	f7fb fa3a 	bl	8011748 <pbuf_clen>
 80162d4:	4603      	mov	r3, r0
 80162d6:	461a      	mov	r2, r3
 80162d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162dc:	4413      	add	r3, r2
 80162de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80162e2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162e6:	8bfb      	ldrh	r3, [r7, #30]
 80162e8:	4413      	add	r3, r2
 80162ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80162ee:	e0dc      	b.n	80164aa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	f000 80d7 	beq.w	80164aa <tcp_write+0x47a>
 80162fc:	4b03      	ldr	r3, [pc, #12]	; (801630c <tcp_write+0x2dc>)
 80162fe:	f240 224a 	movw	r2, #586	; 0x24a
 8016302:	490a      	ldr	r1, [pc, #40]	; (801632c <tcp_write+0x2fc>)
 8016304:	4803      	ldr	r0, [pc, #12]	; (8016314 <tcp_write+0x2e4>)
 8016306:	f005 fcc1 	bl	801bc8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801630a:	e0ce      	b.n	80164aa <tcp_write+0x47a>
 801630c:	080207d4 	.word	0x080207d4
 8016310:	08020974 	.word	0x08020974
 8016314:	08020828 	.word	0x08020828
 8016318:	0802098c 	.word	0x0802098c
 801631c:	080209c0 	.word	0x080209c0
 8016320:	080209d8 	.word	0x080209d8
 8016324:	080209f8 	.word	0x080209f8
 8016328:	08020a18 	.word	0x08020a18
 801632c:	08020a44 	.word	0x08020a44
    struct pbuf *p;
    u16_t left = len - pos;
 8016330:	88fa      	ldrh	r2, [r7, #6]
 8016332:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016336:	1ad3      	subs	r3, r2, r3
 8016338:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801633a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801633e:	b29b      	uxth	r3, r3
 8016340:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016346:	8b7a      	ldrh	r2, [r7, #26]
 8016348:	8bbb      	ldrh	r3, [r7, #28]
 801634a:	4293      	cmp	r3, r2
 801634c:	bf28      	it	cs
 801634e:	4613      	movcs	r3, r2
 8016350:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016352:	797b      	ldrb	r3, [r7, #5]
 8016354:	f003 0301 	and.w	r3, r3, #1
 8016358:	2b00      	cmp	r3, #0
 801635a:	d036      	beq.n	80163ca <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801635c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016360:	b29a      	uxth	r2, r3
 8016362:	8b3b      	ldrh	r3, [r7, #24]
 8016364:	4413      	add	r3, r2
 8016366:	b299      	uxth	r1, r3
 8016368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801636a:	2b00      	cmp	r3, #0
 801636c:	bf0c      	ite	eq
 801636e:	2301      	moveq	r3, #1
 8016370:	2300      	movne	r3, #0
 8016372:	b2db      	uxtb	r3, r3
 8016374:	f107 0012 	add.w	r0, r7, #18
 8016378:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801637a:	9302      	str	r3, [sp, #8]
 801637c:	797b      	ldrb	r3, [r7, #5]
 801637e:	9301      	str	r3, [sp, #4]
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	9300      	str	r3, [sp, #0]
 8016384:	4603      	mov	r3, r0
 8016386:	2036      	movs	r0, #54	; 0x36
 8016388:	f7ff fd5e 	bl	8015e48 <tcp_pbuf_prealloc>
 801638c:	6338      	str	r0, [r7, #48]	; 0x30
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	2b00      	cmp	r3, #0
 8016392:	f000 8178 	beq.w	8016686 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016398:	895b      	ldrh	r3, [r3, #10]
 801639a:	8b3a      	ldrh	r2, [r7, #24]
 801639c:	429a      	cmp	r2, r3
 801639e:	d906      	bls.n	80163ae <tcp_write+0x37e>
 80163a0:	4b8c      	ldr	r3, [pc, #560]	; (80165d4 <tcp_write+0x5a4>)
 80163a2:	f240 2266 	movw	r2, #614	; 0x266
 80163a6:	498c      	ldr	r1, [pc, #560]	; (80165d8 <tcp_write+0x5a8>)
 80163a8:	488c      	ldr	r0, [pc, #560]	; (80165dc <tcp_write+0x5ac>)
 80163aa:	f005 fc6f 	bl	801bc8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	685a      	ldr	r2, [r3, #4]
 80163b2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163b6:	18d0      	adds	r0, r2, r3
 80163b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163bc:	68ba      	ldr	r2, [r7, #8]
 80163be:	4413      	add	r3, r2
 80163c0:	8b3a      	ldrh	r2, [r7, #24]
 80163c2:	4619      	mov	r1, r3
 80163c4:	f005 f80a 	bl	801b3dc <memcpy>
 80163c8:	e02f      	b.n	801642a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80163ca:	8a7b      	ldrh	r3, [r7, #18]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d006      	beq.n	80163de <tcp_write+0x3ae>
 80163d0:	4b80      	ldr	r3, [pc, #512]	; (80165d4 <tcp_write+0x5a4>)
 80163d2:	f240 2271 	movw	r2, #625	; 0x271
 80163d6:	4982      	ldr	r1, [pc, #520]	; (80165e0 <tcp_write+0x5b0>)
 80163d8:	4880      	ldr	r0, [pc, #512]	; (80165dc <tcp_write+0x5ac>)
 80163da:	f005 fc57 	bl	801bc8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80163de:	8b3b      	ldrh	r3, [r7, #24]
 80163e0:	2201      	movs	r2, #1
 80163e2:	4619      	mov	r1, r3
 80163e4:	2036      	movs	r0, #54	; 0x36
 80163e6:	f7fa fe0b 	bl	8011000 <pbuf_alloc>
 80163ea:	6178      	str	r0, [r7, #20]
 80163ec:	697b      	ldr	r3, [r7, #20]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	f000 814b 	beq.w	801668a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80163f4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163f8:	68ba      	ldr	r2, [r7, #8]
 80163fa:	441a      	add	r2, r3
 80163fc:	697b      	ldr	r3, [r7, #20]
 80163fe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016400:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016404:	b29b      	uxth	r3, r3
 8016406:	f44f 7220 	mov.w	r2, #640	; 0x280
 801640a:	4619      	mov	r1, r3
 801640c:	2036      	movs	r0, #54	; 0x36
 801640e:	f7fa fdf7 	bl	8011000 <pbuf_alloc>
 8016412:	6338      	str	r0, [r7, #48]	; 0x30
 8016414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016416:	2b00      	cmp	r3, #0
 8016418:	d103      	bne.n	8016422 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801641a:	6978      	ldr	r0, [r7, #20]
 801641c:	f7fb f906 	bl	801162c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016420:	e136      	b.n	8016690 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016422:	6979      	ldr	r1, [r7, #20]
 8016424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016426:	f7fb f9cf 	bl	80117c8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801642a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801642c:	f7fb f98c 	bl	8011748 <pbuf_clen>
 8016430:	4603      	mov	r3, r0
 8016432:	461a      	mov	r2, r3
 8016434:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016438:	4413      	add	r3, r2
 801643a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801643e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016442:	2b09      	cmp	r3, #9
 8016444:	d903      	bls.n	801644e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016446:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016448:	f7fb f8f0 	bl	801162c <pbuf_free>
      goto memerr;
 801644c:	e120      	b.n	8016690 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016452:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016456:	441a      	add	r2, r3
 8016458:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801645c:	9300      	str	r3, [sp, #0]
 801645e:	4613      	mov	r3, r2
 8016460:	2200      	movs	r2, #0
 8016462:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016464:	68f8      	ldr	r0, [r7, #12]
 8016466:	f7ff fc51 	bl	8015d0c <tcp_create_segment>
 801646a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801646c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801646e:	2b00      	cmp	r3, #0
 8016470:	f000 810d 	beq.w	801668e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016476:	2b00      	cmp	r3, #0
 8016478:	d102      	bne.n	8016480 <tcp_write+0x450>
      queue = seg;
 801647a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801647c:	647b      	str	r3, [r7, #68]	; 0x44
 801647e:	e00c      	b.n	801649a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016482:	2b00      	cmp	r3, #0
 8016484:	d106      	bne.n	8016494 <tcp_write+0x464>
 8016486:	4b53      	ldr	r3, [pc, #332]	; (80165d4 <tcp_write+0x5a4>)
 8016488:	f240 22ab 	movw	r2, #683	; 0x2ab
 801648c:	4955      	ldr	r1, [pc, #340]	; (80165e4 <tcp_write+0x5b4>)
 801648e:	4853      	ldr	r0, [pc, #332]	; (80165dc <tcp_write+0x5ac>)
 8016490:	f005 fbfc 	bl	801bc8c <iprintf>
      prev_seg->next = seg;
 8016494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016498:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801649a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801649c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801649e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164a2:	8b3b      	ldrh	r3, [r7, #24]
 80164a4:	4413      	add	r3, r2
 80164a6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80164aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164ae:	88fb      	ldrh	r3, [r7, #6]
 80164b0:	429a      	cmp	r2, r3
 80164b2:	f4ff af3d 	bcc.w	8016330 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80164b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d02c      	beq.n	8016516 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80164bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164be:	685b      	ldr	r3, [r3, #4]
 80164c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164c2:	e01e      	b.n	8016502 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80164c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164c6:	891a      	ldrh	r2, [r3, #8]
 80164c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164ca:	4413      	add	r3, r2
 80164cc:	b29a      	uxth	r2, r3
 80164ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d0:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80164d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d110      	bne.n	80164fc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80164da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164e0:	8952      	ldrh	r2, [r2, #10]
 80164e2:	4413      	add	r3, r2
 80164e4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164e6:	68b9      	ldr	r1, [r7, #8]
 80164e8:	4618      	mov	r0, r3
 80164ea:	f004 ff77 	bl	801b3dc <memcpy>
        p->len += oversize_used;
 80164ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f0:	895a      	ldrh	r2, [r3, #10]
 80164f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164f4:	4413      	add	r3, r2
 80164f6:	b29a      	uxth	r2, r3
 80164f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fa:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80164fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016504:	2b00      	cmp	r3, #0
 8016506:	d1dd      	bne.n	80164c4 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801650a:	891a      	ldrh	r2, [r3, #8]
 801650c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801650e:	4413      	add	r3, r2
 8016510:	b29a      	uxth	r2, r3
 8016512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016514:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016516:	8a7a      	ldrh	r2, [r7, #18]
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801651e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016520:	2b00      	cmp	r3, #0
 8016522:	d018      	beq.n	8016556 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016526:	2b00      	cmp	r3, #0
 8016528:	d106      	bne.n	8016538 <tcp_write+0x508>
 801652a:	4b2a      	ldr	r3, [pc, #168]	; (80165d4 <tcp_write+0x5a4>)
 801652c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016530:	492d      	ldr	r1, [pc, #180]	; (80165e8 <tcp_write+0x5b8>)
 8016532:	482a      	ldr	r0, [pc, #168]	; (80165dc <tcp_write+0x5ac>)
 8016534:	f005 fbaa 	bl	801bc8c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016538:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653a:	685b      	ldr	r3, [r3, #4]
 801653c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801653e:	4618      	mov	r0, r3
 8016540:	f7fb f942 	bl	80117c8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016546:	891a      	ldrh	r2, [r3, #8]
 8016548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801654a:	891b      	ldrh	r3, [r3, #8]
 801654c:	4413      	add	r3, r2
 801654e:	b29a      	uxth	r2, r3
 8016550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016552:	811a      	strh	r2, [r3, #8]
 8016554:	e037      	b.n	80165c6 <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016558:	2b00      	cmp	r3, #0
 801655a:	d034      	beq.n	80165c6 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655e:	2b00      	cmp	r3, #0
 8016560:	d003      	beq.n	801656a <tcp_write+0x53a>
 8016562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016564:	685b      	ldr	r3, [r3, #4]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d106      	bne.n	8016578 <tcp_write+0x548>
 801656a:	4b1a      	ldr	r3, [pc, #104]	; (80165d4 <tcp_write+0x5a4>)
 801656c:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016570:	491e      	ldr	r1, [pc, #120]	; (80165ec <tcp_write+0x5bc>)
 8016572:	481a      	ldr	r0, [pc, #104]	; (80165dc <tcp_write+0x5ac>)
 8016574:	f005 fb8a 	bl	801bc8c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	62bb      	str	r3, [r7, #40]	; 0x28
 801657e:	e009      	b.n	8016594 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016582:	891a      	ldrh	r2, [r3, #8]
 8016584:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016586:	4413      	add	r3, r2
 8016588:	b29a      	uxth	r2, r3
 801658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801658c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	62bb      	str	r3, [r7, #40]	; 0x28
 8016594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d1f1      	bne.n	8016580 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659e:	891a      	ldrh	r2, [r3, #8]
 80165a0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165a2:	4413      	add	r3, r2
 80165a4:	b29a      	uxth	r2, r3
 80165a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80165aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ac:	895a      	ldrh	r2, [r3, #10]
 80165ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165b0:	4413      	add	r3, r2
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80165b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165ba:	891a      	ldrh	r2, [r3, #8]
 80165bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165be:	4413      	add	r3, r2
 80165c0:	b29a      	uxth	r2, r3
 80165c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c4:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80165c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d111      	bne.n	80165f0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165d0:	66da      	str	r2, [r3, #108]	; 0x6c
 80165d2:	e010      	b.n	80165f6 <tcp_write+0x5c6>
 80165d4:	080207d4 	.word	0x080207d4
 80165d8:	08020a74 	.word	0x08020a74
 80165dc:	08020828 	.word	0x08020828
 80165e0:	08020ab4 	.word	0x08020ab4
 80165e4:	08020ac4 	.word	0x08020ac4
 80165e8:	08020ad8 	.word	0x08020ad8
 80165ec:	08020b10 	.word	0x08020b10
  } else {
    last_unsent->next = queue;
 80165f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165f4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80165f6:	68fb      	ldr	r3, [r7, #12]
 80165f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80165fa:	88fb      	ldrh	r3, [r7, #6]
 80165fc:	441a      	add	r2, r3
 80165fe:	68fb      	ldr	r3, [r7, #12]
 8016600:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016602:	68fb      	ldr	r3, [r7, #12]
 8016604:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016608:	88fb      	ldrh	r3, [r7, #6]
 801660a:	1ad3      	subs	r3, r2, r3
 801660c:	b29a      	uxth	r2, r3
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016614:	68fb      	ldr	r3, [r7, #12]
 8016616:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801661a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016624:	2b00      	cmp	r3, #0
 8016626:	d00e      	beq.n	8016646 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801662c:	2b00      	cmp	r3, #0
 801662e:	d10a      	bne.n	8016646 <tcp_write+0x616>
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016634:	2b00      	cmp	r3, #0
 8016636:	d106      	bne.n	8016646 <tcp_write+0x616>
 8016638:	4b2c      	ldr	r3, [pc, #176]	; (80166ec <tcp_write+0x6bc>)
 801663a:	f240 3212 	movw	r2, #786	; 0x312
 801663e:	492c      	ldr	r1, [pc, #176]	; (80166f0 <tcp_write+0x6c0>)
 8016640:	482c      	ldr	r0, [pc, #176]	; (80166f4 <tcp_write+0x6c4>)
 8016642:	f005 fb23 	bl	801bc8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016648:	2b00      	cmp	r3, #0
 801664a:	d016      	beq.n	801667a <tcp_write+0x64a>
 801664c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801664e:	68db      	ldr	r3, [r3, #12]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d012      	beq.n	801667a <tcp_write+0x64a>
 8016654:	797b      	ldrb	r3, [r7, #5]
 8016656:	f003 0302 	and.w	r3, r3, #2
 801665a:	2b00      	cmp	r3, #0
 801665c:	d10d      	bne.n	801667a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	899b      	ldrh	r3, [r3, #12]
 8016664:	b29c      	uxth	r4, r3
 8016666:	2008      	movs	r0, #8
 8016668:	f7f9 fc02 	bl	800fe70 <lwip_htons>
 801666c:	4603      	mov	r3, r0
 801666e:	461a      	mov	r2, r3
 8016670:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	4322      	orrs	r2, r4
 8016676:	b292      	uxth	r2, r2
 8016678:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801667a:	2300      	movs	r3, #0
 801667c:	e031      	b.n	80166e2 <tcp_write+0x6b2>
          goto memerr;
 801667e:	bf00      	nop
 8016680:	e006      	b.n	8016690 <tcp_write+0x660>
            goto memerr;
 8016682:	bf00      	nop
 8016684:	e004      	b.n	8016690 <tcp_write+0x660>
        goto memerr;
 8016686:	bf00      	nop
 8016688:	e002      	b.n	8016690 <tcp_write+0x660>
        goto memerr;
 801668a:	bf00      	nop
 801668c:	e000      	b.n	8016690 <tcp_write+0x660>
      goto memerr;
 801668e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	8b5b      	ldrh	r3, [r3, #26]
 8016694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016698:	b29a      	uxth	r2, r3
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801669e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d002      	beq.n	80166aa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80166a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80166a6:	f7fa ffc1 	bl	801162c <pbuf_free>
  }
  if (queue != NULL) {
 80166aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d002      	beq.n	80166b6 <tcp_write+0x686>
    tcp_segs_free(queue);
 80166b0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80166b2:	f7fc fb6f 	bl	8012d94 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80166b6:	68fb      	ldr	r3, [r7, #12]
 80166b8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d00e      	beq.n	80166de <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80166c0:	68fb      	ldr	r3, [r7, #12]
 80166c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d10a      	bne.n	80166de <tcp_write+0x6ae>
 80166c8:	68fb      	ldr	r3, [r7, #12]
 80166ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d106      	bne.n	80166de <tcp_write+0x6ae>
 80166d0:	4b06      	ldr	r3, [pc, #24]	; (80166ec <tcp_write+0x6bc>)
 80166d2:	f240 3227 	movw	r2, #807	; 0x327
 80166d6:	4906      	ldr	r1, [pc, #24]	; (80166f0 <tcp_write+0x6c0>)
 80166d8:	4806      	ldr	r0, [pc, #24]	; (80166f4 <tcp_write+0x6c4>)
 80166da:	f005 fad7 	bl	801bc8c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80166de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166e2:	4618      	mov	r0, r3
 80166e4:	375c      	adds	r7, #92	; 0x5c
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd90      	pop	{r4, r7, pc}
 80166ea:	bf00      	nop
 80166ec:	080207d4 	.word	0x080207d4
 80166f0:	08020b48 	.word	0x08020b48
 80166f4:	08020828 	.word	0x08020828

080166f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80166f8:	b590      	push	{r4, r7, lr}
 80166fa:	b08b      	sub	sp, #44	; 0x2c
 80166fc:	af02      	add	r7, sp, #8
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	460b      	mov	r3, r1
 8016702:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016704:	2300      	movs	r3, #0
 8016706:	61fb      	str	r3, [r7, #28]
 8016708:	2300      	movs	r3, #0
 801670a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801670c:	2300      	movs	r3, #0
 801670e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	2b00      	cmp	r3, #0
 8016714:	d106      	bne.n	8016724 <tcp_split_unsent_seg+0x2c>
 8016716:	4b95      	ldr	r3, [pc, #596]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016718:	f240 324b 	movw	r2, #843	; 0x34b
 801671c:	4994      	ldr	r1, [pc, #592]	; (8016970 <tcp_split_unsent_seg+0x278>)
 801671e:	4895      	ldr	r0, [pc, #596]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016720:	f005 fab4 	bl	801bc8c <iprintf>

  useg = pcb->unsent;
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016728:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	2b00      	cmp	r3, #0
 801672e:	d102      	bne.n	8016736 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016730:	f04f 33ff 	mov.w	r3, #4294967295
 8016734:	e116      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016736:	887b      	ldrh	r3, [r7, #2]
 8016738:	2b00      	cmp	r3, #0
 801673a:	d109      	bne.n	8016750 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801673c:	4b8b      	ldr	r3, [pc, #556]	; (801696c <tcp_split_unsent_seg+0x274>)
 801673e:	f240 3253 	movw	r2, #851	; 0x353
 8016742:	498d      	ldr	r1, [pc, #564]	; (8016978 <tcp_split_unsent_seg+0x280>)
 8016744:	488b      	ldr	r0, [pc, #556]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016746:	f005 faa1 	bl	801bc8c <iprintf>
    return ERR_VAL;
 801674a:	f06f 0305 	mvn.w	r3, #5
 801674e:	e109      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	891b      	ldrh	r3, [r3, #8]
 8016754:	887a      	ldrh	r2, [r7, #2]
 8016756:	429a      	cmp	r2, r3
 8016758:	d301      	bcc.n	801675e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801675a:	2300      	movs	r3, #0
 801675c:	e102      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016762:	887a      	ldrh	r2, [r7, #2]
 8016764:	429a      	cmp	r2, r3
 8016766:	d906      	bls.n	8016776 <tcp_split_unsent_seg+0x7e>
 8016768:	4b80      	ldr	r3, [pc, #512]	; (801696c <tcp_split_unsent_seg+0x274>)
 801676a:	f240 325b 	movw	r2, #859	; 0x35b
 801676e:	4983      	ldr	r1, [pc, #524]	; (801697c <tcp_split_unsent_seg+0x284>)
 8016770:	4880      	ldr	r0, [pc, #512]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016772:	f005 fa8b 	bl	801bc8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	891b      	ldrh	r3, [r3, #8]
 801677a:	2b00      	cmp	r3, #0
 801677c:	d106      	bne.n	801678c <tcp_split_unsent_seg+0x94>
 801677e:	4b7b      	ldr	r3, [pc, #492]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016780:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016784:	497e      	ldr	r1, [pc, #504]	; (8016980 <tcp_split_unsent_seg+0x288>)
 8016786:	487b      	ldr	r0, [pc, #492]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016788:	f005 fa80 	bl	801bc8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	7a9b      	ldrb	r3, [r3, #10]
 8016790:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016792:	7bfb      	ldrb	r3, [r7, #15]
 8016794:	009b      	lsls	r3, r3, #2
 8016796:	b2db      	uxtb	r3, r3
 8016798:	f003 0304 	and.w	r3, r3, #4
 801679c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801679e:	697b      	ldr	r3, [r7, #20]
 80167a0:	891a      	ldrh	r2, [r3, #8]
 80167a2:	887b      	ldrh	r3, [r7, #2]
 80167a4:	1ad3      	subs	r3, r2, r3
 80167a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80167a8:	7bbb      	ldrb	r3, [r7, #14]
 80167aa:	b29a      	uxth	r2, r3
 80167ac:	89bb      	ldrh	r3, [r7, #12]
 80167ae:	4413      	add	r3, r2
 80167b0:	b29b      	uxth	r3, r3
 80167b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167b6:	4619      	mov	r1, r3
 80167b8:	2036      	movs	r0, #54	; 0x36
 80167ba:	f7fa fc21 	bl	8011000 <pbuf_alloc>
 80167be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167c0:	693b      	ldr	r3, [r7, #16]
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	f000 80b7 	beq.w	8016936 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	685b      	ldr	r3, [r3, #4]
 80167cc:	891a      	ldrh	r2, [r3, #8]
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	891b      	ldrh	r3, [r3, #8]
 80167d2:	1ad3      	subs	r3, r2, r3
 80167d4:	b29a      	uxth	r2, r3
 80167d6:	887b      	ldrh	r3, [r7, #2]
 80167d8:	4413      	add	r3, r2
 80167da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	6858      	ldr	r0, [r3, #4]
 80167e0:	693b      	ldr	r3, [r7, #16]
 80167e2:	685a      	ldr	r2, [r3, #4]
 80167e4:	7bbb      	ldrb	r3, [r7, #14]
 80167e6:	18d1      	adds	r1, r2, r3
 80167e8:	897b      	ldrh	r3, [r7, #10]
 80167ea:	89ba      	ldrh	r2, [r7, #12]
 80167ec:	f7fb f924 	bl	8011a38 <pbuf_copy_partial>
 80167f0:	4603      	mov	r3, r0
 80167f2:	461a      	mov	r2, r3
 80167f4:	89bb      	ldrh	r3, [r7, #12]
 80167f6:	4293      	cmp	r3, r2
 80167f8:	f040 809f 	bne.w	801693a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80167fc:	697b      	ldr	r3, [r7, #20]
 80167fe:	68db      	ldr	r3, [r3, #12]
 8016800:	899b      	ldrh	r3, [r3, #12]
 8016802:	b29b      	uxth	r3, r3
 8016804:	4618      	mov	r0, r3
 8016806:	f7f9 fb33 	bl	800fe70 <lwip_htons>
 801680a:	4603      	mov	r3, r0
 801680c:	b2db      	uxtb	r3, r3
 801680e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016812:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016814:	2300      	movs	r3, #0
 8016816:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016818:	7efb      	ldrb	r3, [r7, #27]
 801681a:	f003 0308 	and.w	r3, r3, #8
 801681e:	2b00      	cmp	r3, #0
 8016820:	d007      	beq.n	8016832 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016822:	7efb      	ldrb	r3, [r7, #27]
 8016824:	f023 0308 	bic.w	r3, r3, #8
 8016828:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801682a:	7ebb      	ldrb	r3, [r7, #26]
 801682c:	f043 0308 	orr.w	r3, r3, #8
 8016830:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016832:	7efb      	ldrb	r3, [r7, #27]
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	2b00      	cmp	r3, #0
 801683a:	d007      	beq.n	801684c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801683c:	7efb      	ldrb	r3, [r7, #27]
 801683e:	f023 0301 	bic.w	r3, r3, #1
 8016842:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016844:	7ebb      	ldrb	r3, [r7, #26]
 8016846:	f043 0301 	orr.w	r3, r3, #1
 801684a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	685b      	ldr	r3, [r3, #4]
 8016852:	4618      	mov	r0, r3
 8016854:	f7f9 fb21 	bl	800fe9a <lwip_htonl>
 8016858:	4602      	mov	r2, r0
 801685a:	887b      	ldrh	r3, [r7, #2]
 801685c:	18d1      	adds	r1, r2, r3
 801685e:	7eba      	ldrb	r2, [r7, #26]
 8016860:	7bfb      	ldrb	r3, [r7, #15]
 8016862:	9300      	str	r3, [sp, #0]
 8016864:	460b      	mov	r3, r1
 8016866:	6939      	ldr	r1, [r7, #16]
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f7ff fa4f 	bl	8015d0c <tcp_create_segment>
 801686e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016870:	69fb      	ldr	r3, [r7, #28]
 8016872:	2b00      	cmp	r3, #0
 8016874:	d063      	beq.n	801693e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016876:	697b      	ldr	r3, [r7, #20]
 8016878:	685b      	ldr	r3, [r3, #4]
 801687a:	4618      	mov	r0, r3
 801687c:	f7fa ff64 	bl	8011748 <pbuf_clen>
 8016880:	4603      	mov	r3, r0
 8016882:	461a      	mov	r2, r3
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801688a:	1a9b      	subs	r3, r3, r2
 801688c:	b29a      	uxth	r2, r3
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016894:	697b      	ldr	r3, [r7, #20]
 8016896:	6858      	ldr	r0, [r3, #4]
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	891a      	ldrh	r2, [r3, #8]
 801689e:	89bb      	ldrh	r3, [r7, #12]
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	b29b      	uxth	r3, r3
 80168a4:	4619      	mov	r1, r3
 80168a6:	f7fa fd09 	bl	80112bc <pbuf_realloc>
  useg->len -= remainder;
 80168aa:	697b      	ldr	r3, [r7, #20]
 80168ac:	891a      	ldrh	r2, [r3, #8]
 80168ae:	89bb      	ldrh	r3, [r7, #12]
 80168b0:	1ad3      	subs	r3, r2, r3
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	697b      	ldr	r3, [r7, #20]
 80168b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80168b8:	697b      	ldr	r3, [r7, #20]
 80168ba:	68db      	ldr	r3, [r3, #12]
 80168bc:	899b      	ldrh	r3, [r3, #12]
 80168be:	b29c      	uxth	r4, r3
 80168c0:	7efb      	ldrb	r3, [r7, #27]
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7f9 fad3 	bl	800fe70 <lwip_htons>
 80168ca:	4603      	mov	r3, r0
 80168cc:	461a      	mov	r2, r3
 80168ce:	697b      	ldr	r3, [r7, #20]
 80168d0:	68db      	ldr	r3, [r3, #12]
 80168d2:	4322      	orrs	r2, r4
 80168d4:	b292      	uxth	r2, r2
 80168d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80168d8:	697b      	ldr	r3, [r7, #20]
 80168da:	685b      	ldr	r3, [r3, #4]
 80168dc:	4618      	mov	r0, r3
 80168de:	f7fa ff33 	bl	8011748 <pbuf_clen>
 80168e2:	4603      	mov	r3, r0
 80168e4:	461a      	mov	r2, r3
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168ec:	4413      	add	r3, r2
 80168ee:	b29a      	uxth	r2, r3
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80168f6:	69fb      	ldr	r3, [r7, #28]
 80168f8:	685b      	ldr	r3, [r3, #4]
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fa ff24 	bl	8011748 <pbuf_clen>
 8016900:	4603      	mov	r3, r0
 8016902:	461a      	mov	r2, r3
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801690a:	4413      	add	r3, r2
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	681a      	ldr	r2, [r3, #0]
 8016918:	69fb      	ldr	r3, [r7, #28]
 801691a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801691c:	697b      	ldr	r3, [r7, #20]
 801691e:	69fa      	ldr	r2, [r7, #28]
 8016920:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016922:	69fb      	ldr	r3, [r7, #28]
 8016924:	681b      	ldr	r3, [r3, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d103      	bne.n	8016932 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2200      	movs	r2, #0
 801692e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016932:	2300      	movs	r3, #0
 8016934:	e016      	b.n	8016964 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016936:	bf00      	nop
 8016938:	e002      	b.n	8016940 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801693a:	bf00      	nop
 801693c:	e000      	b.n	8016940 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801693e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016940:	69fb      	ldr	r3, [r7, #28]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d006      	beq.n	8016954 <tcp_split_unsent_seg+0x25c>
 8016946:	4b09      	ldr	r3, [pc, #36]	; (801696c <tcp_split_unsent_seg+0x274>)
 8016948:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801694c:	490d      	ldr	r1, [pc, #52]	; (8016984 <tcp_split_unsent_seg+0x28c>)
 801694e:	4809      	ldr	r0, [pc, #36]	; (8016974 <tcp_split_unsent_seg+0x27c>)
 8016950:	f005 f99c 	bl	801bc8c <iprintf>
  if (p != NULL) {
 8016954:	693b      	ldr	r3, [r7, #16]
 8016956:	2b00      	cmp	r3, #0
 8016958:	d002      	beq.n	8016960 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801695a:	6938      	ldr	r0, [r7, #16]
 801695c:	f7fa fe66 	bl	801162c <pbuf_free>
  }

  return ERR_MEM;
 8016960:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016964:	4618      	mov	r0, r3
 8016966:	3724      	adds	r7, #36	; 0x24
 8016968:	46bd      	mov	sp, r7
 801696a:	bd90      	pop	{r4, r7, pc}
 801696c:	080207d4 	.word	0x080207d4
 8016970:	08020b68 	.word	0x08020b68
 8016974:	08020828 	.word	0x08020828
 8016978:	08020b8c 	.word	0x08020b8c
 801697c:	08020bb0 	.word	0x08020bb0
 8016980:	08020bc0 	.word	0x08020bc0
 8016984:	08020bd0 	.word	0x08020bd0

08016988 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016988:	b590      	push	{r4, r7, lr}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d106      	bne.n	80169a4 <tcp_send_fin+0x1c>
 8016996:	4b21      	ldr	r3, [pc, #132]	; (8016a1c <tcp_send_fin+0x94>)
 8016998:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801699c:	4920      	ldr	r1, [pc, #128]	; (8016a20 <tcp_send_fin+0x98>)
 801699e:	4821      	ldr	r0, [pc, #132]	; (8016a24 <tcp_send_fin+0x9c>)
 80169a0:	f005 f974 	bl	801bc8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d02e      	beq.n	8016a0a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169b0:	60fb      	str	r3, [r7, #12]
 80169b2:	e002      	b.n	80169ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169ba:	68fb      	ldr	r3, [r7, #12]
 80169bc:	681b      	ldr	r3, [r3, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d1f8      	bne.n	80169b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	68db      	ldr	r3, [r3, #12]
 80169c6:	899b      	ldrh	r3, [r3, #12]
 80169c8:	b29b      	uxth	r3, r3
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7f9 fa50 	bl	800fe70 <lwip_htons>
 80169d0:	4603      	mov	r3, r0
 80169d2:	b2db      	uxtb	r3, r3
 80169d4:	f003 0307 	and.w	r3, r3, #7
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d116      	bne.n	8016a0a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80169dc:	68fb      	ldr	r3, [r7, #12]
 80169de:	68db      	ldr	r3, [r3, #12]
 80169e0:	899b      	ldrh	r3, [r3, #12]
 80169e2:	b29c      	uxth	r4, r3
 80169e4:	2001      	movs	r0, #1
 80169e6:	f7f9 fa43 	bl	800fe70 <lwip_htons>
 80169ea:	4603      	mov	r3, r0
 80169ec:	461a      	mov	r2, r3
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	68db      	ldr	r3, [r3, #12]
 80169f2:	4322      	orrs	r2, r4
 80169f4:	b292      	uxth	r2, r2
 80169f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	8b5b      	ldrh	r3, [r3, #26]
 80169fc:	f043 0320 	orr.w	r3, r3, #32
 8016a00:	b29a      	uxth	r2, r3
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a06:	2300      	movs	r3, #0
 8016a08:	e004      	b.n	8016a14 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f000 f80b 	bl	8016a28 <tcp_enqueue_flags>
 8016a12:	4603      	mov	r3, r0
}
 8016a14:	4618      	mov	r0, r3
 8016a16:	3714      	adds	r7, #20
 8016a18:	46bd      	mov	sp, r7
 8016a1a:	bd90      	pop	{r4, r7, pc}
 8016a1c:	080207d4 	.word	0x080207d4
 8016a20:	08020bdc 	.word	0x08020bdc
 8016a24:	08020828 	.word	0x08020828

08016a28 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b08a      	sub	sp, #40	; 0x28
 8016a2c:	af02      	add	r7, sp, #8
 8016a2e:	6078      	str	r0, [r7, #4]
 8016a30:	460b      	mov	r3, r1
 8016a32:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a34:	2300      	movs	r3, #0
 8016a36:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a38:	2300      	movs	r3, #0
 8016a3a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a3c:	78fb      	ldrb	r3, [r7, #3]
 8016a3e:	f003 0303 	and.w	r3, r3, #3
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d106      	bne.n	8016a54 <tcp_enqueue_flags+0x2c>
 8016a46:	4b67      	ldr	r3, [pc, #412]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016a48:	f240 4211 	movw	r2, #1041	; 0x411
 8016a4c:	4966      	ldr	r1, [pc, #408]	; (8016be8 <tcp_enqueue_flags+0x1c0>)
 8016a4e:	4867      	ldr	r0, [pc, #412]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016a50:	f005 f91c 	bl	801bc8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d106      	bne.n	8016a68 <tcp_enqueue_flags+0x40>
 8016a5a:	4b62      	ldr	r3, [pc, #392]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016a5c:	f240 4213 	movw	r2, #1043	; 0x413
 8016a60:	4963      	ldr	r1, [pc, #396]	; (8016bf0 <tcp_enqueue_flags+0x1c8>)
 8016a62:	4862      	ldr	r0, [pc, #392]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016a64:	f005 f912 	bl	801bc8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a68:	78fb      	ldrb	r3, [r7, #3]
 8016a6a:	f003 0302 	and.w	r3, r3, #2
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d001      	beq.n	8016a76 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a72:	2301      	movs	r3, #1
 8016a74:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a76:	7ffb      	ldrb	r3, [r7, #31]
 8016a78:	009b      	lsls	r3, r3, #2
 8016a7a:	b2db      	uxtb	r3, r3
 8016a7c:	f003 0304 	and.w	r3, r3, #4
 8016a80:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a82:	7dfb      	ldrb	r3, [r7, #23]
 8016a84:	b29b      	uxth	r3, r3
 8016a86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016a8a:	4619      	mov	r1, r3
 8016a8c:	2036      	movs	r0, #54	; 0x36
 8016a8e:	f7fa fab7 	bl	8011000 <pbuf_alloc>
 8016a92:	6138      	str	r0, [r7, #16]
 8016a94:	693b      	ldr	r3, [r7, #16]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d109      	bne.n	8016aae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	8b5b      	ldrh	r3, [r3, #26]
 8016a9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aa2:	b29a      	uxth	r2, r3
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8016aac:	e095      	b.n	8016bda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016aae:	693b      	ldr	r3, [r7, #16]
 8016ab0:	895a      	ldrh	r2, [r3, #10]
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	b29b      	uxth	r3, r3
 8016ab6:	429a      	cmp	r2, r3
 8016ab8:	d206      	bcs.n	8016ac8 <tcp_enqueue_flags+0xa0>
 8016aba:	4b4a      	ldr	r3, [pc, #296]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016abc:	f240 4239 	movw	r2, #1081	; 0x439
 8016ac0:	494c      	ldr	r1, [pc, #304]	; (8016bf4 <tcp_enqueue_flags+0x1cc>)
 8016ac2:	484a      	ldr	r0, [pc, #296]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016ac4:	f005 f8e2 	bl	801bc8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016acc:	78fa      	ldrb	r2, [r7, #3]
 8016ace:	7ffb      	ldrb	r3, [r7, #31]
 8016ad0:	9300      	str	r3, [sp, #0]
 8016ad2:	460b      	mov	r3, r1
 8016ad4:	6939      	ldr	r1, [r7, #16]
 8016ad6:	6878      	ldr	r0, [r7, #4]
 8016ad8:	f7ff f918 	bl	8015d0c <tcp_create_segment>
 8016adc:	60f8      	str	r0, [r7, #12]
 8016ade:	68fb      	ldr	r3, [r7, #12]
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d109      	bne.n	8016af8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	8b5b      	ldrh	r3, [r3, #26]
 8016ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aec:	b29a      	uxth	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016af2:	f04f 33ff 	mov.w	r3, #4294967295
 8016af6:	e070      	b.n	8016bda <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	68db      	ldr	r3, [r3, #12]
 8016afc:	f003 0303 	and.w	r3, r3, #3
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d006      	beq.n	8016b12 <tcp_enqueue_flags+0xea>
 8016b04:	4b37      	ldr	r3, [pc, #220]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016b06:	f240 4242 	movw	r2, #1090	; 0x442
 8016b0a:	493b      	ldr	r1, [pc, #236]	; (8016bf8 <tcp_enqueue_flags+0x1d0>)
 8016b0c:	4837      	ldr	r0, [pc, #220]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016b0e:	f005 f8bd 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	891b      	ldrh	r3, [r3, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d006      	beq.n	8016b28 <tcp_enqueue_flags+0x100>
 8016b1a:	4b32      	ldr	r3, [pc, #200]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016b1c:	f240 4243 	movw	r2, #1091	; 0x443
 8016b20:	4936      	ldr	r1, [pc, #216]	; (8016bfc <tcp_enqueue_flags+0x1d4>)
 8016b22:	4832      	ldr	r0, [pc, #200]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016b24:	f005 f8b2 	bl	801bc8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d103      	bne.n	8016b38 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b30:	687b      	ldr	r3, [r7, #4]
 8016b32:	68fa      	ldr	r2, [r7, #12]
 8016b34:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b36:	e00d      	b.n	8016b54 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b3c:	61bb      	str	r3, [r7, #24]
 8016b3e:	e002      	b.n	8016b46 <tcp_enqueue_flags+0x11e>
 8016b40:	69bb      	ldr	r3, [r7, #24]
 8016b42:	681b      	ldr	r3, [r3, #0]
 8016b44:	61bb      	str	r3, [r7, #24]
 8016b46:	69bb      	ldr	r3, [r7, #24]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d1f8      	bne.n	8016b40 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b4e:	69bb      	ldr	r3, [r7, #24]
 8016b50:	68fa      	ldr	r2, [r7, #12]
 8016b52:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	2200      	movs	r2, #0
 8016b58:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b5c:	78fb      	ldrb	r3, [r7, #3]
 8016b5e:	f003 0302 	and.w	r3, r3, #2
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d104      	bne.n	8016b70 <tcp_enqueue_flags+0x148>
 8016b66:	78fb      	ldrb	r3, [r7, #3]
 8016b68:	f003 0301 	and.w	r3, r3, #1
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d004      	beq.n	8016b7a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b74:	1c5a      	adds	r2, r3, #1
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b7a:	78fb      	ldrb	r3, [r7, #3]
 8016b7c:	f003 0301 	and.w	r3, r3, #1
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d006      	beq.n	8016b92 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	8b5b      	ldrh	r3, [r3, #26]
 8016b88:	f043 0320 	orr.w	r3, r3, #32
 8016b8c:	b29a      	uxth	r2, r3
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	685b      	ldr	r3, [r3, #4]
 8016b96:	4618      	mov	r0, r3
 8016b98:	f7fa fdd6 	bl	8011748 <pbuf_clen>
 8016b9c:	4603      	mov	r3, r0
 8016b9e:	461a      	mov	r2, r3
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016ba6:	4413      	add	r3, r2
 8016ba8:	b29a      	uxth	r2, r3
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d00e      	beq.n	8016bd8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d10a      	bne.n	8016bd8 <tcp_enqueue_flags+0x1b0>
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d106      	bne.n	8016bd8 <tcp_enqueue_flags+0x1b0>
 8016bca:	4b06      	ldr	r3, [pc, #24]	; (8016be4 <tcp_enqueue_flags+0x1bc>)
 8016bcc:	f240 4265 	movw	r2, #1125	; 0x465
 8016bd0:	490b      	ldr	r1, [pc, #44]	; (8016c00 <tcp_enqueue_flags+0x1d8>)
 8016bd2:	4806      	ldr	r0, [pc, #24]	; (8016bec <tcp_enqueue_flags+0x1c4>)
 8016bd4:	f005 f85a 	bl	801bc8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016bd8:	2300      	movs	r3, #0
}
 8016bda:	4618      	mov	r0, r3
 8016bdc:	3720      	adds	r7, #32
 8016bde:	46bd      	mov	sp, r7
 8016be0:	bd80      	pop	{r7, pc}
 8016be2:	bf00      	nop
 8016be4:	080207d4 	.word	0x080207d4
 8016be8:	08020bf8 	.word	0x08020bf8
 8016bec:	08020828 	.word	0x08020828
 8016bf0:	08020c50 	.word	0x08020c50
 8016bf4:	08020c70 	.word	0x08020c70
 8016bf8:	08020cac 	.word	0x08020cac
 8016bfc:	08020cc4 	.word	0x08020cc4
 8016c00:	08020cf0 	.word	0x08020cf0

08016c04 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c04:	b5b0      	push	{r4, r5, r7, lr}
 8016c06:	b08a      	sub	sp, #40	; 0x28
 8016c08:	af00      	add	r7, sp, #0
 8016c0a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d106      	bne.n	8016c20 <tcp_output+0x1c>
 8016c12:	4b9e      	ldr	r3, [pc, #632]	; (8016e8c <tcp_output+0x288>)
 8016c14:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c18:	499d      	ldr	r1, [pc, #628]	; (8016e90 <tcp_output+0x28c>)
 8016c1a:	489e      	ldr	r0, [pc, #632]	; (8016e94 <tcp_output+0x290>)
 8016c1c:	f005 f836 	bl	801bc8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	7d1b      	ldrb	r3, [r3, #20]
 8016c24:	2b01      	cmp	r3, #1
 8016c26:	d106      	bne.n	8016c36 <tcp_output+0x32>
 8016c28:	4b98      	ldr	r3, [pc, #608]	; (8016e8c <tcp_output+0x288>)
 8016c2a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016c2e:	499a      	ldr	r1, [pc, #616]	; (8016e98 <tcp_output+0x294>)
 8016c30:	4898      	ldr	r0, [pc, #608]	; (8016e94 <tcp_output+0x290>)
 8016c32:	f005 f82b 	bl	801bc8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c36:	4b99      	ldr	r3, [pc, #612]	; (8016e9c <tcp_output+0x298>)
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	429a      	cmp	r2, r3
 8016c3e:	d101      	bne.n	8016c44 <tcp_output+0x40>
    return ERR_OK;
 8016c40:	2300      	movs	r3, #0
 8016c42:	e1ce      	b.n	8016fe2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c50:	4293      	cmp	r3, r2
 8016c52:	bf28      	it	cs
 8016c54:	4613      	movcs	r3, r2
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c5e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c62:	2b00      	cmp	r3, #0
 8016c64:	d10b      	bne.n	8016c7e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	8b5b      	ldrh	r3, [r3, #26]
 8016c6a:	f003 0302 	and.w	r3, r3, #2
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	f000 81aa 	beq.w	8016fc8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c74:	6878      	ldr	r0, [r7, #4]
 8016c76:	f000 fdcb 	bl	8017810 <tcp_send_empty_ack>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	e1b1      	b.n	8016fe2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c7e:	6879      	ldr	r1, [r7, #4]
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	3304      	adds	r3, #4
 8016c84:	461a      	mov	r2, r3
 8016c86:	6878      	ldr	r0, [r7, #4]
 8016c88:	f7ff f824 	bl	8015cd4 <tcp_route>
 8016c8c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016c8e:	697b      	ldr	r3, [r7, #20]
 8016c90:	2b00      	cmp	r3, #0
 8016c92:	d102      	bne.n	8016c9a <tcp_output+0x96>
    return ERR_RTE;
 8016c94:	f06f 0303 	mvn.w	r3, #3
 8016c98:	e1a3      	b.n	8016fe2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d003      	beq.n	8016ca8 <tcp_output+0xa4>
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	681b      	ldr	r3, [r3, #0]
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d111      	bne.n	8016ccc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d002      	beq.n	8016cb4 <tcp_output+0xb0>
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	3304      	adds	r3, #4
 8016cb2:	e000      	b.n	8016cb6 <tcp_output+0xb2>
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	d102      	bne.n	8016cc4 <tcp_output+0xc0>
      return ERR_RTE;
 8016cbe:	f06f 0303 	mvn.w	r3, #3
 8016cc2:	e18e      	b.n	8016fe2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016cc4:	693b      	ldr	r3, [r7, #16]
 8016cc6:	681a      	ldr	r2, [r3, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cce:	68db      	ldr	r3, [r3, #12]
 8016cd0:	685b      	ldr	r3, [r3, #4]
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7f9 f8e1 	bl	800fe9a <lwip_htonl>
 8016cd8:	4602      	mov	r2, r0
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cde:	1ad3      	subs	r3, r2, r3
 8016ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ce2:	8912      	ldrh	r2, [r2, #8]
 8016ce4:	4413      	add	r3, r2
 8016ce6:	69ba      	ldr	r2, [r7, #24]
 8016ce8:	429a      	cmp	r2, r3
 8016cea:	d227      	bcs.n	8016d3c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016cf2:	461a      	mov	r2, r3
 8016cf4:	69bb      	ldr	r3, [r7, #24]
 8016cf6:	4293      	cmp	r3, r2
 8016cf8:	d114      	bne.n	8016d24 <tcp_output+0x120>
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d110      	bne.n	8016d24 <tcp_output+0x120>
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	d10b      	bne.n	8016d24 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2201      	movs	r2, #1
 8016d18:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d1c:	687b      	ldr	r3, [r7, #4]
 8016d1e:	2200      	movs	r2, #0
 8016d20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	8b5b      	ldrh	r3, [r3, #26]
 8016d28:	f003 0302 	and.w	r3, r3, #2
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	f000 814d 	beq.w	8016fcc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d32:	6878      	ldr	r0, [r7, #4]
 8016d34:	f000 fd6c 	bl	8017810 <tcp_send_empty_ack>
 8016d38:	4603      	mov	r3, r0
 8016d3a:	e152      	b.n	8016fe2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	2200      	movs	r2, #0
 8016d40:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d48:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d4a:	6a3b      	ldr	r3, [r7, #32]
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	f000 811c 	beq.w	8016f8a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d52:	e002      	b.n	8016d5a <tcp_output+0x156>
 8016d54:	6a3b      	ldr	r3, [r7, #32]
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	623b      	str	r3, [r7, #32]
 8016d5a:	6a3b      	ldr	r3, [r7, #32]
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d1f8      	bne.n	8016d54 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d62:	e112      	b.n	8016f8a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	899b      	ldrh	r3, [r3, #12]
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f9 f87f 	bl	800fe70 <lwip_htons>
 8016d72:	4603      	mov	r3, r0
 8016d74:	b2db      	uxtb	r3, r3
 8016d76:	f003 0304 	and.w	r3, r3, #4
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	d006      	beq.n	8016d8c <tcp_output+0x188>
 8016d7e:	4b43      	ldr	r3, [pc, #268]	; (8016e8c <tcp_output+0x288>)
 8016d80:	f240 5236 	movw	r2, #1334	; 0x536
 8016d84:	4946      	ldr	r1, [pc, #280]	; (8016ea0 <tcp_output+0x29c>)
 8016d86:	4843      	ldr	r0, [pc, #268]	; (8016e94 <tcp_output+0x290>)
 8016d88:	f004 ff80 	bl	801bc8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d01f      	beq.n	8016dd4 <tcp_output+0x1d0>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	8b5b      	ldrh	r3, [r3, #26]
 8016d98:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d119      	bne.n	8016dd4 <tcp_output+0x1d0>
 8016da0:	687b      	ldr	r3, [r7, #4]
 8016da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d00b      	beq.n	8016dc0 <tcp_output+0x1bc>
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d110      	bne.n	8016dd4 <tcp_output+0x1d0>
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016db6:	891a      	ldrh	r2, [r3, #8]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dbc:	429a      	cmp	r2, r3
 8016dbe:	d209      	bcs.n	8016dd4 <tcp_output+0x1d0>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d004      	beq.n	8016dd4 <tcp_output+0x1d0>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016dd0:	2b08      	cmp	r3, #8
 8016dd2:	d901      	bls.n	8016dd8 <tcp_output+0x1d4>
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e000      	b.n	8016dda <tcp_output+0x1d6>
 8016dd8:	2300      	movs	r3, #0
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d106      	bne.n	8016dec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	8b5b      	ldrh	r3, [r3, #26]
 8016de2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 80e4 	beq.w	8016fb4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	7d1b      	ldrb	r3, [r3, #20]
 8016df0:	2b02      	cmp	r3, #2
 8016df2:	d00d      	beq.n	8016e10 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016df6:	68db      	ldr	r3, [r3, #12]
 8016df8:	899b      	ldrh	r3, [r3, #12]
 8016dfa:	b29c      	uxth	r4, r3
 8016dfc:	2010      	movs	r0, #16
 8016dfe:	f7f9 f837 	bl	800fe70 <lwip_htons>
 8016e02:	4603      	mov	r3, r0
 8016e04:	461a      	mov	r2, r3
 8016e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e08:	68db      	ldr	r3, [r3, #12]
 8016e0a:	4322      	orrs	r2, r4
 8016e0c:	b292      	uxth	r2, r2
 8016e0e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e10:	697a      	ldr	r2, [r7, #20]
 8016e12:	6879      	ldr	r1, [r7, #4]
 8016e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e16:	f000 f909 	bl	801702c <tcp_output_segment>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d009      	beq.n	8016e3a <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e26:	687b      	ldr	r3, [r7, #4]
 8016e28:	8b5b      	ldrh	r3, [r3, #26]
 8016e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e2e:	b29a      	uxth	r2, r3
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	835a      	strh	r2, [r3, #26]
      return err;
 8016e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e38:	e0d3      	b.n	8016fe2 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e3c:	681a      	ldr	r2, [r3, #0]
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e42:	687b      	ldr	r3, [r7, #4]
 8016e44:	7d1b      	ldrb	r3, [r3, #20]
 8016e46:	2b02      	cmp	r3, #2
 8016e48:	d006      	beq.n	8016e58 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	8b5b      	ldrh	r3, [r3, #26]
 8016e4e:	f023 0303 	bic.w	r3, r3, #3
 8016e52:	b29a      	uxth	r2, r3
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e5a:	68db      	ldr	r3, [r3, #12]
 8016e5c:	685b      	ldr	r3, [r3, #4]
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7f9 f81b 	bl	800fe9a <lwip_htonl>
 8016e64:	4604      	mov	r4, r0
 8016e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e68:	891b      	ldrh	r3, [r3, #8]
 8016e6a:	461d      	mov	r5, r3
 8016e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e6e:	68db      	ldr	r3, [r3, #12]
 8016e70:	899b      	ldrh	r3, [r3, #12]
 8016e72:	b29b      	uxth	r3, r3
 8016e74:	4618      	mov	r0, r3
 8016e76:	f7f8 fffb 	bl	800fe70 <lwip_htons>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	b2db      	uxtb	r3, r3
 8016e7e:	f003 0303 	and.w	r3, r3, #3
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d00e      	beq.n	8016ea4 <tcp_output+0x2a0>
 8016e86:	2301      	movs	r3, #1
 8016e88:	e00d      	b.n	8016ea6 <tcp_output+0x2a2>
 8016e8a:	bf00      	nop
 8016e8c:	080207d4 	.word	0x080207d4
 8016e90:	08020d18 	.word	0x08020d18
 8016e94:	08020828 	.word	0x08020828
 8016e98:	08020d30 	.word	0x08020d30
 8016e9c:	2000d7d0 	.word	0x2000d7d0
 8016ea0:	08020d58 	.word	0x08020d58
 8016ea4:	2300      	movs	r3, #0
 8016ea6:	442b      	add	r3, r5
 8016ea8:	4423      	add	r3, r4
 8016eaa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016eb0:	68bb      	ldr	r3, [r7, #8]
 8016eb2:	1ad3      	subs	r3, r2, r3
 8016eb4:	2b00      	cmp	r3, #0
 8016eb6:	da02      	bge.n	8016ebe <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	68ba      	ldr	r2, [r7, #8]
 8016ebc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec0:	891b      	ldrh	r3, [r3, #8]
 8016ec2:	461c      	mov	r4, r3
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec6:	68db      	ldr	r3, [r3, #12]
 8016ec8:	899b      	ldrh	r3, [r3, #12]
 8016eca:	b29b      	uxth	r3, r3
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7f8 ffcf 	bl	800fe70 <lwip_htons>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	b2db      	uxtb	r3, r3
 8016ed6:	f003 0303 	and.w	r3, r3, #3
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d001      	beq.n	8016ee2 <tcp_output+0x2de>
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <tcp_output+0x2e0>
 8016ee2:	2300      	movs	r3, #0
 8016ee4:	4423      	add	r3, r4
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d049      	beq.n	8016f7e <tcp_output+0x37a>
      seg->next = NULL;
 8016eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eec:	2200      	movs	r2, #0
 8016eee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ef4:	2b00      	cmp	r3, #0
 8016ef6:	d105      	bne.n	8016f04 <tcp_output+0x300>
        pcb->unacked = seg;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016efc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f00:	623b      	str	r3, [r7, #32]
 8016f02:	e03f      	b.n	8016f84 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f06:	68db      	ldr	r3, [r3, #12]
 8016f08:	685b      	ldr	r3, [r3, #4]
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f7f8 ffc5 	bl	800fe9a <lwip_htonl>
 8016f10:	4604      	mov	r4, r0
 8016f12:	6a3b      	ldr	r3, [r7, #32]
 8016f14:	68db      	ldr	r3, [r3, #12]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7f8 ffbe 	bl	800fe9a <lwip_htonl>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	1ae3      	subs	r3, r4, r3
 8016f22:	2b00      	cmp	r3, #0
 8016f24:	da24      	bge.n	8016f70 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	3370      	adds	r3, #112	; 0x70
 8016f2a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f2c:	e002      	b.n	8016f34 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f2e:	69fb      	ldr	r3, [r7, #28]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f34:	69fb      	ldr	r3, [r7, #28]
 8016f36:	681b      	ldr	r3, [r3, #0]
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d011      	beq.n	8016f60 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f3c:	69fb      	ldr	r3, [r7, #28]
 8016f3e:	681b      	ldr	r3, [r3, #0]
 8016f40:	68db      	ldr	r3, [r3, #12]
 8016f42:	685b      	ldr	r3, [r3, #4]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f7f8 ffa8 	bl	800fe9a <lwip_htonl>
 8016f4a:	4604      	mov	r4, r0
 8016f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f4e:	68db      	ldr	r3, [r3, #12]
 8016f50:	685b      	ldr	r3, [r3, #4]
 8016f52:	4618      	mov	r0, r3
 8016f54:	f7f8 ffa1 	bl	800fe9a <lwip_htonl>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f5c:	2b00      	cmp	r3, #0
 8016f5e:	dbe6      	blt.n	8016f2e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f60:	69fb      	ldr	r3, [r7, #28]
 8016f62:	681a      	ldr	r2, [r3, #0]
 8016f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f66:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f68:	69fb      	ldr	r3, [r7, #28]
 8016f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f6c:	601a      	str	r2, [r3, #0]
 8016f6e:	e009      	b.n	8016f84 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f70:	6a3b      	ldr	r3, [r7, #32]
 8016f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f74:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f76:	6a3b      	ldr	r3, [r7, #32]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	623b      	str	r3, [r7, #32]
 8016f7c:	e002      	b.n	8016f84 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f80:	f7fb ff1d 	bl	8012dbe <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f88:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d012      	beq.n	8016fb6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f92:	68db      	ldr	r3, [r3, #12]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	4618      	mov	r0, r3
 8016f98:	f7f8 ff7f 	bl	800fe9a <lwip_htonl>
 8016f9c:	4602      	mov	r2, r0
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fa2:	1ad3      	subs	r3, r2, r3
 8016fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fa6:	8912      	ldrh	r2, [r2, #8]
 8016fa8:	4413      	add	r3, r2
  while (seg != NULL &&
 8016faa:	69ba      	ldr	r2, [r7, #24]
 8016fac:	429a      	cmp	r2, r3
 8016fae:	f4bf aed9 	bcs.w	8016d64 <tcp_output+0x160>
 8016fb2:	e000      	b.n	8016fb6 <tcp_output+0x3b2>
      break;
 8016fb4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d108      	bne.n	8016fd0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	2200      	movs	r2, #0
 8016fc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016fc6:	e004      	b.n	8016fd2 <tcp_output+0x3ce>
    goto output_done;
 8016fc8:	bf00      	nop
 8016fca:	e002      	b.n	8016fd2 <tcp_output+0x3ce>
    goto output_done;
 8016fcc:	bf00      	nop
 8016fce:	e000      	b.n	8016fd2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016fd0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	8b5b      	ldrh	r3, [r3, #26]
 8016fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016fda:	b29a      	uxth	r2, r3
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016fe0:	2300      	movs	r3, #0
}
 8016fe2:	4618      	mov	r0, r3
 8016fe4:	3728      	adds	r7, #40	; 0x28
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8016fea:	bf00      	nop

08016fec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b082      	sub	sp, #8
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d106      	bne.n	8017008 <tcp_output_segment_busy+0x1c>
 8016ffa:	4b09      	ldr	r3, [pc, #36]	; (8017020 <tcp_output_segment_busy+0x34>)
 8016ffc:	f240 529a 	movw	r2, #1434	; 0x59a
 8017000:	4908      	ldr	r1, [pc, #32]	; (8017024 <tcp_output_segment_busy+0x38>)
 8017002:	4809      	ldr	r0, [pc, #36]	; (8017028 <tcp_output_segment_busy+0x3c>)
 8017004:	f004 fe42 	bl	801bc8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	685b      	ldr	r3, [r3, #4]
 801700c:	7b9b      	ldrb	r3, [r3, #14]
 801700e:	2b01      	cmp	r3, #1
 8017010:	d001      	beq.n	8017016 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017012:	2301      	movs	r3, #1
 8017014:	e000      	b.n	8017018 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017016:	2300      	movs	r3, #0
}
 8017018:	4618      	mov	r0, r3
 801701a:	3708      	adds	r7, #8
 801701c:	46bd      	mov	sp, r7
 801701e:	bd80      	pop	{r7, pc}
 8017020:	080207d4 	.word	0x080207d4
 8017024:	08020d70 	.word	0x08020d70
 8017028:	08020828 	.word	0x08020828

0801702c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801702c:	b5b0      	push	{r4, r5, r7, lr}
 801702e:	b08c      	sub	sp, #48	; 0x30
 8017030:	af04      	add	r7, sp, #16
 8017032:	60f8      	str	r0, [r7, #12]
 8017034:	60b9      	str	r1, [r7, #8]
 8017036:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	2b00      	cmp	r3, #0
 801703c:	d106      	bne.n	801704c <tcp_output_segment+0x20>
 801703e:	4b63      	ldr	r3, [pc, #396]	; (80171cc <tcp_output_segment+0x1a0>)
 8017040:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017044:	4962      	ldr	r1, [pc, #392]	; (80171d0 <tcp_output_segment+0x1a4>)
 8017046:	4863      	ldr	r0, [pc, #396]	; (80171d4 <tcp_output_segment+0x1a8>)
 8017048:	f004 fe20 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	2b00      	cmp	r3, #0
 8017050:	d106      	bne.n	8017060 <tcp_output_segment+0x34>
 8017052:	4b5e      	ldr	r3, [pc, #376]	; (80171cc <tcp_output_segment+0x1a0>)
 8017054:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017058:	495f      	ldr	r1, [pc, #380]	; (80171d8 <tcp_output_segment+0x1ac>)
 801705a:	485e      	ldr	r0, [pc, #376]	; (80171d4 <tcp_output_segment+0x1a8>)
 801705c:	f004 fe16 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	2b00      	cmp	r3, #0
 8017064:	d106      	bne.n	8017074 <tcp_output_segment+0x48>
 8017066:	4b59      	ldr	r3, [pc, #356]	; (80171cc <tcp_output_segment+0x1a0>)
 8017068:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801706c:	495b      	ldr	r1, [pc, #364]	; (80171dc <tcp_output_segment+0x1b0>)
 801706e:	4859      	ldr	r0, [pc, #356]	; (80171d4 <tcp_output_segment+0x1a8>)
 8017070:	f004 fe0c 	bl	801bc8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8017074:	68f8      	ldr	r0, [r7, #12]
 8017076:	f7ff ffb9 	bl	8016fec <tcp_output_segment_busy>
 801707a:	4603      	mov	r3, r0
 801707c:	2b00      	cmp	r3, #0
 801707e:	d001      	beq.n	8017084 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017080:	2300      	movs	r3, #0
 8017082:	e09f      	b.n	80171c4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	68dc      	ldr	r4, [r3, #12]
 801708c:	4610      	mov	r0, r2
 801708e:	f7f8 ff04 	bl	800fe9a <lwip_htonl>
 8017092:	4603      	mov	r3, r0
 8017094:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	68dc      	ldr	r4, [r3, #12]
 801709e:	4610      	mov	r0, r2
 80170a0:	f7f8 fee6 	bl	800fe70 <lwip_htons>
 80170a4:	4603      	mov	r3, r0
 80170a6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80170a8:	68bb      	ldr	r3, [r7, #8]
 80170aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170ac:	68ba      	ldr	r2, [r7, #8]
 80170ae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80170b0:	441a      	add	r2, r3
 80170b2:	68bb      	ldr	r3, [r7, #8]
 80170b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	3314      	adds	r3, #20
 80170bc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	7a9b      	ldrb	r3, [r3, #10]
 80170c2:	f003 0301 	and.w	r3, r3, #1
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d015      	beq.n	80170f6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	3304      	adds	r3, #4
 80170ce:	461a      	mov	r2, r3
 80170d0:	6879      	ldr	r1, [r7, #4]
 80170d2:	f44f 7006 	mov.w	r0, #536	; 0x218
 80170d6:	f7fc fa37 	bl	8013548 <tcp_eff_send_mss_netif>
 80170da:	4603      	mov	r3, r0
 80170dc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80170de:	8b7b      	ldrh	r3, [r7, #26]
 80170e0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80170e4:	4618      	mov	r0, r3
 80170e6:	f7f8 fed8 	bl	800fe9a <lwip_htonl>
 80170ea:	4602      	mov	r2, r0
 80170ec:	69fb      	ldr	r3, [r7, #28]
 80170ee:	601a      	str	r2, [r3, #0]
    opts += 1;
 80170f0:	69fb      	ldr	r3, [r7, #28]
 80170f2:	3304      	adds	r3, #4
 80170f4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80170f6:	68bb      	ldr	r3, [r7, #8]
 80170f8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	da02      	bge.n	8017106 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017100:	68bb      	ldr	r3, [r7, #8]
 8017102:	2200      	movs	r2, #0
 8017104:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801710a:	2b00      	cmp	r3, #0
 801710c:	d10c      	bne.n	8017128 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801710e:	4b34      	ldr	r3, [pc, #208]	; (80171e0 <tcp_output_segment+0x1b4>)
 8017110:	681a      	ldr	r2, [r3, #0]
 8017112:	68bb      	ldr	r3, [r7, #8]
 8017114:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	68db      	ldr	r3, [r3, #12]
 801711a:	685b      	ldr	r3, [r3, #4]
 801711c:	4618      	mov	r0, r3
 801711e:	f7f8 febc 	bl	800fe9a <lwip_htonl>
 8017122:	4602      	mov	r2, r0
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	68da      	ldr	r2, [r3, #12]
 801712c:	68fb      	ldr	r3, [r7, #12]
 801712e:	685b      	ldr	r3, [r3, #4]
 8017130:	685b      	ldr	r3, [r3, #4]
 8017132:	1ad3      	subs	r3, r2, r3
 8017134:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	685b      	ldr	r3, [r3, #4]
 801713a:	8959      	ldrh	r1, [r3, #10]
 801713c:	68fb      	ldr	r3, [r7, #12]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	8b3a      	ldrh	r2, [r7, #24]
 8017142:	1a8a      	subs	r2, r1, r2
 8017144:	b292      	uxth	r2, r2
 8017146:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017148:	68fb      	ldr	r3, [r7, #12]
 801714a:	685b      	ldr	r3, [r3, #4]
 801714c:	8919      	ldrh	r1, [r3, #8]
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	8b3a      	ldrh	r2, [r7, #24]
 8017154:	1a8a      	subs	r2, r1, r2
 8017156:	b292      	uxth	r2, r2
 8017158:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801715a:	68fb      	ldr	r3, [r7, #12]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	68fa      	ldr	r2, [r7, #12]
 8017160:	68d2      	ldr	r2, [r2, #12]
 8017162:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017164:	68fb      	ldr	r3, [r7, #12]
 8017166:	68db      	ldr	r3, [r3, #12]
 8017168:	2200      	movs	r2, #0
 801716a:	741a      	strb	r2, [r3, #16]
 801716c:	2200      	movs	r2, #0
 801716e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	f103 0214 	add.w	r2, r3, #20
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	7a9b      	ldrb	r3, [r3, #10]
 801717c:	009b      	lsls	r3, r3, #2
 801717e:	f003 0304 	and.w	r3, r3, #4
 8017182:	4413      	add	r3, r2
 8017184:	69fa      	ldr	r2, [r7, #28]
 8017186:	429a      	cmp	r2, r3
 8017188:	d006      	beq.n	8017198 <tcp_output_segment+0x16c>
 801718a:	4b10      	ldr	r3, [pc, #64]	; (80171cc <tcp_output_segment+0x1a0>)
 801718c:	f240 621c 	movw	r2, #1564	; 0x61c
 8017190:	4914      	ldr	r1, [pc, #80]	; (80171e4 <tcp_output_segment+0x1b8>)
 8017192:	4810      	ldr	r0, [pc, #64]	; (80171d4 <tcp_output_segment+0x1a8>)
 8017194:	f004 fd7a 	bl	801bc8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	6858      	ldr	r0, [r3, #4]
 801719c:	68b9      	ldr	r1, [r7, #8]
 801719e:	68bb      	ldr	r3, [r7, #8]
 80171a0:	1d1c      	adds	r4, r3, #4
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	7add      	ldrb	r5, [r3, #11]
 80171a6:	68bb      	ldr	r3, [r7, #8]
 80171a8:	7a9b      	ldrb	r3, [r3, #10]
 80171aa:	687a      	ldr	r2, [r7, #4]
 80171ac:	9202      	str	r2, [sp, #8]
 80171ae:	2206      	movs	r2, #6
 80171b0:	9201      	str	r2, [sp, #4]
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	462b      	mov	r3, r5
 80171b6:	4622      	mov	r2, r4
 80171b8:	f002 fd96 	bl	8019ce8 <ip4_output_if>
 80171bc:	4603      	mov	r3, r0
 80171be:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80171c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171c4:	4618      	mov	r0, r3
 80171c6:	3720      	adds	r7, #32
 80171c8:	46bd      	mov	sp, r7
 80171ca:	bdb0      	pop	{r4, r5, r7, pc}
 80171cc:	080207d4 	.word	0x080207d4
 80171d0:	08020d98 	.word	0x08020d98
 80171d4:	08020828 	.word	0x08020828
 80171d8:	08020db8 	.word	0x08020db8
 80171dc:	08020dd8 	.word	0x08020dd8
 80171e0:	2000d7c0 	.word	0x2000d7c0
 80171e4:	08020dfc 	.word	0x08020dfc

080171e8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80171e8:	b5b0      	push	{r4, r5, r7, lr}
 80171ea:	b084      	sub	sp, #16
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d106      	bne.n	8017204 <tcp_rexmit_rto_prepare+0x1c>
 80171f6:	4b31      	ldr	r3, [pc, #196]	; (80172bc <tcp_rexmit_rto_prepare+0xd4>)
 80171f8:	f240 6263 	movw	r2, #1635	; 0x663
 80171fc:	4930      	ldr	r1, [pc, #192]	; (80172c0 <tcp_rexmit_rto_prepare+0xd8>)
 80171fe:	4831      	ldr	r0, [pc, #196]	; (80172c4 <tcp_rexmit_rto_prepare+0xdc>)
 8017200:	f004 fd44 	bl	801bc8c <iprintf>

  if (pcb->unacked == NULL) {
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017208:	2b00      	cmp	r3, #0
 801720a:	d102      	bne.n	8017212 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801720c:	f06f 0305 	mvn.w	r3, #5
 8017210:	e050      	b.n	80172b4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017212:	687b      	ldr	r3, [r7, #4]
 8017214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017216:	60fb      	str	r3, [r7, #12]
 8017218:	e00b      	b.n	8017232 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801721a:	68f8      	ldr	r0, [r7, #12]
 801721c:	f7ff fee6 	bl	8016fec <tcp_output_segment_busy>
 8017220:	4603      	mov	r3, r0
 8017222:	2b00      	cmp	r3, #0
 8017224:	d002      	beq.n	801722c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017226:	f06f 0305 	mvn.w	r3, #5
 801722a:	e043      	b.n	80172b4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801722c:	68fb      	ldr	r3, [r7, #12]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	60fb      	str	r3, [r7, #12]
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	681b      	ldr	r3, [r3, #0]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d1ef      	bne.n	801721a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801723a:	68f8      	ldr	r0, [r7, #12]
 801723c:	f7ff fed6 	bl	8016fec <tcp_output_segment_busy>
 8017240:	4603      	mov	r3, r0
 8017242:	2b00      	cmp	r3, #0
 8017244:	d002      	beq.n	801724c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017246:	f06f 0305 	mvn.w	r3, #5
 801724a:	e033      	b.n	80172b4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2200      	movs	r2, #0
 8017260:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017262:	687b      	ldr	r3, [r7, #4]
 8017264:	8b5b      	ldrh	r3, [r3, #26]
 8017266:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801726a:	b29a      	uxth	r2, r3
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017270:	68fb      	ldr	r3, [r7, #12]
 8017272:	68db      	ldr	r3, [r3, #12]
 8017274:	685b      	ldr	r3, [r3, #4]
 8017276:	4618      	mov	r0, r3
 8017278:	f7f8 fe0f 	bl	800fe9a <lwip_htonl>
 801727c:	4604      	mov	r4, r0
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	891b      	ldrh	r3, [r3, #8]
 8017282:	461d      	mov	r5, r3
 8017284:	68fb      	ldr	r3, [r7, #12]
 8017286:	68db      	ldr	r3, [r3, #12]
 8017288:	899b      	ldrh	r3, [r3, #12]
 801728a:	b29b      	uxth	r3, r3
 801728c:	4618      	mov	r0, r3
 801728e:	f7f8 fdef 	bl	800fe70 <lwip_htons>
 8017292:	4603      	mov	r3, r0
 8017294:	b2db      	uxtb	r3, r3
 8017296:	f003 0303 	and.w	r3, r3, #3
 801729a:	2b00      	cmp	r3, #0
 801729c:	d001      	beq.n	80172a2 <tcp_rexmit_rto_prepare+0xba>
 801729e:	2301      	movs	r3, #1
 80172a0:	e000      	b.n	80172a4 <tcp_rexmit_rto_prepare+0xbc>
 80172a2:	2300      	movs	r3, #0
 80172a4:	442b      	add	r3, r5
 80172a6:	18e2      	adds	r2, r4, r3
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	2200      	movs	r2, #0
 80172b0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80172b2:	2300      	movs	r3, #0
}
 80172b4:	4618      	mov	r0, r3
 80172b6:	3710      	adds	r7, #16
 80172b8:	46bd      	mov	sp, r7
 80172ba:	bdb0      	pop	{r4, r5, r7, pc}
 80172bc:	080207d4 	.word	0x080207d4
 80172c0:	08020e10 	.word	0x08020e10
 80172c4:	08020828 	.word	0x08020828

080172c8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d106      	bne.n	80172e4 <tcp_rexmit_rto_commit+0x1c>
 80172d6:	4b0d      	ldr	r3, [pc, #52]	; (801730c <tcp_rexmit_rto_commit+0x44>)
 80172d8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80172dc:	490c      	ldr	r1, [pc, #48]	; (8017310 <tcp_rexmit_rto_commit+0x48>)
 80172de:	480d      	ldr	r0, [pc, #52]	; (8017314 <tcp_rexmit_rto_commit+0x4c>)
 80172e0:	f004 fcd4 	bl	801bc8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172ea:	2bff      	cmp	r3, #255	; 0xff
 80172ec:	d007      	beq.n	80172fe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80172f4:	3301      	adds	r3, #1
 80172f6:	b2da      	uxtb	r2, r3
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80172fe:	6878      	ldr	r0, [r7, #4]
 8017300:	f7ff fc80 	bl	8016c04 <tcp_output>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	080207d4 	.word	0x080207d4
 8017310:	08020e34 	.word	0x08020e34
 8017314:	08020828 	.word	0x08020828

08017318 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017318:	b580      	push	{r7, lr}
 801731a:	b082      	sub	sp, #8
 801731c:	af00      	add	r7, sp, #0
 801731e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017320:	687b      	ldr	r3, [r7, #4]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d106      	bne.n	8017334 <tcp_rexmit_rto+0x1c>
 8017326:	4b0a      	ldr	r3, [pc, #40]	; (8017350 <tcp_rexmit_rto+0x38>)
 8017328:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801732c:	4909      	ldr	r1, [pc, #36]	; (8017354 <tcp_rexmit_rto+0x3c>)
 801732e:	480a      	ldr	r0, [pc, #40]	; (8017358 <tcp_rexmit_rto+0x40>)
 8017330:	f004 fcac 	bl	801bc8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017334:	6878      	ldr	r0, [r7, #4]
 8017336:	f7ff ff57 	bl	80171e8 <tcp_rexmit_rto_prepare>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d102      	bne.n	8017346 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017340:	6878      	ldr	r0, [r7, #4]
 8017342:	f7ff ffc1 	bl	80172c8 <tcp_rexmit_rto_commit>
  }
}
 8017346:	bf00      	nop
 8017348:	3708      	adds	r7, #8
 801734a:	46bd      	mov	sp, r7
 801734c:	bd80      	pop	{r7, pc}
 801734e:	bf00      	nop
 8017350:	080207d4 	.word	0x080207d4
 8017354:	08020e58 	.word	0x08020e58
 8017358:	08020828 	.word	0x08020828

0801735c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801735c:	b590      	push	{r4, r7, lr}
 801735e:	b085      	sub	sp, #20
 8017360:	af00      	add	r7, sp, #0
 8017362:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	2b00      	cmp	r3, #0
 8017368:	d106      	bne.n	8017378 <tcp_rexmit+0x1c>
 801736a:	4b2f      	ldr	r3, [pc, #188]	; (8017428 <tcp_rexmit+0xcc>)
 801736c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017370:	492e      	ldr	r1, [pc, #184]	; (801742c <tcp_rexmit+0xd0>)
 8017372:	482f      	ldr	r0, [pc, #188]	; (8017430 <tcp_rexmit+0xd4>)
 8017374:	f004 fc8a 	bl	801bc8c <iprintf>

  if (pcb->unacked == NULL) {
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801737c:	2b00      	cmp	r3, #0
 801737e:	d102      	bne.n	8017386 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017380:	f06f 0305 	mvn.w	r3, #5
 8017384:	e04c      	b.n	8017420 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801738a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801738c:	68b8      	ldr	r0, [r7, #8]
 801738e:	f7ff fe2d 	bl	8016fec <tcp_output_segment_busy>
 8017392:	4603      	mov	r3, r0
 8017394:	2b00      	cmp	r3, #0
 8017396:	d002      	beq.n	801739e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017398:	f06f 0305 	mvn.w	r3, #5
 801739c:	e040      	b.n	8017420 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801739e:	68bb      	ldr	r3, [r7, #8]
 80173a0:	681a      	ldr	r2, [r3, #0]
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	336c      	adds	r3, #108	; 0x6c
 80173aa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173ac:	e002      	b.n	80173b4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80173ae:	68fb      	ldr	r3, [r7, #12]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173b4:	68fb      	ldr	r3, [r7, #12]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d011      	beq.n	80173e0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	685b      	ldr	r3, [r3, #4]
 80173c4:	4618      	mov	r0, r3
 80173c6:	f7f8 fd68 	bl	800fe9a <lwip_htonl>
 80173ca:	4604      	mov	r4, r0
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	68db      	ldr	r3, [r3, #12]
 80173d0:	685b      	ldr	r3, [r3, #4]
 80173d2:	4618      	mov	r0, r3
 80173d4:	f7f8 fd61 	bl	800fe9a <lwip_htonl>
 80173d8:	4603      	mov	r3, r0
 80173da:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173dc:	2b00      	cmp	r3, #0
 80173de:	dbe6      	blt.n	80173ae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681a      	ldr	r2, [r3, #0]
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80173e8:	68fb      	ldr	r3, [r7, #12]
 80173ea:	68ba      	ldr	r2, [r7, #8]
 80173ec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80173ee:	68bb      	ldr	r3, [r7, #8]
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d103      	bne.n	80173fe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	2200      	movs	r2, #0
 80173fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017404:	2bff      	cmp	r3, #255	; 0xff
 8017406:	d007      	beq.n	8017418 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801740e:	3301      	adds	r3, #1
 8017410:	b2da      	uxtb	r2, r3
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	2200      	movs	r2, #0
 801741c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801741e:	2300      	movs	r3, #0
}
 8017420:	4618      	mov	r0, r3
 8017422:	3714      	adds	r7, #20
 8017424:	46bd      	mov	sp, r7
 8017426:	bd90      	pop	{r4, r7, pc}
 8017428:	080207d4 	.word	0x080207d4
 801742c:	08020e74 	.word	0x08020e74
 8017430:	08020828 	.word	0x08020828

08017434 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2b00      	cmp	r3, #0
 8017440:	d106      	bne.n	8017450 <tcp_rexmit_fast+0x1c>
 8017442:	4b2a      	ldr	r3, [pc, #168]	; (80174ec <tcp_rexmit_fast+0xb8>)
 8017444:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017448:	4929      	ldr	r1, [pc, #164]	; (80174f0 <tcp_rexmit_fast+0xbc>)
 801744a:	482a      	ldr	r0, [pc, #168]	; (80174f4 <tcp_rexmit_fast+0xc0>)
 801744c:	f004 fc1e 	bl	801bc8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017454:	2b00      	cmp	r3, #0
 8017456:	d045      	beq.n	80174e4 <tcp_rexmit_fast+0xb0>
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	8b5b      	ldrh	r3, [r3, #26]
 801745c:	f003 0304 	and.w	r3, r3, #4
 8017460:	2b00      	cmp	r3, #0
 8017462:	d13f      	bne.n	80174e4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017464:	6878      	ldr	r0, [r7, #4]
 8017466:	f7ff ff79 	bl	801735c <tcp_rexmit>
 801746a:	4603      	mov	r3, r0
 801746c:	2b00      	cmp	r3, #0
 801746e:	d139      	bne.n	80174e4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801747c:	4293      	cmp	r3, r2
 801747e:	bf28      	it	cs
 8017480:	4613      	movcs	r3, r2
 8017482:	b29b      	uxth	r3, r3
 8017484:	2b00      	cmp	r3, #0
 8017486:	da00      	bge.n	801748a <tcp_rexmit_fast+0x56>
 8017488:	3301      	adds	r3, #1
 801748a:	105b      	asrs	r3, r3, #1
 801748c:	b29a      	uxth	r2, r3
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801749a:	461a      	mov	r2, r3
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	429a      	cmp	r2, r3
 80174a4:	d206      	bcs.n	80174b4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174aa:	005b      	lsls	r3, r3, #1
 80174ac:	b29a      	uxth	r2, r3
 80174ae:	687b      	ldr	r3, [r7, #4]
 80174b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174be:	4619      	mov	r1, r3
 80174c0:	0049      	lsls	r1, r1, #1
 80174c2:	440b      	add	r3, r1
 80174c4:	b29b      	uxth	r3, r3
 80174c6:	4413      	add	r3, r2
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	8b5b      	ldrh	r3, [r3, #26]
 80174d4:	f043 0304 	orr.w	r3, r3, #4
 80174d8:	b29a      	uxth	r2, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	2200      	movs	r2, #0
 80174e2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80174e4:	bf00      	nop
 80174e6:	3708      	adds	r7, #8
 80174e8:	46bd      	mov	sp, r7
 80174ea:	bd80      	pop	{r7, pc}
 80174ec:	080207d4 	.word	0x080207d4
 80174f0:	08020e8c 	.word	0x08020e8c
 80174f4:	08020828 	.word	0x08020828

080174f8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b086      	sub	sp, #24
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	60f8      	str	r0, [r7, #12]
 8017500:	607b      	str	r3, [r7, #4]
 8017502:	460b      	mov	r3, r1
 8017504:	817b      	strh	r3, [r7, #10]
 8017506:	4613      	mov	r3, r2
 8017508:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801750a:	897a      	ldrh	r2, [r7, #10]
 801750c:	893b      	ldrh	r3, [r7, #8]
 801750e:	4413      	add	r3, r2
 8017510:	b29b      	uxth	r3, r3
 8017512:	3314      	adds	r3, #20
 8017514:	b29b      	uxth	r3, r3
 8017516:	f44f 7220 	mov.w	r2, #640	; 0x280
 801751a:	4619      	mov	r1, r3
 801751c:	2022      	movs	r0, #34	; 0x22
 801751e:	f7f9 fd6f 	bl	8011000 <pbuf_alloc>
 8017522:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017524:	697b      	ldr	r3, [r7, #20]
 8017526:	2b00      	cmp	r3, #0
 8017528:	d04d      	beq.n	80175c6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801752a:	897b      	ldrh	r3, [r7, #10]
 801752c:	3313      	adds	r3, #19
 801752e:	697a      	ldr	r2, [r7, #20]
 8017530:	8952      	ldrh	r2, [r2, #10]
 8017532:	4293      	cmp	r3, r2
 8017534:	db06      	blt.n	8017544 <tcp_output_alloc_header_common+0x4c>
 8017536:	4b26      	ldr	r3, [pc, #152]	; (80175d0 <tcp_output_alloc_header_common+0xd8>)
 8017538:	f240 7223 	movw	r2, #1827	; 0x723
 801753c:	4925      	ldr	r1, [pc, #148]	; (80175d4 <tcp_output_alloc_header_common+0xdc>)
 801753e:	4826      	ldr	r0, [pc, #152]	; (80175d8 <tcp_output_alloc_header_common+0xe0>)
 8017540:	f004 fba4 	bl	801bc8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017544:	697b      	ldr	r3, [r7, #20]
 8017546:	685b      	ldr	r3, [r3, #4]
 8017548:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801754a:	8c3b      	ldrh	r3, [r7, #32]
 801754c:	4618      	mov	r0, r3
 801754e:	f7f8 fc8f 	bl	800fe70 <lwip_htons>
 8017552:	4603      	mov	r3, r0
 8017554:	461a      	mov	r2, r3
 8017556:	693b      	ldr	r3, [r7, #16]
 8017558:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801755a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801755c:	4618      	mov	r0, r3
 801755e:	f7f8 fc87 	bl	800fe70 <lwip_htons>
 8017562:	4603      	mov	r3, r0
 8017564:	461a      	mov	r2, r3
 8017566:	693b      	ldr	r3, [r7, #16]
 8017568:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801756a:	693b      	ldr	r3, [r7, #16]
 801756c:	687a      	ldr	r2, [r7, #4]
 801756e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017570:	68f8      	ldr	r0, [r7, #12]
 8017572:	f7f8 fc92 	bl	800fe9a <lwip_htonl>
 8017576:	4602      	mov	r2, r0
 8017578:	693b      	ldr	r3, [r7, #16]
 801757a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801757c:	897b      	ldrh	r3, [r7, #10]
 801757e:	089b      	lsrs	r3, r3, #2
 8017580:	b29b      	uxth	r3, r3
 8017582:	3305      	adds	r3, #5
 8017584:	b29b      	uxth	r3, r3
 8017586:	031b      	lsls	r3, r3, #12
 8017588:	b29a      	uxth	r2, r3
 801758a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801758e:	b29b      	uxth	r3, r3
 8017590:	4313      	orrs	r3, r2
 8017592:	b29b      	uxth	r3, r3
 8017594:	4618      	mov	r0, r3
 8017596:	f7f8 fc6b 	bl	800fe70 <lwip_htons>
 801759a:	4603      	mov	r3, r0
 801759c:	461a      	mov	r2, r3
 801759e:	693b      	ldr	r3, [r7, #16]
 80175a0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80175a2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175a4:	4618      	mov	r0, r3
 80175a6:	f7f8 fc63 	bl	800fe70 <lwip_htons>
 80175aa:	4603      	mov	r3, r0
 80175ac:	461a      	mov	r2, r3
 80175ae:	693b      	ldr	r3, [r7, #16]
 80175b0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80175b2:	693b      	ldr	r3, [r7, #16]
 80175b4:	2200      	movs	r2, #0
 80175b6:	741a      	strb	r2, [r3, #16]
 80175b8:	2200      	movs	r2, #0
 80175ba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80175bc:	693b      	ldr	r3, [r7, #16]
 80175be:	2200      	movs	r2, #0
 80175c0:	749a      	strb	r2, [r3, #18]
 80175c2:	2200      	movs	r2, #0
 80175c4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80175c6:	697b      	ldr	r3, [r7, #20]
}
 80175c8:	4618      	mov	r0, r3
 80175ca:	3718      	adds	r7, #24
 80175cc:	46bd      	mov	sp, r7
 80175ce:	bd80      	pop	{r7, pc}
 80175d0:	080207d4 	.word	0x080207d4
 80175d4:	08020eac 	.word	0x08020eac
 80175d8:	08020828 	.word	0x08020828

080175dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175dc:	b5b0      	push	{r4, r5, r7, lr}
 80175de:	b08a      	sub	sp, #40	; 0x28
 80175e0:	af04      	add	r7, sp, #16
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	607b      	str	r3, [r7, #4]
 80175e6:	460b      	mov	r3, r1
 80175e8:	817b      	strh	r3, [r7, #10]
 80175ea:	4613      	mov	r3, r2
 80175ec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80175ee:	68fb      	ldr	r3, [r7, #12]
 80175f0:	2b00      	cmp	r3, #0
 80175f2:	d106      	bne.n	8017602 <tcp_output_alloc_header+0x26>
 80175f4:	4b15      	ldr	r3, [pc, #84]	; (801764c <tcp_output_alloc_header+0x70>)
 80175f6:	f240 7242 	movw	r2, #1858	; 0x742
 80175fa:	4915      	ldr	r1, [pc, #84]	; (8017650 <tcp_output_alloc_header+0x74>)
 80175fc:	4815      	ldr	r0, [pc, #84]	; (8017654 <tcp_output_alloc_header+0x78>)
 80175fe:	f004 fb45 	bl	801bc8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017602:	68fb      	ldr	r3, [r7, #12]
 8017604:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	8adb      	ldrh	r3, [r3, #22]
 801760a:	68fa      	ldr	r2, [r7, #12]
 801760c:	8b12      	ldrh	r2, [r2, #24]
 801760e:	68f9      	ldr	r1, [r7, #12]
 8017610:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017612:	893d      	ldrh	r5, [r7, #8]
 8017614:	897c      	ldrh	r4, [r7, #10]
 8017616:	9103      	str	r1, [sp, #12]
 8017618:	2110      	movs	r1, #16
 801761a:	9102      	str	r1, [sp, #8]
 801761c:	9201      	str	r2, [sp, #4]
 801761e:	9300      	str	r3, [sp, #0]
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	462a      	mov	r2, r5
 8017624:	4621      	mov	r1, r4
 8017626:	f7ff ff67 	bl	80174f8 <tcp_output_alloc_header_common>
 801762a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801762c:	697b      	ldr	r3, [r7, #20]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d006      	beq.n	8017640 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017636:	68fa      	ldr	r2, [r7, #12]
 8017638:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801763a:	441a      	add	r2, r3
 801763c:	68fb      	ldr	r3, [r7, #12]
 801763e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017640:	697b      	ldr	r3, [r7, #20]
}
 8017642:	4618      	mov	r0, r3
 8017644:	3718      	adds	r7, #24
 8017646:	46bd      	mov	sp, r7
 8017648:	bdb0      	pop	{r4, r5, r7, pc}
 801764a:	bf00      	nop
 801764c:	080207d4 	.word	0x080207d4
 8017650:	08020edc 	.word	0x08020edc
 8017654:	08020828 	.word	0x08020828

08017658 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b088      	sub	sp, #32
 801765c:	af00      	add	r7, sp, #0
 801765e:	60f8      	str	r0, [r7, #12]
 8017660:	60b9      	str	r1, [r7, #8]
 8017662:	4611      	mov	r1, r2
 8017664:	461a      	mov	r2, r3
 8017666:	460b      	mov	r3, r1
 8017668:	71fb      	strb	r3, [r7, #7]
 801766a:	4613      	mov	r3, r2
 801766c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801766e:	2300      	movs	r3, #0
 8017670:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017672:	68bb      	ldr	r3, [r7, #8]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d106      	bne.n	8017686 <tcp_output_fill_options+0x2e>
 8017678:	4b13      	ldr	r3, [pc, #76]	; (80176c8 <tcp_output_fill_options+0x70>)
 801767a:	f240 7256 	movw	r2, #1878	; 0x756
 801767e:	4913      	ldr	r1, [pc, #76]	; (80176cc <tcp_output_fill_options+0x74>)
 8017680:	4813      	ldr	r0, [pc, #76]	; (80176d0 <tcp_output_fill_options+0x78>)
 8017682:	f004 fb03 	bl	801bc8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017686:	68bb      	ldr	r3, [r7, #8]
 8017688:	685b      	ldr	r3, [r3, #4]
 801768a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	3314      	adds	r3, #20
 8017690:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017692:	69bb      	ldr	r3, [r7, #24]
 8017694:	f103 0214 	add.w	r2, r3, #20
 8017698:	8bfb      	ldrh	r3, [r7, #30]
 801769a:	009b      	lsls	r3, r3, #2
 801769c:	4619      	mov	r1, r3
 801769e:	79fb      	ldrb	r3, [r7, #7]
 80176a0:	009b      	lsls	r3, r3, #2
 80176a2:	f003 0304 	and.w	r3, r3, #4
 80176a6:	440b      	add	r3, r1
 80176a8:	4413      	add	r3, r2
 80176aa:	697a      	ldr	r2, [r7, #20]
 80176ac:	429a      	cmp	r2, r3
 80176ae:	d006      	beq.n	80176be <tcp_output_fill_options+0x66>
 80176b0:	4b05      	ldr	r3, [pc, #20]	; (80176c8 <tcp_output_fill_options+0x70>)
 80176b2:	f240 7275 	movw	r2, #1909	; 0x775
 80176b6:	4907      	ldr	r1, [pc, #28]	; (80176d4 <tcp_output_fill_options+0x7c>)
 80176b8:	4805      	ldr	r0, [pc, #20]	; (80176d0 <tcp_output_fill_options+0x78>)
 80176ba:	f004 fae7 	bl	801bc8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80176be:	bf00      	nop
 80176c0:	3720      	adds	r7, #32
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
 80176c6:	bf00      	nop
 80176c8:	080207d4 	.word	0x080207d4
 80176cc:	08020f04 	.word	0x08020f04
 80176d0:	08020828 	.word	0x08020828
 80176d4:	08020dfc 	.word	0x08020dfc

080176d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b08a      	sub	sp, #40	; 0x28
 80176dc:	af04      	add	r7, sp, #16
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176e6:	68bb      	ldr	r3, [r7, #8]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d106      	bne.n	80176fa <tcp_output_control_segment+0x22>
 80176ec:	4b1c      	ldr	r3, [pc, #112]	; (8017760 <tcp_output_control_segment+0x88>)
 80176ee:	f240 7287 	movw	r2, #1927	; 0x787
 80176f2:	491c      	ldr	r1, [pc, #112]	; (8017764 <tcp_output_control_segment+0x8c>)
 80176f4:	481c      	ldr	r0, [pc, #112]	; (8017768 <tcp_output_control_segment+0x90>)
 80176f6:	f004 fac9 	bl	801bc8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80176fa:	683a      	ldr	r2, [r7, #0]
 80176fc:	6879      	ldr	r1, [r7, #4]
 80176fe:	68f8      	ldr	r0, [r7, #12]
 8017700:	f7fe fae8 	bl	8015cd4 <tcp_route>
 8017704:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017706:	693b      	ldr	r3, [r7, #16]
 8017708:	2b00      	cmp	r3, #0
 801770a:	d102      	bne.n	8017712 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801770c:	23fc      	movs	r3, #252	; 0xfc
 801770e:	75fb      	strb	r3, [r7, #23]
 8017710:	e01c      	b.n	801774c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017712:	68fb      	ldr	r3, [r7, #12]
 8017714:	2b00      	cmp	r3, #0
 8017716:	d006      	beq.n	8017726 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017718:	68fb      	ldr	r3, [r7, #12]
 801771a:	7adb      	ldrb	r3, [r3, #11]
 801771c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	7a9b      	ldrb	r3, [r3, #10]
 8017722:	757b      	strb	r3, [r7, #21]
 8017724:	e003      	b.n	801772e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017726:	23ff      	movs	r3, #255	; 0xff
 8017728:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801772a:	2300      	movs	r3, #0
 801772c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801772e:	7dba      	ldrb	r2, [r7, #22]
 8017730:	693b      	ldr	r3, [r7, #16]
 8017732:	9302      	str	r3, [sp, #8]
 8017734:	2306      	movs	r3, #6
 8017736:	9301      	str	r3, [sp, #4]
 8017738:	7d7b      	ldrb	r3, [r7, #21]
 801773a:	9300      	str	r3, [sp, #0]
 801773c:	4613      	mov	r3, r2
 801773e:	683a      	ldr	r2, [r7, #0]
 8017740:	6879      	ldr	r1, [r7, #4]
 8017742:	68b8      	ldr	r0, [r7, #8]
 8017744:	f002 fad0 	bl	8019ce8 <ip4_output_if>
 8017748:	4603      	mov	r3, r0
 801774a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801774c:	68b8      	ldr	r0, [r7, #8]
 801774e:	f7f9 ff6d 	bl	801162c <pbuf_free>
  return err;
 8017752:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017756:	4618      	mov	r0, r3
 8017758:	3718      	adds	r7, #24
 801775a:	46bd      	mov	sp, r7
 801775c:	bd80      	pop	{r7, pc}
 801775e:	bf00      	nop
 8017760:	080207d4 	.word	0x080207d4
 8017764:	08020f2c 	.word	0x08020f2c
 8017768:	08020828 	.word	0x08020828

0801776c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801776c:	b590      	push	{r4, r7, lr}
 801776e:	b08b      	sub	sp, #44	; 0x2c
 8017770:	af04      	add	r7, sp, #16
 8017772:	60f8      	str	r0, [r7, #12]
 8017774:	60b9      	str	r1, [r7, #8]
 8017776:	607a      	str	r2, [r7, #4]
 8017778:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801777a:	683b      	ldr	r3, [r7, #0]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d106      	bne.n	801778e <tcp_rst+0x22>
 8017780:	4b1f      	ldr	r3, [pc, #124]	; (8017800 <tcp_rst+0x94>)
 8017782:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017786:	491f      	ldr	r1, [pc, #124]	; (8017804 <tcp_rst+0x98>)
 8017788:	481f      	ldr	r0, [pc, #124]	; (8017808 <tcp_rst+0x9c>)
 801778a:	f004 fa7f 	bl	801bc8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017790:	2b00      	cmp	r3, #0
 8017792:	d106      	bne.n	80177a2 <tcp_rst+0x36>
 8017794:	4b1a      	ldr	r3, [pc, #104]	; (8017800 <tcp_rst+0x94>)
 8017796:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801779a:	491c      	ldr	r1, [pc, #112]	; (801780c <tcp_rst+0xa0>)
 801779c:	481a      	ldr	r0, [pc, #104]	; (8017808 <tcp_rst+0x9c>)
 801779e:	f004 fa75 	bl	801bc8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177a2:	2300      	movs	r3, #0
 80177a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80177a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80177aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80177ac:	7dfb      	ldrb	r3, [r7, #23]
 80177ae:	b29c      	uxth	r4, r3
 80177b0:	68b8      	ldr	r0, [r7, #8]
 80177b2:	f7f8 fb72 	bl	800fe9a <lwip_htonl>
 80177b6:	4602      	mov	r2, r0
 80177b8:	8abb      	ldrh	r3, [r7, #20]
 80177ba:	9303      	str	r3, [sp, #12]
 80177bc:	2314      	movs	r3, #20
 80177be:	9302      	str	r3, [sp, #8]
 80177c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80177c2:	9301      	str	r3, [sp, #4]
 80177c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80177c6:	9300      	str	r3, [sp, #0]
 80177c8:	4613      	mov	r3, r2
 80177ca:	2200      	movs	r2, #0
 80177cc:	4621      	mov	r1, r4
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7ff fe92 	bl	80174f8 <tcp_output_alloc_header_common>
 80177d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80177d6:	693b      	ldr	r3, [r7, #16]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d00c      	beq.n	80177f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177dc:	7dfb      	ldrb	r3, [r7, #23]
 80177de:	2200      	movs	r2, #0
 80177e0:	6939      	ldr	r1, [r7, #16]
 80177e2:	68f8      	ldr	r0, [r7, #12]
 80177e4:	f7ff ff38 	bl	8017658 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80177e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ea:	683a      	ldr	r2, [r7, #0]
 80177ec:	6939      	ldr	r1, [r7, #16]
 80177ee:	68f8      	ldr	r0, [r7, #12]
 80177f0:	f7ff ff72 	bl	80176d8 <tcp_output_control_segment>
 80177f4:	e000      	b.n	80177f8 <tcp_rst+0x8c>
    return;
 80177f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80177f8:	371c      	adds	r7, #28
 80177fa:	46bd      	mov	sp, r7
 80177fc:	bd90      	pop	{r4, r7, pc}
 80177fe:	bf00      	nop
 8017800:	080207d4 	.word	0x080207d4
 8017804:	08020f58 	.word	0x08020f58
 8017808:	08020828 	.word	0x08020828
 801780c:	08020f74 	.word	0x08020f74

08017810 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017810:	b590      	push	{r4, r7, lr}
 8017812:	b087      	sub	sp, #28
 8017814:	af00      	add	r7, sp, #0
 8017816:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017818:	2300      	movs	r3, #0
 801781a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801781c:	2300      	movs	r3, #0
 801781e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d106      	bne.n	8017834 <tcp_send_empty_ack+0x24>
 8017826:	4b28      	ldr	r3, [pc, #160]	; (80178c8 <tcp_send_empty_ack+0xb8>)
 8017828:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801782c:	4927      	ldr	r1, [pc, #156]	; (80178cc <tcp_send_empty_ack+0xbc>)
 801782e:	4828      	ldr	r0, [pc, #160]	; (80178d0 <tcp_send_empty_ack+0xc0>)
 8017830:	f004 fa2c 	bl	801bc8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017834:	7dfb      	ldrb	r3, [r7, #23]
 8017836:	009b      	lsls	r3, r3, #2
 8017838:	b2db      	uxtb	r3, r3
 801783a:	f003 0304 	and.w	r3, r3, #4
 801783e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017840:	7d7b      	ldrb	r3, [r7, #21]
 8017842:	b29c      	uxth	r4, r3
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017848:	4618      	mov	r0, r3
 801784a:	f7f8 fb26 	bl	800fe9a <lwip_htonl>
 801784e:	4603      	mov	r3, r0
 8017850:	2200      	movs	r2, #0
 8017852:	4621      	mov	r1, r4
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7ff fec1 	bl	80175dc <tcp_output_alloc_header>
 801785a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	2b00      	cmp	r3, #0
 8017860:	d109      	bne.n	8017876 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	8b5b      	ldrh	r3, [r3, #26]
 8017866:	f043 0303 	orr.w	r3, r3, #3
 801786a:	b29a      	uxth	r2, r3
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017870:	f06f 0301 	mvn.w	r3, #1
 8017874:	e023      	b.n	80178be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017876:	7dbb      	ldrb	r3, [r7, #22]
 8017878:	7dfa      	ldrb	r2, [r7, #23]
 801787a:	6939      	ldr	r1, [r7, #16]
 801787c:	6878      	ldr	r0, [r7, #4]
 801787e:	f7ff feeb 	bl	8017658 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017882:	687a      	ldr	r2, [r7, #4]
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	3304      	adds	r3, #4
 8017888:	6939      	ldr	r1, [r7, #16]
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	f7ff ff24 	bl	80176d8 <tcp_output_control_segment>
 8017890:	4603      	mov	r3, r0
 8017892:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017898:	2b00      	cmp	r3, #0
 801789a:	d007      	beq.n	80178ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	8b5b      	ldrh	r3, [r3, #26]
 80178a0:	f043 0303 	orr.w	r3, r3, #3
 80178a4:	b29a      	uxth	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	835a      	strh	r2, [r3, #26]
 80178aa:	e006      	b.n	80178ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	8b5b      	ldrh	r3, [r3, #26]
 80178b0:	f023 0303 	bic.w	r3, r3, #3
 80178b4:	b29a      	uxth	r2, r3
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80178ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	371c      	adds	r7, #28
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd90      	pop	{r4, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	080207d4 	.word	0x080207d4
 80178cc:	08020f90 	.word	0x08020f90
 80178d0:	08020828 	.word	0x08020828

080178d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80178d4:	b590      	push	{r4, r7, lr}
 80178d6:	b087      	sub	sp, #28
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178dc:	2300      	movs	r3, #0
 80178de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d106      	bne.n	80178f4 <tcp_keepalive+0x20>
 80178e6:	4b18      	ldr	r3, [pc, #96]	; (8017948 <tcp_keepalive+0x74>)
 80178e8:	f640 0224 	movw	r2, #2084	; 0x824
 80178ec:	4917      	ldr	r1, [pc, #92]	; (801794c <tcp_keepalive+0x78>)
 80178ee:	4818      	ldr	r0, [pc, #96]	; (8017950 <tcp_keepalive+0x7c>)
 80178f0:	f004 f9cc 	bl	801bc8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80178f4:	7dfb      	ldrb	r3, [r7, #23]
 80178f6:	b29c      	uxth	r4, r3
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178fc:	3b01      	subs	r3, #1
 80178fe:	4618      	mov	r0, r3
 8017900:	f7f8 facb 	bl	800fe9a <lwip_htonl>
 8017904:	4603      	mov	r3, r0
 8017906:	2200      	movs	r2, #0
 8017908:	4621      	mov	r1, r4
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff fe66 	bl	80175dc <tcp_output_alloc_header>
 8017910:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017912:	693b      	ldr	r3, [r7, #16]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d102      	bne.n	801791e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017918:	f04f 33ff 	mov.w	r3, #4294967295
 801791c:	e010      	b.n	8017940 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801791e:	7dfb      	ldrb	r3, [r7, #23]
 8017920:	2200      	movs	r2, #0
 8017922:	6939      	ldr	r1, [r7, #16]
 8017924:	6878      	ldr	r0, [r7, #4]
 8017926:	f7ff fe97 	bl	8017658 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801792a:	687a      	ldr	r2, [r7, #4]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	3304      	adds	r3, #4
 8017930:	6939      	ldr	r1, [r7, #16]
 8017932:	6878      	ldr	r0, [r7, #4]
 8017934:	f7ff fed0 	bl	80176d8 <tcp_output_control_segment>
 8017938:	4603      	mov	r3, r0
 801793a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801793c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017940:	4618      	mov	r0, r3
 8017942:	371c      	adds	r7, #28
 8017944:	46bd      	mov	sp, r7
 8017946:	bd90      	pop	{r4, r7, pc}
 8017948:	080207d4 	.word	0x080207d4
 801794c:	08020fb0 	.word	0x08020fb0
 8017950:	08020828 	.word	0x08020828

08017954 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017954:	b590      	push	{r4, r7, lr}
 8017956:	b08b      	sub	sp, #44	; 0x2c
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801795c:	2300      	movs	r3, #0
 801795e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d106      	bne.n	8017976 <tcp_zero_window_probe+0x22>
 8017968:	4b4c      	ldr	r3, [pc, #304]	; (8017a9c <tcp_zero_window_probe+0x148>)
 801796a:	f640 024f 	movw	r2, #2127	; 0x84f
 801796e:	494c      	ldr	r1, [pc, #304]	; (8017aa0 <tcp_zero_window_probe+0x14c>)
 8017970:	484c      	ldr	r0, [pc, #304]	; (8017aa4 <tcp_zero_window_probe+0x150>)
 8017972:	f004 f98b 	bl	801bc8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801797a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801797c:	6a3b      	ldr	r3, [r7, #32]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d101      	bne.n	8017986 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017982:	2300      	movs	r3, #0
 8017984:	e086      	b.n	8017a94 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801798c:	2bff      	cmp	r3, #255	; 0xff
 801798e:	d007      	beq.n	80179a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017996:	3301      	adds	r3, #1
 8017998:	b2da      	uxtb	r2, r3
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80179a0:	6a3b      	ldr	r3, [r7, #32]
 80179a2:	68db      	ldr	r3, [r3, #12]
 80179a4:	899b      	ldrh	r3, [r3, #12]
 80179a6:	b29b      	uxth	r3, r3
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7f8 fa61 	bl	800fe70 <lwip_htons>
 80179ae:	4603      	mov	r3, r0
 80179b0:	b2db      	uxtb	r3, r3
 80179b2:	f003 0301 	and.w	r3, r3, #1
 80179b6:	2b00      	cmp	r3, #0
 80179b8:	d005      	beq.n	80179c6 <tcp_zero_window_probe+0x72>
 80179ba:	6a3b      	ldr	r3, [r7, #32]
 80179bc:	891b      	ldrh	r3, [r3, #8]
 80179be:	2b00      	cmp	r3, #0
 80179c0:	d101      	bne.n	80179c6 <tcp_zero_window_probe+0x72>
 80179c2:	2301      	movs	r3, #1
 80179c4:	e000      	b.n	80179c8 <tcp_zero_window_probe+0x74>
 80179c6:	2300      	movs	r3, #0
 80179c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80179ca:	7ffb      	ldrb	r3, [r7, #31]
 80179cc:	2b00      	cmp	r3, #0
 80179ce:	bf0c      	ite	eq
 80179d0:	2301      	moveq	r3, #1
 80179d2:	2300      	movne	r3, #0
 80179d4:	b2db      	uxtb	r3, r3
 80179d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80179d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179dc:	b299      	uxth	r1, r3
 80179de:	6a3b      	ldr	r3, [r7, #32]
 80179e0:	68db      	ldr	r3, [r3, #12]
 80179e2:	685b      	ldr	r3, [r3, #4]
 80179e4:	8bba      	ldrh	r2, [r7, #28]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7ff fdf8 	bl	80175dc <tcp_output_alloc_header>
 80179ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80179ee:	69bb      	ldr	r3, [r7, #24]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d102      	bne.n	80179fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80179f4:	f04f 33ff 	mov.w	r3, #4294967295
 80179f8:	e04c      	b.n	8017a94 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80179fa:	69bb      	ldr	r3, [r7, #24]
 80179fc:	685b      	ldr	r3, [r3, #4]
 80179fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a00:	7ffb      	ldrb	r3, [r7, #31]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d011      	beq.n	8017a2a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a06:	697b      	ldr	r3, [r7, #20]
 8017a08:	899b      	ldrh	r3, [r3, #12]
 8017a0a:	b29b      	uxth	r3, r3
 8017a0c:	b21b      	sxth	r3, r3
 8017a0e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a12:	b21c      	sxth	r4, r3
 8017a14:	2011      	movs	r0, #17
 8017a16:	f7f8 fa2b 	bl	800fe70 <lwip_htons>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	b21b      	sxth	r3, r3
 8017a1e:	4323      	orrs	r3, r4
 8017a20:	b21b      	sxth	r3, r3
 8017a22:	b29a      	uxth	r2, r3
 8017a24:	697b      	ldr	r3, [r7, #20]
 8017a26:	819a      	strh	r2, [r3, #12]
 8017a28:	e010      	b.n	8017a4c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a2a:	69bb      	ldr	r3, [r7, #24]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	3314      	adds	r3, #20
 8017a30:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a32:	6a3b      	ldr	r3, [r7, #32]
 8017a34:	6858      	ldr	r0, [r3, #4]
 8017a36:	6a3b      	ldr	r3, [r7, #32]
 8017a38:	685b      	ldr	r3, [r3, #4]
 8017a3a:	891a      	ldrh	r2, [r3, #8]
 8017a3c:	6a3b      	ldr	r3, [r7, #32]
 8017a3e:	891b      	ldrh	r3, [r3, #8]
 8017a40:	1ad3      	subs	r3, r2, r3
 8017a42:	b29b      	uxth	r3, r3
 8017a44:	2201      	movs	r2, #1
 8017a46:	6939      	ldr	r1, [r7, #16]
 8017a48:	f7f9 fff6 	bl	8011a38 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a4c:	6a3b      	ldr	r3, [r7, #32]
 8017a4e:	68db      	ldr	r3, [r3, #12]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	4618      	mov	r0, r3
 8017a54:	f7f8 fa21 	bl	800fe9a <lwip_htonl>
 8017a58:	4603      	mov	r3, r0
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a5e:	687b      	ldr	r3, [r7, #4]
 8017a60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a62:	68fb      	ldr	r3, [r7, #12]
 8017a64:	1ad3      	subs	r3, r2, r3
 8017a66:	2b00      	cmp	r3, #0
 8017a68:	da02      	bge.n	8017a70 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a74:	2200      	movs	r2, #0
 8017a76:	69b9      	ldr	r1, [r7, #24]
 8017a78:	6878      	ldr	r0, [r7, #4]
 8017a7a:	f7ff fded 	bl	8017658 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a7e:	687a      	ldr	r2, [r7, #4]
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	3304      	adds	r3, #4
 8017a84:	69b9      	ldr	r1, [r7, #24]
 8017a86:	6878      	ldr	r0, [r7, #4]
 8017a88:	f7ff fe26 	bl	80176d8 <tcp_output_control_segment>
 8017a8c:	4603      	mov	r3, r0
 8017a8e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017a90:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017a94:	4618      	mov	r0, r3
 8017a96:	372c      	adds	r7, #44	; 0x2c
 8017a98:	46bd      	mov	sp, r7
 8017a9a:	bd90      	pop	{r4, r7, pc}
 8017a9c:	080207d4 	.word	0x080207d4
 8017aa0:	08020fcc 	.word	0x08020fcc
 8017aa4:	08020828 	.word	0x08020828

08017aa8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017aa8:	b580      	push	{r7, lr}
 8017aaa:	b082      	sub	sp, #8
 8017aac:	af00      	add	r7, sp, #0
 8017aae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017ab0:	f7fa f8b0 	bl	8011c14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017ab4:	4b0a      	ldr	r3, [pc, #40]	; (8017ae0 <tcpip_tcp_timer+0x38>)
 8017ab6:	681b      	ldr	r3, [r3, #0]
 8017ab8:	2b00      	cmp	r3, #0
 8017aba:	d103      	bne.n	8017ac4 <tcpip_tcp_timer+0x1c>
 8017abc:	4b09      	ldr	r3, [pc, #36]	; (8017ae4 <tcpip_tcp_timer+0x3c>)
 8017abe:	681b      	ldr	r3, [r3, #0]
 8017ac0:	2b00      	cmp	r3, #0
 8017ac2:	d005      	beq.n	8017ad0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	4908      	ldr	r1, [pc, #32]	; (8017ae8 <tcpip_tcp_timer+0x40>)
 8017ac8:	20fa      	movs	r0, #250	; 0xfa
 8017aca:	f000 f8f3 	bl	8017cb4 <sys_timeout>
 8017ace:	e003      	b.n	8017ad8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ad0:	4b06      	ldr	r3, [pc, #24]	; (8017aec <tcpip_tcp_timer+0x44>)
 8017ad2:	2200      	movs	r2, #0
 8017ad4:	601a      	str	r2, [r3, #0]
  }
}
 8017ad6:	bf00      	nop
 8017ad8:	bf00      	nop
 8017ada:	3708      	adds	r7, #8
 8017adc:	46bd      	mov	sp, r7
 8017ade:	bd80      	pop	{r7, pc}
 8017ae0:	2000d7bc 	.word	0x2000d7bc
 8017ae4:	2000d7cc 	.word	0x2000d7cc
 8017ae8:	08017aa9 	.word	0x08017aa9
 8017aec:	20004830 	.word	0x20004830

08017af0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017af0:	b580      	push	{r7, lr}
 8017af2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017af4:	4b0a      	ldr	r3, [pc, #40]	; (8017b20 <tcp_timer_needed+0x30>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d10f      	bne.n	8017b1c <tcp_timer_needed+0x2c>
 8017afc:	4b09      	ldr	r3, [pc, #36]	; (8017b24 <tcp_timer_needed+0x34>)
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d103      	bne.n	8017b0c <tcp_timer_needed+0x1c>
 8017b04:	4b08      	ldr	r3, [pc, #32]	; (8017b28 <tcp_timer_needed+0x38>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d007      	beq.n	8017b1c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b0c:	4b04      	ldr	r3, [pc, #16]	; (8017b20 <tcp_timer_needed+0x30>)
 8017b0e:	2201      	movs	r2, #1
 8017b10:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b12:	2200      	movs	r2, #0
 8017b14:	4905      	ldr	r1, [pc, #20]	; (8017b2c <tcp_timer_needed+0x3c>)
 8017b16:	20fa      	movs	r0, #250	; 0xfa
 8017b18:	f000 f8cc 	bl	8017cb4 <sys_timeout>
  }
}
 8017b1c:	bf00      	nop
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	20004830 	.word	0x20004830
 8017b24:	2000d7bc 	.word	0x2000d7bc
 8017b28:	2000d7cc 	.word	0x2000d7cc
 8017b2c:	08017aa9 	.word	0x08017aa9

08017b30 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b30:	b580      	push	{r7, lr}
 8017b32:	b086      	sub	sp, #24
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	60f8      	str	r0, [r7, #12]
 8017b38:	60b9      	str	r1, [r7, #8]
 8017b3a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b3c:	200a      	movs	r0, #10
 8017b3e:	f7f8 fe4d 	bl	80107dc <memp_malloc>
 8017b42:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b44:	693b      	ldr	r3, [r7, #16]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d109      	bne.n	8017b5e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b4a:	693b      	ldr	r3, [r7, #16]
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d151      	bne.n	8017bf4 <sys_timeout_abs+0xc4>
 8017b50:	4b2a      	ldr	r3, [pc, #168]	; (8017bfc <sys_timeout_abs+0xcc>)
 8017b52:	22be      	movs	r2, #190	; 0xbe
 8017b54:	492a      	ldr	r1, [pc, #168]	; (8017c00 <sys_timeout_abs+0xd0>)
 8017b56:	482b      	ldr	r0, [pc, #172]	; (8017c04 <sys_timeout_abs+0xd4>)
 8017b58:	f004 f898 	bl	801bc8c <iprintf>
    return;
 8017b5c:	e04a      	b.n	8017bf4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b5e:	693b      	ldr	r3, [r7, #16]
 8017b60:	2200      	movs	r2, #0
 8017b62:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b64:	693b      	ldr	r3, [r7, #16]
 8017b66:	68ba      	ldr	r2, [r7, #8]
 8017b68:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	687a      	ldr	r2, [r7, #4]
 8017b6e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b70:	693b      	ldr	r3, [r7, #16]
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b76:	4b24      	ldr	r3, [pc, #144]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b78:	681b      	ldr	r3, [r3, #0]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d103      	bne.n	8017b86 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b7e:	4a22      	ldr	r2, [pc, #136]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	6013      	str	r3, [r2, #0]
    return;
 8017b84:	e037      	b.n	8017bf6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b86:	693b      	ldr	r3, [r7, #16]
 8017b88:	685a      	ldr	r2, [r3, #4]
 8017b8a:	4b1f      	ldr	r3, [pc, #124]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017b8c:	681b      	ldr	r3, [r3, #0]
 8017b8e:	685b      	ldr	r3, [r3, #4]
 8017b90:	1ad3      	subs	r3, r2, r3
 8017b92:	0fdb      	lsrs	r3, r3, #31
 8017b94:	f003 0301 	and.w	r3, r3, #1
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d007      	beq.n	8017bae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017b9e:	4b1a      	ldr	r3, [pc, #104]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017ba0:	681a      	ldr	r2, [r3, #0]
 8017ba2:	693b      	ldr	r3, [r7, #16]
 8017ba4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017ba6:	4a18      	ldr	r2, [pc, #96]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017ba8:	693b      	ldr	r3, [r7, #16]
 8017baa:	6013      	str	r3, [r2, #0]
 8017bac:	e023      	b.n	8017bf6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bae:	4b16      	ldr	r3, [pc, #88]	; (8017c08 <sys_timeout_abs+0xd8>)
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	617b      	str	r3, [r7, #20]
 8017bb4:	e01a      	b.n	8017bec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017bb6:	697b      	ldr	r3, [r7, #20]
 8017bb8:	681b      	ldr	r3, [r3, #0]
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d00b      	beq.n	8017bd6 <sys_timeout_abs+0xa6>
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	685a      	ldr	r2, [r3, #4]
 8017bc2:	697b      	ldr	r3, [r7, #20]
 8017bc4:	681b      	ldr	r3, [r3, #0]
 8017bc6:	685b      	ldr	r3, [r3, #4]
 8017bc8:	1ad3      	subs	r3, r2, r3
 8017bca:	0fdb      	lsrs	r3, r3, #31
 8017bcc:	f003 0301 	and.w	r3, r3, #1
 8017bd0:	b2db      	uxtb	r3, r3
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d007      	beq.n	8017be6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017bd6:	697b      	ldr	r3, [r7, #20]
 8017bd8:	681a      	ldr	r2, [r3, #0]
 8017bda:	693b      	ldr	r3, [r7, #16]
 8017bdc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017bde:	697b      	ldr	r3, [r7, #20]
 8017be0:	693a      	ldr	r2, [r7, #16]
 8017be2:	601a      	str	r2, [r3, #0]
        break;
 8017be4:	e007      	b.n	8017bf6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	681b      	ldr	r3, [r3, #0]
 8017bea:	617b      	str	r3, [r7, #20]
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d1e1      	bne.n	8017bb6 <sys_timeout_abs+0x86>
 8017bf2:	e000      	b.n	8017bf6 <sys_timeout_abs+0xc6>
    return;
 8017bf4:	bf00      	nop
      }
    }
  }
}
 8017bf6:	3718      	adds	r7, #24
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	08020ff0 	.word	0x08020ff0
 8017c00:	08021024 	.word	0x08021024
 8017c04:	08021064 	.word	0x08021064
 8017c08:	20004828 	.word	0x20004828

08017c0c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b086      	sub	sp, #24
 8017c10:	af00      	add	r7, sp, #0
 8017c12:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c18:	697b      	ldr	r3, [r7, #20]
 8017c1a:	685b      	ldr	r3, [r3, #4]
 8017c1c:	4798      	blx	r3

  now = sys_now();
 8017c1e:	f7f0 ff1b 	bl	8008a58 <sys_now>
 8017c22:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c24:	697b      	ldr	r3, [r7, #20]
 8017c26:	681a      	ldr	r2, [r3, #0]
 8017c28:	4b0f      	ldr	r3, [pc, #60]	; (8017c68 <lwip_cyclic_timer+0x5c>)
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	4413      	add	r3, r2
 8017c2e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c30:	68fa      	ldr	r2, [r7, #12]
 8017c32:	693b      	ldr	r3, [r7, #16]
 8017c34:	1ad3      	subs	r3, r2, r3
 8017c36:	0fdb      	lsrs	r3, r3, #31
 8017c38:	f003 0301 	and.w	r3, r3, #1
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d009      	beq.n	8017c56 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	681a      	ldr	r2, [r3, #0]
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	4413      	add	r3, r2
 8017c4a:	687a      	ldr	r2, [r7, #4]
 8017c4c:	4907      	ldr	r1, [pc, #28]	; (8017c6c <lwip_cyclic_timer+0x60>)
 8017c4e:	4618      	mov	r0, r3
 8017c50:	f7ff ff6e 	bl	8017b30 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c54:	e004      	b.n	8017c60 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c56:	687a      	ldr	r2, [r7, #4]
 8017c58:	4904      	ldr	r1, [pc, #16]	; (8017c6c <lwip_cyclic_timer+0x60>)
 8017c5a:	68f8      	ldr	r0, [r7, #12]
 8017c5c:	f7ff ff68 	bl	8017b30 <sys_timeout_abs>
}
 8017c60:	bf00      	nop
 8017c62:	3718      	adds	r7, #24
 8017c64:	46bd      	mov	sp, r7
 8017c66:	bd80      	pop	{r7, pc}
 8017c68:	2000482c 	.word	0x2000482c
 8017c6c:	08017c0d 	.word	0x08017c0d

08017c70 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b082      	sub	sp, #8
 8017c74:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c76:	2301      	movs	r3, #1
 8017c78:	607b      	str	r3, [r7, #4]
 8017c7a:	e00e      	b.n	8017c9a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c7c:	4a0b      	ldr	r2, [pc, #44]	; (8017cac <sys_timeouts_init+0x3c>)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	4a08      	ldr	r2, [pc, #32]	; (8017cac <sys_timeouts_init+0x3c>)
 8017c8a:	4413      	add	r3, r2
 8017c8c:	461a      	mov	r2, r3
 8017c8e:	4908      	ldr	r1, [pc, #32]	; (8017cb0 <sys_timeouts_init+0x40>)
 8017c90:	f000 f810 	bl	8017cb4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	3301      	adds	r3, #1
 8017c98:	607b      	str	r3, [r7, #4]
 8017c9a:	687b      	ldr	r3, [r7, #4]
 8017c9c:	2b02      	cmp	r3, #2
 8017c9e:	d9ed      	bls.n	8017c7c <sys_timeouts_init+0xc>
  }
}
 8017ca0:	bf00      	nop
 8017ca2:	bf00      	nop
 8017ca4:	3708      	adds	r7, #8
 8017ca6:	46bd      	mov	sp, r7
 8017ca8:	bd80      	pop	{r7, pc}
 8017caa:	bf00      	nop
 8017cac:	08021cd0 	.word	0x08021cd0
 8017cb0:	08017c0d 	.word	0x08017c0d

08017cb4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017cb4:	b580      	push	{r7, lr}
 8017cb6:	b086      	sub	sp, #24
 8017cb8:	af00      	add	r7, sp, #0
 8017cba:	60f8      	str	r0, [r7, #12]
 8017cbc:	60b9      	str	r1, [r7, #8]
 8017cbe:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017cc0:	68fb      	ldr	r3, [r7, #12]
 8017cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cc6:	d306      	bcc.n	8017cd6 <sys_timeout+0x22>
 8017cc8:	4b0a      	ldr	r3, [pc, #40]	; (8017cf4 <sys_timeout+0x40>)
 8017cca:	f240 1229 	movw	r2, #297	; 0x129
 8017cce:	490a      	ldr	r1, [pc, #40]	; (8017cf8 <sys_timeout+0x44>)
 8017cd0:	480a      	ldr	r0, [pc, #40]	; (8017cfc <sys_timeout+0x48>)
 8017cd2:	f003 ffdb 	bl	801bc8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017cd6:	f7f0 febf 	bl	8008a58 <sys_now>
 8017cda:	4602      	mov	r2, r0
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	4413      	add	r3, r2
 8017ce0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017ce2:	687a      	ldr	r2, [r7, #4]
 8017ce4:	68b9      	ldr	r1, [r7, #8]
 8017ce6:	6978      	ldr	r0, [r7, #20]
 8017ce8:	f7ff ff22 	bl	8017b30 <sys_timeout_abs>
#endif
}
 8017cec:	bf00      	nop
 8017cee:	3718      	adds	r7, #24
 8017cf0:	46bd      	mov	sp, r7
 8017cf2:	bd80      	pop	{r7, pc}
 8017cf4:	08020ff0 	.word	0x08020ff0
 8017cf8:	0802108c 	.word	0x0802108c
 8017cfc:	08021064 	.word	0x08021064

08017d00 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017d00:	b580      	push	{r7, lr}
 8017d02:	b084      	sub	sp, #16
 8017d04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017d06:	f7f0 fea7 	bl	8008a58 <sys_now>
 8017d0a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017d0c:	4b17      	ldr	r3, [pc, #92]	; (8017d6c <sys_check_timeouts+0x6c>)
 8017d0e:	681b      	ldr	r3, [r3, #0]
 8017d10:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017d12:	68bb      	ldr	r3, [r7, #8]
 8017d14:	2b00      	cmp	r3, #0
 8017d16:	d022      	beq.n	8017d5e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d18:	68bb      	ldr	r3, [r7, #8]
 8017d1a:	685b      	ldr	r3, [r3, #4]
 8017d1c:	68fa      	ldr	r2, [r7, #12]
 8017d1e:	1ad3      	subs	r3, r2, r3
 8017d20:	0fdb      	lsrs	r3, r3, #31
 8017d22:	f003 0301 	and.w	r3, r3, #1
 8017d26:	b2db      	uxtb	r3, r3
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	d11a      	bne.n	8017d62 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017d2c:	68bb      	ldr	r3, [r7, #8]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a0e      	ldr	r2, [pc, #56]	; (8017d6c <sys_check_timeouts+0x6c>)
 8017d32:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d34:	68bb      	ldr	r3, [r7, #8]
 8017d36:	689b      	ldr	r3, [r3, #8]
 8017d38:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d3a:	68bb      	ldr	r3, [r7, #8]
 8017d3c:	68db      	ldr	r3, [r3, #12]
 8017d3e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	685b      	ldr	r3, [r3, #4]
 8017d44:	4a0a      	ldr	r2, [pc, #40]	; (8017d70 <sys_check_timeouts+0x70>)
 8017d46:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d48:	68b9      	ldr	r1, [r7, #8]
 8017d4a:	200a      	movs	r0, #10
 8017d4c:	f7f8 fd98 	bl	8010880 <memp_free>
    if (handler != NULL) {
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	2b00      	cmp	r3, #0
 8017d54:	d0da      	beq.n	8017d0c <sys_check_timeouts+0xc>
      handler(arg);
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	6838      	ldr	r0, [r7, #0]
 8017d5a:	4798      	blx	r3
  do {
 8017d5c:	e7d6      	b.n	8017d0c <sys_check_timeouts+0xc>
      return;
 8017d5e:	bf00      	nop
 8017d60:	e000      	b.n	8017d64 <sys_check_timeouts+0x64>
      return;
 8017d62:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d64:	3710      	adds	r7, #16
 8017d66:	46bd      	mov	sp, r7
 8017d68:	bd80      	pop	{r7, pc}
 8017d6a:	bf00      	nop
 8017d6c:	20004828 	.word	0x20004828
 8017d70:	2000482c 	.word	0x2000482c

08017d74 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017d74:	b580      	push	{r7, lr}
 8017d76:	b082      	sub	sp, #8
 8017d78:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017d7a:	4b16      	ldr	r3, [pc, #88]	; (8017dd4 <sys_timeouts_sleeptime+0x60>)
 8017d7c:	681b      	ldr	r3, [r3, #0]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d102      	bne.n	8017d88 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017d82:	f04f 33ff 	mov.w	r3, #4294967295
 8017d86:	e020      	b.n	8017dca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017d88:	f7f0 fe66 	bl	8008a58 <sys_now>
 8017d8c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017d8e:	4b11      	ldr	r3, [pc, #68]	; (8017dd4 <sys_timeouts_sleeptime+0x60>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	685a      	ldr	r2, [r3, #4]
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	1ad3      	subs	r3, r2, r3
 8017d98:	0fdb      	lsrs	r3, r3, #31
 8017d9a:	f003 0301 	and.w	r3, r3, #1
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d001      	beq.n	8017da8 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017da4:	2300      	movs	r3, #0
 8017da6:	e010      	b.n	8017dca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017da8:	4b0a      	ldr	r3, [pc, #40]	; (8017dd4 <sys_timeouts_sleeptime+0x60>)
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	685a      	ldr	r2, [r3, #4]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	1ad3      	subs	r3, r2, r3
 8017db2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	da06      	bge.n	8017dc8 <sys_timeouts_sleeptime+0x54>
 8017dba:	4b07      	ldr	r3, [pc, #28]	; (8017dd8 <sys_timeouts_sleeptime+0x64>)
 8017dbc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017dc0:	4906      	ldr	r1, [pc, #24]	; (8017ddc <sys_timeouts_sleeptime+0x68>)
 8017dc2:	4807      	ldr	r0, [pc, #28]	; (8017de0 <sys_timeouts_sleeptime+0x6c>)
 8017dc4:	f003 ff62 	bl	801bc8c <iprintf>
    return ret;
 8017dc8:	683b      	ldr	r3, [r7, #0]
  }
}
 8017dca:	4618      	mov	r0, r3
 8017dcc:	3708      	adds	r7, #8
 8017dce:	46bd      	mov	sp, r7
 8017dd0:	bd80      	pop	{r7, pc}
 8017dd2:	bf00      	nop
 8017dd4:	20004828 	.word	0x20004828
 8017dd8:	08020ff0 	.word	0x08020ff0
 8017ddc:	080210c4 	.word	0x080210c4
 8017de0:	08021064 	.word	0x08021064

08017de4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017de4:	b580      	push	{r7, lr}
 8017de6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017de8:	f003 ffde 	bl	801bda8 <rand>
 8017dec:	4603      	mov	r3, r0
 8017dee:	b29b      	uxth	r3, r3
 8017df0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017df4:	b29b      	uxth	r3, r3
 8017df6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017dfa:	b29a      	uxth	r2, r3
 8017dfc:	4b01      	ldr	r3, [pc, #4]	; (8017e04 <udp_init+0x20>)
 8017dfe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017e00:	bf00      	nop
 8017e02:	bd80      	pop	{r7, pc}
 8017e04:	20000018 	.word	0x20000018

08017e08 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017e08:	b480      	push	{r7}
 8017e0a:	b083      	sub	sp, #12
 8017e0c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017e0e:	2300      	movs	r3, #0
 8017e10:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017e12:	4b17      	ldr	r3, [pc, #92]	; (8017e70 <udp_new_port+0x68>)
 8017e14:	881b      	ldrh	r3, [r3, #0]
 8017e16:	1c5a      	adds	r2, r3, #1
 8017e18:	b291      	uxth	r1, r2
 8017e1a:	4a15      	ldr	r2, [pc, #84]	; (8017e70 <udp_new_port+0x68>)
 8017e1c:	8011      	strh	r1, [r2, #0]
 8017e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d103      	bne.n	8017e2e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017e26:	4b12      	ldr	r3, [pc, #72]	; (8017e70 <udp_new_port+0x68>)
 8017e28:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017e2c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e2e:	4b11      	ldr	r3, [pc, #68]	; (8017e74 <udp_new_port+0x6c>)
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	603b      	str	r3, [r7, #0]
 8017e34:	e011      	b.n	8017e5a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017e36:	683b      	ldr	r3, [r7, #0]
 8017e38:	8a5a      	ldrh	r2, [r3, #18]
 8017e3a:	4b0d      	ldr	r3, [pc, #52]	; (8017e70 <udp_new_port+0x68>)
 8017e3c:	881b      	ldrh	r3, [r3, #0]
 8017e3e:	429a      	cmp	r2, r3
 8017e40:	d108      	bne.n	8017e54 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017e42:	88fb      	ldrh	r3, [r7, #6]
 8017e44:	3301      	adds	r3, #1
 8017e46:	80fb      	strh	r3, [r7, #6]
 8017e48:	88fb      	ldrh	r3, [r7, #6]
 8017e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017e4e:	d3e0      	bcc.n	8017e12 <udp_new_port+0xa>
        return 0;
 8017e50:	2300      	movs	r3, #0
 8017e52:	e007      	b.n	8017e64 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017e54:	683b      	ldr	r3, [r7, #0]
 8017e56:	68db      	ldr	r3, [r3, #12]
 8017e58:	603b      	str	r3, [r7, #0]
 8017e5a:	683b      	ldr	r3, [r7, #0]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d1ea      	bne.n	8017e36 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017e60:	4b03      	ldr	r3, [pc, #12]	; (8017e70 <udp_new_port+0x68>)
 8017e62:	881b      	ldrh	r3, [r3, #0]
}
 8017e64:	4618      	mov	r0, r3
 8017e66:	370c      	adds	r7, #12
 8017e68:	46bd      	mov	sp, r7
 8017e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6e:	4770      	bx	lr
 8017e70:	20000018 	.word	0x20000018
 8017e74:	2000d7d4 	.word	0x2000d7d4

08017e78 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017e78:	b580      	push	{r7, lr}
 8017e7a:	b084      	sub	sp, #16
 8017e7c:	af00      	add	r7, sp, #0
 8017e7e:	60f8      	str	r0, [r7, #12]
 8017e80:	60b9      	str	r1, [r7, #8]
 8017e82:	4613      	mov	r3, r2
 8017e84:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d105      	bne.n	8017e98 <udp_input_local_match+0x20>
 8017e8c:	4b27      	ldr	r3, [pc, #156]	; (8017f2c <udp_input_local_match+0xb4>)
 8017e8e:	2287      	movs	r2, #135	; 0x87
 8017e90:	4927      	ldr	r1, [pc, #156]	; (8017f30 <udp_input_local_match+0xb8>)
 8017e92:	4828      	ldr	r0, [pc, #160]	; (8017f34 <udp_input_local_match+0xbc>)
 8017e94:	f003 fefa 	bl	801bc8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e98:	68bb      	ldr	r3, [r7, #8]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d105      	bne.n	8017eaa <udp_input_local_match+0x32>
 8017e9e:	4b23      	ldr	r3, [pc, #140]	; (8017f2c <udp_input_local_match+0xb4>)
 8017ea0:	2288      	movs	r2, #136	; 0x88
 8017ea2:	4925      	ldr	r1, [pc, #148]	; (8017f38 <udp_input_local_match+0xc0>)
 8017ea4:	4823      	ldr	r0, [pc, #140]	; (8017f34 <udp_input_local_match+0xbc>)
 8017ea6:	f003 fef1 	bl	801bc8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	7a1b      	ldrb	r3, [r3, #8]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d00b      	beq.n	8017eca <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	7a1a      	ldrb	r2, [r3, #8]
 8017eb6:	4b21      	ldr	r3, [pc, #132]	; (8017f3c <udp_input_local_match+0xc4>)
 8017eb8:	685b      	ldr	r3, [r3, #4]
 8017eba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017ebe:	3301      	adds	r3, #1
 8017ec0:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017ec2:	429a      	cmp	r2, r3
 8017ec4:	d001      	beq.n	8017eca <udp_input_local_match+0x52>
    return 0;
 8017ec6:	2300      	movs	r3, #0
 8017ec8:	e02b      	b.n	8017f22 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017eca:	79fb      	ldrb	r3, [r7, #7]
 8017ecc:	2b00      	cmp	r3, #0
 8017ece:	d018      	beq.n	8017f02 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d013      	beq.n	8017efe <udp_input_local_match+0x86>
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	2b00      	cmp	r3, #0
 8017edc:	d00f      	beq.n	8017efe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ede:	4b17      	ldr	r3, [pc, #92]	; (8017f3c <udp_input_local_match+0xc4>)
 8017ee0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ee6:	d00a      	beq.n	8017efe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017ee8:	68fb      	ldr	r3, [r7, #12]
 8017eea:	681a      	ldr	r2, [r3, #0]
 8017eec:	4b13      	ldr	r3, [pc, #76]	; (8017f3c <udp_input_local_match+0xc4>)
 8017eee:	695b      	ldr	r3, [r3, #20]
 8017ef0:	405a      	eors	r2, r3
 8017ef2:	68bb      	ldr	r3, [r7, #8]
 8017ef4:	3308      	adds	r3, #8
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d110      	bne.n	8017f20 <udp_input_local_match+0xa8>
          return 1;
 8017efe:	2301      	movs	r3, #1
 8017f00:	e00f      	b.n	8017f22 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d009      	beq.n	8017f1c <udp_input_local_match+0xa4>
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	d005      	beq.n	8017f1c <udp_input_local_match+0xa4>
 8017f10:	68fb      	ldr	r3, [r7, #12]
 8017f12:	681a      	ldr	r2, [r3, #0]
 8017f14:	4b09      	ldr	r3, [pc, #36]	; (8017f3c <udp_input_local_match+0xc4>)
 8017f16:	695b      	ldr	r3, [r3, #20]
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	d101      	bne.n	8017f20 <udp_input_local_match+0xa8>
        return 1;
 8017f1c:	2301      	movs	r3, #1
 8017f1e:	e000      	b.n	8017f22 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017f20:	2300      	movs	r3, #0
}
 8017f22:	4618      	mov	r0, r3
 8017f24:	3710      	adds	r7, #16
 8017f26:	46bd      	mov	sp, r7
 8017f28:	bd80      	pop	{r7, pc}
 8017f2a:	bf00      	nop
 8017f2c:	080210d8 	.word	0x080210d8
 8017f30:	08021108 	.word	0x08021108
 8017f34:	0802112c 	.word	0x0802112c
 8017f38:	08021154 	.word	0x08021154
 8017f3c:	2000a0a8 	.word	0x2000a0a8

08017f40 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017f40:	b590      	push	{r4, r7, lr}
 8017f42:	b08d      	sub	sp, #52	; 0x34
 8017f44:	af02      	add	r7, sp, #8
 8017f46:	6078      	str	r0, [r7, #4]
 8017f48:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017f4a:	2300      	movs	r3, #0
 8017f4c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d105      	bne.n	8017f60 <udp_input+0x20>
 8017f54:	4b7c      	ldr	r3, [pc, #496]	; (8018148 <udp_input+0x208>)
 8017f56:	22cf      	movs	r2, #207	; 0xcf
 8017f58:	497c      	ldr	r1, [pc, #496]	; (801814c <udp_input+0x20c>)
 8017f5a:	487d      	ldr	r0, [pc, #500]	; (8018150 <udp_input+0x210>)
 8017f5c:	f003 fe96 	bl	801bc8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d105      	bne.n	8017f72 <udp_input+0x32>
 8017f66:	4b78      	ldr	r3, [pc, #480]	; (8018148 <udp_input+0x208>)
 8017f68:	22d0      	movs	r2, #208	; 0xd0
 8017f6a:	497a      	ldr	r1, [pc, #488]	; (8018154 <udp_input+0x214>)
 8017f6c:	4878      	ldr	r0, [pc, #480]	; (8018150 <udp_input+0x210>)
 8017f6e:	f003 fe8d 	bl	801bc8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	895b      	ldrh	r3, [r3, #10]
 8017f76:	2b07      	cmp	r3, #7
 8017f78:	d803      	bhi.n	8017f82 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017f7a:	6878      	ldr	r0, [r7, #4]
 8017f7c:	f7f9 fb56 	bl	801162c <pbuf_free>
    goto end;
 8017f80:	e0de      	b.n	8018140 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	685b      	ldr	r3, [r3, #4]
 8017f86:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f88:	4b73      	ldr	r3, [pc, #460]	; (8018158 <udp_input+0x218>)
 8017f8a:	695b      	ldr	r3, [r3, #20]
 8017f8c:	4a72      	ldr	r2, [pc, #456]	; (8018158 <udp_input+0x218>)
 8017f8e:	6812      	ldr	r2, [r2, #0]
 8017f90:	4611      	mov	r1, r2
 8017f92:	4618      	mov	r0, r3
 8017f94:	f001 ff80 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8017f98:	4603      	mov	r3, r0
 8017f9a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f9c:	697b      	ldr	r3, [r7, #20]
 8017f9e:	881b      	ldrh	r3, [r3, #0]
 8017fa0:	b29b      	uxth	r3, r3
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	f7f7 ff64 	bl	800fe70 <lwip_htons>
 8017fa8:	4603      	mov	r3, r0
 8017faa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017fac:	697b      	ldr	r3, [r7, #20]
 8017fae:	885b      	ldrh	r3, [r3, #2]
 8017fb0:	b29b      	uxth	r3, r3
 8017fb2:	4618      	mov	r0, r3
 8017fb4:	f7f7 ff5c 	bl	800fe70 <lwip_htons>
 8017fb8:	4603      	mov	r3, r0
 8017fba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fc8:	4b64      	ldr	r3, [pc, #400]	; (801815c <udp_input+0x21c>)
 8017fca:	681b      	ldr	r3, [r3, #0]
 8017fcc:	627b      	str	r3, [r7, #36]	; 0x24
 8017fce:	e054      	b.n	801807a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fd2:	8a5b      	ldrh	r3, [r3, #18]
 8017fd4:	89fa      	ldrh	r2, [r7, #14]
 8017fd6:	429a      	cmp	r2, r3
 8017fd8:	d14a      	bne.n	8018070 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017fda:	7cfb      	ldrb	r3, [r7, #19]
 8017fdc:	461a      	mov	r2, r3
 8017fde:	6839      	ldr	r1, [r7, #0]
 8017fe0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017fe2:	f7ff ff49 	bl	8017e78 <udp_input_local_match>
 8017fe6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d041      	beq.n	8018070 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fee:	7c1b      	ldrb	r3, [r3, #16]
 8017ff0:	f003 0304 	and.w	r3, r3, #4
 8017ff4:	2b00      	cmp	r3, #0
 8017ff6:	d11d      	bne.n	8018034 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017ff8:	69fb      	ldr	r3, [r7, #28]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d102      	bne.n	8018004 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018000:	61fb      	str	r3, [r7, #28]
 8018002:	e017      	b.n	8018034 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018004:	7cfb      	ldrb	r3, [r7, #19]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d014      	beq.n	8018034 <udp_input+0xf4>
 801800a:	4b53      	ldr	r3, [pc, #332]	; (8018158 <udp_input+0x218>)
 801800c:	695b      	ldr	r3, [r3, #20]
 801800e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018012:	d10f      	bne.n	8018034 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018014:	69fb      	ldr	r3, [r7, #28]
 8018016:	681a      	ldr	r2, [r3, #0]
 8018018:	683b      	ldr	r3, [r7, #0]
 801801a:	3304      	adds	r3, #4
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	429a      	cmp	r2, r3
 8018020:	d008      	beq.n	8018034 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8018022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018024:	681a      	ldr	r2, [r3, #0]
 8018026:	683b      	ldr	r3, [r7, #0]
 8018028:	3304      	adds	r3, #4
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	429a      	cmp	r2, r3
 801802e:	d101      	bne.n	8018034 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018032:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018036:	8a9b      	ldrh	r3, [r3, #20]
 8018038:	8a3a      	ldrh	r2, [r7, #16]
 801803a:	429a      	cmp	r2, r3
 801803c:	d118      	bne.n	8018070 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018040:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8018042:	2b00      	cmp	r3, #0
 8018044:	d005      	beq.n	8018052 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018048:	685a      	ldr	r2, [r3, #4]
 801804a:	4b43      	ldr	r3, [pc, #268]	; (8018158 <udp_input+0x218>)
 801804c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801804e:	429a      	cmp	r2, r3
 8018050:	d10e      	bne.n	8018070 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8018052:	6a3b      	ldr	r3, [r7, #32]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d014      	beq.n	8018082 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801805a:	68da      	ldr	r2, [r3, #12]
 801805c:	6a3b      	ldr	r3, [r7, #32]
 801805e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018060:	4b3e      	ldr	r3, [pc, #248]	; (801815c <udp_input+0x21c>)
 8018062:	681a      	ldr	r2, [r3, #0]
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018068:	4a3c      	ldr	r2, [pc, #240]	; (801815c <udp_input+0x21c>)
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801806e:	e008      	b.n	8018082 <udp_input+0x142>
      }
    }

    prev = pcb;
 8018070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018072:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018076:	68db      	ldr	r3, [r3, #12]
 8018078:	627b      	str	r3, [r7, #36]	; 0x24
 801807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801807c:	2b00      	cmp	r3, #0
 801807e:	d1a7      	bne.n	8017fd0 <udp_input+0x90>
 8018080:	e000      	b.n	8018084 <udp_input+0x144>
        break;
 8018082:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018086:	2b00      	cmp	r3, #0
 8018088:	d101      	bne.n	801808e <udp_input+0x14e>
    pcb = uncon_pcb;
 801808a:	69fb      	ldr	r3, [r7, #28]
 801808c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801808e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018090:	2b00      	cmp	r3, #0
 8018092:	d002      	beq.n	801809a <udp_input+0x15a>
    for_us = 1;
 8018094:	2301      	movs	r3, #1
 8018096:	76fb      	strb	r3, [r7, #27]
 8018098:	e00a      	b.n	80180b0 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801809a:	683b      	ldr	r3, [r7, #0]
 801809c:	3304      	adds	r3, #4
 801809e:	681a      	ldr	r2, [r3, #0]
 80180a0:	4b2d      	ldr	r3, [pc, #180]	; (8018158 <udp_input+0x218>)
 80180a2:	695b      	ldr	r3, [r3, #20]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	bf0c      	ite	eq
 80180a8:	2301      	moveq	r3, #1
 80180aa:	2300      	movne	r3, #0
 80180ac:	b2db      	uxtb	r3, r3
 80180ae:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80180b0:	7efb      	ldrb	r3, [r7, #27]
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d041      	beq.n	801813a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80180b6:	2108      	movs	r1, #8
 80180b8:	6878      	ldr	r0, [r7, #4]
 80180ba:	f7f9 f9ff 	bl	80114bc <pbuf_remove_header>
 80180be:	4603      	mov	r3, r0
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d00a      	beq.n	80180da <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80180c4:	4b20      	ldr	r3, [pc, #128]	; (8018148 <udp_input+0x208>)
 80180c6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80180ca:	4925      	ldr	r1, [pc, #148]	; (8018160 <udp_input+0x220>)
 80180cc:	4820      	ldr	r0, [pc, #128]	; (8018150 <udp_input+0x210>)
 80180ce:	f003 fddd 	bl	801bc8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80180d2:	6878      	ldr	r0, [r7, #4]
 80180d4:	f7f9 faaa 	bl	801162c <pbuf_free>
      goto end;
 80180d8:	e032      	b.n	8018140 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80180da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d012      	beq.n	8018106 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80180e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e2:	699b      	ldr	r3, [r3, #24]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d00a      	beq.n	80180fe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80180e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ea:	699c      	ldr	r4, [r3, #24]
 80180ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ee:	69d8      	ldr	r0, [r3, #28]
 80180f0:	8a3b      	ldrh	r3, [r7, #16]
 80180f2:	9300      	str	r3, [sp, #0]
 80180f4:	4b1b      	ldr	r3, [pc, #108]	; (8018164 <udp_input+0x224>)
 80180f6:	687a      	ldr	r2, [r7, #4]
 80180f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180fa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80180fc:	e021      	b.n	8018142 <udp_input+0x202>
        pbuf_free(p);
 80180fe:	6878      	ldr	r0, [r7, #4]
 8018100:	f7f9 fa94 	bl	801162c <pbuf_free>
        goto end;
 8018104:	e01c      	b.n	8018140 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018106:	7cfb      	ldrb	r3, [r7, #19]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d112      	bne.n	8018132 <udp_input+0x1f2>
 801810c:	4b12      	ldr	r3, [pc, #72]	; (8018158 <udp_input+0x218>)
 801810e:	695b      	ldr	r3, [r3, #20]
 8018110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018114:	2be0      	cmp	r3, #224	; 0xe0
 8018116:	d00c      	beq.n	8018132 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018118:	4b0f      	ldr	r3, [pc, #60]	; (8018158 <udp_input+0x218>)
 801811a:	899b      	ldrh	r3, [r3, #12]
 801811c:	3308      	adds	r3, #8
 801811e:	b29b      	uxth	r3, r3
 8018120:	b21b      	sxth	r3, r3
 8018122:	4619      	mov	r1, r3
 8018124:	6878      	ldr	r0, [r7, #4]
 8018126:	f7f9 fa3c 	bl	80115a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801812a:	2103      	movs	r1, #3
 801812c:	6878      	ldr	r0, [r7, #4]
 801812e:	f001 fb93 	bl	8019858 <icmp_dest_unreach>
      pbuf_free(p);
 8018132:	6878      	ldr	r0, [r7, #4]
 8018134:	f7f9 fa7a 	bl	801162c <pbuf_free>
  return;
 8018138:	e003      	b.n	8018142 <udp_input+0x202>
    pbuf_free(p);
 801813a:	6878      	ldr	r0, [r7, #4]
 801813c:	f7f9 fa76 	bl	801162c <pbuf_free>
  return;
 8018140:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018142:	372c      	adds	r7, #44	; 0x2c
 8018144:	46bd      	mov	sp, r7
 8018146:	bd90      	pop	{r4, r7, pc}
 8018148:	080210d8 	.word	0x080210d8
 801814c:	0802117c 	.word	0x0802117c
 8018150:	0802112c 	.word	0x0802112c
 8018154:	08021194 	.word	0x08021194
 8018158:	2000a0a8 	.word	0x2000a0a8
 801815c:	2000d7d4 	.word	0x2000d7d4
 8018160:	080211b0 	.word	0x080211b0
 8018164:	2000a0b8 	.word	0x2000a0b8

08018168 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8018168:	b580      	push	{r7, lr}
 801816a:	b082      	sub	sp, #8
 801816c:	af00      	add	r7, sp, #0
 801816e:	6078      	str	r0, [r7, #4]
 8018170:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d109      	bne.n	801818c <udp_send+0x24>
 8018178:	4b11      	ldr	r3, [pc, #68]	; (80181c0 <udp_send+0x58>)
 801817a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801817e:	4911      	ldr	r1, [pc, #68]	; (80181c4 <udp_send+0x5c>)
 8018180:	4811      	ldr	r0, [pc, #68]	; (80181c8 <udp_send+0x60>)
 8018182:	f003 fd83 	bl	801bc8c <iprintf>
 8018186:	f06f 030f 	mvn.w	r3, #15
 801818a:	e015      	b.n	80181b8 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801818c:	683b      	ldr	r3, [r7, #0]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d109      	bne.n	80181a6 <udp_send+0x3e>
 8018192:	4b0b      	ldr	r3, [pc, #44]	; (80181c0 <udp_send+0x58>)
 8018194:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018198:	490c      	ldr	r1, [pc, #48]	; (80181cc <udp_send+0x64>)
 801819a:	480b      	ldr	r0, [pc, #44]	; (80181c8 <udp_send+0x60>)
 801819c:	f003 fd76 	bl	801bc8c <iprintf>
 80181a0:	f06f 030f 	mvn.w	r3, #15
 80181a4:	e008      	b.n	80181b8 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	1d1a      	adds	r2, r3, #4
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	8a9b      	ldrh	r3, [r3, #20]
 80181ae:	6839      	ldr	r1, [r7, #0]
 80181b0:	6878      	ldr	r0, [r7, #4]
 80181b2:	f000 f80d 	bl	80181d0 <udp_sendto>
 80181b6:	4603      	mov	r3, r0
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3708      	adds	r7, #8
 80181bc:	46bd      	mov	sp, r7
 80181be:	bd80      	pop	{r7, pc}
 80181c0:	080210d8 	.word	0x080210d8
 80181c4:	080211cc 	.word	0x080211cc
 80181c8:	0802112c 	.word	0x0802112c
 80181cc:	080211e4 	.word	0x080211e4

080181d0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b088      	sub	sp, #32
 80181d4:	af02      	add	r7, sp, #8
 80181d6:	60f8      	str	r0, [r7, #12]
 80181d8:	60b9      	str	r1, [r7, #8]
 80181da:	607a      	str	r2, [r7, #4]
 80181dc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	2b00      	cmp	r3, #0
 80181e2:	d109      	bne.n	80181f8 <udp_sendto+0x28>
 80181e4:	4b23      	ldr	r3, [pc, #140]	; (8018274 <udp_sendto+0xa4>)
 80181e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80181ea:	4923      	ldr	r1, [pc, #140]	; (8018278 <udp_sendto+0xa8>)
 80181ec:	4823      	ldr	r0, [pc, #140]	; (801827c <udp_sendto+0xac>)
 80181ee:	f003 fd4d 	bl	801bc8c <iprintf>
 80181f2:	f06f 030f 	mvn.w	r3, #15
 80181f6:	e038      	b.n	801826a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80181f8:	68bb      	ldr	r3, [r7, #8]
 80181fa:	2b00      	cmp	r3, #0
 80181fc:	d109      	bne.n	8018212 <udp_sendto+0x42>
 80181fe:	4b1d      	ldr	r3, [pc, #116]	; (8018274 <udp_sendto+0xa4>)
 8018200:	f240 2219 	movw	r2, #537	; 0x219
 8018204:	491e      	ldr	r1, [pc, #120]	; (8018280 <udp_sendto+0xb0>)
 8018206:	481d      	ldr	r0, [pc, #116]	; (801827c <udp_sendto+0xac>)
 8018208:	f003 fd40 	bl	801bc8c <iprintf>
 801820c:	f06f 030f 	mvn.w	r3, #15
 8018210:	e02b      	b.n	801826a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	2b00      	cmp	r3, #0
 8018216:	d109      	bne.n	801822c <udp_sendto+0x5c>
 8018218:	4b16      	ldr	r3, [pc, #88]	; (8018274 <udp_sendto+0xa4>)
 801821a:	f240 221a 	movw	r2, #538	; 0x21a
 801821e:	4919      	ldr	r1, [pc, #100]	; (8018284 <udp_sendto+0xb4>)
 8018220:	4816      	ldr	r0, [pc, #88]	; (801827c <udp_sendto+0xac>)
 8018222:	f003 fd33 	bl	801bc8c <iprintf>
 8018226:	f06f 030f 	mvn.w	r3, #15
 801822a:	e01e      	b.n	801826a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	7a1b      	ldrb	r3, [r3, #8]
 8018230:	2b00      	cmp	r3, #0
 8018232:	d006      	beq.n	8018242 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018234:	68fb      	ldr	r3, [r7, #12]
 8018236:	7a1b      	ldrb	r3, [r3, #8]
 8018238:	4618      	mov	r0, r3
 801823a:	f7f8 fe37 	bl	8010eac <netif_get_by_index>
 801823e:	6178      	str	r0, [r7, #20]
 8018240:	e003      	b.n	801824a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f001 fb92 	bl	801996c <ip4_route>
 8018248:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801824a:	697b      	ldr	r3, [r7, #20]
 801824c:	2b00      	cmp	r3, #0
 801824e:	d102      	bne.n	8018256 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018250:	f06f 0303 	mvn.w	r3, #3
 8018254:	e009      	b.n	801826a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8018256:	887a      	ldrh	r2, [r7, #2]
 8018258:	697b      	ldr	r3, [r7, #20]
 801825a:	9300      	str	r3, [sp, #0]
 801825c:	4613      	mov	r3, r2
 801825e:	687a      	ldr	r2, [r7, #4]
 8018260:	68b9      	ldr	r1, [r7, #8]
 8018262:	68f8      	ldr	r0, [r7, #12]
 8018264:	f000 f810 	bl	8018288 <udp_sendto_if>
 8018268:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801826a:	4618      	mov	r0, r3
 801826c:	3718      	adds	r7, #24
 801826e:	46bd      	mov	sp, r7
 8018270:	bd80      	pop	{r7, pc}
 8018272:	bf00      	nop
 8018274:	080210d8 	.word	0x080210d8
 8018278:	080211fc 	.word	0x080211fc
 801827c:	0802112c 	.word	0x0802112c
 8018280:	08021214 	.word	0x08021214
 8018284:	08021230 	.word	0x08021230

08018288 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	b088      	sub	sp, #32
 801828c:	af02      	add	r7, sp, #8
 801828e:	60f8      	str	r0, [r7, #12]
 8018290:	60b9      	str	r1, [r7, #8]
 8018292:	607a      	str	r2, [r7, #4]
 8018294:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	2b00      	cmp	r3, #0
 801829a:	d109      	bne.n	80182b0 <udp_sendto_if+0x28>
 801829c:	4b2e      	ldr	r3, [pc, #184]	; (8018358 <udp_sendto_if+0xd0>)
 801829e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182a2:	492e      	ldr	r1, [pc, #184]	; (801835c <udp_sendto_if+0xd4>)
 80182a4:	482e      	ldr	r0, [pc, #184]	; (8018360 <udp_sendto_if+0xd8>)
 80182a6:	f003 fcf1 	bl	801bc8c <iprintf>
 80182aa:	f06f 030f 	mvn.w	r3, #15
 80182ae:	e04f      	b.n	8018350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80182b0:	68bb      	ldr	r3, [r7, #8]
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d109      	bne.n	80182ca <udp_sendto_if+0x42>
 80182b6:	4b28      	ldr	r3, [pc, #160]	; (8018358 <udp_sendto_if+0xd0>)
 80182b8:	f240 2281 	movw	r2, #641	; 0x281
 80182bc:	4929      	ldr	r1, [pc, #164]	; (8018364 <udp_sendto_if+0xdc>)
 80182be:	4828      	ldr	r0, [pc, #160]	; (8018360 <udp_sendto_if+0xd8>)
 80182c0:	f003 fce4 	bl	801bc8c <iprintf>
 80182c4:	f06f 030f 	mvn.w	r3, #15
 80182c8:	e042      	b.n	8018350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d109      	bne.n	80182e4 <udp_sendto_if+0x5c>
 80182d0:	4b21      	ldr	r3, [pc, #132]	; (8018358 <udp_sendto_if+0xd0>)
 80182d2:	f240 2282 	movw	r2, #642	; 0x282
 80182d6:	4924      	ldr	r1, [pc, #144]	; (8018368 <udp_sendto_if+0xe0>)
 80182d8:	4821      	ldr	r0, [pc, #132]	; (8018360 <udp_sendto_if+0xd8>)
 80182da:	f003 fcd7 	bl	801bc8c <iprintf>
 80182de:	f06f 030f 	mvn.w	r3, #15
 80182e2:	e035      	b.n	8018350 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80182e4:	6a3b      	ldr	r3, [r7, #32]
 80182e6:	2b00      	cmp	r3, #0
 80182e8:	d109      	bne.n	80182fe <udp_sendto_if+0x76>
 80182ea:	4b1b      	ldr	r3, [pc, #108]	; (8018358 <udp_sendto_if+0xd0>)
 80182ec:	f240 2283 	movw	r2, #643	; 0x283
 80182f0:	491e      	ldr	r1, [pc, #120]	; (801836c <udp_sendto_if+0xe4>)
 80182f2:	481b      	ldr	r0, [pc, #108]	; (8018360 <udp_sendto_if+0xd8>)
 80182f4:	f003 fcca 	bl	801bc8c <iprintf>
 80182f8:	f06f 030f 	mvn.w	r3, #15
 80182fc:	e028      	b.n	8018350 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d009      	beq.n	8018318 <udp_sendto_if+0x90>
 8018304:	68fb      	ldr	r3, [r7, #12]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	2b00      	cmp	r3, #0
 801830a:	d005      	beq.n	8018318 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	681b      	ldr	r3, [r3, #0]
 8018310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018314:	2be0      	cmp	r3, #224	; 0xe0
 8018316:	d103      	bne.n	8018320 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018318:	6a3b      	ldr	r3, [r7, #32]
 801831a:	3304      	adds	r3, #4
 801831c:	617b      	str	r3, [r7, #20]
 801831e:	e00b      	b.n	8018338 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	681a      	ldr	r2, [r3, #0]
 8018324:	6a3b      	ldr	r3, [r7, #32]
 8018326:	3304      	adds	r3, #4
 8018328:	681b      	ldr	r3, [r3, #0]
 801832a:	429a      	cmp	r2, r3
 801832c:	d002      	beq.n	8018334 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801832e:	f06f 0303 	mvn.w	r3, #3
 8018332:	e00d      	b.n	8018350 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018338:	887a      	ldrh	r2, [r7, #2]
 801833a:	697b      	ldr	r3, [r7, #20]
 801833c:	9301      	str	r3, [sp, #4]
 801833e:	6a3b      	ldr	r3, [r7, #32]
 8018340:	9300      	str	r3, [sp, #0]
 8018342:	4613      	mov	r3, r2
 8018344:	687a      	ldr	r2, [r7, #4]
 8018346:	68b9      	ldr	r1, [r7, #8]
 8018348:	68f8      	ldr	r0, [r7, #12]
 801834a:	f000 f811 	bl	8018370 <udp_sendto_if_src>
 801834e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018350:	4618      	mov	r0, r3
 8018352:	3718      	adds	r7, #24
 8018354:	46bd      	mov	sp, r7
 8018356:	bd80      	pop	{r7, pc}
 8018358:	080210d8 	.word	0x080210d8
 801835c:	0802124c 	.word	0x0802124c
 8018360:	0802112c 	.word	0x0802112c
 8018364:	08021268 	.word	0x08021268
 8018368:	08021284 	.word	0x08021284
 801836c:	080212a4 	.word	0x080212a4

08018370 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018370:	b580      	push	{r7, lr}
 8018372:	b08c      	sub	sp, #48	; 0x30
 8018374:	af04      	add	r7, sp, #16
 8018376:	60f8      	str	r0, [r7, #12]
 8018378:	60b9      	str	r1, [r7, #8]
 801837a:	607a      	str	r2, [r7, #4]
 801837c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d109      	bne.n	8018398 <udp_sendto_if_src+0x28>
 8018384:	4b65      	ldr	r3, [pc, #404]	; (801851c <udp_sendto_if_src+0x1ac>)
 8018386:	f240 22d1 	movw	r2, #721	; 0x2d1
 801838a:	4965      	ldr	r1, [pc, #404]	; (8018520 <udp_sendto_if_src+0x1b0>)
 801838c:	4865      	ldr	r0, [pc, #404]	; (8018524 <udp_sendto_if_src+0x1b4>)
 801838e:	f003 fc7d 	bl	801bc8c <iprintf>
 8018392:	f06f 030f 	mvn.w	r3, #15
 8018396:	e0bc      	b.n	8018512 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018398:	68bb      	ldr	r3, [r7, #8]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d109      	bne.n	80183b2 <udp_sendto_if_src+0x42>
 801839e:	4b5f      	ldr	r3, [pc, #380]	; (801851c <udp_sendto_if_src+0x1ac>)
 80183a0:	f240 22d2 	movw	r2, #722	; 0x2d2
 80183a4:	4960      	ldr	r1, [pc, #384]	; (8018528 <udp_sendto_if_src+0x1b8>)
 80183a6:	485f      	ldr	r0, [pc, #380]	; (8018524 <udp_sendto_if_src+0x1b4>)
 80183a8:	f003 fc70 	bl	801bc8c <iprintf>
 80183ac:	f06f 030f 	mvn.w	r3, #15
 80183b0:	e0af      	b.n	8018512 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80183b2:	687b      	ldr	r3, [r7, #4]
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d109      	bne.n	80183cc <udp_sendto_if_src+0x5c>
 80183b8:	4b58      	ldr	r3, [pc, #352]	; (801851c <udp_sendto_if_src+0x1ac>)
 80183ba:	f240 22d3 	movw	r2, #723	; 0x2d3
 80183be:	495b      	ldr	r1, [pc, #364]	; (801852c <udp_sendto_if_src+0x1bc>)
 80183c0:	4858      	ldr	r0, [pc, #352]	; (8018524 <udp_sendto_if_src+0x1b4>)
 80183c2:	f003 fc63 	bl	801bc8c <iprintf>
 80183c6:	f06f 030f 	mvn.w	r3, #15
 80183ca:	e0a2      	b.n	8018512 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80183cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80183ce:	2b00      	cmp	r3, #0
 80183d0:	d109      	bne.n	80183e6 <udp_sendto_if_src+0x76>
 80183d2:	4b52      	ldr	r3, [pc, #328]	; (801851c <udp_sendto_if_src+0x1ac>)
 80183d4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80183d8:	4955      	ldr	r1, [pc, #340]	; (8018530 <udp_sendto_if_src+0x1c0>)
 80183da:	4852      	ldr	r0, [pc, #328]	; (8018524 <udp_sendto_if_src+0x1b4>)
 80183dc:	f003 fc56 	bl	801bc8c <iprintf>
 80183e0:	f06f 030f 	mvn.w	r3, #15
 80183e4:	e095      	b.n	8018512 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80183e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d109      	bne.n	8018400 <udp_sendto_if_src+0x90>
 80183ec:	4b4b      	ldr	r3, [pc, #300]	; (801851c <udp_sendto_if_src+0x1ac>)
 80183ee:	f240 22d5 	movw	r2, #725	; 0x2d5
 80183f2:	4950      	ldr	r1, [pc, #320]	; (8018534 <udp_sendto_if_src+0x1c4>)
 80183f4:	484b      	ldr	r0, [pc, #300]	; (8018524 <udp_sendto_if_src+0x1b4>)
 80183f6:	f003 fc49 	bl	801bc8c <iprintf>
 80183fa:	f06f 030f 	mvn.w	r3, #15
 80183fe:	e088      	b.n	8018512 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	8a5b      	ldrh	r3, [r3, #18]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d10f      	bne.n	8018428 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018408:	68f9      	ldr	r1, [r7, #12]
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	8a5b      	ldrh	r3, [r3, #18]
 801840e:	461a      	mov	r2, r3
 8018410:	68f8      	ldr	r0, [r7, #12]
 8018412:	f000 f893 	bl	801853c <udp_bind>
 8018416:	4603      	mov	r3, r0
 8018418:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801841a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d002      	beq.n	8018428 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018422:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018426:	e074      	b.n	8018512 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	891b      	ldrh	r3, [r3, #8]
 801842c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018430:	4293      	cmp	r3, r2
 8018432:	d902      	bls.n	801843a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018434:	f04f 33ff 	mov.w	r3, #4294967295
 8018438:	e06b      	b.n	8018512 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801843a:	2108      	movs	r1, #8
 801843c:	68b8      	ldr	r0, [r7, #8]
 801843e:	f7f9 f82d 	bl	801149c <pbuf_add_header>
 8018442:	4603      	mov	r3, r0
 8018444:	2b00      	cmp	r3, #0
 8018446:	d015      	beq.n	8018474 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018448:	f44f 7220 	mov.w	r2, #640	; 0x280
 801844c:	2108      	movs	r1, #8
 801844e:	2022      	movs	r0, #34	; 0x22
 8018450:	f7f8 fdd6 	bl	8011000 <pbuf_alloc>
 8018454:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018456:	69fb      	ldr	r3, [r7, #28]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d102      	bne.n	8018462 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801845c:	f04f 33ff 	mov.w	r3, #4294967295
 8018460:	e057      	b.n	8018512 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018462:	68bb      	ldr	r3, [r7, #8]
 8018464:	891b      	ldrh	r3, [r3, #8]
 8018466:	2b00      	cmp	r3, #0
 8018468:	d006      	beq.n	8018478 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801846a:	68b9      	ldr	r1, [r7, #8]
 801846c:	69f8      	ldr	r0, [r7, #28]
 801846e:	f7f9 fa01 	bl	8011874 <pbuf_chain>
 8018472:	e001      	b.n	8018478 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018474:	68bb      	ldr	r3, [r7, #8]
 8018476:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018478:	69fb      	ldr	r3, [r7, #28]
 801847a:	895b      	ldrh	r3, [r3, #10]
 801847c:	2b07      	cmp	r3, #7
 801847e:	d806      	bhi.n	801848e <udp_sendto_if_src+0x11e>
 8018480:	4b26      	ldr	r3, [pc, #152]	; (801851c <udp_sendto_if_src+0x1ac>)
 8018482:	f240 320d 	movw	r2, #781	; 0x30d
 8018486:	492c      	ldr	r1, [pc, #176]	; (8018538 <udp_sendto_if_src+0x1c8>)
 8018488:	4826      	ldr	r0, [pc, #152]	; (8018524 <udp_sendto_if_src+0x1b4>)
 801848a:	f003 fbff 	bl	801bc8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801848e:	69fb      	ldr	r3, [r7, #28]
 8018490:	685b      	ldr	r3, [r3, #4]
 8018492:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	8a5b      	ldrh	r3, [r3, #18]
 8018498:	4618      	mov	r0, r3
 801849a:	f7f7 fce9 	bl	800fe70 <lwip_htons>
 801849e:	4603      	mov	r3, r0
 80184a0:	461a      	mov	r2, r3
 80184a2:	697b      	ldr	r3, [r7, #20]
 80184a4:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 80184a6:	887b      	ldrh	r3, [r7, #2]
 80184a8:	4618      	mov	r0, r3
 80184aa:	f7f7 fce1 	bl	800fe70 <lwip_htons>
 80184ae:	4603      	mov	r3, r0
 80184b0:	461a      	mov	r2, r3
 80184b2:	697b      	ldr	r3, [r7, #20]
 80184b4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80184b6:	697b      	ldr	r3, [r7, #20]
 80184b8:	2200      	movs	r2, #0
 80184ba:	719a      	strb	r2, [r3, #6]
 80184bc:	2200      	movs	r2, #0
 80184be:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80184c0:	69fb      	ldr	r3, [r7, #28]
 80184c2:	891b      	ldrh	r3, [r3, #8]
 80184c4:	4618      	mov	r0, r3
 80184c6:	f7f7 fcd3 	bl	800fe70 <lwip_htons>
 80184ca:	4603      	mov	r3, r0
 80184cc:	461a      	mov	r2, r3
 80184ce:	697b      	ldr	r3, [r7, #20]
 80184d0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80184d2:	2311      	movs	r3, #17
 80184d4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80184d6:	68fb      	ldr	r3, [r7, #12]
 80184d8:	7adb      	ldrb	r3, [r3, #11]
 80184da:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	7a9b      	ldrb	r3, [r3, #10]
 80184e0:	7cb9      	ldrb	r1, [r7, #18]
 80184e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80184e4:	9202      	str	r2, [sp, #8]
 80184e6:	7cfa      	ldrb	r2, [r7, #19]
 80184e8:	9201      	str	r2, [sp, #4]
 80184ea:	9300      	str	r3, [sp, #0]
 80184ec:	460b      	mov	r3, r1
 80184ee:	687a      	ldr	r2, [r7, #4]
 80184f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80184f2:	69f8      	ldr	r0, [r7, #28]
 80184f4:	f001 fc22 	bl	8019d3c <ip4_output_if_src>
 80184f8:	4603      	mov	r3, r0
 80184fa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80184fc:	69fa      	ldr	r2, [r7, #28]
 80184fe:	68bb      	ldr	r3, [r7, #8]
 8018500:	429a      	cmp	r2, r3
 8018502:	d004      	beq.n	801850e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018504:	69f8      	ldr	r0, [r7, #28]
 8018506:	f7f9 f891 	bl	801162c <pbuf_free>
    q = NULL;
 801850a:	2300      	movs	r3, #0
 801850c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801850e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018512:	4618      	mov	r0, r3
 8018514:	3720      	adds	r7, #32
 8018516:	46bd      	mov	sp, r7
 8018518:	bd80      	pop	{r7, pc}
 801851a:	bf00      	nop
 801851c:	080210d8 	.word	0x080210d8
 8018520:	080212c4 	.word	0x080212c4
 8018524:	0802112c 	.word	0x0802112c
 8018528:	080212e4 	.word	0x080212e4
 801852c:	08021304 	.word	0x08021304
 8018530:	08021328 	.word	0x08021328
 8018534:	0802134c 	.word	0x0802134c
 8018538:	08021370 	.word	0x08021370

0801853c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801853c:	b580      	push	{r7, lr}
 801853e:	b086      	sub	sp, #24
 8018540:	af00      	add	r7, sp, #0
 8018542:	60f8      	str	r0, [r7, #12]
 8018544:	60b9      	str	r1, [r7, #8]
 8018546:	4613      	mov	r3, r2
 8018548:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801854a:	68bb      	ldr	r3, [r7, #8]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d101      	bne.n	8018554 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018550:	4b39      	ldr	r3, [pc, #228]	; (8018638 <udp_bind+0xfc>)
 8018552:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018554:	68fb      	ldr	r3, [r7, #12]
 8018556:	2b00      	cmp	r3, #0
 8018558:	d109      	bne.n	801856e <udp_bind+0x32>
 801855a:	4b38      	ldr	r3, [pc, #224]	; (801863c <udp_bind+0x100>)
 801855c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8018560:	4937      	ldr	r1, [pc, #220]	; (8018640 <udp_bind+0x104>)
 8018562:	4838      	ldr	r0, [pc, #224]	; (8018644 <udp_bind+0x108>)
 8018564:	f003 fb92 	bl	801bc8c <iprintf>
 8018568:	f06f 030f 	mvn.w	r3, #15
 801856c:	e060      	b.n	8018630 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801856e:	2300      	movs	r3, #0
 8018570:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018572:	4b35      	ldr	r3, [pc, #212]	; (8018648 <udp_bind+0x10c>)
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	617b      	str	r3, [r7, #20]
 8018578:	e009      	b.n	801858e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801857a:	68fa      	ldr	r2, [r7, #12]
 801857c:	697b      	ldr	r3, [r7, #20]
 801857e:	429a      	cmp	r2, r3
 8018580:	d102      	bne.n	8018588 <udp_bind+0x4c>
      rebind = 1;
 8018582:	2301      	movs	r3, #1
 8018584:	74fb      	strb	r3, [r7, #19]
      break;
 8018586:	e005      	b.n	8018594 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018588:	697b      	ldr	r3, [r7, #20]
 801858a:	68db      	ldr	r3, [r3, #12]
 801858c:	617b      	str	r3, [r7, #20]
 801858e:	697b      	ldr	r3, [r7, #20]
 8018590:	2b00      	cmp	r3, #0
 8018592:	d1f2      	bne.n	801857a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018594:	88fb      	ldrh	r3, [r7, #6]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d109      	bne.n	80185ae <udp_bind+0x72>
    port = udp_new_port();
 801859a:	f7ff fc35 	bl	8017e08 <udp_new_port>
 801859e:	4603      	mov	r3, r0
 80185a0:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80185a2:	88fb      	ldrh	r3, [r7, #6]
 80185a4:	2b00      	cmp	r3, #0
 80185a6:	d12c      	bne.n	8018602 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 80185a8:	f06f 0307 	mvn.w	r3, #7
 80185ac:	e040      	b.n	8018630 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185ae:	4b26      	ldr	r3, [pc, #152]	; (8018648 <udp_bind+0x10c>)
 80185b0:	681b      	ldr	r3, [r3, #0]
 80185b2:	617b      	str	r3, [r7, #20]
 80185b4:	e022      	b.n	80185fc <udp_bind+0xc0>
      if (pcb != ipcb) {
 80185b6:	68fa      	ldr	r2, [r7, #12]
 80185b8:	697b      	ldr	r3, [r7, #20]
 80185ba:	429a      	cmp	r2, r3
 80185bc:	d01b      	beq.n	80185f6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80185be:	697b      	ldr	r3, [r7, #20]
 80185c0:	8a5b      	ldrh	r3, [r3, #18]
 80185c2:	88fa      	ldrh	r2, [r7, #6]
 80185c4:	429a      	cmp	r2, r3
 80185c6:	d116      	bne.n	80185f6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	681a      	ldr	r2, [r3, #0]
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80185d0:	429a      	cmp	r2, r3
 80185d2:	d00d      	beq.n	80185f0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d00a      	beq.n	80185f0 <udp_bind+0xb4>
 80185da:	68bb      	ldr	r3, [r7, #8]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d006      	beq.n	80185f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185e2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80185e4:	2b00      	cmp	r3, #0
 80185e6:	d003      	beq.n	80185f0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	681b      	ldr	r3, [r3, #0]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d102      	bne.n	80185f6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80185f0:	f06f 0307 	mvn.w	r3, #7
 80185f4:	e01c      	b.n	8018630 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185f6:	697b      	ldr	r3, [r7, #20]
 80185f8:	68db      	ldr	r3, [r3, #12]
 80185fa:	617b      	str	r3, [r7, #20]
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d1d9      	bne.n	80185b6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018602:	68bb      	ldr	r3, [r7, #8]
 8018604:	2b00      	cmp	r3, #0
 8018606:	d002      	beq.n	801860e <udp_bind+0xd2>
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	681b      	ldr	r3, [r3, #0]
 801860c:	e000      	b.n	8018610 <udp_bind+0xd4>
 801860e:	2300      	movs	r3, #0
 8018610:	68fa      	ldr	r2, [r7, #12]
 8018612:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018614:	68fb      	ldr	r3, [r7, #12]
 8018616:	88fa      	ldrh	r2, [r7, #6]
 8018618:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801861a:	7cfb      	ldrb	r3, [r7, #19]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d106      	bne.n	801862e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018620:	4b09      	ldr	r3, [pc, #36]	; (8018648 <udp_bind+0x10c>)
 8018622:	681a      	ldr	r2, [r3, #0]
 8018624:	68fb      	ldr	r3, [r7, #12]
 8018626:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018628:	4a07      	ldr	r2, [pc, #28]	; (8018648 <udp_bind+0x10c>)
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801862e:	2300      	movs	r3, #0
}
 8018630:	4618      	mov	r0, r3
 8018632:	3718      	adds	r7, #24
 8018634:	46bd      	mov	sp, r7
 8018636:	bd80      	pop	{r7, pc}
 8018638:	08021ce8 	.word	0x08021ce8
 801863c:	080210d8 	.word	0x080210d8
 8018640:	080213a0 	.word	0x080213a0
 8018644:	0802112c 	.word	0x0802112c
 8018648:	2000d7d4 	.word	0x2000d7d4

0801864c <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b084      	sub	sp, #16
 8018650:	af00      	add	r7, sp, #0
 8018652:	60f8      	str	r0, [r7, #12]
 8018654:	60b9      	str	r1, [r7, #8]
 8018656:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	2b00      	cmp	r3, #0
 801865c:	d107      	bne.n	801866e <udp_recv+0x22>
 801865e:	4b08      	ldr	r3, [pc, #32]	; (8018680 <udp_recv+0x34>)
 8018660:	f240 428a 	movw	r2, #1162	; 0x48a
 8018664:	4907      	ldr	r1, [pc, #28]	; (8018684 <udp_recv+0x38>)
 8018666:	4808      	ldr	r0, [pc, #32]	; (8018688 <udp_recv+0x3c>)
 8018668:	f003 fb10 	bl	801bc8c <iprintf>
 801866c:	e005      	b.n	801867a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	68ba      	ldr	r2, [r7, #8]
 8018672:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018674:	68fb      	ldr	r3, [r7, #12]
 8018676:	687a      	ldr	r2, [r7, #4]
 8018678:	61da      	str	r2, [r3, #28]
}
 801867a:	3710      	adds	r7, #16
 801867c:	46bd      	mov	sp, r7
 801867e:	bd80      	pop	{r7, pc}
 8018680:	080210d8 	.word	0x080210d8
 8018684:	0802140c 	.word	0x0802140c
 8018688:	0802112c 	.word	0x0802112c

0801868c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b084      	sub	sp, #16
 8018690:	af00      	add	r7, sp, #0
 8018692:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d107      	bne.n	80186aa <udp_remove+0x1e>
 801869a:	4b19      	ldr	r3, [pc, #100]	; (8018700 <udp_remove+0x74>)
 801869c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80186a0:	4918      	ldr	r1, [pc, #96]	; (8018704 <udp_remove+0x78>)
 80186a2:	4819      	ldr	r0, [pc, #100]	; (8018708 <udp_remove+0x7c>)
 80186a4:	f003 faf2 	bl	801bc8c <iprintf>
 80186a8:	e026      	b.n	80186f8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80186aa:	4b18      	ldr	r3, [pc, #96]	; (801870c <udp_remove+0x80>)
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	687a      	ldr	r2, [r7, #4]
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d105      	bne.n	80186c0 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80186b4:	4b15      	ldr	r3, [pc, #84]	; (801870c <udp_remove+0x80>)
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	68db      	ldr	r3, [r3, #12]
 80186ba:	4a14      	ldr	r2, [pc, #80]	; (801870c <udp_remove+0x80>)
 80186bc:	6013      	str	r3, [r2, #0]
 80186be:	e017      	b.n	80186f0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80186c0:	4b12      	ldr	r3, [pc, #72]	; (801870c <udp_remove+0x80>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	60fb      	str	r3, [r7, #12]
 80186c6:	e010      	b.n	80186ea <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	68db      	ldr	r3, [r3, #12]
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d009      	beq.n	80186e4 <udp_remove+0x58>
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	68db      	ldr	r3, [r3, #12]
 80186d4:	687a      	ldr	r2, [r7, #4]
 80186d6:	429a      	cmp	r2, r3
 80186d8:	d104      	bne.n	80186e4 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80186da:	687b      	ldr	r3, [r7, #4]
 80186dc:	68da      	ldr	r2, [r3, #12]
 80186de:	68fb      	ldr	r3, [r7, #12]
 80186e0:	60da      	str	r2, [r3, #12]
        break;
 80186e2:	e005      	b.n	80186f0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	68db      	ldr	r3, [r3, #12]
 80186e8:	60fb      	str	r3, [r7, #12]
 80186ea:	68fb      	ldr	r3, [r7, #12]
 80186ec:	2b00      	cmp	r3, #0
 80186ee:	d1eb      	bne.n	80186c8 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80186f0:	6879      	ldr	r1, [r7, #4]
 80186f2:	2000      	movs	r0, #0
 80186f4:	f7f8 f8c4 	bl	8010880 <memp_free>
}
 80186f8:	3710      	adds	r7, #16
 80186fa:	46bd      	mov	sp, r7
 80186fc:	bd80      	pop	{r7, pc}
 80186fe:	bf00      	nop
 8018700:	080210d8 	.word	0x080210d8
 8018704:	08021424 	.word	0x08021424
 8018708:	0802112c 	.word	0x0802112c
 801870c:	2000d7d4 	.word	0x2000d7d4

08018710 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018716:	2000      	movs	r0, #0
 8018718:	f7f8 f860 	bl	80107dc <memp_malloc>
 801871c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801871e:	687b      	ldr	r3, [r7, #4]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d007      	beq.n	8018734 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018724:	2220      	movs	r2, #32
 8018726:	2100      	movs	r1, #0
 8018728:	6878      	ldr	r0, [r7, #4]
 801872a:	f002 fe65 	bl	801b3f8 <memset>
    pcb->ttl = UDP_TTL;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	22ff      	movs	r2, #255	; 0xff
 8018732:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018734:	687b      	ldr	r3, [r7, #4]
}
 8018736:	4618      	mov	r0, r3
 8018738:	3708      	adds	r7, #8
 801873a:	46bd      	mov	sp, r7
 801873c:	bd80      	pop	{r7, pc}

0801873e <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801873e:	b580      	push	{r7, lr}
 8018740:	b084      	sub	sp, #16
 8018742:	af00      	add	r7, sp, #0
 8018744:	4603      	mov	r3, r0
 8018746:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018748:	f7ff ffe2 	bl	8018710 <udp_new>
 801874c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801874e:	68fb      	ldr	r3, [r7, #12]
}
 8018750:	4618      	mov	r0, r3
 8018752:	3710      	adds	r7, #16
 8018754:	46bd      	mov	sp, r7
 8018756:	bd80      	pop	{r7, pc}

08018758 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018758:	b480      	push	{r7}
 801875a:	b085      	sub	sp, #20
 801875c:	af00      	add	r7, sp, #0
 801875e:	6078      	str	r0, [r7, #4]
 8018760:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2b00      	cmp	r3, #0
 8018766:	d01e      	beq.n	80187a6 <udp_netif_ip_addr_changed+0x4e>
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d01a      	beq.n	80187a6 <udp_netif_ip_addr_changed+0x4e>
 8018770:	683b      	ldr	r3, [r7, #0]
 8018772:	2b00      	cmp	r3, #0
 8018774:	d017      	beq.n	80187a6 <udp_netif_ip_addr_changed+0x4e>
 8018776:	683b      	ldr	r3, [r7, #0]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	2b00      	cmp	r3, #0
 801877c:	d013      	beq.n	80187a6 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801877e:	4b0d      	ldr	r3, [pc, #52]	; (80187b4 <udp_netif_ip_addr_changed+0x5c>)
 8018780:	681b      	ldr	r3, [r3, #0]
 8018782:	60fb      	str	r3, [r7, #12]
 8018784:	e00c      	b.n	80187a0 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681a      	ldr	r2, [r3, #0]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	429a      	cmp	r2, r3
 8018790:	d103      	bne.n	801879a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018792:	683b      	ldr	r3, [r7, #0]
 8018794:	681a      	ldr	r2, [r3, #0]
 8018796:	68fb      	ldr	r3, [r7, #12]
 8018798:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801879a:	68fb      	ldr	r3, [r7, #12]
 801879c:	68db      	ldr	r3, [r3, #12]
 801879e:	60fb      	str	r3, [r7, #12]
 80187a0:	68fb      	ldr	r3, [r7, #12]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d1ef      	bne.n	8018786 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80187a6:	bf00      	nop
 80187a8:	3714      	adds	r7, #20
 80187aa:	46bd      	mov	sp, r7
 80187ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187b0:	4770      	bx	lr
 80187b2:	bf00      	nop
 80187b4:	2000d7d4 	.word	0x2000d7d4

080187b8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80187b8:	b580      	push	{r7, lr}
 80187ba:	b082      	sub	sp, #8
 80187bc:	af00      	add	r7, sp, #0
 80187be:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80187c0:	4915      	ldr	r1, [pc, #84]	; (8018818 <etharp_free_entry+0x60>)
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	4613      	mov	r3, r2
 80187c6:	005b      	lsls	r3, r3, #1
 80187c8:	4413      	add	r3, r2
 80187ca:	00db      	lsls	r3, r3, #3
 80187cc:	440b      	add	r3, r1
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d013      	beq.n	80187fc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80187d4:	4910      	ldr	r1, [pc, #64]	; (8018818 <etharp_free_entry+0x60>)
 80187d6:	687a      	ldr	r2, [r7, #4]
 80187d8:	4613      	mov	r3, r2
 80187da:	005b      	lsls	r3, r3, #1
 80187dc:	4413      	add	r3, r2
 80187de:	00db      	lsls	r3, r3, #3
 80187e0:	440b      	add	r3, r1
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	4618      	mov	r0, r3
 80187e6:	f7f8 ff21 	bl	801162c <pbuf_free>
    arp_table[i].q = NULL;
 80187ea:	490b      	ldr	r1, [pc, #44]	; (8018818 <etharp_free_entry+0x60>)
 80187ec:	687a      	ldr	r2, [r7, #4]
 80187ee:	4613      	mov	r3, r2
 80187f0:	005b      	lsls	r3, r3, #1
 80187f2:	4413      	add	r3, r2
 80187f4:	00db      	lsls	r3, r3, #3
 80187f6:	440b      	add	r3, r1
 80187f8:	2200      	movs	r2, #0
 80187fa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80187fc:	4906      	ldr	r1, [pc, #24]	; (8018818 <etharp_free_entry+0x60>)
 80187fe:	687a      	ldr	r2, [r7, #4]
 8018800:	4613      	mov	r3, r2
 8018802:	005b      	lsls	r3, r3, #1
 8018804:	4413      	add	r3, r2
 8018806:	00db      	lsls	r3, r3, #3
 8018808:	440b      	add	r3, r1
 801880a:	3314      	adds	r3, #20
 801880c:	2200      	movs	r2, #0
 801880e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018810:	bf00      	nop
 8018812:	3708      	adds	r7, #8
 8018814:	46bd      	mov	sp, r7
 8018816:	bd80      	pop	{r7, pc}
 8018818:	20004834 	.word	0x20004834

0801881c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801881c:	b580      	push	{r7, lr}
 801881e:	b082      	sub	sp, #8
 8018820:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018822:	2300      	movs	r3, #0
 8018824:	607b      	str	r3, [r7, #4]
 8018826:	e096      	b.n	8018956 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018828:	494f      	ldr	r1, [pc, #316]	; (8018968 <etharp_tmr+0x14c>)
 801882a:	687a      	ldr	r2, [r7, #4]
 801882c:	4613      	mov	r3, r2
 801882e:	005b      	lsls	r3, r3, #1
 8018830:	4413      	add	r3, r2
 8018832:	00db      	lsls	r3, r3, #3
 8018834:	440b      	add	r3, r1
 8018836:	3314      	adds	r3, #20
 8018838:	781b      	ldrb	r3, [r3, #0]
 801883a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801883c:	78fb      	ldrb	r3, [r7, #3]
 801883e:	2b00      	cmp	r3, #0
 8018840:	f000 8086 	beq.w	8018950 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018844:	4948      	ldr	r1, [pc, #288]	; (8018968 <etharp_tmr+0x14c>)
 8018846:	687a      	ldr	r2, [r7, #4]
 8018848:	4613      	mov	r3, r2
 801884a:	005b      	lsls	r3, r3, #1
 801884c:	4413      	add	r3, r2
 801884e:	00db      	lsls	r3, r3, #3
 8018850:	440b      	add	r3, r1
 8018852:	3312      	adds	r3, #18
 8018854:	881b      	ldrh	r3, [r3, #0]
 8018856:	3301      	adds	r3, #1
 8018858:	b298      	uxth	r0, r3
 801885a:	4943      	ldr	r1, [pc, #268]	; (8018968 <etharp_tmr+0x14c>)
 801885c:	687a      	ldr	r2, [r7, #4]
 801885e:	4613      	mov	r3, r2
 8018860:	005b      	lsls	r3, r3, #1
 8018862:	4413      	add	r3, r2
 8018864:	00db      	lsls	r3, r3, #3
 8018866:	440b      	add	r3, r1
 8018868:	3312      	adds	r3, #18
 801886a:	4602      	mov	r2, r0
 801886c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801886e:	493e      	ldr	r1, [pc, #248]	; (8018968 <etharp_tmr+0x14c>)
 8018870:	687a      	ldr	r2, [r7, #4]
 8018872:	4613      	mov	r3, r2
 8018874:	005b      	lsls	r3, r3, #1
 8018876:	4413      	add	r3, r2
 8018878:	00db      	lsls	r3, r3, #3
 801887a:	440b      	add	r3, r1
 801887c:	3312      	adds	r3, #18
 801887e:	881b      	ldrh	r3, [r3, #0]
 8018880:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018884:	d215      	bcs.n	80188b2 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018886:	4938      	ldr	r1, [pc, #224]	; (8018968 <etharp_tmr+0x14c>)
 8018888:	687a      	ldr	r2, [r7, #4]
 801888a:	4613      	mov	r3, r2
 801888c:	005b      	lsls	r3, r3, #1
 801888e:	4413      	add	r3, r2
 8018890:	00db      	lsls	r3, r3, #3
 8018892:	440b      	add	r3, r1
 8018894:	3314      	adds	r3, #20
 8018896:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018898:	2b01      	cmp	r3, #1
 801889a:	d10e      	bne.n	80188ba <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801889c:	4932      	ldr	r1, [pc, #200]	; (8018968 <etharp_tmr+0x14c>)
 801889e:	687a      	ldr	r2, [r7, #4]
 80188a0:	4613      	mov	r3, r2
 80188a2:	005b      	lsls	r3, r3, #1
 80188a4:	4413      	add	r3, r2
 80188a6:	00db      	lsls	r3, r3, #3
 80188a8:	440b      	add	r3, r1
 80188aa:	3312      	adds	r3, #18
 80188ac:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80188ae:	2b04      	cmp	r3, #4
 80188b0:	d903      	bls.n	80188ba <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80188b2:	6878      	ldr	r0, [r7, #4]
 80188b4:	f7ff ff80 	bl	80187b8 <etharp_free_entry>
 80188b8:	e04a      	b.n	8018950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80188ba:	492b      	ldr	r1, [pc, #172]	; (8018968 <etharp_tmr+0x14c>)
 80188bc:	687a      	ldr	r2, [r7, #4]
 80188be:	4613      	mov	r3, r2
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	4413      	add	r3, r2
 80188c4:	00db      	lsls	r3, r3, #3
 80188c6:	440b      	add	r3, r1
 80188c8:	3314      	adds	r3, #20
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	2b03      	cmp	r3, #3
 80188ce:	d10a      	bne.n	80188e6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80188d0:	4925      	ldr	r1, [pc, #148]	; (8018968 <etharp_tmr+0x14c>)
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	4613      	mov	r3, r2
 80188d6:	005b      	lsls	r3, r3, #1
 80188d8:	4413      	add	r3, r2
 80188da:	00db      	lsls	r3, r3, #3
 80188dc:	440b      	add	r3, r1
 80188de:	3314      	adds	r3, #20
 80188e0:	2204      	movs	r2, #4
 80188e2:	701a      	strb	r2, [r3, #0]
 80188e4:	e034      	b.n	8018950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80188e6:	4920      	ldr	r1, [pc, #128]	; (8018968 <etharp_tmr+0x14c>)
 80188e8:	687a      	ldr	r2, [r7, #4]
 80188ea:	4613      	mov	r3, r2
 80188ec:	005b      	lsls	r3, r3, #1
 80188ee:	4413      	add	r3, r2
 80188f0:	00db      	lsls	r3, r3, #3
 80188f2:	440b      	add	r3, r1
 80188f4:	3314      	adds	r3, #20
 80188f6:	781b      	ldrb	r3, [r3, #0]
 80188f8:	2b04      	cmp	r3, #4
 80188fa:	d10a      	bne.n	8018912 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80188fc:	491a      	ldr	r1, [pc, #104]	; (8018968 <etharp_tmr+0x14c>)
 80188fe:	687a      	ldr	r2, [r7, #4]
 8018900:	4613      	mov	r3, r2
 8018902:	005b      	lsls	r3, r3, #1
 8018904:	4413      	add	r3, r2
 8018906:	00db      	lsls	r3, r3, #3
 8018908:	440b      	add	r3, r1
 801890a:	3314      	adds	r3, #20
 801890c:	2202      	movs	r2, #2
 801890e:	701a      	strb	r2, [r3, #0]
 8018910:	e01e      	b.n	8018950 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018912:	4915      	ldr	r1, [pc, #84]	; (8018968 <etharp_tmr+0x14c>)
 8018914:	687a      	ldr	r2, [r7, #4]
 8018916:	4613      	mov	r3, r2
 8018918:	005b      	lsls	r3, r3, #1
 801891a:	4413      	add	r3, r2
 801891c:	00db      	lsls	r3, r3, #3
 801891e:	440b      	add	r3, r1
 8018920:	3314      	adds	r3, #20
 8018922:	781b      	ldrb	r3, [r3, #0]
 8018924:	2b01      	cmp	r3, #1
 8018926:	d113      	bne.n	8018950 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018928:	490f      	ldr	r1, [pc, #60]	; (8018968 <etharp_tmr+0x14c>)
 801892a:	687a      	ldr	r2, [r7, #4]
 801892c:	4613      	mov	r3, r2
 801892e:	005b      	lsls	r3, r3, #1
 8018930:	4413      	add	r3, r2
 8018932:	00db      	lsls	r3, r3, #3
 8018934:	440b      	add	r3, r1
 8018936:	3308      	adds	r3, #8
 8018938:	6818      	ldr	r0, [r3, #0]
 801893a:	687a      	ldr	r2, [r7, #4]
 801893c:	4613      	mov	r3, r2
 801893e:	005b      	lsls	r3, r3, #1
 8018940:	4413      	add	r3, r2
 8018942:	00db      	lsls	r3, r3, #3
 8018944:	4a08      	ldr	r2, [pc, #32]	; (8018968 <etharp_tmr+0x14c>)
 8018946:	4413      	add	r3, r2
 8018948:	3304      	adds	r3, #4
 801894a:	4619      	mov	r1, r3
 801894c:	f000 fe6e 	bl	801962c <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	3301      	adds	r3, #1
 8018954:	607b      	str	r3, [r7, #4]
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	2b09      	cmp	r3, #9
 801895a:	f77f af65 	ble.w	8018828 <etharp_tmr+0xc>
      }
    }
  }
}
 801895e:	bf00      	nop
 8018960:	bf00      	nop
 8018962:	3708      	adds	r7, #8
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}
 8018968:	20004834 	.word	0x20004834

0801896c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801896c:	b580      	push	{r7, lr}
 801896e:	b08a      	sub	sp, #40	; 0x28
 8018970:	af00      	add	r7, sp, #0
 8018972:	60f8      	str	r0, [r7, #12]
 8018974:	460b      	mov	r3, r1
 8018976:	607a      	str	r2, [r7, #4]
 8018978:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801897a:	230a      	movs	r3, #10
 801897c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801897e:	230a      	movs	r3, #10
 8018980:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018982:	230a      	movs	r3, #10
 8018984:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018986:	2300      	movs	r3, #0
 8018988:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801898a:	230a      	movs	r3, #10
 801898c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801898e:	2300      	movs	r3, #0
 8018990:	83bb      	strh	r3, [r7, #28]
 8018992:	2300      	movs	r3, #0
 8018994:	837b      	strh	r3, [r7, #26]
 8018996:	2300      	movs	r3, #0
 8018998:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801899a:	2300      	movs	r3, #0
 801899c:	843b      	strh	r3, [r7, #32]
 801899e:	e0ae      	b.n	8018afe <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80189a0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189a4:	49a6      	ldr	r1, [pc, #664]	; (8018c40 <etharp_find_entry+0x2d4>)
 80189a6:	4613      	mov	r3, r2
 80189a8:	005b      	lsls	r3, r3, #1
 80189aa:	4413      	add	r3, r2
 80189ac:	00db      	lsls	r3, r3, #3
 80189ae:	440b      	add	r3, r1
 80189b0:	3314      	adds	r3, #20
 80189b2:	781b      	ldrb	r3, [r3, #0]
 80189b4:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80189b6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80189ba:	2b0a      	cmp	r3, #10
 80189bc:	d105      	bne.n	80189ca <etharp_find_entry+0x5e>
 80189be:	7dfb      	ldrb	r3, [r7, #23]
 80189c0:	2b00      	cmp	r3, #0
 80189c2:	d102      	bne.n	80189ca <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80189c4:	8c3b      	ldrh	r3, [r7, #32]
 80189c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80189c8:	e095      	b.n	8018af6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80189ca:	7dfb      	ldrb	r3, [r7, #23]
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	f000 8092 	beq.w	8018af6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80189d2:	7dfb      	ldrb	r3, [r7, #23]
 80189d4:	2b01      	cmp	r3, #1
 80189d6:	d009      	beq.n	80189ec <etharp_find_entry+0x80>
 80189d8:	7dfb      	ldrb	r3, [r7, #23]
 80189da:	2b01      	cmp	r3, #1
 80189dc:	d806      	bhi.n	80189ec <etharp_find_entry+0x80>
 80189de:	4b99      	ldr	r3, [pc, #612]	; (8018c44 <etharp_find_entry+0x2d8>)
 80189e0:	f240 1223 	movw	r2, #291	; 0x123
 80189e4:	4998      	ldr	r1, [pc, #608]	; (8018c48 <etharp_find_entry+0x2dc>)
 80189e6:	4899      	ldr	r0, [pc, #612]	; (8018c4c <etharp_find_entry+0x2e0>)
 80189e8:	f003 f950 	bl	801bc8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d020      	beq.n	8018a34 <etharp_find_entry+0xc8>
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	6819      	ldr	r1, [r3, #0]
 80189f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80189fa:	4891      	ldr	r0, [pc, #580]	; (8018c40 <etharp_find_entry+0x2d4>)
 80189fc:	4613      	mov	r3, r2
 80189fe:	005b      	lsls	r3, r3, #1
 8018a00:	4413      	add	r3, r2
 8018a02:	00db      	lsls	r3, r3, #3
 8018a04:	4403      	add	r3, r0
 8018a06:	3304      	adds	r3, #4
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4299      	cmp	r1, r3
 8018a0c:	d112      	bne.n	8018a34 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d00c      	beq.n	8018a2e <etharp_find_entry+0xc2>
 8018a14:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a18:	4989      	ldr	r1, [pc, #548]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018a1a:	4613      	mov	r3, r2
 8018a1c:	005b      	lsls	r3, r3, #1
 8018a1e:	4413      	add	r3, r2
 8018a20:	00db      	lsls	r3, r3, #3
 8018a22:	440b      	add	r3, r1
 8018a24:	3308      	adds	r3, #8
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	687a      	ldr	r2, [r7, #4]
 8018a2a:	429a      	cmp	r2, r3
 8018a2c:	d102      	bne.n	8018a34 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018a2e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018a32:	e100      	b.n	8018c36 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018a34:	7dfb      	ldrb	r3, [r7, #23]
 8018a36:	2b01      	cmp	r3, #1
 8018a38:	d140      	bne.n	8018abc <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018a3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a3e:	4980      	ldr	r1, [pc, #512]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018a40:	4613      	mov	r3, r2
 8018a42:	005b      	lsls	r3, r3, #1
 8018a44:	4413      	add	r3, r2
 8018a46:	00db      	lsls	r3, r3, #3
 8018a48:	440b      	add	r3, r1
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d01a      	beq.n	8018a86 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a54:	497a      	ldr	r1, [pc, #488]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018a56:	4613      	mov	r3, r2
 8018a58:	005b      	lsls	r3, r3, #1
 8018a5a:	4413      	add	r3, r2
 8018a5c:	00db      	lsls	r3, r3, #3
 8018a5e:	440b      	add	r3, r1
 8018a60:	3312      	adds	r3, #18
 8018a62:	881b      	ldrh	r3, [r3, #0]
 8018a64:	8bba      	ldrh	r2, [r7, #28]
 8018a66:	429a      	cmp	r2, r3
 8018a68:	d845      	bhi.n	8018af6 <etharp_find_entry+0x18a>
            old_queue = i;
 8018a6a:	8c3b      	ldrh	r3, [r7, #32]
 8018a6c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a72:	4973      	ldr	r1, [pc, #460]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018a74:	4613      	mov	r3, r2
 8018a76:	005b      	lsls	r3, r3, #1
 8018a78:	4413      	add	r3, r2
 8018a7a:	00db      	lsls	r3, r3, #3
 8018a7c:	440b      	add	r3, r1
 8018a7e:	3312      	adds	r3, #18
 8018a80:	881b      	ldrh	r3, [r3, #0]
 8018a82:	83bb      	strh	r3, [r7, #28]
 8018a84:	e037      	b.n	8018af6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018a86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a8a:	496d      	ldr	r1, [pc, #436]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018a8c:	4613      	mov	r3, r2
 8018a8e:	005b      	lsls	r3, r3, #1
 8018a90:	4413      	add	r3, r2
 8018a92:	00db      	lsls	r3, r3, #3
 8018a94:	440b      	add	r3, r1
 8018a96:	3312      	adds	r3, #18
 8018a98:	881b      	ldrh	r3, [r3, #0]
 8018a9a:	8b7a      	ldrh	r2, [r7, #26]
 8018a9c:	429a      	cmp	r2, r3
 8018a9e:	d82a      	bhi.n	8018af6 <etharp_find_entry+0x18a>
            old_pending = i;
 8018aa0:	8c3b      	ldrh	r3, [r7, #32]
 8018aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018aa4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018aa8:	4965      	ldr	r1, [pc, #404]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018aaa:	4613      	mov	r3, r2
 8018aac:	005b      	lsls	r3, r3, #1
 8018aae:	4413      	add	r3, r2
 8018ab0:	00db      	lsls	r3, r3, #3
 8018ab2:	440b      	add	r3, r1
 8018ab4:	3312      	adds	r3, #18
 8018ab6:	881b      	ldrh	r3, [r3, #0]
 8018ab8:	837b      	strh	r3, [r7, #26]
 8018aba:	e01c      	b.n	8018af6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018abc:	7dfb      	ldrb	r3, [r7, #23]
 8018abe:	2b01      	cmp	r3, #1
 8018ac0:	d919      	bls.n	8018af6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ac6:	495e      	ldr	r1, [pc, #376]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018ac8:	4613      	mov	r3, r2
 8018aca:	005b      	lsls	r3, r3, #1
 8018acc:	4413      	add	r3, r2
 8018ace:	00db      	lsls	r3, r3, #3
 8018ad0:	440b      	add	r3, r1
 8018ad2:	3312      	adds	r3, #18
 8018ad4:	881b      	ldrh	r3, [r3, #0]
 8018ad6:	8b3a      	ldrh	r2, [r7, #24]
 8018ad8:	429a      	cmp	r2, r3
 8018ada:	d80c      	bhi.n	8018af6 <etharp_find_entry+0x18a>
            old_stable = i;
 8018adc:	8c3b      	ldrh	r3, [r7, #32]
 8018ade:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ae4:	4956      	ldr	r1, [pc, #344]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018ae6:	4613      	mov	r3, r2
 8018ae8:	005b      	lsls	r3, r3, #1
 8018aea:	4413      	add	r3, r2
 8018aec:	00db      	lsls	r3, r3, #3
 8018aee:	440b      	add	r3, r1
 8018af0:	3312      	adds	r3, #18
 8018af2:	881b      	ldrh	r3, [r3, #0]
 8018af4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018af6:	8c3b      	ldrh	r3, [r7, #32]
 8018af8:	3301      	adds	r3, #1
 8018afa:	b29b      	uxth	r3, r3
 8018afc:	843b      	strh	r3, [r7, #32]
 8018afe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b02:	2b09      	cmp	r3, #9
 8018b04:	f77f af4c 	ble.w	80189a0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018b08:	7afb      	ldrb	r3, [r7, #11]
 8018b0a:	f003 0302 	and.w	r3, r3, #2
 8018b0e:	2b00      	cmp	r3, #0
 8018b10:	d108      	bne.n	8018b24 <etharp_find_entry+0x1b8>
 8018b12:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b16:	2b0a      	cmp	r3, #10
 8018b18:	d107      	bne.n	8018b2a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018b1a:	7afb      	ldrb	r3, [r7, #11]
 8018b1c:	f003 0301 	and.w	r3, r3, #1
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d102      	bne.n	8018b2a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018b24:	f04f 33ff 	mov.w	r3, #4294967295
 8018b28:	e085      	b.n	8018c36 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018b2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b2e:	2b09      	cmp	r3, #9
 8018b30:	dc02      	bgt.n	8018b38 <etharp_find_entry+0x1cc>
    i = empty;
 8018b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018b34:	843b      	strh	r3, [r7, #32]
 8018b36:	e039      	b.n	8018bac <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018b38:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018b3c:	2b09      	cmp	r3, #9
 8018b3e:	dc14      	bgt.n	8018b6a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018b40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018b42:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018b44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b48:	493d      	ldr	r1, [pc, #244]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018b4a:	4613      	mov	r3, r2
 8018b4c:	005b      	lsls	r3, r3, #1
 8018b4e:	4413      	add	r3, r2
 8018b50:	00db      	lsls	r3, r3, #3
 8018b52:	440b      	add	r3, r1
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	d018      	beq.n	8018b8c <etharp_find_entry+0x220>
 8018b5a:	4b3a      	ldr	r3, [pc, #232]	; (8018c44 <etharp_find_entry+0x2d8>)
 8018b5c:	f240 126d 	movw	r2, #365	; 0x16d
 8018b60:	493b      	ldr	r1, [pc, #236]	; (8018c50 <etharp_find_entry+0x2e4>)
 8018b62:	483a      	ldr	r0, [pc, #232]	; (8018c4c <etharp_find_entry+0x2e0>)
 8018b64:	f003 f892 	bl	801bc8c <iprintf>
 8018b68:	e010      	b.n	8018b8c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018b6a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018b6e:	2b09      	cmp	r3, #9
 8018b70:	dc02      	bgt.n	8018b78 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018b72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018b74:	843b      	strh	r3, [r7, #32]
 8018b76:	e009      	b.n	8018b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018b78:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018b7c:	2b09      	cmp	r3, #9
 8018b7e:	dc02      	bgt.n	8018b86 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018b80:	8bfb      	ldrh	r3, [r7, #30]
 8018b82:	843b      	strh	r3, [r7, #32]
 8018b84:	e002      	b.n	8018b8c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018b86:	f04f 33ff 	mov.w	r3, #4294967295
 8018b8a:	e054      	b.n	8018c36 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018b8c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b90:	2b09      	cmp	r3, #9
 8018b92:	dd06      	ble.n	8018ba2 <etharp_find_entry+0x236>
 8018b94:	4b2b      	ldr	r3, [pc, #172]	; (8018c44 <etharp_find_entry+0x2d8>)
 8018b96:	f240 127f 	movw	r2, #383	; 0x17f
 8018b9a:	492e      	ldr	r1, [pc, #184]	; (8018c54 <etharp_find_entry+0x2e8>)
 8018b9c:	482b      	ldr	r0, [pc, #172]	; (8018c4c <etharp_find_entry+0x2e0>)
 8018b9e:	f003 f875 	bl	801bc8c <iprintf>
    etharp_free_entry(i);
 8018ba2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ba6:	4618      	mov	r0, r3
 8018ba8:	f7ff fe06 	bl	80187b8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018bac:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018bb0:	2b09      	cmp	r3, #9
 8018bb2:	dd06      	ble.n	8018bc2 <etharp_find_entry+0x256>
 8018bb4:	4b23      	ldr	r3, [pc, #140]	; (8018c44 <etharp_find_entry+0x2d8>)
 8018bb6:	f240 1283 	movw	r2, #387	; 0x183
 8018bba:	4926      	ldr	r1, [pc, #152]	; (8018c54 <etharp_find_entry+0x2e8>)
 8018bbc:	4823      	ldr	r0, [pc, #140]	; (8018c4c <etharp_find_entry+0x2e0>)
 8018bbe:	f003 f865 	bl	801bc8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018bc2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bc6:	491e      	ldr	r1, [pc, #120]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018bc8:	4613      	mov	r3, r2
 8018bca:	005b      	lsls	r3, r3, #1
 8018bcc:	4413      	add	r3, r2
 8018bce:	00db      	lsls	r3, r3, #3
 8018bd0:	440b      	add	r3, r1
 8018bd2:	3314      	adds	r3, #20
 8018bd4:	781b      	ldrb	r3, [r3, #0]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d006      	beq.n	8018be8 <etharp_find_entry+0x27c>
 8018bda:	4b1a      	ldr	r3, [pc, #104]	; (8018c44 <etharp_find_entry+0x2d8>)
 8018bdc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018be0:	491d      	ldr	r1, [pc, #116]	; (8018c58 <etharp_find_entry+0x2ec>)
 8018be2:	481a      	ldr	r0, [pc, #104]	; (8018c4c <etharp_find_entry+0x2e0>)
 8018be4:	f003 f852 	bl	801bc8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d00b      	beq.n	8018c06 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018bee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	6819      	ldr	r1, [r3, #0]
 8018bf6:	4812      	ldr	r0, [pc, #72]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018bf8:	4613      	mov	r3, r2
 8018bfa:	005b      	lsls	r3, r3, #1
 8018bfc:	4413      	add	r3, r2
 8018bfe:	00db      	lsls	r3, r3, #3
 8018c00:	4403      	add	r3, r0
 8018c02:	3304      	adds	r3, #4
 8018c04:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018c06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c0a:	490d      	ldr	r1, [pc, #52]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018c0c:	4613      	mov	r3, r2
 8018c0e:	005b      	lsls	r3, r3, #1
 8018c10:	4413      	add	r3, r2
 8018c12:	00db      	lsls	r3, r3, #3
 8018c14:	440b      	add	r3, r1
 8018c16:	3312      	adds	r3, #18
 8018c18:	2200      	movs	r2, #0
 8018c1a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c20:	4907      	ldr	r1, [pc, #28]	; (8018c40 <etharp_find_entry+0x2d4>)
 8018c22:	4613      	mov	r3, r2
 8018c24:	005b      	lsls	r3, r3, #1
 8018c26:	4413      	add	r3, r2
 8018c28:	00db      	lsls	r3, r3, #3
 8018c2a:	440b      	add	r3, r1
 8018c2c:	3308      	adds	r3, #8
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018c32:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018c36:	4618      	mov	r0, r3
 8018c38:	3728      	adds	r7, #40	; 0x28
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	bd80      	pop	{r7, pc}
 8018c3e:	bf00      	nop
 8018c40:	20004834 	.word	0x20004834
 8018c44:	0802143c 	.word	0x0802143c
 8018c48:	08021474 	.word	0x08021474
 8018c4c:	080214b4 	.word	0x080214b4
 8018c50:	080214dc 	.word	0x080214dc
 8018c54:	080214f4 	.word	0x080214f4
 8018c58:	08021508 	.word	0x08021508

08018c5c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b088      	sub	sp, #32
 8018c60:	af02      	add	r7, sp, #8
 8018c62:	60f8      	str	r0, [r7, #12]
 8018c64:	60b9      	str	r1, [r7, #8]
 8018c66:	607a      	str	r2, [r7, #4]
 8018c68:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018c70:	2b06      	cmp	r3, #6
 8018c72:	d006      	beq.n	8018c82 <etharp_update_arp_entry+0x26>
 8018c74:	4b48      	ldr	r3, [pc, #288]	; (8018d98 <etharp_update_arp_entry+0x13c>)
 8018c76:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018c7a:	4948      	ldr	r1, [pc, #288]	; (8018d9c <etharp_update_arp_entry+0x140>)
 8018c7c:	4848      	ldr	r0, [pc, #288]	; (8018da0 <etharp_update_arp_entry+0x144>)
 8018c7e:	f003 f805 	bl	801bc8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018c82:	68bb      	ldr	r3, [r7, #8]
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d012      	beq.n	8018cae <etharp_update_arp_entry+0x52>
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d00e      	beq.n	8018cae <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	68f9      	ldr	r1, [r7, #12]
 8018c96:	4618      	mov	r0, r3
 8018c98:	f001 f8fe 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8018c9c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018c9e:	2b00      	cmp	r3, #0
 8018ca0:	d105      	bne.n	8018cae <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018ca2:	68bb      	ldr	r3, [r7, #8]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018caa:	2be0      	cmp	r3, #224	; 0xe0
 8018cac:	d102      	bne.n	8018cb4 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018cae:	f06f 030f 	mvn.w	r3, #15
 8018cb2:	e06c      	b.n	8018d8e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018cb4:	78fb      	ldrb	r3, [r7, #3]
 8018cb6:	68fa      	ldr	r2, [r7, #12]
 8018cb8:	4619      	mov	r1, r3
 8018cba:	68b8      	ldr	r0, [r7, #8]
 8018cbc:	f7ff fe56 	bl	801896c <etharp_find_entry>
 8018cc0:	4603      	mov	r3, r0
 8018cc2:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018cc4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	da02      	bge.n	8018cd2 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018ccc:	8afb      	ldrh	r3, [r7, #22]
 8018cce:	b25b      	sxtb	r3, r3
 8018cd0:	e05d      	b.n	8018d8e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018cd2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018cd6:	4933      	ldr	r1, [pc, #204]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018cd8:	4613      	mov	r3, r2
 8018cda:	005b      	lsls	r3, r3, #1
 8018cdc:	4413      	add	r3, r2
 8018cde:	00db      	lsls	r3, r3, #3
 8018ce0:	440b      	add	r3, r1
 8018ce2:	3314      	adds	r3, #20
 8018ce4:	2202      	movs	r2, #2
 8018ce6:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018ce8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018cec:	492d      	ldr	r1, [pc, #180]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018cee:	4613      	mov	r3, r2
 8018cf0:	005b      	lsls	r3, r3, #1
 8018cf2:	4413      	add	r3, r2
 8018cf4:	00db      	lsls	r3, r3, #3
 8018cf6:	440b      	add	r3, r1
 8018cf8:	3308      	adds	r3, #8
 8018cfa:	68fa      	ldr	r2, [r7, #12]
 8018cfc:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018cfe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d02:	4613      	mov	r3, r2
 8018d04:	005b      	lsls	r3, r3, #1
 8018d06:	4413      	add	r3, r2
 8018d08:	00db      	lsls	r3, r3, #3
 8018d0a:	3308      	adds	r3, #8
 8018d0c:	4a25      	ldr	r2, [pc, #148]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018d0e:	4413      	add	r3, r2
 8018d10:	3304      	adds	r3, #4
 8018d12:	2206      	movs	r2, #6
 8018d14:	6879      	ldr	r1, [r7, #4]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f002 fb60 	bl	801b3dc <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018d1c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d20:	4920      	ldr	r1, [pc, #128]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018d22:	4613      	mov	r3, r2
 8018d24:	005b      	lsls	r3, r3, #1
 8018d26:	4413      	add	r3, r2
 8018d28:	00db      	lsls	r3, r3, #3
 8018d2a:	440b      	add	r3, r1
 8018d2c:	3312      	adds	r3, #18
 8018d2e:	2200      	movs	r2, #0
 8018d30:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018d32:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d36:	491b      	ldr	r1, [pc, #108]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018d38:	4613      	mov	r3, r2
 8018d3a:	005b      	lsls	r3, r3, #1
 8018d3c:	4413      	add	r3, r2
 8018d3e:	00db      	lsls	r3, r3, #3
 8018d40:	440b      	add	r3, r1
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	d021      	beq.n	8018d8c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018d48:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d4c:	4915      	ldr	r1, [pc, #84]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018d4e:	4613      	mov	r3, r2
 8018d50:	005b      	lsls	r3, r3, #1
 8018d52:	4413      	add	r3, r2
 8018d54:	00db      	lsls	r3, r3, #3
 8018d56:	440b      	add	r3, r1
 8018d58:	681b      	ldr	r3, [r3, #0]
 8018d5a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018d5c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d60:	4910      	ldr	r1, [pc, #64]	; (8018da4 <etharp_update_arp_entry+0x148>)
 8018d62:	4613      	mov	r3, r2
 8018d64:	005b      	lsls	r3, r3, #1
 8018d66:	4413      	add	r3, r2
 8018d68:	00db      	lsls	r3, r3, #3
 8018d6a:	440b      	add	r3, r1
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018d76:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d7a:	9300      	str	r3, [sp, #0]
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6939      	ldr	r1, [r7, #16]
 8018d80:	68f8      	ldr	r0, [r7, #12]
 8018d82:	f002 f8cf 	bl	801af24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018d86:	6938      	ldr	r0, [r7, #16]
 8018d88:	f7f8 fc50 	bl	801162c <pbuf_free>
  }
  return ERR_OK;
 8018d8c:	2300      	movs	r3, #0
}
 8018d8e:	4618      	mov	r0, r3
 8018d90:	3718      	adds	r7, #24
 8018d92:	46bd      	mov	sp, r7
 8018d94:	bd80      	pop	{r7, pc}
 8018d96:	bf00      	nop
 8018d98:	0802143c 	.word	0x0802143c
 8018d9c:	08021534 	.word	0x08021534
 8018da0:	080214b4 	.word	0x080214b4
 8018da4:	20004834 	.word	0x20004834

08018da8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018da8:	b580      	push	{r7, lr}
 8018daa:	b084      	sub	sp, #16
 8018dac:	af00      	add	r7, sp, #0
 8018dae:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018db0:	2300      	movs	r3, #0
 8018db2:	60fb      	str	r3, [r7, #12]
 8018db4:	e01e      	b.n	8018df4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018db6:	4913      	ldr	r1, [pc, #76]	; (8018e04 <etharp_cleanup_netif+0x5c>)
 8018db8:	68fa      	ldr	r2, [r7, #12]
 8018dba:	4613      	mov	r3, r2
 8018dbc:	005b      	lsls	r3, r3, #1
 8018dbe:	4413      	add	r3, r2
 8018dc0:	00db      	lsls	r3, r3, #3
 8018dc2:	440b      	add	r3, r1
 8018dc4:	3314      	adds	r3, #20
 8018dc6:	781b      	ldrb	r3, [r3, #0]
 8018dc8:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018dca:	7afb      	ldrb	r3, [r7, #11]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d00e      	beq.n	8018dee <etharp_cleanup_netif+0x46>
 8018dd0:	490c      	ldr	r1, [pc, #48]	; (8018e04 <etharp_cleanup_netif+0x5c>)
 8018dd2:	68fa      	ldr	r2, [r7, #12]
 8018dd4:	4613      	mov	r3, r2
 8018dd6:	005b      	lsls	r3, r3, #1
 8018dd8:	4413      	add	r3, r2
 8018dda:	00db      	lsls	r3, r3, #3
 8018ddc:	440b      	add	r3, r1
 8018dde:	3308      	adds	r3, #8
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	687a      	ldr	r2, [r7, #4]
 8018de4:	429a      	cmp	r2, r3
 8018de6:	d102      	bne.n	8018dee <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018de8:	68f8      	ldr	r0, [r7, #12]
 8018dea:	f7ff fce5 	bl	80187b8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018dee:	68fb      	ldr	r3, [r7, #12]
 8018df0:	3301      	adds	r3, #1
 8018df2:	60fb      	str	r3, [r7, #12]
 8018df4:	68fb      	ldr	r3, [r7, #12]
 8018df6:	2b09      	cmp	r3, #9
 8018df8:	dddd      	ble.n	8018db6 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018dfa:	bf00      	nop
 8018dfc:	bf00      	nop
 8018dfe:	3710      	adds	r7, #16
 8018e00:	46bd      	mov	sp, r7
 8018e02:	bd80      	pop	{r7, pc}
 8018e04:	20004834 	.word	0x20004834

08018e08 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018e08:	b5b0      	push	{r4, r5, r7, lr}
 8018e0a:	b08a      	sub	sp, #40	; 0x28
 8018e0c:	af04      	add	r7, sp, #16
 8018e0e:	6078      	str	r0, [r7, #4]
 8018e10:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018e12:	683b      	ldr	r3, [r7, #0]
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	d107      	bne.n	8018e28 <etharp_input+0x20>
 8018e18:	4b3d      	ldr	r3, [pc, #244]	; (8018f10 <etharp_input+0x108>)
 8018e1a:	f240 228a 	movw	r2, #650	; 0x28a
 8018e1e:	493d      	ldr	r1, [pc, #244]	; (8018f14 <etharp_input+0x10c>)
 8018e20:	483d      	ldr	r0, [pc, #244]	; (8018f18 <etharp_input+0x110>)
 8018e22:	f002 ff33 	bl	801bc8c <iprintf>
 8018e26:	e06f      	b.n	8018f08 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	685b      	ldr	r3, [r3, #4]
 8018e2c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018e2e:	693b      	ldr	r3, [r7, #16]
 8018e30:	881b      	ldrh	r3, [r3, #0]
 8018e32:	b29b      	uxth	r3, r3
 8018e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018e38:	d10c      	bne.n	8018e54 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018e3e:	2b06      	cmp	r3, #6
 8018e40:	d108      	bne.n	8018e54 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018e42:	693b      	ldr	r3, [r7, #16]
 8018e44:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018e46:	2b04      	cmp	r3, #4
 8018e48:	d104      	bne.n	8018e54 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018e4a:	693b      	ldr	r3, [r7, #16]
 8018e4c:	885b      	ldrh	r3, [r3, #2]
 8018e4e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018e50:	2b08      	cmp	r3, #8
 8018e52:	d003      	beq.n	8018e5c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018e54:	6878      	ldr	r0, [r7, #4]
 8018e56:	f7f8 fbe9 	bl	801162c <pbuf_free>
    return;
 8018e5a:	e055      	b.n	8018f08 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018e5c:	693b      	ldr	r3, [r7, #16]
 8018e5e:	330e      	adds	r3, #14
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	3318      	adds	r3, #24
 8018e68:	681b      	ldr	r3, [r3, #0]
 8018e6a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018e6c:	683b      	ldr	r3, [r7, #0]
 8018e6e:	3304      	adds	r3, #4
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d102      	bne.n	8018e7c <etharp_input+0x74>
    for_us = 0;
 8018e76:	2300      	movs	r3, #0
 8018e78:	75fb      	strb	r3, [r7, #23]
 8018e7a:	e009      	b.n	8018e90 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018e7c:	68ba      	ldr	r2, [r7, #8]
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	3304      	adds	r3, #4
 8018e82:	681b      	ldr	r3, [r3, #0]
 8018e84:	429a      	cmp	r2, r3
 8018e86:	bf0c      	ite	eq
 8018e88:	2301      	moveq	r3, #1
 8018e8a:	2300      	movne	r3, #0
 8018e8c:	b2db      	uxtb	r3, r3
 8018e8e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018e90:	693b      	ldr	r3, [r7, #16]
 8018e92:	f103 0208 	add.w	r2, r3, #8
 8018e96:	7dfb      	ldrb	r3, [r7, #23]
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	d001      	beq.n	8018ea0 <etharp_input+0x98>
 8018e9c:	2301      	movs	r3, #1
 8018e9e:	e000      	b.n	8018ea2 <etharp_input+0x9a>
 8018ea0:	2302      	movs	r3, #2
 8018ea2:	f107 010c 	add.w	r1, r7, #12
 8018ea6:	6838      	ldr	r0, [r7, #0]
 8018ea8:	f7ff fed8 	bl	8018c5c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018eac:	693b      	ldr	r3, [r7, #16]
 8018eae:	88db      	ldrh	r3, [r3, #6]
 8018eb0:	b29b      	uxth	r3, r3
 8018eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018eb6:	d003      	beq.n	8018ec0 <etharp_input+0xb8>
 8018eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018ebc:	d01e      	beq.n	8018efc <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018ebe:	e020      	b.n	8018f02 <etharp_input+0xfa>
      if (for_us) {
 8018ec0:	7dfb      	ldrb	r3, [r7, #23]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d01c      	beq.n	8018f00 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018ec6:	683b      	ldr	r3, [r7, #0]
 8018ec8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018ecc:	693b      	ldr	r3, [r7, #16]
 8018ece:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018ed2:	683b      	ldr	r3, [r7, #0]
 8018ed4:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018ed8:	683b      	ldr	r3, [r7, #0]
 8018eda:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018edc:	693a      	ldr	r2, [r7, #16]
 8018ede:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018ee0:	2102      	movs	r1, #2
 8018ee2:	9103      	str	r1, [sp, #12]
 8018ee4:	f107 010c 	add.w	r1, r7, #12
 8018ee8:	9102      	str	r1, [sp, #8]
 8018eea:	9201      	str	r2, [sp, #4]
 8018eec:	9300      	str	r3, [sp, #0]
 8018eee:	462b      	mov	r3, r5
 8018ef0:	4622      	mov	r2, r4
 8018ef2:	4601      	mov	r1, r0
 8018ef4:	6838      	ldr	r0, [r7, #0]
 8018ef6:	f000 faeb 	bl	80194d0 <etharp_raw>
      break;
 8018efa:	e001      	b.n	8018f00 <etharp_input+0xf8>
      break;
 8018efc:	bf00      	nop
 8018efe:	e000      	b.n	8018f02 <etharp_input+0xfa>
      break;
 8018f00:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	f7f8 fb92 	bl	801162c <pbuf_free>
}
 8018f08:	3718      	adds	r7, #24
 8018f0a:	46bd      	mov	sp, r7
 8018f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8018f0e:	bf00      	nop
 8018f10:	0802143c 	.word	0x0802143c
 8018f14:	0802158c 	.word	0x0802158c
 8018f18:	080214b4 	.word	0x080214b4

08018f1c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018f1c:	b580      	push	{r7, lr}
 8018f1e:	b086      	sub	sp, #24
 8018f20:	af02      	add	r7, sp, #8
 8018f22:	60f8      	str	r0, [r7, #12]
 8018f24:	60b9      	str	r1, [r7, #8]
 8018f26:	4613      	mov	r3, r2
 8018f28:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018f2a:	79fa      	ldrb	r2, [r7, #7]
 8018f2c:	4944      	ldr	r1, [pc, #272]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018f2e:	4613      	mov	r3, r2
 8018f30:	005b      	lsls	r3, r3, #1
 8018f32:	4413      	add	r3, r2
 8018f34:	00db      	lsls	r3, r3, #3
 8018f36:	440b      	add	r3, r1
 8018f38:	3314      	adds	r3, #20
 8018f3a:	781b      	ldrb	r3, [r3, #0]
 8018f3c:	2b01      	cmp	r3, #1
 8018f3e:	d806      	bhi.n	8018f4e <etharp_output_to_arp_index+0x32>
 8018f40:	4b40      	ldr	r3, [pc, #256]	; (8019044 <etharp_output_to_arp_index+0x128>)
 8018f42:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018f46:	4940      	ldr	r1, [pc, #256]	; (8019048 <etharp_output_to_arp_index+0x12c>)
 8018f48:	4840      	ldr	r0, [pc, #256]	; (801904c <etharp_output_to_arp_index+0x130>)
 8018f4a:	f002 fe9f 	bl	801bc8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018f4e:	79fa      	ldrb	r2, [r7, #7]
 8018f50:	493b      	ldr	r1, [pc, #236]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018f52:	4613      	mov	r3, r2
 8018f54:	005b      	lsls	r3, r3, #1
 8018f56:	4413      	add	r3, r2
 8018f58:	00db      	lsls	r3, r3, #3
 8018f5a:	440b      	add	r3, r1
 8018f5c:	3314      	adds	r3, #20
 8018f5e:	781b      	ldrb	r3, [r3, #0]
 8018f60:	2b02      	cmp	r3, #2
 8018f62:	d153      	bne.n	801900c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018f64:	79fa      	ldrb	r2, [r7, #7]
 8018f66:	4936      	ldr	r1, [pc, #216]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018f68:	4613      	mov	r3, r2
 8018f6a:	005b      	lsls	r3, r3, #1
 8018f6c:	4413      	add	r3, r2
 8018f6e:	00db      	lsls	r3, r3, #3
 8018f70:	440b      	add	r3, r1
 8018f72:	3312      	adds	r3, #18
 8018f74:	881b      	ldrh	r3, [r3, #0]
 8018f76:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018f7a:	d919      	bls.n	8018fb0 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018f7c:	79fa      	ldrb	r2, [r7, #7]
 8018f7e:	4613      	mov	r3, r2
 8018f80:	005b      	lsls	r3, r3, #1
 8018f82:	4413      	add	r3, r2
 8018f84:	00db      	lsls	r3, r3, #3
 8018f86:	4a2e      	ldr	r2, [pc, #184]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018f88:	4413      	add	r3, r2
 8018f8a:	3304      	adds	r3, #4
 8018f8c:	4619      	mov	r1, r3
 8018f8e:	68f8      	ldr	r0, [r7, #12]
 8018f90:	f000 fb4c 	bl	801962c <etharp_request>
 8018f94:	4603      	mov	r3, r0
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d138      	bne.n	801900c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018f9a:	79fa      	ldrb	r2, [r7, #7]
 8018f9c:	4928      	ldr	r1, [pc, #160]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018f9e:	4613      	mov	r3, r2
 8018fa0:	005b      	lsls	r3, r3, #1
 8018fa2:	4413      	add	r3, r2
 8018fa4:	00db      	lsls	r3, r3, #3
 8018fa6:	440b      	add	r3, r1
 8018fa8:	3314      	adds	r3, #20
 8018faa:	2203      	movs	r2, #3
 8018fac:	701a      	strb	r2, [r3, #0]
 8018fae:	e02d      	b.n	801900c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018fb0:	79fa      	ldrb	r2, [r7, #7]
 8018fb2:	4923      	ldr	r1, [pc, #140]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018fb4:	4613      	mov	r3, r2
 8018fb6:	005b      	lsls	r3, r3, #1
 8018fb8:	4413      	add	r3, r2
 8018fba:	00db      	lsls	r3, r3, #3
 8018fbc:	440b      	add	r3, r1
 8018fbe:	3312      	adds	r3, #18
 8018fc0:	881b      	ldrh	r3, [r3, #0]
 8018fc2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018fc6:	d321      	bcc.n	801900c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018fc8:	79fa      	ldrb	r2, [r7, #7]
 8018fca:	4613      	mov	r3, r2
 8018fcc:	005b      	lsls	r3, r3, #1
 8018fce:	4413      	add	r3, r2
 8018fd0:	00db      	lsls	r3, r3, #3
 8018fd2:	4a1b      	ldr	r2, [pc, #108]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018fd4:	4413      	add	r3, r2
 8018fd6:	1d19      	adds	r1, r3, #4
 8018fd8:	79fa      	ldrb	r2, [r7, #7]
 8018fda:	4613      	mov	r3, r2
 8018fdc:	005b      	lsls	r3, r3, #1
 8018fde:	4413      	add	r3, r2
 8018fe0:	00db      	lsls	r3, r3, #3
 8018fe2:	3308      	adds	r3, #8
 8018fe4:	4a16      	ldr	r2, [pc, #88]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018fe6:	4413      	add	r3, r2
 8018fe8:	3304      	adds	r3, #4
 8018fea:	461a      	mov	r2, r3
 8018fec:	68f8      	ldr	r0, [r7, #12]
 8018fee:	f000 fafb 	bl	80195e8 <etharp_request_dst>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d109      	bne.n	801900c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018ff8:	79fa      	ldrb	r2, [r7, #7]
 8018ffa:	4911      	ldr	r1, [pc, #68]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8018ffc:	4613      	mov	r3, r2
 8018ffe:	005b      	lsls	r3, r3, #1
 8019000:	4413      	add	r3, r2
 8019002:	00db      	lsls	r3, r3, #3
 8019004:	440b      	add	r3, r1
 8019006:	3314      	adds	r3, #20
 8019008:	2203      	movs	r2, #3
 801900a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019012:	79fa      	ldrb	r2, [r7, #7]
 8019014:	4613      	mov	r3, r2
 8019016:	005b      	lsls	r3, r3, #1
 8019018:	4413      	add	r3, r2
 801901a:	00db      	lsls	r3, r3, #3
 801901c:	3308      	adds	r3, #8
 801901e:	4a08      	ldr	r2, [pc, #32]	; (8019040 <etharp_output_to_arp_index+0x124>)
 8019020:	4413      	add	r3, r2
 8019022:	3304      	adds	r3, #4
 8019024:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019028:	9200      	str	r2, [sp, #0]
 801902a:	460a      	mov	r2, r1
 801902c:	68b9      	ldr	r1, [r7, #8]
 801902e:	68f8      	ldr	r0, [r7, #12]
 8019030:	f001 ff78 	bl	801af24 <ethernet_output>
 8019034:	4603      	mov	r3, r0
}
 8019036:	4618      	mov	r0, r3
 8019038:	3710      	adds	r7, #16
 801903a:	46bd      	mov	sp, r7
 801903c:	bd80      	pop	{r7, pc}
 801903e:	bf00      	nop
 8019040:	20004834 	.word	0x20004834
 8019044:	0802143c 	.word	0x0802143c
 8019048:	080215ac 	.word	0x080215ac
 801904c:	080214b4 	.word	0x080214b4

08019050 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b08a      	sub	sp, #40	; 0x28
 8019054:	af02      	add	r7, sp, #8
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019060:	68fb      	ldr	r3, [r7, #12]
 8019062:	2b00      	cmp	r3, #0
 8019064:	d106      	bne.n	8019074 <etharp_output+0x24>
 8019066:	4b73      	ldr	r3, [pc, #460]	; (8019234 <etharp_output+0x1e4>)
 8019068:	f240 321e 	movw	r2, #798	; 0x31e
 801906c:	4972      	ldr	r1, [pc, #456]	; (8019238 <etharp_output+0x1e8>)
 801906e:	4873      	ldr	r0, [pc, #460]	; (801923c <etharp_output+0x1ec>)
 8019070:	f002 fe0c 	bl	801bc8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8019074:	68bb      	ldr	r3, [r7, #8]
 8019076:	2b00      	cmp	r3, #0
 8019078:	d106      	bne.n	8019088 <etharp_output+0x38>
 801907a:	4b6e      	ldr	r3, [pc, #440]	; (8019234 <etharp_output+0x1e4>)
 801907c:	f240 321f 	movw	r2, #799	; 0x31f
 8019080:	496f      	ldr	r1, [pc, #444]	; (8019240 <etharp_output+0x1f0>)
 8019082:	486e      	ldr	r0, [pc, #440]	; (801923c <etharp_output+0x1ec>)
 8019084:	f002 fe02 	bl	801bc8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	2b00      	cmp	r3, #0
 801908c:	d106      	bne.n	801909c <etharp_output+0x4c>
 801908e:	4b69      	ldr	r3, [pc, #420]	; (8019234 <etharp_output+0x1e4>)
 8019090:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019094:	496b      	ldr	r1, [pc, #428]	; (8019244 <etharp_output+0x1f4>)
 8019096:	4869      	ldr	r0, [pc, #420]	; (801923c <etharp_output+0x1ec>)
 8019098:	f002 fdf8 	bl	801bc8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	681b      	ldr	r3, [r3, #0]
 80190a0:	68f9      	ldr	r1, [r7, #12]
 80190a2:	4618      	mov	r0, r3
 80190a4:	f000 fef8 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d002      	beq.n	80190b4 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80190ae:	4b66      	ldr	r3, [pc, #408]	; (8019248 <etharp_output+0x1f8>)
 80190b0:	61fb      	str	r3, [r7, #28]
 80190b2:	e0af      	b.n	8019214 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80190bc:	2be0      	cmp	r3, #224	; 0xe0
 80190be:	d118      	bne.n	80190f2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80190c0:	2301      	movs	r3, #1
 80190c2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80190c4:	2300      	movs	r3, #0
 80190c6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80190c8:	235e      	movs	r3, #94	; 0x5e
 80190ca:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80190cc:	687b      	ldr	r3, [r7, #4]
 80190ce:	3301      	adds	r3, #1
 80190d0:	781b      	ldrb	r3, [r3, #0]
 80190d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80190d6:	b2db      	uxtb	r3, r3
 80190d8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	3302      	adds	r3, #2
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	3303      	adds	r3, #3
 80190e6:	781b      	ldrb	r3, [r3, #0]
 80190e8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80190ea:	f107 0310 	add.w	r3, r7, #16
 80190ee:	61fb      	str	r3, [r7, #28]
 80190f0:	e090      	b.n	8019214 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80190f2:	687b      	ldr	r3, [r7, #4]
 80190f4:	681a      	ldr	r2, [r3, #0]
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	3304      	adds	r3, #4
 80190fa:	681b      	ldr	r3, [r3, #0]
 80190fc:	405a      	eors	r2, r3
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	3308      	adds	r3, #8
 8019102:	681b      	ldr	r3, [r3, #0]
 8019104:	4013      	ands	r3, r2
 8019106:	2b00      	cmp	r3, #0
 8019108:	d012      	beq.n	8019130 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801910a:	687b      	ldr	r3, [r7, #4]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019110:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019114:	4293      	cmp	r3, r2
 8019116:	d00b      	beq.n	8019130 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	330c      	adds	r3, #12
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	2b00      	cmp	r3, #0
 8019120:	d003      	beq.n	801912a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	330c      	adds	r3, #12
 8019126:	61bb      	str	r3, [r7, #24]
 8019128:	e002      	b.n	8019130 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801912a:	f06f 0303 	mvn.w	r3, #3
 801912e:	e07d      	b.n	801922c <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019130:	4b46      	ldr	r3, [pc, #280]	; (801924c <etharp_output+0x1fc>)
 8019132:	781b      	ldrb	r3, [r3, #0]
 8019134:	4619      	mov	r1, r3
 8019136:	4a46      	ldr	r2, [pc, #280]	; (8019250 <etharp_output+0x200>)
 8019138:	460b      	mov	r3, r1
 801913a:	005b      	lsls	r3, r3, #1
 801913c:	440b      	add	r3, r1
 801913e:	00db      	lsls	r3, r3, #3
 8019140:	4413      	add	r3, r2
 8019142:	3314      	adds	r3, #20
 8019144:	781b      	ldrb	r3, [r3, #0]
 8019146:	2b01      	cmp	r3, #1
 8019148:	d925      	bls.n	8019196 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801914a:	4b40      	ldr	r3, [pc, #256]	; (801924c <etharp_output+0x1fc>)
 801914c:	781b      	ldrb	r3, [r3, #0]
 801914e:	4619      	mov	r1, r3
 8019150:	4a3f      	ldr	r2, [pc, #252]	; (8019250 <etharp_output+0x200>)
 8019152:	460b      	mov	r3, r1
 8019154:	005b      	lsls	r3, r3, #1
 8019156:	440b      	add	r3, r1
 8019158:	00db      	lsls	r3, r3, #3
 801915a:	4413      	add	r3, r2
 801915c:	3308      	adds	r3, #8
 801915e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019160:	68fa      	ldr	r2, [r7, #12]
 8019162:	429a      	cmp	r2, r3
 8019164:	d117      	bne.n	8019196 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8019166:	69bb      	ldr	r3, [r7, #24]
 8019168:	681a      	ldr	r2, [r3, #0]
 801916a:	4b38      	ldr	r3, [pc, #224]	; (801924c <etharp_output+0x1fc>)
 801916c:	781b      	ldrb	r3, [r3, #0]
 801916e:	4618      	mov	r0, r3
 8019170:	4937      	ldr	r1, [pc, #220]	; (8019250 <etharp_output+0x200>)
 8019172:	4603      	mov	r3, r0
 8019174:	005b      	lsls	r3, r3, #1
 8019176:	4403      	add	r3, r0
 8019178:	00db      	lsls	r3, r3, #3
 801917a:	440b      	add	r3, r1
 801917c:	3304      	adds	r3, #4
 801917e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019180:	429a      	cmp	r2, r3
 8019182:	d108      	bne.n	8019196 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019184:	4b31      	ldr	r3, [pc, #196]	; (801924c <etharp_output+0x1fc>)
 8019186:	781b      	ldrb	r3, [r3, #0]
 8019188:	461a      	mov	r2, r3
 801918a:	68b9      	ldr	r1, [r7, #8]
 801918c:	68f8      	ldr	r0, [r7, #12]
 801918e:	f7ff fec5 	bl	8018f1c <etharp_output_to_arp_index>
 8019192:	4603      	mov	r3, r0
 8019194:	e04a      	b.n	801922c <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019196:	2300      	movs	r3, #0
 8019198:	75fb      	strb	r3, [r7, #23]
 801919a:	e031      	b.n	8019200 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801919c:	7dfa      	ldrb	r2, [r7, #23]
 801919e:	492c      	ldr	r1, [pc, #176]	; (8019250 <etharp_output+0x200>)
 80191a0:	4613      	mov	r3, r2
 80191a2:	005b      	lsls	r3, r3, #1
 80191a4:	4413      	add	r3, r2
 80191a6:	00db      	lsls	r3, r3, #3
 80191a8:	440b      	add	r3, r1
 80191aa:	3314      	adds	r3, #20
 80191ac:	781b      	ldrb	r3, [r3, #0]
 80191ae:	2b01      	cmp	r3, #1
 80191b0:	d923      	bls.n	80191fa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80191b2:	7dfa      	ldrb	r2, [r7, #23]
 80191b4:	4926      	ldr	r1, [pc, #152]	; (8019250 <etharp_output+0x200>)
 80191b6:	4613      	mov	r3, r2
 80191b8:	005b      	lsls	r3, r3, #1
 80191ba:	4413      	add	r3, r2
 80191bc:	00db      	lsls	r3, r3, #3
 80191be:	440b      	add	r3, r1
 80191c0:	3308      	adds	r3, #8
 80191c2:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80191c4:	68fa      	ldr	r2, [r7, #12]
 80191c6:	429a      	cmp	r2, r3
 80191c8:	d117      	bne.n	80191fa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80191ca:	69bb      	ldr	r3, [r7, #24]
 80191cc:	6819      	ldr	r1, [r3, #0]
 80191ce:	7dfa      	ldrb	r2, [r7, #23]
 80191d0:	481f      	ldr	r0, [pc, #124]	; (8019250 <etharp_output+0x200>)
 80191d2:	4613      	mov	r3, r2
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	4413      	add	r3, r2
 80191d8:	00db      	lsls	r3, r3, #3
 80191da:	4403      	add	r3, r0
 80191dc:	3304      	adds	r3, #4
 80191de:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80191e0:	4299      	cmp	r1, r3
 80191e2:	d10a      	bne.n	80191fa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80191e4:	4a19      	ldr	r2, [pc, #100]	; (801924c <etharp_output+0x1fc>)
 80191e6:	7dfb      	ldrb	r3, [r7, #23]
 80191e8:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80191ea:	7dfb      	ldrb	r3, [r7, #23]
 80191ec:	461a      	mov	r2, r3
 80191ee:	68b9      	ldr	r1, [r7, #8]
 80191f0:	68f8      	ldr	r0, [r7, #12]
 80191f2:	f7ff fe93 	bl	8018f1c <etharp_output_to_arp_index>
 80191f6:	4603      	mov	r3, r0
 80191f8:	e018      	b.n	801922c <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80191fa:	7dfb      	ldrb	r3, [r7, #23]
 80191fc:	3301      	adds	r3, #1
 80191fe:	75fb      	strb	r3, [r7, #23]
 8019200:	7dfb      	ldrb	r3, [r7, #23]
 8019202:	2b09      	cmp	r3, #9
 8019204:	d9ca      	bls.n	801919c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019206:	68ba      	ldr	r2, [r7, #8]
 8019208:	69b9      	ldr	r1, [r7, #24]
 801920a:	68f8      	ldr	r0, [r7, #12]
 801920c:	f000 f822 	bl	8019254 <etharp_query>
 8019210:	4603      	mov	r3, r0
 8019212:	e00b      	b.n	801922c <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019214:	68fb      	ldr	r3, [r7, #12]
 8019216:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801921a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801921e:	9300      	str	r3, [sp, #0]
 8019220:	69fb      	ldr	r3, [r7, #28]
 8019222:	68b9      	ldr	r1, [r7, #8]
 8019224:	68f8      	ldr	r0, [r7, #12]
 8019226:	f001 fe7d 	bl	801af24 <ethernet_output>
 801922a:	4603      	mov	r3, r0
}
 801922c:	4618      	mov	r0, r3
 801922e:	3720      	adds	r7, #32
 8019230:	46bd      	mov	sp, r7
 8019232:	bd80      	pop	{r7, pc}
 8019234:	0802143c 	.word	0x0802143c
 8019238:	0802158c 	.word	0x0802158c
 801923c:	080214b4 	.word	0x080214b4
 8019240:	080215dc 	.word	0x080215dc
 8019244:	0802157c 	.word	0x0802157c
 8019248:	08021cec 	.word	0x08021cec
 801924c:	20004924 	.word	0x20004924
 8019250:	20004834 	.word	0x20004834

08019254 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8019254:	b580      	push	{r7, lr}
 8019256:	b08c      	sub	sp, #48	; 0x30
 8019258:	af02      	add	r7, sp, #8
 801925a:	60f8      	str	r0, [r7, #12]
 801925c:	60b9      	str	r1, [r7, #8]
 801925e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	3326      	adds	r3, #38	; 0x26
 8019264:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8019266:	23ff      	movs	r3, #255	; 0xff
 8019268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801926c:	2300      	movs	r3, #0
 801926e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019270:	68bb      	ldr	r3, [r7, #8]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	68f9      	ldr	r1, [r7, #12]
 8019276:	4618      	mov	r0, r3
 8019278:	f000 fe0e 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 801927c:	4603      	mov	r3, r0
 801927e:	2b00      	cmp	r3, #0
 8019280:	d10c      	bne.n	801929c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019282:	68bb      	ldr	r3, [r7, #8]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801928a:	2be0      	cmp	r3, #224	; 0xe0
 801928c:	d006      	beq.n	801929c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801928e:	68bb      	ldr	r3, [r7, #8]
 8019290:	2b00      	cmp	r3, #0
 8019292:	d003      	beq.n	801929c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	2b00      	cmp	r3, #0
 801929a:	d102      	bne.n	80192a2 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801929c:	f06f 030f 	mvn.w	r3, #15
 80192a0:	e101      	b.n	80194a6 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80192a2:	68fa      	ldr	r2, [r7, #12]
 80192a4:	2101      	movs	r1, #1
 80192a6:	68b8      	ldr	r0, [r7, #8]
 80192a8:	f7ff fb60 	bl	801896c <etharp_find_entry>
 80192ac:	4603      	mov	r3, r0
 80192ae:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80192b0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	da02      	bge.n	80192be <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80192b8:	8a7b      	ldrh	r3, [r7, #18]
 80192ba:	b25b      	sxtb	r3, r3
 80192bc:	e0f3      	b.n	80194a6 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80192be:	8a7b      	ldrh	r3, [r7, #18]
 80192c0:	2b7e      	cmp	r3, #126	; 0x7e
 80192c2:	d906      	bls.n	80192d2 <etharp_query+0x7e>
 80192c4:	4b7a      	ldr	r3, [pc, #488]	; (80194b0 <etharp_query+0x25c>)
 80192c6:	f240 32c1 	movw	r2, #961	; 0x3c1
 80192ca:	497a      	ldr	r1, [pc, #488]	; (80194b4 <etharp_query+0x260>)
 80192cc:	487a      	ldr	r0, [pc, #488]	; (80194b8 <etharp_query+0x264>)
 80192ce:	f002 fcdd 	bl	801bc8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80192d2:	8a7b      	ldrh	r3, [r7, #18]
 80192d4:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80192d6:	7c7a      	ldrb	r2, [r7, #17]
 80192d8:	4978      	ldr	r1, [pc, #480]	; (80194bc <etharp_query+0x268>)
 80192da:	4613      	mov	r3, r2
 80192dc:	005b      	lsls	r3, r3, #1
 80192de:	4413      	add	r3, r2
 80192e0:	00db      	lsls	r3, r3, #3
 80192e2:	440b      	add	r3, r1
 80192e4:	3314      	adds	r3, #20
 80192e6:	781b      	ldrb	r3, [r3, #0]
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	d115      	bne.n	8019318 <etharp_query+0xc4>
    is_new_entry = 1;
 80192ec:	2301      	movs	r3, #1
 80192ee:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80192f0:	7c7a      	ldrb	r2, [r7, #17]
 80192f2:	4972      	ldr	r1, [pc, #456]	; (80194bc <etharp_query+0x268>)
 80192f4:	4613      	mov	r3, r2
 80192f6:	005b      	lsls	r3, r3, #1
 80192f8:	4413      	add	r3, r2
 80192fa:	00db      	lsls	r3, r3, #3
 80192fc:	440b      	add	r3, r1
 80192fe:	3314      	adds	r3, #20
 8019300:	2201      	movs	r2, #1
 8019302:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019304:	7c7a      	ldrb	r2, [r7, #17]
 8019306:	496d      	ldr	r1, [pc, #436]	; (80194bc <etharp_query+0x268>)
 8019308:	4613      	mov	r3, r2
 801930a:	005b      	lsls	r3, r3, #1
 801930c:	4413      	add	r3, r2
 801930e:	00db      	lsls	r3, r3, #3
 8019310:	440b      	add	r3, r1
 8019312:	3308      	adds	r3, #8
 8019314:	68fa      	ldr	r2, [r7, #12]
 8019316:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019318:	7c7a      	ldrb	r2, [r7, #17]
 801931a:	4968      	ldr	r1, [pc, #416]	; (80194bc <etharp_query+0x268>)
 801931c:	4613      	mov	r3, r2
 801931e:	005b      	lsls	r3, r3, #1
 8019320:	4413      	add	r3, r2
 8019322:	00db      	lsls	r3, r3, #3
 8019324:	440b      	add	r3, r1
 8019326:	3314      	adds	r3, #20
 8019328:	781b      	ldrb	r3, [r3, #0]
 801932a:	2b01      	cmp	r3, #1
 801932c:	d011      	beq.n	8019352 <etharp_query+0xfe>
 801932e:	7c7a      	ldrb	r2, [r7, #17]
 8019330:	4962      	ldr	r1, [pc, #392]	; (80194bc <etharp_query+0x268>)
 8019332:	4613      	mov	r3, r2
 8019334:	005b      	lsls	r3, r3, #1
 8019336:	4413      	add	r3, r2
 8019338:	00db      	lsls	r3, r3, #3
 801933a:	440b      	add	r3, r1
 801933c:	3314      	adds	r3, #20
 801933e:	781b      	ldrb	r3, [r3, #0]
 8019340:	2b01      	cmp	r3, #1
 8019342:	d806      	bhi.n	8019352 <etharp_query+0xfe>
 8019344:	4b5a      	ldr	r3, [pc, #360]	; (80194b0 <etharp_query+0x25c>)
 8019346:	f240 32cd 	movw	r2, #973	; 0x3cd
 801934a:	495d      	ldr	r1, [pc, #372]	; (80194c0 <etharp_query+0x26c>)
 801934c:	485a      	ldr	r0, [pc, #360]	; (80194b8 <etharp_query+0x264>)
 801934e:	f002 fc9d 	bl	801bc8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8019352:	6a3b      	ldr	r3, [r7, #32]
 8019354:	2b00      	cmp	r3, #0
 8019356:	d102      	bne.n	801935e <etharp_query+0x10a>
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	2b00      	cmp	r3, #0
 801935c:	d10c      	bne.n	8019378 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801935e:	68b9      	ldr	r1, [r7, #8]
 8019360:	68f8      	ldr	r0, [r7, #12]
 8019362:	f000 f963 	bl	801962c <etharp_request>
 8019366:	4603      	mov	r3, r0
 8019368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d102      	bne.n	8019378 <etharp_query+0x124>
      return result;
 8019372:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019376:	e096      	b.n	80194a6 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019378:	687b      	ldr	r3, [r7, #4]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d106      	bne.n	801938c <etharp_query+0x138>
 801937e:	4b4c      	ldr	r3, [pc, #304]	; (80194b0 <etharp_query+0x25c>)
 8019380:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019384:	494f      	ldr	r1, [pc, #316]	; (80194c4 <etharp_query+0x270>)
 8019386:	484c      	ldr	r0, [pc, #304]	; (80194b8 <etharp_query+0x264>)
 8019388:	f002 fc80 	bl	801bc8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801938c:	7c7a      	ldrb	r2, [r7, #17]
 801938e:	494b      	ldr	r1, [pc, #300]	; (80194bc <etharp_query+0x268>)
 8019390:	4613      	mov	r3, r2
 8019392:	005b      	lsls	r3, r3, #1
 8019394:	4413      	add	r3, r2
 8019396:	00db      	lsls	r3, r3, #3
 8019398:	440b      	add	r3, r1
 801939a:	3314      	adds	r3, #20
 801939c:	781b      	ldrb	r3, [r3, #0]
 801939e:	2b01      	cmp	r3, #1
 80193a0:	d917      	bls.n	80193d2 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80193a2:	4a49      	ldr	r2, [pc, #292]	; (80194c8 <etharp_query+0x274>)
 80193a4:	7c7b      	ldrb	r3, [r7, #17]
 80193a6:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80193a8:	7c7a      	ldrb	r2, [r7, #17]
 80193aa:	4613      	mov	r3, r2
 80193ac:	005b      	lsls	r3, r3, #1
 80193ae:	4413      	add	r3, r2
 80193b0:	00db      	lsls	r3, r3, #3
 80193b2:	3308      	adds	r3, #8
 80193b4:	4a41      	ldr	r2, [pc, #260]	; (80194bc <etharp_query+0x268>)
 80193b6:	4413      	add	r3, r2
 80193b8:	3304      	adds	r3, #4
 80193ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80193be:	9200      	str	r2, [sp, #0]
 80193c0:	697a      	ldr	r2, [r7, #20]
 80193c2:	6879      	ldr	r1, [r7, #4]
 80193c4:	68f8      	ldr	r0, [r7, #12]
 80193c6:	f001 fdad 	bl	801af24 <ethernet_output>
 80193ca:	4603      	mov	r3, r0
 80193cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80193d0:	e067      	b.n	80194a2 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80193d2:	7c7a      	ldrb	r2, [r7, #17]
 80193d4:	4939      	ldr	r1, [pc, #228]	; (80194bc <etharp_query+0x268>)
 80193d6:	4613      	mov	r3, r2
 80193d8:	005b      	lsls	r3, r3, #1
 80193da:	4413      	add	r3, r2
 80193dc:	00db      	lsls	r3, r3, #3
 80193de:	440b      	add	r3, r1
 80193e0:	3314      	adds	r3, #20
 80193e2:	781b      	ldrb	r3, [r3, #0]
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	d15c      	bne.n	80194a2 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80193e8:	2300      	movs	r3, #0
 80193ea:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	61fb      	str	r3, [r7, #28]
    while (p) {
 80193f0:	e01c      	b.n	801942c <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80193f2:	69fb      	ldr	r3, [r7, #28]
 80193f4:	895a      	ldrh	r2, [r3, #10]
 80193f6:	69fb      	ldr	r3, [r7, #28]
 80193f8:	891b      	ldrh	r3, [r3, #8]
 80193fa:	429a      	cmp	r2, r3
 80193fc:	d10a      	bne.n	8019414 <etharp_query+0x1c0>
 80193fe:	69fb      	ldr	r3, [r7, #28]
 8019400:	681b      	ldr	r3, [r3, #0]
 8019402:	2b00      	cmp	r3, #0
 8019404:	d006      	beq.n	8019414 <etharp_query+0x1c0>
 8019406:	4b2a      	ldr	r3, [pc, #168]	; (80194b0 <etharp_query+0x25c>)
 8019408:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801940c:	492f      	ldr	r1, [pc, #188]	; (80194cc <etharp_query+0x278>)
 801940e:	482a      	ldr	r0, [pc, #168]	; (80194b8 <etharp_query+0x264>)
 8019410:	f002 fc3c 	bl	801bc8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019414:	69fb      	ldr	r3, [r7, #28]
 8019416:	7b1b      	ldrb	r3, [r3, #12]
 8019418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801941c:	2b00      	cmp	r3, #0
 801941e:	d002      	beq.n	8019426 <etharp_query+0x1d2>
        copy_needed = 1;
 8019420:	2301      	movs	r3, #1
 8019422:	61bb      	str	r3, [r7, #24]
        break;
 8019424:	e005      	b.n	8019432 <etharp_query+0x1de>
      }
      p = p->next;
 8019426:	69fb      	ldr	r3, [r7, #28]
 8019428:	681b      	ldr	r3, [r3, #0]
 801942a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801942c:	69fb      	ldr	r3, [r7, #28]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d1df      	bne.n	80193f2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8019432:	69bb      	ldr	r3, [r7, #24]
 8019434:	2b00      	cmp	r3, #0
 8019436:	d007      	beq.n	8019448 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019438:	687a      	ldr	r2, [r7, #4]
 801943a:	f44f 7120 	mov.w	r1, #640	; 0x280
 801943e:	200e      	movs	r0, #14
 8019440:	f7f8 fb6c 	bl	8011b1c <pbuf_clone>
 8019444:	61f8      	str	r0, [r7, #28]
 8019446:	e004      	b.n	8019452 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019448:	687b      	ldr	r3, [r7, #4]
 801944a:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801944c:	69f8      	ldr	r0, [r7, #28]
 801944e:	f7f8 f993 	bl	8011778 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8019452:	69fb      	ldr	r3, [r7, #28]
 8019454:	2b00      	cmp	r3, #0
 8019456:	d021      	beq.n	801949c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019458:	7c7a      	ldrb	r2, [r7, #17]
 801945a:	4918      	ldr	r1, [pc, #96]	; (80194bc <etharp_query+0x268>)
 801945c:	4613      	mov	r3, r2
 801945e:	005b      	lsls	r3, r3, #1
 8019460:	4413      	add	r3, r2
 8019462:	00db      	lsls	r3, r3, #3
 8019464:	440b      	add	r3, r1
 8019466:	681b      	ldr	r3, [r3, #0]
 8019468:	2b00      	cmp	r3, #0
 801946a:	d00a      	beq.n	8019482 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801946c:	7c7a      	ldrb	r2, [r7, #17]
 801946e:	4913      	ldr	r1, [pc, #76]	; (80194bc <etharp_query+0x268>)
 8019470:	4613      	mov	r3, r2
 8019472:	005b      	lsls	r3, r3, #1
 8019474:	4413      	add	r3, r2
 8019476:	00db      	lsls	r3, r3, #3
 8019478:	440b      	add	r3, r1
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	4618      	mov	r0, r3
 801947e:	f7f8 f8d5 	bl	801162c <pbuf_free>
      }
      arp_table[i].q = p;
 8019482:	7c7a      	ldrb	r2, [r7, #17]
 8019484:	490d      	ldr	r1, [pc, #52]	; (80194bc <etharp_query+0x268>)
 8019486:	4613      	mov	r3, r2
 8019488:	005b      	lsls	r3, r3, #1
 801948a:	4413      	add	r3, r2
 801948c:	00db      	lsls	r3, r3, #3
 801948e:	440b      	add	r3, r1
 8019490:	69fa      	ldr	r2, [r7, #28]
 8019492:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019494:	2300      	movs	r3, #0
 8019496:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801949a:	e002      	b.n	80194a2 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801949c:	23ff      	movs	r3, #255	; 0xff
 801949e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80194a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80194a6:	4618      	mov	r0, r3
 80194a8:	3728      	adds	r7, #40	; 0x28
 80194aa:	46bd      	mov	sp, r7
 80194ac:	bd80      	pop	{r7, pc}
 80194ae:	bf00      	nop
 80194b0:	0802143c 	.word	0x0802143c
 80194b4:	080215e8 	.word	0x080215e8
 80194b8:	080214b4 	.word	0x080214b4
 80194bc:	20004834 	.word	0x20004834
 80194c0:	080215f8 	.word	0x080215f8
 80194c4:	080215dc 	.word	0x080215dc
 80194c8:	20004924 	.word	0x20004924
 80194cc:	08021620 	.word	0x08021620

080194d0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b08a      	sub	sp, #40	; 0x28
 80194d4:	af02      	add	r7, sp, #8
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	60b9      	str	r1, [r7, #8]
 80194da:	607a      	str	r2, [r7, #4]
 80194dc:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80194de:	2300      	movs	r3, #0
 80194e0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	2b00      	cmp	r3, #0
 80194e6:	d106      	bne.n	80194f6 <etharp_raw+0x26>
 80194e8:	4b3a      	ldr	r3, [pc, #232]	; (80195d4 <etharp_raw+0x104>)
 80194ea:	f240 4257 	movw	r2, #1111	; 0x457
 80194ee:	493a      	ldr	r1, [pc, #232]	; (80195d8 <etharp_raw+0x108>)
 80194f0:	483a      	ldr	r0, [pc, #232]	; (80195dc <etharp_raw+0x10c>)
 80194f2:	f002 fbcb 	bl	801bc8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80194f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80194fa:	211c      	movs	r1, #28
 80194fc:	200e      	movs	r0, #14
 80194fe:	f7f7 fd7f 	bl	8011000 <pbuf_alloc>
 8019502:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019504:	69bb      	ldr	r3, [r7, #24]
 8019506:	2b00      	cmp	r3, #0
 8019508:	d102      	bne.n	8019510 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801950a:	f04f 33ff 	mov.w	r3, #4294967295
 801950e:	e05d      	b.n	80195cc <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019510:	69bb      	ldr	r3, [r7, #24]
 8019512:	895b      	ldrh	r3, [r3, #10]
 8019514:	2b1b      	cmp	r3, #27
 8019516:	d806      	bhi.n	8019526 <etharp_raw+0x56>
 8019518:	4b2e      	ldr	r3, [pc, #184]	; (80195d4 <etharp_raw+0x104>)
 801951a:	f240 4262 	movw	r2, #1122	; 0x462
 801951e:	4930      	ldr	r1, [pc, #192]	; (80195e0 <etharp_raw+0x110>)
 8019520:	482e      	ldr	r0, [pc, #184]	; (80195dc <etharp_raw+0x10c>)
 8019522:	f002 fbb3 	bl	801bc8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8019526:	69bb      	ldr	r3, [r7, #24]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801952c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801952e:	4618      	mov	r0, r3
 8019530:	f7f6 fc9e 	bl	800fe70 <lwip_htons>
 8019534:	4603      	mov	r3, r0
 8019536:	461a      	mov	r2, r3
 8019538:	697b      	ldr	r3, [r7, #20]
 801953a:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801953c:	68fb      	ldr	r3, [r7, #12]
 801953e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019542:	2b06      	cmp	r3, #6
 8019544:	d006      	beq.n	8019554 <etharp_raw+0x84>
 8019546:	4b23      	ldr	r3, [pc, #140]	; (80195d4 <etharp_raw+0x104>)
 8019548:	f240 4269 	movw	r2, #1129	; 0x469
 801954c:	4925      	ldr	r1, [pc, #148]	; (80195e4 <etharp_raw+0x114>)
 801954e:	4823      	ldr	r0, [pc, #140]	; (80195dc <etharp_raw+0x10c>)
 8019550:	f002 fb9c 	bl	801bc8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8019554:	697b      	ldr	r3, [r7, #20]
 8019556:	3308      	adds	r3, #8
 8019558:	2206      	movs	r2, #6
 801955a:	6839      	ldr	r1, [r7, #0]
 801955c:	4618      	mov	r0, r3
 801955e:	f001 ff3d 	bl	801b3dc <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8019562:	697b      	ldr	r3, [r7, #20]
 8019564:	3312      	adds	r3, #18
 8019566:	2206      	movs	r2, #6
 8019568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801956a:	4618      	mov	r0, r3
 801956c:	f001 ff36 	bl	801b3dc <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019570:	697b      	ldr	r3, [r7, #20]
 8019572:	330e      	adds	r3, #14
 8019574:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019576:	6812      	ldr	r2, [r2, #0]
 8019578:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801957a:	697b      	ldr	r3, [r7, #20]
 801957c:	3318      	adds	r3, #24
 801957e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019580:	6812      	ldr	r2, [r2, #0]
 8019582:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019584:	697b      	ldr	r3, [r7, #20]
 8019586:	2200      	movs	r2, #0
 8019588:	701a      	strb	r2, [r3, #0]
 801958a:	2200      	movs	r2, #0
 801958c:	f042 0201 	orr.w	r2, r2, #1
 8019590:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019592:	697b      	ldr	r3, [r7, #20]
 8019594:	2200      	movs	r2, #0
 8019596:	f042 0208 	orr.w	r2, r2, #8
 801959a:	709a      	strb	r2, [r3, #2]
 801959c:	2200      	movs	r2, #0
 801959e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80195a0:	697b      	ldr	r3, [r7, #20]
 80195a2:	2206      	movs	r2, #6
 80195a4:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80195a6:	697b      	ldr	r3, [r7, #20]
 80195a8:	2204      	movs	r2, #4
 80195aa:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80195ac:	f640 0306 	movw	r3, #2054	; 0x806
 80195b0:	9300      	str	r3, [sp, #0]
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	68ba      	ldr	r2, [r7, #8]
 80195b6:	69b9      	ldr	r1, [r7, #24]
 80195b8:	68f8      	ldr	r0, [r7, #12]
 80195ba:	f001 fcb3 	bl	801af24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80195be:	69b8      	ldr	r0, [r7, #24]
 80195c0:	f7f8 f834 	bl	801162c <pbuf_free>
  p = NULL;
 80195c4:	2300      	movs	r3, #0
 80195c6:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80195c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80195cc:	4618      	mov	r0, r3
 80195ce:	3720      	adds	r7, #32
 80195d0:	46bd      	mov	sp, r7
 80195d2:	bd80      	pop	{r7, pc}
 80195d4:	0802143c 	.word	0x0802143c
 80195d8:	0802158c 	.word	0x0802158c
 80195dc:	080214b4 	.word	0x080214b4
 80195e0:	0802163c 	.word	0x0802163c
 80195e4:	08021670 	.word	0x08021670

080195e8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80195e8:	b580      	push	{r7, lr}
 80195ea:	b088      	sub	sp, #32
 80195ec:	af04      	add	r7, sp, #16
 80195ee:	60f8      	str	r0, [r7, #12]
 80195f0:	60b9      	str	r1, [r7, #8]
 80195f2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80195f4:	68fb      	ldr	r3, [r7, #12]
 80195f6:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019600:	68fb      	ldr	r3, [r7, #12]
 8019602:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019604:	2201      	movs	r2, #1
 8019606:	9203      	str	r2, [sp, #12]
 8019608:	68ba      	ldr	r2, [r7, #8]
 801960a:	9202      	str	r2, [sp, #8]
 801960c:	4a06      	ldr	r2, [pc, #24]	; (8019628 <etharp_request_dst+0x40>)
 801960e:	9201      	str	r2, [sp, #4]
 8019610:	9300      	str	r3, [sp, #0]
 8019612:	4603      	mov	r3, r0
 8019614:	687a      	ldr	r2, [r7, #4]
 8019616:	68f8      	ldr	r0, [r7, #12]
 8019618:	f7ff ff5a 	bl	80194d0 <etharp_raw>
 801961c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801961e:	4618      	mov	r0, r3
 8019620:	3710      	adds	r7, #16
 8019622:	46bd      	mov	sp, r7
 8019624:	bd80      	pop	{r7, pc}
 8019626:	bf00      	nop
 8019628:	08021cf4 	.word	0x08021cf4

0801962c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801962c:	b580      	push	{r7, lr}
 801962e:	b082      	sub	sp, #8
 8019630:	af00      	add	r7, sp, #0
 8019632:	6078      	str	r0, [r7, #4]
 8019634:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8019636:	4a05      	ldr	r2, [pc, #20]	; (801964c <etharp_request+0x20>)
 8019638:	6839      	ldr	r1, [r7, #0]
 801963a:	6878      	ldr	r0, [r7, #4]
 801963c:	f7ff ffd4 	bl	80195e8 <etharp_request_dst>
 8019640:	4603      	mov	r3, r0
}
 8019642:	4618      	mov	r0, r3
 8019644:	3708      	adds	r7, #8
 8019646:	46bd      	mov	sp, r7
 8019648:	bd80      	pop	{r7, pc}
 801964a:	bf00      	nop
 801964c:	08021cec 	.word	0x08021cec

08019650 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b08e      	sub	sp, #56	; 0x38
 8019654:	af04      	add	r7, sp, #16
 8019656:	6078      	str	r0, [r7, #4]
 8019658:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801965a:	4b79      	ldr	r3, [pc, #484]	; (8019840 <icmp_input+0x1f0>)
 801965c:	689b      	ldr	r3, [r3, #8]
 801965e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	f003 030f 	and.w	r3, r3, #15
 8019668:	b2db      	uxtb	r3, r3
 801966a:	009b      	lsls	r3, r3, #2
 801966c:	b2db      	uxtb	r3, r3
 801966e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019670:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019672:	2b13      	cmp	r3, #19
 8019674:	f240 80cd 	bls.w	8019812 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	895b      	ldrh	r3, [r3, #10]
 801967c:	2b03      	cmp	r3, #3
 801967e:	f240 80ca 	bls.w	8019816 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	685b      	ldr	r3, [r3, #4]
 8019686:	781b      	ldrb	r3, [r3, #0]
 8019688:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801968c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019690:	2b00      	cmp	r3, #0
 8019692:	f000 80b7 	beq.w	8019804 <icmp_input+0x1b4>
 8019696:	2b08      	cmp	r3, #8
 8019698:	f040 80b7 	bne.w	801980a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801969c:	4b69      	ldr	r3, [pc, #420]	; (8019844 <icmp_input+0x1f4>)
 801969e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80196a0:	4b67      	ldr	r3, [pc, #412]	; (8019840 <icmp_input+0x1f0>)
 80196a2:	695b      	ldr	r3, [r3, #20]
 80196a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80196a8:	2be0      	cmp	r3, #224	; 0xe0
 80196aa:	f000 80bb 	beq.w	8019824 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80196ae:	4b64      	ldr	r3, [pc, #400]	; (8019840 <icmp_input+0x1f0>)
 80196b0:	695b      	ldr	r3, [r3, #20]
 80196b2:	4a63      	ldr	r2, [pc, #396]	; (8019840 <icmp_input+0x1f0>)
 80196b4:	6812      	ldr	r2, [r2, #0]
 80196b6:	4611      	mov	r1, r2
 80196b8:	4618      	mov	r0, r3
 80196ba:	f000 fbed 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 80196be:	4603      	mov	r3, r0
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	f040 80b1 	bne.w	8019828 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	891b      	ldrh	r3, [r3, #8]
 80196ca:	2b07      	cmp	r3, #7
 80196cc:	f240 80a5 	bls.w	801981a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80196d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80196d2:	330e      	adds	r3, #14
 80196d4:	4619      	mov	r1, r3
 80196d6:	6878      	ldr	r0, [r7, #4]
 80196d8:	f7f7 fee0 	bl	801149c <pbuf_add_header>
 80196dc:	4603      	mov	r3, r0
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d04b      	beq.n	801977a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	891a      	ldrh	r2, [r3, #8]
 80196e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80196e8:	4413      	add	r3, r2
 80196ea:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	891b      	ldrh	r3, [r3, #8]
 80196f0:	8b7a      	ldrh	r2, [r7, #26]
 80196f2:	429a      	cmp	r2, r3
 80196f4:	f0c0 809a 	bcc.w	801982c <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80196f8:	8b7b      	ldrh	r3, [r7, #26]
 80196fa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80196fe:	4619      	mov	r1, r3
 8019700:	200e      	movs	r0, #14
 8019702:	f7f7 fc7d 	bl	8011000 <pbuf_alloc>
 8019706:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019708:	697b      	ldr	r3, [r7, #20]
 801970a:	2b00      	cmp	r3, #0
 801970c:	f000 8090 	beq.w	8019830 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	895b      	ldrh	r3, [r3, #10]
 8019714:	461a      	mov	r2, r3
 8019716:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019718:	3308      	adds	r3, #8
 801971a:	429a      	cmp	r2, r3
 801971c:	d203      	bcs.n	8019726 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801971e:	6978      	ldr	r0, [r7, #20]
 8019720:	f7f7 ff84 	bl	801162c <pbuf_free>
          goto icmperr;
 8019724:	e085      	b.n	8019832 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019726:	697b      	ldr	r3, [r7, #20]
 8019728:	685b      	ldr	r3, [r3, #4]
 801972a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801972c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801972e:	4618      	mov	r0, r3
 8019730:	f001 fe54 	bl	801b3dc <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019734:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019736:	4619      	mov	r1, r3
 8019738:	6978      	ldr	r0, [r7, #20]
 801973a:	f7f7 febf 	bl	80114bc <pbuf_remove_header>
 801973e:	4603      	mov	r3, r0
 8019740:	2b00      	cmp	r3, #0
 8019742:	d009      	beq.n	8019758 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019744:	4b40      	ldr	r3, [pc, #256]	; (8019848 <icmp_input+0x1f8>)
 8019746:	22b6      	movs	r2, #182	; 0xb6
 8019748:	4940      	ldr	r1, [pc, #256]	; (801984c <icmp_input+0x1fc>)
 801974a:	4841      	ldr	r0, [pc, #260]	; (8019850 <icmp_input+0x200>)
 801974c:	f002 fa9e 	bl	801bc8c <iprintf>
          pbuf_free(r);
 8019750:	6978      	ldr	r0, [r7, #20]
 8019752:	f7f7 ff6b 	bl	801162c <pbuf_free>
          goto icmperr;
 8019756:	e06c      	b.n	8019832 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019758:	6879      	ldr	r1, [r7, #4]
 801975a:	6978      	ldr	r0, [r7, #20]
 801975c:	f7f8 f89a 	bl	8011894 <pbuf_copy>
 8019760:	4603      	mov	r3, r0
 8019762:	2b00      	cmp	r3, #0
 8019764:	d003      	beq.n	801976e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019766:	6978      	ldr	r0, [r7, #20]
 8019768:	f7f7 ff60 	bl	801162c <pbuf_free>
          goto icmperr;
 801976c:	e061      	b.n	8019832 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801976e:	6878      	ldr	r0, [r7, #4]
 8019770:	f7f7 ff5c 	bl	801162c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019774:	697b      	ldr	r3, [r7, #20]
 8019776:	607b      	str	r3, [r7, #4]
 8019778:	e00f      	b.n	801979a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801977a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801977c:	330e      	adds	r3, #14
 801977e:	4619      	mov	r1, r3
 8019780:	6878      	ldr	r0, [r7, #4]
 8019782:	f7f7 fe9b 	bl	80114bc <pbuf_remove_header>
 8019786:	4603      	mov	r3, r0
 8019788:	2b00      	cmp	r3, #0
 801978a:	d006      	beq.n	801979a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801978c:	4b2e      	ldr	r3, [pc, #184]	; (8019848 <icmp_input+0x1f8>)
 801978e:	22c7      	movs	r2, #199	; 0xc7
 8019790:	4930      	ldr	r1, [pc, #192]	; (8019854 <icmp_input+0x204>)
 8019792:	482f      	ldr	r0, [pc, #188]	; (8019850 <icmp_input+0x200>)
 8019794:	f002 fa7a 	bl	801bc8c <iprintf>
          goto icmperr;
 8019798:	e04b      	b.n	8019832 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	685b      	ldr	r3, [r3, #4]
 801979e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80197a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80197a2:	4619      	mov	r1, r3
 80197a4:	6878      	ldr	r0, [r7, #4]
 80197a6:	f7f7 fe79 	bl	801149c <pbuf_add_header>
 80197aa:	4603      	mov	r3, r0
 80197ac:	2b00      	cmp	r3, #0
 80197ae:	d12b      	bne.n	8019808 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	685b      	ldr	r3, [r3, #4]
 80197b4:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80197b6:	69fb      	ldr	r3, [r7, #28]
 80197b8:	681a      	ldr	r2, [r3, #0]
 80197ba:	68fb      	ldr	r3, [r7, #12]
 80197bc:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80197be:	4b20      	ldr	r3, [pc, #128]	; (8019840 <icmp_input+0x1f0>)
 80197c0:	691a      	ldr	r2, [r3, #16]
 80197c2:	68fb      	ldr	r3, [r7, #12]
 80197c4:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80197c6:	693b      	ldr	r3, [r7, #16]
 80197c8:	2200      	movs	r2, #0
 80197ca:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80197cc:	693b      	ldr	r3, [r7, #16]
 80197ce:	2200      	movs	r2, #0
 80197d0:	709a      	strb	r2, [r3, #2]
 80197d2:	2200      	movs	r2, #0
 80197d4:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	22ff      	movs	r2, #255	; 0xff
 80197da:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	2200      	movs	r2, #0
 80197e0:	729a      	strb	r2, [r3, #10]
 80197e2:	2200      	movs	r2, #0
 80197e4:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80197e6:	683b      	ldr	r3, [r7, #0]
 80197e8:	9302      	str	r3, [sp, #8]
 80197ea:	2301      	movs	r3, #1
 80197ec:	9301      	str	r3, [sp, #4]
 80197ee:	2300      	movs	r3, #0
 80197f0:	9300      	str	r3, [sp, #0]
 80197f2:	23ff      	movs	r3, #255	; 0xff
 80197f4:	2200      	movs	r2, #0
 80197f6:	69f9      	ldr	r1, [r7, #28]
 80197f8:	6878      	ldr	r0, [r7, #4]
 80197fa:	f000 fa75 	bl	8019ce8 <ip4_output_if>
 80197fe:	4603      	mov	r3, r0
 8019800:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019802:	e001      	b.n	8019808 <icmp_input+0x1b8>
      break;
 8019804:	bf00      	nop
 8019806:	e000      	b.n	801980a <icmp_input+0x1ba>
      break;
 8019808:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801980a:	6878      	ldr	r0, [r7, #4]
 801980c:	f7f7 ff0e 	bl	801162c <pbuf_free>
  return;
 8019810:	e013      	b.n	801983a <icmp_input+0x1ea>
    goto lenerr;
 8019812:	bf00      	nop
 8019814:	e002      	b.n	801981c <icmp_input+0x1cc>
    goto lenerr;
 8019816:	bf00      	nop
 8019818:	e000      	b.n	801981c <icmp_input+0x1cc>
        goto lenerr;
 801981a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801981c:	6878      	ldr	r0, [r7, #4]
 801981e:	f7f7 ff05 	bl	801162c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019822:	e00a      	b.n	801983a <icmp_input+0x1ea>
        goto icmperr;
 8019824:	bf00      	nop
 8019826:	e004      	b.n	8019832 <icmp_input+0x1e2>
        goto icmperr;
 8019828:	bf00      	nop
 801982a:	e002      	b.n	8019832 <icmp_input+0x1e2>
          goto icmperr;
 801982c:	bf00      	nop
 801982e:	e000      	b.n	8019832 <icmp_input+0x1e2>
          goto icmperr;
 8019830:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019832:	6878      	ldr	r0, [r7, #4]
 8019834:	f7f7 fefa 	bl	801162c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019838:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801983a:	3728      	adds	r7, #40	; 0x28
 801983c:	46bd      	mov	sp, r7
 801983e:	bd80      	pop	{r7, pc}
 8019840:	2000a0a8 	.word	0x2000a0a8
 8019844:	2000a0bc 	.word	0x2000a0bc
 8019848:	080216b4 	.word	0x080216b4
 801984c:	080216ec 	.word	0x080216ec
 8019850:	08021724 	.word	0x08021724
 8019854:	0802174c 	.word	0x0802174c

08019858 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019858:	b580      	push	{r7, lr}
 801985a:	b082      	sub	sp, #8
 801985c:	af00      	add	r7, sp, #0
 801985e:	6078      	str	r0, [r7, #4]
 8019860:	460b      	mov	r3, r1
 8019862:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019864:	78fb      	ldrb	r3, [r7, #3]
 8019866:	461a      	mov	r2, r3
 8019868:	2103      	movs	r1, #3
 801986a:	6878      	ldr	r0, [r7, #4]
 801986c:	f000 f814 	bl	8019898 <icmp_send_response>
}
 8019870:	bf00      	nop
 8019872:	3708      	adds	r7, #8
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}

08019878 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b082      	sub	sp, #8
 801987c:	af00      	add	r7, sp, #0
 801987e:	6078      	str	r0, [r7, #4]
 8019880:	460b      	mov	r3, r1
 8019882:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019884:	78fb      	ldrb	r3, [r7, #3]
 8019886:	461a      	mov	r2, r3
 8019888:	210b      	movs	r1, #11
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f000 f804 	bl	8019898 <icmp_send_response>
}
 8019890:	bf00      	nop
 8019892:	3708      	adds	r7, #8
 8019894:	46bd      	mov	sp, r7
 8019896:	bd80      	pop	{r7, pc}

08019898 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019898:	b580      	push	{r7, lr}
 801989a:	b08c      	sub	sp, #48	; 0x30
 801989c:	af04      	add	r7, sp, #16
 801989e:	6078      	str	r0, [r7, #4]
 80198a0:	460b      	mov	r3, r1
 80198a2:	70fb      	strb	r3, [r7, #3]
 80198a4:	4613      	mov	r3, r2
 80198a6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80198a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80198ac:	2124      	movs	r1, #36	; 0x24
 80198ae:	2022      	movs	r0, #34	; 0x22
 80198b0:	f7f7 fba6 	bl	8011000 <pbuf_alloc>
 80198b4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d04c      	beq.n	8019956 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80198bc:	69fb      	ldr	r3, [r7, #28]
 80198be:	895b      	ldrh	r3, [r3, #10]
 80198c0:	2b23      	cmp	r3, #35	; 0x23
 80198c2:	d806      	bhi.n	80198d2 <icmp_send_response+0x3a>
 80198c4:	4b26      	ldr	r3, [pc, #152]	; (8019960 <icmp_send_response+0xc8>)
 80198c6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80198ca:	4926      	ldr	r1, [pc, #152]	; (8019964 <icmp_send_response+0xcc>)
 80198cc:	4826      	ldr	r0, [pc, #152]	; (8019968 <icmp_send_response+0xd0>)
 80198ce:	f002 f9dd 	bl	801bc8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	685b      	ldr	r3, [r3, #4]
 80198d6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80198d8:	69fb      	ldr	r3, [r7, #28]
 80198da:	685b      	ldr	r3, [r3, #4]
 80198dc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80198de:	697b      	ldr	r3, [r7, #20]
 80198e0:	78fa      	ldrb	r2, [r7, #3]
 80198e2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80198e4:	697b      	ldr	r3, [r7, #20]
 80198e6:	78ba      	ldrb	r2, [r7, #2]
 80198e8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80198ea:	697b      	ldr	r3, [r7, #20]
 80198ec:	2200      	movs	r2, #0
 80198ee:	711a      	strb	r2, [r3, #4]
 80198f0:	2200      	movs	r2, #0
 80198f2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80198f4:	697b      	ldr	r3, [r7, #20]
 80198f6:	2200      	movs	r2, #0
 80198f8:	719a      	strb	r2, [r3, #6]
 80198fa:	2200      	movs	r2, #0
 80198fc:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80198fe:	69fb      	ldr	r3, [r7, #28]
 8019900:	685b      	ldr	r3, [r3, #4]
 8019902:	f103 0008 	add.w	r0, r3, #8
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	685b      	ldr	r3, [r3, #4]
 801990a:	221c      	movs	r2, #28
 801990c:	4619      	mov	r1, r3
 801990e:	f001 fd65 	bl	801b3dc <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019912:	69bb      	ldr	r3, [r7, #24]
 8019914:	68db      	ldr	r3, [r3, #12]
 8019916:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019918:	f107 030c 	add.w	r3, r7, #12
 801991c:	4618      	mov	r0, r3
 801991e:	f000 f825 	bl	801996c <ip4_route>
 8019922:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019924:	693b      	ldr	r3, [r7, #16]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d011      	beq.n	801994e <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801992a:	697b      	ldr	r3, [r7, #20]
 801992c:	2200      	movs	r2, #0
 801992e:	709a      	strb	r2, [r3, #2]
 8019930:	2200      	movs	r2, #0
 8019932:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019934:	f107 020c 	add.w	r2, r7, #12
 8019938:	693b      	ldr	r3, [r7, #16]
 801993a:	9302      	str	r3, [sp, #8]
 801993c:	2301      	movs	r3, #1
 801993e:	9301      	str	r3, [sp, #4]
 8019940:	2300      	movs	r3, #0
 8019942:	9300      	str	r3, [sp, #0]
 8019944:	23ff      	movs	r3, #255	; 0xff
 8019946:	2100      	movs	r1, #0
 8019948:	69f8      	ldr	r0, [r7, #28]
 801994a:	f000 f9cd 	bl	8019ce8 <ip4_output_if>
  }
  pbuf_free(q);
 801994e:	69f8      	ldr	r0, [r7, #28]
 8019950:	f7f7 fe6c 	bl	801162c <pbuf_free>
 8019954:	e000      	b.n	8019958 <icmp_send_response+0xc0>
    return;
 8019956:	bf00      	nop
}
 8019958:	3720      	adds	r7, #32
 801995a:	46bd      	mov	sp, r7
 801995c:	bd80      	pop	{r7, pc}
 801995e:	bf00      	nop
 8019960:	080216b4 	.word	0x080216b4
 8019964:	08021780 	.word	0x08021780
 8019968:	08021724 	.word	0x08021724

0801996c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801996c:	b480      	push	{r7}
 801996e:	b085      	sub	sp, #20
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019974:	4b33      	ldr	r3, [pc, #204]	; (8019a44 <ip4_route+0xd8>)
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	60fb      	str	r3, [r7, #12]
 801997a:	e036      	b.n	80199ea <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801997c:	68fb      	ldr	r3, [r7, #12]
 801997e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019982:	f003 0301 	and.w	r3, r3, #1
 8019986:	b2db      	uxtb	r3, r3
 8019988:	2b00      	cmp	r3, #0
 801998a:	d02b      	beq.n	80199e4 <ip4_route+0x78>
 801998c:	68fb      	ldr	r3, [r7, #12]
 801998e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019992:	089b      	lsrs	r3, r3, #2
 8019994:	f003 0301 	and.w	r3, r3, #1
 8019998:	b2db      	uxtb	r3, r3
 801999a:	2b00      	cmp	r3, #0
 801999c:	d022      	beq.n	80199e4 <ip4_route+0x78>
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	3304      	adds	r3, #4
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	2b00      	cmp	r3, #0
 80199a6:	d01d      	beq.n	80199e4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681a      	ldr	r2, [r3, #0]
 80199ac:	68fb      	ldr	r3, [r7, #12]
 80199ae:	3304      	adds	r3, #4
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	405a      	eors	r2, r3
 80199b4:	68fb      	ldr	r3, [r7, #12]
 80199b6:	3308      	adds	r3, #8
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	4013      	ands	r3, r2
 80199bc:	2b00      	cmp	r3, #0
 80199be:	d101      	bne.n	80199c4 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80199c0:	68fb      	ldr	r3, [r7, #12]
 80199c2:	e038      	b.n	8019a36 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80199ca:	f003 0302 	and.w	r3, r3, #2
 80199ce:	2b00      	cmp	r3, #0
 80199d0:	d108      	bne.n	80199e4 <ip4_route+0x78>
 80199d2:	687b      	ldr	r3, [r7, #4]
 80199d4:	681a      	ldr	r2, [r3, #0]
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	330c      	adds	r3, #12
 80199da:	681b      	ldr	r3, [r3, #0]
 80199dc:	429a      	cmp	r2, r3
 80199de:	d101      	bne.n	80199e4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	e028      	b.n	8019a36 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	60fb      	str	r3, [r7, #12]
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	2b00      	cmp	r3, #0
 80199ee:	d1c5      	bne.n	801997c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80199f0:	4b15      	ldr	r3, [pc, #84]	; (8019a48 <ip4_route+0xdc>)
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d01a      	beq.n	8019a2e <ip4_route+0xc2>
 80199f8:	4b13      	ldr	r3, [pc, #76]	; (8019a48 <ip4_route+0xdc>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a00:	f003 0301 	and.w	r3, r3, #1
 8019a04:	2b00      	cmp	r3, #0
 8019a06:	d012      	beq.n	8019a2e <ip4_route+0xc2>
 8019a08:	4b0f      	ldr	r3, [pc, #60]	; (8019a48 <ip4_route+0xdc>)
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a10:	f003 0304 	and.w	r3, r3, #4
 8019a14:	2b00      	cmp	r3, #0
 8019a16:	d00a      	beq.n	8019a2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019a18:	4b0b      	ldr	r3, [pc, #44]	; (8019a48 <ip4_route+0xdc>)
 8019a1a:	681b      	ldr	r3, [r3, #0]
 8019a1c:	3304      	adds	r3, #4
 8019a1e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019a20:	2b00      	cmp	r3, #0
 8019a22:	d004      	beq.n	8019a2e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8019a2c:	d101      	bne.n	8019a32 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019a2e:	2300      	movs	r3, #0
 8019a30:	e001      	b.n	8019a36 <ip4_route+0xca>
  }

  return netif_default;
 8019a32:	4b05      	ldr	r3, [pc, #20]	; (8019a48 <ip4_route+0xdc>)
 8019a34:	681b      	ldr	r3, [r3, #0]
}
 8019a36:	4618      	mov	r0, r3
 8019a38:	3714      	adds	r7, #20
 8019a3a:	46bd      	mov	sp, r7
 8019a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a40:	4770      	bx	lr
 8019a42:	bf00      	nop
 8019a44:	2000d7ac 	.word	0x2000d7ac
 8019a48:	2000d7b0 	.word	0x2000d7b0

08019a4c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019a4c:	b580      	push	{r7, lr}
 8019a4e:	b082      	sub	sp, #8
 8019a50:	af00      	add	r7, sp, #0
 8019a52:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a5a:	f003 0301 	and.w	r3, r3, #1
 8019a5e:	b2db      	uxtb	r3, r3
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d016      	beq.n	8019a92 <ip4_input_accept+0x46>
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	3304      	adds	r3, #4
 8019a68:	681b      	ldr	r3, [r3, #0]
 8019a6a:	2b00      	cmp	r3, #0
 8019a6c:	d011      	beq.n	8019a92 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019a6e:	4b0b      	ldr	r3, [pc, #44]	; (8019a9c <ip4_input_accept+0x50>)
 8019a70:	695a      	ldr	r2, [r3, #20]
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	3304      	adds	r3, #4
 8019a76:	681b      	ldr	r3, [r3, #0]
 8019a78:	429a      	cmp	r2, r3
 8019a7a:	d008      	beq.n	8019a8e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019a7c:	4b07      	ldr	r3, [pc, #28]	; (8019a9c <ip4_input_accept+0x50>)
 8019a7e:	695b      	ldr	r3, [r3, #20]
 8019a80:	6879      	ldr	r1, [r7, #4]
 8019a82:	4618      	mov	r0, r3
 8019a84:	f000 fa08 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8019a88:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d001      	beq.n	8019a92 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019a8e:	2301      	movs	r3, #1
 8019a90:	e000      	b.n	8019a94 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019a92:	2300      	movs	r3, #0
}
 8019a94:	4618      	mov	r0, r3
 8019a96:	3708      	adds	r7, #8
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	2000a0a8 	.word	0x2000a0a8

08019aa0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019aa0:	b580      	push	{r7, lr}
 8019aa2:	b086      	sub	sp, #24
 8019aa4:	af00      	add	r7, sp, #0
 8019aa6:	6078      	str	r0, [r7, #4]
 8019aa8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019ab0:	697b      	ldr	r3, [r7, #20]
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	091b      	lsrs	r3, r3, #4
 8019ab6:	b2db      	uxtb	r3, r3
 8019ab8:	2b04      	cmp	r3, #4
 8019aba:	d004      	beq.n	8019ac6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019abc:	6878      	ldr	r0, [r7, #4]
 8019abe:	f7f7 fdb5 	bl	801162c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019ac2:	2300      	movs	r3, #0
 8019ac4:	e107      	b.n	8019cd6 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	781b      	ldrb	r3, [r3, #0]
 8019aca:	f003 030f 	and.w	r3, r3, #15
 8019ace:	b2db      	uxtb	r3, r3
 8019ad0:	009b      	lsls	r3, r3, #2
 8019ad2:	b2db      	uxtb	r3, r3
 8019ad4:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019ad6:	697b      	ldr	r3, [r7, #20]
 8019ad8:	885b      	ldrh	r3, [r3, #2]
 8019ada:	b29b      	uxth	r3, r3
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7f6 f9c7 	bl	800fe70 <lwip_htons>
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	891b      	ldrh	r3, [r3, #8]
 8019aea:	89ba      	ldrh	r2, [r7, #12]
 8019aec:	429a      	cmp	r2, r3
 8019aee:	d204      	bcs.n	8019afa <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019af0:	89bb      	ldrh	r3, [r7, #12]
 8019af2:	4619      	mov	r1, r3
 8019af4:	6878      	ldr	r0, [r7, #4]
 8019af6:	f7f7 fbe1 	bl	80112bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	895b      	ldrh	r3, [r3, #10]
 8019afe:	89fa      	ldrh	r2, [r7, #14]
 8019b00:	429a      	cmp	r2, r3
 8019b02:	d807      	bhi.n	8019b14 <ip4_input+0x74>
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	891b      	ldrh	r3, [r3, #8]
 8019b08:	89ba      	ldrh	r2, [r7, #12]
 8019b0a:	429a      	cmp	r2, r3
 8019b0c:	d802      	bhi.n	8019b14 <ip4_input+0x74>
 8019b0e:	89fb      	ldrh	r3, [r7, #14]
 8019b10:	2b13      	cmp	r3, #19
 8019b12:	d804      	bhi.n	8019b1e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019b14:	6878      	ldr	r0, [r7, #4]
 8019b16:	f7f7 fd89 	bl	801162c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019b1a:	2300      	movs	r3, #0
 8019b1c:	e0db      	b.n	8019cd6 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019b1e:	697b      	ldr	r3, [r7, #20]
 8019b20:	691b      	ldr	r3, [r3, #16]
 8019b22:	4a6f      	ldr	r2, [pc, #444]	; (8019ce0 <ip4_input+0x240>)
 8019b24:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019b26:	697b      	ldr	r3, [r7, #20]
 8019b28:	68db      	ldr	r3, [r3, #12]
 8019b2a:	4a6d      	ldr	r2, [pc, #436]	; (8019ce0 <ip4_input+0x240>)
 8019b2c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019b2e:	4b6c      	ldr	r3, [pc, #432]	; (8019ce0 <ip4_input+0x240>)
 8019b30:	695b      	ldr	r3, [r3, #20]
 8019b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019b36:	2be0      	cmp	r3, #224	; 0xe0
 8019b38:	d112      	bne.n	8019b60 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019b3a:	683b      	ldr	r3, [r7, #0]
 8019b3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019b40:	f003 0301 	and.w	r3, r3, #1
 8019b44:	b2db      	uxtb	r3, r3
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	d007      	beq.n	8019b5a <ip4_input+0xba>
 8019b4a:	683b      	ldr	r3, [r7, #0]
 8019b4c:	3304      	adds	r3, #4
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	2b00      	cmp	r3, #0
 8019b52:	d002      	beq.n	8019b5a <ip4_input+0xba>
      netif = inp;
 8019b54:	683b      	ldr	r3, [r7, #0]
 8019b56:	613b      	str	r3, [r7, #16]
 8019b58:	e02a      	b.n	8019bb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	613b      	str	r3, [r7, #16]
 8019b5e:	e027      	b.n	8019bb0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019b60:	6838      	ldr	r0, [r7, #0]
 8019b62:	f7ff ff73 	bl	8019a4c <ip4_input_accept>
 8019b66:	4603      	mov	r3, r0
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d002      	beq.n	8019b72 <ip4_input+0xd2>
      netif = inp;
 8019b6c:	683b      	ldr	r3, [r7, #0]
 8019b6e:	613b      	str	r3, [r7, #16]
 8019b70:	e01e      	b.n	8019bb0 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019b72:	2300      	movs	r3, #0
 8019b74:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019b76:	4b5a      	ldr	r3, [pc, #360]	; (8019ce0 <ip4_input+0x240>)
 8019b78:	695b      	ldr	r3, [r3, #20]
 8019b7a:	b2db      	uxtb	r3, r3
 8019b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8019b7e:	d017      	beq.n	8019bb0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019b80:	4b58      	ldr	r3, [pc, #352]	; (8019ce4 <ip4_input+0x244>)
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	613b      	str	r3, [r7, #16]
 8019b86:	e00e      	b.n	8019ba6 <ip4_input+0x106>
          if (netif == inp) {
 8019b88:	693a      	ldr	r2, [r7, #16]
 8019b8a:	683b      	ldr	r3, [r7, #0]
 8019b8c:	429a      	cmp	r2, r3
 8019b8e:	d006      	beq.n	8019b9e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019b90:	6938      	ldr	r0, [r7, #16]
 8019b92:	f7ff ff5b 	bl	8019a4c <ip4_input_accept>
 8019b96:	4603      	mov	r3, r0
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d108      	bne.n	8019bae <ip4_input+0x10e>
 8019b9c:	e000      	b.n	8019ba0 <ip4_input+0x100>
            continue;
 8019b9e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019ba0:	693b      	ldr	r3, [r7, #16]
 8019ba2:	681b      	ldr	r3, [r3, #0]
 8019ba4:	613b      	str	r3, [r7, #16]
 8019ba6:	693b      	ldr	r3, [r7, #16]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d1ed      	bne.n	8019b88 <ip4_input+0xe8>
 8019bac:	e000      	b.n	8019bb0 <ip4_input+0x110>
            break;
 8019bae:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019bb0:	4b4b      	ldr	r3, [pc, #300]	; (8019ce0 <ip4_input+0x240>)
 8019bb2:	691b      	ldr	r3, [r3, #16]
 8019bb4:	6839      	ldr	r1, [r7, #0]
 8019bb6:	4618      	mov	r0, r3
 8019bb8:	f000 f96e 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8019bbc:	4603      	mov	r3, r0
 8019bbe:	2b00      	cmp	r3, #0
 8019bc0:	d105      	bne.n	8019bce <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019bc2:	4b47      	ldr	r3, [pc, #284]	; (8019ce0 <ip4_input+0x240>)
 8019bc4:	691b      	ldr	r3, [r3, #16]
 8019bc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019bca:	2be0      	cmp	r3, #224	; 0xe0
 8019bcc:	d104      	bne.n	8019bd8 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019bce:	6878      	ldr	r0, [r7, #4]
 8019bd0:	f7f7 fd2c 	bl	801162c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	e07e      	b.n	8019cd6 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019bd8:	693b      	ldr	r3, [r7, #16]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d104      	bne.n	8019be8 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019bde:	6878      	ldr	r0, [r7, #4]
 8019be0:	f7f7 fd24 	bl	801162c <pbuf_free>
    return ERR_OK;
 8019be4:	2300      	movs	r3, #0
 8019be6:	e076      	b.n	8019cd6 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019be8:	697b      	ldr	r3, [r7, #20]
 8019bea:	88db      	ldrh	r3, [r3, #6]
 8019bec:	b29b      	uxth	r3, r3
 8019bee:	461a      	mov	r2, r3
 8019bf0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019bf4:	4013      	ands	r3, r2
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d00b      	beq.n	8019c12 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019bfa:	6878      	ldr	r0, [r7, #4]
 8019bfc:	f000 fdd0 	bl	801a7a0 <ip4_reass>
 8019c00:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d101      	bne.n	8019c0c <ip4_input+0x16c>
      return ERR_OK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	e064      	b.n	8019cd6 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	685b      	ldr	r3, [r3, #4]
 8019c10:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019c12:	4a33      	ldr	r2, [pc, #204]	; (8019ce0 <ip4_input+0x240>)
 8019c14:	693b      	ldr	r3, [r7, #16]
 8019c16:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019c18:	4a31      	ldr	r2, [pc, #196]	; (8019ce0 <ip4_input+0x240>)
 8019c1a:	683b      	ldr	r3, [r7, #0]
 8019c1c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019c1e:	4a30      	ldr	r2, [pc, #192]	; (8019ce0 <ip4_input+0x240>)
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019c24:	697b      	ldr	r3, [r7, #20]
 8019c26:	781b      	ldrb	r3, [r3, #0]
 8019c28:	f003 030f 	and.w	r3, r3, #15
 8019c2c:	b2db      	uxtb	r3, r3
 8019c2e:	009b      	lsls	r3, r3, #2
 8019c30:	b2db      	uxtb	r3, r3
 8019c32:	b29a      	uxth	r2, r3
 8019c34:	4b2a      	ldr	r3, [pc, #168]	; (8019ce0 <ip4_input+0x240>)
 8019c36:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019c38:	89fb      	ldrh	r3, [r7, #14]
 8019c3a:	4619      	mov	r1, r3
 8019c3c:	6878      	ldr	r0, [r7, #4]
 8019c3e:	f7f7 fc3d 	bl	80114bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019c42:	697b      	ldr	r3, [r7, #20]
 8019c44:	7a5b      	ldrb	r3, [r3, #9]
 8019c46:	2b11      	cmp	r3, #17
 8019c48:	d006      	beq.n	8019c58 <ip4_input+0x1b8>
 8019c4a:	2b11      	cmp	r3, #17
 8019c4c:	dc13      	bgt.n	8019c76 <ip4_input+0x1d6>
 8019c4e:	2b01      	cmp	r3, #1
 8019c50:	d00c      	beq.n	8019c6c <ip4_input+0x1cc>
 8019c52:	2b06      	cmp	r3, #6
 8019c54:	d005      	beq.n	8019c62 <ip4_input+0x1c2>
 8019c56:	e00e      	b.n	8019c76 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019c58:	6839      	ldr	r1, [r7, #0]
 8019c5a:	6878      	ldr	r0, [r7, #4]
 8019c5c:	f7fe f970 	bl	8017f40 <udp_input>
        break;
 8019c60:	e026      	b.n	8019cb0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019c62:	6839      	ldr	r1, [r7, #0]
 8019c64:	6878      	ldr	r0, [r7, #4]
 8019c66:	f7f9 fd2d 	bl	80136c4 <tcp_input>
        break;
 8019c6a:	e021      	b.n	8019cb0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019c6c:	6839      	ldr	r1, [r7, #0]
 8019c6e:	6878      	ldr	r0, [r7, #4]
 8019c70:	f7ff fcee 	bl	8019650 <icmp_input>
        break;
 8019c74:	e01c      	b.n	8019cb0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019c76:	4b1a      	ldr	r3, [pc, #104]	; (8019ce0 <ip4_input+0x240>)
 8019c78:	695b      	ldr	r3, [r3, #20]
 8019c7a:	6939      	ldr	r1, [r7, #16]
 8019c7c:	4618      	mov	r0, r3
 8019c7e:	f000 f90b 	bl	8019e98 <ip4_addr_isbroadcast_u32>
 8019c82:	4603      	mov	r3, r0
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d10f      	bne.n	8019ca8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019c88:	4b15      	ldr	r3, [pc, #84]	; (8019ce0 <ip4_input+0x240>)
 8019c8a:	695b      	ldr	r3, [r3, #20]
 8019c8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019c90:	2be0      	cmp	r3, #224	; 0xe0
 8019c92:	d009      	beq.n	8019ca8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019c94:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019c98:	4619      	mov	r1, r3
 8019c9a:	6878      	ldr	r0, [r7, #4]
 8019c9c:	f7f7 fc81 	bl	80115a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019ca0:	2102      	movs	r1, #2
 8019ca2:	6878      	ldr	r0, [r7, #4]
 8019ca4:	f7ff fdd8 	bl	8019858 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019ca8:	6878      	ldr	r0, [r7, #4]
 8019caa:	f7f7 fcbf 	bl	801162c <pbuf_free>
        break;
 8019cae:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019cb0:	4b0b      	ldr	r3, [pc, #44]	; (8019ce0 <ip4_input+0x240>)
 8019cb2:	2200      	movs	r2, #0
 8019cb4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019cb6:	4b0a      	ldr	r3, [pc, #40]	; (8019ce0 <ip4_input+0x240>)
 8019cb8:	2200      	movs	r2, #0
 8019cba:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019cbc:	4b08      	ldr	r3, [pc, #32]	; (8019ce0 <ip4_input+0x240>)
 8019cbe:	2200      	movs	r2, #0
 8019cc0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019cc2:	4b07      	ldr	r3, [pc, #28]	; (8019ce0 <ip4_input+0x240>)
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019cc8:	4b05      	ldr	r3, [pc, #20]	; (8019ce0 <ip4_input+0x240>)
 8019cca:	2200      	movs	r2, #0
 8019ccc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019cce:	4b04      	ldr	r3, [pc, #16]	; (8019ce0 <ip4_input+0x240>)
 8019cd0:	2200      	movs	r2, #0
 8019cd2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019cd4:	2300      	movs	r3, #0
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	3718      	adds	r7, #24
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	2000a0a8 	.word	0x2000a0a8
 8019ce4:	2000d7ac 	.word	0x2000d7ac

08019ce8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019ce8:	b580      	push	{r7, lr}
 8019cea:	b08a      	sub	sp, #40	; 0x28
 8019cec:	af04      	add	r7, sp, #16
 8019cee:	60f8      	str	r0, [r7, #12]
 8019cf0:	60b9      	str	r1, [r7, #8]
 8019cf2:	607a      	str	r2, [r7, #4]
 8019cf4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019cf6:	68bb      	ldr	r3, [r7, #8]
 8019cf8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	2b00      	cmp	r3, #0
 8019cfe:	d009      	beq.n	8019d14 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019d00:	68bb      	ldr	r3, [r7, #8]
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d003      	beq.n	8019d0e <ip4_output_if+0x26>
 8019d06:	68bb      	ldr	r3, [r7, #8]
 8019d08:	681b      	ldr	r3, [r3, #0]
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d102      	bne.n	8019d14 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d10:	3304      	adds	r3, #4
 8019d12:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019d14:	78fa      	ldrb	r2, [r7, #3]
 8019d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d18:	9302      	str	r3, [sp, #8]
 8019d1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d1e:	9301      	str	r3, [sp, #4]
 8019d20:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d24:	9300      	str	r3, [sp, #0]
 8019d26:	4613      	mov	r3, r2
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	6979      	ldr	r1, [r7, #20]
 8019d2c:	68f8      	ldr	r0, [r7, #12]
 8019d2e:	f000 f805 	bl	8019d3c <ip4_output_if_src>
 8019d32:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019d34:	4618      	mov	r0, r3
 8019d36:	3718      	adds	r7, #24
 8019d38:	46bd      	mov	sp, r7
 8019d3a:	bd80      	pop	{r7, pc}

08019d3c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019d3c:	b580      	push	{r7, lr}
 8019d3e:	b088      	sub	sp, #32
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	60f8      	str	r0, [r7, #12]
 8019d44:	60b9      	str	r1, [r7, #8]
 8019d46:	607a      	str	r2, [r7, #4]
 8019d48:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019d4a:	68fb      	ldr	r3, [r7, #12]
 8019d4c:	7b9b      	ldrb	r3, [r3, #14]
 8019d4e:	2b01      	cmp	r3, #1
 8019d50:	d006      	beq.n	8019d60 <ip4_output_if_src+0x24>
 8019d52:	4b4b      	ldr	r3, [pc, #300]	; (8019e80 <ip4_output_if_src+0x144>)
 8019d54:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019d58:	494a      	ldr	r1, [pc, #296]	; (8019e84 <ip4_output_if_src+0x148>)
 8019d5a:	484b      	ldr	r0, [pc, #300]	; (8019e88 <ip4_output_if_src+0x14c>)
 8019d5c:	f001 ff96 	bl	801bc8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d060      	beq.n	8019e28 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019d66:	2314      	movs	r3, #20
 8019d68:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019d6a:	2114      	movs	r1, #20
 8019d6c:	68f8      	ldr	r0, [r7, #12]
 8019d6e:	f7f7 fb95 	bl	801149c <pbuf_add_header>
 8019d72:	4603      	mov	r3, r0
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d002      	beq.n	8019d7e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019d78:	f06f 0301 	mvn.w	r3, #1
 8019d7c:	e07c      	b.n	8019e78 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019d7e:	68fb      	ldr	r3, [r7, #12]
 8019d80:	685b      	ldr	r3, [r3, #4]
 8019d82:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	895b      	ldrh	r3, [r3, #10]
 8019d88:	2b13      	cmp	r3, #19
 8019d8a:	d806      	bhi.n	8019d9a <ip4_output_if_src+0x5e>
 8019d8c:	4b3c      	ldr	r3, [pc, #240]	; (8019e80 <ip4_output_if_src+0x144>)
 8019d8e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019d92:	493e      	ldr	r1, [pc, #248]	; (8019e8c <ip4_output_if_src+0x150>)
 8019d94:	483c      	ldr	r0, [pc, #240]	; (8019e88 <ip4_output_if_src+0x14c>)
 8019d96:	f001 ff79 	bl	801bc8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019d9a:	69fb      	ldr	r3, [r7, #28]
 8019d9c:	78fa      	ldrb	r2, [r7, #3]
 8019d9e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019da0:	69fb      	ldr	r3, [r7, #28]
 8019da2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019da6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	681a      	ldr	r2, [r3, #0]
 8019dac:	69fb      	ldr	r3, [r7, #28]
 8019dae:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019db0:	8b7b      	ldrh	r3, [r7, #26]
 8019db2:	089b      	lsrs	r3, r3, #2
 8019db4:	b29b      	uxth	r3, r3
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019dbc:	b2da      	uxtb	r2, r3
 8019dbe:	69fb      	ldr	r3, [r7, #28]
 8019dc0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019dc2:	69fb      	ldr	r3, [r7, #28]
 8019dc4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019dc8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	891b      	ldrh	r3, [r3, #8]
 8019dce:	4618      	mov	r0, r3
 8019dd0:	f7f6 f84e 	bl	800fe70 <lwip_htons>
 8019dd4:	4603      	mov	r3, r0
 8019dd6:	461a      	mov	r2, r3
 8019dd8:	69fb      	ldr	r3, [r7, #28]
 8019dda:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019ddc:	69fb      	ldr	r3, [r7, #28]
 8019dde:	2200      	movs	r2, #0
 8019de0:	719a      	strb	r2, [r3, #6]
 8019de2:	2200      	movs	r2, #0
 8019de4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019de6:	4b2a      	ldr	r3, [pc, #168]	; (8019e90 <ip4_output_if_src+0x154>)
 8019de8:	881b      	ldrh	r3, [r3, #0]
 8019dea:	4618      	mov	r0, r3
 8019dec:	f7f6 f840 	bl	800fe70 <lwip_htons>
 8019df0:	4603      	mov	r3, r0
 8019df2:	461a      	mov	r2, r3
 8019df4:	69fb      	ldr	r3, [r7, #28]
 8019df6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019df8:	4b25      	ldr	r3, [pc, #148]	; (8019e90 <ip4_output_if_src+0x154>)
 8019dfa:	881b      	ldrh	r3, [r3, #0]
 8019dfc:	3301      	adds	r3, #1
 8019dfe:	b29a      	uxth	r2, r3
 8019e00:	4b23      	ldr	r3, [pc, #140]	; (8019e90 <ip4_output_if_src+0x154>)
 8019e02:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019e04:	68bb      	ldr	r3, [r7, #8]
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d104      	bne.n	8019e14 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019e0a:	4b22      	ldr	r3, [pc, #136]	; (8019e94 <ip4_output_if_src+0x158>)
 8019e0c:	681a      	ldr	r2, [r3, #0]
 8019e0e:	69fb      	ldr	r3, [r7, #28]
 8019e10:	60da      	str	r2, [r3, #12]
 8019e12:	e003      	b.n	8019e1c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019e14:	68bb      	ldr	r3, [r7, #8]
 8019e16:	681a      	ldr	r2, [r3, #0]
 8019e18:	69fb      	ldr	r3, [r7, #28]
 8019e1a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019e1c:	69fb      	ldr	r3, [r7, #28]
 8019e1e:	2200      	movs	r2, #0
 8019e20:	729a      	strb	r2, [r3, #10]
 8019e22:	2200      	movs	r2, #0
 8019e24:	72da      	strb	r2, [r3, #11]
 8019e26:	e00f      	b.n	8019e48 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019e28:	68fb      	ldr	r3, [r7, #12]
 8019e2a:	895b      	ldrh	r3, [r3, #10]
 8019e2c:	2b13      	cmp	r3, #19
 8019e2e:	d802      	bhi.n	8019e36 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019e30:	f06f 0301 	mvn.w	r3, #1
 8019e34:	e020      	b.n	8019e78 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	685b      	ldr	r3, [r3, #4]
 8019e3a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019e3c:	69fb      	ldr	r3, [r7, #28]
 8019e3e:	691b      	ldr	r3, [r3, #16]
 8019e40:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019e42:	f107 0314 	add.w	r3, r7, #20
 8019e46:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e4a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019e4c:	2b00      	cmp	r3, #0
 8019e4e:	d00c      	beq.n	8019e6a <ip4_output_if_src+0x12e>
 8019e50:	68fb      	ldr	r3, [r7, #12]
 8019e52:	891a      	ldrh	r2, [r3, #8]
 8019e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019e58:	429a      	cmp	r2, r3
 8019e5a:	d906      	bls.n	8019e6a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019e5c:	687a      	ldr	r2, [r7, #4]
 8019e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019e60:	68f8      	ldr	r0, [r7, #12]
 8019e62:	f000 fe8b 	bl	801ab7c <ip4_frag>
 8019e66:	4603      	mov	r3, r0
 8019e68:	e006      	b.n	8019e78 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019e6c:	695b      	ldr	r3, [r3, #20]
 8019e6e:	687a      	ldr	r2, [r7, #4]
 8019e70:	68f9      	ldr	r1, [r7, #12]
 8019e72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019e74:	4798      	blx	r3
 8019e76:	4603      	mov	r3, r0
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3720      	adds	r7, #32
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	080217ac 	.word	0x080217ac
 8019e84:	080217e0 	.word	0x080217e0
 8019e88:	080217ec 	.word	0x080217ec
 8019e8c:	08021814 	.word	0x08021814
 8019e90:	20004926 	.word	0x20004926
 8019e94:	08021ce8 	.word	0x08021ce8

08019e98 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019e98:	b480      	push	{r7}
 8019e9a:	b085      	sub	sp, #20
 8019e9c:	af00      	add	r7, sp, #0
 8019e9e:	6078      	str	r0, [r7, #4]
 8019ea0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019eac:	d002      	beq.n	8019eb4 <ip4_addr_isbroadcast_u32+0x1c>
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	2b00      	cmp	r3, #0
 8019eb2:	d101      	bne.n	8019eb8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019eb4:	2301      	movs	r3, #1
 8019eb6:	e02a      	b.n	8019f0e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019ebe:	f003 0302 	and.w	r3, r3, #2
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d101      	bne.n	8019eca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019ec6:	2300      	movs	r3, #0
 8019ec8:	e021      	b.n	8019f0e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019eca:	683b      	ldr	r3, [r7, #0]
 8019ecc:	3304      	adds	r3, #4
 8019ece:	681b      	ldr	r3, [r3, #0]
 8019ed0:	687a      	ldr	r2, [r7, #4]
 8019ed2:	429a      	cmp	r2, r3
 8019ed4:	d101      	bne.n	8019eda <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	e019      	b.n	8019f0e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019eda:	68fa      	ldr	r2, [r7, #12]
 8019edc:	683b      	ldr	r3, [r7, #0]
 8019ede:	3304      	adds	r3, #4
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	405a      	eors	r2, r3
 8019ee4:	683b      	ldr	r3, [r7, #0]
 8019ee6:	3308      	adds	r3, #8
 8019ee8:	681b      	ldr	r3, [r3, #0]
 8019eea:	4013      	ands	r3, r2
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d10d      	bne.n	8019f0c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019ef0:	683b      	ldr	r3, [r7, #0]
 8019ef2:	3308      	adds	r3, #8
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	43da      	mvns	r2, r3
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019efc:	683b      	ldr	r3, [r7, #0]
 8019efe:	3308      	adds	r3, #8
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019f04:	429a      	cmp	r2, r3
 8019f06:	d101      	bne.n	8019f0c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019f08:	2301      	movs	r3, #1
 8019f0a:	e000      	b.n	8019f0e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019f0c:	2300      	movs	r3, #0
  }
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3714      	adds	r7, #20
 8019f12:	46bd      	mov	sp, r7
 8019f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f18:	4770      	bx	lr

08019f1a <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8019f1a:	b580      	push	{r7, lr}
 8019f1c:	b084      	sub	sp, #16
 8019f1e:	af00      	add	r7, sp, #0
 8019f20:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8019f22:	f107 030c 	add.w	r3, r7, #12
 8019f26:	4619      	mov	r1, r3
 8019f28:	6878      	ldr	r0, [r7, #4]
 8019f2a:	f000 f80b 	bl	8019f44 <ip4addr_aton>
 8019f2e:	4603      	mov	r3, r0
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d001      	beq.n	8019f38 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8019f34:	68fb      	ldr	r3, [r7, #12]
 8019f36:	e001      	b.n	8019f3c <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8019f38:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019f3c:	4618      	mov	r0, r3
 8019f3e:	3710      	adds	r7, #16
 8019f40:	46bd      	mov	sp, r7
 8019f42:	bd80      	pop	{r7, pc}

08019f44 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019f44:	b580      	push	{r7, lr}
 8019f46:	b08a      	sub	sp, #40	; 0x28
 8019f48:	af00      	add	r7, sp, #0
 8019f4a:	6078      	str	r0, [r7, #4]
 8019f4c:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019f4e:	f107 030c 	add.w	r3, r7, #12
 8019f52:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	781b      	ldrb	r3, [r3, #0]
 8019f58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f60:	3301      	adds	r3, #1
 8019f62:	4a89      	ldr	r2, [pc, #548]	; (801a188 <ip4addr_aton+0x244>)
 8019f64:	4413      	add	r3, r2
 8019f66:	781b      	ldrb	r3, [r3, #0]
 8019f68:	f003 0304 	and.w	r3, r3, #4
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d101      	bne.n	8019f74 <ip4addr_aton+0x30>
      return 0;
 8019f70:	2300      	movs	r3, #0
 8019f72:	e105      	b.n	801a180 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019f74:	2300      	movs	r3, #0
 8019f76:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019f78:	230a      	movs	r3, #10
 8019f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019f7e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f82:	2b30      	cmp	r3, #48	; 0x30
 8019f84:	d11c      	bne.n	8019fc0 <ip4addr_aton+0x7c>
      c = *++cp;
 8019f86:	687b      	ldr	r3, [r7, #4]
 8019f88:	3301      	adds	r3, #1
 8019f8a:	607b      	str	r3, [r7, #4]
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	781b      	ldrb	r3, [r3, #0]
 8019f90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8019f94:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019f98:	2b78      	cmp	r3, #120	; 0x78
 8019f9a:	d003      	beq.n	8019fa4 <ip4addr_aton+0x60>
 8019f9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019fa0:	2b58      	cmp	r3, #88	; 0x58
 8019fa2:	d10a      	bne.n	8019fba <ip4addr_aton+0x76>
        base = 16;
 8019fa4:	2310      	movs	r3, #16
 8019fa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8019faa:	687b      	ldr	r3, [r7, #4]
 8019fac:	3301      	adds	r3, #1
 8019fae:	607b      	str	r3, [r7, #4]
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	781b      	ldrb	r3, [r3, #0]
 8019fb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019fb8:	e002      	b.n	8019fc0 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8019fba:	2308      	movs	r3, #8
 8019fbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8019fc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019fc4:	3301      	adds	r3, #1
 8019fc6:	4a70      	ldr	r2, [pc, #448]	; (801a188 <ip4addr_aton+0x244>)
 8019fc8:	4413      	add	r3, r2
 8019fca:	781b      	ldrb	r3, [r3, #0]
 8019fcc:	f003 0304 	and.w	r3, r3, #4
 8019fd0:	2b00      	cmp	r3, #0
 8019fd2:	d011      	beq.n	8019ff8 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8019fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019fda:	fb02 f203 	mul.w	r2, r2, r3
 8019fde:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019fe2:	4413      	add	r3, r2
 8019fe4:	3b30      	subs	r3, #48	; 0x30
 8019fe6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	3301      	adds	r3, #1
 8019fec:	607b      	str	r3, [r7, #4]
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	781b      	ldrb	r3, [r3, #0]
 8019ff2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8019ff6:	e7e3      	b.n	8019fc0 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8019ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019ffc:	2b10      	cmp	r3, #16
 8019ffe:	d127      	bne.n	801a050 <ip4addr_aton+0x10c>
 801a000:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a004:	3301      	adds	r3, #1
 801a006:	4a60      	ldr	r2, [pc, #384]	; (801a188 <ip4addr_aton+0x244>)
 801a008:	4413      	add	r3, r2
 801a00a:	781b      	ldrb	r3, [r3, #0]
 801a00c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a010:	2b00      	cmp	r3, #0
 801a012:	d01d      	beq.n	801a050 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a016:	011b      	lsls	r3, r3, #4
 801a018:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a01c:	f102 010a 	add.w	r1, r2, #10
 801a020:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a024:	3201      	adds	r2, #1
 801a026:	4858      	ldr	r0, [pc, #352]	; (801a188 <ip4addr_aton+0x244>)
 801a028:	4402      	add	r2, r0
 801a02a:	7812      	ldrb	r2, [r2, #0]
 801a02c:	f002 0203 	and.w	r2, r2, #3
 801a030:	2a02      	cmp	r2, #2
 801a032:	d101      	bne.n	801a038 <ip4addr_aton+0xf4>
 801a034:	2261      	movs	r2, #97	; 0x61
 801a036:	e000      	b.n	801a03a <ip4addr_aton+0xf6>
 801a038:	2241      	movs	r2, #65	; 0x41
 801a03a:	1a8a      	subs	r2, r1, r2
 801a03c:	4313      	orrs	r3, r2
 801a03e:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	3301      	adds	r3, #1
 801a044:	607b      	str	r3, [r7, #4]
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	781b      	ldrb	r3, [r3, #0]
 801a04a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a04e:	e7b7      	b.n	8019fc0 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a054:	2b2e      	cmp	r3, #46	; 0x2e
 801a056:	d114      	bne.n	801a082 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a058:	f107 030c 	add.w	r3, r7, #12
 801a05c:	330c      	adds	r3, #12
 801a05e:	69fa      	ldr	r2, [r7, #28]
 801a060:	429a      	cmp	r2, r3
 801a062:	d301      	bcc.n	801a068 <ip4addr_aton+0x124>
        return 0;
 801a064:	2300      	movs	r3, #0
 801a066:	e08b      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a068:	69fb      	ldr	r3, [r7, #28]
 801a06a:	1d1a      	adds	r2, r3, #4
 801a06c:	61fa      	str	r2, [r7, #28]
 801a06e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a070:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	3301      	adds	r3, #1
 801a076:	607b      	str	r3, [r7, #4]
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	781b      	ldrb	r3, [r3, #0]
 801a07c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a080:	e76c      	b.n	8019f5c <ip4addr_aton+0x18>
    } else {
      break;
 801a082:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a084:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a088:	2b00      	cmp	r3, #0
 801a08a:	d00b      	beq.n	801a0a4 <ip4addr_aton+0x160>
 801a08c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a090:	3301      	adds	r3, #1
 801a092:	4a3d      	ldr	r2, [pc, #244]	; (801a188 <ip4addr_aton+0x244>)
 801a094:	4413      	add	r3, r2
 801a096:	781b      	ldrb	r3, [r3, #0]
 801a098:	f003 0308 	and.w	r3, r3, #8
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d101      	bne.n	801a0a4 <ip4addr_aton+0x160>
    return 0;
 801a0a0:	2300      	movs	r3, #0
 801a0a2:	e06d      	b.n	801a180 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a0a4:	f107 030c 	add.w	r3, r7, #12
 801a0a8:	69fa      	ldr	r2, [r7, #28]
 801a0aa:	1ad3      	subs	r3, r2, r3
 801a0ac:	109b      	asrs	r3, r3, #2
 801a0ae:	3301      	adds	r3, #1
 801a0b0:	2b04      	cmp	r3, #4
 801a0b2:	d853      	bhi.n	801a15c <ip4addr_aton+0x218>
 801a0b4:	a201      	add	r2, pc, #4	; (adr r2, 801a0bc <ip4addr_aton+0x178>)
 801a0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a0ba:	bf00      	nop
 801a0bc:	0801a0d1 	.word	0x0801a0d1
 801a0c0:	0801a16b 	.word	0x0801a16b
 801a0c4:	0801a0d5 	.word	0x0801a0d5
 801a0c8:	0801a0f7 	.word	0x0801a0f7
 801a0cc:	0801a125 	.word	0x0801a125

    case 0:
      return 0;       /* initial nondigit */
 801a0d0:	2300      	movs	r3, #0
 801a0d2:	e055      	b.n	801a180 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a0da:	d301      	bcc.n	801a0e0 <ip4addr_aton+0x19c>
        return 0;
 801a0dc:	2300      	movs	r3, #0
 801a0de:	e04f      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a0e0:	68fb      	ldr	r3, [r7, #12]
 801a0e2:	2bff      	cmp	r3, #255	; 0xff
 801a0e4:	d901      	bls.n	801a0ea <ip4addr_aton+0x1a6>
        return 0;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	e04a      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	061b      	lsls	r3, r3, #24
 801a0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0f0:	4313      	orrs	r3, r2
 801a0f2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a0f4:	e03a      	b.n	801a16c <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a0f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a0fc:	d301      	bcc.n	801a102 <ip4addr_aton+0x1be>
        return 0;
 801a0fe:	2300      	movs	r3, #0
 801a100:	e03e      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	2bff      	cmp	r3, #255	; 0xff
 801a106:	d802      	bhi.n	801a10e <ip4addr_aton+0x1ca>
 801a108:	693b      	ldr	r3, [r7, #16]
 801a10a:	2bff      	cmp	r3, #255	; 0xff
 801a10c:	d901      	bls.n	801a112 <ip4addr_aton+0x1ce>
        return 0;
 801a10e:	2300      	movs	r3, #0
 801a110:	e036      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	061a      	lsls	r2, r3, #24
 801a116:	693b      	ldr	r3, [r7, #16]
 801a118:	041b      	lsls	r3, r3, #16
 801a11a:	4313      	orrs	r3, r2
 801a11c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a11e:	4313      	orrs	r3, r2
 801a120:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a122:	e023      	b.n	801a16c <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a126:	2bff      	cmp	r3, #255	; 0xff
 801a128:	d901      	bls.n	801a12e <ip4addr_aton+0x1ea>
        return 0;
 801a12a:	2300      	movs	r3, #0
 801a12c:	e028      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	2bff      	cmp	r3, #255	; 0xff
 801a132:	d805      	bhi.n	801a140 <ip4addr_aton+0x1fc>
 801a134:	693b      	ldr	r3, [r7, #16]
 801a136:	2bff      	cmp	r3, #255	; 0xff
 801a138:	d802      	bhi.n	801a140 <ip4addr_aton+0x1fc>
 801a13a:	697b      	ldr	r3, [r7, #20]
 801a13c:	2bff      	cmp	r3, #255	; 0xff
 801a13e:	d901      	bls.n	801a144 <ip4addr_aton+0x200>
        return 0;
 801a140:	2300      	movs	r3, #0
 801a142:	e01d      	b.n	801a180 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a144:	68fb      	ldr	r3, [r7, #12]
 801a146:	061a      	lsls	r2, r3, #24
 801a148:	693b      	ldr	r3, [r7, #16]
 801a14a:	041b      	lsls	r3, r3, #16
 801a14c:	431a      	orrs	r2, r3
 801a14e:	697b      	ldr	r3, [r7, #20]
 801a150:	021b      	lsls	r3, r3, #8
 801a152:	4313      	orrs	r3, r2
 801a154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a156:	4313      	orrs	r3, r2
 801a158:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a15a:	e007      	b.n	801a16c <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a15c:	4b0b      	ldr	r3, [pc, #44]	; (801a18c <ip4addr_aton+0x248>)
 801a15e:	22f9      	movs	r2, #249	; 0xf9
 801a160:	490b      	ldr	r1, [pc, #44]	; (801a190 <ip4addr_aton+0x24c>)
 801a162:	480c      	ldr	r0, [pc, #48]	; (801a194 <ip4addr_aton+0x250>)
 801a164:	f001 fd92 	bl	801bc8c <iprintf>
      break;
 801a168:	e000      	b.n	801a16c <ip4addr_aton+0x228>
      break;
 801a16a:	bf00      	nop
  }
  if (addr) {
 801a16c:	683b      	ldr	r3, [r7, #0]
 801a16e:	2b00      	cmp	r3, #0
 801a170:	d005      	beq.n	801a17e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a172:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a174:	f7f5 fe91 	bl	800fe9a <lwip_htonl>
 801a178:	4602      	mov	r2, r0
 801a17a:	683b      	ldr	r3, [r7, #0]
 801a17c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a17e:	2301      	movs	r3, #1
}
 801a180:	4618      	mov	r0, r3
 801a182:	3728      	adds	r7, #40	; 0x28
 801a184:	46bd      	mov	sp, r7
 801a186:	bd80      	pop	{r7, pc}
 801a188:	08021d04 	.word	0x08021d04
 801a18c:	08021844 	.word	0x08021844
 801a190:	08021880 	.word	0x08021880
 801a194:	0802188c 	.word	0x0802188c

0801a198 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b084      	sub	sp, #16
 801a19c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a19e:	2300      	movs	r3, #0
 801a1a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a1a2:	4b12      	ldr	r3, [pc, #72]	; (801a1ec <ip_reass_tmr+0x54>)
 801a1a4:	681b      	ldr	r3, [r3, #0]
 801a1a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a1a8:	e018      	b.n	801a1dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a1aa:	68fb      	ldr	r3, [r7, #12]
 801a1ac:	7fdb      	ldrb	r3, [r3, #31]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	d00b      	beq.n	801a1ca <ip_reass_tmr+0x32>
      r->timer--;
 801a1b2:	68fb      	ldr	r3, [r7, #12]
 801a1b4:	7fdb      	ldrb	r3, [r3, #31]
 801a1b6:	3b01      	subs	r3, #1
 801a1b8:	b2da      	uxtb	r2, r3
 801a1ba:	68fb      	ldr	r3, [r7, #12]
 801a1bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	681b      	ldr	r3, [r3, #0]
 801a1c6:	60fb      	str	r3, [r7, #12]
 801a1c8:	e008      	b.n	801a1dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a1ca:	68fb      	ldr	r3, [r7, #12]
 801a1cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a1ce:	68fb      	ldr	r3, [r7, #12]
 801a1d0:	681b      	ldr	r3, [r3, #0]
 801a1d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a1d4:	68b9      	ldr	r1, [r7, #8]
 801a1d6:	6878      	ldr	r0, [r7, #4]
 801a1d8:	f000 f80a 	bl	801a1f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a1dc:	68fb      	ldr	r3, [r7, #12]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d1e3      	bne.n	801a1aa <ip_reass_tmr+0x12>
    }
  }
}
 801a1e2:	bf00      	nop
 801a1e4:	bf00      	nop
 801a1e6:	3710      	adds	r7, #16
 801a1e8:	46bd      	mov	sp, r7
 801a1ea:	bd80      	pop	{r7, pc}
 801a1ec:	20004928 	.word	0x20004928

0801a1f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a1f0:	b580      	push	{r7, lr}
 801a1f2:	b088      	sub	sp, #32
 801a1f4:	af00      	add	r7, sp, #0
 801a1f6:	6078      	str	r0, [r7, #4]
 801a1f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a1fa:	2300      	movs	r3, #0
 801a1fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a1fe:	683a      	ldr	r2, [r7, #0]
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	429a      	cmp	r2, r3
 801a204:	d105      	bne.n	801a212 <ip_reass_free_complete_datagram+0x22>
 801a206:	4b45      	ldr	r3, [pc, #276]	; (801a31c <ip_reass_free_complete_datagram+0x12c>)
 801a208:	22ab      	movs	r2, #171	; 0xab
 801a20a:	4945      	ldr	r1, [pc, #276]	; (801a320 <ip_reass_free_complete_datagram+0x130>)
 801a20c:	4845      	ldr	r0, [pc, #276]	; (801a324 <ip_reass_free_complete_datagram+0x134>)
 801a20e:	f001 fd3d 	bl	801bc8c <iprintf>
  if (prev != NULL) {
 801a212:	683b      	ldr	r3, [r7, #0]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d00a      	beq.n	801a22e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a218:	683b      	ldr	r3, [r7, #0]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	687a      	ldr	r2, [r7, #4]
 801a21e:	429a      	cmp	r2, r3
 801a220:	d005      	beq.n	801a22e <ip_reass_free_complete_datagram+0x3e>
 801a222:	4b3e      	ldr	r3, [pc, #248]	; (801a31c <ip_reass_free_complete_datagram+0x12c>)
 801a224:	22ad      	movs	r2, #173	; 0xad
 801a226:	4940      	ldr	r1, [pc, #256]	; (801a328 <ip_reass_free_complete_datagram+0x138>)
 801a228:	483e      	ldr	r0, [pc, #248]	; (801a324 <ip_reass_free_complete_datagram+0x134>)
 801a22a:	f001 fd2f 	bl	801bc8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a22e:	687b      	ldr	r3, [r7, #4]
 801a230:	685b      	ldr	r3, [r3, #4]
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a236:	697b      	ldr	r3, [r7, #20]
 801a238:	889b      	ldrh	r3, [r3, #4]
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d12a      	bne.n	801a296 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	685b      	ldr	r3, [r3, #4]
 801a244:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a246:	697b      	ldr	r3, [r7, #20]
 801a248:	681a      	ldr	r2, [r3, #0]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a24e:	69bb      	ldr	r3, [r7, #24]
 801a250:	6858      	ldr	r0, [r3, #4]
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	3308      	adds	r3, #8
 801a256:	2214      	movs	r2, #20
 801a258:	4619      	mov	r1, r3
 801a25a:	f001 f8bf 	bl	801b3dc <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a25e:	2101      	movs	r1, #1
 801a260:	69b8      	ldr	r0, [r7, #24]
 801a262:	f7ff fb09 	bl	8019878 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a266:	69b8      	ldr	r0, [r7, #24]
 801a268:	f7f7 fa6e 	bl	8011748 <pbuf_clen>
 801a26c:	4603      	mov	r3, r0
 801a26e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a270:	8bfa      	ldrh	r2, [r7, #30]
 801a272:	8a7b      	ldrh	r3, [r7, #18]
 801a274:	4413      	add	r3, r2
 801a276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a27a:	db05      	blt.n	801a288 <ip_reass_free_complete_datagram+0x98>
 801a27c:	4b27      	ldr	r3, [pc, #156]	; (801a31c <ip_reass_free_complete_datagram+0x12c>)
 801a27e:	22bc      	movs	r2, #188	; 0xbc
 801a280:	492a      	ldr	r1, [pc, #168]	; (801a32c <ip_reass_free_complete_datagram+0x13c>)
 801a282:	4828      	ldr	r0, [pc, #160]	; (801a324 <ip_reass_free_complete_datagram+0x134>)
 801a284:	f001 fd02 	bl	801bc8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a288:	8bfa      	ldrh	r2, [r7, #30]
 801a28a:	8a7b      	ldrh	r3, [r7, #18]
 801a28c:	4413      	add	r3, r2
 801a28e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a290:	69b8      	ldr	r0, [r7, #24]
 801a292:	f7f7 f9cb 	bl	801162c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	685b      	ldr	r3, [r3, #4]
 801a29a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a29c:	e01f      	b.n	801a2de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a29e:	69bb      	ldr	r3, [r7, #24]
 801a2a0:	685b      	ldr	r3, [r3, #4]
 801a2a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a2a4:	69bb      	ldr	r3, [r7, #24]
 801a2a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a2a8:	697b      	ldr	r3, [r7, #20]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a2ae:	68f8      	ldr	r0, [r7, #12]
 801a2b0:	f7f7 fa4a 	bl	8011748 <pbuf_clen>
 801a2b4:	4603      	mov	r3, r0
 801a2b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a2b8:	8bfa      	ldrh	r2, [r7, #30]
 801a2ba:	8a7b      	ldrh	r3, [r7, #18]
 801a2bc:	4413      	add	r3, r2
 801a2be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2c2:	db05      	blt.n	801a2d0 <ip_reass_free_complete_datagram+0xe0>
 801a2c4:	4b15      	ldr	r3, [pc, #84]	; (801a31c <ip_reass_free_complete_datagram+0x12c>)
 801a2c6:	22cc      	movs	r2, #204	; 0xcc
 801a2c8:	4918      	ldr	r1, [pc, #96]	; (801a32c <ip_reass_free_complete_datagram+0x13c>)
 801a2ca:	4816      	ldr	r0, [pc, #88]	; (801a324 <ip_reass_free_complete_datagram+0x134>)
 801a2cc:	f001 fcde 	bl	801bc8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a2d0:	8bfa      	ldrh	r2, [r7, #30]
 801a2d2:	8a7b      	ldrh	r3, [r7, #18]
 801a2d4:	4413      	add	r3, r2
 801a2d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a2d8:	68f8      	ldr	r0, [r7, #12]
 801a2da:	f7f7 f9a7 	bl	801162c <pbuf_free>
  while (p != NULL) {
 801a2de:	69bb      	ldr	r3, [r7, #24]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d1dc      	bne.n	801a29e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a2e4:	6839      	ldr	r1, [r7, #0]
 801a2e6:	6878      	ldr	r0, [r7, #4]
 801a2e8:	f000 f8c2 	bl	801a470 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a2ec:	4b10      	ldr	r3, [pc, #64]	; (801a330 <ip_reass_free_complete_datagram+0x140>)
 801a2ee:	881b      	ldrh	r3, [r3, #0]
 801a2f0:	8bfa      	ldrh	r2, [r7, #30]
 801a2f2:	429a      	cmp	r2, r3
 801a2f4:	d905      	bls.n	801a302 <ip_reass_free_complete_datagram+0x112>
 801a2f6:	4b09      	ldr	r3, [pc, #36]	; (801a31c <ip_reass_free_complete_datagram+0x12c>)
 801a2f8:	22d2      	movs	r2, #210	; 0xd2
 801a2fa:	490e      	ldr	r1, [pc, #56]	; (801a334 <ip_reass_free_complete_datagram+0x144>)
 801a2fc:	4809      	ldr	r0, [pc, #36]	; (801a324 <ip_reass_free_complete_datagram+0x134>)
 801a2fe:	f001 fcc5 	bl	801bc8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a302:	4b0b      	ldr	r3, [pc, #44]	; (801a330 <ip_reass_free_complete_datagram+0x140>)
 801a304:	881a      	ldrh	r2, [r3, #0]
 801a306:	8bfb      	ldrh	r3, [r7, #30]
 801a308:	1ad3      	subs	r3, r2, r3
 801a30a:	b29a      	uxth	r2, r3
 801a30c:	4b08      	ldr	r3, [pc, #32]	; (801a330 <ip_reass_free_complete_datagram+0x140>)
 801a30e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a310:	8bfb      	ldrh	r3, [r7, #30]
}
 801a312:	4618      	mov	r0, r3
 801a314:	3720      	adds	r7, #32
 801a316:	46bd      	mov	sp, r7
 801a318:	bd80      	pop	{r7, pc}
 801a31a:	bf00      	nop
 801a31c:	080218b4 	.word	0x080218b4
 801a320:	080218f0 	.word	0x080218f0
 801a324:	080218fc 	.word	0x080218fc
 801a328:	08021924 	.word	0x08021924
 801a32c:	08021938 	.word	0x08021938
 801a330:	2000492c 	.word	0x2000492c
 801a334:	08021958 	.word	0x08021958

0801a338 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a338:	b580      	push	{r7, lr}
 801a33a:	b08a      	sub	sp, #40	; 0x28
 801a33c:	af00      	add	r7, sp, #0
 801a33e:	6078      	str	r0, [r7, #4]
 801a340:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a342:	2300      	movs	r3, #0
 801a344:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a346:	2300      	movs	r3, #0
 801a348:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a34a:	2300      	movs	r3, #0
 801a34c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a34e:	2300      	movs	r3, #0
 801a350:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a352:	2300      	movs	r3, #0
 801a354:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a356:	4b28      	ldr	r3, [pc, #160]	; (801a3f8 <ip_reass_remove_oldest_datagram+0xc0>)
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a35c:	e030      	b.n	801a3c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a360:	695a      	ldr	r2, [r3, #20]
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	429a      	cmp	r2, r3
 801a368:	d10c      	bne.n	801a384 <ip_reass_remove_oldest_datagram+0x4c>
 801a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a36c:	699a      	ldr	r2, [r3, #24]
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	691b      	ldr	r3, [r3, #16]
 801a372:	429a      	cmp	r2, r3
 801a374:	d106      	bne.n	801a384 <ip_reass_remove_oldest_datagram+0x4c>
 801a376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a378:	899a      	ldrh	r2, [r3, #12]
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	889b      	ldrh	r3, [r3, #4]
 801a37e:	b29b      	uxth	r3, r3
 801a380:	429a      	cmp	r2, r3
 801a382:	d014      	beq.n	801a3ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a384:	693b      	ldr	r3, [r7, #16]
 801a386:	3301      	adds	r3, #1
 801a388:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a38a:	6a3b      	ldr	r3, [r7, #32]
 801a38c:	2b00      	cmp	r3, #0
 801a38e:	d104      	bne.n	801a39a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a392:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a394:	69fb      	ldr	r3, [r7, #28]
 801a396:	61bb      	str	r3, [r7, #24]
 801a398:	e009      	b.n	801a3ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a39c:	7fda      	ldrb	r2, [r3, #31]
 801a39e:	6a3b      	ldr	r3, [r7, #32]
 801a3a0:	7fdb      	ldrb	r3, [r3, #31]
 801a3a2:	429a      	cmp	r2, r3
 801a3a4:	d803      	bhi.n	801a3ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a3aa:	69fb      	ldr	r3, [r7, #28]
 801a3ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d001      	beq.n	801a3ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3bc:	681b      	ldr	r3, [r3, #0]
 801a3be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3c2:	2b00      	cmp	r3, #0
 801a3c4:	d1cb      	bne.n	801a35e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a3c6:	6a3b      	ldr	r3, [r7, #32]
 801a3c8:	2b00      	cmp	r3, #0
 801a3ca:	d008      	beq.n	801a3de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a3cc:	69b9      	ldr	r1, [r7, #24]
 801a3ce:	6a38      	ldr	r0, [r7, #32]
 801a3d0:	f7ff ff0e 	bl	801a1f0 <ip_reass_free_complete_datagram>
 801a3d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a3d6:	697a      	ldr	r2, [r7, #20]
 801a3d8:	68fb      	ldr	r3, [r7, #12]
 801a3da:	4413      	add	r3, r2
 801a3dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a3de:	697a      	ldr	r2, [r7, #20]
 801a3e0:	683b      	ldr	r3, [r7, #0]
 801a3e2:	429a      	cmp	r2, r3
 801a3e4:	da02      	bge.n	801a3ec <ip_reass_remove_oldest_datagram+0xb4>
 801a3e6:	693b      	ldr	r3, [r7, #16]
 801a3e8:	2b01      	cmp	r3, #1
 801a3ea:	dcac      	bgt.n	801a346 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a3ec:	697b      	ldr	r3, [r7, #20]
}
 801a3ee:	4618      	mov	r0, r3
 801a3f0:	3728      	adds	r7, #40	; 0x28
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	20004928 	.word	0x20004928

0801a3fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b084      	sub	sp, #16
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a406:	2004      	movs	r0, #4
 801a408:	f7f6 f9e8 	bl	80107dc <memp_malloc>
 801a40c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	2b00      	cmp	r3, #0
 801a412:	d110      	bne.n	801a436 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a414:	6839      	ldr	r1, [r7, #0]
 801a416:	6878      	ldr	r0, [r7, #4]
 801a418:	f7ff ff8e 	bl	801a338 <ip_reass_remove_oldest_datagram>
 801a41c:	4602      	mov	r2, r0
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	4293      	cmp	r3, r2
 801a422:	dc03      	bgt.n	801a42c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a424:	2004      	movs	r0, #4
 801a426:	f7f6 f9d9 	bl	80107dc <memp_malloc>
 801a42a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a42c:	68fb      	ldr	r3, [r7, #12]
 801a42e:	2b00      	cmp	r3, #0
 801a430:	d101      	bne.n	801a436 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a432:	2300      	movs	r3, #0
 801a434:	e016      	b.n	801a464 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a436:	2220      	movs	r2, #32
 801a438:	2100      	movs	r1, #0
 801a43a:	68f8      	ldr	r0, [r7, #12]
 801a43c:	f000 ffdc 	bl	801b3f8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	220f      	movs	r2, #15
 801a444:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a446:	4b09      	ldr	r3, [pc, #36]	; (801a46c <ip_reass_enqueue_new_datagram+0x70>)
 801a448:	681a      	ldr	r2, [r3, #0]
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a44e:	4a07      	ldr	r2, [pc, #28]	; (801a46c <ip_reass_enqueue_new_datagram+0x70>)
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a454:	68fb      	ldr	r3, [r7, #12]
 801a456:	3308      	adds	r3, #8
 801a458:	2214      	movs	r2, #20
 801a45a:	6879      	ldr	r1, [r7, #4]
 801a45c:	4618      	mov	r0, r3
 801a45e:	f000 ffbd 	bl	801b3dc <memcpy>
  return ipr;
 801a462:	68fb      	ldr	r3, [r7, #12]
}
 801a464:	4618      	mov	r0, r3
 801a466:	3710      	adds	r7, #16
 801a468:	46bd      	mov	sp, r7
 801a46a:	bd80      	pop	{r7, pc}
 801a46c:	20004928 	.word	0x20004928

0801a470 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a470:	b580      	push	{r7, lr}
 801a472:	b082      	sub	sp, #8
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a47a:	4b10      	ldr	r3, [pc, #64]	; (801a4bc <ip_reass_dequeue_datagram+0x4c>)
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	687a      	ldr	r2, [r7, #4]
 801a480:	429a      	cmp	r2, r3
 801a482:	d104      	bne.n	801a48e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	681b      	ldr	r3, [r3, #0]
 801a488:	4a0c      	ldr	r2, [pc, #48]	; (801a4bc <ip_reass_dequeue_datagram+0x4c>)
 801a48a:	6013      	str	r3, [r2, #0]
 801a48c:	e00d      	b.n	801a4aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a48e:	683b      	ldr	r3, [r7, #0]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d106      	bne.n	801a4a2 <ip_reass_dequeue_datagram+0x32>
 801a494:	4b0a      	ldr	r3, [pc, #40]	; (801a4c0 <ip_reass_dequeue_datagram+0x50>)
 801a496:	f240 1245 	movw	r2, #325	; 0x145
 801a49a:	490a      	ldr	r1, [pc, #40]	; (801a4c4 <ip_reass_dequeue_datagram+0x54>)
 801a49c:	480a      	ldr	r0, [pc, #40]	; (801a4c8 <ip_reass_dequeue_datagram+0x58>)
 801a49e:	f001 fbf5 	bl	801bc8c <iprintf>
    prev->next = ipr->next;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	681a      	ldr	r2, [r3, #0]
 801a4a6:	683b      	ldr	r3, [r7, #0]
 801a4a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a4aa:	6879      	ldr	r1, [r7, #4]
 801a4ac:	2004      	movs	r0, #4
 801a4ae:	f7f6 f9e7 	bl	8010880 <memp_free>
}
 801a4b2:	bf00      	nop
 801a4b4:	3708      	adds	r7, #8
 801a4b6:	46bd      	mov	sp, r7
 801a4b8:	bd80      	pop	{r7, pc}
 801a4ba:	bf00      	nop
 801a4bc:	20004928 	.word	0x20004928
 801a4c0:	080218b4 	.word	0x080218b4
 801a4c4:	0802197c 	.word	0x0802197c
 801a4c8:	080218fc 	.word	0x080218fc

0801a4cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a4cc:	b580      	push	{r7, lr}
 801a4ce:	b08c      	sub	sp, #48	; 0x30
 801a4d0:	af00      	add	r7, sp, #0
 801a4d2:	60f8      	str	r0, [r7, #12]
 801a4d4:	60b9      	str	r1, [r7, #8]
 801a4d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a4d8:	2300      	movs	r3, #0
 801a4da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a4dc:	2301      	movs	r3, #1
 801a4de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a4e0:	68bb      	ldr	r3, [r7, #8]
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a4e6:	69fb      	ldr	r3, [r7, #28]
 801a4e8:	885b      	ldrh	r3, [r3, #2]
 801a4ea:	b29b      	uxth	r3, r3
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7f5 fcbf 	bl	800fe70 <lwip_htons>
 801a4f2:	4603      	mov	r3, r0
 801a4f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a4f6:	69fb      	ldr	r3, [r7, #28]
 801a4f8:	781b      	ldrb	r3, [r3, #0]
 801a4fa:	f003 030f 	and.w	r3, r3, #15
 801a4fe:	b2db      	uxtb	r3, r3
 801a500:	009b      	lsls	r3, r3, #2
 801a502:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a504:	7e7b      	ldrb	r3, [r7, #25]
 801a506:	b29b      	uxth	r3, r3
 801a508:	8b7a      	ldrh	r2, [r7, #26]
 801a50a:	429a      	cmp	r2, r3
 801a50c:	d202      	bcs.n	801a514 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a50e:	f04f 33ff 	mov.w	r3, #4294967295
 801a512:	e135      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a514:	7e7b      	ldrb	r3, [r7, #25]
 801a516:	b29b      	uxth	r3, r3
 801a518:	8b7a      	ldrh	r2, [r7, #26]
 801a51a:	1ad3      	subs	r3, r2, r3
 801a51c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a51e:	69fb      	ldr	r3, [r7, #28]
 801a520:	88db      	ldrh	r3, [r3, #6]
 801a522:	b29b      	uxth	r3, r3
 801a524:	4618      	mov	r0, r3
 801a526:	f7f5 fca3 	bl	800fe70 <lwip_htons>
 801a52a:	4603      	mov	r3, r0
 801a52c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a530:	b29b      	uxth	r3, r3
 801a532:	00db      	lsls	r3, r3, #3
 801a534:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a536:	68bb      	ldr	r3, [r7, #8]
 801a538:	685b      	ldr	r3, [r3, #4]
 801a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a53e:	2200      	movs	r2, #0
 801a540:	701a      	strb	r2, [r3, #0]
 801a542:	2200      	movs	r2, #0
 801a544:	705a      	strb	r2, [r3, #1]
 801a546:	2200      	movs	r2, #0
 801a548:	709a      	strb	r2, [r3, #2]
 801a54a:	2200      	movs	r2, #0
 801a54c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a550:	8afa      	ldrh	r2, [r7, #22]
 801a552:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a554:	8afa      	ldrh	r2, [r7, #22]
 801a556:	8b7b      	ldrh	r3, [r7, #26]
 801a558:	4413      	add	r3, r2
 801a55a:	b29a      	uxth	r2, r3
 801a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a55e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a562:	88db      	ldrh	r3, [r3, #6]
 801a564:	b29b      	uxth	r3, r3
 801a566:	8afa      	ldrh	r2, [r7, #22]
 801a568:	429a      	cmp	r2, r3
 801a56a:	d902      	bls.n	801a572 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a56c:	f04f 33ff 	mov.w	r3, #4294967295
 801a570:	e106      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	685b      	ldr	r3, [r3, #4]
 801a576:	627b      	str	r3, [r7, #36]	; 0x24
 801a578:	e068      	b.n	801a64c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a57c:	685b      	ldr	r3, [r3, #4]
 801a57e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a582:	889b      	ldrh	r3, [r3, #4]
 801a584:	b29a      	uxth	r2, r3
 801a586:	693b      	ldr	r3, [r7, #16]
 801a588:	889b      	ldrh	r3, [r3, #4]
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	429a      	cmp	r2, r3
 801a58e:	d235      	bcs.n	801a5fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a594:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d020      	beq.n	801a5de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a59e:	889b      	ldrh	r3, [r3, #4]
 801a5a0:	b29a      	uxth	r2, r3
 801a5a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5a4:	88db      	ldrh	r3, [r3, #6]
 801a5a6:	b29b      	uxth	r3, r3
 801a5a8:	429a      	cmp	r2, r3
 801a5aa:	d307      	bcc.n	801a5bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ae:	88db      	ldrh	r3, [r3, #6]
 801a5b0:	b29a      	uxth	r2, r3
 801a5b2:	693b      	ldr	r3, [r7, #16]
 801a5b4:	889b      	ldrh	r3, [r3, #4]
 801a5b6:	b29b      	uxth	r3, r3
 801a5b8:	429a      	cmp	r2, r3
 801a5ba:	d902      	bls.n	801a5c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5bc:	f04f 33ff 	mov.w	r3, #4294967295
 801a5c0:	e0de      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5c4:	68ba      	ldr	r2, [r7, #8]
 801a5c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a5ca:	88db      	ldrh	r3, [r3, #6]
 801a5cc:	b29a      	uxth	r2, r3
 801a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d0:	889b      	ldrh	r3, [r3, #4]
 801a5d2:	b29b      	uxth	r3, r3
 801a5d4:	429a      	cmp	r2, r3
 801a5d6:	d03d      	beq.n	801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a5d8:	2300      	movs	r3, #0
 801a5da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a5dc:	e03a      	b.n	801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e0:	88db      	ldrh	r3, [r3, #6]
 801a5e2:	b29a      	uxth	r2, r3
 801a5e4:	693b      	ldr	r3, [r7, #16]
 801a5e6:	889b      	ldrh	r3, [r3, #4]
 801a5e8:	b29b      	uxth	r3, r3
 801a5ea:	429a      	cmp	r2, r3
 801a5ec:	d902      	bls.n	801a5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5ee:	f04f 33ff 	mov.w	r3, #4294967295
 801a5f2:	e0c5      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	68ba      	ldr	r2, [r7, #8]
 801a5f8:	605a      	str	r2, [r3, #4]
      break;
 801a5fa:	e02b      	b.n	801a654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fe:	889b      	ldrh	r3, [r3, #4]
 801a600:	b29a      	uxth	r2, r3
 801a602:	693b      	ldr	r3, [r7, #16]
 801a604:	889b      	ldrh	r3, [r3, #4]
 801a606:	b29b      	uxth	r3, r3
 801a608:	429a      	cmp	r2, r3
 801a60a:	d102      	bne.n	801a612 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a60c:	f04f 33ff 	mov.w	r3, #4294967295
 801a610:	e0b6      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a614:	889b      	ldrh	r3, [r3, #4]
 801a616:	b29a      	uxth	r2, r3
 801a618:	693b      	ldr	r3, [r7, #16]
 801a61a:	88db      	ldrh	r3, [r3, #6]
 801a61c:	b29b      	uxth	r3, r3
 801a61e:	429a      	cmp	r2, r3
 801a620:	d202      	bcs.n	801a628 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a622:	f04f 33ff 	mov.w	r3, #4294967295
 801a626:	e0ab      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a62a:	2b00      	cmp	r3, #0
 801a62c:	d009      	beq.n	801a642 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a62e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a630:	88db      	ldrh	r3, [r3, #6]
 801a632:	b29a      	uxth	r2, r3
 801a634:	693b      	ldr	r3, [r7, #16]
 801a636:	889b      	ldrh	r3, [r3, #4]
 801a638:	b29b      	uxth	r3, r3
 801a63a:	429a      	cmp	r2, r3
 801a63c:	d001      	beq.n	801a642 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a63e:	2300      	movs	r3, #0
 801a640:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a642:	693b      	ldr	r3, [r7, #16]
 801a644:	681b      	ldr	r3, [r3, #0]
 801a646:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a648:	693b      	ldr	r3, [r7, #16]
 801a64a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a64e:	2b00      	cmp	r3, #0
 801a650:	d193      	bne.n	801a57a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a652:	e000      	b.n	801a656 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a654:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d12d      	bne.n	801a6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d01c      	beq.n	801a69c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a664:	88db      	ldrh	r3, [r3, #6]
 801a666:	b29a      	uxth	r2, r3
 801a668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a66a:	889b      	ldrh	r3, [r3, #4]
 801a66c:	b29b      	uxth	r3, r3
 801a66e:	429a      	cmp	r2, r3
 801a670:	d906      	bls.n	801a680 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a672:	4b45      	ldr	r3, [pc, #276]	; (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a674:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a678:	4944      	ldr	r1, [pc, #272]	; (801a78c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a67a:	4845      	ldr	r0, [pc, #276]	; (801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a67c:	f001 fb06 	bl	801bc8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a682:	68ba      	ldr	r2, [r7, #8]
 801a684:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a688:	88db      	ldrh	r3, [r3, #6]
 801a68a:	b29a      	uxth	r2, r3
 801a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a68e:	889b      	ldrh	r3, [r3, #4]
 801a690:	b29b      	uxth	r3, r3
 801a692:	429a      	cmp	r2, r3
 801a694:	d010      	beq.n	801a6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a696:	2300      	movs	r3, #0
 801a698:	623b      	str	r3, [r7, #32]
 801a69a:	e00d      	b.n	801a6b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a69c:	68fb      	ldr	r3, [r7, #12]
 801a69e:	685b      	ldr	r3, [r3, #4]
 801a6a0:	2b00      	cmp	r3, #0
 801a6a2:	d006      	beq.n	801a6b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a6a4:	4b38      	ldr	r3, [pc, #224]	; (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a6a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a6aa:	493a      	ldr	r1, [pc, #232]	; (801a794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a6ac:	4838      	ldr	r0, [pc, #224]	; (801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a6ae:	f001 faed 	bl	801bc8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	68ba      	ldr	r2, [r7, #8]
 801a6b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d105      	bne.n	801a6ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a6be:	68fb      	ldr	r3, [r7, #12]
 801a6c0:	7f9b      	ldrb	r3, [r3, #30]
 801a6c2:	f003 0301 	and.w	r3, r3, #1
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d059      	beq.n	801a77e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a6ca:	6a3b      	ldr	r3, [r7, #32]
 801a6cc:	2b00      	cmp	r3, #0
 801a6ce:	d04f      	beq.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a6d0:	68fb      	ldr	r3, [r7, #12]
 801a6d2:	685b      	ldr	r3, [r3, #4]
 801a6d4:	2b00      	cmp	r3, #0
 801a6d6:	d006      	beq.n	801a6e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a6d8:	68fb      	ldr	r3, [r7, #12]
 801a6da:	685b      	ldr	r3, [r3, #4]
 801a6dc:	685b      	ldr	r3, [r3, #4]
 801a6de:	889b      	ldrh	r3, [r3, #4]
 801a6e0:	b29b      	uxth	r3, r3
 801a6e2:	2b00      	cmp	r3, #0
 801a6e4:	d002      	beq.n	801a6ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	623b      	str	r3, [r7, #32]
 801a6ea:	e041      	b.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a6f6:	e012      	b.n	801a71e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6fa:	685b      	ldr	r3, [r3, #4]
 801a6fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a700:	88db      	ldrh	r3, [r3, #6]
 801a702:	b29a      	uxth	r2, r3
 801a704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a706:	889b      	ldrh	r3, [r3, #4]
 801a708:	b29b      	uxth	r3, r3
 801a70a:	429a      	cmp	r2, r3
 801a70c:	d002      	beq.n	801a714 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a70e:	2300      	movs	r3, #0
 801a710:	623b      	str	r3, [r7, #32]
            break;
 801a712:	e007      	b.n	801a724 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a716:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a720:	2b00      	cmp	r3, #0
 801a722:	d1e9      	bne.n	801a6f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a724:	6a3b      	ldr	r3, [r7, #32]
 801a726:	2b00      	cmp	r3, #0
 801a728:	d022      	beq.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	685b      	ldr	r3, [r3, #4]
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d106      	bne.n	801a740 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a732:	4b15      	ldr	r3, [pc, #84]	; (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a734:	f240 12df 	movw	r2, #479	; 0x1df
 801a738:	4917      	ldr	r1, [pc, #92]	; (801a798 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a73a:	4815      	ldr	r0, [pc, #84]	; (801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a73c:	f001 faa6 	bl	801bc8c <iprintf>
          LWIP_ASSERT("sanity check",
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	685b      	ldr	r3, [r3, #4]
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a748:	429a      	cmp	r2, r3
 801a74a:	d106      	bne.n	801a75a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a74c:	4b0e      	ldr	r3, [pc, #56]	; (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a74e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a752:	4911      	ldr	r1, [pc, #68]	; (801a798 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a754:	480e      	ldr	r0, [pc, #56]	; (801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a756:	f001 fa99 	bl	801bc8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75c:	681b      	ldr	r3, [r3, #0]
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d006      	beq.n	801a770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a762:	4b09      	ldr	r3, [pc, #36]	; (801a788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a764:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a768:	490c      	ldr	r1, [pc, #48]	; (801a79c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a76a:	4809      	ldr	r0, [pc, #36]	; (801a790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a76c:	f001 fa8e 	bl	801bc8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a770:	6a3b      	ldr	r3, [r7, #32]
 801a772:	2b00      	cmp	r3, #0
 801a774:	bf14      	ite	ne
 801a776:	2301      	movne	r3, #1
 801a778:	2300      	moveq	r3, #0
 801a77a:	b2db      	uxtb	r3, r3
 801a77c:	e000      	b.n	801a780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a77e:	2300      	movs	r3, #0
}
 801a780:	4618      	mov	r0, r3
 801a782:	3730      	adds	r7, #48	; 0x30
 801a784:	46bd      	mov	sp, r7
 801a786:	bd80      	pop	{r7, pc}
 801a788:	080218b4 	.word	0x080218b4
 801a78c:	08021998 	.word	0x08021998
 801a790:	080218fc 	.word	0x080218fc
 801a794:	080219b8 	.word	0x080219b8
 801a798:	080219f0 	.word	0x080219f0
 801a79c:	08021a00 	.word	0x08021a00

0801a7a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a7a0:	b580      	push	{r7, lr}
 801a7a2:	b08e      	sub	sp, #56	; 0x38
 801a7a4:	af00      	add	r7, sp, #0
 801a7a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	685b      	ldr	r3, [r3, #4]
 801a7ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b0:	781b      	ldrb	r3, [r3, #0]
 801a7b2:	f003 030f 	and.w	r3, r3, #15
 801a7b6:	b2db      	uxtb	r3, r3
 801a7b8:	009b      	lsls	r3, r3, #2
 801a7ba:	b2db      	uxtb	r3, r3
 801a7bc:	2b14      	cmp	r3, #20
 801a7be:	f040 8167 	bne.w	801aa90 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7c4:	88db      	ldrh	r3, [r3, #6]
 801a7c6:	b29b      	uxth	r3, r3
 801a7c8:	4618      	mov	r0, r3
 801a7ca:	f7f5 fb51 	bl	800fe70 <lwip_htons>
 801a7ce:	4603      	mov	r3, r0
 801a7d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a7d4:	b29b      	uxth	r3, r3
 801a7d6:	00db      	lsls	r3, r3, #3
 801a7d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7dc:	885b      	ldrh	r3, [r3, #2]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7f5 fb45 	bl	800fe70 <lwip_htons>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a7ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7ec:	781b      	ldrb	r3, [r3, #0]
 801a7ee:	f003 030f 	and.w	r3, r3, #15
 801a7f2:	b2db      	uxtb	r3, r3
 801a7f4:	009b      	lsls	r3, r3, #2
 801a7f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a7fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a802:	429a      	cmp	r2, r3
 801a804:	f0c0 8146 	bcc.w	801aa94 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a80c:	b29b      	uxth	r3, r3
 801a80e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a810:	1ad3      	subs	r3, r2, r3
 801a812:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a814:	6878      	ldr	r0, [r7, #4]
 801a816:	f7f6 ff97 	bl	8011748 <pbuf_clen>
 801a81a:	4603      	mov	r3, r0
 801a81c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a81e:	4b9f      	ldr	r3, [pc, #636]	; (801aa9c <ip4_reass+0x2fc>)
 801a820:	881b      	ldrh	r3, [r3, #0]
 801a822:	461a      	mov	r2, r3
 801a824:	8c3b      	ldrh	r3, [r7, #32]
 801a826:	4413      	add	r3, r2
 801a828:	2b0a      	cmp	r3, #10
 801a82a:	dd10      	ble.n	801a84e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a82c:	8c3b      	ldrh	r3, [r7, #32]
 801a82e:	4619      	mov	r1, r3
 801a830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a832:	f7ff fd81 	bl	801a338 <ip_reass_remove_oldest_datagram>
 801a836:	4603      	mov	r3, r0
 801a838:	2b00      	cmp	r3, #0
 801a83a:	f000 812d 	beq.w	801aa98 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a83e:	4b97      	ldr	r3, [pc, #604]	; (801aa9c <ip4_reass+0x2fc>)
 801a840:	881b      	ldrh	r3, [r3, #0]
 801a842:	461a      	mov	r2, r3
 801a844:	8c3b      	ldrh	r3, [r7, #32]
 801a846:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a848:	2b0a      	cmp	r3, #10
 801a84a:	f300 8125 	bgt.w	801aa98 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a84e:	4b94      	ldr	r3, [pc, #592]	; (801aaa0 <ip4_reass+0x300>)
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	633b      	str	r3, [r7, #48]	; 0x30
 801a854:	e015      	b.n	801a882 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a858:	695a      	ldr	r2, [r3, #20]
 801a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85c:	68db      	ldr	r3, [r3, #12]
 801a85e:	429a      	cmp	r2, r3
 801a860:	d10c      	bne.n	801a87c <ip4_reass+0xdc>
 801a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a864:	699a      	ldr	r2, [r3, #24]
 801a866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a868:	691b      	ldr	r3, [r3, #16]
 801a86a:	429a      	cmp	r2, r3
 801a86c:	d106      	bne.n	801a87c <ip4_reass+0xdc>
 801a86e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a870:	899a      	ldrh	r2, [r3, #12]
 801a872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a874:	889b      	ldrh	r3, [r3, #4]
 801a876:	b29b      	uxth	r3, r3
 801a878:	429a      	cmp	r2, r3
 801a87a:	d006      	beq.n	801a88a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	633b      	str	r3, [r7, #48]	; 0x30
 801a882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a884:	2b00      	cmp	r3, #0
 801a886:	d1e6      	bne.n	801a856 <ip4_reass+0xb6>
 801a888:	e000      	b.n	801a88c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a88a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a88e:	2b00      	cmp	r3, #0
 801a890:	d109      	bne.n	801a8a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a892:	8c3b      	ldrh	r3, [r7, #32]
 801a894:	4619      	mov	r1, r3
 801a896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a898:	f7ff fdb0 	bl	801a3fc <ip_reass_enqueue_new_datagram>
 801a89c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d11c      	bne.n	801a8de <ip4_reass+0x13e>
      goto nullreturn;
 801a8a4:	e109      	b.n	801aaba <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8a8:	88db      	ldrh	r3, [r3, #6]
 801a8aa:	b29b      	uxth	r3, r3
 801a8ac:	4618      	mov	r0, r3
 801a8ae:	f7f5 fadf 	bl	800fe70 <lwip_htons>
 801a8b2:	4603      	mov	r3, r0
 801a8b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	d110      	bne.n	801a8de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8be:	89db      	ldrh	r3, [r3, #14]
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7f5 fad5 	bl	800fe70 <lwip_htons>
 801a8c6:	4603      	mov	r3, r0
 801a8c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a8cc:	2b00      	cmp	r3, #0
 801a8ce:	d006      	beq.n	801a8de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d2:	3308      	adds	r3, #8
 801a8d4:	2214      	movs	r2, #20
 801a8d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a8d8:	4618      	mov	r0, r3
 801a8da:	f000 fd7f 	bl	801b3dc <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e0:	88db      	ldrh	r3, [r3, #6]
 801a8e2:	b29b      	uxth	r3, r3
 801a8e4:	f003 0320 	and.w	r3, r3, #32
 801a8e8:	2b00      	cmp	r3, #0
 801a8ea:	bf0c      	ite	eq
 801a8ec:	2301      	moveq	r3, #1
 801a8ee:	2300      	movne	r3, #0
 801a8f0:	b2db      	uxtb	r3, r3
 801a8f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a8f4:	69fb      	ldr	r3, [r7, #28]
 801a8f6:	2b00      	cmp	r3, #0
 801a8f8:	d00e      	beq.n	801a918 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a8fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a8fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a8fe:	4413      	add	r3, r2
 801a900:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a902:	8b7a      	ldrh	r2, [r7, #26]
 801a904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a906:	429a      	cmp	r2, r3
 801a908:	f0c0 80a0 	bcc.w	801aa4c <ip4_reass+0x2ac>
 801a90c:	8b7b      	ldrh	r3, [r7, #26]
 801a90e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a912:	4293      	cmp	r3, r2
 801a914:	f200 809a 	bhi.w	801aa4c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a918:	69fa      	ldr	r2, [r7, #28]
 801a91a:	6879      	ldr	r1, [r7, #4]
 801a91c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a91e:	f7ff fdd5 	bl	801a4cc <ip_reass_chain_frag_into_datagram_and_validate>
 801a922:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a924:	697b      	ldr	r3, [r7, #20]
 801a926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a92a:	f000 8091 	beq.w	801aa50 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a92e:	4b5b      	ldr	r3, [pc, #364]	; (801aa9c <ip4_reass+0x2fc>)
 801a930:	881a      	ldrh	r2, [r3, #0]
 801a932:	8c3b      	ldrh	r3, [r7, #32]
 801a934:	4413      	add	r3, r2
 801a936:	b29a      	uxth	r2, r3
 801a938:	4b58      	ldr	r3, [pc, #352]	; (801aa9c <ip4_reass+0x2fc>)
 801a93a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a93c:	69fb      	ldr	r3, [r7, #28]
 801a93e:	2b00      	cmp	r3, #0
 801a940:	d00d      	beq.n	801a95e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a942:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a946:	4413      	add	r3, r2
 801a948:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a94c:	8a7a      	ldrh	r2, [r7, #18]
 801a94e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a952:	7f9b      	ldrb	r3, [r3, #30]
 801a954:	f043 0301 	orr.w	r3, r3, #1
 801a958:	b2da      	uxtb	r2, r3
 801a95a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a95c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a95e:	697b      	ldr	r3, [r7, #20]
 801a960:	2b01      	cmp	r3, #1
 801a962:	d171      	bne.n	801aa48 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a966:	8b9b      	ldrh	r3, [r3, #28]
 801a968:	3314      	adds	r3, #20
 801a96a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a96e:	685b      	ldr	r3, [r3, #4]
 801a970:	685b      	ldr	r3, [r3, #4]
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a978:	685b      	ldr	r3, [r3, #4]
 801a97a:	685b      	ldr	r3, [r3, #4]
 801a97c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a980:	3308      	adds	r3, #8
 801a982:	2214      	movs	r2, #20
 801a984:	4619      	mov	r1, r3
 801a986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a988:	f000 fd28 	bl	801b3dc <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a98c:	8a3b      	ldrh	r3, [r7, #16]
 801a98e:	4618      	mov	r0, r3
 801a990:	f7f5 fa6e 	bl	800fe70 <lwip_htons>
 801a994:	4603      	mov	r3, r0
 801a996:	461a      	mov	r2, r3
 801a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a99a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a99e:	2200      	movs	r2, #0
 801a9a0:	719a      	strb	r2, [r3, #6]
 801a9a2:	2200      	movs	r2, #0
 801a9a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a9a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9a8:	2200      	movs	r2, #0
 801a9aa:	729a      	strb	r2, [r3, #10]
 801a9ac:	2200      	movs	r2, #0
 801a9ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9b2:	685b      	ldr	r3, [r3, #4]
 801a9b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a9b6:	e00d      	b.n	801a9d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9ba:	685b      	ldr	r3, [r3, #4]
 801a9bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a9be:	2114      	movs	r1, #20
 801a9c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a9c2:	f7f6 fd7b 	bl	80114bc <pbuf_remove_header>
      pbuf_cat(p, r);
 801a9c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a9c8:	6878      	ldr	r0, [r7, #4]
 801a9ca:	f7f6 fefd 	bl	80117c8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d1ee      	bne.n	801a9b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a9da:	4b31      	ldr	r3, [pc, #196]	; (801aaa0 <ip4_reass+0x300>)
 801a9dc:	681b      	ldr	r3, [r3, #0]
 801a9de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9e0:	429a      	cmp	r2, r3
 801a9e2:	d102      	bne.n	801a9ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a9e8:	e010      	b.n	801aa0c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a9ea:	4b2d      	ldr	r3, [pc, #180]	; (801aaa0 <ip4_reass+0x300>)
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a9f0:	e007      	b.n	801aa02 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9f4:	681b      	ldr	r3, [r3, #0]
 801a9f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a9f8:	429a      	cmp	r2, r3
 801a9fa:	d006      	beq.n	801aa0a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d1f4      	bne.n	801a9f2 <ip4_reass+0x252>
 801aa08:	e000      	b.n	801aa0c <ip4_reass+0x26c>
          break;
 801aa0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801aa0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa10:	f7ff fd2e 	bl	801a470 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801aa14:	6878      	ldr	r0, [r7, #4]
 801aa16:	f7f6 fe97 	bl	8011748 <pbuf_clen>
 801aa1a:	4603      	mov	r3, r0
 801aa1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801aa1e:	4b1f      	ldr	r3, [pc, #124]	; (801aa9c <ip4_reass+0x2fc>)
 801aa20:	881b      	ldrh	r3, [r3, #0]
 801aa22:	8c3a      	ldrh	r2, [r7, #32]
 801aa24:	429a      	cmp	r2, r3
 801aa26:	d906      	bls.n	801aa36 <ip4_reass+0x296>
 801aa28:	4b1e      	ldr	r3, [pc, #120]	; (801aaa4 <ip4_reass+0x304>)
 801aa2a:	f240 229b 	movw	r2, #667	; 0x29b
 801aa2e:	491e      	ldr	r1, [pc, #120]	; (801aaa8 <ip4_reass+0x308>)
 801aa30:	481e      	ldr	r0, [pc, #120]	; (801aaac <ip4_reass+0x30c>)
 801aa32:	f001 f92b 	bl	801bc8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801aa36:	4b19      	ldr	r3, [pc, #100]	; (801aa9c <ip4_reass+0x2fc>)
 801aa38:	881a      	ldrh	r2, [r3, #0]
 801aa3a:	8c3b      	ldrh	r3, [r7, #32]
 801aa3c:	1ad3      	subs	r3, r2, r3
 801aa3e:	b29a      	uxth	r2, r3
 801aa40:	4b16      	ldr	r3, [pc, #88]	; (801aa9c <ip4_reass+0x2fc>)
 801aa42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	e03c      	b.n	801aac2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801aa48:	2300      	movs	r3, #0
 801aa4a:	e03a      	b.n	801aac2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801aa4c:	bf00      	nop
 801aa4e:	e000      	b.n	801aa52 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801aa50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801aa52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa54:	2b00      	cmp	r3, #0
 801aa56:	d106      	bne.n	801aa66 <ip4_reass+0x2c6>
 801aa58:	4b12      	ldr	r3, [pc, #72]	; (801aaa4 <ip4_reass+0x304>)
 801aa5a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801aa5e:	4914      	ldr	r1, [pc, #80]	; (801aab0 <ip4_reass+0x310>)
 801aa60:	4812      	ldr	r0, [pc, #72]	; (801aaac <ip4_reass+0x30c>)
 801aa62:	f001 f913 	bl	801bc8c <iprintf>
  if (ipr->p == NULL) {
 801aa66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa68:	685b      	ldr	r3, [r3, #4]
 801aa6a:	2b00      	cmp	r3, #0
 801aa6c:	d124      	bne.n	801aab8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aa6e:	4b0c      	ldr	r3, [pc, #48]	; (801aaa0 <ip4_reass+0x300>)
 801aa70:	681b      	ldr	r3, [r3, #0]
 801aa72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa74:	429a      	cmp	r2, r3
 801aa76:	d006      	beq.n	801aa86 <ip4_reass+0x2e6>
 801aa78:	4b0a      	ldr	r3, [pc, #40]	; (801aaa4 <ip4_reass+0x304>)
 801aa7a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aa7e:	490d      	ldr	r1, [pc, #52]	; (801aab4 <ip4_reass+0x314>)
 801aa80:	480a      	ldr	r0, [pc, #40]	; (801aaac <ip4_reass+0x30c>)
 801aa82:	f001 f903 	bl	801bc8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801aa86:	2100      	movs	r1, #0
 801aa88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa8a:	f7ff fcf1 	bl	801a470 <ip_reass_dequeue_datagram>
 801aa8e:	e014      	b.n	801aaba <ip4_reass+0x31a>
    goto nullreturn;
 801aa90:	bf00      	nop
 801aa92:	e012      	b.n	801aaba <ip4_reass+0x31a>
    goto nullreturn;
 801aa94:	bf00      	nop
 801aa96:	e010      	b.n	801aaba <ip4_reass+0x31a>
      goto nullreturn;
 801aa98:	bf00      	nop
 801aa9a:	e00e      	b.n	801aaba <ip4_reass+0x31a>
 801aa9c:	2000492c 	.word	0x2000492c
 801aaa0:	20004928 	.word	0x20004928
 801aaa4:	080218b4 	.word	0x080218b4
 801aaa8:	08021a24 	.word	0x08021a24
 801aaac:	080218fc 	.word	0x080218fc
 801aab0:	08021a40 	.word	0x08021a40
 801aab4:	08021a4c 	.word	0x08021a4c
  }

nullreturn:
 801aab8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801aaba:	6878      	ldr	r0, [r7, #4]
 801aabc:	f7f6 fdb6 	bl	801162c <pbuf_free>
  return NULL;
 801aac0:	2300      	movs	r3, #0
}
 801aac2:	4618      	mov	r0, r3
 801aac4:	3738      	adds	r7, #56	; 0x38
 801aac6:	46bd      	mov	sp, r7
 801aac8:	bd80      	pop	{r7, pc}
 801aaca:	bf00      	nop

0801aacc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801aad0:	2005      	movs	r0, #5
 801aad2:	f7f5 fe83 	bl	80107dc <memp_malloc>
 801aad6:	4603      	mov	r3, r0
}
 801aad8:	4618      	mov	r0, r3
 801aada:	bd80      	pop	{r7, pc}

0801aadc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801aadc:	b580      	push	{r7, lr}
 801aade:	b082      	sub	sp, #8
 801aae0:	af00      	add	r7, sp, #0
 801aae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801aae4:	687b      	ldr	r3, [r7, #4]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d106      	bne.n	801aaf8 <ip_frag_free_pbuf_custom_ref+0x1c>
 801aaea:	4b07      	ldr	r3, [pc, #28]	; (801ab08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801aaec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801aaf0:	4906      	ldr	r1, [pc, #24]	; (801ab0c <ip_frag_free_pbuf_custom_ref+0x30>)
 801aaf2:	4807      	ldr	r0, [pc, #28]	; (801ab10 <ip_frag_free_pbuf_custom_ref+0x34>)
 801aaf4:	f001 f8ca 	bl	801bc8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801aaf8:	6879      	ldr	r1, [r7, #4]
 801aafa:	2005      	movs	r0, #5
 801aafc:	f7f5 fec0 	bl	8010880 <memp_free>
}
 801ab00:	bf00      	nop
 801ab02:	3708      	adds	r7, #8
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}
 801ab08:	080218b4 	.word	0x080218b4
 801ab0c:	08021a6c 	.word	0x08021a6c
 801ab10:	080218fc 	.word	0x080218fc

0801ab14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ab14:	b580      	push	{r7, lr}
 801ab16:	b084      	sub	sp, #16
 801ab18:	af00      	add	r7, sp, #0
 801ab1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ab20:	68fb      	ldr	r3, [r7, #12]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d106      	bne.n	801ab34 <ipfrag_free_pbuf_custom+0x20>
 801ab26:	4b11      	ldr	r3, [pc, #68]	; (801ab6c <ipfrag_free_pbuf_custom+0x58>)
 801ab28:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ab2c:	4910      	ldr	r1, [pc, #64]	; (801ab70 <ipfrag_free_pbuf_custom+0x5c>)
 801ab2e:	4811      	ldr	r0, [pc, #68]	; (801ab74 <ipfrag_free_pbuf_custom+0x60>)
 801ab30:	f001 f8ac 	bl	801bc8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ab34:	68fa      	ldr	r2, [r7, #12]
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	429a      	cmp	r2, r3
 801ab3a:	d006      	beq.n	801ab4a <ipfrag_free_pbuf_custom+0x36>
 801ab3c:	4b0b      	ldr	r3, [pc, #44]	; (801ab6c <ipfrag_free_pbuf_custom+0x58>)
 801ab3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ab42:	490d      	ldr	r1, [pc, #52]	; (801ab78 <ipfrag_free_pbuf_custom+0x64>)
 801ab44:	480b      	ldr	r0, [pc, #44]	; (801ab74 <ipfrag_free_pbuf_custom+0x60>)
 801ab46:	f001 f8a1 	bl	801bc8c <iprintf>
  if (pcr->original != NULL) {
 801ab4a:	68fb      	ldr	r3, [r7, #12]
 801ab4c:	695b      	ldr	r3, [r3, #20]
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d004      	beq.n	801ab5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ab52:	68fb      	ldr	r3, [r7, #12]
 801ab54:	695b      	ldr	r3, [r3, #20]
 801ab56:	4618      	mov	r0, r3
 801ab58:	f7f6 fd68 	bl	801162c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ab5c:	68f8      	ldr	r0, [r7, #12]
 801ab5e:	f7ff ffbd 	bl	801aadc <ip_frag_free_pbuf_custom_ref>
}
 801ab62:	bf00      	nop
 801ab64:	3710      	adds	r7, #16
 801ab66:	46bd      	mov	sp, r7
 801ab68:	bd80      	pop	{r7, pc}
 801ab6a:	bf00      	nop
 801ab6c:	080218b4 	.word	0x080218b4
 801ab70:	08021a78 	.word	0x08021a78
 801ab74:	080218fc 	.word	0x080218fc
 801ab78:	08021a84 	.word	0x08021a84

0801ab7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ab7c:	b580      	push	{r7, lr}
 801ab7e:	b094      	sub	sp, #80	; 0x50
 801ab80:	af02      	add	r7, sp, #8
 801ab82:	60f8      	str	r0, [r7, #12]
 801ab84:	60b9      	str	r1, [r7, #8]
 801ab86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ab88:	2300      	movs	r3, #0
 801ab8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ab8e:	68bb      	ldr	r3, [r7, #8]
 801ab90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ab92:	3b14      	subs	r3, #20
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	da00      	bge.n	801ab9a <ip4_frag+0x1e>
 801ab98:	3307      	adds	r3, #7
 801ab9a:	10db      	asrs	r3, r3, #3
 801ab9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ab9e:	2314      	movs	r3, #20
 801aba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	685b      	ldr	r3, [r3, #4]
 801aba6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801aba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abaa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801abac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	f003 030f 	and.w	r3, r3, #15
 801abb4:	b2db      	uxtb	r3, r3
 801abb6:	009b      	lsls	r3, r3, #2
 801abb8:	b2db      	uxtb	r3, r3
 801abba:	2b14      	cmp	r3, #20
 801abbc:	d002      	beq.n	801abc4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801abbe:	f06f 0305 	mvn.w	r3, #5
 801abc2:	e110      	b.n	801ade6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	895b      	ldrh	r3, [r3, #10]
 801abc8:	2b13      	cmp	r3, #19
 801abca:	d809      	bhi.n	801abe0 <ip4_frag+0x64>
 801abcc:	4b88      	ldr	r3, [pc, #544]	; (801adf0 <ip4_frag+0x274>)
 801abce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801abd2:	4988      	ldr	r1, [pc, #544]	; (801adf4 <ip4_frag+0x278>)
 801abd4:	4888      	ldr	r0, [pc, #544]	; (801adf8 <ip4_frag+0x27c>)
 801abd6:	f001 f859 	bl	801bc8c <iprintf>
 801abda:	f06f 0305 	mvn.w	r3, #5
 801abde:	e102      	b.n	801ade6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801abe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abe2:	88db      	ldrh	r3, [r3, #6]
 801abe4:	b29b      	uxth	r3, r3
 801abe6:	4618      	mov	r0, r3
 801abe8:	f7f5 f942 	bl	800fe70 <lwip_htons>
 801abec:	4603      	mov	r3, r0
 801abee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801abf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801abf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801abf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801abfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801abfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ac00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ac02:	68fb      	ldr	r3, [r7, #12]
 801ac04:	891b      	ldrh	r3, [r3, #8]
 801ac06:	3b14      	subs	r3, #20
 801ac08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ac0c:	e0e1      	b.n	801add2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ac0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ac10:	00db      	lsls	r3, r3, #3
 801ac12:	b29b      	uxth	r3, r3
 801ac14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac18:	4293      	cmp	r3, r2
 801ac1a:	bf28      	it	cs
 801ac1c:	4613      	movcs	r3, r2
 801ac1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ac20:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ac24:	2114      	movs	r1, #20
 801ac26:	200e      	movs	r0, #14
 801ac28:	f7f6 f9ea 	bl	8011000 <pbuf_alloc>
 801ac2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ac2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac30:	2b00      	cmp	r3, #0
 801ac32:	f000 80d5 	beq.w	801ade0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ac36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac38:	895b      	ldrh	r3, [r3, #10]
 801ac3a:	2b13      	cmp	r3, #19
 801ac3c:	d806      	bhi.n	801ac4c <ip4_frag+0xd0>
 801ac3e:	4b6c      	ldr	r3, [pc, #432]	; (801adf0 <ip4_frag+0x274>)
 801ac40:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ac44:	496d      	ldr	r1, [pc, #436]	; (801adfc <ip4_frag+0x280>)
 801ac46:	486c      	ldr	r0, [pc, #432]	; (801adf8 <ip4_frag+0x27c>)
 801ac48:	f001 f820 	bl	801bc8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	2214      	movs	r2, #20
 801ac52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ac54:	4618      	mov	r0, r3
 801ac56:	f000 fbc1 	bl	801b3dc <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ac5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ac5c:	685b      	ldr	r3, [r3, #4]
 801ac5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ac60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ac62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ac66:	e064      	b.n	801ad32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	895a      	ldrh	r2, [r3, #10]
 801ac6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ac6e:	1ad3      	subs	r3, r2, r3
 801ac70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ac72:	68fb      	ldr	r3, [r7, #12]
 801ac74:	895b      	ldrh	r3, [r3, #10]
 801ac76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ac78:	429a      	cmp	r2, r3
 801ac7a:	d906      	bls.n	801ac8a <ip4_frag+0x10e>
 801ac7c:	4b5c      	ldr	r3, [pc, #368]	; (801adf0 <ip4_frag+0x274>)
 801ac7e:	f240 322d 	movw	r2, #813	; 0x32d
 801ac82:	495f      	ldr	r1, [pc, #380]	; (801ae00 <ip4_frag+0x284>)
 801ac84:	485c      	ldr	r0, [pc, #368]	; (801adf8 <ip4_frag+0x27c>)
 801ac86:	f001 f801 	bl	801bc8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ac8a:	8bfa      	ldrh	r2, [r7, #30]
 801ac8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ac90:	4293      	cmp	r3, r2
 801ac92:	bf28      	it	cs
 801ac94:	4613      	movcs	r3, r2
 801ac96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ac9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ac9e:	2b00      	cmp	r3, #0
 801aca0:	d105      	bne.n	801acae <ip4_frag+0x132>
        poff = 0;
 801aca2:	2300      	movs	r3, #0
 801aca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801aca6:	68fb      	ldr	r3, [r7, #12]
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	60fb      	str	r3, [r7, #12]
        continue;
 801acac:	e041      	b.n	801ad32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801acae:	f7ff ff0d 	bl	801aacc <ip_frag_alloc_pbuf_custom_ref>
 801acb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801acb4:	69bb      	ldr	r3, [r7, #24]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d103      	bne.n	801acc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801acba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acbc:	f7f6 fcb6 	bl	801162c <pbuf_free>
        goto memerr;
 801acc0:	e08f      	b.n	801ade2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801acc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801acc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acca:	4413      	add	r3, r2
 801accc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801acd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801acd4:	9201      	str	r2, [sp, #4]
 801acd6:	9300      	str	r3, [sp, #0]
 801acd8:	4603      	mov	r3, r0
 801acda:	2241      	movs	r2, #65	; 0x41
 801acdc:	2000      	movs	r0, #0
 801acde:	f7f6 fab9 	bl	8011254 <pbuf_alloced_custom>
 801ace2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ace4:	697b      	ldr	r3, [r7, #20]
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	d106      	bne.n	801acf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801acea:	69b8      	ldr	r0, [r7, #24]
 801acec:	f7ff fef6 	bl	801aadc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801acf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801acf2:	f7f6 fc9b 	bl	801162c <pbuf_free>
        goto memerr;
 801acf6:	e074      	b.n	801ade2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801acf8:	68f8      	ldr	r0, [r7, #12]
 801acfa:	f7f6 fd3d 	bl	8011778 <pbuf_ref>
      pcr->original = p;
 801acfe:	69bb      	ldr	r3, [r7, #24]
 801ad00:	68fa      	ldr	r2, [r7, #12]
 801ad02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ad04:	69bb      	ldr	r3, [r7, #24]
 801ad06:	4a3f      	ldr	r2, [pc, #252]	; (801ae04 <ip4_frag+0x288>)
 801ad08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ad0a:	6979      	ldr	r1, [r7, #20]
 801ad0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad0e:	f7f6 fd5b 	bl	80117c8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ad12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ad16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad1a:	1ad3      	subs	r3, r2, r3
 801ad1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ad20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ad24:	2b00      	cmp	r3, #0
 801ad26:	d004      	beq.n	801ad32 <ip4_frag+0x1b6>
        poff = 0;
 801ad28:	2300      	movs	r3, #0
 801ad2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	681b      	ldr	r3, [r3, #0]
 801ad30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801ad32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d196      	bne.n	801ac68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801ad3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ad3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad40:	4413      	add	r3, r2
 801ad42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ad48:	f1a3 0213 	sub.w	r2, r3, #19
 801ad4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ad50:	429a      	cmp	r2, r3
 801ad52:	bfcc      	ite	gt
 801ad54:	2301      	movgt	r3, #1
 801ad56:	2300      	movle	r3, #0
 801ad58:	b2db      	uxtb	r3, r3
 801ad5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801ad5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ad60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ad64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ad66:	6a3b      	ldr	r3, [r7, #32]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d002      	beq.n	801ad72 <ip4_frag+0x1f6>
 801ad6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ad6e:	2b00      	cmp	r3, #0
 801ad70:	d003      	beq.n	801ad7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801ad72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801ad78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801ad7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ad7c:	4618      	mov	r0, r3
 801ad7e:	f7f5 f877 	bl	800fe70 <lwip_htons>
 801ad82:	4603      	mov	r3, r0
 801ad84:	461a      	mov	r2, r3
 801ad86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ad8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ad8c:	3314      	adds	r3, #20
 801ad8e:	b29b      	uxth	r3, r3
 801ad90:	4618      	mov	r0, r3
 801ad92:	f7f5 f86d 	bl	800fe70 <lwip_htons>
 801ad96:	4603      	mov	r3, r0
 801ad98:	461a      	mov	r2, r3
 801ad9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ad9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ada0:	2200      	movs	r2, #0
 801ada2:	729a      	strb	r2, [r3, #10]
 801ada4:	2200      	movs	r2, #0
 801ada6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ada8:	68bb      	ldr	r3, [r7, #8]
 801adaa:	695b      	ldr	r3, [r3, #20]
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801adb0:	68b8      	ldr	r0, [r7, #8]
 801adb2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801adb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801adb6:	f7f6 fc39 	bl	801162c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801adba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801adbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801adc0:	1ad3      	subs	r3, r2, r3
 801adc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801adc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801adca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801adcc:	4413      	add	r3, r2
 801adce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801add2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801add6:	2b00      	cmp	r3, #0
 801add8:	f47f af19 	bne.w	801ac0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801addc:	2300      	movs	r3, #0
 801adde:	e002      	b.n	801ade6 <ip4_frag+0x26a>
      goto memerr;
 801ade0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ade2:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ade6:	4618      	mov	r0, r3
 801ade8:	3748      	adds	r7, #72	; 0x48
 801adea:	46bd      	mov	sp, r7
 801adec:	bd80      	pop	{r7, pc}
 801adee:	bf00      	nop
 801adf0:	080218b4 	.word	0x080218b4
 801adf4:	08021a90 	.word	0x08021a90
 801adf8:	080218fc 	.word	0x080218fc
 801adfc:	08021aac 	.word	0x08021aac
 801ae00:	08021acc 	.word	0x08021acc
 801ae04:	0801ab15 	.word	0x0801ab15

0801ae08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b086      	sub	sp, #24
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ae12:	230e      	movs	r3, #14
 801ae14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ae16:	687b      	ldr	r3, [r7, #4]
 801ae18:	895b      	ldrh	r3, [r3, #10]
 801ae1a:	2b0e      	cmp	r3, #14
 801ae1c:	d96e      	bls.n	801aefc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ae1e:	687b      	ldr	r3, [r7, #4]
 801ae20:	7bdb      	ldrb	r3, [r3, #15]
 801ae22:	2b00      	cmp	r3, #0
 801ae24:	d106      	bne.n	801ae34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae2c:	3301      	adds	r3, #1
 801ae2e:	b2da      	uxtb	r2, r3
 801ae30:	687b      	ldr	r3, [r7, #4]
 801ae32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	685b      	ldr	r3, [r3, #4]
 801ae38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801ae3a:	693b      	ldr	r3, [r7, #16]
 801ae3c:	7b1a      	ldrb	r2, [r3, #12]
 801ae3e:	7b5b      	ldrb	r3, [r3, #13]
 801ae40:	021b      	lsls	r3, r3, #8
 801ae42:	4313      	orrs	r3, r2
 801ae44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ae46:	693b      	ldr	r3, [r7, #16]
 801ae48:	781b      	ldrb	r3, [r3, #0]
 801ae4a:	f003 0301 	and.w	r3, r3, #1
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d023      	beq.n	801ae9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ae52:	693b      	ldr	r3, [r7, #16]
 801ae54:	781b      	ldrb	r3, [r3, #0]
 801ae56:	2b01      	cmp	r3, #1
 801ae58:	d10f      	bne.n	801ae7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae5a:	693b      	ldr	r3, [r7, #16]
 801ae5c:	785b      	ldrb	r3, [r3, #1]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d11b      	bne.n	801ae9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ae62:	693b      	ldr	r3, [r7, #16]
 801ae64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ae66:	2b5e      	cmp	r3, #94	; 0x5e
 801ae68:	d117      	bne.n	801ae9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	7b5b      	ldrb	r3, [r3, #13]
 801ae6e:	f043 0310 	orr.w	r3, r3, #16
 801ae72:	b2da      	uxtb	r2, r3
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	735a      	strb	r2, [r3, #13]
 801ae78:	e00f      	b.n	801ae9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801ae7a:	693b      	ldr	r3, [r7, #16]
 801ae7c:	2206      	movs	r2, #6
 801ae7e:	4928      	ldr	r1, [pc, #160]	; (801af20 <ethernet_input+0x118>)
 801ae80:	4618      	mov	r0, r3
 801ae82:	f000 fa9d 	bl	801b3c0 <memcmp>
 801ae86:	4603      	mov	r3, r0
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	d106      	bne.n	801ae9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ae8c:	687b      	ldr	r3, [r7, #4]
 801ae8e:	7b5b      	ldrb	r3, [r3, #13]
 801ae90:	f043 0308 	orr.w	r3, r3, #8
 801ae94:	b2da      	uxtb	r2, r3
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801ae9a:	89fb      	ldrh	r3, [r7, #14]
 801ae9c:	2b08      	cmp	r3, #8
 801ae9e:	d003      	beq.n	801aea8 <ethernet_input+0xa0>
 801aea0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801aea4:	d014      	beq.n	801aed0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801aea6:	e032      	b.n	801af0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aea8:	683b      	ldr	r3, [r7, #0]
 801aeaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aeae:	f003 0308 	and.w	r3, r3, #8
 801aeb2:	2b00      	cmp	r3, #0
 801aeb4:	d024      	beq.n	801af00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aeb6:	8afb      	ldrh	r3, [r7, #22]
 801aeb8:	4619      	mov	r1, r3
 801aeba:	6878      	ldr	r0, [r7, #4]
 801aebc:	f7f6 fafe 	bl	80114bc <pbuf_remove_header>
 801aec0:	4603      	mov	r3, r0
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d11e      	bne.n	801af04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801aec6:	6839      	ldr	r1, [r7, #0]
 801aec8:	6878      	ldr	r0, [r7, #4]
 801aeca:	f7fe fde9 	bl	8019aa0 <ip4_input>
      break;
 801aece:	e013      	b.n	801aef8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801aed0:	683b      	ldr	r3, [r7, #0]
 801aed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aed6:	f003 0308 	and.w	r3, r3, #8
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	d014      	beq.n	801af08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801aede:	8afb      	ldrh	r3, [r7, #22]
 801aee0:	4619      	mov	r1, r3
 801aee2:	6878      	ldr	r0, [r7, #4]
 801aee4:	f7f6 faea 	bl	80114bc <pbuf_remove_header>
 801aee8:	4603      	mov	r3, r0
 801aeea:	2b00      	cmp	r3, #0
 801aeec:	d10e      	bne.n	801af0c <ethernet_input+0x104>
        etharp_input(p, netif);
 801aeee:	6839      	ldr	r1, [r7, #0]
 801aef0:	6878      	ldr	r0, [r7, #4]
 801aef2:	f7fd ff89 	bl	8018e08 <etharp_input>
      break;
 801aef6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801aef8:	2300      	movs	r3, #0
 801aefa:	e00c      	b.n	801af16 <ethernet_input+0x10e>
    goto free_and_return;
 801aefc:	bf00      	nop
 801aefe:	e006      	b.n	801af0e <ethernet_input+0x106>
        goto free_and_return;
 801af00:	bf00      	nop
 801af02:	e004      	b.n	801af0e <ethernet_input+0x106>
        goto free_and_return;
 801af04:	bf00      	nop
 801af06:	e002      	b.n	801af0e <ethernet_input+0x106>
        goto free_and_return;
 801af08:	bf00      	nop
 801af0a:	e000      	b.n	801af0e <ethernet_input+0x106>
        goto free_and_return;
 801af0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801af0e:	6878      	ldr	r0, [r7, #4]
 801af10:	f7f6 fb8c 	bl	801162c <pbuf_free>
  return ERR_OK;
 801af14:	2300      	movs	r3, #0
}
 801af16:	4618      	mov	r0, r3
 801af18:	3718      	adds	r7, #24
 801af1a:	46bd      	mov	sp, r7
 801af1c:	bd80      	pop	{r7, pc}
 801af1e:	bf00      	nop
 801af20:	08021cec 	.word	0x08021cec

0801af24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801af24:	b580      	push	{r7, lr}
 801af26:	b086      	sub	sp, #24
 801af28:	af00      	add	r7, sp, #0
 801af2a:	60f8      	str	r0, [r7, #12]
 801af2c:	60b9      	str	r1, [r7, #8]
 801af2e:	607a      	str	r2, [r7, #4]
 801af30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801af32:	8c3b      	ldrh	r3, [r7, #32]
 801af34:	4618      	mov	r0, r3
 801af36:	f7f4 ff9b 	bl	800fe70 <lwip_htons>
 801af3a:	4603      	mov	r3, r0
 801af3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801af3e:	210e      	movs	r1, #14
 801af40:	68b8      	ldr	r0, [r7, #8]
 801af42:	f7f6 faab 	bl	801149c <pbuf_add_header>
 801af46:	4603      	mov	r3, r0
 801af48:	2b00      	cmp	r3, #0
 801af4a:	d125      	bne.n	801af98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801af4c:	68bb      	ldr	r3, [r7, #8]
 801af4e:	685b      	ldr	r3, [r3, #4]
 801af50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801af52:	693b      	ldr	r3, [r7, #16]
 801af54:	8afa      	ldrh	r2, [r7, #22]
 801af56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801af58:	693b      	ldr	r3, [r7, #16]
 801af5a:	2206      	movs	r2, #6
 801af5c:	6839      	ldr	r1, [r7, #0]
 801af5e:	4618      	mov	r0, r3
 801af60:	f000 fa3c 	bl	801b3dc <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801af64:	693b      	ldr	r3, [r7, #16]
 801af66:	3306      	adds	r3, #6
 801af68:	2206      	movs	r2, #6
 801af6a:	6879      	ldr	r1, [r7, #4]
 801af6c:	4618      	mov	r0, r3
 801af6e:	f000 fa35 	bl	801b3dc <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801af72:	68fb      	ldr	r3, [r7, #12]
 801af74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801af78:	2b06      	cmp	r3, #6
 801af7a:	d006      	beq.n	801af8a <ethernet_output+0x66>
 801af7c:	4b0a      	ldr	r3, [pc, #40]	; (801afa8 <ethernet_output+0x84>)
 801af7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 801af82:	490a      	ldr	r1, [pc, #40]	; (801afac <ethernet_output+0x88>)
 801af84:	480a      	ldr	r0, [pc, #40]	; (801afb0 <ethernet_output+0x8c>)
 801af86:	f000 fe81 	bl	801bc8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801af8a:	68fb      	ldr	r3, [r7, #12]
 801af8c:	699b      	ldr	r3, [r3, #24]
 801af8e:	68b9      	ldr	r1, [r7, #8]
 801af90:	68f8      	ldr	r0, [r7, #12]
 801af92:	4798      	blx	r3
 801af94:	4603      	mov	r3, r0
 801af96:	e002      	b.n	801af9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801af98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801af9a:	f06f 0301 	mvn.w	r3, #1
}
 801af9e:	4618      	mov	r0, r3
 801afa0:	3718      	adds	r7, #24
 801afa2:	46bd      	mov	sp, r7
 801afa4:	bd80      	pop	{r7, pc}
 801afa6:	bf00      	nop
 801afa8:	08021adc 	.word	0x08021adc
 801afac:	08021b14 	.word	0x08021b14
 801afb0:	08021b48 	.word	0x08021b48

0801afb4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801afb4:	b580      	push	{r7, lr}
 801afb6:	b086      	sub	sp, #24
 801afb8:	af00      	add	r7, sp, #0
 801afba:	6078      	str	r0, [r7, #4]
 801afbc:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	60bb      	str	r3, [r7, #8]
 801afc2:	2304      	movs	r3, #4
 801afc4:	60fb      	str	r3, [r7, #12]
 801afc6:	2300      	movs	r3, #0
 801afc8:	613b      	str	r3, [r7, #16]
 801afca:	2300      	movs	r3, #0
 801afcc:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801afce:	f107 0308 	add.w	r3, r7, #8
 801afd2:	2100      	movs	r1, #0
 801afd4:	4618      	mov	r0, r3
 801afd6:	f7ee f810 	bl	8008ffa <osMessageCreate>
 801afda:	4602      	mov	r2, r0
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	d102      	bne.n	801afee <sys_mbox_new+0x3a>
    return ERR_MEM;
 801afe8:	f04f 33ff 	mov.w	r3, #4294967295
 801afec:	e000      	b.n	801aff0 <sys_mbox_new+0x3c>

  return ERR_OK;
 801afee:	2300      	movs	r3, #0
}
 801aff0:	4618      	mov	r0, r3
 801aff2:	3718      	adds	r7, #24
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}

0801aff8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	681b      	ldr	r3, [r3, #0]
 801b004:	4618      	mov	r0, r3
 801b006:	f7ee f8d5 	bl	80091b4 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	4618      	mov	r0, r3
 801b010:	f7ee f8e6 	bl	80091e0 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b014:	bf00      	nop
 801b016:	3708      	adds	r7, #8
 801b018:	46bd      	mov	sp, r7
 801b01a:	bd80      	pop	{r7, pc}

0801b01c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b01c:	b580      	push	{r7, lr}
 801b01e:	b084      	sub	sp, #16
 801b020:	af00      	add	r7, sp, #0
 801b022:	6078      	str	r0, [r7, #4]
 801b024:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	6839      	ldr	r1, [r7, #0]
 801b02c:	2200      	movs	r2, #0
 801b02e:	4618      	mov	r0, r3
 801b030:	f7ee f80c 	bl	800904c <osMessagePut>
 801b034:	4603      	mov	r3, r0
 801b036:	2b00      	cmp	r3, #0
 801b038:	d102      	bne.n	801b040 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b03a:	2300      	movs	r3, #0
 801b03c:	73fb      	strb	r3, [r7, #15]
 801b03e:	e001      	b.n	801b044 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b040:	23ff      	movs	r3, #255	; 0xff
 801b042:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b044:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b048:	4618      	mov	r0, r3
 801b04a:	3710      	adds	r7, #16
 801b04c:	46bd      	mov	sp, r7
 801b04e:	bd80      	pop	{r7, pc}

0801b050 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b050:	b580      	push	{r7, lr}
 801b052:	b08c      	sub	sp, #48	; 0x30
 801b054:	af00      	add	r7, sp, #0
 801b056:	61f8      	str	r0, [r7, #28]
 801b058:	61b9      	str	r1, [r7, #24]
 801b05a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b05c:	f7ed fdf7 	bl	8008c4e <osKernelSysTick>
 801b060:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b062:	697b      	ldr	r3, [r7, #20]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d017      	beq.n	801b098 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b068:	69fb      	ldr	r3, [r7, #28]
 801b06a:	6819      	ldr	r1, [r3, #0]
 801b06c:	f107 0320 	add.w	r3, r7, #32
 801b070:	697a      	ldr	r2, [r7, #20]
 801b072:	4618      	mov	r0, r3
 801b074:	f7ee f82a 	bl	80090cc <osMessageGet>

    if(event.status == osEventMessage)
 801b078:	6a3b      	ldr	r3, [r7, #32]
 801b07a:	2b10      	cmp	r3, #16
 801b07c:	d109      	bne.n	801b092 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b080:	461a      	mov	r2, r3
 801b082:	69bb      	ldr	r3, [r7, #24]
 801b084:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b086:	f7ed fde2 	bl	8008c4e <osKernelSysTick>
 801b08a:	4602      	mov	r2, r0
 801b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b08e:	1ad3      	subs	r3, r2, r3
 801b090:	e019      	b.n	801b0c6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b092:	f04f 33ff 	mov.w	r3, #4294967295
 801b096:	e016      	b.n	801b0c6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b098:	69fb      	ldr	r3, [r7, #28]
 801b09a:	6819      	ldr	r1, [r3, #0]
 801b09c:	463b      	mov	r3, r7
 801b09e:	f04f 32ff 	mov.w	r2, #4294967295
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f7ee f812 	bl	80090cc <osMessageGet>
 801b0a8:	f107 0320 	add.w	r3, r7, #32
 801b0ac:	463a      	mov	r2, r7
 801b0ae:	ca07      	ldmia	r2, {r0, r1, r2}
 801b0b0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0b6:	461a      	mov	r2, r3
 801b0b8:	69bb      	ldr	r3, [r7, #24]
 801b0ba:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b0bc:	f7ed fdc7 	bl	8008c4e <osKernelSysTick>
 801b0c0:	4602      	mov	r2, r0
 801b0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b0c4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b0c6:	4618      	mov	r0, r3
 801b0c8:	3730      	adds	r7, #48	; 0x30
 801b0ca:	46bd      	mov	sp, r7
 801b0cc:	bd80      	pop	{r7, pc}

0801b0ce <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b0ce:	b580      	push	{r7, lr}
 801b0d0:	b086      	sub	sp, #24
 801b0d2:	af00      	add	r7, sp, #0
 801b0d4:	6078      	str	r0, [r7, #4]
 801b0d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801b0d8:	687b      	ldr	r3, [r7, #4]
 801b0da:	6819      	ldr	r1, [r3, #0]
 801b0dc:	f107 030c 	add.w	r3, r7, #12
 801b0e0:	2200      	movs	r2, #0
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	f7ed fff2 	bl	80090cc <osMessageGet>

  if(event.status == osEventMessage)
 801b0e8:	68fb      	ldr	r3, [r7, #12]
 801b0ea:	2b10      	cmp	r3, #16
 801b0ec:	d105      	bne.n	801b0fa <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801b0ee:	693b      	ldr	r3, [r7, #16]
 801b0f0:	461a      	mov	r2, r3
 801b0f2:	683b      	ldr	r3, [r7, #0]
 801b0f4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801b0f6:	2300      	movs	r3, #0
 801b0f8:	e001      	b.n	801b0fe <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b0fa:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b0fe:	4618      	mov	r0, r3
 801b100:	3718      	adds	r7, #24
 801b102:	46bd      	mov	sp, r7
 801b104:	bd80      	pop	{r7, pc}

0801b106 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b106:	b480      	push	{r7}
 801b108:	b083      	sub	sp, #12
 801b10a:	af00      	add	r7, sp, #0
 801b10c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	681b      	ldr	r3, [r3, #0]
 801b112:	2b00      	cmp	r3, #0
 801b114:	d101      	bne.n	801b11a <sys_mbox_valid+0x14>
    return 0;
 801b116:	2300      	movs	r3, #0
 801b118:	e000      	b.n	801b11c <sys_mbox_valid+0x16>
  else
    return 1;
 801b11a:	2301      	movs	r3, #1
}
 801b11c:	4618      	mov	r0, r3
 801b11e:	370c      	adds	r7, #12
 801b120:	46bd      	mov	sp, r7
 801b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b126:	4770      	bx	lr

0801b128 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b128:	b480      	push	{r7}
 801b12a:	b083      	sub	sp, #12
 801b12c:	af00      	add	r7, sp, #0
 801b12e:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	2200      	movs	r2, #0
 801b134:	601a      	str	r2, [r3, #0]
}
 801b136:	bf00      	nop
 801b138:	370c      	adds	r7, #12
 801b13a:	46bd      	mov	sp, r7
 801b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b140:	4770      	bx	lr

0801b142 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b142:	b580      	push	{r7, lr}
 801b144:	b084      	sub	sp, #16
 801b146:	af00      	add	r7, sp, #0
 801b148:	6078      	str	r0, [r7, #4]
 801b14a:	460b      	mov	r3, r1
 801b14c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801b14e:	2300      	movs	r3, #0
 801b150:	60bb      	str	r3, [r7, #8]
 801b152:	2300      	movs	r3, #0
 801b154:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801b156:	f107 0308 	add.w	r3, r7, #8
 801b15a:	2101      	movs	r1, #1
 801b15c:	4618      	mov	r0, r3
 801b15e:	f7ed fe83 	bl	8008e68 <osSemaphoreCreate>
 801b162:	4602      	mov	r2, r0
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d102      	bne.n	801b176 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b170:	f04f 33ff 	mov.w	r3, #4294967295
 801b174:	e009      	b.n	801b18a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801b176:	78fb      	ldrb	r3, [r7, #3]
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d105      	bne.n	801b188 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801b17c:	687b      	ldr	r3, [r7, #4]
 801b17e:	681b      	ldr	r3, [r3, #0]
 801b180:	2100      	movs	r1, #0
 801b182:	4618      	mov	r0, r3
 801b184:	f7ed fea2 	bl	8008ecc <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b188:	2300      	movs	r3, #0
}
 801b18a:	4618      	mov	r0, r3
 801b18c:	3710      	adds	r7, #16
 801b18e:	46bd      	mov	sp, r7
 801b190:	bd80      	pop	{r7, pc}

0801b192 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b192:	b580      	push	{r7, lr}
 801b194:	b084      	sub	sp, #16
 801b196:	af00      	add	r7, sp, #0
 801b198:	6078      	str	r0, [r7, #4]
 801b19a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801b19c:	f7ed fd57 	bl	8008c4e <osKernelSysTick>
 801b1a0:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b1a2:	683b      	ldr	r3, [r7, #0]
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d011      	beq.n	801b1cc <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	6839      	ldr	r1, [r7, #0]
 801b1ae:	4618      	mov	r0, r3
 801b1b0:	f7ed fe8c 	bl	8008ecc <osSemaphoreWait>
 801b1b4:	4603      	mov	r3, r0
 801b1b6:	2b00      	cmp	r3, #0
 801b1b8:	d105      	bne.n	801b1c6 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801b1ba:	f7ed fd48 	bl	8008c4e <osKernelSysTick>
 801b1be:	4602      	mov	r2, r0
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	1ad3      	subs	r3, r2, r3
 801b1c4:	e012      	b.n	801b1ec <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b1c6:	f04f 33ff 	mov.w	r3, #4294967295
 801b1ca:	e00f      	b.n	801b1ec <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801b1cc:	bf00      	nop
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	681b      	ldr	r3, [r3, #0]
 801b1d2:	f04f 31ff 	mov.w	r1, #4294967295
 801b1d6:	4618      	mov	r0, r3
 801b1d8:	f7ed fe78 	bl	8008ecc <osSemaphoreWait>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d1f5      	bne.n	801b1ce <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801b1e2:	f7ed fd34 	bl	8008c4e <osKernelSysTick>
 801b1e6:	4602      	mov	r2, r0
 801b1e8:	68fb      	ldr	r3, [r7, #12]
 801b1ea:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3710      	adds	r7, #16
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	4618      	mov	r0, r3
 801b202:	f7ed feb1 	bl	8008f68 <osSemaphoreRelease>
}
 801b206:	bf00      	nop
 801b208:	3708      	adds	r7, #8
 801b20a:	46bd      	mov	sp, r7
 801b20c:	bd80      	pop	{r7, pc}

0801b20e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b20e:	b580      	push	{r7, lr}
 801b210:	b082      	sub	sp, #8
 801b212:	af00      	add	r7, sp, #0
 801b214:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	4618      	mov	r0, r3
 801b21c:	f7ed feda 	bl	8008fd4 <osSemaphoreDelete>
}
 801b220:	bf00      	nop
 801b222:	3708      	adds	r7, #8
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}

0801b228 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b228:	b480      	push	{r7}
 801b22a:	b083      	sub	sp, #12
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	681b      	ldr	r3, [r3, #0]
 801b234:	2b00      	cmp	r3, #0
 801b236:	d101      	bne.n	801b23c <sys_sem_valid+0x14>
    return 0;
 801b238:	2300      	movs	r3, #0
 801b23a:	e000      	b.n	801b23e <sys_sem_valid+0x16>
  else
    return 1;
 801b23c:	2301      	movs	r3, #1
}
 801b23e:	4618      	mov	r0, r3
 801b240:	370c      	adds	r7, #12
 801b242:	46bd      	mov	sp, r7
 801b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b248:	4770      	bx	lr

0801b24a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b24a:	b480      	push	{r7}
 801b24c:	b083      	sub	sp, #12
 801b24e:	af00      	add	r7, sp, #0
 801b250:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	2200      	movs	r2, #0
 801b256:	601a      	str	r2, [r3, #0]
}
 801b258:	bf00      	nop
 801b25a:	370c      	adds	r7, #12
 801b25c:	46bd      	mov	sp, r7
 801b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b262:	4770      	bx	lr

0801b264 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b264:	b580      	push	{r7, lr}
 801b266:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b268:	4803      	ldr	r0, [pc, #12]	; (801b278 <sys_init+0x14>)
 801b26a:	f7ed fd60 	bl	8008d2e <osMutexCreate>
 801b26e:	4603      	mov	r3, r0
 801b270:	4a02      	ldr	r2, [pc, #8]	; (801b27c <sys_init+0x18>)
 801b272:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b274:	bf00      	nop
 801b276:	bd80      	pop	{r7, pc}
 801b278:	08021cfc 	.word	0x08021cfc
 801b27c:	2000d7dc 	.word	0x2000d7dc

0801b280 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b280:	b580      	push	{r7, lr}
 801b282:	b084      	sub	sp, #16
 801b284:	af00      	add	r7, sp, #0
 801b286:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b288:	2300      	movs	r3, #0
 801b28a:	60bb      	str	r3, [r7, #8]
 801b28c:	2300      	movs	r3, #0
 801b28e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b290:	f107 0308 	add.w	r3, r7, #8
 801b294:	4618      	mov	r0, r3
 801b296:	f7ed fd4a 	bl	8008d2e <osMutexCreate>
 801b29a:	4602      	mov	r2, r0
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	2b00      	cmp	r3, #0
 801b2a6:	d102      	bne.n	801b2ae <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b2a8:	f04f 33ff 	mov.w	r3, #4294967295
 801b2ac:	e000      	b.n	801b2b0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b2ae:	2300      	movs	r3, #0
}
 801b2b0:	4618      	mov	r0, r3
 801b2b2:	3710      	adds	r7, #16
 801b2b4:	46bd      	mov	sp, r7
 801b2b6:	bd80      	pop	{r7, pc}

0801b2b8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b2b8:	b580      	push	{r7, lr}
 801b2ba:	b082      	sub	sp, #8
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	f04f 31ff 	mov.w	r1, #4294967295
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f7ed fd49 	bl	8008d60 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b2ce:	bf00      	nop
 801b2d0:	3708      	adds	r7, #8
 801b2d2:	46bd      	mov	sp, r7
 801b2d4:	bd80      	pop	{r7, pc}

0801b2d6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b2d6:	b580      	push	{r7, lr}
 801b2d8:	b082      	sub	sp, #8
 801b2da:	af00      	add	r7, sp, #0
 801b2dc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	4618      	mov	r0, r3
 801b2e4:	f7ed fd8a 	bl	8008dfc <osMutexRelease>
}
 801b2e8:	bf00      	nop
 801b2ea:	3708      	adds	r7, #8
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}

0801b2f0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b08c      	sub	sp, #48	; 0x30
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	60f8      	str	r0, [r7, #12]
 801b2f8:	60b9      	str	r1, [r7, #8]
 801b2fa:	607a      	str	r2, [r7, #4]
 801b2fc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b2fe:	f107 0314 	add.w	r3, r7, #20
 801b302:	2200      	movs	r2, #0
 801b304:	601a      	str	r2, [r3, #0]
 801b306:	605a      	str	r2, [r3, #4]
 801b308:	609a      	str	r2, [r3, #8]
 801b30a:	60da      	str	r2, [r3, #12]
 801b30c:	611a      	str	r2, [r3, #16]
 801b30e:	615a      	str	r2, [r3, #20]
 801b310:	619a      	str	r2, [r3, #24]
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	617b      	str	r3, [r7, #20]
 801b316:	68bb      	ldr	r3, [r7, #8]
 801b318:	61bb      	str	r3, [r7, #24]
 801b31a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b31c:	b21b      	sxth	r3, r3
 801b31e:	83bb      	strh	r3, [r7, #28]
 801b320:	683b      	ldr	r3, [r7, #0]
 801b322:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b324:	f107 0314 	add.w	r3, r7, #20
 801b328:	6879      	ldr	r1, [r7, #4]
 801b32a:	4618      	mov	r0, r3
 801b32c:	f7ed fc9f 	bl	8008c6e <osThreadCreate>
 801b330:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b332:	4618      	mov	r0, r3
 801b334:	3730      	adds	r7, #48	; 0x30
 801b336:	46bd      	mov	sp, r7
 801b338:	bd80      	pop	{r7, pc}
	...

0801b33c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b33c:	b580      	push	{r7, lr}
 801b33e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b340:	4b04      	ldr	r3, [pc, #16]	; (801b354 <sys_arch_protect+0x18>)
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f04f 31ff 	mov.w	r1, #4294967295
 801b348:	4618      	mov	r0, r3
 801b34a:	f7ed fd09 	bl	8008d60 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b34e:	2301      	movs	r3, #1
}
 801b350:	4618      	mov	r0, r3
 801b352:	bd80      	pop	{r7, pc}
 801b354:	2000d7dc 	.word	0x2000d7dc

0801b358 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	b082      	sub	sp, #8
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b360:	4b04      	ldr	r3, [pc, #16]	; (801b374 <sys_arch_unprotect+0x1c>)
 801b362:	681b      	ldr	r3, [r3, #0]
 801b364:	4618      	mov	r0, r3
 801b366:	f7ed fd49 	bl	8008dfc <osMutexRelease>
}
 801b36a:	bf00      	nop
 801b36c:	3708      	adds	r7, #8
 801b36e:	46bd      	mov	sp, r7
 801b370:	bd80      	pop	{r7, pc}
 801b372:	bf00      	nop
 801b374:	2000d7dc 	.word	0x2000d7dc

0801b378 <__libc_init_array>:
 801b378:	b570      	push	{r4, r5, r6, lr}
 801b37a:	4d0d      	ldr	r5, [pc, #52]	; (801b3b0 <__libc_init_array+0x38>)
 801b37c:	4c0d      	ldr	r4, [pc, #52]	; (801b3b4 <__libc_init_array+0x3c>)
 801b37e:	1b64      	subs	r4, r4, r5
 801b380:	10a4      	asrs	r4, r4, #2
 801b382:	2600      	movs	r6, #0
 801b384:	42a6      	cmp	r6, r4
 801b386:	d109      	bne.n	801b39c <__libc_init_array+0x24>
 801b388:	4d0b      	ldr	r5, [pc, #44]	; (801b3b8 <__libc_init_array+0x40>)
 801b38a:	4c0c      	ldr	r4, [pc, #48]	; (801b3bc <__libc_init_array+0x44>)
 801b38c:	f002 fe0a 	bl	801dfa4 <_init>
 801b390:	1b64      	subs	r4, r4, r5
 801b392:	10a4      	asrs	r4, r4, #2
 801b394:	2600      	movs	r6, #0
 801b396:	42a6      	cmp	r6, r4
 801b398:	d105      	bne.n	801b3a6 <__libc_init_array+0x2e>
 801b39a:	bd70      	pop	{r4, r5, r6, pc}
 801b39c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3a0:	4798      	blx	r3
 801b3a2:	3601      	adds	r6, #1
 801b3a4:	e7ee      	b.n	801b384 <__libc_init_array+0xc>
 801b3a6:	f855 3b04 	ldr.w	r3, [r5], #4
 801b3aa:	4798      	blx	r3
 801b3ac:	3601      	adds	r6, #1
 801b3ae:	e7f2      	b.n	801b396 <__libc_init_array+0x1e>
 801b3b0:	08022150 	.word	0x08022150
 801b3b4:	08022150 	.word	0x08022150
 801b3b8:	08022150 	.word	0x08022150
 801b3bc:	08022154 	.word	0x08022154

0801b3c0 <memcmp>:
 801b3c0:	b530      	push	{r4, r5, lr}
 801b3c2:	3901      	subs	r1, #1
 801b3c4:	2400      	movs	r4, #0
 801b3c6:	42a2      	cmp	r2, r4
 801b3c8:	d101      	bne.n	801b3ce <memcmp+0xe>
 801b3ca:	2000      	movs	r0, #0
 801b3cc:	e005      	b.n	801b3da <memcmp+0x1a>
 801b3ce:	5d03      	ldrb	r3, [r0, r4]
 801b3d0:	3401      	adds	r4, #1
 801b3d2:	5d0d      	ldrb	r5, [r1, r4]
 801b3d4:	42ab      	cmp	r3, r5
 801b3d6:	d0f6      	beq.n	801b3c6 <memcmp+0x6>
 801b3d8:	1b58      	subs	r0, r3, r5
 801b3da:	bd30      	pop	{r4, r5, pc}

0801b3dc <memcpy>:
 801b3dc:	440a      	add	r2, r1
 801b3de:	4291      	cmp	r1, r2
 801b3e0:	f100 33ff 	add.w	r3, r0, #4294967295
 801b3e4:	d100      	bne.n	801b3e8 <memcpy+0xc>
 801b3e6:	4770      	bx	lr
 801b3e8:	b510      	push	{r4, lr}
 801b3ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b3ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b3f2:	4291      	cmp	r1, r2
 801b3f4:	d1f9      	bne.n	801b3ea <memcpy+0xe>
 801b3f6:	bd10      	pop	{r4, pc}

0801b3f8 <memset>:
 801b3f8:	4402      	add	r2, r0
 801b3fa:	4603      	mov	r3, r0
 801b3fc:	4293      	cmp	r3, r2
 801b3fe:	d100      	bne.n	801b402 <memset+0xa>
 801b400:	4770      	bx	lr
 801b402:	f803 1b01 	strb.w	r1, [r3], #1
 801b406:	e7f9      	b.n	801b3fc <memset+0x4>

0801b408 <__cvt>:
 801b408:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b40a:	ed2d 8b02 	vpush	{d8}
 801b40e:	eeb0 8b40 	vmov.f64	d8, d0
 801b412:	b085      	sub	sp, #20
 801b414:	4617      	mov	r7, r2
 801b416:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b418:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b41a:	ee18 2a90 	vmov	r2, s17
 801b41e:	f025 0520 	bic.w	r5, r5, #32
 801b422:	2a00      	cmp	r2, #0
 801b424:	bfb6      	itet	lt
 801b426:	222d      	movlt	r2, #45	; 0x2d
 801b428:	2200      	movge	r2, #0
 801b42a:	eeb1 8b40 	vneglt.f64	d8, d0
 801b42e:	2d46      	cmp	r5, #70	; 0x46
 801b430:	460c      	mov	r4, r1
 801b432:	701a      	strb	r2, [r3, #0]
 801b434:	d004      	beq.n	801b440 <__cvt+0x38>
 801b436:	2d45      	cmp	r5, #69	; 0x45
 801b438:	d100      	bne.n	801b43c <__cvt+0x34>
 801b43a:	3401      	adds	r4, #1
 801b43c:	2102      	movs	r1, #2
 801b43e:	e000      	b.n	801b442 <__cvt+0x3a>
 801b440:	2103      	movs	r1, #3
 801b442:	ab03      	add	r3, sp, #12
 801b444:	9301      	str	r3, [sp, #4]
 801b446:	ab02      	add	r3, sp, #8
 801b448:	9300      	str	r3, [sp, #0]
 801b44a:	4622      	mov	r2, r4
 801b44c:	4633      	mov	r3, r6
 801b44e:	eeb0 0b48 	vmov.f64	d0, d8
 801b452:	f000 ff21 	bl	801c298 <_dtoa_r>
 801b456:	2d47      	cmp	r5, #71	; 0x47
 801b458:	d109      	bne.n	801b46e <__cvt+0x66>
 801b45a:	07fb      	lsls	r3, r7, #31
 801b45c:	d407      	bmi.n	801b46e <__cvt+0x66>
 801b45e:	9b03      	ldr	r3, [sp, #12]
 801b460:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b462:	1a1b      	subs	r3, r3, r0
 801b464:	6013      	str	r3, [r2, #0]
 801b466:	b005      	add	sp, #20
 801b468:	ecbd 8b02 	vpop	{d8}
 801b46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b46e:	2d46      	cmp	r5, #70	; 0x46
 801b470:	eb00 0204 	add.w	r2, r0, r4
 801b474:	d10c      	bne.n	801b490 <__cvt+0x88>
 801b476:	7803      	ldrb	r3, [r0, #0]
 801b478:	2b30      	cmp	r3, #48	; 0x30
 801b47a:	d107      	bne.n	801b48c <__cvt+0x84>
 801b47c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b484:	bf1c      	itt	ne
 801b486:	f1c4 0401 	rsbne	r4, r4, #1
 801b48a:	6034      	strne	r4, [r6, #0]
 801b48c:	6833      	ldr	r3, [r6, #0]
 801b48e:	441a      	add	r2, r3
 801b490:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b498:	bf08      	it	eq
 801b49a:	9203      	streq	r2, [sp, #12]
 801b49c:	2130      	movs	r1, #48	; 0x30
 801b49e:	9b03      	ldr	r3, [sp, #12]
 801b4a0:	4293      	cmp	r3, r2
 801b4a2:	d2dc      	bcs.n	801b45e <__cvt+0x56>
 801b4a4:	1c5c      	adds	r4, r3, #1
 801b4a6:	9403      	str	r4, [sp, #12]
 801b4a8:	7019      	strb	r1, [r3, #0]
 801b4aa:	e7f8      	b.n	801b49e <__cvt+0x96>

0801b4ac <__exponent>:
 801b4ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b4ae:	4603      	mov	r3, r0
 801b4b0:	2900      	cmp	r1, #0
 801b4b2:	bfb8      	it	lt
 801b4b4:	4249      	neglt	r1, r1
 801b4b6:	f803 2b02 	strb.w	r2, [r3], #2
 801b4ba:	bfb4      	ite	lt
 801b4bc:	222d      	movlt	r2, #45	; 0x2d
 801b4be:	222b      	movge	r2, #43	; 0x2b
 801b4c0:	2909      	cmp	r1, #9
 801b4c2:	7042      	strb	r2, [r0, #1]
 801b4c4:	dd2a      	ble.n	801b51c <__exponent+0x70>
 801b4c6:	f10d 0407 	add.w	r4, sp, #7
 801b4ca:	46a4      	mov	ip, r4
 801b4cc:	270a      	movs	r7, #10
 801b4ce:	46a6      	mov	lr, r4
 801b4d0:	460a      	mov	r2, r1
 801b4d2:	fb91 f6f7 	sdiv	r6, r1, r7
 801b4d6:	fb07 1516 	mls	r5, r7, r6, r1
 801b4da:	3530      	adds	r5, #48	; 0x30
 801b4dc:	2a63      	cmp	r2, #99	; 0x63
 801b4de:	f104 34ff 	add.w	r4, r4, #4294967295
 801b4e2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b4e6:	4631      	mov	r1, r6
 801b4e8:	dcf1      	bgt.n	801b4ce <__exponent+0x22>
 801b4ea:	3130      	adds	r1, #48	; 0x30
 801b4ec:	f1ae 0502 	sub.w	r5, lr, #2
 801b4f0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b4f4:	1c44      	adds	r4, r0, #1
 801b4f6:	4629      	mov	r1, r5
 801b4f8:	4561      	cmp	r1, ip
 801b4fa:	d30a      	bcc.n	801b512 <__exponent+0x66>
 801b4fc:	f10d 0209 	add.w	r2, sp, #9
 801b500:	eba2 020e 	sub.w	r2, r2, lr
 801b504:	4565      	cmp	r5, ip
 801b506:	bf88      	it	hi
 801b508:	2200      	movhi	r2, #0
 801b50a:	4413      	add	r3, r2
 801b50c:	1a18      	subs	r0, r3, r0
 801b50e:	b003      	add	sp, #12
 801b510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b512:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b516:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b51a:	e7ed      	b.n	801b4f8 <__exponent+0x4c>
 801b51c:	2330      	movs	r3, #48	; 0x30
 801b51e:	3130      	adds	r1, #48	; 0x30
 801b520:	7083      	strb	r3, [r0, #2]
 801b522:	70c1      	strb	r1, [r0, #3]
 801b524:	1d03      	adds	r3, r0, #4
 801b526:	e7f1      	b.n	801b50c <__exponent+0x60>

0801b528 <_printf_float>:
 801b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b52c:	b08b      	sub	sp, #44	; 0x2c
 801b52e:	460c      	mov	r4, r1
 801b530:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b534:	4616      	mov	r6, r2
 801b536:	461f      	mov	r7, r3
 801b538:	4605      	mov	r5, r0
 801b53a:	f001 fdf9 	bl	801d130 <_localeconv_r>
 801b53e:	f8d0 b000 	ldr.w	fp, [r0]
 801b542:	4658      	mov	r0, fp
 801b544:	f7e4 fe7c 	bl	8000240 <strlen>
 801b548:	2300      	movs	r3, #0
 801b54a:	9308      	str	r3, [sp, #32]
 801b54c:	f8d8 3000 	ldr.w	r3, [r8]
 801b550:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b554:	6822      	ldr	r2, [r4, #0]
 801b556:	3307      	adds	r3, #7
 801b558:	f023 0307 	bic.w	r3, r3, #7
 801b55c:	f103 0108 	add.w	r1, r3, #8
 801b560:	f8c8 1000 	str.w	r1, [r8]
 801b564:	4682      	mov	sl, r0
 801b566:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b56a:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b56e:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b7d0 <_printf_float+0x2a8>
 801b572:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b576:	eeb0 6bc0 	vabs.f64	d6, d0
 801b57a:	eeb4 6b47 	vcmp.f64	d6, d7
 801b57e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b582:	dd24      	ble.n	801b5ce <_printf_float+0xa6>
 801b584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b58c:	d502      	bpl.n	801b594 <_printf_float+0x6c>
 801b58e:	232d      	movs	r3, #45	; 0x2d
 801b590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b594:	4b90      	ldr	r3, [pc, #576]	; (801b7d8 <_printf_float+0x2b0>)
 801b596:	4891      	ldr	r0, [pc, #580]	; (801b7dc <_printf_float+0x2b4>)
 801b598:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b59c:	bf94      	ite	ls
 801b59e:	4698      	movls	r8, r3
 801b5a0:	4680      	movhi	r8, r0
 801b5a2:	2303      	movs	r3, #3
 801b5a4:	6123      	str	r3, [r4, #16]
 801b5a6:	f022 0204 	bic.w	r2, r2, #4
 801b5aa:	2300      	movs	r3, #0
 801b5ac:	6022      	str	r2, [r4, #0]
 801b5ae:	9304      	str	r3, [sp, #16]
 801b5b0:	9700      	str	r7, [sp, #0]
 801b5b2:	4633      	mov	r3, r6
 801b5b4:	aa09      	add	r2, sp, #36	; 0x24
 801b5b6:	4621      	mov	r1, r4
 801b5b8:	4628      	mov	r0, r5
 801b5ba:	f000 f9d3 	bl	801b964 <_printf_common>
 801b5be:	3001      	adds	r0, #1
 801b5c0:	f040 808a 	bne.w	801b6d8 <_printf_float+0x1b0>
 801b5c4:	f04f 30ff 	mov.w	r0, #4294967295
 801b5c8:	b00b      	add	sp, #44	; 0x2c
 801b5ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b5ce:	eeb4 0b40 	vcmp.f64	d0, d0
 801b5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5d6:	d709      	bvc.n	801b5ec <_printf_float+0xc4>
 801b5d8:	ee10 3a90 	vmov	r3, s1
 801b5dc:	2b00      	cmp	r3, #0
 801b5de:	bfbc      	itt	lt
 801b5e0:	232d      	movlt	r3, #45	; 0x2d
 801b5e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b5e6:	487e      	ldr	r0, [pc, #504]	; (801b7e0 <_printf_float+0x2b8>)
 801b5e8:	4b7e      	ldr	r3, [pc, #504]	; (801b7e4 <_printf_float+0x2bc>)
 801b5ea:	e7d5      	b.n	801b598 <_printf_float+0x70>
 801b5ec:	6863      	ldr	r3, [r4, #4]
 801b5ee:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b5f2:	9104      	str	r1, [sp, #16]
 801b5f4:	1c59      	adds	r1, r3, #1
 801b5f6:	d13c      	bne.n	801b672 <_printf_float+0x14a>
 801b5f8:	2306      	movs	r3, #6
 801b5fa:	6063      	str	r3, [r4, #4]
 801b5fc:	2300      	movs	r3, #0
 801b5fe:	9303      	str	r3, [sp, #12]
 801b600:	ab08      	add	r3, sp, #32
 801b602:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b606:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b60a:	ab07      	add	r3, sp, #28
 801b60c:	6861      	ldr	r1, [r4, #4]
 801b60e:	9300      	str	r3, [sp, #0]
 801b610:	6022      	str	r2, [r4, #0]
 801b612:	f10d 031b 	add.w	r3, sp, #27
 801b616:	4628      	mov	r0, r5
 801b618:	f7ff fef6 	bl	801b408 <__cvt>
 801b61c:	9b04      	ldr	r3, [sp, #16]
 801b61e:	9907      	ldr	r1, [sp, #28]
 801b620:	2b47      	cmp	r3, #71	; 0x47
 801b622:	4680      	mov	r8, r0
 801b624:	d108      	bne.n	801b638 <_printf_float+0x110>
 801b626:	1cc8      	adds	r0, r1, #3
 801b628:	db02      	blt.n	801b630 <_printf_float+0x108>
 801b62a:	6863      	ldr	r3, [r4, #4]
 801b62c:	4299      	cmp	r1, r3
 801b62e:	dd41      	ble.n	801b6b4 <_printf_float+0x18c>
 801b630:	f1a9 0902 	sub.w	r9, r9, #2
 801b634:	fa5f f989 	uxtb.w	r9, r9
 801b638:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b63c:	d820      	bhi.n	801b680 <_printf_float+0x158>
 801b63e:	3901      	subs	r1, #1
 801b640:	464a      	mov	r2, r9
 801b642:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b646:	9107      	str	r1, [sp, #28]
 801b648:	f7ff ff30 	bl	801b4ac <__exponent>
 801b64c:	9a08      	ldr	r2, [sp, #32]
 801b64e:	9004      	str	r0, [sp, #16]
 801b650:	1813      	adds	r3, r2, r0
 801b652:	2a01      	cmp	r2, #1
 801b654:	6123      	str	r3, [r4, #16]
 801b656:	dc02      	bgt.n	801b65e <_printf_float+0x136>
 801b658:	6822      	ldr	r2, [r4, #0]
 801b65a:	07d2      	lsls	r2, r2, #31
 801b65c:	d501      	bpl.n	801b662 <_printf_float+0x13a>
 801b65e:	3301      	adds	r3, #1
 801b660:	6123      	str	r3, [r4, #16]
 801b662:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b666:	2b00      	cmp	r3, #0
 801b668:	d0a2      	beq.n	801b5b0 <_printf_float+0x88>
 801b66a:	232d      	movs	r3, #45	; 0x2d
 801b66c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b670:	e79e      	b.n	801b5b0 <_printf_float+0x88>
 801b672:	9904      	ldr	r1, [sp, #16]
 801b674:	2947      	cmp	r1, #71	; 0x47
 801b676:	d1c1      	bne.n	801b5fc <_printf_float+0xd4>
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d1bf      	bne.n	801b5fc <_printf_float+0xd4>
 801b67c:	2301      	movs	r3, #1
 801b67e:	e7bc      	b.n	801b5fa <_printf_float+0xd2>
 801b680:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b684:	d118      	bne.n	801b6b8 <_printf_float+0x190>
 801b686:	2900      	cmp	r1, #0
 801b688:	6863      	ldr	r3, [r4, #4]
 801b68a:	dd0b      	ble.n	801b6a4 <_printf_float+0x17c>
 801b68c:	6121      	str	r1, [r4, #16]
 801b68e:	b913      	cbnz	r3, 801b696 <_printf_float+0x16e>
 801b690:	6822      	ldr	r2, [r4, #0]
 801b692:	07d0      	lsls	r0, r2, #31
 801b694:	d502      	bpl.n	801b69c <_printf_float+0x174>
 801b696:	3301      	adds	r3, #1
 801b698:	440b      	add	r3, r1
 801b69a:	6123      	str	r3, [r4, #16]
 801b69c:	2300      	movs	r3, #0
 801b69e:	65a1      	str	r1, [r4, #88]	; 0x58
 801b6a0:	9304      	str	r3, [sp, #16]
 801b6a2:	e7de      	b.n	801b662 <_printf_float+0x13a>
 801b6a4:	b913      	cbnz	r3, 801b6ac <_printf_float+0x184>
 801b6a6:	6822      	ldr	r2, [r4, #0]
 801b6a8:	07d2      	lsls	r2, r2, #31
 801b6aa:	d501      	bpl.n	801b6b0 <_printf_float+0x188>
 801b6ac:	3302      	adds	r3, #2
 801b6ae:	e7f4      	b.n	801b69a <_printf_float+0x172>
 801b6b0:	2301      	movs	r3, #1
 801b6b2:	e7f2      	b.n	801b69a <_printf_float+0x172>
 801b6b4:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b6b8:	9b08      	ldr	r3, [sp, #32]
 801b6ba:	4299      	cmp	r1, r3
 801b6bc:	db05      	blt.n	801b6ca <_printf_float+0x1a2>
 801b6be:	6823      	ldr	r3, [r4, #0]
 801b6c0:	6121      	str	r1, [r4, #16]
 801b6c2:	07d8      	lsls	r0, r3, #31
 801b6c4:	d5ea      	bpl.n	801b69c <_printf_float+0x174>
 801b6c6:	1c4b      	adds	r3, r1, #1
 801b6c8:	e7e7      	b.n	801b69a <_printf_float+0x172>
 801b6ca:	2900      	cmp	r1, #0
 801b6cc:	bfd4      	ite	le
 801b6ce:	f1c1 0202 	rsble	r2, r1, #2
 801b6d2:	2201      	movgt	r2, #1
 801b6d4:	4413      	add	r3, r2
 801b6d6:	e7e0      	b.n	801b69a <_printf_float+0x172>
 801b6d8:	6823      	ldr	r3, [r4, #0]
 801b6da:	055a      	lsls	r2, r3, #21
 801b6dc:	d407      	bmi.n	801b6ee <_printf_float+0x1c6>
 801b6de:	6923      	ldr	r3, [r4, #16]
 801b6e0:	4642      	mov	r2, r8
 801b6e2:	4631      	mov	r1, r6
 801b6e4:	4628      	mov	r0, r5
 801b6e6:	47b8      	blx	r7
 801b6e8:	3001      	adds	r0, #1
 801b6ea:	d12a      	bne.n	801b742 <_printf_float+0x21a>
 801b6ec:	e76a      	b.n	801b5c4 <_printf_float+0x9c>
 801b6ee:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b6f2:	f240 80e2 	bls.w	801b8ba <_printf_float+0x392>
 801b6f6:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b6fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b6fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b702:	d133      	bne.n	801b76c <_printf_float+0x244>
 801b704:	4a38      	ldr	r2, [pc, #224]	; (801b7e8 <_printf_float+0x2c0>)
 801b706:	2301      	movs	r3, #1
 801b708:	4631      	mov	r1, r6
 801b70a:	4628      	mov	r0, r5
 801b70c:	47b8      	blx	r7
 801b70e:	3001      	adds	r0, #1
 801b710:	f43f af58 	beq.w	801b5c4 <_printf_float+0x9c>
 801b714:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b718:	429a      	cmp	r2, r3
 801b71a:	db02      	blt.n	801b722 <_printf_float+0x1fa>
 801b71c:	6823      	ldr	r3, [r4, #0]
 801b71e:	07d8      	lsls	r0, r3, #31
 801b720:	d50f      	bpl.n	801b742 <_printf_float+0x21a>
 801b722:	4653      	mov	r3, sl
 801b724:	465a      	mov	r2, fp
 801b726:	4631      	mov	r1, r6
 801b728:	4628      	mov	r0, r5
 801b72a:	47b8      	blx	r7
 801b72c:	3001      	adds	r0, #1
 801b72e:	f43f af49 	beq.w	801b5c4 <_printf_float+0x9c>
 801b732:	f04f 0800 	mov.w	r8, #0
 801b736:	f104 091a 	add.w	r9, r4, #26
 801b73a:	9b08      	ldr	r3, [sp, #32]
 801b73c:	3b01      	subs	r3, #1
 801b73e:	4543      	cmp	r3, r8
 801b740:	dc09      	bgt.n	801b756 <_printf_float+0x22e>
 801b742:	6823      	ldr	r3, [r4, #0]
 801b744:	079b      	lsls	r3, r3, #30
 801b746:	f100 8108 	bmi.w	801b95a <_printf_float+0x432>
 801b74a:	68e0      	ldr	r0, [r4, #12]
 801b74c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b74e:	4298      	cmp	r0, r3
 801b750:	bfb8      	it	lt
 801b752:	4618      	movlt	r0, r3
 801b754:	e738      	b.n	801b5c8 <_printf_float+0xa0>
 801b756:	2301      	movs	r3, #1
 801b758:	464a      	mov	r2, r9
 801b75a:	4631      	mov	r1, r6
 801b75c:	4628      	mov	r0, r5
 801b75e:	47b8      	blx	r7
 801b760:	3001      	adds	r0, #1
 801b762:	f43f af2f 	beq.w	801b5c4 <_printf_float+0x9c>
 801b766:	f108 0801 	add.w	r8, r8, #1
 801b76a:	e7e6      	b.n	801b73a <_printf_float+0x212>
 801b76c:	9b07      	ldr	r3, [sp, #28]
 801b76e:	2b00      	cmp	r3, #0
 801b770:	dc3c      	bgt.n	801b7ec <_printf_float+0x2c4>
 801b772:	4a1d      	ldr	r2, [pc, #116]	; (801b7e8 <_printf_float+0x2c0>)
 801b774:	2301      	movs	r3, #1
 801b776:	4631      	mov	r1, r6
 801b778:	4628      	mov	r0, r5
 801b77a:	47b8      	blx	r7
 801b77c:	3001      	adds	r0, #1
 801b77e:	f43f af21 	beq.w	801b5c4 <_printf_float+0x9c>
 801b782:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b786:	4313      	orrs	r3, r2
 801b788:	d102      	bne.n	801b790 <_printf_float+0x268>
 801b78a:	6823      	ldr	r3, [r4, #0]
 801b78c:	07d9      	lsls	r1, r3, #31
 801b78e:	d5d8      	bpl.n	801b742 <_printf_float+0x21a>
 801b790:	4653      	mov	r3, sl
 801b792:	465a      	mov	r2, fp
 801b794:	4631      	mov	r1, r6
 801b796:	4628      	mov	r0, r5
 801b798:	47b8      	blx	r7
 801b79a:	3001      	adds	r0, #1
 801b79c:	f43f af12 	beq.w	801b5c4 <_printf_float+0x9c>
 801b7a0:	f04f 0900 	mov.w	r9, #0
 801b7a4:	f104 0a1a 	add.w	sl, r4, #26
 801b7a8:	9b07      	ldr	r3, [sp, #28]
 801b7aa:	425b      	negs	r3, r3
 801b7ac:	454b      	cmp	r3, r9
 801b7ae:	dc01      	bgt.n	801b7b4 <_printf_float+0x28c>
 801b7b0:	9b08      	ldr	r3, [sp, #32]
 801b7b2:	e795      	b.n	801b6e0 <_printf_float+0x1b8>
 801b7b4:	2301      	movs	r3, #1
 801b7b6:	4652      	mov	r2, sl
 801b7b8:	4631      	mov	r1, r6
 801b7ba:	4628      	mov	r0, r5
 801b7bc:	47b8      	blx	r7
 801b7be:	3001      	adds	r0, #1
 801b7c0:	f43f af00 	beq.w	801b5c4 <_printf_float+0x9c>
 801b7c4:	f109 0901 	add.w	r9, r9, #1
 801b7c8:	e7ee      	b.n	801b7a8 <_printf_float+0x280>
 801b7ca:	bf00      	nop
 801b7cc:	f3af 8000 	nop.w
 801b7d0:	ffffffff 	.word	0xffffffff
 801b7d4:	7fefffff 	.word	0x7fefffff
 801b7d8:	08021e0c 	.word	0x08021e0c
 801b7dc:	08021e10 	.word	0x08021e10
 801b7e0:	08021e18 	.word	0x08021e18
 801b7e4:	08021e14 	.word	0x08021e14
 801b7e8:	08021e1c 	.word	0x08021e1c
 801b7ec:	9a08      	ldr	r2, [sp, #32]
 801b7ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b7f0:	429a      	cmp	r2, r3
 801b7f2:	bfa8      	it	ge
 801b7f4:	461a      	movge	r2, r3
 801b7f6:	2a00      	cmp	r2, #0
 801b7f8:	4691      	mov	r9, r2
 801b7fa:	dc38      	bgt.n	801b86e <_printf_float+0x346>
 801b7fc:	2300      	movs	r3, #0
 801b7fe:	9305      	str	r3, [sp, #20]
 801b800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b804:	f104 021a 	add.w	r2, r4, #26
 801b808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b80a:	9905      	ldr	r1, [sp, #20]
 801b80c:	9304      	str	r3, [sp, #16]
 801b80e:	eba3 0309 	sub.w	r3, r3, r9
 801b812:	428b      	cmp	r3, r1
 801b814:	dc33      	bgt.n	801b87e <_printf_float+0x356>
 801b816:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b81a:	429a      	cmp	r2, r3
 801b81c:	db3c      	blt.n	801b898 <_printf_float+0x370>
 801b81e:	6823      	ldr	r3, [r4, #0]
 801b820:	07da      	lsls	r2, r3, #31
 801b822:	d439      	bmi.n	801b898 <_printf_float+0x370>
 801b824:	9a08      	ldr	r2, [sp, #32]
 801b826:	9b04      	ldr	r3, [sp, #16]
 801b828:	9907      	ldr	r1, [sp, #28]
 801b82a:	1ad3      	subs	r3, r2, r3
 801b82c:	eba2 0901 	sub.w	r9, r2, r1
 801b830:	4599      	cmp	r9, r3
 801b832:	bfa8      	it	ge
 801b834:	4699      	movge	r9, r3
 801b836:	f1b9 0f00 	cmp.w	r9, #0
 801b83a:	dc35      	bgt.n	801b8a8 <_printf_float+0x380>
 801b83c:	f04f 0800 	mov.w	r8, #0
 801b840:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b844:	f104 0a1a 	add.w	sl, r4, #26
 801b848:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b84c:	1a9b      	subs	r3, r3, r2
 801b84e:	eba3 0309 	sub.w	r3, r3, r9
 801b852:	4543      	cmp	r3, r8
 801b854:	f77f af75 	ble.w	801b742 <_printf_float+0x21a>
 801b858:	2301      	movs	r3, #1
 801b85a:	4652      	mov	r2, sl
 801b85c:	4631      	mov	r1, r6
 801b85e:	4628      	mov	r0, r5
 801b860:	47b8      	blx	r7
 801b862:	3001      	adds	r0, #1
 801b864:	f43f aeae 	beq.w	801b5c4 <_printf_float+0x9c>
 801b868:	f108 0801 	add.w	r8, r8, #1
 801b86c:	e7ec      	b.n	801b848 <_printf_float+0x320>
 801b86e:	4613      	mov	r3, r2
 801b870:	4631      	mov	r1, r6
 801b872:	4642      	mov	r2, r8
 801b874:	4628      	mov	r0, r5
 801b876:	47b8      	blx	r7
 801b878:	3001      	adds	r0, #1
 801b87a:	d1bf      	bne.n	801b7fc <_printf_float+0x2d4>
 801b87c:	e6a2      	b.n	801b5c4 <_printf_float+0x9c>
 801b87e:	2301      	movs	r3, #1
 801b880:	4631      	mov	r1, r6
 801b882:	4628      	mov	r0, r5
 801b884:	9204      	str	r2, [sp, #16]
 801b886:	47b8      	blx	r7
 801b888:	3001      	adds	r0, #1
 801b88a:	f43f ae9b 	beq.w	801b5c4 <_printf_float+0x9c>
 801b88e:	9b05      	ldr	r3, [sp, #20]
 801b890:	9a04      	ldr	r2, [sp, #16]
 801b892:	3301      	adds	r3, #1
 801b894:	9305      	str	r3, [sp, #20]
 801b896:	e7b7      	b.n	801b808 <_printf_float+0x2e0>
 801b898:	4653      	mov	r3, sl
 801b89a:	465a      	mov	r2, fp
 801b89c:	4631      	mov	r1, r6
 801b89e:	4628      	mov	r0, r5
 801b8a0:	47b8      	blx	r7
 801b8a2:	3001      	adds	r0, #1
 801b8a4:	d1be      	bne.n	801b824 <_printf_float+0x2fc>
 801b8a6:	e68d      	b.n	801b5c4 <_printf_float+0x9c>
 801b8a8:	9a04      	ldr	r2, [sp, #16]
 801b8aa:	464b      	mov	r3, r9
 801b8ac:	4442      	add	r2, r8
 801b8ae:	4631      	mov	r1, r6
 801b8b0:	4628      	mov	r0, r5
 801b8b2:	47b8      	blx	r7
 801b8b4:	3001      	adds	r0, #1
 801b8b6:	d1c1      	bne.n	801b83c <_printf_float+0x314>
 801b8b8:	e684      	b.n	801b5c4 <_printf_float+0x9c>
 801b8ba:	9a08      	ldr	r2, [sp, #32]
 801b8bc:	2a01      	cmp	r2, #1
 801b8be:	dc01      	bgt.n	801b8c4 <_printf_float+0x39c>
 801b8c0:	07db      	lsls	r3, r3, #31
 801b8c2:	d537      	bpl.n	801b934 <_printf_float+0x40c>
 801b8c4:	2301      	movs	r3, #1
 801b8c6:	4642      	mov	r2, r8
 801b8c8:	4631      	mov	r1, r6
 801b8ca:	4628      	mov	r0, r5
 801b8cc:	47b8      	blx	r7
 801b8ce:	3001      	adds	r0, #1
 801b8d0:	f43f ae78 	beq.w	801b5c4 <_printf_float+0x9c>
 801b8d4:	4653      	mov	r3, sl
 801b8d6:	465a      	mov	r2, fp
 801b8d8:	4631      	mov	r1, r6
 801b8da:	4628      	mov	r0, r5
 801b8dc:	47b8      	blx	r7
 801b8de:	3001      	adds	r0, #1
 801b8e0:	f43f ae70 	beq.w	801b5c4 <_printf_float+0x9c>
 801b8e4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b8e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8f0:	d01b      	beq.n	801b92a <_printf_float+0x402>
 801b8f2:	9b08      	ldr	r3, [sp, #32]
 801b8f4:	f108 0201 	add.w	r2, r8, #1
 801b8f8:	3b01      	subs	r3, #1
 801b8fa:	4631      	mov	r1, r6
 801b8fc:	4628      	mov	r0, r5
 801b8fe:	47b8      	blx	r7
 801b900:	3001      	adds	r0, #1
 801b902:	d10e      	bne.n	801b922 <_printf_float+0x3fa>
 801b904:	e65e      	b.n	801b5c4 <_printf_float+0x9c>
 801b906:	2301      	movs	r3, #1
 801b908:	464a      	mov	r2, r9
 801b90a:	4631      	mov	r1, r6
 801b90c:	4628      	mov	r0, r5
 801b90e:	47b8      	blx	r7
 801b910:	3001      	adds	r0, #1
 801b912:	f43f ae57 	beq.w	801b5c4 <_printf_float+0x9c>
 801b916:	f108 0801 	add.w	r8, r8, #1
 801b91a:	9b08      	ldr	r3, [sp, #32]
 801b91c:	3b01      	subs	r3, #1
 801b91e:	4543      	cmp	r3, r8
 801b920:	dcf1      	bgt.n	801b906 <_printf_float+0x3de>
 801b922:	9b04      	ldr	r3, [sp, #16]
 801b924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b928:	e6db      	b.n	801b6e2 <_printf_float+0x1ba>
 801b92a:	f04f 0800 	mov.w	r8, #0
 801b92e:	f104 091a 	add.w	r9, r4, #26
 801b932:	e7f2      	b.n	801b91a <_printf_float+0x3f2>
 801b934:	2301      	movs	r3, #1
 801b936:	4642      	mov	r2, r8
 801b938:	e7df      	b.n	801b8fa <_printf_float+0x3d2>
 801b93a:	2301      	movs	r3, #1
 801b93c:	464a      	mov	r2, r9
 801b93e:	4631      	mov	r1, r6
 801b940:	4628      	mov	r0, r5
 801b942:	47b8      	blx	r7
 801b944:	3001      	adds	r0, #1
 801b946:	f43f ae3d 	beq.w	801b5c4 <_printf_float+0x9c>
 801b94a:	f108 0801 	add.w	r8, r8, #1
 801b94e:	68e3      	ldr	r3, [r4, #12]
 801b950:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b952:	1a5b      	subs	r3, r3, r1
 801b954:	4543      	cmp	r3, r8
 801b956:	dcf0      	bgt.n	801b93a <_printf_float+0x412>
 801b958:	e6f7      	b.n	801b74a <_printf_float+0x222>
 801b95a:	f04f 0800 	mov.w	r8, #0
 801b95e:	f104 0919 	add.w	r9, r4, #25
 801b962:	e7f4      	b.n	801b94e <_printf_float+0x426>

0801b964 <_printf_common>:
 801b964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b968:	4616      	mov	r6, r2
 801b96a:	4699      	mov	r9, r3
 801b96c:	688a      	ldr	r2, [r1, #8]
 801b96e:	690b      	ldr	r3, [r1, #16]
 801b970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b974:	4293      	cmp	r3, r2
 801b976:	bfb8      	it	lt
 801b978:	4613      	movlt	r3, r2
 801b97a:	6033      	str	r3, [r6, #0]
 801b97c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b980:	4607      	mov	r7, r0
 801b982:	460c      	mov	r4, r1
 801b984:	b10a      	cbz	r2, 801b98a <_printf_common+0x26>
 801b986:	3301      	adds	r3, #1
 801b988:	6033      	str	r3, [r6, #0]
 801b98a:	6823      	ldr	r3, [r4, #0]
 801b98c:	0699      	lsls	r1, r3, #26
 801b98e:	bf42      	ittt	mi
 801b990:	6833      	ldrmi	r3, [r6, #0]
 801b992:	3302      	addmi	r3, #2
 801b994:	6033      	strmi	r3, [r6, #0]
 801b996:	6825      	ldr	r5, [r4, #0]
 801b998:	f015 0506 	ands.w	r5, r5, #6
 801b99c:	d106      	bne.n	801b9ac <_printf_common+0x48>
 801b99e:	f104 0a19 	add.w	sl, r4, #25
 801b9a2:	68e3      	ldr	r3, [r4, #12]
 801b9a4:	6832      	ldr	r2, [r6, #0]
 801b9a6:	1a9b      	subs	r3, r3, r2
 801b9a8:	42ab      	cmp	r3, r5
 801b9aa:	dc26      	bgt.n	801b9fa <_printf_common+0x96>
 801b9ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b9b0:	1e13      	subs	r3, r2, #0
 801b9b2:	6822      	ldr	r2, [r4, #0]
 801b9b4:	bf18      	it	ne
 801b9b6:	2301      	movne	r3, #1
 801b9b8:	0692      	lsls	r2, r2, #26
 801b9ba:	d42b      	bmi.n	801ba14 <_printf_common+0xb0>
 801b9bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b9c0:	4649      	mov	r1, r9
 801b9c2:	4638      	mov	r0, r7
 801b9c4:	47c0      	blx	r8
 801b9c6:	3001      	adds	r0, #1
 801b9c8:	d01e      	beq.n	801ba08 <_printf_common+0xa4>
 801b9ca:	6823      	ldr	r3, [r4, #0]
 801b9cc:	68e5      	ldr	r5, [r4, #12]
 801b9ce:	6832      	ldr	r2, [r6, #0]
 801b9d0:	f003 0306 	and.w	r3, r3, #6
 801b9d4:	2b04      	cmp	r3, #4
 801b9d6:	bf08      	it	eq
 801b9d8:	1aad      	subeq	r5, r5, r2
 801b9da:	68a3      	ldr	r3, [r4, #8]
 801b9dc:	6922      	ldr	r2, [r4, #16]
 801b9de:	bf0c      	ite	eq
 801b9e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b9e4:	2500      	movne	r5, #0
 801b9e6:	4293      	cmp	r3, r2
 801b9e8:	bfc4      	itt	gt
 801b9ea:	1a9b      	subgt	r3, r3, r2
 801b9ec:	18ed      	addgt	r5, r5, r3
 801b9ee:	2600      	movs	r6, #0
 801b9f0:	341a      	adds	r4, #26
 801b9f2:	42b5      	cmp	r5, r6
 801b9f4:	d11a      	bne.n	801ba2c <_printf_common+0xc8>
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	e008      	b.n	801ba0c <_printf_common+0xa8>
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	4652      	mov	r2, sl
 801b9fe:	4649      	mov	r1, r9
 801ba00:	4638      	mov	r0, r7
 801ba02:	47c0      	blx	r8
 801ba04:	3001      	adds	r0, #1
 801ba06:	d103      	bne.n	801ba10 <_printf_common+0xac>
 801ba08:	f04f 30ff 	mov.w	r0, #4294967295
 801ba0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba10:	3501      	adds	r5, #1
 801ba12:	e7c6      	b.n	801b9a2 <_printf_common+0x3e>
 801ba14:	18e1      	adds	r1, r4, r3
 801ba16:	1c5a      	adds	r2, r3, #1
 801ba18:	2030      	movs	r0, #48	; 0x30
 801ba1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba1e:	4422      	add	r2, r4
 801ba20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ba24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ba28:	3302      	adds	r3, #2
 801ba2a:	e7c7      	b.n	801b9bc <_printf_common+0x58>
 801ba2c:	2301      	movs	r3, #1
 801ba2e:	4622      	mov	r2, r4
 801ba30:	4649      	mov	r1, r9
 801ba32:	4638      	mov	r0, r7
 801ba34:	47c0      	blx	r8
 801ba36:	3001      	adds	r0, #1
 801ba38:	d0e6      	beq.n	801ba08 <_printf_common+0xa4>
 801ba3a:	3601      	adds	r6, #1
 801ba3c:	e7d9      	b.n	801b9f2 <_printf_common+0x8e>
	...

0801ba40 <_printf_i>:
 801ba40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ba44:	460c      	mov	r4, r1
 801ba46:	4691      	mov	r9, r2
 801ba48:	7e27      	ldrb	r7, [r4, #24]
 801ba4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801ba4c:	2f78      	cmp	r7, #120	; 0x78
 801ba4e:	4680      	mov	r8, r0
 801ba50:	469a      	mov	sl, r3
 801ba52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba56:	d807      	bhi.n	801ba68 <_printf_i+0x28>
 801ba58:	2f62      	cmp	r7, #98	; 0x62
 801ba5a:	d80a      	bhi.n	801ba72 <_printf_i+0x32>
 801ba5c:	2f00      	cmp	r7, #0
 801ba5e:	f000 80d8 	beq.w	801bc12 <_printf_i+0x1d2>
 801ba62:	2f58      	cmp	r7, #88	; 0x58
 801ba64:	f000 80a3 	beq.w	801bbae <_printf_i+0x16e>
 801ba68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ba6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801ba70:	e03a      	b.n	801bae8 <_printf_i+0xa8>
 801ba72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801ba76:	2b15      	cmp	r3, #21
 801ba78:	d8f6      	bhi.n	801ba68 <_printf_i+0x28>
 801ba7a:	a001      	add	r0, pc, #4	; (adr r0, 801ba80 <_printf_i+0x40>)
 801ba7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801ba80:	0801bad9 	.word	0x0801bad9
 801ba84:	0801baed 	.word	0x0801baed
 801ba88:	0801ba69 	.word	0x0801ba69
 801ba8c:	0801ba69 	.word	0x0801ba69
 801ba90:	0801ba69 	.word	0x0801ba69
 801ba94:	0801ba69 	.word	0x0801ba69
 801ba98:	0801baed 	.word	0x0801baed
 801ba9c:	0801ba69 	.word	0x0801ba69
 801baa0:	0801ba69 	.word	0x0801ba69
 801baa4:	0801ba69 	.word	0x0801ba69
 801baa8:	0801ba69 	.word	0x0801ba69
 801baac:	0801bbf9 	.word	0x0801bbf9
 801bab0:	0801bb1d 	.word	0x0801bb1d
 801bab4:	0801bbdb 	.word	0x0801bbdb
 801bab8:	0801ba69 	.word	0x0801ba69
 801babc:	0801ba69 	.word	0x0801ba69
 801bac0:	0801bc1b 	.word	0x0801bc1b
 801bac4:	0801ba69 	.word	0x0801ba69
 801bac8:	0801bb1d 	.word	0x0801bb1d
 801bacc:	0801ba69 	.word	0x0801ba69
 801bad0:	0801ba69 	.word	0x0801ba69
 801bad4:	0801bbe3 	.word	0x0801bbe3
 801bad8:	680b      	ldr	r3, [r1, #0]
 801bada:	1d1a      	adds	r2, r3, #4
 801badc:	681b      	ldr	r3, [r3, #0]
 801bade:	600a      	str	r2, [r1, #0]
 801bae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bae8:	2301      	movs	r3, #1
 801baea:	e0a3      	b.n	801bc34 <_printf_i+0x1f4>
 801baec:	6825      	ldr	r5, [r4, #0]
 801baee:	6808      	ldr	r0, [r1, #0]
 801baf0:	062e      	lsls	r6, r5, #24
 801baf2:	f100 0304 	add.w	r3, r0, #4
 801baf6:	d50a      	bpl.n	801bb0e <_printf_i+0xce>
 801baf8:	6805      	ldr	r5, [r0, #0]
 801bafa:	600b      	str	r3, [r1, #0]
 801bafc:	2d00      	cmp	r5, #0
 801bafe:	da03      	bge.n	801bb08 <_printf_i+0xc8>
 801bb00:	232d      	movs	r3, #45	; 0x2d
 801bb02:	426d      	negs	r5, r5
 801bb04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb08:	485e      	ldr	r0, [pc, #376]	; (801bc84 <_printf_i+0x244>)
 801bb0a:	230a      	movs	r3, #10
 801bb0c:	e019      	b.n	801bb42 <_printf_i+0x102>
 801bb0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bb12:	6805      	ldr	r5, [r0, #0]
 801bb14:	600b      	str	r3, [r1, #0]
 801bb16:	bf18      	it	ne
 801bb18:	b22d      	sxthne	r5, r5
 801bb1a:	e7ef      	b.n	801bafc <_printf_i+0xbc>
 801bb1c:	680b      	ldr	r3, [r1, #0]
 801bb1e:	6825      	ldr	r5, [r4, #0]
 801bb20:	1d18      	adds	r0, r3, #4
 801bb22:	6008      	str	r0, [r1, #0]
 801bb24:	0628      	lsls	r0, r5, #24
 801bb26:	d501      	bpl.n	801bb2c <_printf_i+0xec>
 801bb28:	681d      	ldr	r5, [r3, #0]
 801bb2a:	e002      	b.n	801bb32 <_printf_i+0xf2>
 801bb2c:	0669      	lsls	r1, r5, #25
 801bb2e:	d5fb      	bpl.n	801bb28 <_printf_i+0xe8>
 801bb30:	881d      	ldrh	r5, [r3, #0]
 801bb32:	4854      	ldr	r0, [pc, #336]	; (801bc84 <_printf_i+0x244>)
 801bb34:	2f6f      	cmp	r7, #111	; 0x6f
 801bb36:	bf0c      	ite	eq
 801bb38:	2308      	moveq	r3, #8
 801bb3a:	230a      	movne	r3, #10
 801bb3c:	2100      	movs	r1, #0
 801bb3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bb42:	6866      	ldr	r6, [r4, #4]
 801bb44:	60a6      	str	r6, [r4, #8]
 801bb46:	2e00      	cmp	r6, #0
 801bb48:	bfa2      	ittt	ge
 801bb4a:	6821      	ldrge	r1, [r4, #0]
 801bb4c:	f021 0104 	bicge.w	r1, r1, #4
 801bb50:	6021      	strge	r1, [r4, #0]
 801bb52:	b90d      	cbnz	r5, 801bb58 <_printf_i+0x118>
 801bb54:	2e00      	cmp	r6, #0
 801bb56:	d04d      	beq.n	801bbf4 <_printf_i+0x1b4>
 801bb58:	4616      	mov	r6, r2
 801bb5a:	fbb5 f1f3 	udiv	r1, r5, r3
 801bb5e:	fb03 5711 	mls	r7, r3, r1, r5
 801bb62:	5dc7      	ldrb	r7, [r0, r7]
 801bb64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bb68:	462f      	mov	r7, r5
 801bb6a:	42bb      	cmp	r3, r7
 801bb6c:	460d      	mov	r5, r1
 801bb6e:	d9f4      	bls.n	801bb5a <_printf_i+0x11a>
 801bb70:	2b08      	cmp	r3, #8
 801bb72:	d10b      	bne.n	801bb8c <_printf_i+0x14c>
 801bb74:	6823      	ldr	r3, [r4, #0]
 801bb76:	07df      	lsls	r7, r3, #31
 801bb78:	d508      	bpl.n	801bb8c <_printf_i+0x14c>
 801bb7a:	6923      	ldr	r3, [r4, #16]
 801bb7c:	6861      	ldr	r1, [r4, #4]
 801bb7e:	4299      	cmp	r1, r3
 801bb80:	bfde      	ittt	le
 801bb82:	2330      	movle	r3, #48	; 0x30
 801bb84:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bb88:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bb8c:	1b92      	subs	r2, r2, r6
 801bb8e:	6122      	str	r2, [r4, #16]
 801bb90:	f8cd a000 	str.w	sl, [sp]
 801bb94:	464b      	mov	r3, r9
 801bb96:	aa03      	add	r2, sp, #12
 801bb98:	4621      	mov	r1, r4
 801bb9a:	4640      	mov	r0, r8
 801bb9c:	f7ff fee2 	bl	801b964 <_printf_common>
 801bba0:	3001      	adds	r0, #1
 801bba2:	d14c      	bne.n	801bc3e <_printf_i+0x1fe>
 801bba4:	f04f 30ff 	mov.w	r0, #4294967295
 801bba8:	b004      	add	sp, #16
 801bbaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bbae:	4835      	ldr	r0, [pc, #212]	; (801bc84 <_printf_i+0x244>)
 801bbb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bbb4:	6823      	ldr	r3, [r4, #0]
 801bbb6:	680e      	ldr	r6, [r1, #0]
 801bbb8:	061f      	lsls	r7, r3, #24
 801bbba:	f856 5b04 	ldr.w	r5, [r6], #4
 801bbbe:	600e      	str	r6, [r1, #0]
 801bbc0:	d514      	bpl.n	801bbec <_printf_i+0x1ac>
 801bbc2:	07d9      	lsls	r1, r3, #31
 801bbc4:	bf44      	itt	mi
 801bbc6:	f043 0320 	orrmi.w	r3, r3, #32
 801bbca:	6023      	strmi	r3, [r4, #0]
 801bbcc:	b91d      	cbnz	r5, 801bbd6 <_printf_i+0x196>
 801bbce:	6823      	ldr	r3, [r4, #0]
 801bbd0:	f023 0320 	bic.w	r3, r3, #32
 801bbd4:	6023      	str	r3, [r4, #0]
 801bbd6:	2310      	movs	r3, #16
 801bbd8:	e7b0      	b.n	801bb3c <_printf_i+0xfc>
 801bbda:	6823      	ldr	r3, [r4, #0]
 801bbdc:	f043 0320 	orr.w	r3, r3, #32
 801bbe0:	6023      	str	r3, [r4, #0]
 801bbe2:	2378      	movs	r3, #120	; 0x78
 801bbe4:	4828      	ldr	r0, [pc, #160]	; (801bc88 <_printf_i+0x248>)
 801bbe6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bbea:	e7e3      	b.n	801bbb4 <_printf_i+0x174>
 801bbec:	065e      	lsls	r6, r3, #25
 801bbee:	bf48      	it	mi
 801bbf0:	b2ad      	uxthmi	r5, r5
 801bbf2:	e7e6      	b.n	801bbc2 <_printf_i+0x182>
 801bbf4:	4616      	mov	r6, r2
 801bbf6:	e7bb      	b.n	801bb70 <_printf_i+0x130>
 801bbf8:	680b      	ldr	r3, [r1, #0]
 801bbfa:	6826      	ldr	r6, [r4, #0]
 801bbfc:	6960      	ldr	r0, [r4, #20]
 801bbfe:	1d1d      	adds	r5, r3, #4
 801bc00:	600d      	str	r5, [r1, #0]
 801bc02:	0635      	lsls	r5, r6, #24
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	d501      	bpl.n	801bc0c <_printf_i+0x1cc>
 801bc08:	6018      	str	r0, [r3, #0]
 801bc0a:	e002      	b.n	801bc12 <_printf_i+0x1d2>
 801bc0c:	0671      	lsls	r1, r6, #25
 801bc0e:	d5fb      	bpl.n	801bc08 <_printf_i+0x1c8>
 801bc10:	8018      	strh	r0, [r3, #0]
 801bc12:	2300      	movs	r3, #0
 801bc14:	6123      	str	r3, [r4, #16]
 801bc16:	4616      	mov	r6, r2
 801bc18:	e7ba      	b.n	801bb90 <_printf_i+0x150>
 801bc1a:	680b      	ldr	r3, [r1, #0]
 801bc1c:	1d1a      	adds	r2, r3, #4
 801bc1e:	600a      	str	r2, [r1, #0]
 801bc20:	681e      	ldr	r6, [r3, #0]
 801bc22:	6862      	ldr	r2, [r4, #4]
 801bc24:	2100      	movs	r1, #0
 801bc26:	4630      	mov	r0, r6
 801bc28:	f7e4 fb12 	bl	8000250 <memchr>
 801bc2c:	b108      	cbz	r0, 801bc32 <_printf_i+0x1f2>
 801bc2e:	1b80      	subs	r0, r0, r6
 801bc30:	6060      	str	r0, [r4, #4]
 801bc32:	6863      	ldr	r3, [r4, #4]
 801bc34:	6123      	str	r3, [r4, #16]
 801bc36:	2300      	movs	r3, #0
 801bc38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bc3c:	e7a8      	b.n	801bb90 <_printf_i+0x150>
 801bc3e:	6923      	ldr	r3, [r4, #16]
 801bc40:	4632      	mov	r2, r6
 801bc42:	4649      	mov	r1, r9
 801bc44:	4640      	mov	r0, r8
 801bc46:	47d0      	blx	sl
 801bc48:	3001      	adds	r0, #1
 801bc4a:	d0ab      	beq.n	801bba4 <_printf_i+0x164>
 801bc4c:	6823      	ldr	r3, [r4, #0]
 801bc4e:	079b      	lsls	r3, r3, #30
 801bc50:	d413      	bmi.n	801bc7a <_printf_i+0x23a>
 801bc52:	68e0      	ldr	r0, [r4, #12]
 801bc54:	9b03      	ldr	r3, [sp, #12]
 801bc56:	4298      	cmp	r0, r3
 801bc58:	bfb8      	it	lt
 801bc5a:	4618      	movlt	r0, r3
 801bc5c:	e7a4      	b.n	801bba8 <_printf_i+0x168>
 801bc5e:	2301      	movs	r3, #1
 801bc60:	4632      	mov	r2, r6
 801bc62:	4649      	mov	r1, r9
 801bc64:	4640      	mov	r0, r8
 801bc66:	47d0      	blx	sl
 801bc68:	3001      	adds	r0, #1
 801bc6a:	d09b      	beq.n	801bba4 <_printf_i+0x164>
 801bc6c:	3501      	adds	r5, #1
 801bc6e:	68e3      	ldr	r3, [r4, #12]
 801bc70:	9903      	ldr	r1, [sp, #12]
 801bc72:	1a5b      	subs	r3, r3, r1
 801bc74:	42ab      	cmp	r3, r5
 801bc76:	dcf2      	bgt.n	801bc5e <_printf_i+0x21e>
 801bc78:	e7eb      	b.n	801bc52 <_printf_i+0x212>
 801bc7a:	2500      	movs	r5, #0
 801bc7c:	f104 0619 	add.w	r6, r4, #25
 801bc80:	e7f5      	b.n	801bc6e <_printf_i+0x22e>
 801bc82:	bf00      	nop
 801bc84:	08021e1e 	.word	0x08021e1e
 801bc88:	08021e2f 	.word	0x08021e2f

0801bc8c <iprintf>:
 801bc8c:	b40f      	push	{r0, r1, r2, r3}
 801bc8e:	4b0a      	ldr	r3, [pc, #40]	; (801bcb8 <iprintf+0x2c>)
 801bc90:	b513      	push	{r0, r1, r4, lr}
 801bc92:	681c      	ldr	r4, [r3, #0]
 801bc94:	b124      	cbz	r4, 801bca0 <iprintf+0x14>
 801bc96:	69a3      	ldr	r3, [r4, #24]
 801bc98:	b913      	cbnz	r3, 801bca0 <iprintf+0x14>
 801bc9a:	4620      	mov	r0, r4
 801bc9c:	f001 f998 	bl	801cfd0 <__sinit>
 801bca0:	ab05      	add	r3, sp, #20
 801bca2:	9a04      	ldr	r2, [sp, #16]
 801bca4:	68a1      	ldr	r1, [r4, #8]
 801bca6:	9301      	str	r3, [sp, #4]
 801bca8:	4620      	mov	r0, r4
 801bcaa:	f001 ff17 	bl	801dadc <_vfiprintf_r>
 801bcae:	b002      	add	sp, #8
 801bcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bcb4:	b004      	add	sp, #16
 801bcb6:	4770      	bx	lr
 801bcb8:	2000001c 	.word	0x2000001c

0801bcbc <_puts_r>:
 801bcbc:	b570      	push	{r4, r5, r6, lr}
 801bcbe:	460e      	mov	r6, r1
 801bcc0:	4605      	mov	r5, r0
 801bcc2:	b118      	cbz	r0, 801bccc <_puts_r+0x10>
 801bcc4:	6983      	ldr	r3, [r0, #24]
 801bcc6:	b90b      	cbnz	r3, 801bccc <_puts_r+0x10>
 801bcc8:	f001 f982 	bl	801cfd0 <__sinit>
 801bccc:	69ab      	ldr	r3, [r5, #24]
 801bcce:	68ac      	ldr	r4, [r5, #8]
 801bcd0:	b913      	cbnz	r3, 801bcd8 <_puts_r+0x1c>
 801bcd2:	4628      	mov	r0, r5
 801bcd4:	f001 f97c 	bl	801cfd0 <__sinit>
 801bcd8:	4b2c      	ldr	r3, [pc, #176]	; (801bd8c <_puts_r+0xd0>)
 801bcda:	429c      	cmp	r4, r3
 801bcdc:	d120      	bne.n	801bd20 <_puts_r+0x64>
 801bcde:	686c      	ldr	r4, [r5, #4]
 801bce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bce2:	07db      	lsls	r3, r3, #31
 801bce4:	d405      	bmi.n	801bcf2 <_puts_r+0x36>
 801bce6:	89a3      	ldrh	r3, [r4, #12]
 801bce8:	0598      	lsls	r0, r3, #22
 801bcea:	d402      	bmi.n	801bcf2 <_puts_r+0x36>
 801bcec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bcee:	f001 fa24 	bl	801d13a <__retarget_lock_acquire_recursive>
 801bcf2:	89a3      	ldrh	r3, [r4, #12]
 801bcf4:	0719      	lsls	r1, r3, #28
 801bcf6:	d51d      	bpl.n	801bd34 <_puts_r+0x78>
 801bcf8:	6923      	ldr	r3, [r4, #16]
 801bcfa:	b1db      	cbz	r3, 801bd34 <_puts_r+0x78>
 801bcfc:	3e01      	subs	r6, #1
 801bcfe:	68a3      	ldr	r3, [r4, #8]
 801bd00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bd04:	3b01      	subs	r3, #1
 801bd06:	60a3      	str	r3, [r4, #8]
 801bd08:	bb39      	cbnz	r1, 801bd5a <_puts_r+0x9e>
 801bd0a:	2b00      	cmp	r3, #0
 801bd0c:	da38      	bge.n	801bd80 <_puts_r+0xc4>
 801bd0e:	4622      	mov	r2, r4
 801bd10:	210a      	movs	r1, #10
 801bd12:	4628      	mov	r0, r5
 801bd14:	f000 f956 	bl	801bfc4 <__swbuf_r>
 801bd18:	3001      	adds	r0, #1
 801bd1a:	d011      	beq.n	801bd40 <_puts_r+0x84>
 801bd1c:	250a      	movs	r5, #10
 801bd1e:	e011      	b.n	801bd44 <_puts_r+0x88>
 801bd20:	4b1b      	ldr	r3, [pc, #108]	; (801bd90 <_puts_r+0xd4>)
 801bd22:	429c      	cmp	r4, r3
 801bd24:	d101      	bne.n	801bd2a <_puts_r+0x6e>
 801bd26:	68ac      	ldr	r4, [r5, #8]
 801bd28:	e7da      	b.n	801bce0 <_puts_r+0x24>
 801bd2a:	4b1a      	ldr	r3, [pc, #104]	; (801bd94 <_puts_r+0xd8>)
 801bd2c:	429c      	cmp	r4, r3
 801bd2e:	bf08      	it	eq
 801bd30:	68ec      	ldreq	r4, [r5, #12]
 801bd32:	e7d5      	b.n	801bce0 <_puts_r+0x24>
 801bd34:	4621      	mov	r1, r4
 801bd36:	4628      	mov	r0, r5
 801bd38:	f000 f996 	bl	801c068 <__swsetup_r>
 801bd3c:	2800      	cmp	r0, #0
 801bd3e:	d0dd      	beq.n	801bcfc <_puts_r+0x40>
 801bd40:	f04f 35ff 	mov.w	r5, #4294967295
 801bd44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd46:	07da      	lsls	r2, r3, #31
 801bd48:	d405      	bmi.n	801bd56 <_puts_r+0x9a>
 801bd4a:	89a3      	ldrh	r3, [r4, #12]
 801bd4c:	059b      	lsls	r3, r3, #22
 801bd4e:	d402      	bmi.n	801bd56 <_puts_r+0x9a>
 801bd50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd52:	f001 f9f3 	bl	801d13c <__retarget_lock_release_recursive>
 801bd56:	4628      	mov	r0, r5
 801bd58:	bd70      	pop	{r4, r5, r6, pc}
 801bd5a:	2b00      	cmp	r3, #0
 801bd5c:	da04      	bge.n	801bd68 <_puts_r+0xac>
 801bd5e:	69a2      	ldr	r2, [r4, #24]
 801bd60:	429a      	cmp	r2, r3
 801bd62:	dc06      	bgt.n	801bd72 <_puts_r+0xb6>
 801bd64:	290a      	cmp	r1, #10
 801bd66:	d004      	beq.n	801bd72 <_puts_r+0xb6>
 801bd68:	6823      	ldr	r3, [r4, #0]
 801bd6a:	1c5a      	adds	r2, r3, #1
 801bd6c:	6022      	str	r2, [r4, #0]
 801bd6e:	7019      	strb	r1, [r3, #0]
 801bd70:	e7c5      	b.n	801bcfe <_puts_r+0x42>
 801bd72:	4622      	mov	r2, r4
 801bd74:	4628      	mov	r0, r5
 801bd76:	f000 f925 	bl	801bfc4 <__swbuf_r>
 801bd7a:	3001      	adds	r0, #1
 801bd7c:	d1bf      	bne.n	801bcfe <_puts_r+0x42>
 801bd7e:	e7df      	b.n	801bd40 <_puts_r+0x84>
 801bd80:	6823      	ldr	r3, [r4, #0]
 801bd82:	250a      	movs	r5, #10
 801bd84:	1c5a      	adds	r2, r3, #1
 801bd86:	6022      	str	r2, [r4, #0]
 801bd88:	701d      	strb	r5, [r3, #0]
 801bd8a:	e7db      	b.n	801bd44 <_puts_r+0x88>
 801bd8c:	08021f90 	.word	0x08021f90
 801bd90:	08021fb0 	.word	0x08021fb0
 801bd94:	08021f70 	.word	0x08021f70

0801bd98 <puts>:
 801bd98:	4b02      	ldr	r3, [pc, #8]	; (801bda4 <puts+0xc>)
 801bd9a:	4601      	mov	r1, r0
 801bd9c:	6818      	ldr	r0, [r3, #0]
 801bd9e:	f7ff bf8d 	b.w	801bcbc <_puts_r>
 801bda2:	bf00      	nop
 801bda4:	2000001c 	.word	0x2000001c

0801bda8 <rand>:
 801bda8:	4b17      	ldr	r3, [pc, #92]	; (801be08 <rand+0x60>)
 801bdaa:	b510      	push	{r4, lr}
 801bdac:	681c      	ldr	r4, [r3, #0]
 801bdae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801bdb0:	b9b3      	cbnz	r3, 801bde0 <rand+0x38>
 801bdb2:	2018      	movs	r0, #24
 801bdb4:	f001 fa28 	bl	801d208 <malloc>
 801bdb8:	63a0      	str	r0, [r4, #56]	; 0x38
 801bdba:	b928      	cbnz	r0, 801bdc8 <rand+0x20>
 801bdbc:	4602      	mov	r2, r0
 801bdbe:	4b13      	ldr	r3, [pc, #76]	; (801be0c <rand+0x64>)
 801bdc0:	4813      	ldr	r0, [pc, #76]	; (801be10 <rand+0x68>)
 801bdc2:	214e      	movs	r1, #78	; 0x4e
 801bdc4:	f000 f9be 	bl	801c144 <__assert_func>
 801bdc8:	4a12      	ldr	r2, [pc, #72]	; (801be14 <rand+0x6c>)
 801bdca:	4b13      	ldr	r3, [pc, #76]	; (801be18 <rand+0x70>)
 801bdcc:	e9c0 2300 	strd	r2, r3, [r0]
 801bdd0:	4b12      	ldr	r3, [pc, #72]	; (801be1c <rand+0x74>)
 801bdd2:	6083      	str	r3, [r0, #8]
 801bdd4:	230b      	movs	r3, #11
 801bdd6:	8183      	strh	r3, [r0, #12]
 801bdd8:	2201      	movs	r2, #1
 801bdda:	2300      	movs	r3, #0
 801bddc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801bde0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801bde2:	480f      	ldr	r0, [pc, #60]	; (801be20 <rand+0x78>)
 801bde4:	690a      	ldr	r2, [r1, #16]
 801bde6:	694b      	ldr	r3, [r1, #20]
 801bde8:	4c0e      	ldr	r4, [pc, #56]	; (801be24 <rand+0x7c>)
 801bdea:	4350      	muls	r0, r2
 801bdec:	fb04 0003 	mla	r0, r4, r3, r0
 801bdf0:	fba2 3404 	umull	r3, r4, r2, r4
 801bdf4:	1c5a      	adds	r2, r3, #1
 801bdf6:	4404      	add	r4, r0
 801bdf8:	f144 0000 	adc.w	r0, r4, #0
 801bdfc:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801be00:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801be04:	bd10      	pop	{r4, pc}
 801be06:	bf00      	nop
 801be08:	2000001c 	.word	0x2000001c
 801be0c:	08021e40 	.word	0x08021e40
 801be10:	08021e57 	.word	0x08021e57
 801be14:	abcd330e 	.word	0xabcd330e
 801be18:	e66d1234 	.word	0xe66d1234
 801be1c:	0005deec 	.word	0x0005deec
 801be20:	5851f42d 	.word	0x5851f42d
 801be24:	4c957f2d 	.word	0x4c957f2d

0801be28 <setbuf>:
 801be28:	2900      	cmp	r1, #0
 801be2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be2e:	bf0c      	ite	eq
 801be30:	2202      	moveq	r2, #2
 801be32:	2200      	movne	r2, #0
 801be34:	f000 b800 	b.w	801be38 <setvbuf>

0801be38 <setvbuf>:
 801be38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801be3c:	461d      	mov	r5, r3
 801be3e:	4b5d      	ldr	r3, [pc, #372]	; (801bfb4 <setvbuf+0x17c>)
 801be40:	681f      	ldr	r7, [r3, #0]
 801be42:	4604      	mov	r4, r0
 801be44:	460e      	mov	r6, r1
 801be46:	4690      	mov	r8, r2
 801be48:	b127      	cbz	r7, 801be54 <setvbuf+0x1c>
 801be4a:	69bb      	ldr	r3, [r7, #24]
 801be4c:	b913      	cbnz	r3, 801be54 <setvbuf+0x1c>
 801be4e:	4638      	mov	r0, r7
 801be50:	f001 f8be 	bl	801cfd0 <__sinit>
 801be54:	4b58      	ldr	r3, [pc, #352]	; (801bfb8 <setvbuf+0x180>)
 801be56:	429c      	cmp	r4, r3
 801be58:	d167      	bne.n	801bf2a <setvbuf+0xf2>
 801be5a:	687c      	ldr	r4, [r7, #4]
 801be5c:	f1b8 0f02 	cmp.w	r8, #2
 801be60:	d006      	beq.n	801be70 <setvbuf+0x38>
 801be62:	f1b8 0f01 	cmp.w	r8, #1
 801be66:	f200 809f 	bhi.w	801bfa8 <setvbuf+0x170>
 801be6a:	2d00      	cmp	r5, #0
 801be6c:	f2c0 809c 	blt.w	801bfa8 <setvbuf+0x170>
 801be70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801be72:	07db      	lsls	r3, r3, #31
 801be74:	d405      	bmi.n	801be82 <setvbuf+0x4a>
 801be76:	89a3      	ldrh	r3, [r4, #12]
 801be78:	0598      	lsls	r0, r3, #22
 801be7a:	d402      	bmi.n	801be82 <setvbuf+0x4a>
 801be7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801be7e:	f001 f95c 	bl	801d13a <__retarget_lock_acquire_recursive>
 801be82:	4621      	mov	r1, r4
 801be84:	4638      	mov	r0, r7
 801be86:	f001 f80f 	bl	801cea8 <_fflush_r>
 801be8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801be8c:	b141      	cbz	r1, 801bea0 <setvbuf+0x68>
 801be8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801be92:	4299      	cmp	r1, r3
 801be94:	d002      	beq.n	801be9c <setvbuf+0x64>
 801be96:	4638      	mov	r0, r7
 801be98:	f001 fd4c 	bl	801d934 <_free_r>
 801be9c:	2300      	movs	r3, #0
 801be9e:	6363      	str	r3, [r4, #52]	; 0x34
 801bea0:	2300      	movs	r3, #0
 801bea2:	61a3      	str	r3, [r4, #24]
 801bea4:	6063      	str	r3, [r4, #4]
 801bea6:	89a3      	ldrh	r3, [r4, #12]
 801bea8:	0619      	lsls	r1, r3, #24
 801beaa:	d503      	bpl.n	801beb4 <setvbuf+0x7c>
 801beac:	6921      	ldr	r1, [r4, #16]
 801beae:	4638      	mov	r0, r7
 801beb0:	f001 fd40 	bl	801d934 <_free_r>
 801beb4:	89a3      	ldrh	r3, [r4, #12]
 801beb6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801beba:	f023 0303 	bic.w	r3, r3, #3
 801bebe:	f1b8 0f02 	cmp.w	r8, #2
 801bec2:	81a3      	strh	r3, [r4, #12]
 801bec4:	d06c      	beq.n	801bfa0 <setvbuf+0x168>
 801bec6:	ab01      	add	r3, sp, #4
 801bec8:	466a      	mov	r2, sp
 801beca:	4621      	mov	r1, r4
 801becc:	4638      	mov	r0, r7
 801bece:	f001 f936 	bl	801d13e <__swhatbuf_r>
 801bed2:	89a3      	ldrh	r3, [r4, #12]
 801bed4:	4318      	orrs	r0, r3
 801bed6:	81a0      	strh	r0, [r4, #12]
 801bed8:	2d00      	cmp	r5, #0
 801beda:	d130      	bne.n	801bf3e <setvbuf+0x106>
 801bedc:	9d00      	ldr	r5, [sp, #0]
 801bede:	4628      	mov	r0, r5
 801bee0:	f001 f992 	bl	801d208 <malloc>
 801bee4:	4606      	mov	r6, r0
 801bee6:	2800      	cmp	r0, #0
 801bee8:	d155      	bne.n	801bf96 <setvbuf+0x15e>
 801beea:	f8dd 9000 	ldr.w	r9, [sp]
 801beee:	45a9      	cmp	r9, r5
 801bef0:	d14a      	bne.n	801bf88 <setvbuf+0x150>
 801bef2:	f04f 35ff 	mov.w	r5, #4294967295
 801bef6:	2200      	movs	r2, #0
 801bef8:	60a2      	str	r2, [r4, #8]
 801befa:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801befe:	6022      	str	r2, [r4, #0]
 801bf00:	6122      	str	r2, [r4, #16]
 801bf02:	2201      	movs	r2, #1
 801bf04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf08:	6162      	str	r2, [r4, #20]
 801bf0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf0c:	f043 0302 	orr.w	r3, r3, #2
 801bf10:	07d2      	lsls	r2, r2, #31
 801bf12:	81a3      	strh	r3, [r4, #12]
 801bf14:	d405      	bmi.n	801bf22 <setvbuf+0xea>
 801bf16:	f413 7f00 	tst.w	r3, #512	; 0x200
 801bf1a:	d102      	bne.n	801bf22 <setvbuf+0xea>
 801bf1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf1e:	f001 f90d 	bl	801d13c <__retarget_lock_release_recursive>
 801bf22:	4628      	mov	r0, r5
 801bf24:	b003      	add	sp, #12
 801bf26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bf2a:	4b24      	ldr	r3, [pc, #144]	; (801bfbc <setvbuf+0x184>)
 801bf2c:	429c      	cmp	r4, r3
 801bf2e:	d101      	bne.n	801bf34 <setvbuf+0xfc>
 801bf30:	68bc      	ldr	r4, [r7, #8]
 801bf32:	e793      	b.n	801be5c <setvbuf+0x24>
 801bf34:	4b22      	ldr	r3, [pc, #136]	; (801bfc0 <setvbuf+0x188>)
 801bf36:	429c      	cmp	r4, r3
 801bf38:	bf08      	it	eq
 801bf3a:	68fc      	ldreq	r4, [r7, #12]
 801bf3c:	e78e      	b.n	801be5c <setvbuf+0x24>
 801bf3e:	2e00      	cmp	r6, #0
 801bf40:	d0cd      	beq.n	801bede <setvbuf+0xa6>
 801bf42:	69bb      	ldr	r3, [r7, #24]
 801bf44:	b913      	cbnz	r3, 801bf4c <setvbuf+0x114>
 801bf46:	4638      	mov	r0, r7
 801bf48:	f001 f842 	bl	801cfd0 <__sinit>
 801bf4c:	f1b8 0f01 	cmp.w	r8, #1
 801bf50:	bf08      	it	eq
 801bf52:	89a3      	ldrheq	r3, [r4, #12]
 801bf54:	6026      	str	r6, [r4, #0]
 801bf56:	bf04      	itt	eq
 801bf58:	f043 0301 	orreq.w	r3, r3, #1
 801bf5c:	81a3      	strheq	r3, [r4, #12]
 801bf5e:	89a2      	ldrh	r2, [r4, #12]
 801bf60:	f012 0308 	ands.w	r3, r2, #8
 801bf64:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801bf68:	d01c      	beq.n	801bfa4 <setvbuf+0x16c>
 801bf6a:	07d3      	lsls	r3, r2, #31
 801bf6c:	bf41      	itttt	mi
 801bf6e:	2300      	movmi	r3, #0
 801bf70:	426d      	negmi	r5, r5
 801bf72:	60a3      	strmi	r3, [r4, #8]
 801bf74:	61a5      	strmi	r5, [r4, #24]
 801bf76:	bf58      	it	pl
 801bf78:	60a5      	strpl	r5, [r4, #8]
 801bf7a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801bf7c:	f015 0501 	ands.w	r5, r5, #1
 801bf80:	d115      	bne.n	801bfae <setvbuf+0x176>
 801bf82:	f412 7f00 	tst.w	r2, #512	; 0x200
 801bf86:	e7c8      	b.n	801bf1a <setvbuf+0xe2>
 801bf88:	4648      	mov	r0, r9
 801bf8a:	f001 f93d 	bl	801d208 <malloc>
 801bf8e:	4606      	mov	r6, r0
 801bf90:	2800      	cmp	r0, #0
 801bf92:	d0ae      	beq.n	801bef2 <setvbuf+0xba>
 801bf94:	464d      	mov	r5, r9
 801bf96:	89a3      	ldrh	r3, [r4, #12]
 801bf98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bf9c:	81a3      	strh	r3, [r4, #12]
 801bf9e:	e7d0      	b.n	801bf42 <setvbuf+0x10a>
 801bfa0:	2500      	movs	r5, #0
 801bfa2:	e7a8      	b.n	801bef6 <setvbuf+0xbe>
 801bfa4:	60a3      	str	r3, [r4, #8]
 801bfa6:	e7e8      	b.n	801bf7a <setvbuf+0x142>
 801bfa8:	f04f 35ff 	mov.w	r5, #4294967295
 801bfac:	e7b9      	b.n	801bf22 <setvbuf+0xea>
 801bfae:	2500      	movs	r5, #0
 801bfb0:	e7b7      	b.n	801bf22 <setvbuf+0xea>
 801bfb2:	bf00      	nop
 801bfb4:	2000001c 	.word	0x2000001c
 801bfb8:	08021f90 	.word	0x08021f90
 801bfbc:	08021fb0 	.word	0x08021fb0
 801bfc0:	08021f70 	.word	0x08021f70

0801bfc4 <__swbuf_r>:
 801bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bfc6:	460e      	mov	r6, r1
 801bfc8:	4614      	mov	r4, r2
 801bfca:	4605      	mov	r5, r0
 801bfcc:	b118      	cbz	r0, 801bfd6 <__swbuf_r+0x12>
 801bfce:	6983      	ldr	r3, [r0, #24]
 801bfd0:	b90b      	cbnz	r3, 801bfd6 <__swbuf_r+0x12>
 801bfd2:	f000 fffd 	bl	801cfd0 <__sinit>
 801bfd6:	4b21      	ldr	r3, [pc, #132]	; (801c05c <__swbuf_r+0x98>)
 801bfd8:	429c      	cmp	r4, r3
 801bfda:	d12b      	bne.n	801c034 <__swbuf_r+0x70>
 801bfdc:	686c      	ldr	r4, [r5, #4]
 801bfde:	69a3      	ldr	r3, [r4, #24]
 801bfe0:	60a3      	str	r3, [r4, #8]
 801bfe2:	89a3      	ldrh	r3, [r4, #12]
 801bfe4:	071a      	lsls	r2, r3, #28
 801bfe6:	d52f      	bpl.n	801c048 <__swbuf_r+0x84>
 801bfe8:	6923      	ldr	r3, [r4, #16]
 801bfea:	b36b      	cbz	r3, 801c048 <__swbuf_r+0x84>
 801bfec:	6923      	ldr	r3, [r4, #16]
 801bfee:	6820      	ldr	r0, [r4, #0]
 801bff0:	1ac0      	subs	r0, r0, r3
 801bff2:	6963      	ldr	r3, [r4, #20]
 801bff4:	b2f6      	uxtb	r6, r6
 801bff6:	4283      	cmp	r3, r0
 801bff8:	4637      	mov	r7, r6
 801bffa:	dc04      	bgt.n	801c006 <__swbuf_r+0x42>
 801bffc:	4621      	mov	r1, r4
 801bffe:	4628      	mov	r0, r5
 801c000:	f000 ff52 	bl	801cea8 <_fflush_r>
 801c004:	bb30      	cbnz	r0, 801c054 <__swbuf_r+0x90>
 801c006:	68a3      	ldr	r3, [r4, #8]
 801c008:	3b01      	subs	r3, #1
 801c00a:	60a3      	str	r3, [r4, #8]
 801c00c:	6823      	ldr	r3, [r4, #0]
 801c00e:	1c5a      	adds	r2, r3, #1
 801c010:	6022      	str	r2, [r4, #0]
 801c012:	701e      	strb	r6, [r3, #0]
 801c014:	6963      	ldr	r3, [r4, #20]
 801c016:	3001      	adds	r0, #1
 801c018:	4283      	cmp	r3, r0
 801c01a:	d004      	beq.n	801c026 <__swbuf_r+0x62>
 801c01c:	89a3      	ldrh	r3, [r4, #12]
 801c01e:	07db      	lsls	r3, r3, #31
 801c020:	d506      	bpl.n	801c030 <__swbuf_r+0x6c>
 801c022:	2e0a      	cmp	r6, #10
 801c024:	d104      	bne.n	801c030 <__swbuf_r+0x6c>
 801c026:	4621      	mov	r1, r4
 801c028:	4628      	mov	r0, r5
 801c02a:	f000 ff3d 	bl	801cea8 <_fflush_r>
 801c02e:	b988      	cbnz	r0, 801c054 <__swbuf_r+0x90>
 801c030:	4638      	mov	r0, r7
 801c032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c034:	4b0a      	ldr	r3, [pc, #40]	; (801c060 <__swbuf_r+0x9c>)
 801c036:	429c      	cmp	r4, r3
 801c038:	d101      	bne.n	801c03e <__swbuf_r+0x7a>
 801c03a:	68ac      	ldr	r4, [r5, #8]
 801c03c:	e7cf      	b.n	801bfde <__swbuf_r+0x1a>
 801c03e:	4b09      	ldr	r3, [pc, #36]	; (801c064 <__swbuf_r+0xa0>)
 801c040:	429c      	cmp	r4, r3
 801c042:	bf08      	it	eq
 801c044:	68ec      	ldreq	r4, [r5, #12]
 801c046:	e7ca      	b.n	801bfde <__swbuf_r+0x1a>
 801c048:	4621      	mov	r1, r4
 801c04a:	4628      	mov	r0, r5
 801c04c:	f000 f80c 	bl	801c068 <__swsetup_r>
 801c050:	2800      	cmp	r0, #0
 801c052:	d0cb      	beq.n	801bfec <__swbuf_r+0x28>
 801c054:	f04f 37ff 	mov.w	r7, #4294967295
 801c058:	e7ea      	b.n	801c030 <__swbuf_r+0x6c>
 801c05a:	bf00      	nop
 801c05c:	08021f90 	.word	0x08021f90
 801c060:	08021fb0 	.word	0x08021fb0
 801c064:	08021f70 	.word	0x08021f70

0801c068 <__swsetup_r>:
 801c068:	4b32      	ldr	r3, [pc, #200]	; (801c134 <__swsetup_r+0xcc>)
 801c06a:	b570      	push	{r4, r5, r6, lr}
 801c06c:	681d      	ldr	r5, [r3, #0]
 801c06e:	4606      	mov	r6, r0
 801c070:	460c      	mov	r4, r1
 801c072:	b125      	cbz	r5, 801c07e <__swsetup_r+0x16>
 801c074:	69ab      	ldr	r3, [r5, #24]
 801c076:	b913      	cbnz	r3, 801c07e <__swsetup_r+0x16>
 801c078:	4628      	mov	r0, r5
 801c07a:	f000 ffa9 	bl	801cfd0 <__sinit>
 801c07e:	4b2e      	ldr	r3, [pc, #184]	; (801c138 <__swsetup_r+0xd0>)
 801c080:	429c      	cmp	r4, r3
 801c082:	d10f      	bne.n	801c0a4 <__swsetup_r+0x3c>
 801c084:	686c      	ldr	r4, [r5, #4]
 801c086:	89a3      	ldrh	r3, [r4, #12]
 801c088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c08c:	0719      	lsls	r1, r3, #28
 801c08e:	d42c      	bmi.n	801c0ea <__swsetup_r+0x82>
 801c090:	06dd      	lsls	r5, r3, #27
 801c092:	d411      	bmi.n	801c0b8 <__swsetup_r+0x50>
 801c094:	2309      	movs	r3, #9
 801c096:	6033      	str	r3, [r6, #0]
 801c098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c09c:	81a3      	strh	r3, [r4, #12]
 801c09e:	f04f 30ff 	mov.w	r0, #4294967295
 801c0a2:	e03e      	b.n	801c122 <__swsetup_r+0xba>
 801c0a4:	4b25      	ldr	r3, [pc, #148]	; (801c13c <__swsetup_r+0xd4>)
 801c0a6:	429c      	cmp	r4, r3
 801c0a8:	d101      	bne.n	801c0ae <__swsetup_r+0x46>
 801c0aa:	68ac      	ldr	r4, [r5, #8]
 801c0ac:	e7eb      	b.n	801c086 <__swsetup_r+0x1e>
 801c0ae:	4b24      	ldr	r3, [pc, #144]	; (801c140 <__swsetup_r+0xd8>)
 801c0b0:	429c      	cmp	r4, r3
 801c0b2:	bf08      	it	eq
 801c0b4:	68ec      	ldreq	r4, [r5, #12]
 801c0b6:	e7e6      	b.n	801c086 <__swsetup_r+0x1e>
 801c0b8:	0758      	lsls	r0, r3, #29
 801c0ba:	d512      	bpl.n	801c0e2 <__swsetup_r+0x7a>
 801c0bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c0be:	b141      	cbz	r1, 801c0d2 <__swsetup_r+0x6a>
 801c0c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c0c4:	4299      	cmp	r1, r3
 801c0c6:	d002      	beq.n	801c0ce <__swsetup_r+0x66>
 801c0c8:	4630      	mov	r0, r6
 801c0ca:	f001 fc33 	bl	801d934 <_free_r>
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	6363      	str	r3, [r4, #52]	; 0x34
 801c0d2:	89a3      	ldrh	r3, [r4, #12]
 801c0d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c0d8:	81a3      	strh	r3, [r4, #12]
 801c0da:	2300      	movs	r3, #0
 801c0dc:	6063      	str	r3, [r4, #4]
 801c0de:	6923      	ldr	r3, [r4, #16]
 801c0e0:	6023      	str	r3, [r4, #0]
 801c0e2:	89a3      	ldrh	r3, [r4, #12]
 801c0e4:	f043 0308 	orr.w	r3, r3, #8
 801c0e8:	81a3      	strh	r3, [r4, #12]
 801c0ea:	6923      	ldr	r3, [r4, #16]
 801c0ec:	b94b      	cbnz	r3, 801c102 <__swsetup_r+0x9a>
 801c0ee:	89a3      	ldrh	r3, [r4, #12]
 801c0f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c0f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c0f8:	d003      	beq.n	801c102 <__swsetup_r+0x9a>
 801c0fa:	4621      	mov	r1, r4
 801c0fc:	4630      	mov	r0, r6
 801c0fe:	f001 f843 	bl	801d188 <__smakebuf_r>
 801c102:	89a0      	ldrh	r0, [r4, #12]
 801c104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c108:	f010 0301 	ands.w	r3, r0, #1
 801c10c:	d00a      	beq.n	801c124 <__swsetup_r+0xbc>
 801c10e:	2300      	movs	r3, #0
 801c110:	60a3      	str	r3, [r4, #8]
 801c112:	6963      	ldr	r3, [r4, #20]
 801c114:	425b      	negs	r3, r3
 801c116:	61a3      	str	r3, [r4, #24]
 801c118:	6923      	ldr	r3, [r4, #16]
 801c11a:	b943      	cbnz	r3, 801c12e <__swsetup_r+0xc6>
 801c11c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c120:	d1ba      	bne.n	801c098 <__swsetup_r+0x30>
 801c122:	bd70      	pop	{r4, r5, r6, pc}
 801c124:	0781      	lsls	r1, r0, #30
 801c126:	bf58      	it	pl
 801c128:	6963      	ldrpl	r3, [r4, #20]
 801c12a:	60a3      	str	r3, [r4, #8]
 801c12c:	e7f4      	b.n	801c118 <__swsetup_r+0xb0>
 801c12e:	2000      	movs	r0, #0
 801c130:	e7f7      	b.n	801c122 <__swsetup_r+0xba>
 801c132:	bf00      	nop
 801c134:	2000001c 	.word	0x2000001c
 801c138:	08021f90 	.word	0x08021f90
 801c13c:	08021fb0 	.word	0x08021fb0
 801c140:	08021f70 	.word	0x08021f70

0801c144 <__assert_func>:
 801c144:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c146:	4614      	mov	r4, r2
 801c148:	461a      	mov	r2, r3
 801c14a:	4b09      	ldr	r3, [pc, #36]	; (801c170 <__assert_func+0x2c>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	4605      	mov	r5, r0
 801c150:	68d8      	ldr	r0, [r3, #12]
 801c152:	b14c      	cbz	r4, 801c168 <__assert_func+0x24>
 801c154:	4b07      	ldr	r3, [pc, #28]	; (801c174 <__assert_func+0x30>)
 801c156:	9100      	str	r1, [sp, #0]
 801c158:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c15c:	4906      	ldr	r1, [pc, #24]	; (801c178 <__assert_func+0x34>)
 801c15e:	462b      	mov	r3, r5
 801c160:	f000 ffb4 	bl	801d0cc <fiprintf>
 801c164:	f001 fe50 	bl	801de08 <abort>
 801c168:	4b04      	ldr	r3, [pc, #16]	; (801c17c <__assert_func+0x38>)
 801c16a:	461c      	mov	r4, r3
 801c16c:	e7f3      	b.n	801c156 <__assert_func+0x12>
 801c16e:	bf00      	nop
 801c170:	2000001c 	.word	0x2000001c
 801c174:	08021eb6 	.word	0x08021eb6
 801c178:	08021ec3 	.word	0x08021ec3
 801c17c:	08021ef1 	.word	0x08021ef1

0801c180 <quorem>:
 801c180:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c184:	6903      	ldr	r3, [r0, #16]
 801c186:	690c      	ldr	r4, [r1, #16]
 801c188:	42a3      	cmp	r3, r4
 801c18a:	4607      	mov	r7, r0
 801c18c:	f2c0 8081 	blt.w	801c292 <quorem+0x112>
 801c190:	3c01      	subs	r4, #1
 801c192:	f101 0814 	add.w	r8, r1, #20
 801c196:	f100 0514 	add.w	r5, r0, #20
 801c19a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c19e:	9301      	str	r3, [sp, #4]
 801c1a0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c1a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c1a8:	3301      	adds	r3, #1
 801c1aa:	429a      	cmp	r2, r3
 801c1ac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c1b0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c1b4:	fbb2 f6f3 	udiv	r6, r2, r3
 801c1b8:	d331      	bcc.n	801c21e <quorem+0x9e>
 801c1ba:	f04f 0e00 	mov.w	lr, #0
 801c1be:	4640      	mov	r0, r8
 801c1c0:	46ac      	mov	ip, r5
 801c1c2:	46f2      	mov	sl, lr
 801c1c4:	f850 2b04 	ldr.w	r2, [r0], #4
 801c1c8:	b293      	uxth	r3, r2
 801c1ca:	fb06 e303 	mla	r3, r6, r3, lr
 801c1ce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c1d2:	b29b      	uxth	r3, r3
 801c1d4:	ebaa 0303 	sub.w	r3, sl, r3
 801c1d8:	0c12      	lsrs	r2, r2, #16
 801c1da:	f8dc a000 	ldr.w	sl, [ip]
 801c1de:	fb06 e202 	mla	r2, r6, r2, lr
 801c1e2:	fa13 f38a 	uxtah	r3, r3, sl
 801c1e6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c1ea:	fa1f fa82 	uxth.w	sl, r2
 801c1ee:	f8dc 2000 	ldr.w	r2, [ip]
 801c1f2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c1f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c1fa:	b29b      	uxth	r3, r3
 801c1fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c200:	4581      	cmp	r9, r0
 801c202:	f84c 3b04 	str.w	r3, [ip], #4
 801c206:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c20a:	d2db      	bcs.n	801c1c4 <quorem+0x44>
 801c20c:	f855 300b 	ldr.w	r3, [r5, fp]
 801c210:	b92b      	cbnz	r3, 801c21e <quorem+0x9e>
 801c212:	9b01      	ldr	r3, [sp, #4]
 801c214:	3b04      	subs	r3, #4
 801c216:	429d      	cmp	r5, r3
 801c218:	461a      	mov	r2, r3
 801c21a:	d32e      	bcc.n	801c27a <quorem+0xfa>
 801c21c:	613c      	str	r4, [r7, #16]
 801c21e:	4638      	mov	r0, r7
 801c220:	f001 fa78 	bl	801d714 <__mcmp>
 801c224:	2800      	cmp	r0, #0
 801c226:	db24      	blt.n	801c272 <quorem+0xf2>
 801c228:	3601      	adds	r6, #1
 801c22a:	4628      	mov	r0, r5
 801c22c:	f04f 0c00 	mov.w	ip, #0
 801c230:	f858 2b04 	ldr.w	r2, [r8], #4
 801c234:	f8d0 e000 	ldr.w	lr, [r0]
 801c238:	b293      	uxth	r3, r2
 801c23a:	ebac 0303 	sub.w	r3, ip, r3
 801c23e:	0c12      	lsrs	r2, r2, #16
 801c240:	fa13 f38e 	uxtah	r3, r3, lr
 801c244:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c248:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c24c:	b29b      	uxth	r3, r3
 801c24e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c252:	45c1      	cmp	r9, r8
 801c254:	f840 3b04 	str.w	r3, [r0], #4
 801c258:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c25c:	d2e8      	bcs.n	801c230 <quorem+0xb0>
 801c25e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c266:	b922      	cbnz	r2, 801c272 <quorem+0xf2>
 801c268:	3b04      	subs	r3, #4
 801c26a:	429d      	cmp	r5, r3
 801c26c:	461a      	mov	r2, r3
 801c26e:	d30a      	bcc.n	801c286 <quorem+0x106>
 801c270:	613c      	str	r4, [r7, #16]
 801c272:	4630      	mov	r0, r6
 801c274:	b003      	add	sp, #12
 801c276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c27a:	6812      	ldr	r2, [r2, #0]
 801c27c:	3b04      	subs	r3, #4
 801c27e:	2a00      	cmp	r2, #0
 801c280:	d1cc      	bne.n	801c21c <quorem+0x9c>
 801c282:	3c01      	subs	r4, #1
 801c284:	e7c7      	b.n	801c216 <quorem+0x96>
 801c286:	6812      	ldr	r2, [r2, #0]
 801c288:	3b04      	subs	r3, #4
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	d1f0      	bne.n	801c270 <quorem+0xf0>
 801c28e:	3c01      	subs	r4, #1
 801c290:	e7eb      	b.n	801c26a <quorem+0xea>
 801c292:	2000      	movs	r0, #0
 801c294:	e7ee      	b.n	801c274 <quorem+0xf4>
	...

0801c298 <_dtoa_r>:
 801c298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c29c:	ec59 8b10 	vmov	r8, r9, d0
 801c2a0:	b095      	sub	sp, #84	; 0x54
 801c2a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c2a4:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c2a6:	9107      	str	r1, [sp, #28]
 801c2a8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801c2ac:	4606      	mov	r6, r0
 801c2ae:	9209      	str	r2, [sp, #36]	; 0x24
 801c2b0:	9310      	str	r3, [sp, #64]	; 0x40
 801c2b2:	b975      	cbnz	r5, 801c2d2 <_dtoa_r+0x3a>
 801c2b4:	2010      	movs	r0, #16
 801c2b6:	f000 ffa7 	bl	801d208 <malloc>
 801c2ba:	4602      	mov	r2, r0
 801c2bc:	6270      	str	r0, [r6, #36]	; 0x24
 801c2be:	b920      	cbnz	r0, 801c2ca <_dtoa_r+0x32>
 801c2c0:	4bab      	ldr	r3, [pc, #684]	; (801c570 <_dtoa_r+0x2d8>)
 801c2c2:	21ea      	movs	r1, #234	; 0xea
 801c2c4:	48ab      	ldr	r0, [pc, #684]	; (801c574 <_dtoa_r+0x2dc>)
 801c2c6:	f7ff ff3d 	bl	801c144 <__assert_func>
 801c2ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c2ce:	6005      	str	r5, [r0, #0]
 801c2d0:	60c5      	str	r5, [r0, #12]
 801c2d2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c2d4:	6819      	ldr	r1, [r3, #0]
 801c2d6:	b151      	cbz	r1, 801c2ee <_dtoa_r+0x56>
 801c2d8:	685a      	ldr	r2, [r3, #4]
 801c2da:	604a      	str	r2, [r1, #4]
 801c2dc:	2301      	movs	r3, #1
 801c2de:	4093      	lsls	r3, r2
 801c2e0:	608b      	str	r3, [r1, #8]
 801c2e2:	4630      	mov	r0, r6
 801c2e4:	f000 ffd8 	bl	801d298 <_Bfree>
 801c2e8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c2ea:	2200      	movs	r2, #0
 801c2ec:	601a      	str	r2, [r3, #0]
 801c2ee:	f1b9 0300 	subs.w	r3, r9, #0
 801c2f2:	bfbb      	ittet	lt
 801c2f4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c2f8:	9303      	strlt	r3, [sp, #12]
 801c2fa:	2300      	movge	r3, #0
 801c2fc:	2201      	movlt	r2, #1
 801c2fe:	bfac      	ite	ge
 801c300:	6023      	strge	r3, [r4, #0]
 801c302:	6022      	strlt	r2, [r4, #0]
 801c304:	4b9c      	ldr	r3, [pc, #624]	; (801c578 <_dtoa_r+0x2e0>)
 801c306:	9c03      	ldr	r4, [sp, #12]
 801c308:	43a3      	bics	r3, r4
 801c30a:	d11a      	bne.n	801c342 <_dtoa_r+0xaa>
 801c30c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c30e:	f242 730f 	movw	r3, #9999	; 0x270f
 801c312:	6013      	str	r3, [r2, #0]
 801c314:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c318:	ea53 0308 	orrs.w	r3, r3, r8
 801c31c:	f000 8512 	beq.w	801cd44 <_dtoa_r+0xaac>
 801c320:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c322:	b953      	cbnz	r3, 801c33a <_dtoa_r+0xa2>
 801c324:	4b95      	ldr	r3, [pc, #596]	; (801c57c <_dtoa_r+0x2e4>)
 801c326:	e01f      	b.n	801c368 <_dtoa_r+0xd0>
 801c328:	4b95      	ldr	r3, [pc, #596]	; (801c580 <_dtoa_r+0x2e8>)
 801c32a:	9300      	str	r3, [sp, #0]
 801c32c:	3308      	adds	r3, #8
 801c32e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c330:	6013      	str	r3, [r2, #0]
 801c332:	9800      	ldr	r0, [sp, #0]
 801c334:	b015      	add	sp, #84	; 0x54
 801c336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c33a:	4b90      	ldr	r3, [pc, #576]	; (801c57c <_dtoa_r+0x2e4>)
 801c33c:	9300      	str	r3, [sp, #0]
 801c33e:	3303      	adds	r3, #3
 801c340:	e7f5      	b.n	801c32e <_dtoa_r+0x96>
 801c342:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c346:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c34e:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c352:	d10b      	bne.n	801c36c <_dtoa_r+0xd4>
 801c354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c356:	2301      	movs	r3, #1
 801c358:	6013      	str	r3, [r2, #0]
 801c35a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	f000 84ee 	beq.w	801cd3e <_dtoa_r+0xaa6>
 801c362:	4888      	ldr	r0, [pc, #544]	; (801c584 <_dtoa_r+0x2ec>)
 801c364:	6018      	str	r0, [r3, #0]
 801c366:	1e43      	subs	r3, r0, #1
 801c368:	9300      	str	r3, [sp, #0]
 801c36a:	e7e2      	b.n	801c332 <_dtoa_r+0x9a>
 801c36c:	a913      	add	r1, sp, #76	; 0x4c
 801c36e:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c372:	aa12      	add	r2, sp, #72	; 0x48
 801c374:	4630      	mov	r0, r6
 801c376:	f001 fa71 	bl	801d85c <__d2b>
 801c37a:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c37e:	4605      	mov	r5, r0
 801c380:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c382:	2900      	cmp	r1, #0
 801c384:	d047      	beq.n	801c416 <_dtoa_r+0x17e>
 801c386:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c388:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c38c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c390:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c394:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c398:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c39c:	2400      	movs	r4, #0
 801c39e:	ec43 2b16 	vmov	d6, r2, r3
 801c3a2:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c3a6:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801c558 <_dtoa_r+0x2c0>
 801c3aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c3ae:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801c560 <_dtoa_r+0x2c8>
 801c3b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c3b6:	eeb0 7b46 	vmov.f64	d7, d6
 801c3ba:	ee06 1a90 	vmov	s13, r1
 801c3be:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801c3c2:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801c568 <_dtoa_r+0x2d0>
 801c3c6:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c3ca:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c3ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3d6:	ee16 ba90 	vmov	fp, s13
 801c3da:	9411      	str	r4, [sp, #68]	; 0x44
 801c3dc:	d508      	bpl.n	801c3f0 <_dtoa_r+0x158>
 801c3de:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c3e2:	eeb4 6b47 	vcmp.f64	d6, d7
 801c3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ea:	bf18      	it	ne
 801c3ec:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c3f0:	f1bb 0f16 	cmp.w	fp, #22
 801c3f4:	d832      	bhi.n	801c45c <_dtoa_r+0x1c4>
 801c3f6:	4b64      	ldr	r3, [pc, #400]	; (801c588 <_dtoa_r+0x2f0>)
 801c3f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c3fc:	ed93 7b00 	vldr	d7, [r3]
 801c400:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c404:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c40c:	d501      	bpl.n	801c412 <_dtoa_r+0x17a>
 801c40e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c412:	2300      	movs	r3, #0
 801c414:	e023      	b.n	801c45e <_dtoa_r+0x1c6>
 801c416:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c418:	4401      	add	r1, r0
 801c41a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801c41e:	2b20      	cmp	r3, #32
 801c420:	bfc3      	ittte	gt
 801c422:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c426:	fa04 f303 	lslgt.w	r3, r4, r3
 801c42a:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801c42e:	f1c3 0320 	rsble	r3, r3, #32
 801c432:	bfc6      	itte	gt
 801c434:	fa28 f804 	lsrgt.w	r8, r8, r4
 801c438:	ea43 0308 	orrgt.w	r3, r3, r8
 801c43c:	fa08 f303 	lslle.w	r3, r8, r3
 801c440:	ee07 3a90 	vmov	s15, r3
 801c444:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c448:	3901      	subs	r1, #1
 801c44a:	ed8d 7b00 	vstr	d7, [sp]
 801c44e:	9c01      	ldr	r4, [sp, #4]
 801c450:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c454:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801c458:	2401      	movs	r4, #1
 801c45a:	e7a0      	b.n	801c39e <_dtoa_r+0x106>
 801c45c:	2301      	movs	r3, #1
 801c45e:	930f      	str	r3, [sp, #60]	; 0x3c
 801c460:	1a43      	subs	r3, r0, r1
 801c462:	1e5a      	subs	r2, r3, #1
 801c464:	bf45      	ittet	mi
 801c466:	f1c3 0301 	rsbmi	r3, r3, #1
 801c46a:	9305      	strmi	r3, [sp, #20]
 801c46c:	2300      	movpl	r3, #0
 801c46e:	2300      	movmi	r3, #0
 801c470:	9206      	str	r2, [sp, #24]
 801c472:	bf54      	ite	pl
 801c474:	9305      	strpl	r3, [sp, #20]
 801c476:	9306      	strmi	r3, [sp, #24]
 801c478:	f1bb 0f00 	cmp.w	fp, #0
 801c47c:	db18      	blt.n	801c4b0 <_dtoa_r+0x218>
 801c47e:	9b06      	ldr	r3, [sp, #24]
 801c480:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c484:	445b      	add	r3, fp
 801c486:	9306      	str	r3, [sp, #24]
 801c488:	2300      	movs	r3, #0
 801c48a:	9a07      	ldr	r2, [sp, #28]
 801c48c:	2a09      	cmp	r2, #9
 801c48e:	d849      	bhi.n	801c524 <_dtoa_r+0x28c>
 801c490:	2a05      	cmp	r2, #5
 801c492:	bfc4      	itt	gt
 801c494:	3a04      	subgt	r2, #4
 801c496:	9207      	strgt	r2, [sp, #28]
 801c498:	9a07      	ldr	r2, [sp, #28]
 801c49a:	f1a2 0202 	sub.w	r2, r2, #2
 801c49e:	bfcc      	ite	gt
 801c4a0:	2400      	movgt	r4, #0
 801c4a2:	2401      	movle	r4, #1
 801c4a4:	2a03      	cmp	r2, #3
 801c4a6:	d848      	bhi.n	801c53a <_dtoa_r+0x2a2>
 801c4a8:	e8df f002 	tbb	[pc, r2]
 801c4ac:	3a2c2e0b 	.word	0x3a2c2e0b
 801c4b0:	9b05      	ldr	r3, [sp, #20]
 801c4b2:	2200      	movs	r2, #0
 801c4b4:	eba3 030b 	sub.w	r3, r3, fp
 801c4b8:	9305      	str	r3, [sp, #20]
 801c4ba:	920e      	str	r2, [sp, #56]	; 0x38
 801c4bc:	f1cb 0300 	rsb	r3, fp, #0
 801c4c0:	e7e3      	b.n	801c48a <_dtoa_r+0x1f2>
 801c4c2:	2200      	movs	r2, #0
 801c4c4:	9208      	str	r2, [sp, #32]
 801c4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c4c8:	2a00      	cmp	r2, #0
 801c4ca:	dc39      	bgt.n	801c540 <_dtoa_r+0x2a8>
 801c4cc:	f04f 0a01 	mov.w	sl, #1
 801c4d0:	46d1      	mov	r9, sl
 801c4d2:	4652      	mov	r2, sl
 801c4d4:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c4d8:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801c4da:	2100      	movs	r1, #0
 801c4dc:	6079      	str	r1, [r7, #4]
 801c4de:	2004      	movs	r0, #4
 801c4e0:	f100 0c14 	add.w	ip, r0, #20
 801c4e4:	4594      	cmp	ip, r2
 801c4e6:	6879      	ldr	r1, [r7, #4]
 801c4e8:	d92f      	bls.n	801c54a <_dtoa_r+0x2b2>
 801c4ea:	4630      	mov	r0, r6
 801c4ec:	930c      	str	r3, [sp, #48]	; 0x30
 801c4ee:	f000 fe93 	bl	801d218 <_Balloc>
 801c4f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c4f4:	9000      	str	r0, [sp, #0]
 801c4f6:	4602      	mov	r2, r0
 801c4f8:	2800      	cmp	r0, #0
 801c4fa:	d149      	bne.n	801c590 <_dtoa_r+0x2f8>
 801c4fc:	4b23      	ldr	r3, [pc, #140]	; (801c58c <_dtoa_r+0x2f4>)
 801c4fe:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c502:	e6df      	b.n	801c2c4 <_dtoa_r+0x2c>
 801c504:	2201      	movs	r2, #1
 801c506:	e7dd      	b.n	801c4c4 <_dtoa_r+0x22c>
 801c508:	2200      	movs	r2, #0
 801c50a:	9208      	str	r2, [sp, #32]
 801c50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c50e:	eb0b 0a02 	add.w	sl, fp, r2
 801c512:	f10a 0901 	add.w	r9, sl, #1
 801c516:	464a      	mov	r2, r9
 801c518:	2a01      	cmp	r2, #1
 801c51a:	bfb8      	it	lt
 801c51c:	2201      	movlt	r2, #1
 801c51e:	e7db      	b.n	801c4d8 <_dtoa_r+0x240>
 801c520:	2201      	movs	r2, #1
 801c522:	e7f2      	b.n	801c50a <_dtoa_r+0x272>
 801c524:	2401      	movs	r4, #1
 801c526:	2200      	movs	r2, #0
 801c528:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801c52c:	f04f 3aff 	mov.w	sl, #4294967295
 801c530:	2100      	movs	r1, #0
 801c532:	46d1      	mov	r9, sl
 801c534:	2212      	movs	r2, #18
 801c536:	9109      	str	r1, [sp, #36]	; 0x24
 801c538:	e7ce      	b.n	801c4d8 <_dtoa_r+0x240>
 801c53a:	2201      	movs	r2, #1
 801c53c:	9208      	str	r2, [sp, #32]
 801c53e:	e7f5      	b.n	801c52c <_dtoa_r+0x294>
 801c540:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801c544:	46d1      	mov	r9, sl
 801c546:	4652      	mov	r2, sl
 801c548:	e7c6      	b.n	801c4d8 <_dtoa_r+0x240>
 801c54a:	3101      	adds	r1, #1
 801c54c:	6079      	str	r1, [r7, #4]
 801c54e:	0040      	lsls	r0, r0, #1
 801c550:	e7c6      	b.n	801c4e0 <_dtoa_r+0x248>
 801c552:	bf00      	nop
 801c554:	f3af 8000 	nop.w
 801c558:	636f4361 	.word	0x636f4361
 801c55c:	3fd287a7 	.word	0x3fd287a7
 801c560:	8b60c8b3 	.word	0x8b60c8b3
 801c564:	3fc68a28 	.word	0x3fc68a28
 801c568:	509f79fb 	.word	0x509f79fb
 801c56c:	3fd34413 	.word	0x3fd34413
 801c570:	08021e40 	.word	0x08021e40
 801c574:	08021eff 	.word	0x08021eff
 801c578:	7ff00000 	.word	0x7ff00000
 801c57c:	08021efb 	.word	0x08021efb
 801c580:	08021ef2 	.word	0x08021ef2
 801c584:	08021e1d 	.word	0x08021e1d
 801c588:	08022058 	.word	0x08022058
 801c58c:	08021f5e 	.word	0x08021f5e
 801c590:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801c592:	9900      	ldr	r1, [sp, #0]
 801c594:	6011      	str	r1, [r2, #0]
 801c596:	f1b9 0f0e 	cmp.w	r9, #14
 801c59a:	d872      	bhi.n	801c682 <_dtoa_r+0x3ea>
 801c59c:	2c00      	cmp	r4, #0
 801c59e:	d070      	beq.n	801c682 <_dtoa_r+0x3ea>
 801c5a0:	f1bb 0f00 	cmp.w	fp, #0
 801c5a4:	f340 80a6 	ble.w	801c6f4 <_dtoa_r+0x45c>
 801c5a8:	49ca      	ldr	r1, [pc, #808]	; (801c8d4 <_dtoa_r+0x63c>)
 801c5aa:	f00b 020f 	and.w	r2, fp, #15
 801c5ae:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801c5b2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c5b6:	ed92 7b00 	vldr	d7, [r2]
 801c5ba:	ea4f 112b 	mov.w	r1, fp, asr #4
 801c5be:	f000 808d 	beq.w	801c6dc <_dtoa_r+0x444>
 801c5c2:	4ac5      	ldr	r2, [pc, #788]	; (801c8d8 <_dtoa_r+0x640>)
 801c5c4:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801c5c8:	ed92 6b08 	vldr	d6, [r2, #32]
 801c5cc:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801c5d0:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c5d4:	f001 010f 	and.w	r1, r1, #15
 801c5d8:	2203      	movs	r2, #3
 801c5da:	48bf      	ldr	r0, [pc, #764]	; (801c8d8 <_dtoa_r+0x640>)
 801c5dc:	2900      	cmp	r1, #0
 801c5de:	d17f      	bne.n	801c6e0 <_dtoa_r+0x448>
 801c5e0:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c5e4:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c5e8:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c5ec:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c5ee:	2900      	cmp	r1, #0
 801c5f0:	f000 80b2 	beq.w	801c758 <_dtoa_r+0x4c0>
 801c5f4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c5f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c5fc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c604:	f140 80a8 	bpl.w	801c758 <_dtoa_r+0x4c0>
 801c608:	f1b9 0f00 	cmp.w	r9, #0
 801c60c:	f000 80a4 	beq.w	801c758 <_dtoa_r+0x4c0>
 801c610:	f1ba 0f00 	cmp.w	sl, #0
 801c614:	dd31      	ble.n	801c67a <_dtoa_r+0x3e2>
 801c616:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c61a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c61e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c622:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c626:	3201      	adds	r2, #1
 801c628:	4650      	mov	r0, sl
 801c62a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c62e:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c632:	ee07 2a90 	vmov	s15, r2
 801c636:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c63a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c63e:	ed8d 5b02 	vstr	d5, [sp, #8]
 801c642:	9c03      	ldr	r4, [sp, #12]
 801c644:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c648:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801c64c:	2800      	cmp	r0, #0
 801c64e:	f040 8086 	bne.w	801c75e <_dtoa_r+0x4c6>
 801c652:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c656:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c65a:	ec42 1b17 	vmov	d7, r1, r2
 801c65e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c666:	f300 8272 	bgt.w	801cb4e <_dtoa_r+0x8b6>
 801c66a:	eeb1 7b47 	vneg.f64	d7, d7
 801c66e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c676:	f100 8267 	bmi.w	801cb48 <_dtoa_r+0x8b0>
 801c67a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c67e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c682:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c684:	2a00      	cmp	r2, #0
 801c686:	f2c0 8129 	blt.w	801c8dc <_dtoa_r+0x644>
 801c68a:	f1bb 0f0e 	cmp.w	fp, #14
 801c68e:	f300 8125 	bgt.w	801c8dc <_dtoa_r+0x644>
 801c692:	4b90      	ldr	r3, [pc, #576]	; (801c8d4 <_dtoa_r+0x63c>)
 801c694:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c698:	ed93 6b00 	vldr	d6, [r3]
 801c69c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	f280 80c3 	bge.w	801c82a <_dtoa_r+0x592>
 801c6a4:	f1b9 0f00 	cmp.w	r9, #0
 801c6a8:	f300 80bf 	bgt.w	801c82a <_dtoa_r+0x592>
 801c6ac:	f040 824c 	bne.w	801cb48 <_dtoa_r+0x8b0>
 801c6b0:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c6b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c6b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c6bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c6c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6c4:	464c      	mov	r4, r9
 801c6c6:	464f      	mov	r7, r9
 801c6c8:	f280 8222 	bge.w	801cb10 <_dtoa_r+0x878>
 801c6cc:	f8dd 8000 	ldr.w	r8, [sp]
 801c6d0:	2331      	movs	r3, #49	; 0x31
 801c6d2:	f808 3b01 	strb.w	r3, [r8], #1
 801c6d6:	f10b 0b01 	add.w	fp, fp, #1
 801c6da:	e21e      	b.n	801cb1a <_dtoa_r+0x882>
 801c6dc:	2202      	movs	r2, #2
 801c6de:	e77c      	b.n	801c5da <_dtoa_r+0x342>
 801c6e0:	07cc      	lsls	r4, r1, #31
 801c6e2:	d504      	bpl.n	801c6ee <_dtoa_r+0x456>
 801c6e4:	ed90 6b00 	vldr	d6, [r0]
 801c6e8:	3201      	adds	r2, #1
 801c6ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6ee:	1049      	asrs	r1, r1, #1
 801c6f0:	3008      	adds	r0, #8
 801c6f2:	e773      	b.n	801c5dc <_dtoa_r+0x344>
 801c6f4:	d02e      	beq.n	801c754 <_dtoa_r+0x4bc>
 801c6f6:	f1cb 0100 	rsb	r1, fp, #0
 801c6fa:	4a76      	ldr	r2, [pc, #472]	; (801c8d4 <_dtoa_r+0x63c>)
 801c6fc:	f001 000f 	and.w	r0, r1, #15
 801c700:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c704:	ed92 7b00 	vldr	d7, [r2]
 801c708:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c70c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c710:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c714:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801c718:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801c71c:	486e      	ldr	r0, [pc, #440]	; (801c8d8 <_dtoa_r+0x640>)
 801c71e:	1109      	asrs	r1, r1, #4
 801c720:	2400      	movs	r4, #0
 801c722:	2202      	movs	r2, #2
 801c724:	b939      	cbnz	r1, 801c736 <_dtoa_r+0x49e>
 801c726:	2c00      	cmp	r4, #0
 801c728:	f43f af60 	beq.w	801c5ec <_dtoa_r+0x354>
 801c72c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c730:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c734:	e75a      	b.n	801c5ec <_dtoa_r+0x354>
 801c736:	07cf      	lsls	r7, r1, #31
 801c738:	d509      	bpl.n	801c74e <_dtoa_r+0x4b6>
 801c73a:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801c73e:	ed90 7b00 	vldr	d7, [r0]
 801c742:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c746:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c74a:	3201      	adds	r2, #1
 801c74c:	2401      	movs	r4, #1
 801c74e:	1049      	asrs	r1, r1, #1
 801c750:	3008      	adds	r0, #8
 801c752:	e7e7      	b.n	801c724 <_dtoa_r+0x48c>
 801c754:	2202      	movs	r2, #2
 801c756:	e749      	b.n	801c5ec <_dtoa_r+0x354>
 801c758:	465f      	mov	r7, fp
 801c75a:	4648      	mov	r0, r9
 801c75c:	e765      	b.n	801c62a <_dtoa_r+0x392>
 801c75e:	ec42 1b17 	vmov	d7, r1, r2
 801c762:	4a5c      	ldr	r2, [pc, #368]	; (801c8d4 <_dtoa_r+0x63c>)
 801c764:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c768:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c76c:	9a00      	ldr	r2, [sp, #0]
 801c76e:	1814      	adds	r4, r2, r0
 801c770:	9a08      	ldr	r2, [sp, #32]
 801c772:	b352      	cbz	r2, 801c7ca <_dtoa_r+0x532>
 801c774:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c778:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c77c:	f8dd 8000 	ldr.w	r8, [sp]
 801c780:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c784:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c788:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c78c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c790:	ee14 2a90 	vmov	r2, s9
 801c794:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c798:	3230      	adds	r2, #48	; 0x30
 801c79a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c79e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7a6:	f808 2b01 	strb.w	r2, [r8], #1
 801c7aa:	d439      	bmi.n	801c820 <_dtoa_r+0x588>
 801c7ac:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c7b0:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c7b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c7b8:	d472      	bmi.n	801c8a0 <_dtoa_r+0x608>
 801c7ba:	45a0      	cmp	r8, r4
 801c7bc:	f43f af5d 	beq.w	801c67a <_dtoa_r+0x3e2>
 801c7c0:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c7c4:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c7c8:	e7e0      	b.n	801c78c <_dtoa_r+0x4f4>
 801c7ca:	f8dd 8000 	ldr.w	r8, [sp]
 801c7ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c7d2:	4621      	mov	r1, r4
 801c7d4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c7d8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c7dc:	ee14 2a90 	vmov	r2, s9
 801c7e0:	3230      	adds	r2, #48	; 0x30
 801c7e2:	f808 2b01 	strb.w	r2, [r8], #1
 801c7e6:	45a0      	cmp	r8, r4
 801c7e8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c7ec:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c7f0:	d118      	bne.n	801c824 <_dtoa_r+0x58c>
 801c7f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c7f6:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c7fa:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c7fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c802:	dc4d      	bgt.n	801c8a0 <_dtoa_r+0x608>
 801c804:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c810:	f57f af33 	bpl.w	801c67a <_dtoa_r+0x3e2>
 801c814:	4688      	mov	r8, r1
 801c816:	3901      	subs	r1, #1
 801c818:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c81c:	2b30      	cmp	r3, #48	; 0x30
 801c81e:	d0f9      	beq.n	801c814 <_dtoa_r+0x57c>
 801c820:	46bb      	mov	fp, r7
 801c822:	e02a      	b.n	801c87a <_dtoa_r+0x5e2>
 801c824:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c828:	e7d6      	b.n	801c7d8 <_dtoa_r+0x540>
 801c82a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c82e:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c832:	f8dd 8000 	ldr.w	r8, [sp]
 801c836:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c83a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c83e:	ee15 3a10 	vmov	r3, s10
 801c842:	3330      	adds	r3, #48	; 0x30
 801c844:	f808 3b01 	strb.w	r3, [r8], #1
 801c848:	9b00      	ldr	r3, [sp, #0]
 801c84a:	eba8 0303 	sub.w	r3, r8, r3
 801c84e:	4599      	cmp	r9, r3
 801c850:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c854:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c858:	d133      	bne.n	801c8c2 <_dtoa_r+0x62a>
 801c85a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c85e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c866:	dc1a      	bgt.n	801c89e <_dtoa_r+0x606>
 801c868:	eeb4 7b46 	vcmp.f64	d7, d6
 801c86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c870:	d103      	bne.n	801c87a <_dtoa_r+0x5e2>
 801c872:	ee15 3a10 	vmov	r3, s10
 801c876:	07d9      	lsls	r1, r3, #31
 801c878:	d411      	bmi.n	801c89e <_dtoa_r+0x606>
 801c87a:	4629      	mov	r1, r5
 801c87c:	4630      	mov	r0, r6
 801c87e:	f000 fd0b 	bl	801d298 <_Bfree>
 801c882:	2300      	movs	r3, #0
 801c884:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c886:	f888 3000 	strb.w	r3, [r8]
 801c88a:	f10b 0301 	add.w	r3, fp, #1
 801c88e:	6013      	str	r3, [r2, #0]
 801c890:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c892:	2b00      	cmp	r3, #0
 801c894:	f43f ad4d 	beq.w	801c332 <_dtoa_r+0x9a>
 801c898:	f8c3 8000 	str.w	r8, [r3]
 801c89c:	e549      	b.n	801c332 <_dtoa_r+0x9a>
 801c89e:	465f      	mov	r7, fp
 801c8a0:	4643      	mov	r3, r8
 801c8a2:	4698      	mov	r8, r3
 801c8a4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c8a8:	2a39      	cmp	r2, #57	; 0x39
 801c8aa:	d106      	bne.n	801c8ba <_dtoa_r+0x622>
 801c8ac:	9a00      	ldr	r2, [sp, #0]
 801c8ae:	429a      	cmp	r2, r3
 801c8b0:	d1f7      	bne.n	801c8a2 <_dtoa_r+0x60a>
 801c8b2:	9900      	ldr	r1, [sp, #0]
 801c8b4:	2230      	movs	r2, #48	; 0x30
 801c8b6:	3701      	adds	r7, #1
 801c8b8:	700a      	strb	r2, [r1, #0]
 801c8ba:	781a      	ldrb	r2, [r3, #0]
 801c8bc:	3201      	adds	r2, #1
 801c8be:	701a      	strb	r2, [r3, #0]
 801c8c0:	e7ae      	b.n	801c820 <_dtoa_r+0x588>
 801c8c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c8c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c8ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8ce:	d1b2      	bne.n	801c836 <_dtoa_r+0x59e>
 801c8d0:	e7d3      	b.n	801c87a <_dtoa_r+0x5e2>
 801c8d2:	bf00      	nop
 801c8d4:	08022058 	.word	0x08022058
 801c8d8:	08022030 	.word	0x08022030
 801c8dc:	9908      	ldr	r1, [sp, #32]
 801c8de:	2900      	cmp	r1, #0
 801c8e0:	f000 80d1 	beq.w	801ca86 <_dtoa_r+0x7ee>
 801c8e4:	9907      	ldr	r1, [sp, #28]
 801c8e6:	2901      	cmp	r1, #1
 801c8e8:	f300 80b4 	bgt.w	801ca54 <_dtoa_r+0x7bc>
 801c8ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c8ee:	2900      	cmp	r1, #0
 801c8f0:	f000 80ac 	beq.w	801ca4c <_dtoa_r+0x7b4>
 801c8f4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c8f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c8fc:	461c      	mov	r4, r3
 801c8fe:	930a      	str	r3, [sp, #40]	; 0x28
 801c900:	9b05      	ldr	r3, [sp, #20]
 801c902:	4413      	add	r3, r2
 801c904:	9305      	str	r3, [sp, #20]
 801c906:	9b06      	ldr	r3, [sp, #24]
 801c908:	2101      	movs	r1, #1
 801c90a:	4413      	add	r3, r2
 801c90c:	4630      	mov	r0, r6
 801c90e:	9306      	str	r3, [sp, #24]
 801c910:	f000 fd7e 	bl	801d410 <__i2b>
 801c914:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c916:	4607      	mov	r7, r0
 801c918:	f1b8 0f00 	cmp.w	r8, #0
 801c91c:	dd0d      	ble.n	801c93a <_dtoa_r+0x6a2>
 801c91e:	9a06      	ldr	r2, [sp, #24]
 801c920:	2a00      	cmp	r2, #0
 801c922:	dd0a      	ble.n	801c93a <_dtoa_r+0x6a2>
 801c924:	4542      	cmp	r2, r8
 801c926:	9905      	ldr	r1, [sp, #20]
 801c928:	bfa8      	it	ge
 801c92a:	4642      	movge	r2, r8
 801c92c:	1a89      	subs	r1, r1, r2
 801c92e:	9105      	str	r1, [sp, #20]
 801c930:	9906      	ldr	r1, [sp, #24]
 801c932:	eba8 0802 	sub.w	r8, r8, r2
 801c936:	1a8a      	subs	r2, r1, r2
 801c938:	9206      	str	r2, [sp, #24]
 801c93a:	b303      	cbz	r3, 801c97e <_dtoa_r+0x6e6>
 801c93c:	9a08      	ldr	r2, [sp, #32]
 801c93e:	2a00      	cmp	r2, #0
 801c940:	f000 80a6 	beq.w	801ca90 <_dtoa_r+0x7f8>
 801c944:	2c00      	cmp	r4, #0
 801c946:	dd13      	ble.n	801c970 <_dtoa_r+0x6d8>
 801c948:	4639      	mov	r1, r7
 801c94a:	4622      	mov	r2, r4
 801c94c:	4630      	mov	r0, r6
 801c94e:	930c      	str	r3, [sp, #48]	; 0x30
 801c950:	f000 fe1a 	bl	801d588 <__pow5mult>
 801c954:	462a      	mov	r2, r5
 801c956:	4601      	mov	r1, r0
 801c958:	4607      	mov	r7, r0
 801c95a:	4630      	mov	r0, r6
 801c95c:	f000 fd6e 	bl	801d43c <__multiply>
 801c960:	4629      	mov	r1, r5
 801c962:	900a      	str	r0, [sp, #40]	; 0x28
 801c964:	4630      	mov	r0, r6
 801c966:	f000 fc97 	bl	801d298 <_Bfree>
 801c96a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c96e:	4615      	mov	r5, r2
 801c970:	1b1a      	subs	r2, r3, r4
 801c972:	d004      	beq.n	801c97e <_dtoa_r+0x6e6>
 801c974:	4629      	mov	r1, r5
 801c976:	4630      	mov	r0, r6
 801c978:	f000 fe06 	bl	801d588 <__pow5mult>
 801c97c:	4605      	mov	r5, r0
 801c97e:	2101      	movs	r1, #1
 801c980:	4630      	mov	r0, r6
 801c982:	f000 fd45 	bl	801d410 <__i2b>
 801c986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801c988:	2b00      	cmp	r3, #0
 801c98a:	4604      	mov	r4, r0
 801c98c:	f340 8082 	ble.w	801ca94 <_dtoa_r+0x7fc>
 801c990:	461a      	mov	r2, r3
 801c992:	4601      	mov	r1, r0
 801c994:	4630      	mov	r0, r6
 801c996:	f000 fdf7 	bl	801d588 <__pow5mult>
 801c99a:	9b07      	ldr	r3, [sp, #28]
 801c99c:	2b01      	cmp	r3, #1
 801c99e:	4604      	mov	r4, r0
 801c9a0:	dd7b      	ble.n	801ca9a <_dtoa_r+0x802>
 801c9a2:	2300      	movs	r3, #0
 801c9a4:	930a      	str	r3, [sp, #40]	; 0x28
 801c9a6:	6922      	ldr	r2, [r4, #16]
 801c9a8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c9ac:	6910      	ldr	r0, [r2, #16]
 801c9ae:	f000 fcdf 	bl	801d370 <__hi0bits>
 801c9b2:	f1c0 0020 	rsb	r0, r0, #32
 801c9b6:	9b06      	ldr	r3, [sp, #24]
 801c9b8:	4418      	add	r0, r3
 801c9ba:	f010 001f 	ands.w	r0, r0, #31
 801c9be:	f000 808d 	beq.w	801cadc <_dtoa_r+0x844>
 801c9c2:	f1c0 0220 	rsb	r2, r0, #32
 801c9c6:	2a04      	cmp	r2, #4
 801c9c8:	f340 8086 	ble.w	801cad8 <_dtoa_r+0x840>
 801c9cc:	f1c0 001c 	rsb	r0, r0, #28
 801c9d0:	9b05      	ldr	r3, [sp, #20]
 801c9d2:	4403      	add	r3, r0
 801c9d4:	9305      	str	r3, [sp, #20]
 801c9d6:	9b06      	ldr	r3, [sp, #24]
 801c9d8:	4403      	add	r3, r0
 801c9da:	4480      	add	r8, r0
 801c9dc:	9306      	str	r3, [sp, #24]
 801c9de:	9b05      	ldr	r3, [sp, #20]
 801c9e0:	2b00      	cmp	r3, #0
 801c9e2:	dd05      	ble.n	801c9f0 <_dtoa_r+0x758>
 801c9e4:	4629      	mov	r1, r5
 801c9e6:	461a      	mov	r2, r3
 801c9e8:	4630      	mov	r0, r6
 801c9ea:	f000 fe27 	bl	801d63c <__lshift>
 801c9ee:	4605      	mov	r5, r0
 801c9f0:	9b06      	ldr	r3, [sp, #24]
 801c9f2:	2b00      	cmp	r3, #0
 801c9f4:	dd05      	ble.n	801ca02 <_dtoa_r+0x76a>
 801c9f6:	4621      	mov	r1, r4
 801c9f8:	461a      	mov	r2, r3
 801c9fa:	4630      	mov	r0, r6
 801c9fc:	f000 fe1e 	bl	801d63c <__lshift>
 801ca00:	4604      	mov	r4, r0
 801ca02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca04:	2b00      	cmp	r3, #0
 801ca06:	d06b      	beq.n	801cae0 <_dtoa_r+0x848>
 801ca08:	4621      	mov	r1, r4
 801ca0a:	4628      	mov	r0, r5
 801ca0c:	f000 fe82 	bl	801d714 <__mcmp>
 801ca10:	2800      	cmp	r0, #0
 801ca12:	da65      	bge.n	801cae0 <_dtoa_r+0x848>
 801ca14:	2300      	movs	r3, #0
 801ca16:	4629      	mov	r1, r5
 801ca18:	220a      	movs	r2, #10
 801ca1a:	4630      	mov	r0, r6
 801ca1c:	f000 fc5e 	bl	801d2dc <__multadd>
 801ca20:	9b08      	ldr	r3, [sp, #32]
 801ca22:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca26:	4605      	mov	r5, r0
 801ca28:	2b00      	cmp	r3, #0
 801ca2a:	f000 8192 	beq.w	801cd52 <_dtoa_r+0xaba>
 801ca2e:	4639      	mov	r1, r7
 801ca30:	2300      	movs	r3, #0
 801ca32:	220a      	movs	r2, #10
 801ca34:	4630      	mov	r0, r6
 801ca36:	f000 fc51 	bl	801d2dc <__multadd>
 801ca3a:	f1ba 0f00 	cmp.w	sl, #0
 801ca3e:	4607      	mov	r7, r0
 801ca40:	f300 808e 	bgt.w	801cb60 <_dtoa_r+0x8c8>
 801ca44:	9b07      	ldr	r3, [sp, #28]
 801ca46:	2b02      	cmp	r3, #2
 801ca48:	dc51      	bgt.n	801caee <_dtoa_r+0x856>
 801ca4a:	e089      	b.n	801cb60 <_dtoa_r+0x8c8>
 801ca4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ca4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ca52:	e751      	b.n	801c8f8 <_dtoa_r+0x660>
 801ca54:	f109 34ff 	add.w	r4, r9, #4294967295
 801ca58:	42a3      	cmp	r3, r4
 801ca5a:	bfbf      	itttt	lt
 801ca5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801ca5e:	1ae3      	sublt	r3, r4, r3
 801ca60:	18d2      	addlt	r2, r2, r3
 801ca62:	4613      	movlt	r3, r2
 801ca64:	bfb7      	itett	lt
 801ca66:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ca68:	1b1c      	subge	r4, r3, r4
 801ca6a:	4623      	movlt	r3, r4
 801ca6c:	2400      	movlt	r4, #0
 801ca6e:	f1b9 0f00 	cmp.w	r9, #0
 801ca72:	bfb5      	itete	lt
 801ca74:	9a05      	ldrlt	r2, [sp, #20]
 801ca76:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801ca7a:	eba2 0809 	sublt.w	r8, r2, r9
 801ca7e:	464a      	movge	r2, r9
 801ca80:	bfb8      	it	lt
 801ca82:	2200      	movlt	r2, #0
 801ca84:	e73b      	b.n	801c8fe <_dtoa_r+0x666>
 801ca86:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801ca8a:	9f08      	ldr	r7, [sp, #32]
 801ca8c:	461c      	mov	r4, r3
 801ca8e:	e743      	b.n	801c918 <_dtoa_r+0x680>
 801ca90:	461a      	mov	r2, r3
 801ca92:	e76f      	b.n	801c974 <_dtoa_r+0x6dc>
 801ca94:	9b07      	ldr	r3, [sp, #28]
 801ca96:	2b01      	cmp	r3, #1
 801ca98:	dc18      	bgt.n	801cacc <_dtoa_r+0x834>
 801ca9a:	9b02      	ldr	r3, [sp, #8]
 801ca9c:	b9b3      	cbnz	r3, 801cacc <_dtoa_r+0x834>
 801ca9e:	9b03      	ldr	r3, [sp, #12]
 801caa0:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801caa4:	b9a2      	cbnz	r2, 801cad0 <_dtoa_r+0x838>
 801caa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801caaa:	0d12      	lsrs	r2, r2, #20
 801caac:	0512      	lsls	r2, r2, #20
 801caae:	b18a      	cbz	r2, 801cad4 <_dtoa_r+0x83c>
 801cab0:	9b05      	ldr	r3, [sp, #20]
 801cab2:	3301      	adds	r3, #1
 801cab4:	9305      	str	r3, [sp, #20]
 801cab6:	9b06      	ldr	r3, [sp, #24]
 801cab8:	3301      	adds	r3, #1
 801caba:	9306      	str	r3, [sp, #24]
 801cabc:	2301      	movs	r3, #1
 801cabe:	930a      	str	r3, [sp, #40]	; 0x28
 801cac0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	f47f af6f 	bne.w	801c9a6 <_dtoa_r+0x70e>
 801cac8:	2001      	movs	r0, #1
 801caca:	e774      	b.n	801c9b6 <_dtoa_r+0x71e>
 801cacc:	2300      	movs	r3, #0
 801cace:	e7f6      	b.n	801cabe <_dtoa_r+0x826>
 801cad0:	9b02      	ldr	r3, [sp, #8]
 801cad2:	e7f4      	b.n	801cabe <_dtoa_r+0x826>
 801cad4:	920a      	str	r2, [sp, #40]	; 0x28
 801cad6:	e7f3      	b.n	801cac0 <_dtoa_r+0x828>
 801cad8:	d081      	beq.n	801c9de <_dtoa_r+0x746>
 801cada:	4610      	mov	r0, r2
 801cadc:	301c      	adds	r0, #28
 801cade:	e777      	b.n	801c9d0 <_dtoa_r+0x738>
 801cae0:	f1b9 0f00 	cmp.w	r9, #0
 801cae4:	dc37      	bgt.n	801cb56 <_dtoa_r+0x8be>
 801cae6:	9b07      	ldr	r3, [sp, #28]
 801cae8:	2b02      	cmp	r3, #2
 801caea:	dd34      	ble.n	801cb56 <_dtoa_r+0x8be>
 801caec:	46ca      	mov	sl, r9
 801caee:	f1ba 0f00 	cmp.w	sl, #0
 801caf2:	d10d      	bne.n	801cb10 <_dtoa_r+0x878>
 801caf4:	4621      	mov	r1, r4
 801caf6:	4653      	mov	r3, sl
 801caf8:	2205      	movs	r2, #5
 801cafa:	4630      	mov	r0, r6
 801cafc:	f000 fbee 	bl	801d2dc <__multadd>
 801cb00:	4601      	mov	r1, r0
 801cb02:	4604      	mov	r4, r0
 801cb04:	4628      	mov	r0, r5
 801cb06:	f000 fe05 	bl	801d714 <__mcmp>
 801cb0a:	2800      	cmp	r0, #0
 801cb0c:	f73f adde 	bgt.w	801c6cc <_dtoa_r+0x434>
 801cb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb12:	f8dd 8000 	ldr.w	r8, [sp]
 801cb16:	ea6f 0b03 	mvn.w	fp, r3
 801cb1a:	f04f 0900 	mov.w	r9, #0
 801cb1e:	4621      	mov	r1, r4
 801cb20:	4630      	mov	r0, r6
 801cb22:	f000 fbb9 	bl	801d298 <_Bfree>
 801cb26:	2f00      	cmp	r7, #0
 801cb28:	f43f aea7 	beq.w	801c87a <_dtoa_r+0x5e2>
 801cb2c:	f1b9 0f00 	cmp.w	r9, #0
 801cb30:	d005      	beq.n	801cb3e <_dtoa_r+0x8a6>
 801cb32:	45b9      	cmp	r9, r7
 801cb34:	d003      	beq.n	801cb3e <_dtoa_r+0x8a6>
 801cb36:	4649      	mov	r1, r9
 801cb38:	4630      	mov	r0, r6
 801cb3a:	f000 fbad 	bl	801d298 <_Bfree>
 801cb3e:	4639      	mov	r1, r7
 801cb40:	4630      	mov	r0, r6
 801cb42:	f000 fba9 	bl	801d298 <_Bfree>
 801cb46:	e698      	b.n	801c87a <_dtoa_r+0x5e2>
 801cb48:	2400      	movs	r4, #0
 801cb4a:	4627      	mov	r7, r4
 801cb4c:	e7e0      	b.n	801cb10 <_dtoa_r+0x878>
 801cb4e:	46bb      	mov	fp, r7
 801cb50:	4604      	mov	r4, r0
 801cb52:	4607      	mov	r7, r0
 801cb54:	e5ba      	b.n	801c6cc <_dtoa_r+0x434>
 801cb56:	9b08      	ldr	r3, [sp, #32]
 801cb58:	46ca      	mov	sl, r9
 801cb5a:	2b00      	cmp	r3, #0
 801cb5c:	f000 8100 	beq.w	801cd60 <_dtoa_r+0xac8>
 801cb60:	f1b8 0f00 	cmp.w	r8, #0
 801cb64:	dd05      	ble.n	801cb72 <_dtoa_r+0x8da>
 801cb66:	4639      	mov	r1, r7
 801cb68:	4642      	mov	r2, r8
 801cb6a:	4630      	mov	r0, r6
 801cb6c:	f000 fd66 	bl	801d63c <__lshift>
 801cb70:	4607      	mov	r7, r0
 801cb72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb74:	2b00      	cmp	r3, #0
 801cb76:	d05d      	beq.n	801cc34 <_dtoa_r+0x99c>
 801cb78:	6879      	ldr	r1, [r7, #4]
 801cb7a:	4630      	mov	r0, r6
 801cb7c:	f000 fb4c 	bl	801d218 <_Balloc>
 801cb80:	4680      	mov	r8, r0
 801cb82:	b928      	cbnz	r0, 801cb90 <_dtoa_r+0x8f8>
 801cb84:	4b82      	ldr	r3, [pc, #520]	; (801cd90 <_dtoa_r+0xaf8>)
 801cb86:	4602      	mov	r2, r0
 801cb88:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cb8c:	f7ff bb9a 	b.w	801c2c4 <_dtoa_r+0x2c>
 801cb90:	693a      	ldr	r2, [r7, #16]
 801cb92:	3202      	adds	r2, #2
 801cb94:	0092      	lsls	r2, r2, #2
 801cb96:	f107 010c 	add.w	r1, r7, #12
 801cb9a:	300c      	adds	r0, #12
 801cb9c:	f7fe fc1e 	bl	801b3dc <memcpy>
 801cba0:	2201      	movs	r2, #1
 801cba2:	4641      	mov	r1, r8
 801cba4:	4630      	mov	r0, r6
 801cba6:	f000 fd49 	bl	801d63c <__lshift>
 801cbaa:	9b00      	ldr	r3, [sp, #0]
 801cbac:	3301      	adds	r3, #1
 801cbae:	9305      	str	r3, [sp, #20]
 801cbb0:	9b00      	ldr	r3, [sp, #0]
 801cbb2:	4453      	add	r3, sl
 801cbb4:	9309      	str	r3, [sp, #36]	; 0x24
 801cbb6:	9b02      	ldr	r3, [sp, #8]
 801cbb8:	f003 0301 	and.w	r3, r3, #1
 801cbbc:	46b9      	mov	r9, r7
 801cbbe:	9308      	str	r3, [sp, #32]
 801cbc0:	4607      	mov	r7, r0
 801cbc2:	9b05      	ldr	r3, [sp, #20]
 801cbc4:	4621      	mov	r1, r4
 801cbc6:	3b01      	subs	r3, #1
 801cbc8:	4628      	mov	r0, r5
 801cbca:	9302      	str	r3, [sp, #8]
 801cbcc:	f7ff fad8 	bl	801c180 <quorem>
 801cbd0:	4603      	mov	r3, r0
 801cbd2:	3330      	adds	r3, #48	; 0x30
 801cbd4:	9006      	str	r0, [sp, #24]
 801cbd6:	4649      	mov	r1, r9
 801cbd8:	4628      	mov	r0, r5
 801cbda:	930a      	str	r3, [sp, #40]	; 0x28
 801cbdc:	f000 fd9a 	bl	801d714 <__mcmp>
 801cbe0:	463a      	mov	r2, r7
 801cbe2:	4682      	mov	sl, r0
 801cbe4:	4621      	mov	r1, r4
 801cbe6:	4630      	mov	r0, r6
 801cbe8:	f000 fdb0 	bl	801d74c <__mdiff>
 801cbec:	68c2      	ldr	r2, [r0, #12]
 801cbee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbf0:	4680      	mov	r8, r0
 801cbf2:	bb0a      	cbnz	r2, 801cc38 <_dtoa_r+0x9a0>
 801cbf4:	4601      	mov	r1, r0
 801cbf6:	4628      	mov	r0, r5
 801cbf8:	f000 fd8c 	bl	801d714 <__mcmp>
 801cbfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbfe:	4602      	mov	r2, r0
 801cc00:	4641      	mov	r1, r8
 801cc02:	4630      	mov	r0, r6
 801cc04:	920e      	str	r2, [sp, #56]	; 0x38
 801cc06:	930a      	str	r3, [sp, #40]	; 0x28
 801cc08:	f000 fb46 	bl	801d298 <_Bfree>
 801cc0c:	9b07      	ldr	r3, [sp, #28]
 801cc0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc10:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cc14:	ea43 0102 	orr.w	r1, r3, r2
 801cc18:	9b08      	ldr	r3, [sp, #32]
 801cc1a:	430b      	orrs	r3, r1
 801cc1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc1e:	d10d      	bne.n	801cc3c <_dtoa_r+0x9a4>
 801cc20:	2b39      	cmp	r3, #57	; 0x39
 801cc22:	d029      	beq.n	801cc78 <_dtoa_r+0x9e0>
 801cc24:	f1ba 0f00 	cmp.w	sl, #0
 801cc28:	dd01      	ble.n	801cc2e <_dtoa_r+0x996>
 801cc2a:	9b06      	ldr	r3, [sp, #24]
 801cc2c:	3331      	adds	r3, #49	; 0x31
 801cc2e:	9a02      	ldr	r2, [sp, #8]
 801cc30:	7013      	strb	r3, [r2, #0]
 801cc32:	e774      	b.n	801cb1e <_dtoa_r+0x886>
 801cc34:	4638      	mov	r0, r7
 801cc36:	e7b8      	b.n	801cbaa <_dtoa_r+0x912>
 801cc38:	2201      	movs	r2, #1
 801cc3a:	e7e1      	b.n	801cc00 <_dtoa_r+0x968>
 801cc3c:	f1ba 0f00 	cmp.w	sl, #0
 801cc40:	db06      	blt.n	801cc50 <_dtoa_r+0x9b8>
 801cc42:	9907      	ldr	r1, [sp, #28]
 801cc44:	ea41 0a0a 	orr.w	sl, r1, sl
 801cc48:	9908      	ldr	r1, [sp, #32]
 801cc4a:	ea5a 0101 	orrs.w	r1, sl, r1
 801cc4e:	d120      	bne.n	801cc92 <_dtoa_r+0x9fa>
 801cc50:	2a00      	cmp	r2, #0
 801cc52:	ddec      	ble.n	801cc2e <_dtoa_r+0x996>
 801cc54:	4629      	mov	r1, r5
 801cc56:	2201      	movs	r2, #1
 801cc58:	4630      	mov	r0, r6
 801cc5a:	9305      	str	r3, [sp, #20]
 801cc5c:	f000 fcee 	bl	801d63c <__lshift>
 801cc60:	4621      	mov	r1, r4
 801cc62:	4605      	mov	r5, r0
 801cc64:	f000 fd56 	bl	801d714 <__mcmp>
 801cc68:	2800      	cmp	r0, #0
 801cc6a:	9b05      	ldr	r3, [sp, #20]
 801cc6c:	dc02      	bgt.n	801cc74 <_dtoa_r+0x9dc>
 801cc6e:	d1de      	bne.n	801cc2e <_dtoa_r+0x996>
 801cc70:	07da      	lsls	r2, r3, #31
 801cc72:	d5dc      	bpl.n	801cc2e <_dtoa_r+0x996>
 801cc74:	2b39      	cmp	r3, #57	; 0x39
 801cc76:	d1d8      	bne.n	801cc2a <_dtoa_r+0x992>
 801cc78:	9a02      	ldr	r2, [sp, #8]
 801cc7a:	2339      	movs	r3, #57	; 0x39
 801cc7c:	7013      	strb	r3, [r2, #0]
 801cc7e:	4643      	mov	r3, r8
 801cc80:	4698      	mov	r8, r3
 801cc82:	3b01      	subs	r3, #1
 801cc84:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cc88:	2a39      	cmp	r2, #57	; 0x39
 801cc8a:	d051      	beq.n	801cd30 <_dtoa_r+0xa98>
 801cc8c:	3201      	adds	r2, #1
 801cc8e:	701a      	strb	r2, [r3, #0]
 801cc90:	e745      	b.n	801cb1e <_dtoa_r+0x886>
 801cc92:	2a00      	cmp	r2, #0
 801cc94:	dd03      	ble.n	801cc9e <_dtoa_r+0xa06>
 801cc96:	2b39      	cmp	r3, #57	; 0x39
 801cc98:	d0ee      	beq.n	801cc78 <_dtoa_r+0x9e0>
 801cc9a:	3301      	adds	r3, #1
 801cc9c:	e7c7      	b.n	801cc2e <_dtoa_r+0x996>
 801cc9e:	9a05      	ldr	r2, [sp, #20]
 801cca0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cca2:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cca6:	428a      	cmp	r2, r1
 801cca8:	d02b      	beq.n	801cd02 <_dtoa_r+0xa6a>
 801ccaa:	4629      	mov	r1, r5
 801ccac:	2300      	movs	r3, #0
 801ccae:	220a      	movs	r2, #10
 801ccb0:	4630      	mov	r0, r6
 801ccb2:	f000 fb13 	bl	801d2dc <__multadd>
 801ccb6:	45b9      	cmp	r9, r7
 801ccb8:	4605      	mov	r5, r0
 801ccba:	f04f 0300 	mov.w	r3, #0
 801ccbe:	f04f 020a 	mov.w	r2, #10
 801ccc2:	4649      	mov	r1, r9
 801ccc4:	4630      	mov	r0, r6
 801ccc6:	d107      	bne.n	801ccd8 <_dtoa_r+0xa40>
 801ccc8:	f000 fb08 	bl	801d2dc <__multadd>
 801cccc:	4681      	mov	r9, r0
 801ccce:	4607      	mov	r7, r0
 801ccd0:	9b05      	ldr	r3, [sp, #20]
 801ccd2:	3301      	adds	r3, #1
 801ccd4:	9305      	str	r3, [sp, #20]
 801ccd6:	e774      	b.n	801cbc2 <_dtoa_r+0x92a>
 801ccd8:	f000 fb00 	bl	801d2dc <__multadd>
 801ccdc:	4639      	mov	r1, r7
 801ccde:	4681      	mov	r9, r0
 801cce0:	2300      	movs	r3, #0
 801cce2:	220a      	movs	r2, #10
 801cce4:	4630      	mov	r0, r6
 801cce6:	f000 faf9 	bl	801d2dc <__multadd>
 801ccea:	4607      	mov	r7, r0
 801ccec:	e7f0      	b.n	801ccd0 <_dtoa_r+0xa38>
 801ccee:	f1ba 0f00 	cmp.w	sl, #0
 801ccf2:	9a00      	ldr	r2, [sp, #0]
 801ccf4:	bfcc      	ite	gt
 801ccf6:	46d0      	movgt	r8, sl
 801ccf8:	f04f 0801 	movle.w	r8, #1
 801ccfc:	4490      	add	r8, r2
 801ccfe:	f04f 0900 	mov.w	r9, #0
 801cd02:	4629      	mov	r1, r5
 801cd04:	2201      	movs	r2, #1
 801cd06:	4630      	mov	r0, r6
 801cd08:	9302      	str	r3, [sp, #8]
 801cd0a:	f000 fc97 	bl	801d63c <__lshift>
 801cd0e:	4621      	mov	r1, r4
 801cd10:	4605      	mov	r5, r0
 801cd12:	f000 fcff 	bl	801d714 <__mcmp>
 801cd16:	2800      	cmp	r0, #0
 801cd18:	dcb1      	bgt.n	801cc7e <_dtoa_r+0x9e6>
 801cd1a:	d102      	bne.n	801cd22 <_dtoa_r+0xa8a>
 801cd1c:	9b02      	ldr	r3, [sp, #8]
 801cd1e:	07db      	lsls	r3, r3, #31
 801cd20:	d4ad      	bmi.n	801cc7e <_dtoa_r+0x9e6>
 801cd22:	4643      	mov	r3, r8
 801cd24:	4698      	mov	r8, r3
 801cd26:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cd2a:	2a30      	cmp	r2, #48	; 0x30
 801cd2c:	d0fa      	beq.n	801cd24 <_dtoa_r+0xa8c>
 801cd2e:	e6f6      	b.n	801cb1e <_dtoa_r+0x886>
 801cd30:	9a00      	ldr	r2, [sp, #0]
 801cd32:	429a      	cmp	r2, r3
 801cd34:	d1a4      	bne.n	801cc80 <_dtoa_r+0x9e8>
 801cd36:	f10b 0b01 	add.w	fp, fp, #1
 801cd3a:	2331      	movs	r3, #49	; 0x31
 801cd3c:	e778      	b.n	801cc30 <_dtoa_r+0x998>
 801cd3e:	4b15      	ldr	r3, [pc, #84]	; (801cd94 <_dtoa_r+0xafc>)
 801cd40:	f7ff bb12 	b.w	801c368 <_dtoa_r+0xd0>
 801cd44:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	f47f aaee 	bne.w	801c328 <_dtoa_r+0x90>
 801cd4c:	4b12      	ldr	r3, [pc, #72]	; (801cd98 <_dtoa_r+0xb00>)
 801cd4e:	f7ff bb0b 	b.w	801c368 <_dtoa_r+0xd0>
 801cd52:	f1ba 0f00 	cmp.w	sl, #0
 801cd56:	dc03      	bgt.n	801cd60 <_dtoa_r+0xac8>
 801cd58:	9b07      	ldr	r3, [sp, #28]
 801cd5a:	2b02      	cmp	r3, #2
 801cd5c:	f73f aec7 	bgt.w	801caee <_dtoa_r+0x856>
 801cd60:	f8dd 8000 	ldr.w	r8, [sp]
 801cd64:	4621      	mov	r1, r4
 801cd66:	4628      	mov	r0, r5
 801cd68:	f7ff fa0a 	bl	801c180 <quorem>
 801cd6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cd70:	f808 3b01 	strb.w	r3, [r8], #1
 801cd74:	9a00      	ldr	r2, [sp, #0]
 801cd76:	eba8 0202 	sub.w	r2, r8, r2
 801cd7a:	4592      	cmp	sl, r2
 801cd7c:	ddb7      	ble.n	801ccee <_dtoa_r+0xa56>
 801cd7e:	4629      	mov	r1, r5
 801cd80:	2300      	movs	r3, #0
 801cd82:	220a      	movs	r2, #10
 801cd84:	4630      	mov	r0, r6
 801cd86:	f000 faa9 	bl	801d2dc <__multadd>
 801cd8a:	4605      	mov	r5, r0
 801cd8c:	e7ea      	b.n	801cd64 <_dtoa_r+0xacc>
 801cd8e:	bf00      	nop
 801cd90:	08021f5e 	.word	0x08021f5e
 801cd94:	08021e1c 	.word	0x08021e1c
 801cd98:	08021ef2 	.word	0x08021ef2

0801cd9c <__sflush_r>:
 801cd9c:	898a      	ldrh	r2, [r1, #12]
 801cd9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cda2:	4605      	mov	r5, r0
 801cda4:	0710      	lsls	r0, r2, #28
 801cda6:	460c      	mov	r4, r1
 801cda8:	d458      	bmi.n	801ce5c <__sflush_r+0xc0>
 801cdaa:	684b      	ldr	r3, [r1, #4]
 801cdac:	2b00      	cmp	r3, #0
 801cdae:	dc05      	bgt.n	801cdbc <__sflush_r+0x20>
 801cdb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801cdb2:	2b00      	cmp	r3, #0
 801cdb4:	dc02      	bgt.n	801cdbc <__sflush_r+0x20>
 801cdb6:	2000      	movs	r0, #0
 801cdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cdbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cdbe:	2e00      	cmp	r6, #0
 801cdc0:	d0f9      	beq.n	801cdb6 <__sflush_r+0x1a>
 801cdc2:	2300      	movs	r3, #0
 801cdc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801cdc8:	682f      	ldr	r7, [r5, #0]
 801cdca:	602b      	str	r3, [r5, #0]
 801cdcc:	d032      	beq.n	801ce34 <__sflush_r+0x98>
 801cdce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801cdd0:	89a3      	ldrh	r3, [r4, #12]
 801cdd2:	075a      	lsls	r2, r3, #29
 801cdd4:	d505      	bpl.n	801cde2 <__sflush_r+0x46>
 801cdd6:	6863      	ldr	r3, [r4, #4]
 801cdd8:	1ac0      	subs	r0, r0, r3
 801cdda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801cddc:	b10b      	cbz	r3, 801cde2 <__sflush_r+0x46>
 801cdde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801cde0:	1ac0      	subs	r0, r0, r3
 801cde2:	2300      	movs	r3, #0
 801cde4:	4602      	mov	r2, r0
 801cde6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801cde8:	6a21      	ldr	r1, [r4, #32]
 801cdea:	4628      	mov	r0, r5
 801cdec:	47b0      	blx	r6
 801cdee:	1c43      	adds	r3, r0, #1
 801cdf0:	89a3      	ldrh	r3, [r4, #12]
 801cdf2:	d106      	bne.n	801ce02 <__sflush_r+0x66>
 801cdf4:	6829      	ldr	r1, [r5, #0]
 801cdf6:	291d      	cmp	r1, #29
 801cdf8:	d82c      	bhi.n	801ce54 <__sflush_r+0xb8>
 801cdfa:	4a2a      	ldr	r2, [pc, #168]	; (801cea4 <__sflush_r+0x108>)
 801cdfc:	40ca      	lsrs	r2, r1
 801cdfe:	07d6      	lsls	r6, r2, #31
 801ce00:	d528      	bpl.n	801ce54 <__sflush_r+0xb8>
 801ce02:	2200      	movs	r2, #0
 801ce04:	6062      	str	r2, [r4, #4]
 801ce06:	04d9      	lsls	r1, r3, #19
 801ce08:	6922      	ldr	r2, [r4, #16]
 801ce0a:	6022      	str	r2, [r4, #0]
 801ce0c:	d504      	bpl.n	801ce18 <__sflush_r+0x7c>
 801ce0e:	1c42      	adds	r2, r0, #1
 801ce10:	d101      	bne.n	801ce16 <__sflush_r+0x7a>
 801ce12:	682b      	ldr	r3, [r5, #0]
 801ce14:	b903      	cbnz	r3, 801ce18 <__sflush_r+0x7c>
 801ce16:	6560      	str	r0, [r4, #84]	; 0x54
 801ce18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce1a:	602f      	str	r7, [r5, #0]
 801ce1c:	2900      	cmp	r1, #0
 801ce1e:	d0ca      	beq.n	801cdb6 <__sflush_r+0x1a>
 801ce20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ce24:	4299      	cmp	r1, r3
 801ce26:	d002      	beq.n	801ce2e <__sflush_r+0x92>
 801ce28:	4628      	mov	r0, r5
 801ce2a:	f000 fd83 	bl	801d934 <_free_r>
 801ce2e:	2000      	movs	r0, #0
 801ce30:	6360      	str	r0, [r4, #52]	; 0x34
 801ce32:	e7c1      	b.n	801cdb8 <__sflush_r+0x1c>
 801ce34:	6a21      	ldr	r1, [r4, #32]
 801ce36:	2301      	movs	r3, #1
 801ce38:	4628      	mov	r0, r5
 801ce3a:	47b0      	blx	r6
 801ce3c:	1c41      	adds	r1, r0, #1
 801ce3e:	d1c7      	bne.n	801cdd0 <__sflush_r+0x34>
 801ce40:	682b      	ldr	r3, [r5, #0]
 801ce42:	2b00      	cmp	r3, #0
 801ce44:	d0c4      	beq.n	801cdd0 <__sflush_r+0x34>
 801ce46:	2b1d      	cmp	r3, #29
 801ce48:	d001      	beq.n	801ce4e <__sflush_r+0xb2>
 801ce4a:	2b16      	cmp	r3, #22
 801ce4c:	d101      	bne.n	801ce52 <__sflush_r+0xb6>
 801ce4e:	602f      	str	r7, [r5, #0]
 801ce50:	e7b1      	b.n	801cdb6 <__sflush_r+0x1a>
 801ce52:	89a3      	ldrh	r3, [r4, #12]
 801ce54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce58:	81a3      	strh	r3, [r4, #12]
 801ce5a:	e7ad      	b.n	801cdb8 <__sflush_r+0x1c>
 801ce5c:	690f      	ldr	r7, [r1, #16]
 801ce5e:	2f00      	cmp	r7, #0
 801ce60:	d0a9      	beq.n	801cdb6 <__sflush_r+0x1a>
 801ce62:	0793      	lsls	r3, r2, #30
 801ce64:	680e      	ldr	r6, [r1, #0]
 801ce66:	bf08      	it	eq
 801ce68:	694b      	ldreq	r3, [r1, #20]
 801ce6a:	600f      	str	r7, [r1, #0]
 801ce6c:	bf18      	it	ne
 801ce6e:	2300      	movne	r3, #0
 801ce70:	eba6 0807 	sub.w	r8, r6, r7
 801ce74:	608b      	str	r3, [r1, #8]
 801ce76:	f1b8 0f00 	cmp.w	r8, #0
 801ce7a:	dd9c      	ble.n	801cdb6 <__sflush_r+0x1a>
 801ce7c:	6a21      	ldr	r1, [r4, #32]
 801ce7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ce80:	4643      	mov	r3, r8
 801ce82:	463a      	mov	r2, r7
 801ce84:	4628      	mov	r0, r5
 801ce86:	47b0      	blx	r6
 801ce88:	2800      	cmp	r0, #0
 801ce8a:	dc06      	bgt.n	801ce9a <__sflush_r+0xfe>
 801ce8c:	89a3      	ldrh	r3, [r4, #12]
 801ce8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ce92:	81a3      	strh	r3, [r4, #12]
 801ce94:	f04f 30ff 	mov.w	r0, #4294967295
 801ce98:	e78e      	b.n	801cdb8 <__sflush_r+0x1c>
 801ce9a:	4407      	add	r7, r0
 801ce9c:	eba8 0800 	sub.w	r8, r8, r0
 801cea0:	e7e9      	b.n	801ce76 <__sflush_r+0xda>
 801cea2:	bf00      	nop
 801cea4:	20400001 	.word	0x20400001

0801cea8 <_fflush_r>:
 801cea8:	b538      	push	{r3, r4, r5, lr}
 801ceaa:	690b      	ldr	r3, [r1, #16]
 801ceac:	4605      	mov	r5, r0
 801ceae:	460c      	mov	r4, r1
 801ceb0:	b913      	cbnz	r3, 801ceb8 <_fflush_r+0x10>
 801ceb2:	2500      	movs	r5, #0
 801ceb4:	4628      	mov	r0, r5
 801ceb6:	bd38      	pop	{r3, r4, r5, pc}
 801ceb8:	b118      	cbz	r0, 801cec2 <_fflush_r+0x1a>
 801ceba:	6983      	ldr	r3, [r0, #24]
 801cebc:	b90b      	cbnz	r3, 801cec2 <_fflush_r+0x1a>
 801cebe:	f000 f887 	bl	801cfd0 <__sinit>
 801cec2:	4b14      	ldr	r3, [pc, #80]	; (801cf14 <_fflush_r+0x6c>)
 801cec4:	429c      	cmp	r4, r3
 801cec6:	d11b      	bne.n	801cf00 <_fflush_r+0x58>
 801cec8:	686c      	ldr	r4, [r5, #4]
 801ceca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cece:	2b00      	cmp	r3, #0
 801ced0:	d0ef      	beq.n	801ceb2 <_fflush_r+0xa>
 801ced2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801ced4:	07d0      	lsls	r0, r2, #31
 801ced6:	d404      	bmi.n	801cee2 <_fflush_r+0x3a>
 801ced8:	0599      	lsls	r1, r3, #22
 801ceda:	d402      	bmi.n	801cee2 <_fflush_r+0x3a>
 801cedc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cede:	f000 f92c 	bl	801d13a <__retarget_lock_acquire_recursive>
 801cee2:	4628      	mov	r0, r5
 801cee4:	4621      	mov	r1, r4
 801cee6:	f7ff ff59 	bl	801cd9c <__sflush_r>
 801ceea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ceec:	07da      	lsls	r2, r3, #31
 801ceee:	4605      	mov	r5, r0
 801cef0:	d4e0      	bmi.n	801ceb4 <_fflush_r+0xc>
 801cef2:	89a3      	ldrh	r3, [r4, #12]
 801cef4:	059b      	lsls	r3, r3, #22
 801cef6:	d4dd      	bmi.n	801ceb4 <_fflush_r+0xc>
 801cef8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cefa:	f000 f91f 	bl	801d13c <__retarget_lock_release_recursive>
 801cefe:	e7d9      	b.n	801ceb4 <_fflush_r+0xc>
 801cf00:	4b05      	ldr	r3, [pc, #20]	; (801cf18 <_fflush_r+0x70>)
 801cf02:	429c      	cmp	r4, r3
 801cf04:	d101      	bne.n	801cf0a <_fflush_r+0x62>
 801cf06:	68ac      	ldr	r4, [r5, #8]
 801cf08:	e7df      	b.n	801ceca <_fflush_r+0x22>
 801cf0a:	4b04      	ldr	r3, [pc, #16]	; (801cf1c <_fflush_r+0x74>)
 801cf0c:	429c      	cmp	r4, r3
 801cf0e:	bf08      	it	eq
 801cf10:	68ec      	ldreq	r4, [r5, #12]
 801cf12:	e7da      	b.n	801ceca <_fflush_r+0x22>
 801cf14:	08021f90 	.word	0x08021f90
 801cf18:	08021fb0 	.word	0x08021fb0
 801cf1c:	08021f70 	.word	0x08021f70

0801cf20 <std>:
 801cf20:	2300      	movs	r3, #0
 801cf22:	b510      	push	{r4, lr}
 801cf24:	4604      	mov	r4, r0
 801cf26:	e9c0 3300 	strd	r3, r3, [r0]
 801cf2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cf2e:	6083      	str	r3, [r0, #8]
 801cf30:	8181      	strh	r1, [r0, #12]
 801cf32:	6643      	str	r3, [r0, #100]	; 0x64
 801cf34:	81c2      	strh	r2, [r0, #14]
 801cf36:	6183      	str	r3, [r0, #24]
 801cf38:	4619      	mov	r1, r3
 801cf3a:	2208      	movs	r2, #8
 801cf3c:	305c      	adds	r0, #92	; 0x5c
 801cf3e:	f7fe fa5b 	bl	801b3f8 <memset>
 801cf42:	4b05      	ldr	r3, [pc, #20]	; (801cf58 <std+0x38>)
 801cf44:	6263      	str	r3, [r4, #36]	; 0x24
 801cf46:	4b05      	ldr	r3, [pc, #20]	; (801cf5c <std+0x3c>)
 801cf48:	62a3      	str	r3, [r4, #40]	; 0x28
 801cf4a:	4b05      	ldr	r3, [pc, #20]	; (801cf60 <std+0x40>)
 801cf4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cf4e:	4b05      	ldr	r3, [pc, #20]	; (801cf64 <std+0x44>)
 801cf50:	6224      	str	r4, [r4, #32]
 801cf52:	6323      	str	r3, [r4, #48]	; 0x30
 801cf54:	bd10      	pop	{r4, pc}
 801cf56:	bf00      	nop
 801cf58:	0801dd5d 	.word	0x0801dd5d
 801cf5c:	0801dd7f 	.word	0x0801dd7f
 801cf60:	0801ddb7 	.word	0x0801ddb7
 801cf64:	0801dddb 	.word	0x0801dddb

0801cf68 <_cleanup_r>:
 801cf68:	4901      	ldr	r1, [pc, #4]	; (801cf70 <_cleanup_r+0x8>)
 801cf6a:	f000 b8c1 	b.w	801d0f0 <_fwalk_reent>
 801cf6e:	bf00      	nop
 801cf70:	0801cea9 	.word	0x0801cea9

0801cf74 <__sfmoreglue>:
 801cf74:	b570      	push	{r4, r5, r6, lr}
 801cf76:	1e4a      	subs	r2, r1, #1
 801cf78:	2568      	movs	r5, #104	; 0x68
 801cf7a:	4355      	muls	r5, r2
 801cf7c:	460e      	mov	r6, r1
 801cf7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cf82:	f000 fd27 	bl	801d9d4 <_malloc_r>
 801cf86:	4604      	mov	r4, r0
 801cf88:	b140      	cbz	r0, 801cf9c <__sfmoreglue+0x28>
 801cf8a:	2100      	movs	r1, #0
 801cf8c:	e9c0 1600 	strd	r1, r6, [r0]
 801cf90:	300c      	adds	r0, #12
 801cf92:	60a0      	str	r0, [r4, #8]
 801cf94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cf98:	f7fe fa2e 	bl	801b3f8 <memset>
 801cf9c:	4620      	mov	r0, r4
 801cf9e:	bd70      	pop	{r4, r5, r6, pc}

0801cfa0 <__sfp_lock_acquire>:
 801cfa0:	4801      	ldr	r0, [pc, #4]	; (801cfa8 <__sfp_lock_acquire+0x8>)
 801cfa2:	f000 b8ca 	b.w	801d13a <__retarget_lock_acquire_recursive>
 801cfa6:	bf00      	nop
 801cfa8:	2000d7e8 	.word	0x2000d7e8

0801cfac <__sfp_lock_release>:
 801cfac:	4801      	ldr	r0, [pc, #4]	; (801cfb4 <__sfp_lock_release+0x8>)
 801cfae:	f000 b8c5 	b.w	801d13c <__retarget_lock_release_recursive>
 801cfb2:	bf00      	nop
 801cfb4:	2000d7e8 	.word	0x2000d7e8

0801cfb8 <__sinit_lock_acquire>:
 801cfb8:	4801      	ldr	r0, [pc, #4]	; (801cfc0 <__sinit_lock_acquire+0x8>)
 801cfba:	f000 b8be 	b.w	801d13a <__retarget_lock_acquire_recursive>
 801cfbe:	bf00      	nop
 801cfc0:	2000d7e3 	.word	0x2000d7e3

0801cfc4 <__sinit_lock_release>:
 801cfc4:	4801      	ldr	r0, [pc, #4]	; (801cfcc <__sinit_lock_release+0x8>)
 801cfc6:	f000 b8b9 	b.w	801d13c <__retarget_lock_release_recursive>
 801cfca:	bf00      	nop
 801cfcc:	2000d7e3 	.word	0x2000d7e3

0801cfd0 <__sinit>:
 801cfd0:	b510      	push	{r4, lr}
 801cfd2:	4604      	mov	r4, r0
 801cfd4:	f7ff fff0 	bl	801cfb8 <__sinit_lock_acquire>
 801cfd8:	69a3      	ldr	r3, [r4, #24]
 801cfda:	b11b      	cbz	r3, 801cfe4 <__sinit+0x14>
 801cfdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cfe0:	f7ff bff0 	b.w	801cfc4 <__sinit_lock_release>
 801cfe4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801cfe8:	6523      	str	r3, [r4, #80]	; 0x50
 801cfea:	4b13      	ldr	r3, [pc, #76]	; (801d038 <__sinit+0x68>)
 801cfec:	4a13      	ldr	r2, [pc, #76]	; (801d03c <__sinit+0x6c>)
 801cfee:	681b      	ldr	r3, [r3, #0]
 801cff0:	62a2      	str	r2, [r4, #40]	; 0x28
 801cff2:	42a3      	cmp	r3, r4
 801cff4:	bf04      	itt	eq
 801cff6:	2301      	moveq	r3, #1
 801cff8:	61a3      	streq	r3, [r4, #24]
 801cffa:	4620      	mov	r0, r4
 801cffc:	f000 f820 	bl	801d040 <__sfp>
 801d000:	6060      	str	r0, [r4, #4]
 801d002:	4620      	mov	r0, r4
 801d004:	f000 f81c 	bl	801d040 <__sfp>
 801d008:	60a0      	str	r0, [r4, #8]
 801d00a:	4620      	mov	r0, r4
 801d00c:	f000 f818 	bl	801d040 <__sfp>
 801d010:	2200      	movs	r2, #0
 801d012:	60e0      	str	r0, [r4, #12]
 801d014:	2104      	movs	r1, #4
 801d016:	6860      	ldr	r0, [r4, #4]
 801d018:	f7ff ff82 	bl	801cf20 <std>
 801d01c:	68a0      	ldr	r0, [r4, #8]
 801d01e:	2201      	movs	r2, #1
 801d020:	2109      	movs	r1, #9
 801d022:	f7ff ff7d 	bl	801cf20 <std>
 801d026:	68e0      	ldr	r0, [r4, #12]
 801d028:	2202      	movs	r2, #2
 801d02a:	2112      	movs	r1, #18
 801d02c:	f7ff ff78 	bl	801cf20 <std>
 801d030:	2301      	movs	r3, #1
 801d032:	61a3      	str	r3, [r4, #24]
 801d034:	e7d2      	b.n	801cfdc <__sinit+0xc>
 801d036:	bf00      	nop
 801d038:	08021e08 	.word	0x08021e08
 801d03c:	0801cf69 	.word	0x0801cf69

0801d040 <__sfp>:
 801d040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d042:	4607      	mov	r7, r0
 801d044:	f7ff ffac 	bl	801cfa0 <__sfp_lock_acquire>
 801d048:	4b1e      	ldr	r3, [pc, #120]	; (801d0c4 <__sfp+0x84>)
 801d04a:	681e      	ldr	r6, [r3, #0]
 801d04c:	69b3      	ldr	r3, [r6, #24]
 801d04e:	b913      	cbnz	r3, 801d056 <__sfp+0x16>
 801d050:	4630      	mov	r0, r6
 801d052:	f7ff ffbd 	bl	801cfd0 <__sinit>
 801d056:	3648      	adds	r6, #72	; 0x48
 801d058:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d05c:	3b01      	subs	r3, #1
 801d05e:	d503      	bpl.n	801d068 <__sfp+0x28>
 801d060:	6833      	ldr	r3, [r6, #0]
 801d062:	b30b      	cbz	r3, 801d0a8 <__sfp+0x68>
 801d064:	6836      	ldr	r6, [r6, #0]
 801d066:	e7f7      	b.n	801d058 <__sfp+0x18>
 801d068:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d06c:	b9d5      	cbnz	r5, 801d0a4 <__sfp+0x64>
 801d06e:	4b16      	ldr	r3, [pc, #88]	; (801d0c8 <__sfp+0x88>)
 801d070:	60e3      	str	r3, [r4, #12]
 801d072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d076:	6665      	str	r5, [r4, #100]	; 0x64
 801d078:	f000 f85e 	bl	801d138 <__retarget_lock_init_recursive>
 801d07c:	f7ff ff96 	bl	801cfac <__sfp_lock_release>
 801d080:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d084:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d088:	6025      	str	r5, [r4, #0]
 801d08a:	61a5      	str	r5, [r4, #24]
 801d08c:	2208      	movs	r2, #8
 801d08e:	4629      	mov	r1, r5
 801d090:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d094:	f7fe f9b0 	bl	801b3f8 <memset>
 801d098:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d09c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d0a4:	3468      	adds	r4, #104	; 0x68
 801d0a6:	e7d9      	b.n	801d05c <__sfp+0x1c>
 801d0a8:	2104      	movs	r1, #4
 801d0aa:	4638      	mov	r0, r7
 801d0ac:	f7ff ff62 	bl	801cf74 <__sfmoreglue>
 801d0b0:	4604      	mov	r4, r0
 801d0b2:	6030      	str	r0, [r6, #0]
 801d0b4:	2800      	cmp	r0, #0
 801d0b6:	d1d5      	bne.n	801d064 <__sfp+0x24>
 801d0b8:	f7ff ff78 	bl	801cfac <__sfp_lock_release>
 801d0bc:	230c      	movs	r3, #12
 801d0be:	603b      	str	r3, [r7, #0]
 801d0c0:	e7ee      	b.n	801d0a0 <__sfp+0x60>
 801d0c2:	bf00      	nop
 801d0c4:	08021e08 	.word	0x08021e08
 801d0c8:	ffff0001 	.word	0xffff0001

0801d0cc <fiprintf>:
 801d0cc:	b40e      	push	{r1, r2, r3}
 801d0ce:	b503      	push	{r0, r1, lr}
 801d0d0:	4601      	mov	r1, r0
 801d0d2:	ab03      	add	r3, sp, #12
 801d0d4:	4805      	ldr	r0, [pc, #20]	; (801d0ec <fiprintf+0x20>)
 801d0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d0da:	6800      	ldr	r0, [r0, #0]
 801d0dc:	9301      	str	r3, [sp, #4]
 801d0de:	f000 fcfd 	bl	801dadc <_vfiprintf_r>
 801d0e2:	b002      	add	sp, #8
 801d0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d0e8:	b003      	add	sp, #12
 801d0ea:	4770      	bx	lr
 801d0ec:	2000001c 	.word	0x2000001c

0801d0f0 <_fwalk_reent>:
 801d0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d0f4:	4606      	mov	r6, r0
 801d0f6:	4688      	mov	r8, r1
 801d0f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d0fc:	2700      	movs	r7, #0
 801d0fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d102:	f1b9 0901 	subs.w	r9, r9, #1
 801d106:	d505      	bpl.n	801d114 <_fwalk_reent+0x24>
 801d108:	6824      	ldr	r4, [r4, #0]
 801d10a:	2c00      	cmp	r4, #0
 801d10c:	d1f7      	bne.n	801d0fe <_fwalk_reent+0xe>
 801d10e:	4638      	mov	r0, r7
 801d110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d114:	89ab      	ldrh	r3, [r5, #12]
 801d116:	2b01      	cmp	r3, #1
 801d118:	d907      	bls.n	801d12a <_fwalk_reent+0x3a>
 801d11a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d11e:	3301      	adds	r3, #1
 801d120:	d003      	beq.n	801d12a <_fwalk_reent+0x3a>
 801d122:	4629      	mov	r1, r5
 801d124:	4630      	mov	r0, r6
 801d126:	47c0      	blx	r8
 801d128:	4307      	orrs	r7, r0
 801d12a:	3568      	adds	r5, #104	; 0x68
 801d12c:	e7e9      	b.n	801d102 <_fwalk_reent+0x12>
	...

0801d130 <_localeconv_r>:
 801d130:	4800      	ldr	r0, [pc, #0]	; (801d134 <_localeconv_r+0x4>)
 801d132:	4770      	bx	lr
 801d134:	20000170 	.word	0x20000170

0801d138 <__retarget_lock_init_recursive>:
 801d138:	4770      	bx	lr

0801d13a <__retarget_lock_acquire_recursive>:
 801d13a:	4770      	bx	lr

0801d13c <__retarget_lock_release_recursive>:
 801d13c:	4770      	bx	lr

0801d13e <__swhatbuf_r>:
 801d13e:	b570      	push	{r4, r5, r6, lr}
 801d140:	460e      	mov	r6, r1
 801d142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d146:	2900      	cmp	r1, #0
 801d148:	b096      	sub	sp, #88	; 0x58
 801d14a:	4614      	mov	r4, r2
 801d14c:	461d      	mov	r5, r3
 801d14e:	da07      	bge.n	801d160 <__swhatbuf_r+0x22>
 801d150:	2300      	movs	r3, #0
 801d152:	602b      	str	r3, [r5, #0]
 801d154:	89b3      	ldrh	r3, [r6, #12]
 801d156:	061a      	lsls	r2, r3, #24
 801d158:	d410      	bmi.n	801d17c <__swhatbuf_r+0x3e>
 801d15a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d15e:	e00e      	b.n	801d17e <__swhatbuf_r+0x40>
 801d160:	466a      	mov	r2, sp
 801d162:	f000 fe69 	bl	801de38 <_fstat_r>
 801d166:	2800      	cmp	r0, #0
 801d168:	dbf2      	blt.n	801d150 <__swhatbuf_r+0x12>
 801d16a:	9a01      	ldr	r2, [sp, #4]
 801d16c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d174:	425a      	negs	r2, r3
 801d176:	415a      	adcs	r2, r3
 801d178:	602a      	str	r2, [r5, #0]
 801d17a:	e7ee      	b.n	801d15a <__swhatbuf_r+0x1c>
 801d17c:	2340      	movs	r3, #64	; 0x40
 801d17e:	2000      	movs	r0, #0
 801d180:	6023      	str	r3, [r4, #0]
 801d182:	b016      	add	sp, #88	; 0x58
 801d184:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d188 <__smakebuf_r>:
 801d188:	898b      	ldrh	r3, [r1, #12]
 801d18a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d18c:	079d      	lsls	r5, r3, #30
 801d18e:	4606      	mov	r6, r0
 801d190:	460c      	mov	r4, r1
 801d192:	d507      	bpl.n	801d1a4 <__smakebuf_r+0x1c>
 801d194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d198:	6023      	str	r3, [r4, #0]
 801d19a:	6123      	str	r3, [r4, #16]
 801d19c:	2301      	movs	r3, #1
 801d19e:	6163      	str	r3, [r4, #20]
 801d1a0:	b002      	add	sp, #8
 801d1a2:	bd70      	pop	{r4, r5, r6, pc}
 801d1a4:	ab01      	add	r3, sp, #4
 801d1a6:	466a      	mov	r2, sp
 801d1a8:	f7ff ffc9 	bl	801d13e <__swhatbuf_r>
 801d1ac:	9900      	ldr	r1, [sp, #0]
 801d1ae:	4605      	mov	r5, r0
 801d1b0:	4630      	mov	r0, r6
 801d1b2:	f000 fc0f 	bl	801d9d4 <_malloc_r>
 801d1b6:	b948      	cbnz	r0, 801d1cc <__smakebuf_r+0x44>
 801d1b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d1bc:	059a      	lsls	r2, r3, #22
 801d1be:	d4ef      	bmi.n	801d1a0 <__smakebuf_r+0x18>
 801d1c0:	f023 0303 	bic.w	r3, r3, #3
 801d1c4:	f043 0302 	orr.w	r3, r3, #2
 801d1c8:	81a3      	strh	r3, [r4, #12]
 801d1ca:	e7e3      	b.n	801d194 <__smakebuf_r+0xc>
 801d1cc:	4b0d      	ldr	r3, [pc, #52]	; (801d204 <__smakebuf_r+0x7c>)
 801d1ce:	62b3      	str	r3, [r6, #40]	; 0x28
 801d1d0:	89a3      	ldrh	r3, [r4, #12]
 801d1d2:	6020      	str	r0, [r4, #0]
 801d1d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d1d8:	81a3      	strh	r3, [r4, #12]
 801d1da:	9b00      	ldr	r3, [sp, #0]
 801d1dc:	6163      	str	r3, [r4, #20]
 801d1de:	9b01      	ldr	r3, [sp, #4]
 801d1e0:	6120      	str	r0, [r4, #16]
 801d1e2:	b15b      	cbz	r3, 801d1fc <__smakebuf_r+0x74>
 801d1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d1e8:	4630      	mov	r0, r6
 801d1ea:	f000 fe37 	bl	801de5c <_isatty_r>
 801d1ee:	b128      	cbz	r0, 801d1fc <__smakebuf_r+0x74>
 801d1f0:	89a3      	ldrh	r3, [r4, #12]
 801d1f2:	f023 0303 	bic.w	r3, r3, #3
 801d1f6:	f043 0301 	orr.w	r3, r3, #1
 801d1fa:	81a3      	strh	r3, [r4, #12]
 801d1fc:	89a0      	ldrh	r0, [r4, #12]
 801d1fe:	4305      	orrs	r5, r0
 801d200:	81a5      	strh	r5, [r4, #12]
 801d202:	e7cd      	b.n	801d1a0 <__smakebuf_r+0x18>
 801d204:	0801cf69 	.word	0x0801cf69

0801d208 <malloc>:
 801d208:	4b02      	ldr	r3, [pc, #8]	; (801d214 <malloc+0xc>)
 801d20a:	4601      	mov	r1, r0
 801d20c:	6818      	ldr	r0, [r3, #0]
 801d20e:	f000 bbe1 	b.w	801d9d4 <_malloc_r>
 801d212:	bf00      	nop
 801d214:	2000001c 	.word	0x2000001c

0801d218 <_Balloc>:
 801d218:	b570      	push	{r4, r5, r6, lr}
 801d21a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d21c:	4604      	mov	r4, r0
 801d21e:	460d      	mov	r5, r1
 801d220:	b976      	cbnz	r6, 801d240 <_Balloc+0x28>
 801d222:	2010      	movs	r0, #16
 801d224:	f7ff fff0 	bl	801d208 <malloc>
 801d228:	4602      	mov	r2, r0
 801d22a:	6260      	str	r0, [r4, #36]	; 0x24
 801d22c:	b920      	cbnz	r0, 801d238 <_Balloc+0x20>
 801d22e:	4b18      	ldr	r3, [pc, #96]	; (801d290 <_Balloc+0x78>)
 801d230:	4818      	ldr	r0, [pc, #96]	; (801d294 <_Balloc+0x7c>)
 801d232:	2166      	movs	r1, #102	; 0x66
 801d234:	f7fe ff86 	bl	801c144 <__assert_func>
 801d238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d23c:	6006      	str	r6, [r0, #0]
 801d23e:	60c6      	str	r6, [r0, #12]
 801d240:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d242:	68f3      	ldr	r3, [r6, #12]
 801d244:	b183      	cbz	r3, 801d268 <_Balloc+0x50>
 801d246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d248:	68db      	ldr	r3, [r3, #12]
 801d24a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d24e:	b9b8      	cbnz	r0, 801d280 <_Balloc+0x68>
 801d250:	2101      	movs	r1, #1
 801d252:	fa01 f605 	lsl.w	r6, r1, r5
 801d256:	1d72      	adds	r2, r6, #5
 801d258:	0092      	lsls	r2, r2, #2
 801d25a:	4620      	mov	r0, r4
 801d25c:	f000 fb5a 	bl	801d914 <_calloc_r>
 801d260:	b160      	cbz	r0, 801d27c <_Balloc+0x64>
 801d262:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d266:	e00e      	b.n	801d286 <_Balloc+0x6e>
 801d268:	2221      	movs	r2, #33	; 0x21
 801d26a:	2104      	movs	r1, #4
 801d26c:	4620      	mov	r0, r4
 801d26e:	f000 fb51 	bl	801d914 <_calloc_r>
 801d272:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d274:	60f0      	str	r0, [r6, #12]
 801d276:	68db      	ldr	r3, [r3, #12]
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d1e4      	bne.n	801d246 <_Balloc+0x2e>
 801d27c:	2000      	movs	r0, #0
 801d27e:	bd70      	pop	{r4, r5, r6, pc}
 801d280:	6802      	ldr	r2, [r0, #0]
 801d282:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d286:	2300      	movs	r3, #0
 801d288:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d28c:	e7f7      	b.n	801d27e <_Balloc+0x66>
 801d28e:	bf00      	nop
 801d290:	08021e40 	.word	0x08021e40
 801d294:	08021fd0 	.word	0x08021fd0

0801d298 <_Bfree>:
 801d298:	b570      	push	{r4, r5, r6, lr}
 801d29a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d29c:	4605      	mov	r5, r0
 801d29e:	460c      	mov	r4, r1
 801d2a0:	b976      	cbnz	r6, 801d2c0 <_Bfree+0x28>
 801d2a2:	2010      	movs	r0, #16
 801d2a4:	f7ff ffb0 	bl	801d208 <malloc>
 801d2a8:	4602      	mov	r2, r0
 801d2aa:	6268      	str	r0, [r5, #36]	; 0x24
 801d2ac:	b920      	cbnz	r0, 801d2b8 <_Bfree+0x20>
 801d2ae:	4b09      	ldr	r3, [pc, #36]	; (801d2d4 <_Bfree+0x3c>)
 801d2b0:	4809      	ldr	r0, [pc, #36]	; (801d2d8 <_Bfree+0x40>)
 801d2b2:	218a      	movs	r1, #138	; 0x8a
 801d2b4:	f7fe ff46 	bl	801c144 <__assert_func>
 801d2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d2bc:	6006      	str	r6, [r0, #0]
 801d2be:	60c6      	str	r6, [r0, #12]
 801d2c0:	b13c      	cbz	r4, 801d2d2 <_Bfree+0x3a>
 801d2c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d2c4:	6862      	ldr	r2, [r4, #4]
 801d2c6:	68db      	ldr	r3, [r3, #12]
 801d2c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d2cc:	6021      	str	r1, [r4, #0]
 801d2ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d2d2:	bd70      	pop	{r4, r5, r6, pc}
 801d2d4:	08021e40 	.word	0x08021e40
 801d2d8:	08021fd0 	.word	0x08021fd0

0801d2dc <__multadd>:
 801d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2e0:	690e      	ldr	r6, [r1, #16]
 801d2e2:	4607      	mov	r7, r0
 801d2e4:	4698      	mov	r8, r3
 801d2e6:	460c      	mov	r4, r1
 801d2e8:	f101 0014 	add.w	r0, r1, #20
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	6805      	ldr	r5, [r0, #0]
 801d2f0:	b2a9      	uxth	r1, r5
 801d2f2:	fb02 8101 	mla	r1, r2, r1, r8
 801d2f6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d2fa:	0c2d      	lsrs	r5, r5, #16
 801d2fc:	fb02 c505 	mla	r5, r2, r5, ip
 801d300:	b289      	uxth	r1, r1
 801d302:	3301      	adds	r3, #1
 801d304:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d308:	429e      	cmp	r6, r3
 801d30a:	f840 1b04 	str.w	r1, [r0], #4
 801d30e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d312:	dcec      	bgt.n	801d2ee <__multadd+0x12>
 801d314:	f1b8 0f00 	cmp.w	r8, #0
 801d318:	d022      	beq.n	801d360 <__multadd+0x84>
 801d31a:	68a3      	ldr	r3, [r4, #8]
 801d31c:	42b3      	cmp	r3, r6
 801d31e:	dc19      	bgt.n	801d354 <__multadd+0x78>
 801d320:	6861      	ldr	r1, [r4, #4]
 801d322:	4638      	mov	r0, r7
 801d324:	3101      	adds	r1, #1
 801d326:	f7ff ff77 	bl	801d218 <_Balloc>
 801d32a:	4605      	mov	r5, r0
 801d32c:	b928      	cbnz	r0, 801d33a <__multadd+0x5e>
 801d32e:	4602      	mov	r2, r0
 801d330:	4b0d      	ldr	r3, [pc, #52]	; (801d368 <__multadd+0x8c>)
 801d332:	480e      	ldr	r0, [pc, #56]	; (801d36c <__multadd+0x90>)
 801d334:	21b5      	movs	r1, #181	; 0xb5
 801d336:	f7fe ff05 	bl	801c144 <__assert_func>
 801d33a:	6922      	ldr	r2, [r4, #16]
 801d33c:	3202      	adds	r2, #2
 801d33e:	f104 010c 	add.w	r1, r4, #12
 801d342:	0092      	lsls	r2, r2, #2
 801d344:	300c      	adds	r0, #12
 801d346:	f7fe f849 	bl	801b3dc <memcpy>
 801d34a:	4621      	mov	r1, r4
 801d34c:	4638      	mov	r0, r7
 801d34e:	f7ff ffa3 	bl	801d298 <_Bfree>
 801d352:	462c      	mov	r4, r5
 801d354:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d358:	3601      	adds	r6, #1
 801d35a:	f8c3 8014 	str.w	r8, [r3, #20]
 801d35e:	6126      	str	r6, [r4, #16]
 801d360:	4620      	mov	r0, r4
 801d362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d366:	bf00      	nop
 801d368:	08021f5e 	.word	0x08021f5e
 801d36c:	08021fd0 	.word	0x08021fd0

0801d370 <__hi0bits>:
 801d370:	0c03      	lsrs	r3, r0, #16
 801d372:	041b      	lsls	r3, r3, #16
 801d374:	b9d3      	cbnz	r3, 801d3ac <__hi0bits+0x3c>
 801d376:	0400      	lsls	r0, r0, #16
 801d378:	2310      	movs	r3, #16
 801d37a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d37e:	bf04      	itt	eq
 801d380:	0200      	lsleq	r0, r0, #8
 801d382:	3308      	addeq	r3, #8
 801d384:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d388:	bf04      	itt	eq
 801d38a:	0100      	lsleq	r0, r0, #4
 801d38c:	3304      	addeq	r3, #4
 801d38e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d392:	bf04      	itt	eq
 801d394:	0080      	lsleq	r0, r0, #2
 801d396:	3302      	addeq	r3, #2
 801d398:	2800      	cmp	r0, #0
 801d39a:	db05      	blt.n	801d3a8 <__hi0bits+0x38>
 801d39c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d3a0:	f103 0301 	add.w	r3, r3, #1
 801d3a4:	bf08      	it	eq
 801d3a6:	2320      	moveq	r3, #32
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	4770      	bx	lr
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	e7e4      	b.n	801d37a <__hi0bits+0xa>

0801d3b0 <__lo0bits>:
 801d3b0:	6803      	ldr	r3, [r0, #0]
 801d3b2:	f013 0207 	ands.w	r2, r3, #7
 801d3b6:	4601      	mov	r1, r0
 801d3b8:	d00b      	beq.n	801d3d2 <__lo0bits+0x22>
 801d3ba:	07da      	lsls	r2, r3, #31
 801d3bc:	d424      	bmi.n	801d408 <__lo0bits+0x58>
 801d3be:	0798      	lsls	r0, r3, #30
 801d3c0:	bf49      	itett	mi
 801d3c2:	085b      	lsrmi	r3, r3, #1
 801d3c4:	089b      	lsrpl	r3, r3, #2
 801d3c6:	2001      	movmi	r0, #1
 801d3c8:	600b      	strmi	r3, [r1, #0]
 801d3ca:	bf5c      	itt	pl
 801d3cc:	600b      	strpl	r3, [r1, #0]
 801d3ce:	2002      	movpl	r0, #2
 801d3d0:	4770      	bx	lr
 801d3d2:	b298      	uxth	r0, r3
 801d3d4:	b9b0      	cbnz	r0, 801d404 <__lo0bits+0x54>
 801d3d6:	0c1b      	lsrs	r3, r3, #16
 801d3d8:	2010      	movs	r0, #16
 801d3da:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d3de:	bf04      	itt	eq
 801d3e0:	0a1b      	lsreq	r3, r3, #8
 801d3e2:	3008      	addeq	r0, #8
 801d3e4:	071a      	lsls	r2, r3, #28
 801d3e6:	bf04      	itt	eq
 801d3e8:	091b      	lsreq	r3, r3, #4
 801d3ea:	3004      	addeq	r0, #4
 801d3ec:	079a      	lsls	r2, r3, #30
 801d3ee:	bf04      	itt	eq
 801d3f0:	089b      	lsreq	r3, r3, #2
 801d3f2:	3002      	addeq	r0, #2
 801d3f4:	07da      	lsls	r2, r3, #31
 801d3f6:	d403      	bmi.n	801d400 <__lo0bits+0x50>
 801d3f8:	085b      	lsrs	r3, r3, #1
 801d3fa:	f100 0001 	add.w	r0, r0, #1
 801d3fe:	d005      	beq.n	801d40c <__lo0bits+0x5c>
 801d400:	600b      	str	r3, [r1, #0]
 801d402:	4770      	bx	lr
 801d404:	4610      	mov	r0, r2
 801d406:	e7e8      	b.n	801d3da <__lo0bits+0x2a>
 801d408:	2000      	movs	r0, #0
 801d40a:	4770      	bx	lr
 801d40c:	2020      	movs	r0, #32
 801d40e:	4770      	bx	lr

0801d410 <__i2b>:
 801d410:	b510      	push	{r4, lr}
 801d412:	460c      	mov	r4, r1
 801d414:	2101      	movs	r1, #1
 801d416:	f7ff feff 	bl	801d218 <_Balloc>
 801d41a:	4602      	mov	r2, r0
 801d41c:	b928      	cbnz	r0, 801d42a <__i2b+0x1a>
 801d41e:	4b05      	ldr	r3, [pc, #20]	; (801d434 <__i2b+0x24>)
 801d420:	4805      	ldr	r0, [pc, #20]	; (801d438 <__i2b+0x28>)
 801d422:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d426:	f7fe fe8d 	bl	801c144 <__assert_func>
 801d42a:	2301      	movs	r3, #1
 801d42c:	6144      	str	r4, [r0, #20]
 801d42e:	6103      	str	r3, [r0, #16]
 801d430:	bd10      	pop	{r4, pc}
 801d432:	bf00      	nop
 801d434:	08021f5e 	.word	0x08021f5e
 801d438:	08021fd0 	.word	0x08021fd0

0801d43c <__multiply>:
 801d43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d440:	4614      	mov	r4, r2
 801d442:	690a      	ldr	r2, [r1, #16]
 801d444:	6923      	ldr	r3, [r4, #16]
 801d446:	429a      	cmp	r2, r3
 801d448:	bfb8      	it	lt
 801d44a:	460b      	movlt	r3, r1
 801d44c:	460d      	mov	r5, r1
 801d44e:	bfbc      	itt	lt
 801d450:	4625      	movlt	r5, r4
 801d452:	461c      	movlt	r4, r3
 801d454:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d458:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d45c:	68ab      	ldr	r3, [r5, #8]
 801d45e:	6869      	ldr	r1, [r5, #4]
 801d460:	eb0a 0709 	add.w	r7, sl, r9
 801d464:	42bb      	cmp	r3, r7
 801d466:	b085      	sub	sp, #20
 801d468:	bfb8      	it	lt
 801d46a:	3101      	addlt	r1, #1
 801d46c:	f7ff fed4 	bl	801d218 <_Balloc>
 801d470:	b930      	cbnz	r0, 801d480 <__multiply+0x44>
 801d472:	4602      	mov	r2, r0
 801d474:	4b42      	ldr	r3, [pc, #264]	; (801d580 <__multiply+0x144>)
 801d476:	4843      	ldr	r0, [pc, #268]	; (801d584 <__multiply+0x148>)
 801d478:	f240 115d 	movw	r1, #349	; 0x15d
 801d47c:	f7fe fe62 	bl	801c144 <__assert_func>
 801d480:	f100 0614 	add.w	r6, r0, #20
 801d484:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d488:	4633      	mov	r3, r6
 801d48a:	2200      	movs	r2, #0
 801d48c:	4543      	cmp	r3, r8
 801d48e:	d31e      	bcc.n	801d4ce <__multiply+0x92>
 801d490:	f105 0c14 	add.w	ip, r5, #20
 801d494:	f104 0314 	add.w	r3, r4, #20
 801d498:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d49c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d4a0:	9202      	str	r2, [sp, #8]
 801d4a2:	ebac 0205 	sub.w	r2, ip, r5
 801d4a6:	3a15      	subs	r2, #21
 801d4a8:	f022 0203 	bic.w	r2, r2, #3
 801d4ac:	3204      	adds	r2, #4
 801d4ae:	f105 0115 	add.w	r1, r5, #21
 801d4b2:	458c      	cmp	ip, r1
 801d4b4:	bf38      	it	cc
 801d4b6:	2204      	movcc	r2, #4
 801d4b8:	9201      	str	r2, [sp, #4]
 801d4ba:	9a02      	ldr	r2, [sp, #8]
 801d4bc:	9303      	str	r3, [sp, #12]
 801d4be:	429a      	cmp	r2, r3
 801d4c0:	d808      	bhi.n	801d4d4 <__multiply+0x98>
 801d4c2:	2f00      	cmp	r7, #0
 801d4c4:	dc55      	bgt.n	801d572 <__multiply+0x136>
 801d4c6:	6107      	str	r7, [r0, #16]
 801d4c8:	b005      	add	sp, #20
 801d4ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d4ce:	f843 2b04 	str.w	r2, [r3], #4
 801d4d2:	e7db      	b.n	801d48c <__multiply+0x50>
 801d4d4:	f8b3 a000 	ldrh.w	sl, [r3]
 801d4d8:	f1ba 0f00 	cmp.w	sl, #0
 801d4dc:	d020      	beq.n	801d520 <__multiply+0xe4>
 801d4de:	f105 0e14 	add.w	lr, r5, #20
 801d4e2:	46b1      	mov	r9, r6
 801d4e4:	2200      	movs	r2, #0
 801d4e6:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d4ea:	f8d9 b000 	ldr.w	fp, [r9]
 801d4ee:	b2a1      	uxth	r1, r4
 801d4f0:	fa1f fb8b 	uxth.w	fp, fp
 801d4f4:	fb0a b101 	mla	r1, sl, r1, fp
 801d4f8:	4411      	add	r1, r2
 801d4fa:	f8d9 2000 	ldr.w	r2, [r9]
 801d4fe:	0c24      	lsrs	r4, r4, #16
 801d500:	0c12      	lsrs	r2, r2, #16
 801d502:	fb0a 2404 	mla	r4, sl, r4, r2
 801d506:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d50a:	b289      	uxth	r1, r1
 801d50c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d510:	45f4      	cmp	ip, lr
 801d512:	f849 1b04 	str.w	r1, [r9], #4
 801d516:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d51a:	d8e4      	bhi.n	801d4e6 <__multiply+0xaa>
 801d51c:	9901      	ldr	r1, [sp, #4]
 801d51e:	5072      	str	r2, [r6, r1]
 801d520:	9a03      	ldr	r2, [sp, #12]
 801d522:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d526:	3304      	adds	r3, #4
 801d528:	f1b9 0f00 	cmp.w	r9, #0
 801d52c:	d01f      	beq.n	801d56e <__multiply+0x132>
 801d52e:	6834      	ldr	r4, [r6, #0]
 801d530:	f105 0114 	add.w	r1, r5, #20
 801d534:	46b6      	mov	lr, r6
 801d536:	f04f 0a00 	mov.w	sl, #0
 801d53a:	880a      	ldrh	r2, [r1, #0]
 801d53c:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d540:	fb09 b202 	mla	r2, r9, r2, fp
 801d544:	4492      	add	sl, r2
 801d546:	b2a4      	uxth	r4, r4
 801d548:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d54c:	f84e 4b04 	str.w	r4, [lr], #4
 801d550:	f851 4b04 	ldr.w	r4, [r1], #4
 801d554:	f8be 2000 	ldrh.w	r2, [lr]
 801d558:	0c24      	lsrs	r4, r4, #16
 801d55a:	fb09 2404 	mla	r4, r9, r4, r2
 801d55e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d562:	458c      	cmp	ip, r1
 801d564:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d568:	d8e7      	bhi.n	801d53a <__multiply+0xfe>
 801d56a:	9a01      	ldr	r2, [sp, #4]
 801d56c:	50b4      	str	r4, [r6, r2]
 801d56e:	3604      	adds	r6, #4
 801d570:	e7a3      	b.n	801d4ba <__multiply+0x7e>
 801d572:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d576:	2b00      	cmp	r3, #0
 801d578:	d1a5      	bne.n	801d4c6 <__multiply+0x8a>
 801d57a:	3f01      	subs	r7, #1
 801d57c:	e7a1      	b.n	801d4c2 <__multiply+0x86>
 801d57e:	bf00      	nop
 801d580:	08021f5e 	.word	0x08021f5e
 801d584:	08021fd0 	.word	0x08021fd0

0801d588 <__pow5mult>:
 801d588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d58c:	4615      	mov	r5, r2
 801d58e:	f012 0203 	ands.w	r2, r2, #3
 801d592:	4606      	mov	r6, r0
 801d594:	460f      	mov	r7, r1
 801d596:	d007      	beq.n	801d5a8 <__pow5mult+0x20>
 801d598:	4c25      	ldr	r4, [pc, #148]	; (801d630 <__pow5mult+0xa8>)
 801d59a:	3a01      	subs	r2, #1
 801d59c:	2300      	movs	r3, #0
 801d59e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d5a2:	f7ff fe9b 	bl	801d2dc <__multadd>
 801d5a6:	4607      	mov	r7, r0
 801d5a8:	10ad      	asrs	r5, r5, #2
 801d5aa:	d03d      	beq.n	801d628 <__pow5mult+0xa0>
 801d5ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d5ae:	b97c      	cbnz	r4, 801d5d0 <__pow5mult+0x48>
 801d5b0:	2010      	movs	r0, #16
 801d5b2:	f7ff fe29 	bl	801d208 <malloc>
 801d5b6:	4602      	mov	r2, r0
 801d5b8:	6270      	str	r0, [r6, #36]	; 0x24
 801d5ba:	b928      	cbnz	r0, 801d5c8 <__pow5mult+0x40>
 801d5bc:	4b1d      	ldr	r3, [pc, #116]	; (801d634 <__pow5mult+0xac>)
 801d5be:	481e      	ldr	r0, [pc, #120]	; (801d638 <__pow5mult+0xb0>)
 801d5c0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d5c4:	f7fe fdbe 	bl	801c144 <__assert_func>
 801d5c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d5cc:	6004      	str	r4, [r0, #0]
 801d5ce:	60c4      	str	r4, [r0, #12]
 801d5d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d5d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d5d8:	b94c      	cbnz	r4, 801d5ee <__pow5mult+0x66>
 801d5da:	f240 2171 	movw	r1, #625	; 0x271
 801d5de:	4630      	mov	r0, r6
 801d5e0:	f7ff ff16 	bl	801d410 <__i2b>
 801d5e4:	2300      	movs	r3, #0
 801d5e6:	f8c8 0008 	str.w	r0, [r8, #8]
 801d5ea:	4604      	mov	r4, r0
 801d5ec:	6003      	str	r3, [r0, #0]
 801d5ee:	f04f 0900 	mov.w	r9, #0
 801d5f2:	07eb      	lsls	r3, r5, #31
 801d5f4:	d50a      	bpl.n	801d60c <__pow5mult+0x84>
 801d5f6:	4639      	mov	r1, r7
 801d5f8:	4622      	mov	r2, r4
 801d5fa:	4630      	mov	r0, r6
 801d5fc:	f7ff ff1e 	bl	801d43c <__multiply>
 801d600:	4639      	mov	r1, r7
 801d602:	4680      	mov	r8, r0
 801d604:	4630      	mov	r0, r6
 801d606:	f7ff fe47 	bl	801d298 <_Bfree>
 801d60a:	4647      	mov	r7, r8
 801d60c:	106d      	asrs	r5, r5, #1
 801d60e:	d00b      	beq.n	801d628 <__pow5mult+0xa0>
 801d610:	6820      	ldr	r0, [r4, #0]
 801d612:	b938      	cbnz	r0, 801d624 <__pow5mult+0x9c>
 801d614:	4622      	mov	r2, r4
 801d616:	4621      	mov	r1, r4
 801d618:	4630      	mov	r0, r6
 801d61a:	f7ff ff0f 	bl	801d43c <__multiply>
 801d61e:	6020      	str	r0, [r4, #0]
 801d620:	f8c0 9000 	str.w	r9, [r0]
 801d624:	4604      	mov	r4, r0
 801d626:	e7e4      	b.n	801d5f2 <__pow5mult+0x6a>
 801d628:	4638      	mov	r0, r7
 801d62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d62e:	bf00      	nop
 801d630:	08022120 	.word	0x08022120
 801d634:	08021e40 	.word	0x08021e40
 801d638:	08021fd0 	.word	0x08021fd0

0801d63c <__lshift>:
 801d63c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d640:	460c      	mov	r4, r1
 801d642:	6849      	ldr	r1, [r1, #4]
 801d644:	6923      	ldr	r3, [r4, #16]
 801d646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d64a:	68a3      	ldr	r3, [r4, #8]
 801d64c:	4607      	mov	r7, r0
 801d64e:	4691      	mov	r9, r2
 801d650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d654:	f108 0601 	add.w	r6, r8, #1
 801d658:	42b3      	cmp	r3, r6
 801d65a:	db0b      	blt.n	801d674 <__lshift+0x38>
 801d65c:	4638      	mov	r0, r7
 801d65e:	f7ff fddb 	bl	801d218 <_Balloc>
 801d662:	4605      	mov	r5, r0
 801d664:	b948      	cbnz	r0, 801d67a <__lshift+0x3e>
 801d666:	4602      	mov	r2, r0
 801d668:	4b28      	ldr	r3, [pc, #160]	; (801d70c <__lshift+0xd0>)
 801d66a:	4829      	ldr	r0, [pc, #164]	; (801d710 <__lshift+0xd4>)
 801d66c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d670:	f7fe fd68 	bl	801c144 <__assert_func>
 801d674:	3101      	adds	r1, #1
 801d676:	005b      	lsls	r3, r3, #1
 801d678:	e7ee      	b.n	801d658 <__lshift+0x1c>
 801d67a:	2300      	movs	r3, #0
 801d67c:	f100 0114 	add.w	r1, r0, #20
 801d680:	f100 0210 	add.w	r2, r0, #16
 801d684:	4618      	mov	r0, r3
 801d686:	4553      	cmp	r3, sl
 801d688:	db33      	blt.n	801d6f2 <__lshift+0xb6>
 801d68a:	6920      	ldr	r0, [r4, #16]
 801d68c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d690:	f104 0314 	add.w	r3, r4, #20
 801d694:	f019 091f 	ands.w	r9, r9, #31
 801d698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d69c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d6a0:	d02b      	beq.n	801d6fa <__lshift+0xbe>
 801d6a2:	f1c9 0e20 	rsb	lr, r9, #32
 801d6a6:	468a      	mov	sl, r1
 801d6a8:	2200      	movs	r2, #0
 801d6aa:	6818      	ldr	r0, [r3, #0]
 801d6ac:	fa00 f009 	lsl.w	r0, r0, r9
 801d6b0:	4302      	orrs	r2, r0
 801d6b2:	f84a 2b04 	str.w	r2, [sl], #4
 801d6b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6ba:	459c      	cmp	ip, r3
 801d6bc:	fa22 f20e 	lsr.w	r2, r2, lr
 801d6c0:	d8f3      	bhi.n	801d6aa <__lshift+0x6e>
 801d6c2:	ebac 0304 	sub.w	r3, ip, r4
 801d6c6:	3b15      	subs	r3, #21
 801d6c8:	f023 0303 	bic.w	r3, r3, #3
 801d6cc:	3304      	adds	r3, #4
 801d6ce:	f104 0015 	add.w	r0, r4, #21
 801d6d2:	4584      	cmp	ip, r0
 801d6d4:	bf38      	it	cc
 801d6d6:	2304      	movcc	r3, #4
 801d6d8:	50ca      	str	r2, [r1, r3]
 801d6da:	b10a      	cbz	r2, 801d6e0 <__lshift+0xa4>
 801d6dc:	f108 0602 	add.w	r6, r8, #2
 801d6e0:	3e01      	subs	r6, #1
 801d6e2:	4638      	mov	r0, r7
 801d6e4:	612e      	str	r6, [r5, #16]
 801d6e6:	4621      	mov	r1, r4
 801d6e8:	f7ff fdd6 	bl	801d298 <_Bfree>
 801d6ec:	4628      	mov	r0, r5
 801d6ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d6f2:	f842 0f04 	str.w	r0, [r2, #4]!
 801d6f6:	3301      	adds	r3, #1
 801d6f8:	e7c5      	b.n	801d686 <__lshift+0x4a>
 801d6fa:	3904      	subs	r1, #4
 801d6fc:	f853 2b04 	ldr.w	r2, [r3], #4
 801d700:	f841 2f04 	str.w	r2, [r1, #4]!
 801d704:	459c      	cmp	ip, r3
 801d706:	d8f9      	bhi.n	801d6fc <__lshift+0xc0>
 801d708:	e7ea      	b.n	801d6e0 <__lshift+0xa4>
 801d70a:	bf00      	nop
 801d70c:	08021f5e 	.word	0x08021f5e
 801d710:	08021fd0 	.word	0x08021fd0

0801d714 <__mcmp>:
 801d714:	b530      	push	{r4, r5, lr}
 801d716:	6902      	ldr	r2, [r0, #16]
 801d718:	690c      	ldr	r4, [r1, #16]
 801d71a:	1b12      	subs	r2, r2, r4
 801d71c:	d10e      	bne.n	801d73c <__mcmp+0x28>
 801d71e:	f100 0314 	add.w	r3, r0, #20
 801d722:	3114      	adds	r1, #20
 801d724:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d728:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d72c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d730:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d734:	42a5      	cmp	r5, r4
 801d736:	d003      	beq.n	801d740 <__mcmp+0x2c>
 801d738:	d305      	bcc.n	801d746 <__mcmp+0x32>
 801d73a:	2201      	movs	r2, #1
 801d73c:	4610      	mov	r0, r2
 801d73e:	bd30      	pop	{r4, r5, pc}
 801d740:	4283      	cmp	r3, r0
 801d742:	d3f3      	bcc.n	801d72c <__mcmp+0x18>
 801d744:	e7fa      	b.n	801d73c <__mcmp+0x28>
 801d746:	f04f 32ff 	mov.w	r2, #4294967295
 801d74a:	e7f7      	b.n	801d73c <__mcmp+0x28>

0801d74c <__mdiff>:
 801d74c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d750:	460c      	mov	r4, r1
 801d752:	4606      	mov	r6, r0
 801d754:	4611      	mov	r1, r2
 801d756:	4620      	mov	r0, r4
 801d758:	4617      	mov	r7, r2
 801d75a:	f7ff ffdb 	bl	801d714 <__mcmp>
 801d75e:	1e05      	subs	r5, r0, #0
 801d760:	d110      	bne.n	801d784 <__mdiff+0x38>
 801d762:	4629      	mov	r1, r5
 801d764:	4630      	mov	r0, r6
 801d766:	f7ff fd57 	bl	801d218 <_Balloc>
 801d76a:	b930      	cbnz	r0, 801d77a <__mdiff+0x2e>
 801d76c:	4b39      	ldr	r3, [pc, #228]	; (801d854 <__mdiff+0x108>)
 801d76e:	4602      	mov	r2, r0
 801d770:	f240 2132 	movw	r1, #562	; 0x232
 801d774:	4838      	ldr	r0, [pc, #224]	; (801d858 <__mdiff+0x10c>)
 801d776:	f7fe fce5 	bl	801c144 <__assert_func>
 801d77a:	2301      	movs	r3, #1
 801d77c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d780:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d784:	bfa4      	itt	ge
 801d786:	463b      	movge	r3, r7
 801d788:	4627      	movge	r7, r4
 801d78a:	4630      	mov	r0, r6
 801d78c:	6879      	ldr	r1, [r7, #4]
 801d78e:	bfa6      	itte	ge
 801d790:	461c      	movge	r4, r3
 801d792:	2500      	movge	r5, #0
 801d794:	2501      	movlt	r5, #1
 801d796:	f7ff fd3f 	bl	801d218 <_Balloc>
 801d79a:	b920      	cbnz	r0, 801d7a6 <__mdiff+0x5a>
 801d79c:	4b2d      	ldr	r3, [pc, #180]	; (801d854 <__mdiff+0x108>)
 801d79e:	4602      	mov	r2, r0
 801d7a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d7a4:	e7e6      	b.n	801d774 <__mdiff+0x28>
 801d7a6:	693e      	ldr	r6, [r7, #16]
 801d7a8:	60c5      	str	r5, [r0, #12]
 801d7aa:	6925      	ldr	r5, [r4, #16]
 801d7ac:	f107 0114 	add.w	r1, r7, #20
 801d7b0:	f104 0914 	add.w	r9, r4, #20
 801d7b4:	f100 0e14 	add.w	lr, r0, #20
 801d7b8:	f107 0210 	add.w	r2, r7, #16
 801d7bc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d7c0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d7c4:	46f2      	mov	sl, lr
 801d7c6:	2700      	movs	r7, #0
 801d7c8:	f859 3b04 	ldr.w	r3, [r9], #4
 801d7cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d7d0:	fa1f f883 	uxth.w	r8, r3
 801d7d4:	fa17 f78b 	uxtah	r7, r7, fp
 801d7d8:	0c1b      	lsrs	r3, r3, #16
 801d7da:	eba7 0808 	sub.w	r8, r7, r8
 801d7de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d7e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d7e6:	fa1f f888 	uxth.w	r8, r8
 801d7ea:	141f      	asrs	r7, r3, #16
 801d7ec:	454d      	cmp	r5, r9
 801d7ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d7f2:	f84a 3b04 	str.w	r3, [sl], #4
 801d7f6:	d8e7      	bhi.n	801d7c8 <__mdiff+0x7c>
 801d7f8:	1b2b      	subs	r3, r5, r4
 801d7fa:	3b15      	subs	r3, #21
 801d7fc:	f023 0303 	bic.w	r3, r3, #3
 801d800:	3304      	adds	r3, #4
 801d802:	3415      	adds	r4, #21
 801d804:	42a5      	cmp	r5, r4
 801d806:	bf38      	it	cc
 801d808:	2304      	movcc	r3, #4
 801d80a:	4419      	add	r1, r3
 801d80c:	4473      	add	r3, lr
 801d80e:	469e      	mov	lr, r3
 801d810:	460d      	mov	r5, r1
 801d812:	4565      	cmp	r5, ip
 801d814:	d30e      	bcc.n	801d834 <__mdiff+0xe8>
 801d816:	f10c 0203 	add.w	r2, ip, #3
 801d81a:	1a52      	subs	r2, r2, r1
 801d81c:	f022 0203 	bic.w	r2, r2, #3
 801d820:	3903      	subs	r1, #3
 801d822:	458c      	cmp	ip, r1
 801d824:	bf38      	it	cc
 801d826:	2200      	movcc	r2, #0
 801d828:	441a      	add	r2, r3
 801d82a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d82e:	b17b      	cbz	r3, 801d850 <__mdiff+0x104>
 801d830:	6106      	str	r6, [r0, #16]
 801d832:	e7a5      	b.n	801d780 <__mdiff+0x34>
 801d834:	f855 8b04 	ldr.w	r8, [r5], #4
 801d838:	fa17 f488 	uxtah	r4, r7, r8
 801d83c:	1422      	asrs	r2, r4, #16
 801d83e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d842:	b2a4      	uxth	r4, r4
 801d844:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d848:	f84e 4b04 	str.w	r4, [lr], #4
 801d84c:	1417      	asrs	r7, r2, #16
 801d84e:	e7e0      	b.n	801d812 <__mdiff+0xc6>
 801d850:	3e01      	subs	r6, #1
 801d852:	e7ea      	b.n	801d82a <__mdiff+0xde>
 801d854:	08021f5e 	.word	0x08021f5e
 801d858:	08021fd0 	.word	0x08021fd0

0801d85c <__d2b>:
 801d85c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d860:	4689      	mov	r9, r1
 801d862:	2101      	movs	r1, #1
 801d864:	ec57 6b10 	vmov	r6, r7, d0
 801d868:	4690      	mov	r8, r2
 801d86a:	f7ff fcd5 	bl	801d218 <_Balloc>
 801d86e:	4604      	mov	r4, r0
 801d870:	b930      	cbnz	r0, 801d880 <__d2b+0x24>
 801d872:	4602      	mov	r2, r0
 801d874:	4b25      	ldr	r3, [pc, #148]	; (801d90c <__d2b+0xb0>)
 801d876:	4826      	ldr	r0, [pc, #152]	; (801d910 <__d2b+0xb4>)
 801d878:	f240 310a 	movw	r1, #778	; 0x30a
 801d87c:	f7fe fc62 	bl	801c144 <__assert_func>
 801d880:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d884:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d888:	bb35      	cbnz	r5, 801d8d8 <__d2b+0x7c>
 801d88a:	2e00      	cmp	r6, #0
 801d88c:	9301      	str	r3, [sp, #4]
 801d88e:	d028      	beq.n	801d8e2 <__d2b+0x86>
 801d890:	4668      	mov	r0, sp
 801d892:	9600      	str	r6, [sp, #0]
 801d894:	f7ff fd8c 	bl	801d3b0 <__lo0bits>
 801d898:	9900      	ldr	r1, [sp, #0]
 801d89a:	b300      	cbz	r0, 801d8de <__d2b+0x82>
 801d89c:	9a01      	ldr	r2, [sp, #4]
 801d89e:	f1c0 0320 	rsb	r3, r0, #32
 801d8a2:	fa02 f303 	lsl.w	r3, r2, r3
 801d8a6:	430b      	orrs	r3, r1
 801d8a8:	40c2      	lsrs	r2, r0
 801d8aa:	6163      	str	r3, [r4, #20]
 801d8ac:	9201      	str	r2, [sp, #4]
 801d8ae:	9b01      	ldr	r3, [sp, #4]
 801d8b0:	61a3      	str	r3, [r4, #24]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	bf14      	ite	ne
 801d8b6:	2202      	movne	r2, #2
 801d8b8:	2201      	moveq	r2, #1
 801d8ba:	6122      	str	r2, [r4, #16]
 801d8bc:	b1d5      	cbz	r5, 801d8f4 <__d2b+0x98>
 801d8be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d8c2:	4405      	add	r5, r0
 801d8c4:	f8c9 5000 	str.w	r5, [r9]
 801d8c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d8cc:	f8c8 0000 	str.w	r0, [r8]
 801d8d0:	4620      	mov	r0, r4
 801d8d2:	b003      	add	sp, #12
 801d8d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d8dc:	e7d5      	b.n	801d88a <__d2b+0x2e>
 801d8de:	6161      	str	r1, [r4, #20]
 801d8e0:	e7e5      	b.n	801d8ae <__d2b+0x52>
 801d8e2:	a801      	add	r0, sp, #4
 801d8e4:	f7ff fd64 	bl	801d3b0 <__lo0bits>
 801d8e8:	9b01      	ldr	r3, [sp, #4]
 801d8ea:	6163      	str	r3, [r4, #20]
 801d8ec:	2201      	movs	r2, #1
 801d8ee:	6122      	str	r2, [r4, #16]
 801d8f0:	3020      	adds	r0, #32
 801d8f2:	e7e3      	b.n	801d8bc <__d2b+0x60>
 801d8f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d8f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d8fc:	f8c9 0000 	str.w	r0, [r9]
 801d900:	6918      	ldr	r0, [r3, #16]
 801d902:	f7ff fd35 	bl	801d370 <__hi0bits>
 801d906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d90a:	e7df      	b.n	801d8cc <__d2b+0x70>
 801d90c:	08021f5e 	.word	0x08021f5e
 801d910:	08021fd0 	.word	0x08021fd0

0801d914 <_calloc_r>:
 801d914:	b513      	push	{r0, r1, r4, lr}
 801d916:	434a      	muls	r2, r1
 801d918:	4611      	mov	r1, r2
 801d91a:	9201      	str	r2, [sp, #4]
 801d91c:	f000 f85a 	bl	801d9d4 <_malloc_r>
 801d920:	4604      	mov	r4, r0
 801d922:	b118      	cbz	r0, 801d92c <_calloc_r+0x18>
 801d924:	9a01      	ldr	r2, [sp, #4]
 801d926:	2100      	movs	r1, #0
 801d928:	f7fd fd66 	bl	801b3f8 <memset>
 801d92c:	4620      	mov	r0, r4
 801d92e:	b002      	add	sp, #8
 801d930:	bd10      	pop	{r4, pc}
	...

0801d934 <_free_r>:
 801d934:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d936:	2900      	cmp	r1, #0
 801d938:	d048      	beq.n	801d9cc <_free_r+0x98>
 801d93a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d93e:	9001      	str	r0, [sp, #4]
 801d940:	2b00      	cmp	r3, #0
 801d942:	f1a1 0404 	sub.w	r4, r1, #4
 801d946:	bfb8      	it	lt
 801d948:	18e4      	addlt	r4, r4, r3
 801d94a:	f000 fabb 	bl	801dec4 <__malloc_lock>
 801d94e:	4a20      	ldr	r2, [pc, #128]	; (801d9d0 <_free_r+0x9c>)
 801d950:	9801      	ldr	r0, [sp, #4]
 801d952:	6813      	ldr	r3, [r2, #0]
 801d954:	4615      	mov	r5, r2
 801d956:	b933      	cbnz	r3, 801d966 <_free_r+0x32>
 801d958:	6063      	str	r3, [r4, #4]
 801d95a:	6014      	str	r4, [r2, #0]
 801d95c:	b003      	add	sp, #12
 801d95e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d962:	f000 bab5 	b.w	801ded0 <__malloc_unlock>
 801d966:	42a3      	cmp	r3, r4
 801d968:	d90b      	bls.n	801d982 <_free_r+0x4e>
 801d96a:	6821      	ldr	r1, [r4, #0]
 801d96c:	1862      	adds	r2, r4, r1
 801d96e:	4293      	cmp	r3, r2
 801d970:	bf04      	itt	eq
 801d972:	681a      	ldreq	r2, [r3, #0]
 801d974:	685b      	ldreq	r3, [r3, #4]
 801d976:	6063      	str	r3, [r4, #4]
 801d978:	bf04      	itt	eq
 801d97a:	1852      	addeq	r2, r2, r1
 801d97c:	6022      	streq	r2, [r4, #0]
 801d97e:	602c      	str	r4, [r5, #0]
 801d980:	e7ec      	b.n	801d95c <_free_r+0x28>
 801d982:	461a      	mov	r2, r3
 801d984:	685b      	ldr	r3, [r3, #4]
 801d986:	b10b      	cbz	r3, 801d98c <_free_r+0x58>
 801d988:	42a3      	cmp	r3, r4
 801d98a:	d9fa      	bls.n	801d982 <_free_r+0x4e>
 801d98c:	6811      	ldr	r1, [r2, #0]
 801d98e:	1855      	adds	r5, r2, r1
 801d990:	42a5      	cmp	r5, r4
 801d992:	d10b      	bne.n	801d9ac <_free_r+0x78>
 801d994:	6824      	ldr	r4, [r4, #0]
 801d996:	4421      	add	r1, r4
 801d998:	1854      	adds	r4, r2, r1
 801d99a:	42a3      	cmp	r3, r4
 801d99c:	6011      	str	r1, [r2, #0]
 801d99e:	d1dd      	bne.n	801d95c <_free_r+0x28>
 801d9a0:	681c      	ldr	r4, [r3, #0]
 801d9a2:	685b      	ldr	r3, [r3, #4]
 801d9a4:	6053      	str	r3, [r2, #4]
 801d9a6:	4421      	add	r1, r4
 801d9a8:	6011      	str	r1, [r2, #0]
 801d9aa:	e7d7      	b.n	801d95c <_free_r+0x28>
 801d9ac:	d902      	bls.n	801d9b4 <_free_r+0x80>
 801d9ae:	230c      	movs	r3, #12
 801d9b0:	6003      	str	r3, [r0, #0]
 801d9b2:	e7d3      	b.n	801d95c <_free_r+0x28>
 801d9b4:	6825      	ldr	r5, [r4, #0]
 801d9b6:	1961      	adds	r1, r4, r5
 801d9b8:	428b      	cmp	r3, r1
 801d9ba:	bf04      	itt	eq
 801d9bc:	6819      	ldreq	r1, [r3, #0]
 801d9be:	685b      	ldreq	r3, [r3, #4]
 801d9c0:	6063      	str	r3, [r4, #4]
 801d9c2:	bf04      	itt	eq
 801d9c4:	1949      	addeq	r1, r1, r5
 801d9c6:	6021      	streq	r1, [r4, #0]
 801d9c8:	6054      	str	r4, [r2, #4]
 801d9ca:	e7c7      	b.n	801d95c <_free_r+0x28>
 801d9cc:	b003      	add	sp, #12
 801d9ce:	bd30      	pop	{r4, r5, pc}
 801d9d0:	20004930 	.word	0x20004930

0801d9d4 <_malloc_r>:
 801d9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d9d6:	1ccd      	adds	r5, r1, #3
 801d9d8:	f025 0503 	bic.w	r5, r5, #3
 801d9dc:	3508      	adds	r5, #8
 801d9de:	2d0c      	cmp	r5, #12
 801d9e0:	bf38      	it	cc
 801d9e2:	250c      	movcc	r5, #12
 801d9e4:	2d00      	cmp	r5, #0
 801d9e6:	4606      	mov	r6, r0
 801d9e8:	db01      	blt.n	801d9ee <_malloc_r+0x1a>
 801d9ea:	42a9      	cmp	r1, r5
 801d9ec:	d903      	bls.n	801d9f6 <_malloc_r+0x22>
 801d9ee:	230c      	movs	r3, #12
 801d9f0:	6033      	str	r3, [r6, #0]
 801d9f2:	2000      	movs	r0, #0
 801d9f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d9f6:	f000 fa65 	bl	801dec4 <__malloc_lock>
 801d9fa:	4921      	ldr	r1, [pc, #132]	; (801da80 <_malloc_r+0xac>)
 801d9fc:	680a      	ldr	r2, [r1, #0]
 801d9fe:	4614      	mov	r4, r2
 801da00:	b99c      	cbnz	r4, 801da2a <_malloc_r+0x56>
 801da02:	4f20      	ldr	r7, [pc, #128]	; (801da84 <_malloc_r+0xb0>)
 801da04:	683b      	ldr	r3, [r7, #0]
 801da06:	b923      	cbnz	r3, 801da12 <_malloc_r+0x3e>
 801da08:	4621      	mov	r1, r4
 801da0a:	4630      	mov	r0, r6
 801da0c:	f000 f996 	bl	801dd3c <_sbrk_r>
 801da10:	6038      	str	r0, [r7, #0]
 801da12:	4629      	mov	r1, r5
 801da14:	4630      	mov	r0, r6
 801da16:	f000 f991 	bl	801dd3c <_sbrk_r>
 801da1a:	1c43      	adds	r3, r0, #1
 801da1c:	d123      	bne.n	801da66 <_malloc_r+0x92>
 801da1e:	230c      	movs	r3, #12
 801da20:	6033      	str	r3, [r6, #0]
 801da22:	4630      	mov	r0, r6
 801da24:	f000 fa54 	bl	801ded0 <__malloc_unlock>
 801da28:	e7e3      	b.n	801d9f2 <_malloc_r+0x1e>
 801da2a:	6823      	ldr	r3, [r4, #0]
 801da2c:	1b5b      	subs	r3, r3, r5
 801da2e:	d417      	bmi.n	801da60 <_malloc_r+0x8c>
 801da30:	2b0b      	cmp	r3, #11
 801da32:	d903      	bls.n	801da3c <_malloc_r+0x68>
 801da34:	6023      	str	r3, [r4, #0]
 801da36:	441c      	add	r4, r3
 801da38:	6025      	str	r5, [r4, #0]
 801da3a:	e004      	b.n	801da46 <_malloc_r+0x72>
 801da3c:	6863      	ldr	r3, [r4, #4]
 801da3e:	42a2      	cmp	r2, r4
 801da40:	bf0c      	ite	eq
 801da42:	600b      	streq	r3, [r1, #0]
 801da44:	6053      	strne	r3, [r2, #4]
 801da46:	4630      	mov	r0, r6
 801da48:	f000 fa42 	bl	801ded0 <__malloc_unlock>
 801da4c:	f104 000b 	add.w	r0, r4, #11
 801da50:	1d23      	adds	r3, r4, #4
 801da52:	f020 0007 	bic.w	r0, r0, #7
 801da56:	1ac2      	subs	r2, r0, r3
 801da58:	d0cc      	beq.n	801d9f4 <_malloc_r+0x20>
 801da5a:	1a1b      	subs	r3, r3, r0
 801da5c:	50a3      	str	r3, [r4, r2]
 801da5e:	e7c9      	b.n	801d9f4 <_malloc_r+0x20>
 801da60:	4622      	mov	r2, r4
 801da62:	6864      	ldr	r4, [r4, #4]
 801da64:	e7cc      	b.n	801da00 <_malloc_r+0x2c>
 801da66:	1cc4      	adds	r4, r0, #3
 801da68:	f024 0403 	bic.w	r4, r4, #3
 801da6c:	42a0      	cmp	r0, r4
 801da6e:	d0e3      	beq.n	801da38 <_malloc_r+0x64>
 801da70:	1a21      	subs	r1, r4, r0
 801da72:	4630      	mov	r0, r6
 801da74:	f000 f962 	bl	801dd3c <_sbrk_r>
 801da78:	3001      	adds	r0, #1
 801da7a:	d1dd      	bne.n	801da38 <_malloc_r+0x64>
 801da7c:	e7cf      	b.n	801da1e <_malloc_r+0x4a>
 801da7e:	bf00      	nop
 801da80:	20004930 	.word	0x20004930
 801da84:	20004934 	.word	0x20004934

0801da88 <__sfputc_r>:
 801da88:	6893      	ldr	r3, [r2, #8]
 801da8a:	3b01      	subs	r3, #1
 801da8c:	2b00      	cmp	r3, #0
 801da8e:	b410      	push	{r4}
 801da90:	6093      	str	r3, [r2, #8]
 801da92:	da08      	bge.n	801daa6 <__sfputc_r+0x1e>
 801da94:	6994      	ldr	r4, [r2, #24]
 801da96:	42a3      	cmp	r3, r4
 801da98:	db01      	blt.n	801da9e <__sfputc_r+0x16>
 801da9a:	290a      	cmp	r1, #10
 801da9c:	d103      	bne.n	801daa6 <__sfputc_r+0x1e>
 801da9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801daa2:	f7fe ba8f 	b.w	801bfc4 <__swbuf_r>
 801daa6:	6813      	ldr	r3, [r2, #0]
 801daa8:	1c58      	adds	r0, r3, #1
 801daaa:	6010      	str	r0, [r2, #0]
 801daac:	7019      	strb	r1, [r3, #0]
 801daae:	4608      	mov	r0, r1
 801dab0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dab4:	4770      	bx	lr

0801dab6 <__sfputs_r>:
 801dab6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dab8:	4606      	mov	r6, r0
 801daba:	460f      	mov	r7, r1
 801dabc:	4614      	mov	r4, r2
 801dabe:	18d5      	adds	r5, r2, r3
 801dac0:	42ac      	cmp	r4, r5
 801dac2:	d101      	bne.n	801dac8 <__sfputs_r+0x12>
 801dac4:	2000      	movs	r0, #0
 801dac6:	e007      	b.n	801dad8 <__sfputs_r+0x22>
 801dac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dacc:	463a      	mov	r2, r7
 801dace:	4630      	mov	r0, r6
 801dad0:	f7ff ffda 	bl	801da88 <__sfputc_r>
 801dad4:	1c43      	adds	r3, r0, #1
 801dad6:	d1f3      	bne.n	801dac0 <__sfputs_r+0xa>
 801dad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801dadc <_vfiprintf_r>:
 801dadc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dae0:	460d      	mov	r5, r1
 801dae2:	b09d      	sub	sp, #116	; 0x74
 801dae4:	4614      	mov	r4, r2
 801dae6:	4698      	mov	r8, r3
 801dae8:	4606      	mov	r6, r0
 801daea:	b118      	cbz	r0, 801daf4 <_vfiprintf_r+0x18>
 801daec:	6983      	ldr	r3, [r0, #24]
 801daee:	b90b      	cbnz	r3, 801daf4 <_vfiprintf_r+0x18>
 801daf0:	f7ff fa6e 	bl	801cfd0 <__sinit>
 801daf4:	4b89      	ldr	r3, [pc, #548]	; (801dd1c <_vfiprintf_r+0x240>)
 801daf6:	429d      	cmp	r5, r3
 801daf8:	d11b      	bne.n	801db32 <_vfiprintf_r+0x56>
 801dafa:	6875      	ldr	r5, [r6, #4]
 801dafc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dafe:	07d9      	lsls	r1, r3, #31
 801db00:	d405      	bmi.n	801db0e <_vfiprintf_r+0x32>
 801db02:	89ab      	ldrh	r3, [r5, #12]
 801db04:	059a      	lsls	r2, r3, #22
 801db06:	d402      	bmi.n	801db0e <_vfiprintf_r+0x32>
 801db08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db0a:	f7ff fb16 	bl	801d13a <__retarget_lock_acquire_recursive>
 801db0e:	89ab      	ldrh	r3, [r5, #12]
 801db10:	071b      	lsls	r3, r3, #28
 801db12:	d501      	bpl.n	801db18 <_vfiprintf_r+0x3c>
 801db14:	692b      	ldr	r3, [r5, #16]
 801db16:	b9eb      	cbnz	r3, 801db54 <_vfiprintf_r+0x78>
 801db18:	4629      	mov	r1, r5
 801db1a:	4630      	mov	r0, r6
 801db1c:	f7fe faa4 	bl	801c068 <__swsetup_r>
 801db20:	b1c0      	cbz	r0, 801db54 <_vfiprintf_r+0x78>
 801db22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db24:	07dc      	lsls	r4, r3, #31
 801db26:	d50e      	bpl.n	801db46 <_vfiprintf_r+0x6a>
 801db28:	f04f 30ff 	mov.w	r0, #4294967295
 801db2c:	b01d      	add	sp, #116	; 0x74
 801db2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db32:	4b7b      	ldr	r3, [pc, #492]	; (801dd20 <_vfiprintf_r+0x244>)
 801db34:	429d      	cmp	r5, r3
 801db36:	d101      	bne.n	801db3c <_vfiprintf_r+0x60>
 801db38:	68b5      	ldr	r5, [r6, #8]
 801db3a:	e7df      	b.n	801dafc <_vfiprintf_r+0x20>
 801db3c:	4b79      	ldr	r3, [pc, #484]	; (801dd24 <_vfiprintf_r+0x248>)
 801db3e:	429d      	cmp	r5, r3
 801db40:	bf08      	it	eq
 801db42:	68f5      	ldreq	r5, [r6, #12]
 801db44:	e7da      	b.n	801dafc <_vfiprintf_r+0x20>
 801db46:	89ab      	ldrh	r3, [r5, #12]
 801db48:	0598      	lsls	r0, r3, #22
 801db4a:	d4ed      	bmi.n	801db28 <_vfiprintf_r+0x4c>
 801db4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db4e:	f7ff faf5 	bl	801d13c <__retarget_lock_release_recursive>
 801db52:	e7e9      	b.n	801db28 <_vfiprintf_r+0x4c>
 801db54:	2300      	movs	r3, #0
 801db56:	9309      	str	r3, [sp, #36]	; 0x24
 801db58:	2320      	movs	r3, #32
 801db5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801db5e:	f8cd 800c 	str.w	r8, [sp, #12]
 801db62:	2330      	movs	r3, #48	; 0x30
 801db64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dd28 <_vfiprintf_r+0x24c>
 801db68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801db6c:	f04f 0901 	mov.w	r9, #1
 801db70:	4623      	mov	r3, r4
 801db72:	469a      	mov	sl, r3
 801db74:	f813 2b01 	ldrb.w	r2, [r3], #1
 801db78:	b10a      	cbz	r2, 801db7e <_vfiprintf_r+0xa2>
 801db7a:	2a25      	cmp	r2, #37	; 0x25
 801db7c:	d1f9      	bne.n	801db72 <_vfiprintf_r+0x96>
 801db7e:	ebba 0b04 	subs.w	fp, sl, r4
 801db82:	d00b      	beq.n	801db9c <_vfiprintf_r+0xc0>
 801db84:	465b      	mov	r3, fp
 801db86:	4622      	mov	r2, r4
 801db88:	4629      	mov	r1, r5
 801db8a:	4630      	mov	r0, r6
 801db8c:	f7ff ff93 	bl	801dab6 <__sfputs_r>
 801db90:	3001      	adds	r0, #1
 801db92:	f000 80aa 	beq.w	801dcea <_vfiprintf_r+0x20e>
 801db96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801db98:	445a      	add	r2, fp
 801db9a:	9209      	str	r2, [sp, #36]	; 0x24
 801db9c:	f89a 3000 	ldrb.w	r3, [sl]
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	f000 80a2 	beq.w	801dcea <_vfiprintf_r+0x20e>
 801dba6:	2300      	movs	r3, #0
 801dba8:	f04f 32ff 	mov.w	r2, #4294967295
 801dbac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dbb0:	f10a 0a01 	add.w	sl, sl, #1
 801dbb4:	9304      	str	r3, [sp, #16]
 801dbb6:	9307      	str	r3, [sp, #28]
 801dbb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dbbc:	931a      	str	r3, [sp, #104]	; 0x68
 801dbbe:	4654      	mov	r4, sl
 801dbc0:	2205      	movs	r2, #5
 801dbc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dbc6:	4858      	ldr	r0, [pc, #352]	; (801dd28 <_vfiprintf_r+0x24c>)
 801dbc8:	f7e2 fb42 	bl	8000250 <memchr>
 801dbcc:	9a04      	ldr	r2, [sp, #16]
 801dbce:	b9d8      	cbnz	r0, 801dc08 <_vfiprintf_r+0x12c>
 801dbd0:	06d1      	lsls	r1, r2, #27
 801dbd2:	bf44      	itt	mi
 801dbd4:	2320      	movmi	r3, #32
 801dbd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbda:	0713      	lsls	r3, r2, #28
 801dbdc:	bf44      	itt	mi
 801dbde:	232b      	movmi	r3, #43	; 0x2b
 801dbe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dbe4:	f89a 3000 	ldrb.w	r3, [sl]
 801dbe8:	2b2a      	cmp	r3, #42	; 0x2a
 801dbea:	d015      	beq.n	801dc18 <_vfiprintf_r+0x13c>
 801dbec:	9a07      	ldr	r2, [sp, #28]
 801dbee:	4654      	mov	r4, sl
 801dbf0:	2000      	movs	r0, #0
 801dbf2:	f04f 0c0a 	mov.w	ip, #10
 801dbf6:	4621      	mov	r1, r4
 801dbf8:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dbfc:	3b30      	subs	r3, #48	; 0x30
 801dbfe:	2b09      	cmp	r3, #9
 801dc00:	d94e      	bls.n	801dca0 <_vfiprintf_r+0x1c4>
 801dc02:	b1b0      	cbz	r0, 801dc32 <_vfiprintf_r+0x156>
 801dc04:	9207      	str	r2, [sp, #28]
 801dc06:	e014      	b.n	801dc32 <_vfiprintf_r+0x156>
 801dc08:	eba0 0308 	sub.w	r3, r0, r8
 801dc0c:	fa09 f303 	lsl.w	r3, r9, r3
 801dc10:	4313      	orrs	r3, r2
 801dc12:	9304      	str	r3, [sp, #16]
 801dc14:	46a2      	mov	sl, r4
 801dc16:	e7d2      	b.n	801dbbe <_vfiprintf_r+0xe2>
 801dc18:	9b03      	ldr	r3, [sp, #12]
 801dc1a:	1d19      	adds	r1, r3, #4
 801dc1c:	681b      	ldr	r3, [r3, #0]
 801dc1e:	9103      	str	r1, [sp, #12]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	bfbb      	ittet	lt
 801dc24:	425b      	neglt	r3, r3
 801dc26:	f042 0202 	orrlt.w	r2, r2, #2
 801dc2a:	9307      	strge	r3, [sp, #28]
 801dc2c:	9307      	strlt	r3, [sp, #28]
 801dc2e:	bfb8      	it	lt
 801dc30:	9204      	strlt	r2, [sp, #16]
 801dc32:	7823      	ldrb	r3, [r4, #0]
 801dc34:	2b2e      	cmp	r3, #46	; 0x2e
 801dc36:	d10c      	bne.n	801dc52 <_vfiprintf_r+0x176>
 801dc38:	7863      	ldrb	r3, [r4, #1]
 801dc3a:	2b2a      	cmp	r3, #42	; 0x2a
 801dc3c:	d135      	bne.n	801dcaa <_vfiprintf_r+0x1ce>
 801dc3e:	9b03      	ldr	r3, [sp, #12]
 801dc40:	1d1a      	adds	r2, r3, #4
 801dc42:	681b      	ldr	r3, [r3, #0]
 801dc44:	9203      	str	r2, [sp, #12]
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	bfb8      	it	lt
 801dc4a:	f04f 33ff 	movlt.w	r3, #4294967295
 801dc4e:	3402      	adds	r4, #2
 801dc50:	9305      	str	r3, [sp, #20]
 801dc52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801dd38 <_vfiprintf_r+0x25c>
 801dc56:	7821      	ldrb	r1, [r4, #0]
 801dc58:	2203      	movs	r2, #3
 801dc5a:	4650      	mov	r0, sl
 801dc5c:	f7e2 faf8 	bl	8000250 <memchr>
 801dc60:	b140      	cbz	r0, 801dc74 <_vfiprintf_r+0x198>
 801dc62:	2340      	movs	r3, #64	; 0x40
 801dc64:	eba0 000a 	sub.w	r0, r0, sl
 801dc68:	fa03 f000 	lsl.w	r0, r3, r0
 801dc6c:	9b04      	ldr	r3, [sp, #16]
 801dc6e:	4303      	orrs	r3, r0
 801dc70:	3401      	adds	r4, #1
 801dc72:	9304      	str	r3, [sp, #16]
 801dc74:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc78:	482c      	ldr	r0, [pc, #176]	; (801dd2c <_vfiprintf_r+0x250>)
 801dc7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dc7e:	2206      	movs	r2, #6
 801dc80:	f7e2 fae6 	bl	8000250 <memchr>
 801dc84:	2800      	cmp	r0, #0
 801dc86:	d03f      	beq.n	801dd08 <_vfiprintf_r+0x22c>
 801dc88:	4b29      	ldr	r3, [pc, #164]	; (801dd30 <_vfiprintf_r+0x254>)
 801dc8a:	bb1b      	cbnz	r3, 801dcd4 <_vfiprintf_r+0x1f8>
 801dc8c:	9b03      	ldr	r3, [sp, #12]
 801dc8e:	3307      	adds	r3, #7
 801dc90:	f023 0307 	bic.w	r3, r3, #7
 801dc94:	3308      	adds	r3, #8
 801dc96:	9303      	str	r3, [sp, #12]
 801dc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dc9a:	443b      	add	r3, r7
 801dc9c:	9309      	str	r3, [sp, #36]	; 0x24
 801dc9e:	e767      	b.n	801db70 <_vfiprintf_r+0x94>
 801dca0:	fb0c 3202 	mla	r2, ip, r2, r3
 801dca4:	460c      	mov	r4, r1
 801dca6:	2001      	movs	r0, #1
 801dca8:	e7a5      	b.n	801dbf6 <_vfiprintf_r+0x11a>
 801dcaa:	2300      	movs	r3, #0
 801dcac:	3401      	adds	r4, #1
 801dcae:	9305      	str	r3, [sp, #20]
 801dcb0:	4619      	mov	r1, r3
 801dcb2:	f04f 0c0a 	mov.w	ip, #10
 801dcb6:	4620      	mov	r0, r4
 801dcb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dcbc:	3a30      	subs	r2, #48	; 0x30
 801dcbe:	2a09      	cmp	r2, #9
 801dcc0:	d903      	bls.n	801dcca <_vfiprintf_r+0x1ee>
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d0c5      	beq.n	801dc52 <_vfiprintf_r+0x176>
 801dcc6:	9105      	str	r1, [sp, #20]
 801dcc8:	e7c3      	b.n	801dc52 <_vfiprintf_r+0x176>
 801dcca:	fb0c 2101 	mla	r1, ip, r1, r2
 801dcce:	4604      	mov	r4, r0
 801dcd0:	2301      	movs	r3, #1
 801dcd2:	e7f0      	b.n	801dcb6 <_vfiprintf_r+0x1da>
 801dcd4:	ab03      	add	r3, sp, #12
 801dcd6:	9300      	str	r3, [sp, #0]
 801dcd8:	462a      	mov	r2, r5
 801dcda:	4b16      	ldr	r3, [pc, #88]	; (801dd34 <_vfiprintf_r+0x258>)
 801dcdc:	a904      	add	r1, sp, #16
 801dcde:	4630      	mov	r0, r6
 801dce0:	f7fd fc22 	bl	801b528 <_printf_float>
 801dce4:	4607      	mov	r7, r0
 801dce6:	1c78      	adds	r0, r7, #1
 801dce8:	d1d6      	bne.n	801dc98 <_vfiprintf_r+0x1bc>
 801dcea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dcec:	07d9      	lsls	r1, r3, #31
 801dcee:	d405      	bmi.n	801dcfc <_vfiprintf_r+0x220>
 801dcf0:	89ab      	ldrh	r3, [r5, #12]
 801dcf2:	059a      	lsls	r2, r3, #22
 801dcf4:	d402      	bmi.n	801dcfc <_vfiprintf_r+0x220>
 801dcf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dcf8:	f7ff fa20 	bl	801d13c <__retarget_lock_release_recursive>
 801dcfc:	89ab      	ldrh	r3, [r5, #12]
 801dcfe:	065b      	lsls	r3, r3, #25
 801dd00:	f53f af12 	bmi.w	801db28 <_vfiprintf_r+0x4c>
 801dd04:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd06:	e711      	b.n	801db2c <_vfiprintf_r+0x50>
 801dd08:	ab03      	add	r3, sp, #12
 801dd0a:	9300      	str	r3, [sp, #0]
 801dd0c:	462a      	mov	r2, r5
 801dd0e:	4b09      	ldr	r3, [pc, #36]	; (801dd34 <_vfiprintf_r+0x258>)
 801dd10:	a904      	add	r1, sp, #16
 801dd12:	4630      	mov	r0, r6
 801dd14:	f7fd fe94 	bl	801ba40 <_printf_i>
 801dd18:	e7e4      	b.n	801dce4 <_vfiprintf_r+0x208>
 801dd1a:	bf00      	nop
 801dd1c:	08021f90 	.word	0x08021f90
 801dd20:	08021fb0 	.word	0x08021fb0
 801dd24:	08021f70 	.word	0x08021f70
 801dd28:	0802212c 	.word	0x0802212c
 801dd2c:	08022136 	.word	0x08022136
 801dd30:	0801b529 	.word	0x0801b529
 801dd34:	0801dab7 	.word	0x0801dab7
 801dd38:	08022132 	.word	0x08022132

0801dd3c <_sbrk_r>:
 801dd3c:	b538      	push	{r3, r4, r5, lr}
 801dd3e:	4d06      	ldr	r5, [pc, #24]	; (801dd58 <_sbrk_r+0x1c>)
 801dd40:	2300      	movs	r3, #0
 801dd42:	4604      	mov	r4, r0
 801dd44:	4608      	mov	r0, r1
 801dd46:	602b      	str	r3, [r5, #0]
 801dd48:	f7e4 f88c 	bl	8001e64 <_sbrk>
 801dd4c:	1c43      	adds	r3, r0, #1
 801dd4e:	d102      	bne.n	801dd56 <_sbrk_r+0x1a>
 801dd50:	682b      	ldr	r3, [r5, #0]
 801dd52:	b103      	cbz	r3, 801dd56 <_sbrk_r+0x1a>
 801dd54:	6023      	str	r3, [r4, #0]
 801dd56:	bd38      	pop	{r3, r4, r5, pc}
 801dd58:	2000d7d8 	.word	0x2000d7d8

0801dd5c <__sread>:
 801dd5c:	b510      	push	{r4, lr}
 801dd5e:	460c      	mov	r4, r1
 801dd60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd64:	f000 f8ba 	bl	801dedc <_read_r>
 801dd68:	2800      	cmp	r0, #0
 801dd6a:	bfab      	itete	ge
 801dd6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd6e:	89a3      	ldrhlt	r3, [r4, #12]
 801dd70:	181b      	addge	r3, r3, r0
 801dd72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd76:	bfac      	ite	ge
 801dd78:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd7a:	81a3      	strhlt	r3, [r4, #12]
 801dd7c:	bd10      	pop	{r4, pc}

0801dd7e <__swrite>:
 801dd7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd82:	461f      	mov	r7, r3
 801dd84:	898b      	ldrh	r3, [r1, #12]
 801dd86:	05db      	lsls	r3, r3, #23
 801dd88:	4605      	mov	r5, r0
 801dd8a:	460c      	mov	r4, r1
 801dd8c:	4616      	mov	r6, r2
 801dd8e:	d505      	bpl.n	801dd9c <__swrite+0x1e>
 801dd90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd94:	2302      	movs	r3, #2
 801dd96:	2200      	movs	r2, #0
 801dd98:	f000 f870 	bl	801de7c <_lseek_r>
 801dd9c:	89a3      	ldrh	r3, [r4, #12]
 801dd9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dda2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801dda6:	81a3      	strh	r3, [r4, #12]
 801dda8:	4632      	mov	r2, r6
 801ddaa:	463b      	mov	r3, r7
 801ddac:	4628      	mov	r0, r5
 801ddae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddb2:	f000 b817 	b.w	801dde4 <_write_r>

0801ddb6 <__sseek>:
 801ddb6:	b510      	push	{r4, lr}
 801ddb8:	460c      	mov	r4, r1
 801ddba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddbe:	f000 f85d 	bl	801de7c <_lseek_r>
 801ddc2:	1c43      	adds	r3, r0, #1
 801ddc4:	89a3      	ldrh	r3, [r4, #12]
 801ddc6:	bf15      	itete	ne
 801ddc8:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ddd2:	81a3      	strheq	r3, [r4, #12]
 801ddd4:	bf18      	it	ne
 801ddd6:	81a3      	strhne	r3, [r4, #12]
 801ddd8:	bd10      	pop	{r4, pc}

0801ddda <__sclose>:
 801ddda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddde:	f000 b81b 	b.w	801de18 <_close_r>
	...

0801dde4 <_write_r>:
 801dde4:	b538      	push	{r3, r4, r5, lr}
 801dde6:	4d07      	ldr	r5, [pc, #28]	; (801de04 <_write_r+0x20>)
 801dde8:	4604      	mov	r4, r0
 801ddea:	4608      	mov	r0, r1
 801ddec:	4611      	mov	r1, r2
 801ddee:	2200      	movs	r2, #0
 801ddf0:	602a      	str	r2, [r5, #0]
 801ddf2:	461a      	mov	r2, r3
 801ddf4:	f7e3 ffe5 	bl	8001dc2 <_write>
 801ddf8:	1c43      	adds	r3, r0, #1
 801ddfa:	d102      	bne.n	801de02 <_write_r+0x1e>
 801ddfc:	682b      	ldr	r3, [r5, #0]
 801ddfe:	b103      	cbz	r3, 801de02 <_write_r+0x1e>
 801de00:	6023      	str	r3, [r4, #0]
 801de02:	bd38      	pop	{r3, r4, r5, pc}
 801de04:	2000d7d8 	.word	0x2000d7d8

0801de08 <abort>:
 801de08:	b508      	push	{r3, lr}
 801de0a:	2006      	movs	r0, #6
 801de0c:	f000 f8a0 	bl	801df50 <raise>
 801de10:	2001      	movs	r0, #1
 801de12:	f7e3 ffaf 	bl	8001d74 <_exit>
	...

0801de18 <_close_r>:
 801de18:	b538      	push	{r3, r4, r5, lr}
 801de1a:	4d06      	ldr	r5, [pc, #24]	; (801de34 <_close_r+0x1c>)
 801de1c:	2300      	movs	r3, #0
 801de1e:	4604      	mov	r4, r0
 801de20:	4608      	mov	r0, r1
 801de22:	602b      	str	r3, [r5, #0]
 801de24:	f7e3 ffe9 	bl	8001dfa <_close>
 801de28:	1c43      	adds	r3, r0, #1
 801de2a:	d102      	bne.n	801de32 <_close_r+0x1a>
 801de2c:	682b      	ldr	r3, [r5, #0]
 801de2e:	b103      	cbz	r3, 801de32 <_close_r+0x1a>
 801de30:	6023      	str	r3, [r4, #0]
 801de32:	bd38      	pop	{r3, r4, r5, pc}
 801de34:	2000d7d8 	.word	0x2000d7d8

0801de38 <_fstat_r>:
 801de38:	b538      	push	{r3, r4, r5, lr}
 801de3a:	4d07      	ldr	r5, [pc, #28]	; (801de58 <_fstat_r+0x20>)
 801de3c:	2300      	movs	r3, #0
 801de3e:	4604      	mov	r4, r0
 801de40:	4608      	mov	r0, r1
 801de42:	4611      	mov	r1, r2
 801de44:	602b      	str	r3, [r5, #0]
 801de46:	f7e3 ffe4 	bl	8001e12 <_fstat>
 801de4a:	1c43      	adds	r3, r0, #1
 801de4c:	d102      	bne.n	801de54 <_fstat_r+0x1c>
 801de4e:	682b      	ldr	r3, [r5, #0]
 801de50:	b103      	cbz	r3, 801de54 <_fstat_r+0x1c>
 801de52:	6023      	str	r3, [r4, #0]
 801de54:	bd38      	pop	{r3, r4, r5, pc}
 801de56:	bf00      	nop
 801de58:	2000d7d8 	.word	0x2000d7d8

0801de5c <_isatty_r>:
 801de5c:	b538      	push	{r3, r4, r5, lr}
 801de5e:	4d06      	ldr	r5, [pc, #24]	; (801de78 <_isatty_r+0x1c>)
 801de60:	2300      	movs	r3, #0
 801de62:	4604      	mov	r4, r0
 801de64:	4608      	mov	r0, r1
 801de66:	602b      	str	r3, [r5, #0]
 801de68:	f7e3 ffe3 	bl	8001e32 <_isatty>
 801de6c:	1c43      	adds	r3, r0, #1
 801de6e:	d102      	bne.n	801de76 <_isatty_r+0x1a>
 801de70:	682b      	ldr	r3, [r5, #0]
 801de72:	b103      	cbz	r3, 801de76 <_isatty_r+0x1a>
 801de74:	6023      	str	r3, [r4, #0]
 801de76:	bd38      	pop	{r3, r4, r5, pc}
 801de78:	2000d7d8 	.word	0x2000d7d8

0801de7c <_lseek_r>:
 801de7c:	b538      	push	{r3, r4, r5, lr}
 801de7e:	4d07      	ldr	r5, [pc, #28]	; (801de9c <_lseek_r+0x20>)
 801de80:	4604      	mov	r4, r0
 801de82:	4608      	mov	r0, r1
 801de84:	4611      	mov	r1, r2
 801de86:	2200      	movs	r2, #0
 801de88:	602a      	str	r2, [r5, #0]
 801de8a:	461a      	mov	r2, r3
 801de8c:	f7e3 ffdc 	bl	8001e48 <_lseek>
 801de90:	1c43      	adds	r3, r0, #1
 801de92:	d102      	bne.n	801de9a <_lseek_r+0x1e>
 801de94:	682b      	ldr	r3, [r5, #0]
 801de96:	b103      	cbz	r3, 801de9a <_lseek_r+0x1e>
 801de98:	6023      	str	r3, [r4, #0]
 801de9a:	bd38      	pop	{r3, r4, r5, pc}
 801de9c:	2000d7d8 	.word	0x2000d7d8

0801dea0 <__ascii_mbtowc>:
 801dea0:	b082      	sub	sp, #8
 801dea2:	b901      	cbnz	r1, 801dea6 <__ascii_mbtowc+0x6>
 801dea4:	a901      	add	r1, sp, #4
 801dea6:	b142      	cbz	r2, 801deba <__ascii_mbtowc+0x1a>
 801dea8:	b14b      	cbz	r3, 801debe <__ascii_mbtowc+0x1e>
 801deaa:	7813      	ldrb	r3, [r2, #0]
 801deac:	600b      	str	r3, [r1, #0]
 801deae:	7812      	ldrb	r2, [r2, #0]
 801deb0:	1e10      	subs	r0, r2, #0
 801deb2:	bf18      	it	ne
 801deb4:	2001      	movne	r0, #1
 801deb6:	b002      	add	sp, #8
 801deb8:	4770      	bx	lr
 801deba:	4610      	mov	r0, r2
 801debc:	e7fb      	b.n	801deb6 <__ascii_mbtowc+0x16>
 801debe:	f06f 0001 	mvn.w	r0, #1
 801dec2:	e7f8      	b.n	801deb6 <__ascii_mbtowc+0x16>

0801dec4 <__malloc_lock>:
 801dec4:	4801      	ldr	r0, [pc, #4]	; (801decc <__malloc_lock+0x8>)
 801dec6:	f7ff b938 	b.w	801d13a <__retarget_lock_acquire_recursive>
 801deca:	bf00      	nop
 801decc:	2000d7e4 	.word	0x2000d7e4

0801ded0 <__malloc_unlock>:
 801ded0:	4801      	ldr	r0, [pc, #4]	; (801ded8 <__malloc_unlock+0x8>)
 801ded2:	f7ff b933 	b.w	801d13c <__retarget_lock_release_recursive>
 801ded6:	bf00      	nop
 801ded8:	2000d7e4 	.word	0x2000d7e4

0801dedc <_read_r>:
 801dedc:	b538      	push	{r3, r4, r5, lr}
 801dede:	4d07      	ldr	r5, [pc, #28]	; (801defc <_read_r+0x20>)
 801dee0:	4604      	mov	r4, r0
 801dee2:	4608      	mov	r0, r1
 801dee4:	4611      	mov	r1, r2
 801dee6:	2200      	movs	r2, #0
 801dee8:	602a      	str	r2, [r5, #0]
 801deea:	461a      	mov	r2, r3
 801deec:	f7e3 ff4c 	bl	8001d88 <_read>
 801def0:	1c43      	adds	r3, r0, #1
 801def2:	d102      	bne.n	801defa <_read_r+0x1e>
 801def4:	682b      	ldr	r3, [r5, #0]
 801def6:	b103      	cbz	r3, 801defa <_read_r+0x1e>
 801def8:	6023      	str	r3, [r4, #0]
 801defa:	bd38      	pop	{r3, r4, r5, pc}
 801defc:	2000d7d8 	.word	0x2000d7d8

0801df00 <_raise_r>:
 801df00:	291f      	cmp	r1, #31
 801df02:	b538      	push	{r3, r4, r5, lr}
 801df04:	4604      	mov	r4, r0
 801df06:	460d      	mov	r5, r1
 801df08:	d904      	bls.n	801df14 <_raise_r+0x14>
 801df0a:	2316      	movs	r3, #22
 801df0c:	6003      	str	r3, [r0, #0]
 801df0e:	f04f 30ff 	mov.w	r0, #4294967295
 801df12:	bd38      	pop	{r3, r4, r5, pc}
 801df14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801df16:	b112      	cbz	r2, 801df1e <_raise_r+0x1e>
 801df18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df1c:	b94b      	cbnz	r3, 801df32 <_raise_r+0x32>
 801df1e:	4620      	mov	r0, r4
 801df20:	f000 f830 	bl	801df84 <_getpid_r>
 801df24:	462a      	mov	r2, r5
 801df26:	4601      	mov	r1, r0
 801df28:	4620      	mov	r0, r4
 801df2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801df2e:	f000 b817 	b.w	801df60 <_kill_r>
 801df32:	2b01      	cmp	r3, #1
 801df34:	d00a      	beq.n	801df4c <_raise_r+0x4c>
 801df36:	1c59      	adds	r1, r3, #1
 801df38:	d103      	bne.n	801df42 <_raise_r+0x42>
 801df3a:	2316      	movs	r3, #22
 801df3c:	6003      	str	r3, [r0, #0]
 801df3e:	2001      	movs	r0, #1
 801df40:	e7e7      	b.n	801df12 <_raise_r+0x12>
 801df42:	2400      	movs	r4, #0
 801df44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801df48:	4628      	mov	r0, r5
 801df4a:	4798      	blx	r3
 801df4c:	2000      	movs	r0, #0
 801df4e:	e7e0      	b.n	801df12 <_raise_r+0x12>

0801df50 <raise>:
 801df50:	4b02      	ldr	r3, [pc, #8]	; (801df5c <raise+0xc>)
 801df52:	4601      	mov	r1, r0
 801df54:	6818      	ldr	r0, [r3, #0]
 801df56:	f7ff bfd3 	b.w	801df00 <_raise_r>
 801df5a:	bf00      	nop
 801df5c:	2000001c 	.word	0x2000001c

0801df60 <_kill_r>:
 801df60:	b538      	push	{r3, r4, r5, lr}
 801df62:	4d07      	ldr	r5, [pc, #28]	; (801df80 <_kill_r+0x20>)
 801df64:	2300      	movs	r3, #0
 801df66:	4604      	mov	r4, r0
 801df68:	4608      	mov	r0, r1
 801df6a:	4611      	mov	r1, r2
 801df6c:	602b      	str	r3, [r5, #0]
 801df6e:	f7e3 feef 	bl	8001d50 <_kill>
 801df72:	1c43      	adds	r3, r0, #1
 801df74:	d102      	bne.n	801df7c <_kill_r+0x1c>
 801df76:	682b      	ldr	r3, [r5, #0]
 801df78:	b103      	cbz	r3, 801df7c <_kill_r+0x1c>
 801df7a:	6023      	str	r3, [r4, #0]
 801df7c:	bd38      	pop	{r3, r4, r5, pc}
 801df7e:	bf00      	nop
 801df80:	2000d7d8 	.word	0x2000d7d8

0801df84 <_getpid_r>:
 801df84:	f7e3 bedc 	b.w	8001d40 <_getpid>

0801df88 <__ascii_wctomb>:
 801df88:	b149      	cbz	r1, 801df9e <__ascii_wctomb+0x16>
 801df8a:	2aff      	cmp	r2, #255	; 0xff
 801df8c:	bf85      	ittet	hi
 801df8e:	238a      	movhi	r3, #138	; 0x8a
 801df90:	6003      	strhi	r3, [r0, #0]
 801df92:	700a      	strbls	r2, [r1, #0]
 801df94:	f04f 30ff 	movhi.w	r0, #4294967295
 801df98:	bf98      	it	ls
 801df9a:	2001      	movls	r0, #1
 801df9c:	4770      	bx	lr
 801df9e:	4608      	mov	r0, r1
 801dfa0:	4770      	bx	lr
	...

0801dfa4 <_init>:
 801dfa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfa6:	bf00      	nop
 801dfa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfaa:	bc08      	pop	{r3}
 801dfac:	469e      	mov	lr, r3
 801dfae:	4770      	bx	lr

0801dfb0 <_fini>:
 801dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801dfb2:	bf00      	nop
 801dfb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dfb6:	bc08      	pop	{r3}
 801dfb8:	469e      	mov	lr, r3
 801dfba:	4770      	bx	lr
