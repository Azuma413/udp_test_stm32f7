
NHK2023_RR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001de3c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004180  0801e040  0801e040  0002e040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080221c0  080221c0  000401ec  2**0
                  CONTENTS
  4 .ARM          00000008  080221c0  080221c0  000321c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080221c8  080221c8  000401ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080221c8  080221c8  000321c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080221cc  080221cc  000321cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  080221d0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d5fc  200001f0  080223bc  000401f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000d7ec  080223bc  0004d7ec  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00059e1d  00000000  00000000  0004021a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009eb8  00000000  00000000  0009a037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002c90  00000000  00000000  000a3ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002ae0  00000000  00000000  000a6b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d507  00000000  00000000  000a9660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046634  00000000  00000000  000e6b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012e105  00000000  00000000  0012d19b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0025b2a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000c5f8  00000000  00000000  0025b2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001f0 	.word	0x200001f0
 800021c:	00000000 	.word	0x00000000
 8000220:	0801e024 	.word	0x0801e024

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001f4 	.word	0x200001f4
 800023c:	0801e024 	.word	0x0801e024

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <dma_printf_init>:
#include <stdbool.h>

struct dma_printf_info dmi;

void dma_printf_init(UART_HandleTypeDef *printf_huart)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    dmi.huart = printf_huart;
 80005f0:	4a09      	ldr	r2, [pc, #36]	; (8000618 <dma_printf_init+0x30>)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f8c2 3410 	str.w	r3, [r2, #1040]	; 0x410
    dma_ring_init(&dmi.tx_ring, printf_huart);
 80005f8:	6879      	ldr	r1, [r7, #4]
 80005fa:	4807      	ldr	r0, [pc, #28]	; (8000618 <dma_printf_init+0x30>)
 80005fc:	f000 f80e 	bl	800061c <dma_ring_init>
    dmi.sending = false;
 8000600:	4b05      	ldr	r3, [pc, #20]	; (8000618 <dma_printf_init+0x30>)
 8000602:	2200      	movs	r2, #0
 8000604:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    dmi.previous_send_len = 0;
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <dma_printf_init+0x30>)
 800060a:	2200      	movs	r2, #0
 800060c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
}
 8000610:	bf00      	nop
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20004938 	.word	0x20004938

0800061c <dma_ring_init>:
{
  ring->w_ptr = (uint16_t)((ring->buf_size - __HAL_DMA_GET_COUNTER(ring->huart->hdmarx)) & 0xFFFF);
}

void dma_ring_init(struct dma_ring_buf *ring, UART_HandleTypeDef *huart)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	6039      	str	r1, [r7, #0]
  ring->buf_size = RING_BUF_SIZE;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800062c:	f8a3 2400 	strh.w	r2, [r3, #1024]	; 0x400
  ring->w_ptr = 0;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2200      	movs	r2, #0
 8000634:	f8a3 2402 	strh.w	r2, [r3, #1026]	; 0x402
  ring->r_ptr = 0;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
  ring->overwrite_cnt = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
  ring->huart = huart;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
}
 8000650:	bf00      	nop
 8000652:	370c      	adds	r7, #12
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr

0800065c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800065c:	b480      	push	{r7}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	60f8      	str	r0, [r7, #12]
 8000664:	60b9      	str	r1, [r7, #8]
 8000666:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4a07      	ldr	r2, [pc, #28]	; (8000688 <vApplicationGetIdleTaskMemory+0x2c>)
 800066c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	4a06      	ldr	r2, [pc, #24]	; (800068c <vApplicationGetIdleTaskMemory+0x30>)
 8000672:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800067a:	bf00      	nop
 800067c:	3714      	adds	r7, #20
 800067e:	46bd      	mov	sp, r7
 8000680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop
 8000688:	2000020c 	.word	0x2000020c
 800068c:	20000260 	.word	0x20000260

08000690 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000690:	b480      	push	{r7}
 8000692:	b085      	sub	sp, #20
 8000694:	af00      	add	r7, sp, #0
 8000696:	60f8      	str	r0, [r7, #12]
 8000698:	60b9      	str	r1, [r7, #8]
 800069a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	4a07      	ldr	r2, [pc, #28]	; (80006bc <vApplicationGetTimerTaskMemory+0x2c>)
 80006a0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	4a06      	ldr	r2, [pc, #24]	; (80006c0 <vApplicationGetTimerTaskMemory+0x30>)
 80006a6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006ae:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006b0:	bf00      	nop
 80006b2:	3714      	adds	r7, #20
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	20000460 	.word	0x20000460
 80006c0:	200004b4 	.word	0x200004b4

080006c4 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	71fb      	strb	r3, [r7, #7]
  HAL_UART_Transmit(&huart3, &ch, 1, 500);
 80006ce:	1df9      	adds	r1, r7, #7
 80006d0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006d4:	2201      	movs	r2, #1
 80006d6:	4804      	ldr	r0, [pc, #16]	; (80006e8 <__io_putchar+0x24>)
 80006d8:	f006 fcf4 	bl	80070c4 <HAL_UART_Transmit>
  return ch;
 80006dc:	79fb      	ldrb	r3, [r7, #7]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20004e4c 	.word	0x20004e4c

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b5b0      	push	{r4, r5, r7, lr}
 80006ee:	b096      	sub	sp, #88	; 0x58
 80006f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 fc68 	bl	8001fc6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f87f 	bl	80007f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc05 	bl	8000f08 <MX_GPIO_Init>
  MX_DMA_Init();
 80006fe:	f000 fbc9 	bl	8000e94 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000702:	f000 fb67 	bl	8000dd4 <MX_USART3_UART_Init>
  MX_CAN1_Init();
 8000706:	f000 f98f 	bl	8000a28 <MX_CAN1_Init>
  MX_I2C1_Init();
 800070a:	f000 f9c3 	bl	8000a94 <MX_I2C1_Init>
  MX_TIM2_Init();
 800070e:	f000 fa5b 	bl	8000bc8 <MX_TIM2_Init>
  MX_ADC1_Init();
 8000712:	f000 f90b 	bl	800092c <MX_ADC1_Init>
  MX_USART6_UART_Init();
 8000716:	f000 fb8d 	bl	8000e34 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 800071a:	f000 f9fb 	bl	8000b14 <MX_TIM1_Init>
  MX_TIM3_Init();
 800071e:	f000 faad 	bl	8000c7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000722:	f000 fb01 	bl	8000d28 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  setbuf(stdout, NULL);
 8000726:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <main+0xe8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f01b fbba 	bl	801bea8 <setbuf>
  setbuf(stderr, NULL);
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <main+0xe8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	68db      	ldr	r3, [r3, #12]
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f01b fbb3 	bl	801bea8 <setbuf>
  HAL_Delay(50);
 8000742:	2032      	movs	r0, #50	; 0x32
 8000744:	f001 fc6c 	bl	8002020 <HAL_Delay>
  dma_printf_init(&huart3);
 8000748:	4823      	ldr	r0, [pc, #140]	; (80007d8 <main+0xec>)
 800074a:	f7ff ff4d 	bl	80005e8 <dma_printf_init>
  HAL_Delay(50);
 800074e:	2032      	movs	r0, #50	; 0x32
 8000750:	f001 fc66 	bl	8002020 <HAL_Delay>
  printf("enter main function\r\n");
 8000754:	4821      	ldr	r0, [pc, #132]	; (80007dc <main+0xf0>)
 8000756:	f01b fb5f 	bl	801be18 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 512, defaultTaskBuffer, &defaultTaskControlBlock);
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <main+0xf4>)
 800075c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000760:	461d      	mov	r5, r3
 8000762:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000764:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000766:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800076e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f008 fab8 	bl	8008cea <osThreadCreate>
 800077a:	4603      	mov	r3, r0
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <main+0xf8>)
 800077e:	6013      	str	r3, [r2, #0]

  /* definition and creation of SensorTask */
  osThreadStaticDef(SensorTask, StartSensorTask, osPriorityNormal, 0, 256, SensorTaskBuffer, &SensorTaskControlBlock);
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <main+0xfc>)
 8000782:	f107 0420 	add.w	r4, r7, #32
 8000786:	461d      	mov	r5, r3
 8000788:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800078a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800078c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000790:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f008 faa5 	bl	8008cea <osThreadCreate>
 80007a0:	4603      	mov	r3, r0
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <main+0x100>)
 80007a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ControllerTask */
  osThreadStaticDef(ControllerTask, StartControllerTask, osPriorityNormal, 0, 512, ControllerTaskBuffer, &ControllerTaskControlBlock);
 80007a6:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <main+0x104>)
 80007a8:	1d3c      	adds	r4, r7, #4
 80007aa:	461d      	mov	r5, r3
 80007ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControllerTaskHandle = osThreadCreate(osThread(ControllerTask), NULL);
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2100      	movs	r1, #0
 80007bc:	4618      	mov	r0, r3
 80007be:	f008 fa94 	bl	8008cea <osThreadCreate>
 80007c2:	4603      	mov	r3, r0
 80007c4:	4a0b      	ldr	r2, [pc, #44]	; (80007f4 <main+0x108>)
 80007c6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  UDPDefineTasks();
 80007c8:	f000 fcdc 	bl	8001184 <UDPDefineTasks>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80007cc:	f008 fa76 	bl	8008cbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007d0:	e7fe      	b.n	80007d0 <main+0xe4>
 80007d2:	bf00      	nop
 80007d4:	2000001c 	.word	0x2000001c
 80007d8:	20004e4c 	.word	0x20004e4c
 80007dc:	0801e068 	.word	0x0801e068
 80007e0:	0801e080 	.word	0x0801e080
 80007e4:	20004da8 	.word	0x20004da8
 80007e8:	0801e09c 	.word	0x0801e09c
 80007ec:	20004da4 	.word	0x20004da4
 80007f0:	0801e0b8 	.word	0x0801e0b8
 80007f4:	20004ed0 	.word	0x20004ed0

080007f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b0b8      	sub	sp, #224	; 0xe0
 80007fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f01a fe36 	bl	801b478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800080c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000810:	2200      	movs	r2, #0
 8000812:	601a      	str	r2, [r3, #0]
 8000814:	605a      	str	r2, [r3, #4]
 8000816:	609a      	str	r2, [r3, #8]
 8000818:	60da      	str	r2, [r3, #12]
 800081a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	2290      	movs	r2, #144	; 0x90
 8000822:	2100      	movs	r1, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f01a fe27 	bl	801b478 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800082a:	f004 fab5 	bl	8004d98 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800082e:	4b3d      	ldr	r3, [pc, #244]	; (8000924 <SystemClock_Config+0x12c>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	4a3c      	ldr	r2, [pc, #240]	; (8000924 <SystemClock_Config+0x12c>)
 8000834:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000838:	6413      	str	r3, [r2, #64]	; 0x40
 800083a:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <SystemClock_Config+0x12c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000846:	4b38      	ldr	r3, [pc, #224]	; (8000928 <SystemClock_Config+0x130>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800084e:	4a36      	ldr	r2, [pc, #216]	; (8000928 <SystemClock_Config+0x130>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000854:	6013      	str	r3, [r2, #0]
 8000856:	4b34      	ldr	r3, [pc, #208]	; (8000928 <SystemClock_Config+0x130>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000862:	2301      	movs	r3, #1
 8000864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800087a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 800087e:	2304      	movs	r3, #4
 8000880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000884:	2360      	movs	r3, #96	; 0x60
 8000886:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800088a:	2302      	movs	r3, #2
 800088c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000890:	2304      	movs	r3, #4
 8000892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000896:	2302      	movs	r3, #2
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80008a0:	4618      	mov	r0, r3
 80008a2:	f004 fad9 	bl	8004e58 <HAL_RCC_OscConfig>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80008ac:	f000 fc64 	bl	8001178 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008b0:	f004 fa82 	bl	8004db8 <HAL_PWREx_EnableOverDrive>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008ba:	f000 fc5d 	bl	8001178 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008be:	230f      	movs	r3, #15
 80008c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2302      	movs	r3, #2
 80008c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80008de:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80008e2:	2103      	movs	r1, #3
 80008e4:	4618      	mov	r0, r3
 80008e6:	f004 fd65 	bl	80053b4 <HAL_RCC_ClockConfig>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80008f0:	f000 fc42 	bl	8001178 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART6
 80008f4:	f44f 4392 	mov.w	r3, #18688	; 0x4900
 80008f8:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80008fe:	2300      	movs	r3, #0
 8000900:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000902:	2300      	movs	r3, #0
 8000904:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000906:	f107 0308 	add.w	r3, r7, #8
 800090a:	4618      	mov	r0, r3
 800090c:	f004 ff86 	bl	800581c <HAL_RCCEx_PeriphCLKConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x122>
  {
    Error_Handler();
 8000916:	f000 fc2f 	bl	8001178 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	37e0      	adds	r7, #224	; 0xe0
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800093e:	4b37      	ldr	r3, [pc, #220]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000940:	4a37      	ldr	r2, [pc, #220]	; (8000a20 <MX_ADC1_Init+0xf4>)
 8000942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000944:	4b35      	ldr	r3, [pc, #212]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000946:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800094a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800094c:	4b33      	ldr	r3, [pc, #204]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000952:	4b32      	ldr	r3, [pc, #200]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000954:	2201      	movs	r2, #1
 8000956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000958:	4b30      	ldr	r3, [pc, #192]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800095a:	2201      	movs	r2, #1
 800095c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095e:	4b2f      	ldr	r3, [pc, #188]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000960:	2200      	movs	r2, #0
 8000962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000966:	4b2d      	ldr	r3, [pc, #180]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000968:	2200      	movs	r2, #0
 800096a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800096c:	4b2b      	ldr	r3, [pc, #172]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800096e:	4a2d      	ldr	r2, [pc, #180]	; (8000a24 <MX_ADC1_Init+0xf8>)
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000972:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000978:	4b28      	ldr	r3, [pc, #160]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800097a:	2204      	movs	r2, #4
 800097c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800097e:	4b27      	ldr	r3, [pc, #156]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000980:	2201      	movs	r2, #1
 8000982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000988:	2201      	movs	r2, #1
 800098a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098c:	4823      	ldr	r0, [pc, #140]	; (8000a1c <MX_ADC1_Init+0xf0>)
 800098e:	f001 fb6b 	bl	8002068 <HAL_ADC_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000998:	f000 fbee 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800099c:	2303      	movs	r3, #3
 800099e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	2301      	movs	r3, #1
 80009a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80009a4:	2307      	movs	r3, #7
 80009a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a8:	463b      	mov	r3, r7
 80009aa:	4619      	mov	r1, r3
 80009ac:	481b      	ldr	r0, [pc, #108]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ae:	f001 fb9f 	bl	80020f0 <HAL_ADC_ConfigChannel>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009b8:	f000 fbde 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009bc:	2305      	movs	r3, #5
 80009be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80009c0:	2302      	movs	r3, #2
 80009c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80009c4:	2305      	movs	r3, #5
 80009c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c8:	463b      	mov	r3, r7
 80009ca:	4619      	mov	r1, r3
 80009cc:	4813      	ldr	r0, [pc, #76]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ce:	f001 fb8f 	bl	80020f0 <HAL_ADC_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80009d8:	f000 fbce 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80009dc:	2306      	movs	r3, #6
 80009de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80009e0:	2303      	movs	r3, #3
 80009e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009e4:	463b      	mov	r3, r7
 80009e6:	4619      	mov	r1, r3
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_ADC1_Init+0xf0>)
 80009ea:	f001 fb81 	bl	80020f0 <HAL_ADC_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80009f4:	f000 fbc0 	bl	8001178 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f8:	2309      	movs	r3, #9
 80009fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009fc:	2304      	movs	r3, #4
 80009fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0xf0>)
 8000a06:	f001 fb73 	bl	80020f0 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8000a10:	f000 fbb2 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000502c 	.word	0x2000502c
 8000a20:	40012000 	.word	0x40012000
 8000a24:	0f000001 	.word	0x0f000001

08000a28 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a2c:	4b17      	ldr	r3, [pc, #92]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a2e:	4a18      	ldr	r2, [pc, #96]	; (8000a90 <MX_CAN1_Init+0x68>)
 8000a30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000a32:	4b16      	ldr	r3, [pc, #88]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a34:	2206      	movs	r2, #6
 8000a36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a38:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a46:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000a4a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a72:	2201      	movs	r2, #1
 8000a74:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a76:	4805      	ldr	r0, [pc, #20]	; (8000a8c <MX_CAN1_Init+0x64>)
 8000a78:	f001 fd8a 	bl	8002590 <HAL_CAN_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000a82:	f000 fb79 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	20005e44 	.word	0x20005e44
 8000a90:	40006400 	.word	0x40006400

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000a9a:	4a1c      	ldr	r2, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa0:	4a1b      	ldr	r2, [pc, #108]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa4:	4b18      	ldr	r3, [pc, #96]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab0:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ace:	480e      	ldr	r0, [pc, #56]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ad0:	f004 f83a 	bl	8004b48 <HAL_I2C_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ada:	f000 fb4d 	bl	8001178 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ade:	2100      	movs	r1, #0
 8000ae0:	4809      	ldr	r0, [pc, #36]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000ae2:	f004 f8c1 	bl	8004c68 <HAL_I2CEx_ConfigAnalogFilter>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000aec:	f000 fb44 	bl	8001178 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af0:	2100      	movs	r1, #0
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <MX_I2C1_Init+0x74>)
 8000af4:	f004 f903 	bl	8004cfe <HAL_I2CEx_ConfigDigitalFilter>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000afe:	f000 fb3b 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20004ed4 	.word	0x20004ed4
 8000b0c:	40005400 	.word	0x40005400
 8000b10:	20303e5d 	.word	0x20303e5d

08000b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b1a:	f107 030c 	add.w	r3, r7, #12
 8000b1e:	2224      	movs	r2, #36	; 0x24
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f01a fca8 	bl	801b478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b28:	463b      	mov	r3, r7
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b32:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b34:	4a23      	ldr	r2, [pc, #140]	; (8000bc4 <MX_TIM1_Init+0xb0>)
 8000b36:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b4a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b66:	2301      	movs	r3, #1
 8000b68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b76:	2301      	movs	r3, #1
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000b82:	f107 030c 	add.w	r3, r7, #12
 8000b86:	4619      	mov	r1, r3
 8000b88:	480d      	ldr	r0, [pc, #52]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000b8a:	f005 fba1 	bl	80062d0 <HAL_TIM_Encoder_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000b94:	f000 faf0 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ba4:	463b      	mov	r3, r7
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_TIM1_Init+0xac>)
 8000baa:	f006 f991 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000bb4:	f000 fae0 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	3730      	adds	r7, #48	; 0x30
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200050d4 	.word	0x200050d4
 8000bc4:	40010000 	.word	0x40010000

08000bc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
 8000bd6:	605a      	str	r2, [r3, #4]
 8000bd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bda:	463b      	mov	r3, r7
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]
 8000be8:	615a      	str	r2, [r3, #20]
 8000bea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1920000;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c02:	4a1d      	ldr	r2, [pc, #116]	; (8000c78 <MX_TIM2_Init+0xb0>)
 8000c04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0c:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c14:	f005 fb04 	bl	8006220 <HAL_TIM_PWM_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000c1e:	f000 faab 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c26:	2300      	movs	r3, #0
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4810      	ldr	r0, [pc, #64]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c32:	f006 f94d 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000c3c:	f000 fa9c 	bl	8001178 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c40:	2360      	movs	r3, #96	; 0x60
 8000c42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c44:	2300      	movs	r3, #0
 8000c46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c50:	463b      	mov	r3, r7
 8000c52:	220c      	movs	r2, #12
 8000c54:	4619      	mov	r1, r3
 8000c56:	4807      	ldr	r0, [pc, #28]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c58:	f005 fd00 	bl	800665c <HAL_TIM_PWM_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c62:	f000 fa89 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c66:	4803      	ldr	r0, [pc, #12]	; (8000c74 <MX_TIM2_Init+0xac>)
 8000c68:	f000 fec6 	bl	80019f8 <HAL_TIM_MspPostInit>

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20005df8 	.word	0x20005df8
 8000c78:	001d4c00 	.word	0x001d4c00

08000c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08c      	sub	sp, #48	; 0x30
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c82:	f107 030c 	add.w	r3, r7, #12
 8000c86:	2224      	movs	r2, #36	; 0x24
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f01a fbf4 	bl	801b478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c90:	463b      	mov	r3, r7
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c9a:	4b21      	ldr	r3, [pc, #132]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000c9c:	4a21      	ldr	r2, [pc, #132]	; (8000d24 <MX_TIM3_Init+0xa8>)
 8000c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ca0:	4b1f      	ldr	r3, [pc, #124]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480d      	ldr	r0, [pc, #52]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000cec:	f005 faf0 	bl	80062d0 <HAL_TIM_Encoder_Init>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8000cf6:	f000 fa3f 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d02:	463b      	mov	r3, r7
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	; (8000d20 <MX_TIM3_Init+0xa4>)
 8000d08:	f006 f8e2 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000d12:	f000 fa31 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	; 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20004f80 	.word	0x20004f80
 8000d24:	40000400 	.word	0x40000400

08000d28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08c      	sub	sp, #48	; 0x30
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2224      	movs	r2, #36	; 0x24
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f01a fb9e 	bl	801b478 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d46:	4b21      	ldr	r3, [pc, #132]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_TIM4_Init+0xa8>)
 8000d4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000d6c:	2303      	movs	r3, #3
 8000d6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000d70:	2300      	movs	r3, #0
 8000d72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000d74:	2301      	movs	r3, #1
 8000d76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d80:	2300      	movs	r3, #0
 8000d82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d84:	2301      	movs	r3, #1
 8000d86:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000d98:	f005 fa9a 	bl	80062d0 <HAL_TIM_Encoder_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000da2:	f000 f9e9 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM4_Init+0xa4>)
 8000db4:	f006 f88c 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8000dbe:	f000 f9db 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3730      	adds	r7, #48	; 0x30
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20004e00 	.word	0x20004e00
 8000dd0:	40000800 	.word	0x40000800

08000dd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000dd8:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dda:	4a15      	ldr	r2, [pc, #84]	; (8000e30 <MX_USART3_UART_Init+0x5c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000de4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000df2:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000df8:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dfe:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e04:	4b09      	ldr	r3, [pc, #36]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e0a:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_USART3_UART_Init+0x58>)
 8000e18:	f006 f906 	bl	8007028 <HAL_UART_Init>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e22:	f000 f9a9 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20004e4c 	.word	0x20004e4c
 8000e30:	40004800 	.word	0x40004800

08000e34 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART6_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <MX_USART6_UART_Init+0x58>)
 8000e78:	f006 f8d6 	bl	8007028 <HAL_UART_Init>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8000e82:	f000 f979 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20005920 	.word	0x20005920
 8000e90:	40011400 	.word	0x40011400

08000e94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e9a:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_DMA_Init+0x70>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a19      	ldr	r2, [pc, #100]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000eb2:	4b14      	ldr	r3, [pc, #80]	; (8000f04 <MX_DMA_Init+0x70>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb6:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <MX_DMA_Init+0x70>)
 8000eb8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_DMA_Init+0x70>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	2105      	movs	r1, #5
 8000ece:	200e      	movs	r0, #14
 8000ed0:	f001 ff4a 	bl	8002d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed4:	200e      	movs	r0, #14
 8000ed6:	f001 ff63 	bl	8002da0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000eda:	2200      	movs	r2, #0
 8000edc:	2105      	movs	r1, #5
 8000ede:	2038      	movs	r0, #56	; 0x38
 8000ee0:	f001 ff42 	bl	8002d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ee4:	2038      	movs	r0, #56	; 0x38
 8000ee6:	f001 ff5b 	bl	8002da0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000eea:	2200      	movs	r2, #0
 8000eec:	2105      	movs	r1, #5
 8000eee:	2045      	movs	r0, #69	; 0x45
 8000ef0:	f001 ff3a 	bl	8002d68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ef4:	2045      	movs	r0, #69	; 0x45
 8000ef6:	f001 ff53 	bl	8002da0 <HAL_NVIC_EnableIRQ>

}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40023800 	.word	0x40023800

08000f08 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4b79      	ldr	r3, [pc, #484]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a78      	ldr	r2, [pc, #480]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b76      	ldr	r3, [pc, #472]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	623b      	str	r3, [r7, #32]
 8000f34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	4b73      	ldr	r3, [pc, #460]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a72      	ldr	r2, [pc, #456]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b70      	ldr	r3, [pc, #448]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f4e:	4b6d      	ldr	r3, [pc, #436]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a6c      	ldr	r2, [pc, #432]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f54:	f043 0320 	orr.w	r3, r3, #32
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b6a      	ldr	r3, [pc, #424]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0320 	and.w	r3, r3, #32
 8000f62:	61bb      	str	r3, [r7, #24]
 8000f64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f66:	4b67      	ldr	r3, [pc, #412]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a66      	ldr	r2, [pc, #408]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b64      	ldr	r3, [pc, #400]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f7a:	617b      	str	r3, [r7, #20]
 8000f7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b61      	ldr	r3, [pc, #388]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a60      	ldr	r2, [pc, #384]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b5e      	ldr	r3, [pc, #376]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b5b      	ldr	r3, [pc, #364]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	4a5a      	ldr	r2, [pc, #360]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa2:	4b58      	ldr	r3, [pc, #352]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fae:	4b55      	ldr	r3, [pc, #340]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	4a54      	ldr	r2, [pc, #336]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fba:	4b52      	ldr	r3, [pc, #328]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	4b4f      	ldr	r3, [pc, #316]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fcc:	f043 0308 	orr.w	r3, r3, #8
 8000fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd2:	4b4c      	ldr	r3, [pc, #304]	; (8001104 <MX_GPIO_Init+0x1fc>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	f003 0308 	and.w	r3, r3, #8
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fe4:	4848      	ldr	r0, [pc, #288]	; (8001108 <MX_GPIO_Init+0x200>)
 8000fe6:	f003 fd95 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000ff0:	4846      	ldr	r0, [pc, #280]	; (800110c <MX_GPIO_Init+0x204>)
 8000ff2:	f003 fd8f 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000ffc:	4844      	ldr	r0, [pc, #272]	; (8001110 <MX_GPIO_Init+0x208>)
 8000ffe:	f003 fd89 	bl	8004b14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Limit4_Pin Limit5_Pin Limit2_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = Limit4_Pin|Limit5_Pin|Limit2_Pin|BUTTON1_Pin;
 8001002:	f240 4334 	movw	r3, #1076	; 0x434
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001008:	2300      	movs	r3, #0
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001014:	4619      	mov	r1, r3
 8001016:	483f      	ldr	r0, [pc, #252]	; (8001114 <MX_GPIO_Init+0x20c>)
 8001018:	f003 fbd0 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800101c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001022:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001026:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800102c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001030:	4619      	mov	r1, r3
 8001032:	4839      	ldr	r0, [pc, #228]	; (8001118 <MX_GPIO_Init+0x210>)
 8001034:	f003 fbc2 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Limit3_Pin */
  GPIO_InitStruct.Pin = Limit3_Pin;
 8001038:	2304      	movs	r3, #4
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Limit3_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	4830      	ldr	r0, [pc, #192]	; (800110c <MX_GPIO_Init+0x204>)
 800104c:	f003 fbb6 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001050:	f244 0381 	movw	r3, #16513	; 0x4081
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001056:	2301      	movs	r3, #1
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	4619      	mov	r1, r3
 8001068:	4827      	ldr	r0, [pc, #156]	; (8001108 <MX_GPIO_Init+0x200>)
 800106a:	f003 fba7 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 800106e:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001072:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001074:	2301      	movs	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001084:	4619      	mov	r1, r3
 8001086:	4821      	ldr	r0, [pc, #132]	; (800110c <MX_GPIO_Init+0x204>)
 8001088:	f003 fb98 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Limit1_Pin Limit4G2_Pin Limit5G3_Pin BUTTON2_Pin
                           USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = Limit1_Pin|Limit4G2_Pin|Limit5G3_Pin|BUTTON2_Pin
 800108c:	239e      	movs	r3, #158	; 0x9e
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
                          |USB_OverCurrent_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109c:	4619      	mov	r1, r3
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <MX_GPIO_Init+0x208>)
 80010a0:	f003 fb8c 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pin : Laser_Pin */
  GPIO_InitStruct.Pin = Laser_Pin;
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010a8:	2303      	movs	r3, #3
 80010aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Laser_GPIO_Port, &GPIO_InitStruct);
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	4619      	mov	r1, r3
 80010b6:	4817      	ldr	r0, [pc, #92]	; (8001114 <MX_GPIO_Init+0x20c>)
 80010b8:	f003 fb80 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin USB_PowerSwitchOn_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|USB_PowerSwitchOn_Pin|LED2_Pin;
 80010bc:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80010c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	2300      	movs	r3, #0
 80010c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ca:	2300      	movs	r3, #0
 80010cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010d2:	4619      	mov	r1, r3
 80010d4:	480e      	ldr	r0, [pc, #56]	; (8001110 <MX_GPIO_Init+0x208>)
 80010d6:	f003 fb71 	bl	80047bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80010da:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ec:	230a      	movs	r3, #10
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f4:	4619      	mov	r1, r3
 80010f6:	4809      	ldr	r0, [pc, #36]	; (800111c <MX_GPIO_Init+0x214>)
 80010f8:	f003 fb60 	bl	80047bc <HAL_GPIO_Init>

}
 80010fc:	bf00      	nop
 80010fe:	3738      	adds	r7, #56	; 0x38
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40023800 	.word	0x40023800
 8001108:	40020400 	.word	0x40020400
 800110c:	40021400 	.word	0x40021400
 8001110:	40021800 	.word	0x40021800
 8001114:	40021000 	.word	0x40021000
 8001118:	40020800 	.word	0x40020800
 800111c:	40020000 	.word	0x40020000

08001120 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001128:	f007 f81e 	bl	8008168 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800112c:	2001      	movs	r0, #1
 800112e:	f007 fe28 	bl	8008d82 <osDelay>
 8001132:	e7fb      	b.n	800112c <StartDefaultTask+0xc>

08001134 <StartSensorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorTask */
void StartSensorTask(void const * argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f007 fe20 	bl	8008d82 <osDelay>
 8001142:	e7fb      	b.n	800113c <StartSensorTask+0x8>

08001144 <StartControllerTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControllerTask */
void StartControllerTask(void const * argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControllerTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f007 fe18 	bl	8008d82 <osDelay>
 8001152:	e7fb      	b.n	800114c <StartControllerTask+0x8>

08001154 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a04      	ldr	r2, [pc, #16]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d101      	bne.n	800116a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001166:	f000 ff3b 	bl	8001fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	40001c00 	.word	0x40001c00

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <UDPDefineTasks>:
osThreadId controllerTaskHandle;
uint32_t controllerTaskBuffer[512];
osStaticThreadDef_t controllerTaskControlBlock;
void UDPSendReceive(void const *argument);

void UDPDefineTasks() {
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af00      	add	r7, sp, #0
	osThreadStaticDef(controllerTask, UDPSendReceive, osPriorityNormal, 0,
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <UDPDefineTasks+0x30>)
 800118c:	1d3c      	adds	r4, r7, #4
 800118e:	461d      	mov	r5, r3
 8001190:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001194:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001198:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			512, controllerTaskBuffer, &controllerTaskControlBlock);
	controllerTaskHandle = osThreadCreate(osThread(controllerTask), NULL);
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f007 fda2 	bl	8008cea <osThreadCreate>
 80011a6:	4603      	mov	r3, r0
 80011a8:	4a03      	ldr	r2, [pc, #12]	; (80011b8 <UDPDefineTasks+0x34>)
 80011aa:	6013      	str	r3, [r2, #0]
}
 80011ac:	bf00      	nop
 80011ae:	3720      	adds	r7, #32
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bdb0      	pop	{r4, r5, r7, pc}
 80011b4:	0801e0e4 	.word	0x0801e0e4
 80011b8:	20006ed4 	.word	0x20006ed4

080011bc <UDPSendReceive>:

void UDPSendReceive(void const *argument) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 80011c2:	af06      	add	r7, sp, #24
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	6018      	str	r0, [r3, #0]
	printf("ender udp task\r\n");
 80011c8:	48da      	ldr	r0, [pc, #872]	; (8001534 <UDPSendReceive+0x378>)
 80011ca:	f01a fe25 	bl	801be18 <puts>
	fd_set reading;
	fd_set sending;
	int rxsock;
	int txsock;
	int iBytesWritten = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
	char rxbuf[512]; //最大受信データサイズ
	char txbuf[256]; //最大送信データサイズ
	struct sockaddr_in rxAddr, txAddr;
	rxsock = lwip_socket(AF_INET, SOCK_DGRAM, 0); //udp制御ブロックを作成
 80011d4:	2200      	movs	r2, #0
 80011d6:	2102      	movs	r1, #2
 80011d8:	2002      	movs	r0, #2
 80011da:	f00d ff59 	bl	800f090 <lwip_socket>
 80011de:	f8c7 0354 	str.w	r0, [r7, #852]	; 0x354
	txsock = lwip_socket(AF_INET, SOCK_DGRAM, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	2002      	movs	r0, #2
 80011e8:	f00d ff52 	bl	800f090 <lwip_socket>
 80011ec:	f8c7 0350 	str.w	r0, [r7, #848]	; 0x350

	//ソケットを作成
	memset((char*) &rxAddr, 0, sizeof(rxAddr)); //myAddrを0で埋める
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2210      	movs	r2, #16
 80011f6:	2100      	movs	r1, #0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f01a f93d 	bl	801b478 <memset>
	memset((char*) &txAddr, 0, sizeof(txAddr));
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	2210      	movs	r2, #16
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f01a f936 	bl	801b478 <memset>

	rxAddr.sin_family = AF_INET;
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2202      	movs	r2, #2
 8001212:	705a      	strb	r2, [r3, #1]
	rxAddr.sin_len = sizeof(rxAddr);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	2210      	movs	r2, #16
 800121a:	701a      	strb	r2, [r3, #0]
	rxAddr.sin_addr.s_addr = INADDR_ANY; //全てのアドレスから受信
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	605a      	str	r2, [r3, #4]
	rxAddr.sin_port = htons(F7_PORT); //マイコンの受信ポート
 8001224:	f641 6061 	movw	r0, #7777	; 0x1e61
 8001228:	f00e fe62 	bl	800fef0 <lwip_htons>
 800122c:	4603      	mov	r3, r0
 800122e:	461a      	mov	r2, r3
 8001230:	f107 031c 	add.w	r3, r7, #28
 8001234:	805a      	strh	r2, [r3, #2]

	txAddr.sin_family = AF_INET;
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2202      	movs	r2, #2
 800123c:	705a      	strb	r2, [r3, #1]
	txAddr.sin_len = sizeof(txAddr);
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2210      	movs	r2, #16
 8001244:	701a      	strb	r2, [r3, #0]
	txAddr.sin_addr.s_addr = inet_addr(PC_ADDR); //PC（送信先）のIP
 8001246:	48bc      	ldr	r0, [pc, #752]	; (8001538 <UDPSendReceive+0x37c>)
 8001248:	f018 fea7 	bl	8019f9a <ipaddr_addr>
 800124c:	4602      	mov	r2, r0
 800124e:	f107 030c 	add.w	r3, r7, #12
 8001252:	605a      	str	r2, [r3, #4]
	txAddr.sin_port = htons(PC_PORT); //PC（送信先）のポート
 8001254:	f24d 4031 	movw	r0, #54321	; 0xd431
 8001258:	f00e fe4a 	bl	800fef0 <lwip_htons>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	f107 030c 	add.w	r3, r7, #12
 8001264:	805a      	strh	r2, [r3, #2]

	int err = lwip_bind(rxsock, (struct sockaddr*)&rxAddr, sizeof(rxAddr)); //制御ブロックを送信先のIPとポートに紐づける。
 8001266:	f107 031c 	add.w	r3, r7, #28
 800126a:	2210      	movs	r2, #16
 800126c:	4619      	mov	r1, r3
 800126e:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 8001272:	f00d fa79 	bl	800e768 <lwip_bind>
 8001276:	f8c7 034c 	str.w	r0, [r7, #844]	; 0x34c
	if (err != 0) {
 800127a:	f8d7 334c 	ldr.w	r3, [r7, #844]	; 0x34c
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <UDPSendReceive+0xce>
		printf("UDPController:ERROR \r\n");
 8001282:	48ae      	ldr	r0, [pc, #696]	; (800153c <UDPSendReceive+0x380>)
 8001284:	f01a fdc8 	bl	801be18 <puts>
 8001288:	e002      	b.n	8001290 <UDPSendReceive+0xd4>
	} else {
		printf("UDPController:Socket Opened!\r\n");
 800128a:	48ad      	ldr	r0, [pc, #692]	; (8001540 <UDPSendReceive+0x384>)
 800128c:	f01a fdc4 	bl	801be18 <puts>
	}

	int maxfd = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
	int result = 0;
 8001296:	2300      	movs	r3, #0
 8001298:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
	/*---------test sumple----------*/
	f7_data.omni_x = 0.5f;
 800129c:	4ba9      	ldr	r3, [pc, #676]	; (8001544 <UDPSendReceive+0x388>)
 800129e:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012a2:	601a      	str	r2, [r3, #0]
	f7_data.omni_y = 0.5f;
 80012a4:	4ba7      	ldr	r3, [pc, #668]	; (8001544 <UDPSendReceive+0x388>)
 80012a6:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 80012aa:	605a      	str	r2, [r3, #4]
	f7_data.hat_shoulder_success = 0;
 80012ac:	4ba5      	ldr	r3, [pc, #660]	; (8001544 <UDPSendReceive+0x388>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
	f7_data.sword_A_shoulder_success = 0;
 80012b2:	4ba4      	ldr	r3, [pc, #656]	; (8001544 <UDPSendReceive+0x388>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
	f7_data.sword_B_shoulder_success = 0;
 80012b8:	4ba2      	ldr	r3, [pc, #648]	; (8001544 <UDPSendReceive+0x388>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	611a      	str	r2, [r3, #16]
	f7_data.launcher_linear_success = 0;
 80012be:	4ba1      	ldr	r3, [pc, #644]	; (8001544 <UDPSendReceive+0x388>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	615a      	str	r2, [r3, #20]
	/*------------------------*/

	FD_ZERO(&reading); //ディスクリプタ集合の初期化
 80012c4:	f507 734d 	add.w	r3, r7, #820	; 0x334
 80012c8:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80012d2:	e00b      	b.n	80012ec <UDPSendReceive+0x130>
 80012d4:	f8d7 3364 	ldr.w	r3, [r7, #868]	; 0x364
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	f8c7 2364 	str.w	r2, [r7, #868]	; 0x364
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
 80012e2:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80012e6:	3301      	adds	r3, #1
 80012e8:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 80012ec:	f8d7 3368 	ldr.w	r3, [r7, #872]	; 0x368
 80012f0:	2b07      	cmp	r3, #7
 80012f2:	d9ef      	bls.n	80012d4 <UDPSendReceive+0x118>
	FD_ZERO(&sending);
 80012f4:	f507 734b 	add.w	r3, r7, #812	; 0x32c
 80012f8:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 80012fc:	2300      	movs	r3, #0
 80012fe:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8001302:	e00b      	b.n	800131c <UDPSendReceive+0x160>
 8001304:	f8d7 335c 	ldr.w	r3, [r7, #860]	; 0x35c
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	f8c7 235c 	str.w	r2, [r7, #860]	; 0x35c
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
 8001312:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001316:	3301      	adds	r3, #1
 8001318:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 800131c:	f8d7 3360 	ldr.w	r3, [r7, #864]	; 0x360
 8001320:	2b07      	cmp	r3, #7
 8001322:	d9ef      	bls.n	8001304 <UDPSendReceive+0x148>
	printf("enter udp loop\r\n");
 8001324:	4888      	ldr	r0, [pc, #544]	; (8001548 <UDPSendReceive+0x38c>)
 8001326:	f01a fd77 	bl	801be18 <puts>
	while (1) {
		FD_SET(rxsock, &reading); //readingにsock（ディスクリプタ番号）を追加
 800132a:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 800132e:	095a      	lsrs	r2, r3, #5
 8001330:	0093      	lsls	r3, r2, #2
 8001332:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8001336:	440b      	add	r3, r1
 8001338:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800133c:	f8d7 1354 	ldr.w	r1, [r7, #852]	; 0x354
 8001340:	f001 011f 	and.w	r1, r1, #31
 8001344:	2001      	movs	r0, #1
 8001346:	fa00 f101 	lsl.w	r1, r0, r1
 800134a:	4319      	orrs	r1, r3
 800134c:	0093      	lsls	r3, r2, #2
 800134e:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001352:	4413      	add	r3, r2
 8001354:	f843 1c3c 	str.w	r1, [r3, #-60]
		FD_SET(txsock, &sending);
 8001358:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800135c:	095a      	lsrs	r2, r3, #5
 800135e:	0093      	lsls	r3, r2, #2
 8001360:	f507 715c 	add.w	r1, r7, #880	; 0x370
 8001364:	440b      	add	r3, r1
 8001366:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800136a:	f8d7 1350 	ldr.w	r1, [r7, #848]	; 0x350
 800136e:	f001 011f 	and.w	r1, r1, #31
 8001372:	2001      	movs	r0, #1
 8001374:	fa00 f101 	lsl.w	r1, r0, r1
 8001378:	4319      	orrs	r1, r3
 800137a:	0093      	lsls	r3, r2, #2
 800137c:	f507 725c 	add.w	r2, r7, #880	; 0x370
 8001380:	4413      	add	r3, r2
 8001382:	f843 1c44 	str.w	r1, [r3, #-68]
		if (rxsock > txsock) {
 8001386:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 800138a:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 800138e:	429a      	cmp	r2, r3
 8001390:	dd05      	ble.n	800139e <UDPSendReceive+0x1e2>
			maxfd = rxsock + 1;
 8001392:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 8001396:	3301      	adds	r3, #1
 8001398:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 800139c:	e004      	b.n	80013a8 <UDPSendReceive+0x1ec>
		}
		else {
			maxfd = txsock + 1;
 800139e:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80013a2:	3301      	adds	r3, #1
 80013a4:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
		}
		memset(&tv, 0, sizeof(tv));
 80013a8:	2210      	movs	r2, #16
 80013aa:	2100      	movs	r1, #0
 80013ac:	4867      	ldr	r0, [pc, #412]	; (800154c <UDPSendReceive+0x390>)
 80013ae:	f01a f863 	bl	801b478 <memset>
		tv.tv_sec = 5;
 80013b2:	4966      	ldr	r1, [pc, #408]	; (800154c <UDPSendReceive+0x390>)
 80013b4:	f04f 0205 	mov.w	r2, #5
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c1 2300 	strd	r2, r3, [r1]
		result = select(maxfd, &reading, &sending, NULL, &tv); //ファイルディスクリプタ―がready状態になるまで1ミリ秒まで待つ。
 80013c0:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80013c4:	f507 714d 	add.w	r1, r7, #820	; 0x334
 80013c8:	4b60      	ldr	r3, [pc, #384]	; (800154c <UDPSendReceive+0x390>)
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8d7 036c 	ldr.w	r0, [r7, #876]	; 0x36c
 80013d2:	f00e f879 	bl	800f4c8 <lwip_select>
 80013d6:	f8c7 0348 	str.w	r0, [r7, #840]	; 0x348
		printf("select result: %d\r\n", result);
 80013da:	f8d7 1348 	ldr.w	r1, [r7, #840]	; 0x348
 80013de:	485c      	ldr	r0, [pc, #368]	; (8001550 <UDPSendReceive+0x394>)
 80013e0:	f01a fc94 	bl	801bd0c <iprintf>

		if (FD_ISSET(rxsock, &reading)) { //readingの中にsockの値が含まれているか調べる。
 80013e4:	f8d7 3354 	ldr.w	r3, [r7, #852]	; 0x354
 80013e8:	095b      	lsrs	r3, r3, #5
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80013f0:	4413      	add	r3, r2
 80013f2:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80013f6:	f8d7 2354 	ldr.w	r2, [r7, #852]	; 0x354
 80013fa:	f002 021f 	and.w	r2, r2, #31
 80013fe:	2101      	movs	r1, #1
 8001400:	fa01 f202 	lsl.w	r2, r1, r2
 8001404:	4013      	ands	r3, r2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d04d      	beq.n	80014a6 <UDPSendReceive+0x2ea>
			printf("fd is set\r\n");
 800140a:	4852      	ldr	r0, [pc, #328]	; (8001554 <UDPSendReceive+0x398>)
 800140c:	f01a fd04 	bl	801be18 <puts>
			socklen_t n;
			socklen_t len = sizeof(rxAddr);
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	2210      	movs	r2, #16
 8001416:	601a      	str	r2, [r3, #0]
			n = lwip_recvfrom(rxsock, (char*) rxbuf, sizeof(rxbuf), (int) NULL, (struct sockaddr*) &rxAddr, &len); //rxbufに受信データを格納
 8001418:	f507 7196 	add.w	r1, r7, #300	; 0x12c
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	f107 031c 	add.w	r3, r7, #28
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800142e:	f8d7 0354 	ldr.w	r0, [r7, #852]	; 0x354
 8001432:	f00d fc8b 	bl	800ed4c <lwip_recvfrom>
 8001436:	4603      	mov	r3, r0
 8001438:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
			if (n > 0) {
 800143c:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001440:	2b00      	cmp	r3, #0
 8001442:	d030      	beq.n	80014a6 <UDPSendReceive+0x2ea>
				if (n < sizeof(struct receive_data)) {
 8001444:	f8d7 3344 	ldr.w	r3, [r7, #836]	; 0x344
 8001448:	2b3b      	cmp	r3, #59	; 0x3b
 800144a:	d803      	bhi.n	8001454 <UDPSendReceive+0x298>
					printf("invalid data : \r\n"); //データが欠損しているのでループを送る
 800144c:	4842      	ldr	r0, [pc, #264]	; (8001558 <UDPSendReceive+0x39c>)
 800144e:	f01a fce3 	bl	801be18 <puts>
 8001452:	e76a      	b.n	800132a <UDPSendReceive+0x16e>
					continue;
				}
				struct receive_data *d = (struct receive_data*) &rxbuf; //rxbufの位置にreceive_data構造体を作る。(疑似的にデータが変換される)
 8001454:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 8001458:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
				memcpy(&ros_data, d, sizeof(struct receive_data)); //受信データをコピーする
 800145c:	223c      	movs	r2, #60	; 0x3c
 800145e:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 8001462:	483e      	ldr	r0, [pc, #248]	; (800155c <UDPSendReceive+0x3a0>)
 8001464:	f019 fffa 	bl	801b45c <memcpy>
				printf("omni1:%f\r\nomni2:%f\r\nomni3:%f\r\nomni4:%f\r\n", ros_data.omni1_power, ros_data.omni2_power, ros_data.omni3_power, ros_data.omni4_power); //試験的に出力
 8001468:	4b3c      	ldr	r3, [pc, #240]	; (800155c <UDPSendReceive+0x3a0>)
 800146a:	edd3 7a05 	vldr	s15, [r3, #20]
 800146e:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <UDPSendReceive+0x3a0>)
 8001474:	edd3 7a06 	vldr	s15, [r3, #24]
 8001478:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800147c:	4b37      	ldr	r3, [pc, #220]	; (800155c <UDPSendReceive+0x3a0>)
 800147e:	edd3 6a07 	vldr	s13, [r3, #28]
 8001482:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <UDPSendReceive+0x3a0>)
 8001488:	edd3 5a08 	vldr	s11, [r3, #32]
 800148c:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001490:	ed8d 5b04 	vstr	d5, [sp, #16]
 8001494:	ed8d 6b02 	vstr	d6, [sp, #8]
 8001498:	ed8d 7b00 	vstr	d7, [sp]
 800149c:	ec53 2b14 	vmov	r2, r3, d4
 80014a0:	482f      	ldr	r0, [pc, #188]	; (8001560 <UDPSendReceive+0x3a4>)
 80014a2:	f01a fc33 	bl	801bd0c <iprintf>
			}
		}
		//callback
		if (FD_ISSET(txsock, &sending)) {
 80014a6:	f8d7 3350 	ldr.w	r3, [r7, #848]	; 0x350
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	f507 725c 	add.w	r2, r7, #880	; 0x370
 80014b2:	4413      	add	r3, r2
 80014b4:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80014b8:	f8d7 2350 	ldr.w	r2, [r7, #848]	; 0x350
 80014bc:	f002 021f 	and.w	r2, r2, #31
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d02f      	beq.n	800152c <UDPSendReceive+0x370>
			struct send_data* sd = (struct send_data*)&txbuf; //txbufの位置に重ねてsdを宣言
 80014cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014d0:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
			memcpy(sd, &f7_data, sizeof(struct send_data)); //送信データをコピーする
 80014d4:	2218      	movs	r2, #24
 80014d6:	491b      	ldr	r1, [pc, #108]	; (8001544 <UDPSendReceive+0x388>)
 80014d8:	f8d7 033c 	ldr.w	r0, [r7, #828]	; 0x33c
 80014dc:	f019 ffbe 	bl	801b45c <memcpy>
			iBytesWritten = lwip_sendto(txsock, (char*)txbuf, sizeof(txbuf), 0, (struct sockaddr*)&txAddr, sizeof(txAddr));
 80014e0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80014e4:	2310      	movs	r3, #16
 80014e6:	9301      	str	r3, [sp, #4]
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	9300      	str	r3, [sp, #0]
 80014ee:	2300      	movs	r3, #0
 80014f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014f4:	f8d7 0350 	ldr.w	r0, [r7, #848]	; 0x350
 80014f8:	f00d fd18 	bl	800ef2c <lwip_sendto>
 80014fc:	f8c7 0358 	str.w	r0, [r7, #856]	; 0x358
			//iBytesWritten = lwip_sendto(sock, (char*)"hello world from f7!", 256, 0, (struct sockaddr*)&cAddr, sizeof(cAddr));
			if (iBytesWritten > 0) {
 8001500:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001504:	2b00      	cmp	r3, #0
 8001506:	dd0e      	ble.n	8001526 <UDPSendReceive+0x36a>
				printf("success send data\r\n");
 8001508:	4816      	ldr	r0, [pc, #88]	; (8001564 <UDPSendReceive+0x3a8>)
 800150a:	f01a fc85 	bl	801be18 <puts>
				if (iBytesWritten < sizeof(struct send_data)) {
 800150e:	f8d7 3358 	ldr.w	r3, [r7, #856]	; 0x358
 8001512:	2b17      	cmp	r3, #23
 8001514:	d803      	bhi.n	800151e <UDPSendReceive+0x362>
					printf("send data / invalid\r\n");
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <UDPSendReceive+0x3ac>)
 8001518:	f01a fc7e 	bl	801be18 <puts>
 800151c:	e006      	b.n	800152c <UDPSendReceive+0x370>
				}
				else {
					printf("success : send data\r\n");
 800151e:	4813      	ldr	r0, [pc, #76]	; (800156c <UDPSendReceive+0x3b0>)
 8001520:	f01a fc7a 	bl	801be18 <puts>
 8001524:	e002      	b.n	800152c <UDPSendReceive+0x370>
				}
			}
			else {
				printf("failed : send data\r\n");
 8001526:	4812      	ldr	r0, [pc, #72]	; (8001570 <UDPSendReceive+0x3b4>)
 8001528:	f01a fc76 	bl	801be18 <puts>
			}
		}
		osDelay(10);
 800152c:	200a      	movs	r0, #10
 800152e:	f007 fc28 	bl	8008d82 <osDelay>
		FD_SET(rxsock, &reading); //readingにsock（ディスクリプタ番号）を追加
 8001532:	e6fa      	b.n	800132a <UDPSendReceive+0x16e>
 8001534:	0801e100 	.word	0x0801e100
 8001538:	0801e110 	.word	0x0801e110
 800153c:	0801e120 	.word	0x0801e120
 8001540:	0801e138 	.word	0x0801e138
 8001544:	200008f0 	.word	0x200008f0
 8001548:	0801e158 	.word	0x0801e158
 800154c:	20006670 	.word	0x20006670
 8001550:	0801e168 	.word	0x0801e168
 8001554:	0801e17c 	.word	0x0801e17c
 8001558:	0801e188 	.word	0x0801e188
 800155c:	200008b4 	.word	0x200008b4
 8001560:	0801e19c 	.word	0x0801e19c
 8001564:	0801e1c8 	.word	0x0801e1c8
 8001568:	0801e1dc 	.word	0x0801e1dc
 800156c:	0801e1f4 	.word	0x0801e1f4
 8001570:	0801e20c 	.word	0x0801e20c

08001574 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a10      	ldr	r2, [pc, #64]	; (80015c0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_MspInit+0x4c>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_MspInit+0x4c>)
 8001598:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_MspInit+0x4c>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a6:	603b      	str	r3, [r7, #0]
 80015a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	210f      	movs	r1, #15
 80015ae:	f06f 0001 	mvn.w	r0, #1
 80015b2:	f001 fbd9 	bl	8002d68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015b6:	bf00      	nop
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023800 	.word	0x40023800

080015c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b08a      	sub	sp, #40	; 0x28
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015cc:	f107 0314 	add.w	r3, r7, #20
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	605a      	str	r2, [r3, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	60da      	str	r2, [r3, #12]
 80015da:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a39      	ldr	r2, [pc, #228]	; (80016c8 <HAL_ADC_MspInit+0x104>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d16c      	bne.n	80016c0 <HAL_ADC_MspInit+0xfc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <HAL_ADC_MspInit+0x108>)
 80015e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ea:	4a38      	ldr	r2, [pc, #224]	; (80016cc <HAL_ADC_MspInit+0x108>)
 80015ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f0:	6453      	str	r3, [r2, #68]	; 0x44
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <HAL_ADC_MspInit+0x108>)
 80015f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	4b33      	ldr	r3, [pc, #204]	; (80016cc <HAL_ADC_MspInit+0x108>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <HAL_ADC_MspInit+0x108>)
 8001604:	f043 0301 	orr.w	r3, r3, #1
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <HAL_ADC_MspInit+0x108>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001616:	4b2d      	ldr	r3, [pc, #180]	; (80016cc <HAL_ADC_MspInit+0x108>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a2c      	ldr	r2, [pc, #176]	; (80016cc <HAL_ADC_MspInit+0x108>)
 800161c:	f043 0302 	orr.w	r3, r3, #2
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <HAL_ADC_MspInit+0x108>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0302 	and.w	r3, r3, #2
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 800162e:	2368      	movs	r3, #104	; 0x68
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4823      	ldr	r0, [pc, #140]	; (80016d0 <HAL_ADC_MspInit+0x10c>)
 8001642:	f003 f8bb 	bl	80047bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001646:	2302      	movs	r3, #2
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800164a:	2303      	movs	r3, #3
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001652:	f107 0314 	add.w	r3, r7, #20
 8001656:	4619      	mov	r1, r3
 8001658:	481e      	ldr	r0, [pc, #120]	; (80016d4 <HAL_ADC_MspInit+0x110>)
 800165a:	f003 f8af 	bl	80047bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_ADC_MspInit+0x118>)
 8001662:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001664:	4b1c      	ldr	r3, [pc, #112]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001666:	2200      	movs	r2, #0
 8001668:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800166a:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001670:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001676:	4b18      	ldr	r3, [pc, #96]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001678:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800167c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001680:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001684:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001686:	4b14      	ldr	r3, [pc, #80]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800168c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001694:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 8001698:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800169c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800169e:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 80016a6:	f001 fb89 	bl	8002dbc <HAL_DMA_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 80016b0:	f7ff fd62 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 80016b8:	639a      	str	r2, [r3, #56]	; 0x38
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_ADC_MspInit+0x114>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40012000 	.word	0x40012000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	20005074 	.word	0x20005074
 80016dc:	40026410 	.word	0x40026410

080016e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a23      	ldr	r2, [pc, #140]	; (800178c <HAL_CAN_MspInit+0xac>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d13f      	bne.n	8001782 <HAL_CAN_MspInit+0xa2>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001702:	4b23      	ldr	r3, [pc, #140]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 8001708:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a1c      	ldr	r2, [pc, #112]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <HAL_CAN_MspInit+0xb0>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001732:	2303      	movs	r3, #3
 8001734:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173e:	2303      	movs	r3, #3
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001742:	2309      	movs	r3, #9
 8001744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4811      	ldr	r0, [pc, #68]	; (8001794 <HAL_CAN_MspInit+0xb4>)
 800174e:	f003 f835 	bl	80047bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2105      	movs	r1, #5
 8001756:	2013      	movs	r0, #19
 8001758:	f001 fb06 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800175c:	2013      	movs	r0, #19
 800175e:	f001 fb1f 	bl	8002da0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	2014      	movs	r0, #20
 8001768:	f001 fafe 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800176c:	2014      	movs	r0, #20
 800176e:	f001 fb17 	bl	8002da0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2015      	movs	r0, #21
 8001778:	f001 faf6 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 800177c:	2015      	movs	r0, #21
 800177e:	f001 fb0f 	bl	8002da0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40006400 	.word	0x40006400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020c00 	.word	0x40020c00

08001798 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	; 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a17      	ldr	r2, [pc, #92]	; (8001814 <HAL_I2C_MspInit+0x7c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d128      	bne.n	800180c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <HAL_I2C_MspInit+0x80>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <HAL_I2C_MspInit+0x80>)
 80017c0:	f043 0302 	orr.w	r3, r3, #2
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b14      	ldr	r3, [pc, #80]	; (8001818 <HAL_I2C_MspInit+0x80>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80017d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017d8:	2312      	movs	r3, #18
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017e4:	2304      	movs	r3, #4
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	480b      	ldr	r0, [pc, #44]	; (800181c <HAL_I2C_MspInit+0x84>)
 80017f0:	f002 ffe4 	bl	80047bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <HAL_I2C_MspInit+0x80>)
 80017f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f8:	4a07      	ldr	r2, [pc, #28]	; (8001818 <HAL_I2C_MspInit+0x80>)
 80017fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_I2C_MspInit+0x80>)
 8001802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800180c:	bf00      	nop
 800180e:	3728      	adds	r7, #40	; 0x28
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40005400 	.word	0x40005400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020400 	.word	0x40020400

08001820 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a46      	ldr	r2, [pc, #280]	; (8001958 <HAL_TIM_Encoder_MspInit+0x138>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d129      	bne.n	8001896 <HAL_TIM_Encoder_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001842:	4b46      	ldr	r3, [pc, #280]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001846:	4a45      	ldr	r2, [pc, #276]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6453      	str	r3, [r2, #68]	; 0x44
 800184e:	4b43      	ldr	r3, [pc, #268]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800185a:	4b40      	ldr	r3, [pc, #256]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185e:	4a3f      	ldr	r2, [pc, #252]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001860:	f043 0310 	orr.w	r3, r3, #16
 8001864:	6313      	str	r3, [r2, #48]	; 0x30
 8001866:	4b3d      	ldr	r3, [pc, #244]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186a:	f003 0310 	and.w	r3, r3, #16
 800186e:	61fb      	str	r3, [r7, #28]
 8001870:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001872:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001878:	2302      	movs	r3, #2
 800187a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001880:	2300      	movs	r3, #0
 8001882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001884:	2301      	movs	r3, #1
 8001886:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	4834      	ldr	r0, [pc, #208]	; (8001960 <HAL_TIM_Encoder_MspInit+0x140>)
 8001890:	f002 ff94 	bl	80047bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001894:	e05b      	b.n	800194e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_TIM_Encoder_MspInit+0x144>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d128      	bne.n	80018f2 <HAL_TIM_Encoder_MspInit+0xd2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a2d      	ldr	r2, [pc, #180]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b2b      	ldr	r3, [pc, #172]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b8:	4b28      	ldr	r3, [pc, #160]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018bc:	4a27      	ldr	r2, [pc, #156]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018be:	f043 0302 	orr.w	r3, r3, #2
 80018c2:	6313      	str	r3, [r2, #48]	; 0x30
 80018c4:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c8:	f003 0302 	and.w	r3, r3, #2
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 80018d0:	2330      	movs	r3, #48	; 0x30
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018e0:	2302      	movs	r3, #2
 80018e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4619      	mov	r1, r3
 80018ea:	481f      	ldr	r0, [pc, #124]	; (8001968 <HAL_TIM_Encoder_MspInit+0x148>)
 80018ec:	f002 ff66 	bl	80047bc <HAL_GPIO_Init>
}
 80018f0:	e02d      	b.n	800194e <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_TIM_Encoder_MspInit+0x14c>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d128      	bne.n	800194e <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	4a16      	ldr	r2, [pc, #88]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001902:	f043 0304 	orr.w	r3, r3, #4
 8001906:	6413      	str	r3, [r2, #64]	; 0x40
 8001908:	4b14      	ldr	r3, [pc, #80]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 800190a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001914:	4b11      	ldr	r3, [pc, #68]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 800191a:	f043 0308 	orr.w	r3, r3, #8
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b0e      	ldr	r3, [pc, #56]	; (800195c <HAL_TIM_Encoder_MspInit+0x13c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 800192c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001930:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800193e:	2302      	movs	r3, #2
 8001940:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001946:	4619      	mov	r1, r3
 8001948:	4809      	ldr	r0, [pc, #36]	; (8001970 <HAL_TIM_Encoder_MspInit+0x150>)
 800194a:	f002 ff37 	bl	80047bc <HAL_GPIO_Init>
}
 800194e:	bf00      	nop
 8001950:	3738      	adds	r7, #56	; 0x38
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40023800 	.word	0x40023800
 8001960:	40021000 	.word	0x40021000
 8001964:	40000400 	.word	0x40000400
 8001968:	40020400 	.word	0x40020400
 800196c:	40000800 	.word	0x40000800
 8001970:	40020c00 	.word	0x40020c00

08001974 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001994:	d127      	bne.n	80019e6 <HAL_TIM_PWM_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 8001998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6413      	str	r3, [r2, #64]	; 0x40
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a0f      	ldr	r2, [pc, #60]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_TIM_PWM_MspInit+0x7c>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC1_A_Pin;
 80019c6:	2301      	movs	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019d6:	2301      	movs	r3, #1
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC1_A_GPIO_Port, &GPIO_InitStruct);
 80019da:	f107 0314 	add.w	r3, r7, #20
 80019de:	4619      	mov	r1, r3
 80019e0:	4804      	ldr	r0, [pc, #16]	; (80019f4 <HAL_TIM_PWM_MspInit+0x80>)
 80019e2:	f002 feeb 	bl	80047bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80019e6:	bf00      	nop
 80019e8:	3728      	adds	r7, #40	; 0x28
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020000 	.word	0x40020000

080019f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b088      	sub	sp, #32
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d11c      	bne.n	8001a54 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1a:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_TIM_MspPostInit+0x64>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_TIM_MspPostInit+0x64>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	; 0x30
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_TIM_MspPostInit+0x64>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	60bb      	str	r3, [r7, #8]
 8001a30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ESC_Pin;
 8001a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ESC_GPIO_Port, &GPIO_InitStruct);
 8001a48:	f107 030c 	add.w	r3, r7, #12
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4804      	ldr	r0, [pc, #16]	; (8001a60 <HAL_TIM_MspPostInit+0x68>)
 8001a50:	f002 feb4 	bl	80047bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08c      	sub	sp, #48	; 0x30
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a61      	ldr	r2, [pc, #388]	; (8001c08 <HAL_UART_MspInit+0x1a4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d15f      	bne.n	8001b46 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a86:	4b61      	ldr	r3, [pc, #388]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a60      	ldr	r2, [pc, #384]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9e:	4b5b      	ldr	r3, [pc, #364]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a5a      	ldr	r2, [pc, #360]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001aa4:	f043 0308 	orr.w	r3, r3, #8
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b58      	ldr	r3, [pc, #352]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001ab6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ac8:	2307      	movs	r3, #7
 8001aca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	484f      	ldr	r0, [pc, #316]	; (8001c10 <HAL_UART_MspInit+0x1ac>)
 8001ad4:	f002 fe72 	bl	80047bc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001ada:	4a4f      	ldr	r2, [pc, #316]	; (8001c18 <HAL_UART_MspInit+0x1b4>)
 8001adc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001ade:	4b4d      	ldr	r3, [pc, #308]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001ae0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae4:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ae6:	4b4b      	ldr	r3, [pc, #300]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001ae8:	2240      	movs	r2, #64	; 0x40
 8001aea:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aec:	4b49      	ldr	r3, [pc, #292]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001af2:	4b48      	ldr	r3, [pc, #288]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001afa:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b00:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001b06:	4b43      	ldr	r3, [pc, #268]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b0c:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b12:	4b40      	ldr	r3, [pc, #256]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001b18:	483e      	ldr	r0, [pc, #248]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b1a:	f001 f94f 	bl	8002dbc <HAL_DMA_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001b24:	f7ff fb28 	bl	8001178 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	4a3a      	ldr	r2, [pc, #232]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b2c:	66da      	str	r2, [r3, #108]	; 0x6c
 8001b2e:	4a39      	ldr	r2, [pc, #228]	; (8001c14 <HAL_UART_MspInit+0x1b0>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2105      	movs	r1, #5
 8001b38:	2027      	movs	r0, #39	; 0x27
 8001b3a:	f001 f915 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001b3e:	2027      	movs	r0, #39	; 0x27
 8001b40:	f001 f92e 	bl	8002da0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b44:	e05b      	b.n	8001bfe <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART6)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a34      	ldr	r2, [pc, #208]	; (8001c1c <HAL_UART_MspInit+0x1b8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d156      	bne.n	8001bfe <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b50:	4b2e      	ldr	r3, [pc, #184]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	4a2d      	ldr	r2, [pc, #180]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b56:	f043 0320 	orr.w	r3, r3, #32
 8001b5a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5c:	4b2b      	ldr	r3, [pc, #172]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	f003 0320 	and.w	r3, r3, #32
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b68:	4b28      	ldr	r3, [pc, #160]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6c:	4a27      	ldr	r2, [pc, #156]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b72:	6313      	str	r3, [r2, #48]	; 0x30
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_UART_MspInit+0x1a8>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7c:	60fb      	str	r3, [r7, #12]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8001b80:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b86:	2302      	movs	r3, #2
 8001b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b92:	2308      	movs	r3, #8
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b96:	f107 031c 	add.w	r3, r7, #28
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4820      	ldr	r0, [pc, #128]	; (8001c20 <HAL_UART_MspInit+0x1bc>)
 8001b9e:	f002 fe0d 	bl	80047bc <HAL_GPIO_Init>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001ba4:	4a20      	ldr	r2, [pc, #128]	; (8001c28 <HAL_UART_MspInit+0x1c4>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001baa:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001bae:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb0:	4b1c      	ldr	r3, [pc, #112]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb6:	4b1b      	ldr	r3, [pc, #108]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bbc:	4b19      	ldr	r3, [pc, #100]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc2:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bc4:	4b17      	ldr	r3, [pc, #92]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bd6:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8001be2:	4810      	ldr	r0, [pc, #64]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001be4:	f001 f8ea 	bl	8002dbc <HAL_DMA_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001bee:	f7ff fac3 	bl	8001178 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a0b      	ldr	r2, [pc, #44]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bf6:	66da      	str	r2, [r3, #108]	; 0x6c
 8001bf8:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <HAL_UART_MspInit+0x1c0>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001bfe:	bf00      	nop
 8001c00:	3730      	adds	r7, #48	; 0x30
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40004800 	.word	0x40004800
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40020c00 	.word	0x40020c00
 8001c14:	20004f20 	.word	0x20004f20
 8001c18:	40026058 	.word	0x40026058
 8001c1c:	40011400 	.word	0x40011400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	20004fcc 	.word	0x20004fcc
 8001c28:	400264a0 	.word	0x400264a0

08001c2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08c      	sub	sp, #48	; 0x30
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	6879      	ldr	r1, [r7, #4]
 8001c40:	202c      	movs	r0, #44	; 0x2c
 8001c42:	f001 f891 	bl	8002d68 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001c46:	202c      	movs	r0, #44	; 0x2c
 8001c48:	f001 f8aa 	bl	8002da0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	4a1e      	ldr	r2, [pc, #120]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c56:	6413      	str	r3, [r2, #64]	; 0x40
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <HAL_InitTick+0xa0>)
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c64:	f107 0210 	add.w	r2, r7, #16
 8001c68:	f107 0314 	add.w	r3, r7, #20
 8001c6c:	4611      	mov	r1, r2
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f003 fda2 	bl	80057b8 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001c74:	f003 fd78 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c80:	4a13      	ldr	r2, [pc, #76]	; (8001cd0 <HAL_InitTick+0xa4>)
 8001c82:	fba2 2303 	umull	r2, r3, r2, r3
 8001c86:	0c9b      	lsrs	r3, r3, #18
 8001c88:	3b01      	subs	r3, #1
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <HAL_InitTick+0xac>)
 8001c90:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c94:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c98:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001c9a:	4a0e      	ldr	r2, [pc, #56]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9e:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001ca0:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b0b      	ldr	r3, [pc, #44]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001cac:	4809      	ldr	r0, [pc, #36]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001cae:	f004 f9dd 	bl	800606c <HAL_TIM_Base_Init>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d104      	bne.n	8001cc2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001cb8:	4806      	ldr	r0, [pc, #24]	; (8001cd4 <HAL_InitTick+0xa8>)
 8001cba:	f004 fa39 	bl	8006130 <HAL_TIM_Base_Start_IT>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3730      	adds	r7, #48	; 0x30
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	431bde83 	.word	0x431bde83
 8001cd4:	20006ed8 	.word	0x20006ed8
 8001cd8:	40001c00 	.word	0x40001c00

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d0c:	4802      	ldr	r0, [pc, #8]	; (8001d18 <DMA1_Stream3_IRQHandler+0x10>)
 8001d0e:	f001 f995 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	20004f20 	.word	0x20004f20

08001d1c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <CAN1_TX_IRQHandler+0x10>)
 8001d22:	f000 fd30 	bl	8002786 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20005e44 	.word	0x20005e44

08001d30 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <CAN1_RX0_IRQHandler+0x10>)
 8001d36:	f000 fd26 	bl	8002786 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20005e44 	.word	0x20005e44

08001d44 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <CAN1_RX1_IRQHandler+0x10>)
 8001d4a:	f000 fd1c 	bl	8002786 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20005e44 	.word	0x20005e44

08001d58 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <USART3_IRQHandler+0x10>)
 8001d5e:	f005 fa45 	bl	80071ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20004e4c 	.word	0x20004e4c

08001d6c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001d72:	f004 fb53 	bl	800641c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20006ed8 	.word	0x20006ed8

08001d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <DMA2_Stream0_IRQHandler+0x10>)
 8001d86:	f001 f959 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20005074 	.word	0x20005074

08001d94 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <ETH_IRQHandler+0x10>)
 8001d9a:	f001 ff6d 	bl	8003c78 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	2000884c 	.word	0x2000884c

08001da8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001dac:	4802      	ldr	r0, [pc, #8]	; (8001db8 <DMA2_Stream6_IRQHandler+0x10>)
 8001dae:	f001 f945 	bl	800303c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20004fcc 	.word	0x20004fcc

08001dbc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
	return 1;
 8001dc0:	2301      	movs	r3, #1
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_kill>:

int _kill(int pid, int sig)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <_kill+0x20>)
 8001dd8:	2216      	movs	r2, #22
 8001dda:	601a      	str	r2, [r3, #0]
	return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	2000d7d8 	.word	0x2000d7d8

08001df0 <_exit>:

void _exit (int status)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ffe5 	bl	8001dcc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e02:	e7fe      	b.n	8001e02 <_exit+0x12>

08001e04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	e00a      	b.n	8001e2c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e16:	f3af 8000 	nop.w
 8001e1a:	4601      	mov	r1, r0
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	1c5a      	adds	r2, r3, #1
 8001e20:	60ba      	str	r2, [r7, #8]
 8001e22:	b2ca      	uxtb	r2, r1
 8001e24:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	617b      	str	r3, [r7, #20]
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	dbf0      	blt.n	8001e16 <_read+0x12>
	}

return len;
 8001e34:	687b      	ldr	r3, [r7, #4]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3718      	adds	r7, #24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b086      	sub	sp, #24
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	e009      	b.n	8001e64 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	1c5a      	adds	r2, r3, #1
 8001e54:	60ba      	str	r2, [r7, #8]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fc33 	bl	80006c4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	3301      	adds	r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697a      	ldr	r2, [r7, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	dbf1      	blt.n	8001e50 <_write+0x12>
	}
	return len;
 8001e6c:	687b      	ldr	r3, [r7, #4]
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	3718      	adds	r7, #24
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <_close>:

int _close(int file)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e9e:	605a      	str	r2, [r3, #4]
	return 0;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <_isatty>:

int _isatty(int file)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
	return 1;
 8001eb6:	2301      	movs	r3, #1
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	return 0;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
	...

08001ee0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b087      	sub	sp, #28
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee8:	4a14      	ldr	r2, [pc, #80]	; (8001f3c <_sbrk+0x5c>)
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <_sbrk+0x60>)
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <_sbrk+0x64>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d102      	bne.n	8001f02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <_sbrk+0x64>)
 8001efe:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <_sbrk+0x68>)
 8001f00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f02:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <_sbrk+0x64>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d205      	bcs.n	8001f1c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <_sbrk+0x6c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f16:	f04f 33ff 	mov.w	r3, #4294967295
 8001f1a:	e009      	b.n	8001f30 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <_sbrk+0x64>)
 8001f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	20080000 	.word	0x20080000
 8001f40:	00000400 	.word	0x00000400
 8001f44:	20000908 	.word	0x20000908
 8001f48:	2000d7f0 	.word	0x2000d7f0
 8001f4c:	2000d7d8 	.word	0x2000d7d8

08001f50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <SystemInit+0x20>)
 8001f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <SystemInit+0x20>)
 8001f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	e000ed00 	.word	0xe000ed00

08001f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f7a:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	; (8001fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f80:	e002      	b.n	8001f88 <LoopCopyDataInit>

08001f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f86:	3304      	adds	r3, #4

08001f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f8c:	d3f9      	bcc.n	8001f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8e:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f90:	4c0b      	ldr	r4, [pc, #44]	; (8001fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f94:	e001      	b.n	8001f9a <LoopFillZerobss>

08001f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f98:	3204      	adds	r2, #4

08001f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f9c:	d3fb      	bcc.n	8001f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f9e:	f7ff ffd7 	bl	8001f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fa2:	f019 fa29 	bl	801b3f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fa6:	f7fe fba1 	bl	80006ec <main>
  bx  lr    
 8001faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fac:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fb4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001fb8:	080221d0 	.word	0x080221d0
  ldr r2, =_sbss
 8001fbc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001fc0:	2000d7ec 	.word	0x2000d7ec

08001fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fc4:	e7fe      	b.n	8001fc4 <ADC_IRQHandler>

08001fc6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 fec1 	bl	8002d52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd0:	200f      	movs	r0, #15
 8001fd2:	f7ff fe2b 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd6:	f7ff facd 	bl	8001574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <HAL_IncTick+0x20>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_IncTick+0x24>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_IncTick+0x24>)
 8001ff2:	6013      	str	r3, [r2, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000008 	.word	0x20000008
 8002004:	20006f24 	.word	0x20006f24

08002008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  return uwTick;
 800200c:	4b03      	ldr	r3, [pc, #12]	; (800201c <HAL_GetTick+0x14>)
 800200e:	681b      	ldr	r3, [r3, #0]
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20006f24 	.word	0x20006f24

08002020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff ffee 	bl	8002008 <HAL_GetTick>
 800202c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002038:	d005      	beq.n	8002046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800203a:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_Delay+0x44>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002046:	bf00      	nop
 8002048:	f7ff ffde 	bl	8002008 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d8f7      	bhi.n	8002048 <HAL_Delay+0x28>
  {
  }
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20000008 	.word	0x20000008

08002068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e031      	b.n	80020e2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fa9c 	bl	80015c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	f003 0310 	and.w	r3, r3, #16
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d116      	bne.n	80020d4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_ADC_Init+0x84>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	f043 0202 	orr.w	r2, r3, #2
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f970 	bl	800239c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	f023 0303 	bic.w	r3, r3, #3
 80020ca:	f043 0201 	orr.w	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	641a      	str	r2, [r3, #64]	; 0x40
 80020d2:	e001      	b.n	80020d8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	ffffeefd 	.word	0xffffeefd

080020f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002104:	2b01      	cmp	r3, #1
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x1c>
 8002108:	2302      	movs	r3, #2
 800210a:	e136      	b.n	800237a <HAL_ADC_ConfigChannel+0x28a>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2b09      	cmp	r3, #9
 800211a:	d93a      	bls.n	8002192 <HAL_ADC_ConfigChannel+0xa2>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002124:	d035      	beq.n	8002192 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68d9      	ldr	r1, [r3, #12]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b29b      	uxth	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	4613      	mov	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	4413      	add	r3, r2
 800213a:	3b1e      	subs	r3, #30
 800213c:	2207      	movs	r2, #7
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43da      	mvns	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	400a      	ands	r2, r1
 800214a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a8d      	ldr	r2, [pc, #564]	; (8002388 <HAL_ADC_ConfigChannel+0x298>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d10a      	bne.n	800216c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68d9      	ldr	r1, [r3, #12]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	061a      	lsls	r2, r3, #24
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800216a:	e035      	b.n	80021d8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68d9      	ldr	r1, [r3, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	4603      	mov	r3, r0
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4403      	add	r3, r0
 8002184:	3b1e      	subs	r3, #30
 8002186:	409a      	lsls	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002190:	e022      	b.n	80021d8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	b29b      	uxth	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	2207      	movs	r2, #7
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	43da      	mvns	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	400a      	ands	r2, r1
 80021b4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6919      	ldr	r1, [r3, #16]
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	4603      	mov	r3, r0
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4403      	add	r3, r0
 80021ce:	409a      	lsls	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	430a      	orrs	r2, r1
 80021d6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b06      	cmp	r3, #6
 80021de:	d824      	bhi.n	800222a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b05      	subs	r3, #5
 80021f2:	221f      	movs	r2, #31
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3b05      	subs	r3, #5
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	635a      	str	r2, [r3, #52]	; 0x34
 8002228:	e04c      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d824      	bhi.n	800227c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	4613      	mov	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4413      	add	r3, r2
 8002242:	3b23      	subs	r3, #35	; 0x23
 8002244:	221f      	movs	r2, #31
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43da      	mvns	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	400a      	ands	r2, r1
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	b29b      	uxth	r3, r3
 8002260:	4618      	mov	r0, r3
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	4413      	add	r3, r2
 800226c:	3b23      	subs	r3, #35	; 0x23
 800226e:	fa00 f203 	lsl.w	r2, r0, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	430a      	orrs	r2, r1
 8002278:	631a      	str	r2, [r3, #48]	; 0x30
 800227a:	e023      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685a      	ldr	r2, [r3, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	4413      	add	r3, r2
 800228c:	3b41      	subs	r3, #65	; 0x41
 800228e:	221f      	movs	r2, #31
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	43da      	mvns	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	400a      	ands	r2, r1
 800229c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4413      	add	r3, r2
 80022b6:	3b41      	subs	r3, #65	; 0x41
 80022b8:	fa00 f203 	lsl.w	r2, r0, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a30      	ldr	r2, [pc, #192]	; (800238c <HAL_ADC_ConfigChannel+0x29c>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d10a      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022d6:	d105      	bne.n	80022e4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80022d8:	4b2d      	ldr	r3, [pc, #180]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	4a2c      	ldr	r2, [pc, #176]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 80022de:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80022e2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a28      	ldr	r2, [pc, #160]	; (800238c <HAL_ADC_ConfigChannel+0x29c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10f      	bne.n	800230e <HAL_ADC_ConfigChannel+0x21e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b12      	cmp	r3, #18
 80022f4:	d10b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a25      	ldr	r2, [pc, #148]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 80022fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002300:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002302:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	4a22      	ldr	r2, [pc, #136]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 8002308:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800230c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1e      	ldr	r2, [pc, #120]	; (800238c <HAL_ADC_ConfigChannel+0x29c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d12b      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x280>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_ADC_ConfigChannel+0x298>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d003      	beq.n	800232a <HAL_ADC_ConfigChannel+0x23a>
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b11      	cmp	r3, #17
 8002328:	d122      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 8002330:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002334:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002336:	4b16      	ldr	r3, [pc, #88]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4a15      	ldr	r2, [pc, #84]	; (8002390 <HAL_ADC_ConfigChannel+0x2a0>)
 800233c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002340:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a10      	ldr	r2, [pc, #64]	; (8002388 <HAL_ADC_ConfigChannel+0x298>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d111      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800234c:	4b11      	ldr	r3, [pc, #68]	; (8002394 <HAL_ADC_ConfigChannel+0x2a4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a11      	ldr	r2, [pc, #68]	; (8002398 <HAL_ADC_ConfigChannel+0x2a8>)
 8002352:	fba2 2303 	umull	r2, r3, r2, r3
 8002356:	0c9a      	lsrs	r2, r3, #18
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002362:	e002      	b.n	800236a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	3b01      	subs	r3, #1
 8002368:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	10000012 	.word	0x10000012
 800238c:	40012000 	.word	0x40012000
 8002390:	40012300 	.word	0x40012300
 8002394:	20000000 	.word	0x20000000
 8002398:	431bde83 	.word	0x431bde83

0800239c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80023a4:	4b78      	ldr	r3, [pc, #480]	; (8002588 <ADC_Init+0x1ec>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	4a77      	ldr	r2, [pc, #476]	; (8002588 <ADC_Init+0x1ec>)
 80023aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80023ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80023b0:	4b75      	ldr	r3, [pc, #468]	; (8002588 <ADC_Init+0x1ec>)
 80023b2:	685a      	ldr	r2, [r3, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4973      	ldr	r1, [pc, #460]	; (8002588 <ADC_Init+0x1ec>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	6859      	ldr	r1, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	021a      	lsls	r2, r3, #8
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685a      	ldr	r2, [r3, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6859      	ldr	r1, [r3, #4]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6899      	ldr	r1, [r3, #8]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242a:	4a58      	ldr	r2, [pc, #352]	; (800258c <ADC_Init+0x1f0>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d022      	beq.n	8002476 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800243e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6899      	ldr	r1, [r3, #8]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002460:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	6899      	ldr	r1, [r3, #8]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	430a      	orrs	r2, r1
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	e00f      	b.n	8002496 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689a      	ldr	r2, [r3, #8]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002484:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002494:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0202 	bic.w	r2, r2, #2
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	005a      	lsls	r2, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6859      	ldr	r1, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	3b01      	subs	r3, #1
 80024f0:	035a      	lsls	r2, r3, #13
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	605a      	str	r2, [r3, #4]
 80024fa:	e007      	b.n	800250c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	685a      	ldr	r2, [r3, #4]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800251a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	3b01      	subs	r3, #1
 8002528:	051a      	lsls	r2, r3, #20
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	689a      	ldr	r2, [r3, #8]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002540:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6899      	ldr	r1, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254e:	025a      	lsls	r2, r3, #9
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002566:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6899      	ldr	r1, [r3, #8]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	695b      	ldr	r3, [r3, #20]
 8002572:	029a      	lsls	r2, r3, #10
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	430a      	orrs	r2, r1
 800257a:	609a      	str	r2, [r3, #8]
}
 800257c:	bf00      	nop
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	40012300 	.word	0x40012300
 800258c:	0f000001 	.word	0x0f000001

08002590 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d101      	bne.n	80025a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e0ed      	b.n	800277e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff f896 	bl	80016e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c4:	f7ff fd20 	bl	8002008 <HAL_GetTick>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025ca:	e012      	b.n	80025f2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80025cc:	f7ff fd1c 	bl	8002008 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b0a      	cmp	r3, #10
 80025d8:	d90b      	bls.n	80025f2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e0c5      	b.n	800277e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f003 0301 	and.w	r3, r3, #1
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0e5      	beq.n	80025cc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0202 	bic.w	r2, r2, #2
 800260e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002610:	f7ff fcfa 	bl	8002008 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002616:	e012      	b.n	800263e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002618:	f7ff fcf6 	bl	8002008 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b0a      	cmp	r3, #10
 8002624:	d90b      	bls.n	800263e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2205      	movs	r2, #5
 8002636:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e09f      	b.n	800277e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1e5      	bne.n	8002618 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7e1b      	ldrb	r3, [r3, #24]
 8002650:	2b01      	cmp	r3, #1
 8002652:	d108      	bne.n	8002666 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	7e5b      	ldrb	r3, [r3, #25]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d108      	bne.n	8002690 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800268c:	601a      	str	r2, [r3, #0]
 800268e:	e007      	b.n	80026a0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800269e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	7e9b      	ldrb	r3, [r3, #26]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d108      	bne.n	80026ba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 0220 	orr.w	r2, r2, #32
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	e007      	b.n	80026ca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0220 	bic.w	r2, r2, #32
 80026c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7edb      	ldrb	r3, [r3, #27]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d108      	bne.n	80026e4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0210 	bic.w	r2, r2, #16
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	e007      	b.n	80026f4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0210 	orr.w	r2, r2, #16
 80026f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7f1b      	ldrb	r3, [r3, #28]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d108      	bne.n	800270e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0208 	orr.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	e007      	b.n	800271e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f022 0208 	bic.w	r2, r2, #8
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	7f5b      	ldrb	r3, [r3, #29]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d108      	bne.n	8002738 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0204 	orr.w	r2, r2, #4
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e007      	b.n	8002748 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689a      	ldr	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	ea42 0103 	orr.w	r1, r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	1e5a      	subs	r2, r3, #1
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b08a      	sub	sp, #40	; 0x28
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	695b      	ldr	r3, [r3, #20]
 8002798:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d07c      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d023      	beq.n	800281e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2201      	movs	r2, #1
 80027dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d003      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f000 f983 	bl	8002af4 <HAL_CAN_TxMailbox0CompleteCallback>
 80027ee:	e016      	b.n	800281e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	f003 0304 	and.w	r3, r3, #4
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d004      	beq.n	8002804 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
 8002802:	e00c      	b.n	800281e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002804:	69bb      	ldr	r3, [r7, #24]
 8002806:	f003 0308 	and.w	r3, r3, #8
 800280a:	2b00      	cmp	r3, #0
 800280c:	d004      	beq.n	8002818 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
 8002816:	e002      	b.n	800281e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f989 	bl	8002b30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800281e:	69bb      	ldr	r3, [r7, #24]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d024      	beq.n	8002872 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002830:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002832:	69bb      	ldr	r3, [r7, #24]
 8002834:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f963 	bl	8002b08 <HAL_CAN_TxMailbox1CompleteCallback>
 8002842:	e016      	b.n	8002872 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800284a:	2b00      	cmp	r3, #0
 800284c:	d004      	beq.n	8002858 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800284e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002850:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
 8002856:	e00c      	b.n	8002872 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e002      	b.n	8002872 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f969 	bl	8002b44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d024      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002884:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d003      	beq.n	8002898 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f943 	bl	8002b1c <HAL_CAN_TxMailbox2CompleteCallback>
 8002896:	e016      	b.n	80028c6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d004      	beq.n	80028ac <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	e00c      	b.n	80028c6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	e002      	b.n	80028c6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f949 	bl	8002b58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80028c6:	6a3b      	ldr	r3, [r7, #32]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00c      	beq.n	80028ea <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f003 0310 	and.w	r3, r3, #16
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d00b      	beq.n	800290c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f003 0308 	and.w	r3, r3, #8
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d006      	beq.n	800290c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2208      	movs	r2, #8
 8002904:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f93a 	bl	8002b80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	f003 0303 	and.w	r3, r3, #3
 8002920:	2b00      	cmp	r3, #0
 8002922:	d002      	beq.n	800292a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f921 	bl	8002b6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00c      	beq.n	800294e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	f003 0310 	and.w	r3, r3, #16
 800293a:	2b00      	cmp	r3, #0
 800293c:	d007      	beq.n	800294e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800293e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002940:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002944:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2210      	movs	r2, #16
 800294c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d006      	beq.n	8002970 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2208      	movs	r2, #8
 8002968:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f91c 	bl	8002ba8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	f003 0310 	and.w	r3, r3, #16
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f903 	bl	8002b94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800298e:	6a3b      	ldr	r3, [r7, #32]
 8002990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00b      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	f003 0310 	and.w	r3, r3, #16
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2210      	movs	r2, #16
 80029a8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f906 	bl	8002bbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00b      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2208      	movs	r2, #8
 80029ca:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8ff 	bl	8002bd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d07b      	beq.n	8002ad4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f003 0304 	and.w	r3, r3, #4
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d072      	beq.n	8002acc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d008      	beq.n	8002a1e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d008      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	f043 0304 	orr.w	r3, r3, #4
 8002a38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d043      	beq.n	8002acc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d03e      	beq.n	8002acc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a54:	2b60      	cmp	r3, #96	; 0x60
 8002a56:	d02b      	beq.n	8002ab0 <HAL_CAN_IRQHandler+0x32a>
 8002a58:	2b60      	cmp	r3, #96	; 0x60
 8002a5a:	d82e      	bhi.n	8002aba <HAL_CAN_IRQHandler+0x334>
 8002a5c:	2b50      	cmp	r3, #80	; 0x50
 8002a5e:	d022      	beq.n	8002aa6 <HAL_CAN_IRQHandler+0x320>
 8002a60:	2b50      	cmp	r3, #80	; 0x50
 8002a62:	d82a      	bhi.n	8002aba <HAL_CAN_IRQHandler+0x334>
 8002a64:	2b40      	cmp	r3, #64	; 0x40
 8002a66:	d019      	beq.n	8002a9c <HAL_CAN_IRQHandler+0x316>
 8002a68:	2b40      	cmp	r3, #64	; 0x40
 8002a6a:	d826      	bhi.n	8002aba <HAL_CAN_IRQHandler+0x334>
 8002a6c:	2b30      	cmp	r3, #48	; 0x30
 8002a6e:	d010      	beq.n	8002a92 <HAL_CAN_IRQHandler+0x30c>
 8002a70:	2b30      	cmp	r3, #48	; 0x30
 8002a72:	d822      	bhi.n	8002aba <HAL_CAN_IRQHandler+0x334>
 8002a74:	2b10      	cmp	r3, #16
 8002a76:	d002      	beq.n	8002a7e <HAL_CAN_IRQHandler+0x2f8>
 8002a78:	2b20      	cmp	r3, #32
 8002a7a:	d005      	beq.n	8002a88 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002a7c:	e01d      	b.n	8002aba <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f043 0308 	orr.w	r3, r3, #8
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a86:	e019      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8a:	f043 0310 	orr.w	r3, r3, #16
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a90:	e014      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a94:	f043 0320 	orr.w	r3, r3, #32
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002a9a:	e00f      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aa4:	e00a      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aae:	e005      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ab8:	e000      	b.n	8002abc <HAL_CAN_IRQHandler+0x336>
            break;
 8002aba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	699a      	ldr	r2, [r3, #24]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002aca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f87c 	bl	8002be4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002aec:	bf00      	nop
 8002aee:	3728      	adds	r7, #40	; 0x28
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002b4c:	bf00      	nop
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b56:	4770      	bx	lr

08002b58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b083      	sub	sp, #12
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c08:	4b0b      	ldr	r3, [pc, #44]	; (8002c38 <__NVIC_SetPriorityGrouping+0x40>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0e:	68ba      	ldr	r2, [r7, #8]
 8002c10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c14:	4013      	ands	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <__NVIC_SetPriorityGrouping+0x44>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <__NVIC_SetPriorityGrouping+0x40>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00
 8002c3c:	05fa0000 	.word	0x05fa0000

08002c40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c44:	4b04      	ldr	r3, [pc, #16]	; (8002c58 <__NVIC_GetPriorityGrouping+0x18>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 0307 	and.w	r3, r3, #7
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	4603      	mov	r3, r0
 8002c64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	db0b      	blt.n	8002c86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6e:	79fb      	ldrb	r3, [r7, #7]
 8002c70:	f003 021f 	and.w	r2, r3, #31
 8002c74:	4907      	ldr	r1, [pc, #28]	; (8002c94 <__NVIC_EnableIRQ+0x38>)
 8002c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7a:	095b      	lsrs	r3, r3, #5
 8002c7c:	2001      	movs	r0, #1
 8002c7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
 8002c92:	bf00      	nop
 8002c94:	e000e100 	.word	0xe000e100

08002c98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	6039      	str	r1, [r7, #0]
 8002ca2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	db0a      	blt.n	8002cc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	490c      	ldr	r1, [pc, #48]	; (8002ce4 <__NVIC_SetPriority+0x4c>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	0112      	lsls	r2, r2, #4
 8002cb8:	b2d2      	uxtb	r2, r2
 8002cba:	440b      	add	r3, r1
 8002cbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cc0:	e00a      	b.n	8002cd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	4908      	ldr	r1, [pc, #32]	; (8002ce8 <__NVIC_SetPriority+0x50>)
 8002cc8:	79fb      	ldrb	r3, [r7, #7]
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	3b04      	subs	r3, #4
 8002cd0:	0112      	lsls	r2, r2, #4
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	761a      	strb	r2, [r3, #24]
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000e100 	.word	0xe000e100
 8002ce8:	e000ed00 	.word	0xe000ed00

08002cec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	f1c3 0307 	rsb	r3, r3, #7
 8002d06:	2b04      	cmp	r3, #4
 8002d08:	bf28      	it	cs
 8002d0a:	2304      	movcs	r3, #4
 8002d0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3304      	adds	r3, #4
 8002d12:	2b06      	cmp	r3, #6
 8002d14:	d902      	bls.n	8002d1c <NVIC_EncodePriority+0x30>
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3b03      	subs	r3, #3
 8002d1a:	e000      	b.n	8002d1e <NVIC_EncodePriority+0x32>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d20:	f04f 32ff 	mov.w	r2, #4294967295
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2a:	43da      	mvns	r2, r3
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	401a      	ands	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d34:	f04f 31ff 	mov.w	r1, #4294967295
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3e:	43d9      	mvns	r1, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d44:	4313      	orrs	r3, r2
         );
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3724      	adds	r7, #36	; 0x24
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff ff4c 	bl	8002bf8 <__NVIC_SetPriorityGrouping>
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d76:	2300      	movs	r3, #0
 8002d78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d7a:	f7ff ff61 	bl	8002c40 <__NVIC_GetPriorityGrouping>
 8002d7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	68b9      	ldr	r1, [r7, #8]
 8002d84:	6978      	ldr	r0, [r7, #20]
 8002d86:	f7ff ffb1 	bl	8002cec <NVIC_EncodePriority>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d90:	4611      	mov	r1, r2
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff80 	bl	8002c98 <__NVIC_SetPriority>
}
 8002d98:	bf00      	nop
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7ff ff54 	bl	8002c5c <__NVIC_EnableIRQ>
}
 8002db4:	bf00      	nop
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002dc8:	f7ff f91e 	bl	8002008 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e099      	b.n	8002f0c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002df8:	e00f      	b.n	8002e1a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dfa:	f7ff f905 	bl	8002008 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b05      	cmp	r3, #5
 8002e06:	d908      	bls.n	8002e1a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2203      	movs	r2, #3
 8002e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e078      	b.n	8002f0c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e8      	bne.n	8002dfa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e30:	697a      	ldr	r2, [r7, #20]
 8002e32:	4b38      	ldr	r3, [pc, #224]	; (8002f14 <HAL_DMA_Init+0x158>)
 8002e34:	4013      	ands	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685a      	ldr	r2, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e46:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	2b04      	cmp	r3, #4
 8002e72:	d107      	bne.n	8002e84 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f023 0307 	bic.w	r3, r3, #7
 8002e9a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	2b04      	cmp	r3, #4
 8002eac:	d117      	bne.n	8002ede <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fa7b 	bl	80033bc <DMA_CheckFifoParam>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2240      	movs	r2, #64	; 0x40
 8002ed0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002eda:	2301      	movs	r3, #1
 8002edc:	e016      	b.n	8002f0c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa32 	bl	8003350 <DMA_CalcBaseAndBitshift>
 8002eec:	4603      	mov	r3, r0
 8002eee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef4:	223f      	movs	r2, #63	; 0x3f
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002f0a:	2300      	movs	r3, #0
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	e010803f 	.word	0xe010803f

08002f18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f26:	f7ff f86f 	bl	8002008 <HAL_GetTick>
 8002f2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	d008      	beq.n	8002f4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2280      	movs	r2, #128	; 0x80
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e052      	b.n	8002ff0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_Abort+0x62>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0201 	bic.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f9a:	e013      	b.n	8002fc4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f9c:	f7ff f834 	bl	8002008 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b05      	cmp	r3, #5
 8002fa8:	d90c      	bls.n	8002fc4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2220      	movs	r2, #32
 8002fae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2203      	movs	r2, #3
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e015      	b.n	8002ff0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1e4      	bne.n	8002f9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	223f      	movs	r2, #63	; 0x3f
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003006:	b2db      	uxtb	r3, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d004      	beq.n	8003016 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2280      	movs	r2, #128	; 0x80
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e00c      	b.n	8003030 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2205      	movs	r2, #5
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003048:	4b92      	ldr	r3, [pc, #584]	; (8003294 <HAL_DMA_IRQHandler+0x258>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a92      	ldr	r2, [pc, #584]	; (8003298 <HAL_DMA_IRQHandler+0x25c>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2208      	movs	r2, #8
 8003068:	409a      	lsls	r2, r3
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4013      	ands	r3, r2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d01a      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d013      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0204 	bic.w	r2, r2, #4
 800308e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003094:	2208      	movs	r2, #8
 8003096:	409a      	lsls	r2, r3
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	f043 0201 	orr.w	r2, r3, #1
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ac:	2201      	movs	r2, #1
 80030ae:	409a      	lsls	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4013      	ands	r3, r2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d012      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2201      	movs	r2, #1
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d6:	f043 0202 	orr.w	r2, r3, #2
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e2:	2204      	movs	r2, #4
 80030e4:	409a      	lsls	r2, r3
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4013      	ands	r3, r2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d012      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00b      	beq.n	8003114 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003100:	2204      	movs	r2, #4
 8003102:	409a      	lsls	r2, r3
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310c:	f043 0204 	orr.w	r2, r3, #4
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	2210      	movs	r2, #16
 800311a:	409a      	lsls	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d043      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0308 	and.w	r3, r3, #8
 800312e:	2b00      	cmp	r3, #0
 8003130:	d03c      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	2210      	movs	r2, #16
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003148:	2b00      	cmp	r3, #0
 800314a:	d018      	beq.n	800317e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d024      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	4798      	blx	r3
 800316a:	e01f      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01b      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
 800317c:	e016      	b.n	80031ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d107      	bne.n	800319c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f022 0208 	bic.w	r2, r2, #8
 800319a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b0:	2220      	movs	r2, #32
 80031b2:	409a      	lsls	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 808e 	beq.w	80032da <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0310 	and.w	r3, r3, #16
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8086 	beq.w	80032da <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2220      	movs	r2, #32
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	2b05      	cmp	r3, #5
 80031e4:	d136      	bne.n	8003254 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0216 	bic.w	r2, r2, #22
 80031f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695a      	ldr	r2, [r3, #20]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003204:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <HAL_DMA_IRQHandler+0x1da>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0208 	bic.w	r2, r2, #8
 8003224:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800322a:	223f      	movs	r2, #63	; 0x3f
 800322c:	409a      	lsls	r2, r3
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	2b00      	cmp	r3, #0
 8003248:	d07d      	beq.n	8003346 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
        }
        return;
 8003252:	e078      	b.n	8003346 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d01c      	beq.n	800329c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d108      	bne.n	8003282 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003274:	2b00      	cmp	r3, #0
 8003276:	d030      	beq.n	80032da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
 8003280:	e02b      	b.n	80032da <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003286:	2b00      	cmp	r3, #0
 8003288:	d027      	beq.n	80032da <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
 8003292:	e022      	b.n	80032da <HAL_DMA_IRQHandler+0x29e>
 8003294:	20000000 	.word	0x20000000
 8003298:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f022 0210 	bic.w	r2, r2, #16
 80032b8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d032      	beq.n	8003348 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d022      	beq.n	8003334 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2205      	movs	r2, #5
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f022 0201 	bic.w	r2, r2, #1
 8003304:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3301      	adds	r3, #1
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	429a      	cmp	r2, r3
 8003310:	d307      	bcc.n	8003322 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1f2      	bne.n	8003306 <HAL_DMA_IRQHandler+0x2ca>
 8003320:	e000      	b.n	8003324 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003322:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	6878      	ldr	r0, [r7, #4]
 8003342:	4798      	blx	r3
 8003344:	e000      	b.n	8003348 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003346:	bf00      	nop
    }
  }
}
 8003348:	3718      	adds	r7, #24
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop

08003350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b2db      	uxtb	r3, r3
 800335e:	3b10      	subs	r3, #16
 8003360:	4a13      	ldr	r2, [pc, #76]	; (80033b0 <DMA_CalcBaseAndBitshift+0x60>)
 8003362:	fba2 2303 	umull	r2, r3, r2, r3
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <DMA_CalcBaseAndBitshift+0x64>)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d908      	bls.n	8003390 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	4b0c      	ldr	r3, [pc, #48]	; (80033b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003386:	4013      	ands	r3, r2
 8003388:	1d1a      	adds	r2, r3, #4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	659a      	str	r2, [r3, #88]	; 0x58
 800338e:	e006      	b.n	800339e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	461a      	mov	r2, r3
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <DMA_CalcBaseAndBitshift+0x68>)
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	aaaaaaab 	.word	0xaaaaaaab
 80033b4:	08021bfc 	.word	0x08021bfc
 80033b8:	fffffc00 	.word	0xfffffc00

080033bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80033bc:	b480      	push	{r7}
 80033be:	b085      	sub	sp, #20
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d11f      	bne.n	8003416 <DMA_CheckFifoParam+0x5a>
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b03      	cmp	r3, #3
 80033da:	d856      	bhi.n	800348a <DMA_CheckFifoParam+0xce>
 80033dc:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <DMA_CheckFifoParam+0x28>)
 80033de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e2:	bf00      	nop
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003407 	.word	0x08003407
 80033ec:	080033f5 	.word	0x080033f5
 80033f0:	0800348b 	.word	0x0800348b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d046      	beq.n	800348e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003404:	e043      	b.n	800348e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800340e:	d140      	bne.n	8003492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003414:	e03d      	b.n	8003492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800341e:	d121      	bne.n	8003464 <DMA_CheckFifoParam+0xa8>
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d837      	bhi.n	8003496 <DMA_CheckFifoParam+0xda>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <DMA_CheckFifoParam+0x70>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	0800343d 	.word	0x0800343d
 8003430:	08003443 	.word	0x08003443
 8003434:	0800343d 	.word	0x0800343d
 8003438:	08003455 	.word	0x08003455
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
      break;
 8003440:	e030      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003446:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d025      	beq.n	800349a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003452:	e022      	b.n	800349a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800345c:	d11f      	bne.n	800349e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003462:	e01c      	b.n	800349e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b02      	cmp	r3, #2
 8003468:	d903      	bls.n	8003472 <DMA_CheckFifoParam+0xb6>
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b03      	cmp	r3, #3
 800346e:	d003      	beq.n	8003478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003470:	e018      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	73fb      	strb	r3, [r7, #15]
      break;
 8003476:	e015      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00e      	beq.n	80034a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	73fb      	strb	r3, [r7, #15]
      break;
 8003488:	e00b      	b.n	80034a2 <DMA_CheckFifoParam+0xe6>
      break;
 800348a:	bf00      	nop
 800348c:	e00a      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800348e:	bf00      	nop
 8003490:	e008      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003492:	bf00      	nop
 8003494:	e006      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003496:	bf00      	nop
 8003498:	e004      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 800349a:	bf00      	nop
 800349c:	e002      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800349e:	bf00      	nop
 80034a0:	e000      	b.n	80034a4 <DMA_CheckFifoParam+0xe8>
      break;
 80034a2:	bf00      	nop
    }
  } 
  
  return status; 
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop

080034b4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b088      	sub	sp, #32
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	2300      	movs	r3, #0
 80034c2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80034c4:	4ba9      	ldr	r3, [pc, #676]	; (800376c <HAL_ETH_Init+0x2b8>)
 80034c6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80034cc:	2300      	movs	r3, #0
 80034ce:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e181      	b.n	80037de <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d106      	bne.n	80034f4 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f004 ff98 	bl	8008424 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034f4:	4b9e      	ldr	r3, [pc, #632]	; (8003770 <HAL_ETH_Init+0x2bc>)
 80034f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034f8:	4a9d      	ldr	r2, [pc, #628]	; (8003770 <HAL_ETH_Init+0x2bc>)
 80034fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034fe:	6453      	str	r3, [r2, #68]	; 0x44
 8003500:	4b9b      	ldr	r3, [pc, #620]	; (8003770 <HAL_ETH_Init+0x2bc>)
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800350c:	4b99      	ldr	r3, [pc, #612]	; (8003774 <HAL_ETH_Init+0x2c0>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a98      	ldr	r2, [pc, #608]	; (8003774 <HAL_ETH_Init+0x2c0>)
 8003512:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003516:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003518:	4b96      	ldr	r3, [pc, #600]	; (8003774 <HAL_ETH_Init+0x2c0>)
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	4994      	ldr	r1, [pc, #592]	; (8003774 <HAL_ETH_Init+0x2c0>)
 8003522:	4313      	orrs	r3, r2
 8003524:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800353c:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800353e:	f7fe fd63 	bl	8002008 <HAL_GetTick>
 8003542:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8003544:	e011      	b.n	800356a <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8003546:	f7fe fd5f 	bl	8002008 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003554:	d909      	bls.n	800356a <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2203      	movs	r2, #3
 800355a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e139      	b.n	80037de <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1e4      	bne.n	8003546 <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	f023 031c 	bic.w	r3, r3, #28
 800358a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800358c:	f002 f8e0 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8003590:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	4a78      	ldr	r2, [pc, #480]	; (8003778 <HAL_ETH_Init+0x2c4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d908      	bls.n	80035ac <HAL_ETH_Init+0xf8>
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	4a77      	ldr	r2, [pc, #476]	; (800377c <HAL_ETH_Init+0x2c8>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d804      	bhi.n	80035ac <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	f043 0308 	orr.w	r3, r3, #8
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	e027      	b.n	80035fc <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_ETH_Init+0x2c8>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d908      	bls.n	80035c6 <HAL_ETH_Init+0x112>
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	4a6d      	ldr	r2, [pc, #436]	; (800376c <HAL_ETH_Init+0x2b8>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d204      	bcs.n	80035c6 <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80035bc:	69fb      	ldr	r3, [r7, #28]
 80035be:	f043 030c 	orr.w	r3, r3, #12
 80035c2:	61fb      	str	r3, [r7, #28]
 80035c4:	e01a      	b.n	80035fc <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	4a68      	ldr	r2, [pc, #416]	; (800376c <HAL_ETH_Init+0x2b8>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d303      	bcc.n	80035d6 <HAL_ETH_Init+0x122>
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	4a6b      	ldr	r2, [pc, #428]	; (8003780 <HAL_ETH_Init+0x2cc>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d911      	bls.n	80035fa <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	4a69      	ldr	r2, [pc, #420]	; (8003780 <HAL_ETH_Init+0x2cc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d908      	bls.n	80035f0 <HAL_ETH_Init+0x13c>
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	4a68      	ldr	r2, [pc, #416]	; (8003784 <HAL_ETH_Init+0x2d0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d804      	bhi.n	80035f0 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	f043 0304 	orr.w	r3, r3, #4
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e005      	b.n	80035fc <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f043 0310 	orr.w	r3, r3, #16
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	e000      	b.n	80035fc <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80035fa:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	69fa      	ldr	r2, [r7, #28]
 8003602:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003604:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003608:	2100      	movs	r1, #0
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fc17 	bl	8003e3e <HAL_ETH_WritePHYRegister>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800361a:	6939      	ldr	r1, [r7, #16]
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fdcd 	bl	80041bc <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e0d7      	b.n	80037de <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800362e:	20ff      	movs	r0, #255	; 0xff
 8003630:	f7fe fcf6 	bl	8002020 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 80a5 	beq.w	8003788 <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800363e:	f7fe fce3 	bl	8002008 <HAL_GetTick>
 8003642:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003644:	f107 030c 	add.w	r3, r7, #12
 8003648:	461a      	mov	r2, r3
 800364a:	2101      	movs	r1, #1
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f000 fb8e 	bl	8003d6e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8003652:	f7fe fcd9 	bl	8002008 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003660:	4293      	cmp	r3, r2
 8003662:	d90f      	bls.n	8003684 <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003668:	6939      	ldr	r1, [r7, #16]
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f000 fda6 	bl	80041bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e0ac      	b.n	80037de <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f003 0304 	and.w	r3, r3, #4
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0da      	beq.n	8003644 <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800368e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003692:	2100      	movs	r1, #0
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f000 fbd2 	bl	8003e3e <HAL_ETH_WritePHYRegister>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80036a4:	6939      	ldr	r1, [r7, #16]
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 fd88 	bl	80041bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80036b4:	2301      	movs	r3, #1
 80036b6:	e092      	b.n	80037de <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80036b8:	f7fe fca6 	bl	8002008 <HAL_GetTick>
 80036bc:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80036be:	f107 030c 	add.w	r3, r7, #12
 80036c2:	461a      	mov	r2, r3
 80036c4:	2101      	movs	r1, #1
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fb51 	bl	8003d6e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80036cc:	f7fe fc9c 	bl	8002008 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80036da:	4293      	cmp	r3, r2
 80036dc:	d90f      	bls.n	80036fe <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80036e2:	6939      	ldr	r1, [r7, #16]
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fd69 	bl	80041bc <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e06f      	b.n	80037de <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f003 0320 	and.w	r3, r3, #32
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0da      	beq.n	80036be <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003708:	f107 030c 	add.w	r3, r7, #12
 800370c:	461a      	mov	r2, r3
 800370e:	2110      	movs	r1, #16
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fb2c 	bl	8003d6e <HAL_ETH_ReadPHYRegister>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00b      	beq.n	8003734 <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003720:	6939      	ldr	r1, [r7, #16]
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 fd4a 	bl	80041bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003730:	2301      	movs	r3, #1
 8003732:	e054      	b.n	80037de <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f003 0304 	and.w	r3, r3, #4
 800373a:	2b00      	cmp	r3, #0
 800373c:	d004      	beq.n	8003748 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e002      	b.n	800374e <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	609a      	str	r2, [r3, #8]
 800375e:	e035      	b.n	80037cc <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	e030      	b.n	80037cc <HAL_ETH_Init+0x318>
 800376a:	bf00      	nop
 800376c:	03938700 	.word	0x03938700
 8003770:	40023800 	.word	0x40023800
 8003774:	40013800 	.word	0x40013800
 8003778:	01312cff 	.word	0x01312cff
 800377c:	02160ebf 	.word	0x02160ebf
 8003780:	05f5e0ff 	.word	0x05f5e0ff
 8003784:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	08db      	lsrs	r3, r3, #3
 800378e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	085b      	lsrs	r3, r3, #1
 8003796:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8003798:	4313      	orrs	r3, r2
 800379a:	b29b      	uxth	r3, r3
 800379c:	461a      	mov	r2, r3
 800379e:	2100      	movs	r1, #0
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 fb4c 	bl	8003e3e <HAL_ETH_WritePHYRegister>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fd02 	bl	80041bc <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e00c      	b.n	80037de <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80037c4:	f640 70ff 	movw	r0, #4095	; 0xfff
 80037c8:	f7fe fc2a 	bl	8002020 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80037cc:	6939      	ldr	r1, [r7, #16]
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f000 fcf4 	bl	80041bc <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop

080037e8 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
 80037f4:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003800:	2b01      	cmp	r3, #1
 8003802:	d101      	bne.n	8003808 <HAL_ETH_DMATxDescListInit+0x20>
 8003804:	2302      	movs	r3, #2
 8003806:	e052      	b.n	80038ae <HAL_ETH_DMATxDescListInit+0xc6>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2202      	movs	r2, #2
 8003814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	e030      	b.n	8003886 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the member (i) of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	015b      	lsls	r3, r3, #5
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	4413      	add	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003834:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800383c:	fb02 f303 	mul.w	r3, r2, r3
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	4413      	add	r3, r2
 8003844:	461a      	mov	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	429a      	cmp	r2, r3
 8003866:	d208      	bcs.n	800387a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	3301      	adds	r3, #1
 800386c:	015b      	lsls	r3, r3, #5
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	4413      	add	r3, r2
 8003872:	461a      	mov	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	60da      	str	r2, [r3, #12]
 8003878:	e002      	b.n	8003880 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800387a:	68ba      	ldr	r2, [r7, #8]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	3301      	adds	r3, #1
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d3ca      	bcc.n	8003824 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6819      	ldr	r1, [r3, #0]
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	f241 0310 	movw	r3, #4112	; 0x1010
 8003898:	440b      	add	r3, r1
 800389a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038ac:	2300      	movs	r3, #0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	371c      	adds	r7, #28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80038ba:	b480      	push	{r7}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_ETH_DMARxDescListInit+0x20>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e056      	b.n	8003988 <HAL_ETH_DMARxDescListInit+0xce>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 80038f0:	2300      	movs	r3, #0
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e034      	b.n	8003960 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the member (i) of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	015b      	lsls	r3, r3, #5
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	4413      	add	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003906:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800390e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	4413      	add	r3, r2
 800391e:	461a      	mov	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d105      	bne.n	8003938 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	697a      	ldr	r2, [r7, #20]
 800393e:	429a      	cmp	r2, r3
 8003940:	d208      	bcs.n	8003954 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	3301      	adds	r3, #1
 8003946:	015b      	lsls	r3, r3, #5
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	4413      	add	r3, r2
 800394c:	461a      	mov	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e002      	b.n	800395a <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3301      	adds	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
 8003960:	697a      	ldr	r2, [r7, #20]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d3c6      	bcc.n	80038f6 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6819      	ldr	r1, [r3, #0]
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	f241 030c 	movw	r3, #4108	; 0x100c
 8003972:	440b      	add	r3, r1
 8003974:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	371c      	adds	r7, #28
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003994:	b480      	push	{r7}
 8003996:	b087      	sub	sp, #28
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	617b      	str	r3, [r7, #20]
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
 80039a6:	2300      	movs	r3, #0
 80039a8:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_ETH_TransmitFrame+0x24>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e0cd      	b.n	8003b54 <HAL_ETH_TransmitFrame+0x1c0>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80039de:	2301      	movs	r3, #1
 80039e0:	e0b8      	b.n	8003b54 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	da09      	bge.n	8003a00 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2212      	movs	r2, #18
 80039f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0a9      	b.n	8003b54 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d915      	bls.n	8003a36 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	4a54      	ldr	r2, [pc, #336]	; (8003b60 <HAL_ETH_TransmitFrame+0x1cc>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	0a9b      	lsrs	r3, r3, #10
 8003a14:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <HAL_ETH_TransmitFrame+0x1cc>)
 8003a1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003a1e:	0a9b      	lsrs	r3, r3, #10
 8003a20:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003a24:	fb01 f303 	mul.w	r3, r1, r3
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d005      	beq.n	8003a3a <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3301      	adds	r3, #1
 8003a32:	617b      	str	r3, [r7, #20]
 8003a34:	e001      	b.n	8003a3a <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8003a36:	2301      	movs	r3, #1
 8003a38:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d11c      	bne.n	8003a7a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4a:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8003a4e:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003a5a:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003a6a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	461a      	mov	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a78:	e04b      	b.n	8003b12 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	e044      	b.n	8003b0a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a8e:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d107      	bne.n	8003aa6 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003aa4:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003aae:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d116      	bne.n	8003ae8 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003ac8:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	4a25      	ldr	r2, [pc, #148]	; (8003b64 <HAL_ETH_TransmitFrame+0x1d0>)
 8003ace:	fb02 f203 	mul.w	r2, r2, r3
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003ada:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003ae6:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003af6:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	461a      	mov	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	3301      	adds	r3, #1
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d3b6      	bcc.n	8003a80 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b1a:	4413      	add	r3, r2
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00d      	beq.n	8003b42 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	f241 0314 	movw	r3, #4116	; 0x1014
 8003b2e:	4413      	add	r3, r2
 8003b30:	2204      	movs	r2, #4
 8003b32:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	f241 0304 	movw	r3, #4100	; 0x1004
 8003b3c:	4413      	add	r3, r2
 8003b3e:	2200      	movs	r2, #0
 8003b40:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	ac02b00b 	.word	0xac02b00b
 8003b64:	fffffa0c 	.word	0xfffffa0c

08003b68 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d101      	bne.n	8003b82 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8003b7e:	2302      	movs	r3, #2
 8003b80:	e074      	b.n	8003c6c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003b92:	e05a      	b.n	8003c4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3301      	adds	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ba8:	d10d      	bne.n	8003bc6 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc4:	e041      	b.n	8003c4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10b      	bne.n	8003bec <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	461a      	mov	r2, r3
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bea:	e02e      	b.n	8003c4a <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d103      	bne.n	8003c0e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8003c1a:	1f1a      	subs	r2, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	689a      	ldr	r2, [r3, #8]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	461a      	mov	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8003c46:	2300      	movs	r3, #0
 8003c48:	e010      	b.n	8003c6c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	db02      	blt.n	8003c5a <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d99c      	bls.n	8003b94 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	f241 0314 	movw	r3, #4116	; 0x1014
 8003c88:	4413      	add	r3, r2
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c90:	2b40      	cmp	r3, #64	; 0x40
 8003c92:	d112      	bne.n	8003cba <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f004 fc85 	bl	80085a4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	f241 0314 	movw	r3, #4116	; 0x1014
 8003ca2:	4413      	add	r3, r2
 8003ca4:	2240      	movs	r2, #64	; 0x40
 8003ca6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb8:	e01b      	b.n	8003cf2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	f241 0314 	movw	r3, #4116	; 0x1014
 8003cc2:	4413      	add	r3, r2
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0301 	and.w	r3, r3, #1
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d111      	bne.n	8003cf2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f839 	bl	8003d46 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	f241 0314 	movw	r3, #4116	; 0x1014
 8003cdc:	4413      	add	r3, r2
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	f241 0314 	movw	r3, #4116	; 0x1014
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003d00:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681a      	ldr	r2, [r3, #0]
 8003d06:	f241 0314 	movw	r3, #4116	; 0x1014
 8003d0a:	4413      	add	r3, r2
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d16:	d112      	bne.n	8003d3e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f81e 	bl	8003d5a <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	f241 0314 	movw	r3, #4116	; 0x1014
 8003d26:	4413      	add	r3, r2
 8003d28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003d2c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr

08003d5a <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */ 
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr

08003d6e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b086      	sub	sp, #24
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	60f8      	str	r0, [r7, #12]
 8003d76:	460b      	mov	r3, r1
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b82      	cmp	r3, #130	; 0x82
 8003d8e:	d101      	bne.n	8003d94 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003d90:	2302      	movs	r3, #2
 8003d92:	e050      	b.n	8003e36 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2282      	movs	r2, #130	; 0x82
 8003d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	f003 031c 	and.w	r3, r3, #28
 8003daa:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8a1b      	ldrh	r3, [r3, #16]
 8003db0:	02db      	lsls	r3, r3, #11
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	019b      	lsls	r3, r3, #6
 8003dbe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f023 0302 	bic.w	r3, r3, #2
 8003dce:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003de0:	f7fe f912 	bl	8002008 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003de6:	e015      	b.n	8003e14 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003de8:	f7fe f90e 	bl	8002008 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003df6:	d309      	bcc.n	8003e0c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e014      	b.n	8003e36 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 0301 	and.w	r3, r3, #1
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e4      	bne.n	8003de8 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	695b      	ldr	r3, [r3, #20]
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3718      	adds	r7, #24
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}

08003e3e <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b086      	sub	sp, #24
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	460b      	mov	r3, r1
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b42      	cmp	r3, #66	; 0x42
 8003e5e:	d101      	bne.n	8003e64 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8003e60:	2302      	movs	r3, #2
 8003e62:	e04e      	b.n	8003f02 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2242      	movs	r2, #66	; 0x42
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f003 031c 	and.w	r3, r3, #28
 8003e7a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8a1b      	ldrh	r3, [r3, #16]
 8003e80:	02db      	lsls	r3, r3, #11
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003e8a:	897b      	ldrh	r3, [r7, #10]
 8003e8c:	019b      	lsls	r3, r3, #6
 8003e8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f043 0301 	orr.w	r3, r3, #1
 8003ea6:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	697a      	ldr	r2, [r7, #20]
 8003eb8:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003eba:	f7fe f8a5 	bl	8002008 <HAL_GetTick>
 8003ebe:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003ec0:	e015      	b.n	8003eee <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003ec2:	f7fe f8a1 	bl	8002008 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed0:	d309      	bcc.n	8003ee6 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e00d      	b.n	8003f02 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e4      	bne.n	8003ec2 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f18:	2b01      	cmp	r3, #1
 8003f1a:	d101      	bne.n	8003f20 <HAL_ETH_Start+0x16>
 8003f1c:	2302      	movs	r3, #2
 8003f1e:	e01f      	b.n	8003f60 <HAL_ETH_Start+0x56>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 fb45 	bl	80045c0 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f000 fb7c 	bl	8004634 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	f000 fc13 	bl	8004768 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 fbb0 	bl	80046a8 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 fbdd 	bl	8004708 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_ETH_Stop+0x16>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e01f      	b.n	8003fbe <HAL_ETH_Stop+0x56>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2202      	movs	r2, #2
 8003f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fba2 	bl	80046d8 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 fbcf 	bl	8004738 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fb67 	bl	800466e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fbe1 	bl	8004768 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fb27 	bl	80045fa <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d101      	bne.n	8003fe4 <HAL_ETH_ConfigMAC+0x1c>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	e0e4      	b.n	80041ae <HAL_ETH_ConfigMAC+0x1e6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2202      	movs	r2, #2
 8003ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	f000 80b1 	beq.w	800415e <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	4b6c      	ldr	r3, [pc, #432]	; (80041b8 <HAL_ETH_ConfigMAC+0x1f0>)
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004014:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 800401a:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8004020:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8004026:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 800402c:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8004032:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8004038:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800403e:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8004044:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 800404a:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8004050:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8004056:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800406e:	2001      	movs	r0, #1
 8004070:	f7fd ffd6 	bl	8002020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8004084:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800408a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8004090:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8004096:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800409c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80040a2:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80040ae:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80040b0:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFFR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f7fd ffb0 	bl	8002020 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	683a      	ldr	r2, [r7, #0]
 80040ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040d0:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040da:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg = (heth->Instance)->MACFCR;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80040ea:	4013      	ands	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]
     
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f2:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80040f8:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80040fe:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8004104:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 800410a:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8004110:	4313      	orrs	r3, r2
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->MACFCR;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8004128:	2001      	movs	r0, #1
 800412a:	f7fd ff79 	bl	8002020 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg = (heth->Instance)->MACVLANTR;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69db      	ldr	r3, [r3, #28]
 800414c:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800414e:	2001      	movs	r0, #1
 8004150:	f7fd ff66 	bl	8002020 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	61da      	str	r2, [r3, #28]
 800415c:	e01e      	b.n	800419c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg = (heth->Instance)->MACCR;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg &= ~((uint32_t)0x00004800);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800416c:	60fb      	str	r3, [r7, #12]
    
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACCR;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800418e:	2001      	movs	r0, #1
 8004190:	f7fd ff46 	bl	8002020 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	ff20810f 	.word	0xff20810f

080041bc <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b0b0      	sub	sp, #192	; 0xc0
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 80041c6:	2300      	movs	r3, #0
 80041c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d007      	beq.n	80041e2 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041d8:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80041e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80041ea:	2300      	movs	r3, #0
 80041ec:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80041ee:	2300      	movs	r3, #0
 80041f0:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80041f2:	2300      	movs	r3, #0
 80041f4:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69db      	ldr	r3, [r3, #28]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8004202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004206:	663b      	str	r3, [r7, #96]	; 0x60
 8004208:	e001      	b.n	800420e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800420a:	2300      	movs	r3, #0
 800420c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800420e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004212:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8004214:	2300      	movs	r3, #0
 8004216:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004218:	2300      	movs	r3, #0
 800421a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800421c:	2300      	movs	r3, #0
 800421e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8004220:	2300      	movs	r3, #0
 8004222:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8004224:	2300      	movs	r3, #0
 8004226:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8004228:	2340      	movs	r3, #64	; 0x40
 800422a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800422c:	2300      	movs	r3, #0
 800422e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8004238:	2300      	movs	r3, #0
 800423a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800423e:	2300      	movs	r3, #0
 8004240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8004244:	2300      	movs	r3, #0
 8004246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 800424a:	2300      	movs	r3, #0
 800424c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8004250:	2300      	movs	r3, #0
 8004252:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 800425c:	2380      	movs	r3, #128	; 0x80
 800425e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8004262:	2300      	movs	r3, #0
 8004264:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8004268:	2300      	movs	r3, #0
 800426a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800426e:	2300      	movs	r3, #0
 8004270:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8004274:	2300      	movs	r3, #0
 8004276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8004290:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004294:	4bab      	ldr	r3, [pc, #684]	; (8004544 <ETH_MACDMAConfig+0x388>)
 8004296:	4013      	ands	r3, r2
 8004298:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800429c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800429e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80042a0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80042a4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80042a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80042a8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80042ae:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80042b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80042b2:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80042b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80042b6:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80042bc:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80042be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80042c0:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80042c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80042c4:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80042c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80042c8:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80042cc:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80042ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80042d0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80042d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042e4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80042f0:	2001      	movs	r0, #1
 80042f2:	f7fd fe95 	bl	8002020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80042fe:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004300:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8004302:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004304:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8004306:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8004308:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800430a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800430e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8004310:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8004314:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8004316:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800431a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800431c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8004320:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8004324:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800432c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800432e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800433a:	2001      	movs	r0, #1
 800433c:	f7fd fe70 	bl	8002020 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004348:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004352:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800435c:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8004368:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800436c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8004370:	4013      	ands	r3, r2
 8004372:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004376:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800437a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800437c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8004380:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8004382:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8004386:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8004388:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800438c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800438e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8004392:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8004394:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8004398:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800439a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043ac:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80043b8:	2001      	movs	r0, #1
 80043ba:	f7fd fe31 	bl	8002020 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043c6:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80043c8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80043cc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	69db      	ldr	r3, [r3, #28]
 80043de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80043e2:	2001      	movs	r0, #1
 80043e4:	f7fd fe1c 	bl	8002020 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80043f0:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80043f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80043fa:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8004400:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004404:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800440e:	2300      	movs	r3, #0
 8004410:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8004412:	2300      	movs	r3, #0
 8004414:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8004416:	2304      	movs	r3, #4
 8004418:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800441a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8004420:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004426:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800442a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800442c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004430:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8004432:	2380      	movs	r3, #128	; 0x80
 8004434:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 8004436:	2300      	movs	r3, #0
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800443a:	2300      	movs	r3, #0
 800443c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	f241 0318 	movw	r3, #4120	; 0x1018
 8004446:	4413      	add	r3, r2
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 800444e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004452:	4b3d      	ldr	r3, [pc, #244]	; (8004548 <ETH_MACDMAConfig+0x38c>)
 8004454:	4013      	ands	r3, r2
 8004456:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800445a:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 800445c:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800445e:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8004460:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8004462:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8004464:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8004466:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8004468:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800446a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800446c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800446e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8004470:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8004472:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8004476:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8004478:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800447a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800447c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004480:	4313      	orrs	r3, r2
 8004482:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	f241 0318 	movw	r3, #4120	; 0x1018
 800448e:	4413      	add	r3, r2
 8004490:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004494:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f241 0318 	movw	r3, #4120	; 0x1018
 800449e:	4413      	add	r3, r2
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7fd fdba 	bl	8002020 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	f241 0318 	movw	r3, #4120	; 0x1018
 80044b4:	4413      	add	r3, r2
 80044b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80044ba:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044c0:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80044c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80044c4:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80044c8:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80044ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80044cc:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 80044ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d0:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80044d2:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80044d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80044d6:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80044e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044e4:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80044f4:	2001      	movs	r0, #1
 80044f6:	f7fd fd93 	bl	8002020 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004502:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8004506:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d10d      	bne.n	800452c <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	f241 031c 	movw	r3, #4124	; 0x101c
 8004518:	4413      	add	r3, r2
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6811      	ldr	r1, [r2, #0]
 8004520:	4a0a      	ldr	r2, [pc, #40]	; (800454c <ETH_MACDMAConfig+0x390>)
 8004522:	431a      	orrs	r2, r3
 8004524:	f241 031c 	movw	r3, #4124	; 0x101c
 8004528:	440b      	add	r3, r1
 800452a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	461a      	mov	r2, r3
 8004532:	2100      	movs	r1, #0
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f80b 	bl	8004550 <ETH_MACAddressConfig>
}
 800453a:	bf00      	nop
 800453c:	37c0      	adds	r7, #192	; 0xc0
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	ff20810f 	.word	0xff20810f
 8004548:	f8de3f23 	.word	0xf8de3f23
 800454c:	00010040 	.word	0x00010040

08004550 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3305      	adds	r3, #5
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	021b      	lsls	r3, r3, #8
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	3204      	adds	r2, #4
 8004568:	7812      	ldrb	r2, [r2, #0]
 800456a:	4313      	orrs	r3, r2
 800456c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	4b11      	ldr	r3, [pc, #68]	; (80045b8 <ETH_MACAddressConfig+0x68>)
 8004572:	4413      	add	r3, r2
 8004574:	461a      	mov	r2, r3
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	3303      	adds	r3, #3
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	061a      	lsls	r2, r3, #24
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	3302      	adds	r3, #2
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3301      	adds	r3, #1
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	021b      	lsls	r3, r3, #8
 8004594:	4313      	orrs	r3, r2
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	7812      	ldrb	r2, [r2, #0]
 800459a:	4313      	orrs	r3, r2
 800459c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4b06      	ldr	r3, [pc, #24]	; (80045bc <ETH_MACAddressConfig+0x6c>)
 80045a2:	4413      	add	r3, r2
 80045a4:	461a      	mov	r2, r3
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	6013      	str	r3, [r2, #0]
}
 80045aa:	bf00      	nop
 80045ac:	371c      	adds	r7, #28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	40028040 	.word	0x40028040
 80045bc:	40028044 	.word	0x40028044

080045c0 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0208 	orr.w	r2, r2, #8
 80045da:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80045e4:	2001      	movs	r0, #1
 80045e6:	f7fd fd1b 	bl	8002020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}

080045fa <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0208 	bic.w	r2, r2, #8
 8004614:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800461e:	2001      	movs	r0, #1
 8004620:	f7fd fcfe 	bl	8002020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0204 	orr.w	r2, r2, #4
 800464e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004658:	2001      	movs	r0, #1
 800465a:	f7fd fce1 	bl	8002020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]
}
 8004666:	bf00      	nop
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004676:	2300      	movs	r3, #0
 8004678:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	681a      	ldr	r2, [r3, #0]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0204 	bic.w	r2, r2, #4
 8004688:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004692:	2001      	movs	r0, #1
 8004694:	f7fd fcc4 	bl	8002020 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	f241 0318 	movw	r3, #4120	; 0x1018
 80046b8:	4413      	add	r3, r2
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	6811      	ldr	r1, [r2, #0]
 80046c0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80046c4:	f241 0318 	movw	r3, #4120	; 0x1018
 80046c8:	440b      	add	r3, r1
 80046ca:	601a      	str	r2, [r3, #0]
}
 80046cc:	bf00      	nop
 80046ce:	370c      	adds	r7, #12
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	f241 0318 	movw	r3, #4120	; 0x1018
 80046e8:	4413      	add	r3, r2
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6811      	ldr	r1, [r2, #0]
 80046f0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046f4:	f241 0318 	movw	r3, #4120	; 0x1018
 80046f8:	440b      	add	r3, r1
 80046fa:	601a      	str	r2, [r3, #0]
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	f241 0318 	movw	r3, #4120	; 0x1018
 8004718:	4413      	add	r3, r2
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6811      	ldr	r1, [r2, #0]
 8004720:	f043 0202 	orr.w	r2, r3, #2
 8004724:	f241 0318 	movw	r3, #4120	; 0x1018
 8004728:	440b      	add	r3, r1
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	f241 0318 	movw	r3, #4120	; 0x1018
 8004748:	4413      	add	r3, r2
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6811      	ldr	r1, [r2, #0]
 8004750:	f023 0202 	bic.w	r2, r3, #2
 8004754:	f241 0318 	movw	r3, #4120	; 0x1018
 8004758:	440b      	add	r3, r1
 800475a:	601a      	str	r2, [r3, #0]
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	f241 0318 	movw	r3, #4120	; 0x1018
 800477c:	4413      	add	r3, r2
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6811      	ldr	r1, [r2, #0]
 8004784:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004788:	f241 0318 	movw	r3, #4120	; 0x1018
 800478c:	440b      	add	r3, r1
 800478e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	f241 0318 	movw	r3, #4120	; 0x1018
 8004798:	4413      	add	r3, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fd fc3e 	bl	8002020 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80047ae:	440b      	add	r3, r1
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
	...

080047bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047bc:	b480      	push	{r7}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80047c6:	2300      	movs	r3, #0
 80047c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80047ce:	2300      	movs	r3, #0
 80047d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80047d2:	2300      	movs	r3, #0
 80047d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	61fb      	str	r3, [r7, #28]
 80047da:	e175      	b.n	8004ac8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80047dc:	2201      	movs	r2, #1
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	fa02 f303 	lsl.w	r3, r2, r3
 80047e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	f040 8164 	bne.w	8004ac2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	2b01      	cmp	r3, #1
 8004804:	d005      	beq.n	8004812 <HAL_GPIO_Init+0x56>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b02      	cmp	r3, #2
 8004810:	d130      	bne.n	8004874 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	2203      	movs	r2, #3
 800481e:	fa02 f303 	lsl.w	r3, r2, r3
 8004822:	43db      	mvns	r3, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4013      	ands	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68da      	ldr	r2, [r3, #12]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	fa02 f303 	lsl.w	r3, r2, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69ba      	ldr	r2, [r7, #24]
 8004840:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004848:	2201      	movs	r2, #1
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	091b      	lsrs	r3, r3, #4
 800485e:	f003 0201 	and.w	r2, r3, #1
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	fa02 f303 	lsl.w	r3, r2, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4313      	orrs	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f003 0303 	and.w	r3, r3, #3
 800487c:	2b03      	cmp	r3, #3
 800487e:	d017      	beq.n	80048b0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	005b      	lsls	r3, r3, #1
 800488a:	2203      	movs	r2, #3
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43db      	mvns	r3, r3
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	4013      	ands	r3, r2
 8004896:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f003 0303 	and.w	r3, r3, #3
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	d123      	bne.n	8004904 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	08da      	lsrs	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	3208      	adds	r2, #8
 80048c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	f003 0307 	and.w	r3, r3, #7
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	220f      	movs	r2, #15
 80048d4:	fa02 f303 	lsl.w	r3, r2, r3
 80048d8:	43db      	mvns	r3, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4013      	ands	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	691a      	ldr	r2, [r3, #16]
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	fa02 f303 	lsl.w	r3, r2, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	08da      	lsrs	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3208      	adds	r2, #8
 80048fe:	69b9      	ldr	r1, [r7, #24]
 8004900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	43db      	mvns	r3, r3
 8004916:	69ba      	ldr	r2, [r7, #24]
 8004918:	4013      	ands	r3, r2
 800491a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0203 	and.w	r2, r3, #3
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	4313      	orrs	r3, r2
 8004930:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004940:	2b00      	cmp	r3, #0
 8004942:	f000 80be 	beq.w	8004ac2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004946:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_GPIO_Init+0x324>)
 8004948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494a:	4a65      	ldr	r2, [pc, #404]	; (8004ae0 <HAL_GPIO_Init+0x324>)
 800494c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004950:	6453      	str	r3, [r2, #68]	; 0x44
 8004952:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_GPIO_Init+0x324>)
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800495a:	60fb      	str	r3, [r7, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800495e:	4a61      	ldr	r2, [pc, #388]	; (8004ae4 <HAL_GPIO_Init+0x328>)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	3302      	adds	r3, #2
 8004966:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	f003 0303 	and.w	r3, r3, #3
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	220f      	movs	r2, #15
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	43db      	mvns	r3, r3
 800497c:	69ba      	ldr	r2, [r7, #24]
 800497e:	4013      	ands	r3, r2
 8004980:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a58      	ldr	r2, [pc, #352]	; (8004ae8 <HAL_GPIO_Init+0x32c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d037      	beq.n	80049fa <HAL_GPIO_Init+0x23e>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a57      	ldr	r2, [pc, #348]	; (8004aec <HAL_GPIO_Init+0x330>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d031      	beq.n	80049f6 <HAL_GPIO_Init+0x23a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a56      	ldr	r2, [pc, #344]	; (8004af0 <HAL_GPIO_Init+0x334>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d02b      	beq.n	80049f2 <HAL_GPIO_Init+0x236>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a55      	ldr	r2, [pc, #340]	; (8004af4 <HAL_GPIO_Init+0x338>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d025      	beq.n	80049ee <HAL_GPIO_Init+0x232>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a54      	ldr	r2, [pc, #336]	; (8004af8 <HAL_GPIO_Init+0x33c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01f      	beq.n	80049ea <HAL_GPIO_Init+0x22e>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a53      	ldr	r2, [pc, #332]	; (8004afc <HAL_GPIO_Init+0x340>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d019      	beq.n	80049e6 <HAL_GPIO_Init+0x22a>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a52      	ldr	r2, [pc, #328]	; (8004b00 <HAL_GPIO_Init+0x344>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_GPIO_Init+0x226>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a51      	ldr	r2, [pc, #324]	; (8004b04 <HAL_GPIO_Init+0x348>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00d      	beq.n	80049de <HAL_GPIO_Init+0x222>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a50      	ldr	r2, [pc, #320]	; (8004b08 <HAL_GPIO_Init+0x34c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d007      	beq.n	80049da <HAL_GPIO_Init+0x21e>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a4f      	ldr	r2, [pc, #316]	; (8004b0c <HAL_GPIO_Init+0x350>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d101      	bne.n	80049d6 <HAL_GPIO_Init+0x21a>
 80049d2:	2309      	movs	r3, #9
 80049d4:	e012      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049d6:	230a      	movs	r3, #10
 80049d8:	e010      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049da:	2308      	movs	r3, #8
 80049dc:	e00e      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049de:	2307      	movs	r3, #7
 80049e0:	e00c      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049e2:	2306      	movs	r3, #6
 80049e4:	e00a      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049e6:	2305      	movs	r3, #5
 80049e8:	e008      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049ea:	2304      	movs	r3, #4
 80049ec:	e006      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049ee:	2303      	movs	r3, #3
 80049f0:	e004      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049f2:	2302      	movs	r3, #2
 80049f4:	e002      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <HAL_GPIO_Init+0x240>
 80049fa:	2300      	movs	r3, #0
 80049fc:	69fa      	ldr	r2, [r7, #28]
 80049fe:	f002 0203 	and.w	r2, r2, #3
 8004a02:	0092      	lsls	r2, r2, #2
 8004a04:	4093      	lsls	r3, r2
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004a0c:	4935      	ldr	r1, [pc, #212]	; (8004ae4 <HAL_GPIO_Init+0x328>)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	089b      	lsrs	r3, r3, #2
 8004a12:	3302      	adds	r3, #2
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a3e:	4a34      	ldr	r2, [pc, #208]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a44:	4b32      	ldr	r3, [pc, #200]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a6e:	4b28      	ldr	r3, [pc, #160]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	69ba      	ldr	r2, [r7, #24]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d003      	beq.n	8004a92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a92:	4a1f      	ldr	r2, [pc, #124]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a98:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	43db      	mvns	r3, r3
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <HAL_GPIO_Init+0x354>)
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	3301      	adds	r3, #1
 8004ac6:	61fb      	str	r3, [r7, #28]
 8004ac8:	69fb      	ldr	r3, [r7, #28]
 8004aca:	2b0f      	cmp	r3, #15
 8004acc:	f67f ae86 	bls.w	80047dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004ad0:	bf00      	nop
 8004ad2:	bf00      	nop
 8004ad4:	3724      	adds	r7, #36	; 0x24
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr
 8004ade:	bf00      	nop
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	40013800 	.word	0x40013800
 8004ae8:	40020000 	.word	0x40020000
 8004aec:	40020400 	.word	0x40020400
 8004af0:	40020800 	.word	0x40020800
 8004af4:	40020c00 	.word	0x40020c00
 8004af8:	40021000 	.word	0x40021000
 8004afc:	40021400 	.word	0x40021400
 8004b00:	40021800 	.word	0x40021800
 8004b04:	40021c00 	.word	0x40021c00
 8004b08:	40022000 	.word	0x40022000
 8004b0c:	40022400 	.word	0x40022400
 8004b10:	40013c00 	.word	0x40013c00

08004b14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
 8004b20:	4613      	mov	r3, r2
 8004b22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b24:	787b      	ldrb	r3, [r7, #1]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b2a:	887a      	ldrh	r2, [r7, #2]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004b30:	e003      	b.n	8004b3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004b32:	887b      	ldrh	r3, [r7, #2]
 8004b34:	041a      	lsls	r2, r3, #16
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	619a      	str	r2, [r3, #24]
}
 8004b3a:	bf00      	nop
 8004b3c:	370c      	adds	r7, #12
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
	...

08004b48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d101      	bne.n	8004b5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e07f      	b.n	8004c5a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d106      	bne.n	8004b74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fc fe12 	bl	8001798 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2224      	movs	r2, #36	; 0x24
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0201 	bic.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685a      	ldr	r2, [r3, #4]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ba8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d107      	bne.n	8004bc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689a      	ldr	r2, [r3, #8]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	e006      	b.n	8004bd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	689a      	ldr	r2, [r3, #8]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d104      	bne.n	8004be2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004be0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6859      	ldr	r1, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_I2C_Init+0x11c>)
 8004bee:	430b      	orrs	r3, r1
 8004bf0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	691a      	ldr	r2, [r3, #16]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69d9      	ldr	r1, [r3, #28]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a1a      	ldr	r2, [r3, #32]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2220      	movs	r2, #32
 8004c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3708      	adds	r7, #8
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	02008000 	.word	0x02008000

08004c68 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d138      	bne.n	8004cf0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d101      	bne.n	8004c8c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004c88:	2302      	movs	r3, #2
 8004c8a:	e032      	b.n	8004cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2224      	movs	r2, #36	; 0x24
 8004c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f022 0201 	bic.w	r2, r2, #1
 8004caa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cba:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	683a      	ldr	r2, [r7, #0]
 8004cc8:	430a      	orrs	r2, r1
 8004cca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f042 0201 	orr.w	r2, r2, #1
 8004cda:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004cec:	2300      	movs	r3, #0
 8004cee:	e000      	b.n	8004cf2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004cf0:	2302      	movs	r3, #2
  }
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b085      	sub	sp, #20
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d139      	bne.n	8004d88 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	e033      	b.n	8004d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2224      	movs	r2, #36	; 0x24
 8004d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f022 0201 	bic.w	r2, r2, #1
 8004d40:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d50:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f042 0201 	orr.w	r2, r2, #1
 8004d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d84:	2300      	movs	r3, #0
 8004d86:	e000      	b.n	8004d8a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
  }
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d9c:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a04      	ldr	r2, [pc, #16]	; (8004db4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da6:	6013      	str	r3, [r2, #0]
}
 8004da8:	bf00      	nop
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	40007000 	.word	0x40007000

08004db8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	4a22      	ldr	r2, [pc, #136]	; (8004e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dce:	4b20      	ldr	r3, [pc, #128]	; (8004e50 <HAL_PWREx_EnableOverDrive+0x98>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004dda:	4b1e      	ldr	r3, [pc, #120]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4a1d      	ldr	r2, [pc, #116]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004de4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de6:	f7fd f90f 	bl	8002008 <HAL_GetTick>
 8004dea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004dec:	e009      	b.n	8004e02 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004dee:	f7fd f90b 	bl	8002008 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004dfc:	d901      	bls.n	8004e02 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e022      	b.n	8004e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004e02:	4b14      	ldr	r3, [pc, #80]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0e:	d1ee      	bne.n	8004dee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004e10:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a0f      	ldr	r2, [pc, #60]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e1a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e1c:	f7fd f8f4 	bl	8002008 <HAL_GetTick>
 8004e20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e22:	e009      	b.n	8004e38 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004e24:	f7fd f8f0 	bl	8002008 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e32:	d901      	bls.n	8004e38 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e007      	b.n	8004e48 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004e38:	4b06      	ldr	r3, [pc, #24]	; (8004e54 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e44:	d1ee      	bne.n	8004e24 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	40023800 	.word	0x40023800
 8004e54:	40007000 	.word	0x40007000

08004e58 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004e60:	2300      	movs	r3, #0
 8004e62:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e29b      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8087 	beq.w	8004f8a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e7c:	4b96      	ldr	r3, [pc, #600]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f003 030c 	and.w	r3, r3, #12
 8004e84:	2b04      	cmp	r3, #4
 8004e86:	d00c      	beq.n	8004ea2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e88:	4b93      	ldr	r3, [pc, #588]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	f003 030c 	and.w	r3, r3, #12
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d112      	bne.n	8004eba <HAL_RCC_OscConfig+0x62>
 8004e94:	4b90      	ldr	r3, [pc, #576]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ea0:	d10b      	bne.n	8004eba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea2:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d06c      	beq.n	8004f88 <HAL_RCC_OscConfig+0x130>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d168      	bne.n	8004f88 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e275      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec2:	d106      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x7a>
 8004ec4:	4b84      	ldr	r3, [pc, #528]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a83      	ldr	r2, [pc, #524]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004eca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e02e      	b.n	8004f30 <HAL_RCC_OscConfig+0xd8>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x9c>
 8004eda:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7e      	ldr	r2, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ee0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b7c      	ldr	r3, [pc, #496]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7b      	ldr	r2, [pc, #492]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004eec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e01d      	b.n	8004f30 <HAL_RCC_OscConfig+0xd8>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004efc:	d10c      	bne.n	8004f18 <HAL_RCC_OscConfig+0xc0>
 8004efe:	4b76      	ldr	r3, [pc, #472]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a75      	ldr	r2, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f08:	6013      	str	r3, [r2, #0]
 8004f0a:	4b73      	ldr	r3, [pc, #460]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a72      	ldr	r2, [pc, #456]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e00b      	b.n	8004f30 <HAL_RCC_OscConfig+0xd8>
 8004f18:	4b6f      	ldr	r3, [pc, #444]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a6e      	ldr	r2, [pc, #440]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f22:	6013      	str	r3, [r2, #0]
 8004f24:	4b6c      	ldr	r3, [pc, #432]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a6b      	ldr	r2, [pc, #428]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d013      	beq.n	8004f60 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f38:	f7fd f866 	bl	8002008 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f40:	f7fd f862 	bl	8002008 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b64      	cmp	r3, #100	; 0x64
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e229      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f52:	4b61      	ldr	r3, [pc, #388]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0xe8>
 8004f5e:	e014      	b.n	8004f8a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7fd f852 	bl	8002008 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f68:	f7fd f84e 	bl	8002008 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e215      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7a:	4b57      	ldr	r3, [pc, #348]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f0      	bne.n	8004f68 <HAL_RCC_OscConfig+0x110>
 8004f86:	e000      	b.n	8004f8a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d069      	beq.n	800506a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f96:	4b50      	ldr	r3, [pc, #320]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f003 030c 	and.w	r3, r3, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa2:	4b4d      	ldr	r3, [pc, #308]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b08      	cmp	r3, #8
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x190>
 8004fae:	4b4a      	ldr	r3, [pc, #296]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b47      	ldr	r3, [pc, #284]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x17a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e1e9      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b41      	ldr	r3, [pc, #260]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	493d      	ldr	r1, [pc, #244]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e040      	b.n	800506a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d023      	beq.n	8005038 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b39      	ldr	r3, [pc, #228]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a38      	ldr	r2, [pc, #224]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffc:	f7fd f804 	bl	8002008 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005004:	f7fd f800 	bl	8002008 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e1c7      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005016:	4b30      	ldr	r3, [pc, #192]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 0302 	and.w	r3, r3, #2
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4b2d      	ldr	r3, [pc, #180]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	4929      	ldr	r1, [pc, #164]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005032:	4313      	orrs	r3, r2
 8005034:	600b      	str	r3, [r1, #0]
 8005036:	e018      	b.n	800506a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005038:	4b27      	ldr	r3, [pc, #156]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a26      	ldr	r2, [pc, #152]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 800503e:	f023 0301 	bic.w	r3, r3, #1
 8005042:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005044:	f7fc ffe0 	bl	8002008 <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800504c:	f7fc ffdc 	bl	8002008 <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e1a3      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0302 	and.w	r3, r3, #2
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1f0      	bne.n	800504c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d038      	beq.n	80050e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d019      	beq.n	80050b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800507e:	4b16      	ldr	r3, [pc, #88]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005080:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005082:	4a15      	ldr	r2, [pc, #84]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800508a:	f7fc ffbd 	bl	8002008 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005092:	f7fc ffb9 	bl	8002008 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e180      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 80050a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050a8:	f003 0302 	and.w	r3, r3, #2
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x23a>
 80050b0:	e01a      	b.n	80050e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050b2:	4b09      	ldr	r3, [pc, #36]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 80050b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b6:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <HAL_RCC_OscConfig+0x280>)
 80050b8:	f023 0301 	bic.w	r3, r3, #1
 80050bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050be:	f7fc ffa3 	bl	8002008 <HAL_GetTick>
 80050c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050c4:	e00a      	b.n	80050dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c6:	f7fc ff9f 	bl	8002008 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d903      	bls.n	80050dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e166      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
 80050d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050dc:	4b92      	ldr	r3, [pc, #584]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80050de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1ee      	bne.n	80050c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	f000 80a4 	beq.w	800523e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050f6:	4b8c      	ldr	r3, [pc, #560]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10d      	bne.n	800511e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	4b89      	ldr	r3, [pc, #548]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	4a88      	ldr	r2, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510c:	6413      	str	r3, [r2, #64]	; 0x40
 800510e:	4b86      	ldr	r3, [pc, #536]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	60bb      	str	r3, [r7, #8]
 8005118:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800511a:	2301      	movs	r3, #1
 800511c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800511e:	4b83      	ldr	r3, [pc, #524]	; (800532c <HAL_RCC_OscConfig+0x4d4>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005126:	2b00      	cmp	r3, #0
 8005128:	d118      	bne.n	800515c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800512a:	4b80      	ldr	r3, [pc, #512]	; (800532c <HAL_RCC_OscConfig+0x4d4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a7f      	ldr	r2, [pc, #508]	; (800532c <HAL_RCC_OscConfig+0x4d4>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005134:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005136:	f7fc ff67 	bl	8002008 <HAL_GetTick>
 800513a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800513c:	e008      	b.n	8005150 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513e:	f7fc ff63 	bl	8002008 <HAL_GetTick>
 8005142:	4602      	mov	r2, r0
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	2b64      	cmp	r3, #100	; 0x64
 800514a:	d901      	bls.n	8005150 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e12a      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005150:	4b76      	ldr	r3, [pc, #472]	; (800532c <HAL_RCC_OscConfig+0x4d4>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0f0      	beq.n	800513e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d106      	bne.n	8005172 <HAL_RCC_OscConfig+0x31a>
 8005164:	4b70      	ldr	r3, [pc, #448]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005168:	4a6f      	ldr	r2, [pc, #444]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800516a:	f043 0301 	orr.w	r3, r3, #1
 800516e:	6713      	str	r3, [r2, #112]	; 0x70
 8005170:	e02d      	b.n	80051ce <HAL_RCC_OscConfig+0x376>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10c      	bne.n	8005194 <HAL_RCC_OscConfig+0x33c>
 800517a:	4b6b      	ldr	r3, [pc, #428]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	4a6a      	ldr	r2, [pc, #424]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005180:	f023 0301 	bic.w	r3, r3, #1
 8005184:	6713      	str	r3, [r2, #112]	; 0x70
 8005186:	4b68      	ldr	r3, [pc, #416]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800518a:	4a67      	ldr	r2, [pc, #412]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800518c:	f023 0304 	bic.w	r3, r3, #4
 8005190:	6713      	str	r3, [r2, #112]	; 0x70
 8005192:	e01c      	b.n	80051ce <HAL_RCC_OscConfig+0x376>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	2b05      	cmp	r3, #5
 800519a:	d10c      	bne.n	80051b6 <HAL_RCC_OscConfig+0x35e>
 800519c:	4b62      	ldr	r3, [pc, #392]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a0:	4a61      	ldr	r2, [pc, #388]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051a2:	f043 0304 	orr.w	r3, r3, #4
 80051a6:	6713      	str	r3, [r2, #112]	; 0x70
 80051a8:	4b5f      	ldr	r3, [pc, #380]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ac:	4a5e      	ldr	r2, [pc, #376]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	6713      	str	r3, [r2, #112]	; 0x70
 80051b4:	e00b      	b.n	80051ce <HAL_RCC_OscConfig+0x376>
 80051b6:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ba:	4a5b      	ldr	r2, [pc, #364]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	6713      	str	r3, [r2, #112]	; 0x70
 80051c2:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c6:	4a58      	ldr	r2, [pc, #352]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051c8:	f023 0304 	bic.w	r3, r3, #4
 80051cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d015      	beq.n	8005202 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d6:	f7fc ff17 	bl	8002008 <HAL_GetTick>
 80051da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fc ff13 	bl	8002008 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e0d8      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f4:	4b4c      	ldr	r3, [pc, #304]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80051f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0ee      	beq.n	80051de <HAL_RCC_OscConfig+0x386>
 8005200:	e014      	b.n	800522c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005202:	f7fc ff01 	bl	8002008 <HAL_GetTick>
 8005206:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005208:	e00a      	b.n	8005220 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800520a:	f7fc fefd 	bl	8002008 <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e0c2      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005220:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1ee      	bne.n	800520a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800522c:	7dfb      	ldrb	r3, [r7, #23]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005232:	4b3d      	ldr	r3, [pc, #244]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f000 80ae 	beq.w	80053a4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005248:	4b37      	ldr	r3, [pc, #220]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	2b08      	cmp	r3, #8
 8005252:	d06d      	beq.n	8005330 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d14b      	bne.n	80052f4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525c:	4b32      	ldr	r3, [pc, #200]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a31      	ldr	r2, [pc, #196]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005266:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc fece 	bl	8002008 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005270:	f7fc feca 	bl	8002008 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e091      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005282:	4b29      	ldr	r3, [pc, #164]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	69da      	ldr	r2, [r3, #28]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800529c:	019b      	lsls	r3, r3, #6
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	3b01      	subs	r3, #1
 80052a8:	041b      	lsls	r3, r3, #16
 80052aa:	431a      	orrs	r2, r3
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	061b      	lsls	r3, r3, #24
 80052b2:	431a      	orrs	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b8:	071b      	lsls	r3, r3, #28
 80052ba:	491b      	ldr	r1, [pc, #108]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052c0:	4b19      	ldr	r3, [pc, #100]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a18      	ldr	r2, [pc, #96]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc fe9c 	bl	8002008 <HAL_GetTick>
 80052d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d2:	e008      	b.n	80052e6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052d4:	f7fc fe98 	bl	8002008 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d901      	bls.n	80052e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80052e2:	2303      	movs	r3, #3
 80052e4:	e05f      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d0f0      	beq.n	80052d4 <HAL_RCC_OscConfig+0x47c>
 80052f2:	e057      	b.n	80053a4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052f4:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a0b      	ldr	r2, [pc, #44]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 80052fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005300:	f7fc fe82 	bl	8002008 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005308:	f7fc fe7e 	bl	8002008 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e045      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCC_OscConfig+0x4d0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f0      	bne.n	8005308 <HAL_RCC_OscConfig+0x4b0>
 8005326:	e03d      	b.n	80053a4 <HAL_RCC_OscConfig+0x54c>
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005330:	4b1f      	ldr	r3, [pc, #124]	; (80053b0 <HAL_RCC_OscConfig+0x558>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d030      	beq.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005348:	429a      	cmp	r2, r3
 800534a:	d129      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005356:	429a      	cmp	r2, r3
 8005358:	d122      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005360:	4013      	ands	r3, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005366:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005368:	4293      	cmp	r3, r2
 800536a:	d119      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	085b      	lsrs	r3, r3, #1
 8005378:	3b01      	subs	r3, #1
 800537a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d10f      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800538c:	429a      	cmp	r2, r3
 800538e:	d107      	bne.n	80053a0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800539c:	429a      	cmp	r2, r3
 800539e:	d001      	beq.n	80053a4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3718      	adds	r7, #24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800

080053b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80053be:	2300      	movs	r3, #0
 80053c0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d101      	bne.n	80053cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e0d0      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053cc:	4b6a      	ldr	r3, [pc, #424]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	683a      	ldr	r2, [r7, #0]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d910      	bls.n	80053fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053da:	4b67      	ldr	r3, [pc, #412]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f023 020f 	bic.w	r2, r3, #15
 80053e2:	4965      	ldr	r1, [pc, #404]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ea:	4b63      	ldr	r3, [pc, #396]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 030f 	and.w	r3, r3, #15
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d001      	beq.n	80053fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e0b8      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d020      	beq.n	800544a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d005      	beq.n	8005420 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005414:	4b59      	ldr	r3, [pc, #356]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a58      	ldr	r2, [pc, #352]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 800541a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800541e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800542c:	4b53      	ldr	r3, [pc, #332]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	4a52      	ldr	r2, [pc, #328]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005432:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005436:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005438:	4b50      	ldr	r3, [pc, #320]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	494d      	ldr	r1, [pc, #308]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005446:	4313      	orrs	r3, r2
 8005448:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d040      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d107      	bne.n	800546e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800545e:	4b47      	ldr	r3, [pc, #284]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d115      	bne.n	8005496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e07f      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d107      	bne.n	8005486 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005476:	4b41      	ldr	r3, [pc, #260]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d109      	bne.n	8005496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e073      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005486:	4b3d      	ldr	r3, [pc, #244]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0302 	and.w	r3, r3, #2
 800548e:	2b00      	cmp	r3, #0
 8005490:	d101      	bne.n	8005496 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06b      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005496:	4b39      	ldr	r3, [pc, #228]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f023 0203 	bic.w	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	4936      	ldr	r1, [pc, #216]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054a8:	f7fc fdae 	bl	8002008 <HAL_GetTick>
 80054ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054ae:	e00a      	b.n	80054c6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054b0:	f7fc fdaa 	bl	8002008 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80054be:	4293      	cmp	r3, r2
 80054c0:	d901      	bls.n	80054c6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e053      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054c6:	4b2d      	ldr	r3, [pc, #180]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 020c 	and.w	r2, r3, #12
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d1eb      	bne.n	80054b0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054d8:	4b27      	ldr	r3, [pc, #156]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 030f 	and.w	r3, r3, #15
 80054e0:	683a      	ldr	r2, [r7, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d210      	bcs.n	8005508 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054e6:	4b24      	ldr	r3, [pc, #144]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 020f 	bic.w	r2, r3, #15
 80054ee:	4922      	ldr	r1, [pc, #136]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054f6:	4b20      	ldr	r3, [pc, #128]	; (8005578 <HAL_RCC_ClockConfig+0x1c4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 030f 	and.w	r3, r3, #15
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d001      	beq.n	8005508 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e032      	b.n	800556e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005514:	4b19      	ldr	r3, [pc, #100]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	68db      	ldr	r3, [r3, #12]
 8005520:	4916      	ldr	r1, [pc, #88]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0308 	and.w	r3, r3, #8
 800552e:	2b00      	cmp	r3, #0
 8005530:	d009      	beq.n	8005546 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	490e      	ldr	r1, [pc, #56]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 8005542:	4313      	orrs	r3, r2
 8005544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005546:	f000 f821 	bl	800558c <HAL_RCC_GetSysClockFreq>
 800554a:	4602      	mov	r2, r0
 800554c:	4b0b      	ldr	r3, [pc, #44]	; (800557c <HAL_RCC_ClockConfig+0x1c8>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	091b      	lsrs	r3, r3, #4
 8005552:	f003 030f 	and.w	r3, r3, #15
 8005556:	490a      	ldr	r1, [pc, #40]	; (8005580 <HAL_RCC_ClockConfig+0x1cc>)
 8005558:	5ccb      	ldrb	r3, [r1, r3]
 800555a:	fa22 f303 	lsr.w	r3, r2, r3
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <HAL_RCC_ClockConfig+0x1d0>)
 8005560:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005562:	4b09      	ldr	r3, [pc, #36]	; (8005588 <HAL_RCC_ClockConfig+0x1d4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f7fc fb60 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	40023c00 	.word	0x40023c00
 800557c:	40023800 	.word	0x40023800
 8005580:	08021be4 	.word	0x08021be4
 8005584:	20000000 	.word	0x20000000
 8005588:	20000004 	.word	0x20000004

0800558c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800558c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005590:	b084      	sub	sp, #16
 8005592:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	607b      	str	r3, [r7, #4]
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	2300      	movs	r3, #0
 800559e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055a4:	4b67      	ldr	r3, [pc, #412]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 030c 	and.w	r3, r3, #12
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d00d      	beq.n	80055cc <HAL_RCC_GetSysClockFreq+0x40>
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	f200 80bd 	bhi.w	8005730 <HAL_RCC_GetSysClockFreq+0x1a4>
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <HAL_RCC_GetSysClockFreq+0x34>
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d003      	beq.n	80055c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80055be:	e0b7      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055c0:	4b61      	ldr	r3, [pc, #388]	; (8005748 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80055c2:	60bb      	str	r3, [r7, #8]
      break;
 80055c4:	e0b7      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055c6:	4b61      	ldr	r3, [pc, #388]	; (800574c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80055c8:	60bb      	str	r3, [r7, #8]
      break;
 80055ca:	e0b4      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055cc:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80055d6:	4b5b      	ldr	r3, [pc, #364]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d04d      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055e2:	4b58      	ldr	r3, [pc, #352]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	099b      	lsrs	r3, r3, #6
 80055e8:	461a      	mov	r2, r3
 80055ea:	f04f 0300 	mov.w	r3, #0
 80055ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055f2:	f04f 0100 	mov.w	r1, #0
 80055f6:	ea02 0800 	and.w	r8, r2, r0
 80055fa:	ea03 0901 	and.w	r9, r3, r1
 80055fe:	4640      	mov	r0, r8
 8005600:	4649      	mov	r1, r9
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	014b      	lsls	r3, r1, #5
 800560c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005610:	0142      	lsls	r2, r0, #5
 8005612:	4610      	mov	r0, r2
 8005614:	4619      	mov	r1, r3
 8005616:	ebb0 0008 	subs.w	r0, r0, r8
 800561a:	eb61 0109 	sbc.w	r1, r1, r9
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	018b      	lsls	r3, r1, #6
 8005628:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800562c:	0182      	lsls	r2, r0, #6
 800562e:	1a12      	subs	r2, r2, r0
 8005630:	eb63 0301 	sbc.w	r3, r3, r1
 8005634:	f04f 0000 	mov.w	r0, #0
 8005638:	f04f 0100 	mov.w	r1, #0
 800563c:	00d9      	lsls	r1, r3, #3
 800563e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005642:	00d0      	lsls	r0, r2, #3
 8005644:	4602      	mov	r2, r0
 8005646:	460b      	mov	r3, r1
 8005648:	eb12 0208 	adds.w	r2, r2, r8
 800564c:	eb43 0309 	adc.w	r3, r3, r9
 8005650:	f04f 0000 	mov.w	r0, #0
 8005654:	f04f 0100 	mov.w	r1, #0
 8005658:	0259      	lsls	r1, r3, #9
 800565a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800565e:	0250      	lsls	r0, r2, #9
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4610      	mov	r0, r2
 8005666:	4619      	mov	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	461a      	mov	r2, r3
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	f7fa fe3e 	bl	80002f0 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
 800567c:	e04a      	b.n	8005714 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800567e:	4b31      	ldr	r3, [pc, #196]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	099b      	lsrs	r3, r3, #6
 8005684:	461a      	mov	r2, r3
 8005686:	f04f 0300 	mov.w	r3, #0
 800568a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800568e:	f04f 0100 	mov.w	r1, #0
 8005692:	ea02 0400 	and.w	r4, r2, r0
 8005696:	ea03 0501 	and.w	r5, r3, r1
 800569a:	4620      	mov	r0, r4
 800569c:	4629      	mov	r1, r5
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	014b      	lsls	r3, r1, #5
 80056a8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80056ac:	0142      	lsls	r2, r0, #5
 80056ae:	4610      	mov	r0, r2
 80056b0:	4619      	mov	r1, r3
 80056b2:	1b00      	subs	r0, r0, r4
 80056b4:	eb61 0105 	sbc.w	r1, r1, r5
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	018b      	lsls	r3, r1, #6
 80056c2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80056c6:	0182      	lsls	r2, r0, #6
 80056c8:	1a12      	subs	r2, r2, r0
 80056ca:	eb63 0301 	sbc.w	r3, r3, r1
 80056ce:	f04f 0000 	mov.w	r0, #0
 80056d2:	f04f 0100 	mov.w	r1, #0
 80056d6:	00d9      	lsls	r1, r3, #3
 80056d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80056dc:	00d0      	lsls	r0, r2, #3
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	1912      	adds	r2, r2, r4
 80056e4:	eb45 0303 	adc.w	r3, r5, r3
 80056e8:	f04f 0000 	mov.w	r0, #0
 80056ec:	f04f 0100 	mov.w	r1, #0
 80056f0:	0299      	lsls	r1, r3, #10
 80056f2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80056f6:	0290      	lsls	r0, r2, #10
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	461a      	mov	r2, r3
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	f7fa fdf2 	bl	80002f0 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4613      	mov	r3, r2
 8005712:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	0c1b      	lsrs	r3, r3, #16
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	3301      	adds	r3, #1
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	fbb2 f3f3 	udiv	r3, r2, r3
 800572c:	60bb      	str	r3, [r7, #8]
      break;
 800572e:	e002      	b.n	8005736 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005730:	4b05      	ldr	r3, [pc, #20]	; (8005748 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005732:	60bb      	str	r3, [r7, #8]
      break;
 8005734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005736:	68bb      	ldr	r3, [r7, #8]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3710      	adds	r7, #16
 800573c:	46bd      	mov	sp, r7
 800573e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005742:	bf00      	nop
 8005744:	40023800 	.word	0x40023800
 8005748:	00f42400 	.word	0x00f42400
 800574c:	007a1200 	.word	0x007a1200

08005750 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b03      	ldr	r3, [pc, #12]	; (8005764 <HAL_RCC_GetHCLKFreq+0x14>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005760:	4770      	bx	lr
 8005762:	bf00      	nop
 8005764:	20000000 	.word	0x20000000

08005768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800576c:	f7ff fff0 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005770:	4602      	mov	r2, r0
 8005772:	4b05      	ldr	r3, [pc, #20]	; (8005788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	0a9b      	lsrs	r3, r3, #10
 8005778:	f003 0307 	and.w	r3, r3, #7
 800577c:	4903      	ldr	r1, [pc, #12]	; (800578c <HAL_RCC_GetPCLK1Freq+0x24>)
 800577e:	5ccb      	ldrb	r3, [r1, r3]
 8005780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40023800 	.word	0x40023800
 800578c:	08021bf4 	.word	0x08021bf4

08005790 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005794:	f7ff ffdc 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005798:	4602      	mov	r2, r0
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	0b5b      	lsrs	r3, r3, #13
 80057a0:	f003 0307 	and.w	r3, r3, #7
 80057a4:	4903      	ldr	r1, [pc, #12]	; (80057b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a6:	5ccb      	ldrb	r3, [r1, r3]
 80057a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	40023800 	.word	0x40023800
 80057b4:	08021bf4 	.word	0x08021bf4

080057b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	220f      	movs	r2, #15
 80057c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <HAL_RCC_GetClockConfig+0x5c>)
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f003 0203 	and.w	r2, r3, #3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057d4:	4b0f      	ldr	r3, [pc, #60]	; (8005814 <HAL_RCC_GetClockConfig+0x5c>)
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057e0:	4b0c      	ldr	r3, [pc, #48]	; (8005814 <HAL_RCC_GetClockConfig+0x5c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCC_GetClockConfig+0x5c>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	08db      	lsrs	r3, r3, #3
 80057f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057fa:	4b07      	ldr	r3, [pc, #28]	; (8005818 <HAL_RCC_GetClockConfig+0x60>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 020f 	and.w	r2, r3, #15
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	bf00      	nop
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	40023800 	.word	0x40023800
 8005818:	40023c00 	.word	0x40023c00

0800581c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b088      	sub	sp, #32
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005824:	2300      	movs	r3, #0
 8005826:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005834:	2300      	movs	r3, #0
 8005836:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0301 	and.w	r3, r3, #1
 8005840:	2b00      	cmp	r3, #0
 8005842:	d012      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005844:	4b69      	ldr	r3, [pc, #420]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	4a68      	ldr	r2, [pc, #416]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800584a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800584e:	6093      	str	r3, [r2, #8]
 8005850:	4b66      	ldr	r3, [pc, #408]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005858:	4964      	ldr	r1, [pc, #400]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800585a:	4313      	orrs	r3, r2
 800585c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005866:	2301      	movs	r3, #1
 8005868:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d017      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005876:	4b5d      	ldr	r3, [pc, #372]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005878:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005884:	4959      	ldr	r1, [pc, #356]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005896:	2301      	movs	r3, #1
 8005898:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d017      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80058b2:	4b4e      	ldr	r3, [pc, #312]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c0:	494a      	ldr	r1, [pc, #296]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058d0:	d101      	bne.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80058d2:	2301      	movs	r3, #1
 80058d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d101      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80058de:	2301      	movs	r3, #1
 80058e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80058ee:	2301      	movs	r3, #1
 80058f0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0320 	and.w	r3, r3, #32
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	f000 808b 	beq.w	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005900:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005904:	4a39      	ldr	r2, [pc, #228]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800590a:	6413      	str	r3, [r2, #64]	; 0x40
 800590c:	4b37      	ldr	r3, [pc, #220]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800590e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005914:	60bb      	str	r3, [r7, #8]
 8005916:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005918:	4b35      	ldr	r3, [pc, #212]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800591e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005924:	f7fc fb70 	bl	8002008 <HAL_GetTick>
 8005928:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800592a:	e008      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800592c:	f7fc fb6c 	bl	8002008 <HAL_GetTick>
 8005930:	4602      	mov	r2, r0
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	2b64      	cmp	r3, #100	; 0x64
 8005938:	d901      	bls.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e38f      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800593e:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f0      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800594a:	4b28      	ldr	r3, [pc, #160]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800594e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005952:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d035      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800595e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d02e      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005968:	4b20      	ldr	r3, [pc, #128]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005972:	4b1e      	ldr	r3, [pc, #120]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005976:	4a1d      	ldr	r2, [pc, #116]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005978:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800597c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800597e:	4b1b      	ldr	r3, [pc, #108]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005982:	4a1a      	ldr	r2, [pc, #104]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005984:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005988:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800598a:	4a18      	ldr	r2, [pc, #96]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005990:	4b16      	ldr	r3, [pc, #88]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005994:	f003 0301 	and.w	r3, r3, #1
 8005998:	2b01      	cmp	r3, #1
 800599a:	d114      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800599c:	f7fc fb34 	bl	8002008 <HAL_GetTick>
 80059a0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059a2:	e00a      	b.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059a4:	f7fc fb30 	bl	8002008 <HAL_GetTick>
 80059a8:	4602      	mov	r2, r0
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d901      	bls.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e351      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ba:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d0ee      	beq.n	80059a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059d2:	d111      	bne.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80059d4:	4b05      	ldr	r3, [pc, #20]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80059e2:	400b      	ands	r3, r1
 80059e4:	4901      	ldr	r1, [pc, #4]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
 80059ea:	e00b      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80059ec:	40023800 	.word	0x40023800
 80059f0:	40007000 	.word	0x40007000
 80059f4:	0ffffcff 	.word	0x0ffffcff
 80059f8:	4bb3      	ldr	r3, [pc, #716]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4ab2      	ldr	r2, [pc, #712]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80059fe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005a02:	6093      	str	r3, [r2, #8]
 8005a04:	4bb0      	ldr	r3, [pc, #704]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a10:	49ad      	ldr	r1, [pc, #692]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a12:	4313      	orrs	r3, r2
 8005a14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d010      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a22:	4ba9      	ldr	r3, [pc, #676]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a28:	4aa7      	ldr	r2, [pc, #668]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005a32:	4ba5      	ldr	r3, [pc, #660]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a3c:	49a2      	ldr	r1, [pc, #648]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a50:	4b9d      	ldr	r3, [pc, #628]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5e:	499a      	ldr	r1, [pc, #616]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a60:	4313      	orrs	r3, r2
 8005a62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00a      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005a72:	4b95      	ldr	r3, [pc, #596]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a80:	4991      	ldr	r1, [pc, #580]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a94:	4b8c      	ldr	r3, [pc, #560]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aa2:	4989      	ldr	r1, [pc, #548]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00a      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ab6:	4b84      	ldr	r3, [pc, #528]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005abc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac4:	4980      	ldr	r1, [pc, #512]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00a      	beq.n	8005aee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ad8:	4b7b      	ldr	r3, [pc, #492]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ade:	f023 0203 	bic.w	r2, r3, #3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae6:	4978      	ldr	r1, [pc, #480]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00a      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005afa:	4b73      	ldr	r3, [pc, #460]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b00:	f023 020c 	bic.w	r2, r3, #12
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b08:	496f      	ldr	r1, [pc, #444]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00a      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b1c:	4b6a      	ldr	r3, [pc, #424]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2a:	4967      	ldr	r1, [pc, #412]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b2c:	4313      	orrs	r3, r2
 8005b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b3e:	4b62      	ldr	r3, [pc, #392]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b44:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4c:	495e      	ldr	r1, [pc, #376]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00a      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b60:	4b59      	ldr	r3, [pc, #356]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b66:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6e:	4956      	ldr	r1, [pc, #344]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00a      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005b82:	4b51      	ldr	r3, [pc, #324]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b88:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b90:	494d      	ldr	r1, [pc, #308]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00a      	beq.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005ba4:	4b48      	ldr	r3, [pc, #288]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005baa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	4945      	ldr	r1, [pc, #276]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005bc6:	4b40      	ldr	r3, [pc, #256]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bcc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	493c      	ldr	r1, [pc, #240]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d00a      	beq.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005be8:	4b37      	ldr	r3, [pc, #220]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bf6:	4934      	ldr	r1, [pc, #208]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d011      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005c0a:	4b2f      	ldr	r3, [pc, #188]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c10:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c18:	492b      	ldr	r1, [pc, #172]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c28:	d101      	bne.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 0308 	and.w	r3, r3, #8
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c4a:	4b1f      	ldr	r3, [pc, #124]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c50:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c58:	491b      	ldr	r1, [pc, #108]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005c6c:	4b16      	ldr	r3, [pc, #88]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c72:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c7c:	4912      	ldr	r1, [pc, #72]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00b      	beq.n	8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005c90:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c96:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ca0:	4909      	ldr	r1, [pc, #36]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cb4:	4b04      	ldr	r3, [pc, #16]	; (8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	e002      	b.n	8005ccc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005cc6:	bf00      	nop
 8005cc8:	40023800 	.word	0x40023800
 8005ccc:	4986      	ldr	r1, [pc, #536]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ce0:	4b81      	ldr	r3, [pc, #516]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ce2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ce6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cf0:	497d      	ldr	r1, [pc, #500]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d006      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80d6 	beq.w	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d0c:	4b76      	ldr	r3, [pc, #472]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a75      	ldr	r2, [pc, #468]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d12:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d18:	f7fc f976 	bl	8002008 <HAL_GetTick>
 8005d1c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d1e:	e008      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d20:	f7fc f972 	bl	8002008 <HAL_GetTick>
 8005d24:	4602      	mov	r2, r0
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	1ad3      	subs	r3, r2, r3
 8005d2a:	2b64      	cmp	r3, #100	; 0x64
 8005d2c:	d901      	bls.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e195      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d32:	4b6d      	ldr	r3, [pc, #436]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f0      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d021      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d11d      	bne.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005d52:	4b65      	ldr	r3, [pc, #404]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d58:	0c1b      	lsrs	r3, r3, #16
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005d60:	4b61      	ldr	r3, [pc, #388]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d66:	0e1b      	lsrs	r3, r3, #24
 8005d68:	f003 030f 	and.w	r3, r3, #15
 8005d6c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	019a      	lsls	r2, r3, #6
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	041b      	lsls	r3, r3, #16
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	061b      	lsls	r3, r3, #24
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	071b      	lsls	r3, r3, #28
 8005d86:	4958      	ldr	r1, [pc, #352]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d004      	beq.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005da2:	d00a      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d02e      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005db8:	d129      	bne.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005dba:	4b4b      	ldr	r3, [pc, #300]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dc0:	0c1b      	lsrs	r3, r3, #16
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005dc8:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005dce:	0f1b      	lsrs	r3, r3, #28
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	019a      	lsls	r2, r3, #6
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	041b      	lsls	r3, r3, #16
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	061b      	lsls	r3, r3, #24
 8005de8:	431a      	orrs	r2, r3
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	071b      	lsls	r3, r3, #28
 8005dee:	493e      	ldr	r1, [pc, #248]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005df6:	4b3c      	ldr	r3, [pc, #240]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dfc:	f023 021f 	bic.w	r2, r3, #31
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e04:	3b01      	subs	r3, #1
 8005e06:	4938      	ldr	r1, [pc, #224]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d01d      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005e1a:	4b33      	ldr	r3, [pc, #204]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e20:	0e1b      	lsrs	r3, r3, #24
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005e28:	4b2f      	ldr	r3, [pc, #188]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005e2e:	0f1b      	lsrs	r3, r3, #28
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	019a      	lsls	r2, r3, #6
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	431a      	orrs	r2, r3
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	061b      	lsls	r3, r3, #24
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	071b      	lsls	r3, r3, #28
 8005e4e:	4926      	ldr	r1, [pc, #152]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	019a      	lsls	r2, r3, #6
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	691b      	ldr	r3, [r3, #16]
 8005e6c:	041b      	lsls	r3, r3, #16
 8005e6e:	431a      	orrs	r2, r3
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	061b      	lsls	r3, r3, #24
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	071b      	lsls	r3, r3, #28
 8005e7e:	491a      	ldr	r1, [pc, #104]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e86:	4b18      	ldr	r3, [pc, #96]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a17      	ldr	r2, [pc, #92]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e92:	f7fc f8b9 	bl	8002008 <HAL_GetTick>
 8005e96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e98:	e008      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005e9a:	f7fc f8b5 	bl	8002008 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	2b64      	cmp	r3, #100	; 0x64
 8005ea6:	d901      	bls.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e0d8      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005eac:	4b0e      	ldr	r3, [pc, #56]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d0f0      	beq.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 80ce 	bne.w	800605c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005ec0:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a08      	ldr	r2, [pc, #32]	; (8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ecc:	f7fc f89c 	bl	8002008 <HAL_GetTick>
 8005ed0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005ed2:	e00b      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ed4:	f7fc f898 	bl	8002008 <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b64      	cmp	r3, #100	; 0x64
 8005ee0:	d904      	bls.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e0bb      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005ee6:	bf00      	nop
 8005ee8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005eec:	4b5e      	ldr	r3, [pc, #376]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ef4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ef8:	d0ec      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d009      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02e      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12a      	bne.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005f22:	4b51      	ldr	r3, [pc, #324]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f28:	0c1b      	lsrs	r3, r3, #16
 8005f2a:	f003 0303 	and.w	r3, r3, #3
 8005f2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f30:	4b4d      	ldr	r3, [pc, #308]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f36:	0f1b      	lsrs	r3, r3, #28
 8005f38:	f003 0307 	and.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	019a      	lsls	r2, r3, #6
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	041b      	lsls	r3, r3, #16
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	061b      	lsls	r3, r3, #24
 8005f50:	431a      	orrs	r2, r3
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	071b      	lsls	r3, r3, #28
 8005f56:	4944      	ldr	r1, [pc, #272]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005f5e:	4b42      	ldr	r3, [pc, #264]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f64:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	021b      	lsls	r3, r3, #8
 8005f70:	493d      	ldr	r1, [pc, #244]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d022      	beq.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005f88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f8c:	d11d      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005f8e:	4b36      	ldr	r3, [pc, #216]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005f9c:	4b32      	ldr	r3, [pc, #200]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa2:	0f1b      	lsrs	r3, r3, #28
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	695b      	ldr	r3, [r3, #20]
 8005fae:	019a      	lsls	r2, r3, #6
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	061b      	lsls	r3, r3, #24
 8005fbc:	431a      	orrs	r2, r3
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	071b      	lsls	r3, r3, #28
 8005fc2:	4929      	ldr	r1, [pc, #164]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d028      	beq.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005fd6:	4b24      	ldr	r3, [pc, #144]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fdc:	0e1b      	lsrs	r3, r3, #24
 8005fde:	f003 030f 	and.w	r3, r3, #15
 8005fe2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005fe4:	4b20      	ldr	r3, [pc, #128]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	0c1b      	lsrs	r3, r3, #16
 8005fec:	f003 0303 	and.w	r3, r3, #3
 8005ff0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	019a      	lsls	r2, r3, #6
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	041b      	lsls	r3, r3, #16
 8005ffc:	431a      	orrs	r2, r3
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	061b      	lsls	r3, r3, #24
 8006002:	431a      	orrs	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	071b      	lsls	r3, r3, #28
 800600a:	4917      	ldr	r1, [pc, #92]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006012:	4b15      	ldr	r3, [pc, #84]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006018:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	4911      	ldr	r1, [pc, #68]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006022:	4313      	orrs	r3, r2
 8006024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006028:	4b0f      	ldr	r3, [pc, #60]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a0e      	ldr	r2, [pc, #56]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800602e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006032:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006034:	f7fb ffe8 	bl	8002008 <HAL_GetTick>
 8006038:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800603a:	e008      	b.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800603c:	f7fb ffe4 	bl	8002008 <HAL_GetTick>
 8006040:	4602      	mov	r2, r0
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	2b64      	cmp	r3, #100	; 0x64
 8006048:	d901      	bls.n	800604e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800604a:	2303      	movs	r3, #3
 800604c:	e007      	b.n	800605e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800604e:	4b06      	ldr	r3, [pc, #24]	; (8006068 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605a:	d1ef      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3720      	adds	r7, #32
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	40023800 	.word	0x40023800

0800606c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e049      	b.n	8006112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006084:	b2db      	uxtb	r3, r3
 8006086:	2b00      	cmp	r3, #0
 8006088:	d106      	bne.n	8006098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 f841 	bl	800611a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	3304      	adds	r3, #4
 80060a8:	4619      	mov	r1, r3
 80060aa:	4610      	mov	r0, r2
 80060ac:	f000 fc12 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2201      	movs	r2, #1
 80060b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2201      	movs	r2, #1
 80060cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2201      	movs	r2, #1
 80060e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3708      	adds	r7, #8
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006122:	bf00      	nop
 8006124:	370c      	adds	r7, #12
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
	...

08006130 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	b2db      	uxtb	r3, r3
 8006140:	2b01      	cmp	r3, #1
 8006142:	d001      	beq.n	8006148 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	e054      	b.n	80061f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68da      	ldr	r2, [r3, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a26      	ldr	r2, [pc, #152]	; (8006200 <HAL_TIM_Base_Start_IT+0xd0>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d022      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006172:	d01d      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a22      	ldr	r2, [pc, #136]	; (8006204 <HAL_TIM_Base_Start_IT+0xd4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d018      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a21      	ldr	r2, [pc, #132]	; (8006208 <HAL_TIM_Base_Start_IT+0xd8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d013      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <HAL_TIM_Base_Start_IT+0xdc>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d00e      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a1e      	ldr	r2, [pc, #120]	; (8006210 <HAL_TIM_Base_Start_IT+0xe0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d009      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <HAL_TIM_Base_Start_IT+0xe4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d004      	beq.n	80061b0 <HAL_TIM_Base_Start_IT+0x80>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a1b      	ldr	r2, [pc, #108]	; (8006218 <HAL_TIM_Base_Start_IT+0xe8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d115      	bne.n	80061dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	689a      	ldr	r2, [r3, #8]
 80061b6:	4b19      	ldr	r3, [pc, #100]	; (800621c <HAL_TIM_Base_Start_IT+0xec>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2b06      	cmp	r3, #6
 80061c0:	d015      	beq.n	80061ee <HAL_TIM_Base_Start_IT+0xbe>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061c8:	d011      	beq.n	80061ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0201 	orr.w	r2, r2, #1
 80061d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061da:	e008      	b.n	80061ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f042 0201 	orr.w	r2, r2, #1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	e000      	b.n	80061f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061f0:	2300      	movs	r3, #0
}
 80061f2:	4618      	mov	r0, r3
 80061f4:	3714      	adds	r7, #20
 80061f6:	46bd      	mov	sp, r7
 80061f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fc:	4770      	bx	lr
 80061fe:	bf00      	nop
 8006200:	40010000 	.word	0x40010000
 8006204:	40000400 	.word	0x40000400
 8006208:	40000800 	.word	0x40000800
 800620c:	40000c00 	.word	0x40000c00
 8006210:	40010400 	.word	0x40010400
 8006214:	40014000 	.word	0x40014000
 8006218:	40001800 	.word	0x40001800
 800621c:	00010007 	.word	0x00010007

08006220 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b082      	sub	sp, #8
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d101      	bne.n	8006232 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800622e:	2301      	movs	r3, #1
 8006230:	e049      	b.n	80062c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b00      	cmp	r3, #0
 800623c:	d106      	bne.n	800624c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7fb fb94 	bl	8001974 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3304      	adds	r3, #4
 800625c:	4619      	mov	r1, r3
 800625e:	4610      	mov	r0, r2
 8006260:	f000 fb38 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2201      	movs	r2, #1
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2201      	movs	r2, #1
 80062c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80062e0:	2301      	movs	r3, #1
 80062e2:	e08f      	b.n	8006404 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d106      	bne.n	80062fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fb fa91 	bl	8001820 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2202      	movs	r2, #2
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6899      	ldr	r1, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	4b3e      	ldr	r3, [pc, #248]	; (800640c <HAL_TIM_Encoder_Init+0x13c>)
 8006312:	400b      	ands	r3, r1
 8006314:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f000 fad7 	bl	80068d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	6a1b      	ldr	r3, [r3, #32]
 800633c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4b31      	ldr	r3, [pc, #196]	; (8006410 <HAL_TIM_Encoder_Init+0x140>)
 800634c:	4013      	ands	r3, r2
 800634e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	4313      	orrs	r3, r2
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <HAL_TIM_Encoder_Init+0x144>)
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	4b2a      	ldr	r3, [pc, #168]	; (8006418 <HAL_TIM_Encoder_Init+0x148>)
 800636e:	4013      	ands	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68da      	ldr	r2, [r3, #12]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	69db      	ldr	r3, [r3, #28]
 800637a:	021b      	lsls	r3, r3, #8
 800637c:	4313      	orrs	r3, r2
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	691b      	ldr	r3, [r3, #16]
 8006388:	011a      	lsls	r2, r3, #4
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	031b      	lsls	r3, r3, #12
 8006390:	4313      	orrs	r3, r2
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800639e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80063a6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	011b      	lsls	r3, r3, #4
 80063b2:	4313      	orrs	r3, r2
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	697a      	ldr	r2, [r7, #20]
 80063c0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	fffebff8 	.word	0xfffebff8
 8006410:	fffffcfc 	.word	0xfffffcfc
 8006414:	fffff3f3 	.word	0xfffff3f3
 8006418:	ffff0f0f 	.word	0xffff0f0f

0800641c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b082      	sub	sp, #8
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b02      	cmp	r3, #2
 8006430:	d122      	bne.n	8006478 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b02      	cmp	r3, #2
 800643e:	d11b      	bne.n	8006478 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f06f 0202 	mvn.w	r2, #2
 8006448:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d003      	beq.n	8006466 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fa1a 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 8006464:	e005      	b.n	8006472 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 fa0c 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 fa1d 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	691b      	ldr	r3, [r3, #16]
 800647e:	f003 0304 	and.w	r3, r3, #4
 8006482:	2b04      	cmp	r3, #4
 8006484:	d122      	bne.n	80064cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b04      	cmp	r3, #4
 8006492:	d11b      	bne.n	80064cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f06f 0204 	mvn.w	r2, #4
 800649c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2202      	movs	r2, #2
 80064a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 f9f0 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 80064b8:	e005      	b.n	80064c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f9e2 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f000 f9f3 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b08      	cmp	r3, #8
 80064d8:	d122      	bne.n	8006520 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f003 0308 	and.w	r3, r3, #8
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d11b      	bne.n	8006520 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f06f 0208 	mvn.w	r2, #8
 80064f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2204      	movs	r2, #4
 80064f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d003      	beq.n	800650e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9c6 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 800650c:	e005      	b.n	800651a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f9b8 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f9c9 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	f003 0310 	and.w	r3, r3, #16
 800652a:	2b10      	cmp	r3, #16
 800652c:	d122      	bne.n	8006574 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	f003 0310 	and.w	r3, r3, #16
 8006538:	2b10      	cmp	r3, #16
 800653a:	d11b      	bne.n	8006574 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0210 	mvn.w	r2, #16
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2208      	movs	r2, #8
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f99c 	bl	8006898 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f98e 	bl	8006884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f99f 	bl	80068ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b01      	cmp	r3, #1
 8006580:	d10e      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68db      	ldr	r3, [r3, #12]
 8006588:	f003 0301 	and.w	r3, r3, #1
 800658c:	2b01      	cmp	r3, #1
 800658e:	d107      	bne.n	80065a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f06f 0201 	mvn.w	r2, #1
 8006598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f7fa fdda 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065aa:	2b80      	cmp	r3, #128	; 0x80
 80065ac:	d10e      	bne.n	80065cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	d107      	bne.n	80065cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80065c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fd1a 	bl	8007000 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065da:	d10e      	bne.n	80065fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68db      	ldr	r3, [r3, #12]
 80065e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065e6:	2b80      	cmp	r3, #128	; 0x80
 80065e8:	d107      	bne.n	80065fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80065f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fd0d 	bl	8007014 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b40      	cmp	r3, #64	; 0x40
 8006606:	d10e      	bne.n	8006626 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d107      	bne.n	8006626 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800661e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 f94d 	bl	80068c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	691b      	ldr	r3, [r3, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b20      	cmp	r3, #32
 8006632:	d10e      	bne.n	8006652 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0320 	and.w	r3, r3, #32
 800663e:	2b20      	cmp	r3, #32
 8006640:	d107      	bne.n	8006652 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f06f 0220 	mvn.w	r2, #32
 800664a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f000 fccd 	bl	8006fec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006652:	bf00      	nop
 8006654:	3708      	adds	r7, #8
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006668:	2300      	movs	r3, #0
 800666a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006676:	2302      	movs	r3, #2
 8006678:	e0ff      	b.n	800687a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b14      	cmp	r3, #20
 8006686:	f200 80f0 	bhi.w	800686a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066e5 	.word	0x080066e5
 8006694:	0800686b 	.word	0x0800686b
 8006698:	0800686b 	.word	0x0800686b
 800669c:	0800686b 	.word	0x0800686b
 80066a0:	08006725 	.word	0x08006725
 80066a4:	0800686b 	.word	0x0800686b
 80066a8:	0800686b 	.word	0x0800686b
 80066ac:	0800686b 	.word	0x0800686b
 80066b0:	08006767 	.word	0x08006767
 80066b4:	0800686b 	.word	0x0800686b
 80066b8:	0800686b 	.word	0x0800686b
 80066bc:	0800686b 	.word	0x0800686b
 80066c0:	080067a7 	.word	0x080067a7
 80066c4:	0800686b 	.word	0x0800686b
 80066c8:	0800686b 	.word	0x0800686b
 80066cc:	0800686b 	.word	0x0800686b
 80066d0:	080067e9 	.word	0x080067e9
 80066d4:	0800686b 	.word	0x0800686b
 80066d8:	0800686b 	.word	0x0800686b
 80066dc:	0800686b 	.word	0x0800686b
 80066e0:	08006829 	.word	0x08006829
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68b9      	ldr	r1, [r7, #8]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 f992 	bl	8006a14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699a      	ldr	r2, [r3, #24]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0208 	orr.w	r2, r2, #8
 80066fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	699a      	ldr	r2, [r3, #24]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f022 0204 	bic.w	r2, r2, #4
 800670e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6999      	ldr	r1, [r3, #24]
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	619a      	str	r2, [r3, #24]
      break;
 8006722:	e0a5      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 f9e4 	bl	8006af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800673e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800674e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6999      	ldr	r1, [r3, #24]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	021a      	lsls	r2, r3, #8
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	619a      	str	r2, [r3, #24]
      break;
 8006764:	e084      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68b9      	ldr	r1, [r7, #8]
 800676c:	4618      	mov	r0, r3
 800676e:	f000 fa3b 	bl	8006be8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	69da      	ldr	r2, [r3, #28]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f042 0208 	orr.w	r2, r2, #8
 8006780:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	69da      	ldr	r2, [r3, #28]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0204 	bic.w	r2, r2, #4
 8006790:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69d9      	ldr	r1, [r3, #28]
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691a      	ldr	r2, [r3, #16]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	61da      	str	r2, [r3, #28]
      break;
 80067a4:	e064      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fa91 	bl	8006cd4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69d9      	ldr	r1, [r3, #28]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	021a      	lsls	r2, r3, #8
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	430a      	orrs	r2, r1
 80067e4:	61da      	str	r2, [r3, #28]
      break;
 80067e6:	e043      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fac8 	bl	8006d84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0208 	orr.w	r2, r2, #8
 8006802:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f022 0204 	bic.w	r2, r2, #4
 8006812:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691a      	ldr	r2, [r3, #16]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006826:	e023      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fafa 	bl	8006e28 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	021a      	lsls	r2, r3, #8
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	430a      	orrs	r2, r1
 8006866:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006868:	e002      	b.n	8006870 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	75fb      	strb	r3, [r7, #23]
      break;
 800686e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b4:	bf00      	nop
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c8:	bf00      	nop
 80068ca:	370c      	adds	r7, #12
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr

080068d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a40      	ldr	r2, [pc, #256]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f2:	d00f      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3d      	ldr	r2, [pc, #244]	; (80069ec <TIM_Base_SetConfig+0x118>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3c      	ldr	r2, [pc, #240]	; (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3b      	ldr	r2, [pc, #236]	; (80069f4 <TIM_Base_SetConfig+0x120>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a3a      	ldr	r2, [pc, #232]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d108      	bne.n	8006926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800691a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2f      	ldr	r2, [pc, #188]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d02b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006934:	d027      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2c      	ldr	r2, [pc, #176]	; (80069ec <TIM_Base_SetConfig+0x118>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d023      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2b      	ldr	r2, [pc, #172]	; (80069f0 <TIM_Base_SetConfig+0x11c>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2a      	ldr	r2, [pc, #168]	; (80069f4 <TIM_Base_SetConfig+0x120>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a29      	ldr	r2, [pc, #164]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a28      	ldr	r2, [pc, #160]	; (80069fc <TIM_Base_SetConfig+0x128>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <TIM_Base_SetConfig+0x12c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <TIM_Base_SetConfig+0x130>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <TIM_Base_SetConfig+0x134>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a24      	ldr	r2, [pc, #144]	; (8006a0c <TIM_Base_SetConfig+0x138>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a23      	ldr	r2, [pc, #140]	; (8006a10 <TIM_Base_SetConfig+0x13c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0a      	ldr	r2, [pc, #40]	; (80069e8 <TIM_Base_SetConfig+0x114>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a0c      	ldr	r2, [pc, #48]	; (80069f8 <TIM_Base_SetConfig+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d103      	bne.n	80069d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	615a      	str	r2, [r3, #20]
}
 80069da:	bf00      	nop
 80069dc:	3714      	adds	r7, #20
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40000400 	.word	0x40000400
 80069f0:	40000800 	.word	0x40000800
 80069f4:	40000c00 	.word	0x40000c00
 80069f8:	40010400 	.word	0x40010400
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40014400 	.word	0x40014400
 8006a04:	40014800 	.word	0x40014800
 8006a08:	40001800 	.word	0x40001800
 8006a0c:	40001c00 	.word	0x40001c00
 8006a10:	40002000 	.word	0x40002000

08006a14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f023 0201 	bic.w	r2, r3, #1
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	699b      	ldr	r3, [r3, #24]
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b2b      	ldr	r3, [pc, #172]	; (8006aec <TIM_OC1_SetConfig+0xd8>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68fa      	ldr	r2, [r7, #12]
 8006a52:	4313      	orrs	r3, r2
 8006a54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f023 0302 	bic.w	r3, r3, #2
 8006a5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a21      	ldr	r2, [pc, #132]	; (8006af0 <TIM_OC1_SetConfig+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d003      	beq.n	8006a78 <TIM_OC1_SetConfig+0x64>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	4a20      	ldr	r2, [pc, #128]	; (8006af4 <TIM_OC1_SetConfig+0xe0>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d10c      	bne.n	8006a92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	f023 0308 	bic.w	r3, r3, #8
 8006a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	697a      	ldr	r2, [r7, #20]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f023 0304 	bic.w	r3, r3, #4
 8006a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a16      	ldr	r2, [pc, #88]	; (8006af0 <TIM_OC1_SetConfig+0xdc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d003      	beq.n	8006aa2 <TIM_OC1_SetConfig+0x8e>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4a15      	ldr	r2, [pc, #84]	; (8006af4 <TIM_OC1_SetConfig+0xe0>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d111      	bne.n	8006ac6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ab0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	695b      	ldr	r3, [r3, #20]
 8006ab6:	693a      	ldr	r2, [r7, #16]
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685a      	ldr	r2, [r3, #4]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	697a      	ldr	r2, [r7, #20]
 8006ade:	621a      	str	r2, [r3, #32]
}
 8006ae0:	bf00      	nop
 8006ae2:	371c      	adds	r7, #28
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr
 8006aec:	fffeff8f 	.word	0xfffeff8f
 8006af0:	40010000 	.word	0x40010000
 8006af4:	40010400 	.word	0x40010400

08006af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b087      	sub	sp, #28
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	f023 0210 	bic.w	r2, r3, #16
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6a1b      	ldr	r3, [r3, #32]
 8006b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4b2e      	ldr	r3, [pc, #184]	; (8006bdc <TIM_OC2_SetConfig+0xe4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	021b      	lsls	r3, r3, #8
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	f023 0320 	bic.w	r3, r3, #32
 8006b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	011b      	lsls	r3, r3, #4
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	4a23      	ldr	r2, [pc, #140]	; (8006be0 <TIM_OC2_SetConfig+0xe8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d003      	beq.n	8006b60 <TIM_OC2_SetConfig+0x68>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	4a22      	ldr	r2, [pc, #136]	; (8006be4 <TIM_OC2_SetConfig+0xec>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d10d      	bne.n	8006b7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	697a      	ldr	r2, [r7, #20]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a18      	ldr	r2, [pc, #96]	; (8006be0 <TIM_OC2_SetConfig+0xe8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_OC2_SetConfig+0x94>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a17      	ldr	r2, [pc, #92]	; (8006be4 <TIM_OC2_SetConfig+0xec>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d113      	bne.n	8006bb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	695b      	ldr	r3, [r3, #20]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	699b      	ldr	r3, [r3, #24]
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	693a      	ldr	r2, [r7, #16]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	693a      	ldr	r2, [r7, #16]
 8006bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68fa      	ldr	r2, [r7, #12]
 8006bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	685a      	ldr	r2, [r3, #4]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	621a      	str	r2, [r3, #32]
}
 8006bce:	bf00      	nop
 8006bd0:	371c      	adds	r7, #28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	feff8fff 	.word	0xfeff8fff
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40010400 	.word	0x40010400

08006be8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b087      	sub	sp, #28
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69db      	ldr	r3, [r3, #28]
 8006c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4b2d      	ldr	r3, [pc, #180]	; (8006cc8 <TIM_OC3_SetConfig+0xe0>)
 8006c14:	4013      	ands	r3, r2
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0303 	bic.w	r3, r3, #3
 8006c1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	021b      	lsls	r3, r3, #8
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a22      	ldr	r2, [pc, #136]	; (8006ccc <TIM_OC3_SetConfig+0xe4>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d003      	beq.n	8006c4e <TIM_OC3_SetConfig+0x66>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a21      	ldr	r2, [pc, #132]	; (8006cd0 <TIM_OC3_SetConfig+0xe8>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d10d      	bne.n	8006c6a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	021b      	lsls	r3, r3, #8
 8006c5c:	697a      	ldr	r2, [r7, #20]
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a17      	ldr	r2, [pc, #92]	; (8006ccc <TIM_OC3_SetConfig+0xe4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d003      	beq.n	8006c7a <TIM_OC3_SetConfig+0x92>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a16      	ldr	r2, [pc, #88]	; (8006cd0 <TIM_OC3_SetConfig+0xe8>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d113      	bne.n	8006ca2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	011b      	lsls	r3, r3, #4
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	699b      	ldr	r3, [r3, #24]
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68fa      	ldr	r2, [r7, #12]
 8006cac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	685a      	ldr	r2, [r3, #4]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	697a      	ldr	r2, [r7, #20]
 8006cba:	621a      	str	r2, [r3, #32]
}
 8006cbc:	bf00      	nop
 8006cbe:	371c      	adds	r7, #28
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	fffeff8f 	.word	0xfffeff8f
 8006ccc:	40010000 	.word	0x40010000
 8006cd0:	40010400 	.word	0x40010400

08006cd4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6a1b      	ldr	r3, [r3, #32]
 8006ce2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4b1e      	ldr	r3, [pc, #120]	; (8006d78 <TIM_OC4_SetConfig+0xa4>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	021b      	lsls	r3, r3, #8
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	031b      	lsls	r3, r3, #12
 8006d26:	693a      	ldr	r2, [r7, #16]
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a13      	ldr	r2, [pc, #76]	; (8006d7c <TIM_OC4_SetConfig+0xa8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_OC4_SetConfig+0x68>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a12      	ldr	r2, [pc, #72]	; (8006d80 <TIM_OC4_SetConfig+0xac>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d109      	bne.n	8006d50 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	019b      	lsls	r3, r3, #6
 8006d4a:	697a      	ldr	r2, [r7, #20]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	621a      	str	r2, [r3, #32]
}
 8006d6a:	bf00      	nop
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	feff8fff 	.word	0xfeff8fff
 8006d7c:	40010000 	.word	0x40010000
 8006d80:	40010400 	.word	0x40010400

08006d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b087      	sub	sp, #28
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006dac:	68fa      	ldr	r2, [r7, #12]
 8006dae:	4b1b      	ldr	r3, [pc, #108]	; (8006e1c <TIM_OC5_SetConfig+0x98>)
 8006db0:	4013      	ands	r3, r2
 8006db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	68fa      	ldr	r2, [r7, #12]
 8006dba:	4313      	orrs	r3, r2
 8006dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006dc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	041b      	lsls	r3, r3, #16
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a12      	ldr	r2, [pc, #72]	; (8006e20 <TIM_OC5_SetConfig+0x9c>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_OC5_SetConfig+0x5e>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a11      	ldr	r2, [pc, #68]	; (8006e24 <TIM_OC5_SetConfig+0xa0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d109      	bne.n	8006df6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	fffeff8f 	.word	0xfffeff8f
 8006e20:	40010000 	.word	0x40010000
 8006e24:	40010400 	.word	0x40010400

08006e28 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b087      	sub	sp, #28
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a1b      	ldr	r3, [r3, #32]
 8006e36:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <TIM_OC6_SetConfig+0x9c>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	021b      	lsls	r3, r3, #8
 8006e5e:	68fa      	ldr	r2, [r7, #12]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	051b      	lsls	r3, r3, #20
 8006e72:	693a      	ldr	r2, [r7, #16]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a13      	ldr	r2, [pc, #76]	; (8006ec8 <TIM_OC6_SetConfig+0xa0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_OC6_SetConfig+0x60>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a12      	ldr	r2, [pc, #72]	; (8006ecc <TIM_OC6_SetConfig+0xa4>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d109      	bne.n	8006e9c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	029b      	lsls	r3, r3, #10
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	4313      	orrs	r3, r2
 8006e9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	68fa      	ldr	r2, [r7, #12]
 8006ea6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685a      	ldr	r2, [r3, #4]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	693a      	ldr	r2, [r7, #16]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	feff8fff 	.word	0xfeff8fff
 8006ec8:	40010000 	.word	0x40010000
 8006ecc:	40010400 	.word	0x40010400

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e06d      	b.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	4a30      	ldr	r2, [pc, #192]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	4a2f      	ldr	r2, [pc, #188]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d108      	bne.n	8006f2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006f22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a20      	ldr	r2, [pc, #128]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d022      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5a:	d01d      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1d      	ldr	r2, [pc, #116]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d018      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1c      	ldr	r2, [pc, #112]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d013      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a1a      	ldr	r2, [pc, #104]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d00e      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a15      	ldr	r2, [pc, #84]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d009      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a16      	ldr	r2, [pc, #88]	; (8006fe4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d004      	beq.n	8006f98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a15      	ldr	r2, [pc, #84]	; (8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d10c      	bne.n	8006fb2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40010000 	.word	0x40010000
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40000400 	.word	0x40000400
 8006fdc:	40000800 	.word	0x40000800
 8006fe0:	40000c00 	.word	0x40000c00
 8006fe4:	40014000 	.word	0x40014000
 8006fe8:	40001800 	.word	0x40001800

08006fec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ff4:	bf00      	nop
 8006ff6:	370c      	adds	r7, #12
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007008:	bf00      	nop
 800700a:	370c      	adds	r7, #12
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800701c:	bf00      	nop
 800701e:	370c      	adds	r7, #12
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e040      	b.n	80070bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703e:	2b00      	cmp	r3, #0
 8007040:	d106      	bne.n	8007050 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fa fd0a 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2224      	movs	r2, #36	; 0x24
 8007054:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fbca 	bl	8007800 <UART_SetConfig>
 800706c:	4603      	mov	r3, r0
 800706e:	2b01      	cmp	r3, #1
 8007070:	d101      	bne.n	8007076 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e022      	b.n	80070bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 fe20 	bl	8007cc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007092:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689a      	ldr	r2, [r3, #8]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f000 fea7 	bl	8007e08 <UART_CheckIdleState>
 80070ba:	4603      	mov	r3, r0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3708      	adds	r7, #8
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b08a      	sub	sp, #40	; 0x28
 80070c8:	af02      	add	r7, sp, #8
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	60b9      	str	r1, [r7, #8]
 80070ce:	603b      	str	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070d8:	2b20      	cmp	r3, #32
 80070da:	f040 8081 	bne.w	80071e0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d002      	beq.n	80070ea <HAL_UART_Transmit+0x26>
 80070e4:	88fb      	ldrh	r3, [r7, #6]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d101      	bne.n	80070ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e079      	b.n	80071e2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d101      	bne.n	80070fc <HAL_UART_Transmit+0x38>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e072      	b.n	80071e2 <HAL_UART_Transmit+0x11e>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	2200      	movs	r2, #0
 8007108:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	2221      	movs	r2, #33	; 0x21
 8007110:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007112:	f7fa ff79 	bl	8002008 <HAL_GetTick>
 8007116:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	88fa      	ldrh	r2, [r7, #6]
 800711c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	88fa      	ldrh	r2, [r7, #6]
 8007124:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007130:	d108      	bne.n	8007144 <HAL_UART_Transmit+0x80>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d104      	bne.n	8007144 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800713a:	2300      	movs	r3, #0
 800713c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	e003      	b.n	800714c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007148:	2300      	movs	r3, #0
 800714a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007154:	e02c      	b.n	80071b0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	2200      	movs	r2, #0
 800715e:	2180      	movs	r1, #128	; 0x80
 8007160:	68f8      	ldr	r0, [r7, #12]
 8007162:	f000 fe9a 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800716c:	2303      	movs	r3, #3
 800716e:	e038      	b.n	80071e2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	881b      	ldrh	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007184:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007186:	69bb      	ldr	r3, [r7, #24]
 8007188:	3302      	adds	r3, #2
 800718a:	61bb      	str	r3, [r7, #24]
 800718c:	e007      	b.n	800719e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	781a      	ldrb	r2, [r3, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007198:	69fb      	ldr	r3, [r7, #28]
 800719a:	3301      	adds	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	3b01      	subs	r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1cc      	bne.n	8007156 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	9300      	str	r3, [sp, #0]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2200      	movs	r2, #0
 80071c4:	2140      	movs	r1, #64	; 0x40
 80071c6:	68f8      	ldr	r0, [r7, #12]
 80071c8:	f000 fe67 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 80071cc:	4603      	mov	r3, r0
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d001      	beq.n	80071d6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e005      	b.n	80071e2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2220      	movs	r2, #32
 80071da:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	e000      	b.n	80071e2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80071e0:	2302      	movs	r3, #2
  }
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b0ba      	sub	sp, #232	; 0xe8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007212:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007216:	f640 030f 	movw	r3, #2063	; 0x80f
 800721a:	4013      	ands	r3, r2
 800721c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007224:	2b00      	cmp	r3, #0
 8007226:	d115      	bne.n	8007254 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d00f      	beq.n	8007254 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d009      	beq.n	8007254 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 82a4 	beq.w	8007792 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	4798      	blx	r3
      }
      return;
 8007252:	e29e      	b.n	8007792 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007254:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 8117 	beq.w	800748c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800725e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007262:	f003 0301 	and.w	r3, r3, #1
 8007266:	2b00      	cmp	r3, #0
 8007268:	d106      	bne.n	8007278 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800726a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800726e:	4b85      	ldr	r3, [pc, #532]	; (8007484 <HAL_UART_IRQHandler+0x298>)
 8007270:	4013      	ands	r3, r2
 8007272:	2b00      	cmp	r3, #0
 8007274:	f000 810a 	beq.w	800748c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d011      	beq.n	80072a8 <HAL_UART_IRQHandler+0xbc>
 8007284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800728c:	2b00      	cmp	r3, #0
 800728e:	d00b      	beq.n	80072a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2201      	movs	r2, #1
 8007296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729e:	f043 0201 	orr.w	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ac:	f003 0302 	and.w	r3, r3, #2
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d011      	beq.n	80072d8 <HAL_UART_IRQHandler+0xec>
 80072b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072b8:	f003 0301 	and.w	r3, r3, #1
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	2202      	movs	r2, #2
 80072c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ce:	f043 0204 	orr.w	r2, r3, #4
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80072d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072dc:	f003 0304 	and.w	r3, r3, #4
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d011      	beq.n	8007308 <HAL_UART_IRQHandler+0x11c>
 80072e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2204      	movs	r2, #4
 80072f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072fe:	f043 0202 	orr.w	r2, r3, #2
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007308:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800730c:	f003 0308 	and.w	r3, r3, #8
 8007310:	2b00      	cmp	r3, #0
 8007312:	d017      	beq.n	8007344 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007314:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007318:	f003 0320 	and.w	r3, r3, #32
 800731c:	2b00      	cmp	r3, #0
 800731e:	d105      	bne.n	800732c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007324:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2208      	movs	r2, #8
 8007332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800733a:	f043 0208 	orr.w	r2, r3, #8
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800734c:	2b00      	cmp	r3, #0
 800734e:	d012      	beq.n	8007376 <HAL_UART_IRQHandler+0x18a>
 8007350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007354:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00c      	beq.n	8007376 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007364:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800736c:	f043 0220 	orr.w	r2, r3, #32
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 820a 	beq.w	8007796 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007386:	f003 0320 	and.w	r3, r3, #32
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800738e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d007      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d003      	beq.n	80073aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d005      	beq.n	80073ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80073c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04f      	beq.n	800746e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fe27 	bl	8008022 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073de:	2b40      	cmp	r3, #64	; 0x40
 80073e0:	d141      	bne.n	8007466 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	3308      	adds	r3, #8
 80073e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800740e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007412:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800741a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1d9      	bne.n	80073e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007432:	2b00      	cmp	r3, #0
 8007434:	d013      	beq.n	800745e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800743a:	4a13      	ldr	r2, [pc, #76]	; (8007488 <HAL_UART_IRQHandler+0x29c>)
 800743c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007442:	4618      	mov	r0, r3
 8007444:	f7fb fdd8 	bl	8002ff8 <HAL_DMA_Abort_IT>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d017      	beq.n	800747e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007454:	687a      	ldr	r2, [r7, #4]
 8007456:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007458:	4610      	mov	r0, r2
 800745a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800745c:	e00f      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9ae 	bl	80077c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007464:	e00b      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9aa 	bl	80077c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800746c:	e007      	b.n	800747e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f000 f9a6 	bl	80077c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800747c:	e18b      	b.n	8007796 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800747e:	bf00      	nop
    return;
 8007480:	e189      	b.n	8007796 <HAL_UART_IRQHandler+0x5aa>
 8007482:	bf00      	nop
 8007484:	04000120 	.word	0x04000120
 8007488:	080080e9 	.word	0x080080e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007490:	2b01      	cmp	r3, #1
 8007492:	f040 8144 	bne.w	800771e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800749a:	f003 0310 	and.w	r3, r3, #16
 800749e:	2b00      	cmp	r3, #0
 80074a0:	f000 813d 	beq.w	800771e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80074a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074a8:	f003 0310 	and.w	r3, r3, #16
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 8136 	beq.w	800771e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2210      	movs	r2, #16
 80074b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c4:	2b40      	cmp	r3, #64	; 0x40
 80074c6:	f040 80b2 	bne.w	800762e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80074d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f000 815d 	beq.w	800779a <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80074e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ea:	429a      	cmp	r2, r3
 80074ec:	f080 8155 	bcs.w	800779a <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074fe:	69db      	ldr	r3, [r3, #28]
 8007500:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007504:	f000 8085 	beq.w	8007612 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007510:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800751c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007524:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	461a      	mov	r2, r3
 800752e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007532:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007536:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800753a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800753e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007542:	e841 2300 	strex	r3, r2, [r1]
 8007546:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800754a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1da      	bne.n	8007508 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3308      	adds	r3, #8
 8007558:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800755a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800755c:	e853 3f00 	ldrex	r3, [r3]
 8007560:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007562:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3308      	adds	r3, #8
 8007572:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007576:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800757a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800757e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e1      	bne.n	8007552 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007598:	e853 3f00 	ldrex	r3, [r3]
 800759c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800759e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	3308      	adds	r3, #8
 80075ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80075b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80075b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80075b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80075ba:	e841 2300 	strex	r3, r2, [r1]
 80075be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80075c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d1e3      	bne.n	800758e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2220      	movs	r2, #32
 80075ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075da:	e853 3f00 	ldrex	r3, [r3]
 80075de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80075e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80075f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80075f6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075fc:	e841 2300 	strex	r3, r2, [r1]
 8007600:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1e4      	bne.n	80075d2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800760c:	4618      	mov	r0, r3
 800760e:	f7fb fc83 	bl	8002f18 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800761e:	b29b      	uxth	r3, r3
 8007620:	1ad3      	subs	r3, r2, r3
 8007622:	b29b      	uxth	r3, r3
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f8d4 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800762c:	e0b5      	b.n	800779a <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800763a:	b29b      	uxth	r3, r3
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007648:	b29b      	uxth	r3, r3
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 80a7 	beq.w	800779e <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8007650:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 80a2 	beq.w	800779e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007662:	e853 3f00 	ldrex	r3, [r3]
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800766a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800766e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	461a      	mov	r2, r3
 8007678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800767c:	647b      	str	r3, [r7, #68]	; 0x44
 800767e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007682:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007684:	e841 2300 	strex	r3, r2, [r1]
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800768a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e4      	bne.n	800765a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	3308      	adds	r3, #8
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	623b      	str	r3, [r7, #32]
   return(result);
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	f023 0301 	bic.w	r3, r3, #1
 80076a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	3308      	adds	r3, #8
 80076b0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80076b4:	633a      	str	r2, [r7, #48]	; 0x30
 80076b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e3      	bne.n	8007690 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	e853 3f00 	ldrex	r3, [r3]
 80076e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0310 	bic.w	r3, r3, #16
 80076ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007700:	69b9      	ldr	r1, [r7, #24]
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	e841 2300 	strex	r3, r2, [r1]
 8007708:	617b      	str	r3, [r7, #20]
   return(result);
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d1e4      	bne.n	80076da <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007710:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 f85c 	bl	80077d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800771c:	e03f      	b.n	800779e <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800771e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00e      	beq.n	8007748 <HAL_UART_IRQHandler+0x55c>
 800772a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800772e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007732:	2b00      	cmp	r3, #0
 8007734:	d008      	beq.n	8007748 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800773e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f853 	bl	80077ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007746:	e02d      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800774c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00e      	beq.n	8007772 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800775c:	2b00      	cmp	r3, #0
 800775e:	d008      	beq.n	8007772 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01c      	beq.n	80077a2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
    }
    return;
 8007770:	e017      	b.n	80077a2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007776:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777a:	2b00      	cmp	r3, #0
 800777c:	d012      	beq.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
 800777e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00c      	beq.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 fcc2 	bl	8008114 <UART_EndTransmit_IT>
    return;
 8007790:	e008      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007792:	bf00      	nop
 8007794:	e006      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007796:	bf00      	nop
 8007798:	e004      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800779a:	bf00      	nop
 800779c:	e002      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
      return;
 800779e:	bf00      	nop
 80077a0:	e000      	b.n	80077a4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80077a2:	bf00      	nop
  }

}
 80077a4:	37e8      	adds	r7, #232	; 0xe8
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop

080077ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077e0:	bf00      	nop
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689a      	ldr	r2, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	431a      	orrs	r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	431a      	orrs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	69db      	ldr	r3, [r3, #28]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	4ba7      	ldr	r3, [pc, #668]	; (8007ac8 <UART_SetConfig+0x2c8>)
 800782c:	4013      	ands	r3, r2
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	6812      	ldr	r2, [r2, #0]
 8007832:	6979      	ldr	r1, [r7, #20]
 8007834:	430b      	orrs	r3, r1
 8007836:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68da      	ldr	r2, [r3, #12]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6a1b      	ldr	r3, [r3, #32]
 8007858:	697a      	ldr	r2, [r7, #20]
 800785a:	4313      	orrs	r3, r2
 800785c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	430a      	orrs	r2, r1
 8007870:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a95      	ldr	r2, [pc, #596]	; (8007acc <UART_SetConfig+0x2cc>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d120      	bne.n	80078be <UART_SetConfig+0xbe>
 800787c:	4b94      	ldr	r3, [pc, #592]	; (8007ad0 <UART_SetConfig+0x2d0>)
 800787e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007882:	f003 0303 	and.w	r3, r3, #3
 8007886:	2b03      	cmp	r3, #3
 8007888:	d816      	bhi.n	80078b8 <UART_SetConfig+0xb8>
 800788a:	a201      	add	r2, pc, #4	; (adr r2, 8007890 <UART_SetConfig+0x90>)
 800788c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007890:	080078a1 	.word	0x080078a1
 8007894:	080078ad 	.word	0x080078ad
 8007898:	080078a7 	.word	0x080078a7
 800789c:	080078b3 	.word	0x080078b3
 80078a0:	2301      	movs	r3, #1
 80078a2:	77fb      	strb	r3, [r7, #31]
 80078a4:	e14f      	b.n	8007b46 <UART_SetConfig+0x346>
 80078a6:	2302      	movs	r3, #2
 80078a8:	77fb      	strb	r3, [r7, #31]
 80078aa:	e14c      	b.n	8007b46 <UART_SetConfig+0x346>
 80078ac:	2304      	movs	r3, #4
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e149      	b.n	8007b46 <UART_SetConfig+0x346>
 80078b2:	2308      	movs	r3, #8
 80078b4:	77fb      	strb	r3, [r7, #31]
 80078b6:	e146      	b.n	8007b46 <UART_SetConfig+0x346>
 80078b8:	2310      	movs	r3, #16
 80078ba:	77fb      	strb	r3, [r7, #31]
 80078bc:	e143      	b.n	8007b46 <UART_SetConfig+0x346>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a84      	ldr	r2, [pc, #528]	; (8007ad4 <UART_SetConfig+0x2d4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d132      	bne.n	800792e <UART_SetConfig+0x12e>
 80078c8:	4b81      	ldr	r3, [pc, #516]	; (8007ad0 <UART_SetConfig+0x2d0>)
 80078ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078ce:	f003 030c 	and.w	r3, r3, #12
 80078d2:	2b0c      	cmp	r3, #12
 80078d4:	d828      	bhi.n	8007928 <UART_SetConfig+0x128>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <UART_SetConfig+0xdc>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	08007911 	.word	0x08007911
 80078e0:	08007929 	.word	0x08007929
 80078e4:	08007929 	.word	0x08007929
 80078e8:	08007929 	.word	0x08007929
 80078ec:	0800791d 	.word	0x0800791d
 80078f0:	08007929 	.word	0x08007929
 80078f4:	08007929 	.word	0x08007929
 80078f8:	08007929 	.word	0x08007929
 80078fc:	08007917 	.word	0x08007917
 8007900:	08007929 	.word	0x08007929
 8007904:	08007929 	.word	0x08007929
 8007908:	08007929 	.word	0x08007929
 800790c:	08007923 	.word	0x08007923
 8007910:	2300      	movs	r3, #0
 8007912:	77fb      	strb	r3, [r7, #31]
 8007914:	e117      	b.n	8007b46 <UART_SetConfig+0x346>
 8007916:	2302      	movs	r3, #2
 8007918:	77fb      	strb	r3, [r7, #31]
 800791a:	e114      	b.n	8007b46 <UART_SetConfig+0x346>
 800791c:	2304      	movs	r3, #4
 800791e:	77fb      	strb	r3, [r7, #31]
 8007920:	e111      	b.n	8007b46 <UART_SetConfig+0x346>
 8007922:	2308      	movs	r3, #8
 8007924:	77fb      	strb	r3, [r7, #31]
 8007926:	e10e      	b.n	8007b46 <UART_SetConfig+0x346>
 8007928:	2310      	movs	r3, #16
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e10b      	b.n	8007b46 <UART_SetConfig+0x346>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a69      	ldr	r2, [pc, #420]	; (8007ad8 <UART_SetConfig+0x2d8>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d120      	bne.n	800797a <UART_SetConfig+0x17a>
 8007938:	4b65      	ldr	r3, [pc, #404]	; (8007ad0 <UART_SetConfig+0x2d0>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007942:	2b30      	cmp	r3, #48	; 0x30
 8007944:	d013      	beq.n	800796e <UART_SetConfig+0x16e>
 8007946:	2b30      	cmp	r3, #48	; 0x30
 8007948:	d814      	bhi.n	8007974 <UART_SetConfig+0x174>
 800794a:	2b20      	cmp	r3, #32
 800794c:	d009      	beq.n	8007962 <UART_SetConfig+0x162>
 800794e:	2b20      	cmp	r3, #32
 8007950:	d810      	bhi.n	8007974 <UART_SetConfig+0x174>
 8007952:	2b00      	cmp	r3, #0
 8007954:	d002      	beq.n	800795c <UART_SetConfig+0x15c>
 8007956:	2b10      	cmp	r3, #16
 8007958:	d006      	beq.n	8007968 <UART_SetConfig+0x168>
 800795a:	e00b      	b.n	8007974 <UART_SetConfig+0x174>
 800795c:	2300      	movs	r3, #0
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e0f1      	b.n	8007b46 <UART_SetConfig+0x346>
 8007962:	2302      	movs	r3, #2
 8007964:	77fb      	strb	r3, [r7, #31]
 8007966:	e0ee      	b.n	8007b46 <UART_SetConfig+0x346>
 8007968:	2304      	movs	r3, #4
 800796a:	77fb      	strb	r3, [r7, #31]
 800796c:	e0eb      	b.n	8007b46 <UART_SetConfig+0x346>
 800796e:	2308      	movs	r3, #8
 8007970:	77fb      	strb	r3, [r7, #31]
 8007972:	e0e8      	b.n	8007b46 <UART_SetConfig+0x346>
 8007974:	2310      	movs	r3, #16
 8007976:	77fb      	strb	r3, [r7, #31]
 8007978:	e0e5      	b.n	8007b46 <UART_SetConfig+0x346>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a57      	ldr	r2, [pc, #348]	; (8007adc <UART_SetConfig+0x2dc>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d120      	bne.n	80079c6 <UART_SetConfig+0x1c6>
 8007984:	4b52      	ldr	r3, [pc, #328]	; (8007ad0 <UART_SetConfig+0x2d0>)
 8007986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800798e:	2bc0      	cmp	r3, #192	; 0xc0
 8007990:	d013      	beq.n	80079ba <UART_SetConfig+0x1ba>
 8007992:	2bc0      	cmp	r3, #192	; 0xc0
 8007994:	d814      	bhi.n	80079c0 <UART_SetConfig+0x1c0>
 8007996:	2b80      	cmp	r3, #128	; 0x80
 8007998:	d009      	beq.n	80079ae <UART_SetConfig+0x1ae>
 800799a:	2b80      	cmp	r3, #128	; 0x80
 800799c:	d810      	bhi.n	80079c0 <UART_SetConfig+0x1c0>
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d002      	beq.n	80079a8 <UART_SetConfig+0x1a8>
 80079a2:	2b40      	cmp	r3, #64	; 0x40
 80079a4:	d006      	beq.n	80079b4 <UART_SetConfig+0x1b4>
 80079a6:	e00b      	b.n	80079c0 <UART_SetConfig+0x1c0>
 80079a8:	2300      	movs	r3, #0
 80079aa:	77fb      	strb	r3, [r7, #31]
 80079ac:	e0cb      	b.n	8007b46 <UART_SetConfig+0x346>
 80079ae:	2302      	movs	r3, #2
 80079b0:	77fb      	strb	r3, [r7, #31]
 80079b2:	e0c8      	b.n	8007b46 <UART_SetConfig+0x346>
 80079b4:	2304      	movs	r3, #4
 80079b6:	77fb      	strb	r3, [r7, #31]
 80079b8:	e0c5      	b.n	8007b46 <UART_SetConfig+0x346>
 80079ba:	2308      	movs	r3, #8
 80079bc:	77fb      	strb	r3, [r7, #31]
 80079be:	e0c2      	b.n	8007b46 <UART_SetConfig+0x346>
 80079c0:	2310      	movs	r3, #16
 80079c2:	77fb      	strb	r3, [r7, #31]
 80079c4:	e0bf      	b.n	8007b46 <UART_SetConfig+0x346>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a45      	ldr	r2, [pc, #276]	; (8007ae0 <UART_SetConfig+0x2e0>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d125      	bne.n	8007a1c <UART_SetConfig+0x21c>
 80079d0:	4b3f      	ldr	r3, [pc, #252]	; (8007ad0 <UART_SetConfig+0x2d0>)
 80079d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079de:	d017      	beq.n	8007a10 <UART_SetConfig+0x210>
 80079e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079e4:	d817      	bhi.n	8007a16 <UART_SetConfig+0x216>
 80079e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079ea:	d00b      	beq.n	8007a04 <UART_SetConfig+0x204>
 80079ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079f0:	d811      	bhi.n	8007a16 <UART_SetConfig+0x216>
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d003      	beq.n	80079fe <UART_SetConfig+0x1fe>
 80079f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079fa:	d006      	beq.n	8007a0a <UART_SetConfig+0x20a>
 80079fc:	e00b      	b.n	8007a16 <UART_SetConfig+0x216>
 80079fe:	2300      	movs	r3, #0
 8007a00:	77fb      	strb	r3, [r7, #31]
 8007a02:	e0a0      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a04:	2302      	movs	r3, #2
 8007a06:	77fb      	strb	r3, [r7, #31]
 8007a08:	e09d      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a0a:	2304      	movs	r3, #4
 8007a0c:	77fb      	strb	r3, [r7, #31]
 8007a0e:	e09a      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a10:	2308      	movs	r3, #8
 8007a12:	77fb      	strb	r3, [r7, #31]
 8007a14:	e097      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a16:	2310      	movs	r3, #16
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e094      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a30      	ldr	r2, [pc, #192]	; (8007ae4 <UART_SetConfig+0x2e4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d125      	bne.n	8007a72 <UART_SetConfig+0x272>
 8007a26:	4b2a      	ldr	r3, [pc, #168]	; (8007ad0 <UART_SetConfig+0x2d0>)
 8007a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a2c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007a30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a34:	d017      	beq.n	8007a66 <UART_SetConfig+0x266>
 8007a36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007a3a:	d817      	bhi.n	8007a6c <UART_SetConfig+0x26c>
 8007a3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a40:	d00b      	beq.n	8007a5a <UART_SetConfig+0x25a>
 8007a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a46:	d811      	bhi.n	8007a6c <UART_SetConfig+0x26c>
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <UART_SetConfig+0x254>
 8007a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a50:	d006      	beq.n	8007a60 <UART_SetConfig+0x260>
 8007a52:	e00b      	b.n	8007a6c <UART_SetConfig+0x26c>
 8007a54:	2301      	movs	r3, #1
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e075      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	77fb      	strb	r3, [r7, #31]
 8007a5e:	e072      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a60:	2304      	movs	r3, #4
 8007a62:	77fb      	strb	r3, [r7, #31]
 8007a64:	e06f      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a66:	2308      	movs	r3, #8
 8007a68:	77fb      	strb	r3, [r7, #31]
 8007a6a:	e06c      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a6c:	2310      	movs	r3, #16
 8007a6e:	77fb      	strb	r3, [r7, #31]
 8007a70:	e069      	b.n	8007b46 <UART_SetConfig+0x346>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a1c      	ldr	r2, [pc, #112]	; (8007ae8 <UART_SetConfig+0x2e8>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d137      	bne.n	8007aec <UART_SetConfig+0x2ec>
 8007a7c:	4b14      	ldr	r3, [pc, #80]	; (8007ad0 <UART_SetConfig+0x2d0>)
 8007a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a82:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007a86:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a8a:	d017      	beq.n	8007abc <UART_SetConfig+0x2bc>
 8007a8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007a90:	d817      	bhi.n	8007ac2 <UART_SetConfig+0x2c2>
 8007a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a96:	d00b      	beq.n	8007ab0 <UART_SetConfig+0x2b0>
 8007a98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a9c:	d811      	bhi.n	8007ac2 <UART_SetConfig+0x2c2>
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <UART_SetConfig+0x2aa>
 8007aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007aa6:	d006      	beq.n	8007ab6 <UART_SetConfig+0x2b6>
 8007aa8:	e00b      	b.n	8007ac2 <UART_SetConfig+0x2c2>
 8007aaa:	2300      	movs	r3, #0
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e04a      	b.n	8007b46 <UART_SetConfig+0x346>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	77fb      	strb	r3, [r7, #31]
 8007ab4:	e047      	b.n	8007b46 <UART_SetConfig+0x346>
 8007ab6:	2304      	movs	r3, #4
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	e044      	b.n	8007b46 <UART_SetConfig+0x346>
 8007abc:	2308      	movs	r3, #8
 8007abe:	77fb      	strb	r3, [r7, #31]
 8007ac0:	e041      	b.n	8007b46 <UART_SetConfig+0x346>
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	77fb      	strb	r3, [r7, #31]
 8007ac6:	e03e      	b.n	8007b46 <UART_SetConfig+0x346>
 8007ac8:	efff69f3 	.word	0xefff69f3
 8007acc:	40011000 	.word	0x40011000
 8007ad0:	40023800 	.word	0x40023800
 8007ad4:	40004400 	.word	0x40004400
 8007ad8:	40004800 	.word	0x40004800
 8007adc:	40004c00 	.word	0x40004c00
 8007ae0:	40005000 	.word	0x40005000
 8007ae4:	40011400 	.word	0x40011400
 8007ae8:	40007800 	.word	0x40007800
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a71      	ldr	r2, [pc, #452]	; (8007cb8 <UART_SetConfig+0x4b8>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d125      	bne.n	8007b42 <UART_SetConfig+0x342>
 8007af6:	4b71      	ldr	r3, [pc, #452]	; (8007cbc <UART_SetConfig+0x4bc>)
 8007af8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b00:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b04:	d017      	beq.n	8007b36 <UART_SetConfig+0x336>
 8007b06:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b0a:	d817      	bhi.n	8007b3c <UART_SetConfig+0x33c>
 8007b0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b10:	d00b      	beq.n	8007b2a <UART_SetConfig+0x32a>
 8007b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b16:	d811      	bhi.n	8007b3c <UART_SetConfig+0x33c>
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <UART_SetConfig+0x324>
 8007b1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b20:	d006      	beq.n	8007b30 <UART_SetConfig+0x330>
 8007b22:	e00b      	b.n	8007b3c <UART_SetConfig+0x33c>
 8007b24:	2300      	movs	r3, #0
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e00d      	b.n	8007b46 <UART_SetConfig+0x346>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e00a      	b.n	8007b46 <UART_SetConfig+0x346>
 8007b30:	2304      	movs	r3, #4
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e007      	b.n	8007b46 <UART_SetConfig+0x346>
 8007b36:	2308      	movs	r3, #8
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e004      	b.n	8007b46 <UART_SetConfig+0x346>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e001      	b.n	8007b46 <UART_SetConfig+0x346>
 8007b42:	2310      	movs	r3, #16
 8007b44:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b4e:	d15a      	bne.n	8007c06 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007b50:	7ffb      	ldrb	r3, [r7, #31]
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d827      	bhi.n	8007ba6 <UART_SetConfig+0x3a6>
 8007b56:	a201      	add	r2, pc, #4	; (adr r2, 8007b5c <UART_SetConfig+0x35c>)
 8007b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b5c:	08007b81 	.word	0x08007b81
 8007b60:	08007b89 	.word	0x08007b89
 8007b64:	08007b91 	.word	0x08007b91
 8007b68:	08007ba7 	.word	0x08007ba7
 8007b6c:	08007b97 	.word	0x08007b97
 8007b70:	08007ba7 	.word	0x08007ba7
 8007b74:	08007ba7 	.word	0x08007ba7
 8007b78:	08007ba7 	.word	0x08007ba7
 8007b7c:	08007b9f 	.word	0x08007b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b80:	f7fd fdf2 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8007b84:	61b8      	str	r0, [r7, #24]
        break;
 8007b86:	e013      	b.n	8007bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b88:	f7fd fe02 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 8007b8c:	61b8      	str	r0, [r7, #24]
        break;
 8007b8e:	e00f      	b.n	8007bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b90:	4b4b      	ldr	r3, [pc, #300]	; (8007cc0 <UART_SetConfig+0x4c0>)
 8007b92:	61bb      	str	r3, [r7, #24]
        break;
 8007b94:	e00c      	b.n	8007bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b96:	f7fd fcf9 	bl	800558c <HAL_RCC_GetSysClockFreq>
 8007b9a:	61b8      	str	r0, [r7, #24]
        break;
 8007b9c:	e008      	b.n	8007bb0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ba2:	61bb      	str	r3, [r7, #24]
        break;
 8007ba4:	e004      	b.n	8007bb0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	77bb      	strb	r3, [r7, #30]
        break;
 8007bae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d074      	beq.n	8007ca0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007bb6:	69bb      	ldr	r3, [r7, #24]
 8007bb8:	005a      	lsls	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	441a      	add	r2, r3
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bca:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	2b0f      	cmp	r3, #15
 8007bd0:	d916      	bls.n	8007c00 <UART_SetConfig+0x400>
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd8:	d212      	bcs.n	8007c00 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	f023 030f 	bic.w	r3, r3, #15
 8007be2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	f003 0307 	and.w	r3, r3, #7
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	89fb      	ldrh	r3, [r7, #14]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	89fa      	ldrh	r2, [r7, #14]
 8007bfc:	60da      	str	r2, [r3, #12]
 8007bfe:	e04f      	b.n	8007ca0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007c00:	2301      	movs	r3, #1
 8007c02:	77bb      	strb	r3, [r7, #30]
 8007c04:	e04c      	b.n	8007ca0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c06:	7ffb      	ldrb	r3, [r7, #31]
 8007c08:	2b08      	cmp	r3, #8
 8007c0a:	d828      	bhi.n	8007c5e <UART_SetConfig+0x45e>
 8007c0c:	a201      	add	r2, pc, #4	; (adr r2, 8007c14 <UART_SetConfig+0x414>)
 8007c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c12:	bf00      	nop
 8007c14:	08007c39 	.word	0x08007c39
 8007c18:	08007c41 	.word	0x08007c41
 8007c1c:	08007c49 	.word	0x08007c49
 8007c20:	08007c5f 	.word	0x08007c5f
 8007c24:	08007c4f 	.word	0x08007c4f
 8007c28:	08007c5f 	.word	0x08007c5f
 8007c2c:	08007c5f 	.word	0x08007c5f
 8007c30:	08007c5f 	.word	0x08007c5f
 8007c34:	08007c57 	.word	0x08007c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c38:	f7fd fd96 	bl	8005768 <HAL_RCC_GetPCLK1Freq>
 8007c3c:	61b8      	str	r0, [r7, #24]
        break;
 8007c3e:	e013      	b.n	8007c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c40:	f7fd fda6 	bl	8005790 <HAL_RCC_GetPCLK2Freq>
 8007c44:	61b8      	str	r0, [r7, #24]
        break;
 8007c46:	e00f      	b.n	8007c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c48:	4b1d      	ldr	r3, [pc, #116]	; (8007cc0 <UART_SetConfig+0x4c0>)
 8007c4a:	61bb      	str	r3, [r7, #24]
        break;
 8007c4c:	e00c      	b.n	8007c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c4e:	f7fd fc9d 	bl	800558c <HAL_RCC_GetSysClockFreq>
 8007c52:	61b8      	str	r0, [r7, #24]
        break;
 8007c54:	e008      	b.n	8007c68 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c5a:	61bb      	str	r3, [r7, #24]
        break;
 8007c5c:	e004      	b.n	8007c68 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c62:	2301      	movs	r3, #1
 8007c64:	77bb      	strb	r3, [r7, #30]
        break;
 8007c66:	bf00      	nop
    }

    if (pclk != 0U)
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d018      	beq.n	8007ca0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	085a      	lsrs	r2, r3, #1
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	441a      	add	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c82:	693b      	ldr	r3, [r7, #16]
 8007c84:	2b0f      	cmp	r3, #15
 8007c86:	d909      	bls.n	8007c9c <UART_SetConfig+0x49c>
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c8e:	d205      	bcs.n	8007c9c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	b29a      	uxth	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	60da      	str	r2, [r3, #12]
 8007c9a:	e001      	b.n	8007ca0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007cac:	7fbb      	ldrb	r3, [r7, #30]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	40007c00 	.word	0x40007c00
 8007cbc:	40023800 	.word	0x40023800
 8007cc0:	00f42400 	.word	0x00f42400

08007cc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	f003 0301 	and.w	r3, r3, #1
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00a      	beq.n	8007cee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	430a      	orrs	r2, r1
 8007cec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf2:	f003 0302 	and.w	r3, r3, #2
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d00a      	beq.n	8007d10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	685b      	ldr	r3, [r3, #4]
 8007d00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	430a      	orrs	r2, r1
 8007d0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d14:	f003 0304 	and.w	r3, r3, #4
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00a      	beq.n	8007d32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d36:	f003 0308 	and.w	r3, r3, #8
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d00a      	beq.n	8007d54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	430a      	orrs	r2, r1
 8007d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d58:	f003 0310 	and.w	r3, r3, #16
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d00a      	beq.n	8007d76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	430a      	orrs	r2, r1
 8007d74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	f003 0320 	and.w	r3, r3, #32
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d01a      	beq.n	8007dda <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	430a      	orrs	r2, r1
 8007db8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dc2:	d10a      	bne.n	8007dda <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00a      	beq.n	8007dfc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	430a      	orrs	r2, r1
 8007dfa:	605a      	str	r2, [r3, #4]
  }
}
 8007dfc:	bf00      	nop
 8007dfe:	370c      	adds	r7, #12
 8007e00:	46bd      	mov	sp, r7
 8007e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e06:	4770      	bx	lr

08007e08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b086      	sub	sp, #24
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007e18:	f7fa f8f6 	bl	8002008 <HAL_GetTick>
 8007e1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f003 0308 	and.w	r3, r3, #8
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d10e      	bne.n	8007e4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f000 f82d 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e46:	2303      	movs	r3, #3
 8007e48:	e023      	b.n	8007e92 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0304 	and.w	r3, r3, #4
 8007e54:	2b04      	cmp	r3, #4
 8007e56:	d10e      	bne.n	8007e76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e5c:	9300      	str	r3, [sp, #0]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 f817 	bl	8007e9a <UART_WaitOnFlagUntilTimeout>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e00d      	b.n	8007e92 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2220      	movs	r2, #32
 8007e7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2220      	movs	r2, #32
 8007e80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2200      	movs	r2, #0
 8007e86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b09c      	sub	sp, #112	; 0x70
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	60b9      	str	r1, [r7, #8]
 8007ea4:	603b      	str	r3, [r7, #0]
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007eaa:	e0a5      	b.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007eac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	f000 80a1 	beq.w	8007ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007eb6:	f7fa f8a7 	bl	8002008 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d302      	bcc.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x32>
 8007ec6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d13e      	bne.n	8007f4a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007edc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ee0:	667b      	str	r3, [r7, #100]	; 0x64
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007eea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007eec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007ef0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007ef8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e6      	bne.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3308      	adds	r3, #8
 8007f04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f08:	e853 3f00 	ldrex	r3, [r3]
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f10:	f023 0301 	bic.w	r3, r3, #1
 8007f14:	663b      	str	r3, [r7, #96]	; 0x60
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007f2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e5      	bne.n	8007efe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2220      	movs	r2, #32
 8007f36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e067      	b.n	800801a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0304 	and.w	r3, r3, #4
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d04f      	beq.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f66:	d147      	bne.n	8007ff8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f70:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f7a:	e853 3f00 	ldrex	r3, [r3]
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f90:	637b      	str	r3, [r7, #52]	; 0x34
 8007f92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007f96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007f98:	e841 2300 	strex	r3, r2, [r1]
 8007f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d1e6      	bne.n	8007f72 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	3308      	adds	r3, #8
 8007faa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	f023 0301 	bic.w	r3, r3, #1
 8007fba:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	3308      	adds	r3, #8
 8007fc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fc4:	623a      	str	r2, [r7, #32]
 8007fc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc8:	69f9      	ldr	r1, [r7, #28]
 8007fca:	6a3a      	ldr	r2, [r7, #32]
 8007fcc:	e841 2300 	strex	r3, r2, [r1]
 8007fd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1e5      	bne.n	8007fa4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	2220      	movs	r2, #32
 8007fdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2220      	movs	r2, #32
 8007fe2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e010      	b.n	800801a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	69da      	ldr	r2, [r3, #28]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	4013      	ands	r3, r2
 8008002:	68ba      	ldr	r2, [r7, #8]
 8008004:	429a      	cmp	r2, r3
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	79fb      	ldrb	r3, [r7, #7]
 8008012:	429a      	cmp	r2, r3
 8008014:	f43f af4a 	beq.w	8007eac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008018:	2300      	movs	r3, #0
}
 800801a:	4618      	mov	r0, r3
 800801c:	3770      	adds	r7, #112	; 0x70
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}

08008022 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008022:	b480      	push	{r7}
 8008024:	b095      	sub	sp, #84	; 0x54
 8008026:	af00      	add	r7, sp, #0
 8008028:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008032:	e853 3f00 	ldrex	r3, [r3]
 8008036:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800803e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	461a      	mov	r2, r3
 8008046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008048:	643b      	str	r3, [r7, #64]	; 0x40
 800804a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800804e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008050:	e841 2300 	strex	r3, r2, [r1]
 8008054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1e6      	bne.n	800802a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	3308      	adds	r3, #8
 8008062:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	e853 3f00 	ldrex	r3, [r3]
 800806a:	61fb      	str	r3, [r7, #28]
   return(result);
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	f023 0301 	bic.w	r3, r3, #1
 8008072:	64bb      	str	r3, [r7, #72]	; 0x48
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	3308      	adds	r3, #8
 800807a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800807c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800807e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800808a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e5      	bne.n	800805c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008094:	2b01      	cmp	r3, #1
 8008096:	d118      	bne.n	80080ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	e853 3f00 	ldrex	r3, [r3]
 80080a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	f023 0310 	bic.w	r3, r3, #16
 80080ac:	647b      	str	r3, [r7, #68]	; 0x44
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b6:	61bb      	str	r3, [r7, #24]
 80080b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ba:	6979      	ldr	r1, [r7, #20]
 80080bc:	69ba      	ldr	r2, [r7, #24]
 80080be:	e841 2300 	strex	r3, r2, [r1]
 80080c2:	613b      	str	r3, [r7, #16]
   return(result);
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1e6      	bne.n	8008098 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2220      	movs	r2, #32
 80080ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2200      	movs	r2, #0
 80080da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80080dc:	bf00      	nop
 80080de:	3754      	adds	r7, #84	; 0x54
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b084      	sub	sp, #16
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f7ff fb5a 	bl	80077c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b088      	sub	sp, #32
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	e853 3f00 	ldrex	r3, [r3]
 8008128:	60bb      	str	r3, [r7, #8]
   return(result);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008130:	61fb      	str	r3, [r7, #28]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	61bb      	str	r3, [r7, #24]
 800813c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813e:	6979      	ldr	r1, [r7, #20]
 8008140:	69ba      	ldr	r2, [r7, #24]
 8008142:	e841 2300 	strex	r3, r2, [r1]
 8008146:	613b      	str	r3, [r7, #16]
   return(result);
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d1e6      	bne.n	800811c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2220      	movs	r2, #32
 8008152:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2200      	movs	r2, #0
 8008158:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff fb26 	bl	80077ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008160:	bf00      	nop
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8008168:	b5b0      	push	{r4, r5, r7, lr}
 800816a:	b08e      	sub	sp, #56	; 0x38
 800816c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800816e:	4ba0      	ldr	r3, [pc, #640]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008170:	22c0      	movs	r2, #192	; 0xc0
 8008172:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8008174:	4b9e      	ldr	r3, [pc, #632]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008176:	22a8      	movs	r2, #168	; 0xa8
 8008178:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800817a:	4b9d      	ldr	r3, [pc, #628]	; (80083f0 <MX_LWIP_Init+0x288>)
 800817c:	2200      	movs	r2, #0
 800817e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 20;
 8008180:	4b9b      	ldr	r3, [pc, #620]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008182:	2214      	movs	r2, #20
 8008184:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8008186:	4b9b      	ldr	r3, [pc, #620]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008188:	22ff      	movs	r2, #255	; 0xff
 800818a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800818c:	4b99      	ldr	r3, [pc, #612]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800818e:	22ff      	movs	r2, #255	; 0xff
 8008190:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8008192:	4b98      	ldr	r3, [pc, #608]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008194:	22ff      	movs	r2, #255	; 0xff
 8008196:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8008198:	4b96      	ldr	r3, [pc, #600]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800819a:	2200      	movs	r2, #0
 800819c:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800819e:	4b96      	ldr	r3, [pc, #600]	; (80083f8 <MX_LWIP_Init+0x290>)
 80081a0:	22c0      	movs	r2, #192	; 0xc0
 80081a2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80081a4:	4b94      	ldr	r3, [pc, #592]	; (80083f8 <MX_LWIP_Init+0x290>)
 80081a6:	22a8      	movs	r2, #168	; 0xa8
 80081a8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80081aa:	4b93      	ldr	r3, [pc, #588]	; (80083f8 <MX_LWIP_Init+0x290>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80081b0:	4b91      	ldr	r3, [pc, #580]	; (80083f8 <MX_LWIP_Init+0x290>)
 80081b2:	2201      	movs	r2, #1
 80081b4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80081b6:	2100      	movs	r1, #0
 80081b8:	2000      	movs	r0, #0
 80081ba:	f007 fe4f 	bl	800fe5c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80081be:	4b8c      	ldr	r3, [pc, #560]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	061a      	lsls	r2, r3, #24
 80081c4:	4b8a      	ldr	r3, [pc, #552]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	041b      	lsls	r3, r3, #16
 80081ca:	431a      	orrs	r2, r3
 80081cc:	4b88      	ldr	r3, [pc, #544]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081ce:	789b      	ldrb	r3, [r3, #2]
 80081d0:	021b      	lsls	r3, r3, #8
 80081d2:	4313      	orrs	r3, r2
 80081d4:	4a86      	ldr	r2, [pc, #536]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081d6:	78d2      	ldrb	r2, [r2, #3]
 80081d8:	4313      	orrs	r3, r2
 80081da:	061a      	lsls	r2, r3, #24
 80081dc:	4b84      	ldr	r3, [pc, #528]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	0619      	lsls	r1, r3, #24
 80081e2:	4b83      	ldr	r3, [pc, #524]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081e4:	785b      	ldrb	r3, [r3, #1]
 80081e6:	041b      	lsls	r3, r3, #16
 80081e8:	4319      	orrs	r1, r3
 80081ea:	4b81      	ldr	r3, [pc, #516]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081ec:	789b      	ldrb	r3, [r3, #2]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	430b      	orrs	r3, r1
 80081f2:	497f      	ldr	r1, [pc, #508]	; (80083f0 <MX_LWIP_Init+0x288>)
 80081f4:	78c9      	ldrb	r1, [r1, #3]
 80081f6:	430b      	orrs	r3, r1
 80081f8:	021b      	lsls	r3, r3, #8
 80081fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80081fe:	431a      	orrs	r2, r3
 8008200:	4b7b      	ldr	r3, [pc, #492]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	0619      	lsls	r1, r3, #24
 8008206:	4b7a      	ldr	r3, [pc, #488]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	041b      	lsls	r3, r3, #16
 800820c:	4319      	orrs	r1, r3
 800820e:	4b78      	ldr	r3, [pc, #480]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008210:	789b      	ldrb	r3, [r3, #2]
 8008212:	021b      	lsls	r3, r3, #8
 8008214:	430b      	orrs	r3, r1
 8008216:	4976      	ldr	r1, [pc, #472]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008218:	78c9      	ldrb	r1, [r1, #3]
 800821a:	430b      	orrs	r3, r1
 800821c:	0a1b      	lsrs	r3, r3, #8
 800821e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008222:	431a      	orrs	r2, r3
 8008224:	4b72      	ldr	r3, [pc, #456]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	0619      	lsls	r1, r3, #24
 800822a:	4b71      	ldr	r3, [pc, #452]	; (80083f0 <MX_LWIP_Init+0x288>)
 800822c:	785b      	ldrb	r3, [r3, #1]
 800822e:	041b      	lsls	r3, r3, #16
 8008230:	4319      	orrs	r1, r3
 8008232:	4b6f      	ldr	r3, [pc, #444]	; (80083f0 <MX_LWIP_Init+0x288>)
 8008234:	789b      	ldrb	r3, [r3, #2]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	430b      	orrs	r3, r1
 800823a:	496d      	ldr	r1, [pc, #436]	; (80083f0 <MX_LWIP_Init+0x288>)
 800823c:	78c9      	ldrb	r1, [r1, #3]
 800823e:	430b      	orrs	r3, r1
 8008240:	0e1b      	lsrs	r3, r3, #24
 8008242:	4313      	orrs	r3, r2
 8008244:	4a6d      	ldr	r2, [pc, #436]	; (80083fc <MX_LWIP_Init+0x294>)
 8008246:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8008248:	4b6a      	ldr	r3, [pc, #424]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	061a      	lsls	r2, r3, #24
 800824e:	4b69      	ldr	r3, [pc, #420]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008250:	785b      	ldrb	r3, [r3, #1]
 8008252:	041b      	lsls	r3, r3, #16
 8008254:	431a      	orrs	r2, r3
 8008256:	4b67      	ldr	r3, [pc, #412]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008258:	789b      	ldrb	r3, [r3, #2]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	4313      	orrs	r3, r2
 800825e:	4a65      	ldr	r2, [pc, #404]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008260:	78d2      	ldrb	r2, [r2, #3]
 8008262:	4313      	orrs	r3, r2
 8008264:	061a      	lsls	r2, r3, #24
 8008266:	4b63      	ldr	r3, [pc, #396]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	0619      	lsls	r1, r3, #24
 800826c:	4b61      	ldr	r3, [pc, #388]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800826e:	785b      	ldrb	r3, [r3, #1]
 8008270:	041b      	lsls	r3, r3, #16
 8008272:	4319      	orrs	r1, r3
 8008274:	4b5f      	ldr	r3, [pc, #380]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008276:	789b      	ldrb	r3, [r3, #2]
 8008278:	021b      	lsls	r3, r3, #8
 800827a:	430b      	orrs	r3, r1
 800827c:	495d      	ldr	r1, [pc, #372]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800827e:	78c9      	ldrb	r1, [r1, #3]
 8008280:	430b      	orrs	r3, r1
 8008282:	021b      	lsls	r3, r3, #8
 8008284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008288:	431a      	orrs	r2, r3
 800828a:	4b5a      	ldr	r3, [pc, #360]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	0619      	lsls	r1, r3, #24
 8008290:	4b58      	ldr	r3, [pc, #352]	; (80083f4 <MX_LWIP_Init+0x28c>)
 8008292:	785b      	ldrb	r3, [r3, #1]
 8008294:	041b      	lsls	r3, r3, #16
 8008296:	4319      	orrs	r1, r3
 8008298:	4b56      	ldr	r3, [pc, #344]	; (80083f4 <MX_LWIP_Init+0x28c>)
 800829a:	789b      	ldrb	r3, [r3, #2]
 800829c:	021b      	lsls	r3, r3, #8
 800829e:	430b      	orrs	r3, r1
 80082a0:	4954      	ldr	r1, [pc, #336]	; (80083f4 <MX_LWIP_Init+0x28c>)
 80082a2:	78c9      	ldrb	r1, [r1, #3]
 80082a4:	430b      	orrs	r3, r1
 80082a6:	0a1b      	lsrs	r3, r3, #8
 80082a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80082ac:	431a      	orrs	r2, r3
 80082ae:	4b51      	ldr	r3, [pc, #324]	; (80083f4 <MX_LWIP_Init+0x28c>)
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	0619      	lsls	r1, r3, #24
 80082b4:	4b4f      	ldr	r3, [pc, #316]	; (80083f4 <MX_LWIP_Init+0x28c>)
 80082b6:	785b      	ldrb	r3, [r3, #1]
 80082b8:	041b      	lsls	r3, r3, #16
 80082ba:	4319      	orrs	r1, r3
 80082bc:	4b4d      	ldr	r3, [pc, #308]	; (80083f4 <MX_LWIP_Init+0x28c>)
 80082be:	789b      	ldrb	r3, [r3, #2]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	430b      	orrs	r3, r1
 80082c4:	494b      	ldr	r1, [pc, #300]	; (80083f4 <MX_LWIP_Init+0x28c>)
 80082c6:	78c9      	ldrb	r1, [r1, #3]
 80082c8:	430b      	orrs	r3, r1
 80082ca:	0e1b      	lsrs	r3, r3, #24
 80082cc:	4313      	orrs	r3, r2
 80082ce:	4a4c      	ldr	r2, [pc, #304]	; (8008400 <MX_LWIP_Init+0x298>)
 80082d0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80082d2:	4b49      	ldr	r3, [pc, #292]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	061a      	lsls	r2, r3, #24
 80082d8:	4b47      	ldr	r3, [pc, #284]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082da:	785b      	ldrb	r3, [r3, #1]
 80082dc:	041b      	lsls	r3, r3, #16
 80082de:	431a      	orrs	r2, r3
 80082e0:	4b45      	ldr	r3, [pc, #276]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082e2:	789b      	ldrb	r3, [r3, #2]
 80082e4:	021b      	lsls	r3, r3, #8
 80082e6:	4313      	orrs	r3, r2
 80082e8:	4a43      	ldr	r2, [pc, #268]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082ea:	78d2      	ldrb	r2, [r2, #3]
 80082ec:	4313      	orrs	r3, r2
 80082ee:	061a      	lsls	r2, r3, #24
 80082f0:	4b41      	ldr	r3, [pc, #260]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	0619      	lsls	r1, r3, #24
 80082f6:	4b40      	ldr	r3, [pc, #256]	; (80083f8 <MX_LWIP_Init+0x290>)
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	041b      	lsls	r3, r3, #16
 80082fc:	4319      	orrs	r1, r3
 80082fe:	4b3e      	ldr	r3, [pc, #248]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008300:	789b      	ldrb	r3, [r3, #2]
 8008302:	021b      	lsls	r3, r3, #8
 8008304:	430b      	orrs	r3, r1
 8008306:	493c      	ldr	r1, [pc, #240]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008308:	78c9      	ldrb	r1, [r1, #3]
 800830a:	430b      	orrs	r3, r1
 800830c:	021b      	lsls	r3, r3, #8
 800830e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008312:	431a      	orrs	r2, r3
 8008314:	4b38      	ldr	r3, [pc, #224]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	0619      	lsls	r1, r3, #24
 800831a:	4b37      	ldr	r3, [pc, #220]	; (80083f8 <MX_LWIP_Init+0x290>)
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	041b      	lsls	r3, r3, #16
 8008320:	4319      	orrs	r1, r3
 8008322:	4b35      	ldr	r3, [pc, #212]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008324:	789b      	ldrb	r3, [r3, #2]
 8008326:	021b      	lsls	r3, r3, #8
 8008328:	430b      	orrs	r3, r1
 800832a:	4933      	ldr	r1, [pc, #204]	; (80083f8 <MX_LWIP_Init+0x290>)
 800832c:	78c9      	ldrb	r1, [r1, #3]
 800832e:	430b      	orrs	r3, r1
 8008330:	0a1b      	lsrs	r3, r3, #8
 8008332:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8008336:	431a      	orrs	r2, r3
 8008338:	4b2f      	ldr	r3, [pc, #188]	; (80083f8 <MX_LWIP_Init+0x290>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	0619      	lsls	r1, r3, #24
 800833e:	4b2e      	ldr	r3, [pc, #184]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008340:	785b      	ldrb	r3, [r3, #1]
 8008342:	041b      	lsls	r3, r3, #16
 8008344:	4319      	orrs	r1, r3
 8008346:	4b2c      	ldr	r3, [pc, #176]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008348:	789b      	ldrb	r3, [r3, #2]
 800834a:	021b      	lsls	r3, r3, #8
 800834c:	430b      	orrs	r3, r1
 800834e:	492a      	ldr	r1, [pc, #168]	; (80083f8 <MX_LWIP_Init+0x290>)
 8008350:	78c9      	ldrb	r1, [r1, #3]
 8008352:	430b      	orrs	r3, r1
 8008354:	0e1b      	lsrs	r3, r3, #24
 8008356:	4313      	orrs	r3, r2
 8008358:	4a2a      	ldr	r2, [pc, #168]	; (8008404 <MX_LWIP_Init+0x29c>)
 800835a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800835c:	4b2a      	ldr	r3, [pc, #168]	; (8008408 <MX_LWIP_Init+0x2a0>)
 800835e:	9302      	str	r3, [sp, #8]
 8008360:	4b2a      	ldr	r3, [pc, #168]	; (800840c <MX_LWIP_Init+0x2a4>)
 8008362:	9301      	str	r3, [sp, #4]
 8008364:	2300      	movs	r3, #0
 8008366:	9300      	str	r3, [sp, #0]
 8008368:	4b26      	ldr	r3, [pc, #152]	; (8008404 <MX_LWIP_Init+0x29c>)
 800836a:	4a25      	ldr	r2, [pc, #148]	; (8008400 <MX_LWIP_Init+0x298>)
 800836c:	4923      	ldr	r1, [pc, #140]	; (80083fc <MX_LWIP_Init+0x294>)
 800836e:	4828      	ldr	r0, [pc, #160]	; (8008410 <MX_LWIP_Init+0x2a8>)
 8008370:	f008 faf8 	bl	8010964 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8008374:	4826      	ldr	r0, [pc, #152]	; (8008410 <MX_LWIP_Init+0x2a8>)
 8008376:	f008 fca7 	bl	8010cc8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800837a:	4b25      	ldr	r3, [pc, #148]	; (8008410 <MX_LWIP_Init+0x2a8>)
 800837c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008380:	089b      	lsrs	r3, r3, #2
 8008382:	f003 0301 	and.w	r3, r3, #1
 8008386:	b2db      	uxtb	r3, r3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800838c:	4820      	ldr	r0, [pc, #128]	; (8008410 <MX_LWIP_Init+0x2a8>)
 800838e:	f008 fcab 	bl	8010ce8 <netif_set_up>
 8008392:	e002      	b.n	800839a <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8008394:	481e      	ldr	r0, [pc, #120]	; (8008410 <MX_LWIP_Init+0x2a8>)
 8008396:	f008 fd13 	bl	8010dc0 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800839a:	491e      	ldr	r1, [pc, #120]	; (8008414 <MX_LWIP_Init+0x2ac>)
 800839c:	481c      	ldr	r0, [pc, #112]	; (8008410 <MX_LWIP_Init+0x2a8>)
 800839e:	f008 fda5 	bl	8010eec <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 80083a2:	2300      	movs	r3, #0
 80083a4:	623b      	str	r3, [r7, #32]
 80083a6:	2300      	movs	r3, #0
 80083a8:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80083aa:	f107 0320 	add.w	r3, r7, #32
 80083ae:	2101      	movs	r1, #1
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fd97 	bl	8008ee4 <osSemaphoreCreate>
 80083b6:	4603      	mov	r3, r0
 80083b8:	4a17      	ldr	r2, [pc, #92]	; (8008418 <MX_LWIP_Init+0x2b0>)
 80083ba:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 80083bc:	4b17      	ldr	r3, [pc, #92]	; (800841c <MX_LWIP_Init+0x2b4>)
 80083be:	4a14      	ldr	r2, [pc, #80]	; (8008410 <MX_LWIP_Init+0x2a8>)
 80083c0:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80083c2:	4b15      	ldr	r3, [pc, #84]	; (8008418 <MX_LWIP_Init+0x2b0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a15      	ldr	r2, [pc, #84]	; (800841c <MX_LWIP_Init+0x2b4>)
 80083c8:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80083ca:	4b15      	ldr	r3, [pc, #84]	; (8008420 <MX_LWIP_Init+0x2b8>)
 80083cc:	1d3c      	adds	r4, r7, #4
 80083ce:	461d      	mov	r5, r3
 80083d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80083d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80083d4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80083d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80083dc:	1d3b      	adds	r3, r7, #4
 80083de:	490f      	ldr	r1, [pc, #60]	; (800841c <MX_LWIP_Init+0x2b4>)
 80083e0:	4618      	mov	r0, r3
 80083e2:	f000 fc82 	bl	8008cea <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80083e6:	bf00      	nop
 80083e8:	3728      	adds	r7, #40	; 0x28
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bdb0      	pop	{r4, r5, r7, pc}
 80083ee:	bf00      	nop
 80083f0:	20006f70 	.word	0x20006f70
 80083f4:	20006f6c 	.word	0x20006f6c
 80083f8:	20006f30 	.word	0x20006f30
 80083fc:	20006f68 	.word	0x20006f68
 8008400:	20006f74 	.word	0x20006f74
 8008404:	20006f78 	.word	0x20006f78
 8008408:	0800fd6d 	.word	0x0800fd6d
 800840c:	08008a79 	.word	0x08008a79
 8008410:	20006f34 	.word	0x20006f34
 8008414:	08008b5d 	.word	0x08008b5d
 8008418:	2000090c 	.word	0x2000090c
 800841c:	20006f28 	.word	0x20006f28
 8008420:	0801e228 	.word	0x0801e228

08008424 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b08e      	sub	sp, #56	; 0x38
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800842c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008430:	2200      	movs	r2, #0
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	605a      	str	r2, [r3, #4]
 8008436:	609a      	str	r2, [r3, #8]
 8008438:	60da      	str	r2, [r3, #12]
 800843a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a52      	ldr	r2, [pc, #328]	; (800858c <HAL_ETH_MspInit+0x168>)
 8008442:	4293      	cmp	r3, r2
 8008444:	f040 809e 	bne.w	8008584 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8008448:	4b51      	ldr	r3, [pc, #324]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800844a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800844c:	4a50      	ldr	r2, [pc, #320]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800844e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008452:	6313      	str	r3, [r2, #48]	; 0x30
 8008454:	4b4e      	ldr	r3, [pc, #312]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800845c:	623b      	str	r3, [r7, #32]
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	4b4b      	ldr	r3, [pc, #300]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008464:	4a4a      	ldr	r2, [pc, #296]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008466:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800846a:	6313      	str	r3, [r2, #48]	; 0x30
 800846c:	4b48      	ldr	r3, [pc, #288]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800846e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008470:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008474:	61fb      	str	r3, [r7, #28]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4b45      	ldr	r3, [pc, #276]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800847a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847c:	4a44      	ldr	r2, [pc, #272]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800847e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008482:	6313      	str	r3, [r2, #48]	; 0x30
 8008484:	4b42      	ldr	r3, [pc, #264]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800848c:	61bb      	str	r3, [r7, #24]
 800848e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008490:	4b3f      	ldr	r3, [pc, #252]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008494:	4a3e      	ldr	r2, [pc, #248]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 8008496:	f043 0304 	orr.w	r3, r3, #4
 800849a:	6313      	str	r3, [r2, #48]	; 0x30
 800849c:	4b3c      	ldr	r3, [pc, #240]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 800849e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	617b      	str	r3, [r7, #20]
 80084a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80084a8:	4b39      	ldr	r3, [pc, #228]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ac:	4a38      	ldr	r2, [pc, #224]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084ae:	f043 0301 	orr.w	r3, r3, #1
 80084b2:	6313      	str	r3, [r2, #48]	; 0x30
 80084b4:	4b36      	ldr	r3, [pc, #216]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	613b      	str	r3, [r7, #16]
 80084be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80084c0:	4b33      	ldr	r3, [pc, #204]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	4a32      	ldr	r2, [pc, #200]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084c6:	f043 0302 	orr.w	r3, r3, #2
 80084ca:	6313      	str	r3, [r2, #48]	; 0x30
 80084cc:	4b30      	ldr	r3, [pc, #192]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80084d8:	4b2d      	ldr	r3, [pc, #180]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084dc:	4a2c      	ldr	r2, [pc, #176]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084e2:	6313      	str	r3, [r2, #48]	; 0x30
 80084e4:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <HAL_ETH_MspInit+0x16c>)
 80084e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	60bb      	str	r3, [r7, #8]
 80084ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMI_IMDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80084f0:	2332      	movs	r3, #50	; 0x32
 80084f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084f4:	2302      	movs	r3, #2
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084f8:	2300      	movs	r3, #0
 80084fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084fc:	2303      	movs	r3, #3
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008500:	230b      	movs	r3, #11
 8008502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008508:	4619      	mov	r1, r3
 800850a:	4822      	ldr	r0, [pc, #136]	; (8008594 <HAL_ETH_MspInit+0x170>)
 800850c:	f7fc f956 	bl	80047bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8008510:	2386      	movs	r3, #134	; 0x86
 8008512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008514:	2302      	movs	r3, #2
 8008516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008518:	2300      	movs	r3, #0
 800851a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800851c:	2303      	movs	r3, #3
 800851e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008520:	230b      	movs	r3, #11
 8008522:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008528:	4619      	mov	r1, r3
 800852a:	481b      	ldr	r0, [pc, #108]	; (8008598 <HAL_ETH_MspInit+0x174>)
 800852c:	f7fc f946 	bl	80047bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8008530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008536:	2302      	movs	r3, #2
 8008538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800853a:	2300      	movs	r3, #0
 800853c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800853e:	2303      	movs	r3, #3
 8008540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008542:	230b      	movs	r3, #11
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8008546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800854a:	4619      	mov	r1, r3
 800854c:	4813      	ldr	r0, [pc, #76]	; (800859c <HAL_ETH_MspInit+0x178>)
 800854e:	f7fc f935 	bl	80047bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXDO_Pin;
 8008552:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008558:	2302      	movs	r3, #2
 800855a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800855c:	2300      	movs	r3, #0
 800855e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008560:	2303      	movs	r3, #3
 8008562:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8008564:	230b      	movs	r3, #11
 8008566:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8008568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800856c:	4619      	mov	r1, r3
 800856e:	480c      	ldr	r0, [pc, #48]	; (80085a0 <HAL_ETH_MspInit+0x17c>)
 8008570:	f7fc f924 	bl	80047bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008574:	2200      	movs	r2, #0
 8008576:	2105      	movs	r1, #5
 8008578:	203d      	movs	r0, #61	; 0x3d
 800857a:	f7fa fbf5 	bl	8002d68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800857e:	203d      	movs	r0, #61	; 0x3d
 8008580:	f7fa fc0e 	bl	8002da0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008584:	bf00      	nop
 8008586:	3738      	adds	r7, #56	; 0x38
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}
 800858c:	40028000 	.word	0x40028000
 8008590:	40023800 	.word	0x40023800
 8008594:	40020800 	.word	0x40020800
 8008598:	40020000 	.word	0x40020000
 800859c:	40020400 	.word	0x40020400
 80085a0:	40021800 	.word	0x40021800

080085a4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80085ac:	4b04      	ldr	r3, [pc, #16]	; (80085c0 <HAL_ETH_RxCpltCallback+0x1c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	4618      	mov	r0, r3
 80085b2:	f000 fd17 	bl	8008fe4 <osSemaphoreRelease>
}
 80085b6:	bf00      	nop
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	20000910 	.word	0x20000910

080085c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80085c4:	b5b0      	push	{r4, r5, r7, lr}
 80085c6:	b090      	sub	sp, #64	; 0x40
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80085cc:	2300      	movs	r3, #0
 80085ce:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80085d0:	4b60      	ldr	r3, [pc, #384]	; (8008754 <low_level_init+0x190>)
 80085d2:	4a61      	ldr	r2, [pc, #388]	; (8008758 <low_level_init+0x194>)
 80085d4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80085d6:	4b5f      	ldr	r3, [pc, #380]	; (8008754 <low_level_init+0x190>)
 80085d8:	2201      	movs	r2, #1
 80085da:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 80085dc:	4b5d      	ldr	r3, [pc, #372]	; (8008754 <low_level_init+0x190>)
 80085de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085e2:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80085e4:	4b5b      	ldr	r3, [pc, #364]	; (8008754 <low_level_init+0x190>)
 80085e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085ea:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80085ec:	4b59      	ldr	r3, [pc, #356]	; (8008754 <low_level_init+0x190>)
 80085ee:	2200      	movs	r2, #0
 80085f0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80085f2:	2300      	movs	r3, #0
 80085f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 80085f8:	2380      	movs	r3, #128	; 0x80
 80085fa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 80085fe:	23e1      	movs	r3, #225	; 0xe1
 8008600:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8008604:	2300      	movs	r3, #0
 8008606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8008610:	2300      	movs	r3, #0
 8008612:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8008616:	4a4f      	ldr	r2, [pc, #316]	; (8008754 <low_level_init+0x190>)
 8008618:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800861c:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800861e:	4b4d      	ldr	r3, [pc, #308]	; (8008754 <low_level_init+0x190>)
 8008620:	2201      	movs	r2, #1
 8008622:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8008624:	4b4b      	ldr	r3, [pc, #300]	; (8008754 <low_level_init+0x190>)
 8008626:	2200      	movs	r2, #0
 8008628:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800862a:	4b4a      	ldr	r3, [pc, #296]	; (8008754 <low_level_init+0x190>)
 800862c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8008630:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8008632:	4848      	ldr	r0, [pc, #288]	; (8008754 <low_level_init+0x190>)
 8008634:	f7fa ff3e 	bl	80034b4 <HAL_ETH_Init>
 8008638:	4603      	mov	r3, r0
 800863a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800863e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008642:	2b00      	cmp	r3, #0
 8008644:	d108      	bne.n	8008658 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800864c:	f043 0304 	orr.w	r3, r3, #4
 8008650:	b2da      	uxtb	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8008658:	2304      	movs	r3, #4
 800865a:	4a40      	ldr	r2, [pc, #256]	; (800875c <low_level_init+0x198>)
 800865c:	4940      	ldr	r1, [pc, #256]	; (8008760 <low_level_init+0x19c>)
 800865e:	483d      	ldr	r0, [pc, #244]	; (8008754 <low_level_init+0x190>)
 8008660:	f7fb f8c2 	bl	80037e8 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8008664:	2304      	movs	r3, #4
 8008666:	4a3f      	ldr	r2, [pc, #252]	; (8008764 <low_level_init+0x1a0>)
 8008668:	493f      	ldr	r1, [pc, #252]	; (8008768 <low_level_init+0x1a4>)
 800866a:	483a      	ldr	r0, [pc, #232]	; (8008754 <low_level_init+0x190>)
 800866c:	f7fb f925 	bl	80038ba <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2206      	movs	r2, #6
 8008674:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008678:	4b36      	ldr	r3, [pc, #216]	; (8008754 <low_level_init+0x190>)
 800867a:	695b      	ldr	r3, [r3, #20]
 800867c:	781a      	ldrb	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008684:	4b33      	ldr	r3, [pc, #204]	; (8008754 <low_level_init+0x190>)
 8008686:	695b      	ldr	r3, [r3, #20]
 8008688:	785a      	ldrb	r2, [r3, #1]
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8008690:	4b30      	ldr	r3, [pc, #192]	; (8008754 <low_level_init+0x190>)
 8008692:	695b      	ldr	r3, [r3, #20]
 8008694:	789a      	ldrb	r2, [r3, #2]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800869c:	4b2d      	ldr	r3, [pc, #180]	; (8008754 <low_level_init+0x190>)
 800869e:	695b      	ldr	r3, [r3, #20]
 80086a0:	78da      	ldrb	r2, [r3, #3]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80086a8:	4b2a      	ldr	r3, [pc, #168]	; (8008754 <low_level_init+0x190>)
 80086aa:	695b      	ldr	r3, [r3, #20]
 80086ac:	791a      	ldrb	r2, [r3, #4]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80086b4:	4b27      	ldr	r3, [pc, #156]	; (8008754 <low_level_init+0x190>)
 80086b6:	695b      	ldr	r3, [r3, #20]
 80086b8:	795a      	ldrb	r2, [r3, #5]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80086c6:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086ce:	f043 030a 	orr.w	r3, r3, #10
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80086da:	2300      	movs	r3, #0
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086de:	2300      	movs	r3, #0
 80086e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80086e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086e6:	2101      	movs	r1, #1
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fbfb 	bl	8008ee4 <osSemaphoreCreate>
 80086ee:	4603      	mov	r3, r0
 80086f0:	4a1e      	ldr	r2, [pc, #120]	; (800876c <low_level_init+0x1a8>)
 80086f2:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 80086f4:	4b1e      	ldr	r3, [pc, #120]	; (8008770 <low_level_init+0x1ac>)
 80086f6:	f107 040c 	add.w	r4, r7, #12
 80086fa:	461d      	mov	r5, r3
 80086fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008700:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008704:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8008708:	f107 030c 	add.w	r3, r7, #12
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	4618      	mov	r0, r3
 8008710:	f000 faeb 	bl	8008cea <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8008714:	480f      	ldr	r0, [pc, #60]	; (8008754 <low_level_init+0x190>)
 8008716:	f7fb fbf8 	bl	8003f0a <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800871a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800871e:	461a      	mov	r2, r3
 8008720:	211d      	movs	r1, #29
 8008722:	480c      	ldr	r0, [pc, #48]	; (8008754 <low_level_init+0x190>)
 8008724:	f7fb fb23 	bl	8003d6e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8008728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872a:	f043 030b 	orr.w	r3, r3, #11
 800872e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8008730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008732:	461a      	mov	r2, r3
 8008734:	211d      	movs	r1, #29
 8008736:	4807      	ldr	r0, [pc, #28]	; (8008754 <low_level_init+0x190>)
 8008738:	f7fb fb81 	bl	8003e3e <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800873c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008740:	461a      	mov	r2, r3
 8008742:	211d      	movs	r1, #29
 8008744:	4803      	ldr	r0, [pc, #12]	; (8008754 <low_level_init+0x190>)
 8008746:	f7fb fb12 	bl	8003d6e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800874a:	bf00      	nop
 800874c:	3740      	adds	r7, #64	; 0x40
 800874e:	46bd      	mov	sp, r7
 8008750:	bdb0      	pop	{r4, r5, r7, pc}
 8008752:	bf00      	nop
 8008754:	2000884c 	.word	0x2000884c
 8008758:	40028000 	.word	0x40028000
 800875c:	20008894 	.word	0x20008894
 8008760:	20006f7c 	.word	0x20006f7c
 8008764:	20006ffc 	.word	0x20006ffc
 8008768:	200087cc 	.word	0x200087cc
 800876c:	20000910 	.word	0x20000910
 8008770:	0801e24c 	.word	0x0801e24c

08008774 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b08a      	sub	sp, #40	; 0x28
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
 800877c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800877e:	4b4b      	ldr	r3, [pc, #300]	; (80088ac <low_level_output+0x138>)
 8008780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8008786:	2300      	movs	r3, #0
 8008788:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800878a:	2300      	movs	r3, #0
 800878c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8008792:	2300      	movs	r3, #0
 8008794:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8008796:	4b45      	ldr	r3, [pc, #276]	; (80088ac <low_level_output+0x138>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800879c:	2300      	movs	r3, #0
 800879e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	623b      	str	r3, [r7, #32]
 80087a4:	e05a      	b.n	800885c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	da03      	bge.n	80087b6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80087ae:	23f8      	movs	r3, #248	; 0xf8
 80087b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80087b4:	e05c      	b.n	8008870 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	895b      	ldrh	r3, [r3, #10]
 80087ba:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80087bc:	2300      	movs	r3, #0
 80087be:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80087c0:	e02f      	b.n	8008822 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	18d0      	adds	r0, r2, r3
 80087c8:	6a3b      	ldr	r3, [r7, #32]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	18d1      	adds	r1, r2, r3
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	f240 53f4 	movw	r3, #1524	; 0x5f4
 80087d6:	1a9b      	subs	r3, r3, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	f012 fe3f 	bl	801b45c <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da03      	bge.n	80087f4 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80087ec:	23f8      	movs	r3, #248	; 0xf8
 80087ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80087f2:	e03d      	b.n	8008870 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	4413      	add	r3, r2
 8008800:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8008804:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	1ad3      	subs	r3, r2, r3
 800880c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008810:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8008812:	697a      	ldr	r2, [r7, #20]
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800881c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	4413      	add	r3, r2
 8008828:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800882c:	4293      	cmp	r3, r2
 800882e:	d8c8      	bhi.n	80087c2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	18d0      	adds	r0, r2, r3
 8008836:	6a3b      	ldr	r3, [r7, #32]
 8008838:	685a      	ldr	r2, [r3, #4]
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4619      	mov	r1, r3
 8008842:	f012 fe0b 	bl	801b45c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	4413      	add	r3, r2
 800884c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800884e:	697a      	ldr	r2, [r7, #20]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4413      	add	r3, r2
 8008854:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8008856:	6a3b      	ldr	r3, [r7, #32]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	623b      	str	r3, [r7, #32]
 800885c:	6a3b      	ldr	r3, [r7, #32]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1a1      	bne.n	80087a6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8008862:	6979      	ldr	r1, [r7, #20]
 8008864:	4811      	ldr	r0, [pc, #68]	; (80088ac <low_level_output+0x138>)
 8008866:	f7fb f895 	bl	8003994 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800886a:	2300      	movs	r3, #0
 800886c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8008870:	4b0e      	ldr	r3, [pc, #56]	; (80088ac <low_level_output+0x138>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	f241 0314 	movw	r3, #4116	; 0x1014
 8008878:	4413      	add	r3, r2
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0320 	and.w	r3, r3, #32
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00d      	beq.n	80088a0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8008884:	4b09      	ldr	r3, [pc, #36]	; (80088ac <low_level_output+0x138>)
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	f241 0314 	movw	r3, #4116	; 0x1014
 800888c:	4413      	add	r3, r2
 800888e:	2220      	movs	r2, #32
 8008890:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8008892:	4b06      	ldr	r3, [pc, #24]	; (80088ac <low_level_output+0x138>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	f241 0304 	movw	r3, #4100	; 0x1004
 800889a:	4413      	add	r3, r2
 800889c:	2200      	movs	r2, #0
 800889e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80088a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	3728      	adds	r7, #40	; 0x28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	2000884c 	.word	0x2000884c

080088b0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b08c      	sub	sp, #48	; 0x30
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80088bc:	2300      	movs	r3, #0
 80088be:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80088c0:	2300      	movs	r3, #0
 80088c2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80088c8:	2300      	movs	r3, #0
 80088ca:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80088d0:	2300      	movs	r3, #0
 80088d2:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80088d4:	484f      	ldr	r0, [pc, #316]	; (8008a14 <low_level_input+0x164>)
 80088d6:	f7fb f947 	bl	8003b68 <HAL_ETH_GetReceivedFrame_IT>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <low_level_input+0x34>

    return NULL;
 80088e0:	2300      	movs	r3, #0
 80088e2:	e092      	b.n	8008a0a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 80088e4:	4b4b      	ldr	r3, [pc, #300]	; (8008a14 <low_level_input+0x164>)
 80088e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e8:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80088ea:	4b4a      	ldr	r3, [pc, #296]	; (8008a14 <low_level_input+0x164>)
 80088ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 80088f0:	89fb      	ldrh	r3, [r7, #14]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d007      	beq.n	8008906 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80088f6:	89fb      	ldrh	r3, [r7, #14]
 80088f8:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80088fc:	4619      	mov	r1, r3
 80088fe:	2000      	movs	r0, #0
 8008900:	f008 fbbe 	bl	8011080 <pbuf_alloc>
 8008904:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d04b      	beq.n	80089a4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800890c:	4b41      	ldr	r3, [pc, #260]	; (8008a14 <low_level_input+0x164>)
 800890e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008910:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8008912:	2300      	movs	r3, #0
 8008914:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	62bb      	str	r3, [r7, #40]	; 0x28
 800891a:	e040      	b.n	800899e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800891c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891e:	895b      	ldrh	r3, [r3, #10]
 8008920:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8008922:	2300      	movs	r3, #0
 8008924:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8008926:	e021      	b.n	800896c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8008928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	18d0      	adds	r0, r2, r3
 8008930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	18d1      	adds	r1, r2, r3
 8008936:	69fa      	ldr	r2, [r7, #28]
 8008938:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800893c:	1a9b      	subs	r3, r3, r2
 800893e:	461a      	mov	r2, r3
 8008940:	f012 fd8c 	bl	801b45c <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800894a:	6a3b      	ldr	r3, [r7, #32]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8008950:	69fa      	ldr	r2, [r7, #28]
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4413      	add	r3, r2
 8008956:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800895a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	1ad3      	subs	r3, r2, r3
 8008962:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008966:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8008968:	2300      	movs	r3, #0
 800896a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008976:	4293      	cmp	r3, r2
 8008978:	d8d6      	bhi.n	8008928 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800897a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	69bb      	ldr	r3, [r7, #24]
 8008980:	18d0      	adds	r0, r2, r3
 8008982:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4619      	mov	r1, r3
 800898c:	f012 fd66 	bl	801b45c <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8008990:	69fa      	ldr	r2, [r7, #28]
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	4413      	add	r3, r2
 8008996:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8008998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	62bb      	str	r3, [r7, #40]	; 0x28
 800899e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d1bb      	bne.n	800891c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80089a4:	4b1b      	ldr	r3, [pc, #108]	; (8008a14 <low_level_input+0x164>)
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
 80089ae:	e00b      	b.n	80089c8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80089b0:	6a3b      	ldr	r3, [r7, #32]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80089b8:	6a3b      	ldr	r3, [r7, #32]
 80089ba:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	68db      	ldr	r3, [r3, #12]
 80089c0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	3301      	adds	r3, #1
 80089c6:	613b      	str	r3, [r7, #16]
 80089c8:	4b12      	ldr	r3, [pc, #72]	; (8008a14 <low_level_input+0x164>)
 80089ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d3ee      	bcc.n	80089b0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 80089d2:	4b10      	ldr	r3, [pc, #64]	; (8008a14 <low_level_input+0x164>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 80089d8:	4b0e      	ldr	r3, [pc, #56]	; (8008a14 <low_level_input+0x164>)
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	f241 0314 	movw	r3, #4116	; 0x1014
 80089e0:	4413      	add	r3, r2
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d00d      	beq.n	8008a08 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 80089ec:	4b09      	ldr	r3, [pc, #36]	; (8008a14 <low_level_input+0x164>)
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	f241 0314 	movw	r3, #4116	; 0x1014
 80089f4:	4413      	add	r3, r2
 80089f6:	2280      	movs	r2, #128	; 0x80
 80089f8:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <low_level_input+0x164>)
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	f241 0308 	movw	r3, #4104	; 0x1008
 8008a02:	4413      	add	r3, r2
 8008a04:	2200      	movs	r2, #0
 8008a06:	601a      	str	r2, [r3, #0]
  }
  return p;
 8008a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3730      	adds	r7, #48	; 0x30
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	2000884c 	.word	0x2000884c

08008a18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008a24:	4b12      	ldr	r3, [pc, #72]	; (8008a70 <ethernetif_input+0x58>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f04f 31ff 	mov.w	r1, #4294967295
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f000 fa8b 	bl	8008f48 <osSemaphoreWait>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d1f5      	bne.n	8008a24 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8008a38:	480e      	ldr	r0, [pc, #56]	; (8008a74 <ethernetif_input+0x5c>)
 8008a3a:	f012 fc7d 	bl	801b338 <sys_mutex_lock>
        p = low_level_input( netif );
 8008a3e:	68f8      	ldr	r0, [r7, #12]
 8008a40:	f7ff ff36 	bl	80088b0 <low_level_input>
 8008a44:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	691b      	ldr	r3, [r3, #16]
 8008a50:	68f9      	ldr	r1, [r7, #12]
 8008a52:	68b8      	ldr	r0, [r7, #8]
 8008a54:	4798      	blx	r3
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d002      	beq.n	8008a62 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8008a5c:	68b8      	ldr	r0, [r7, #8]
 8008a5e:	f008 fe25 	bl	80116ac <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8008a62:	4804      	ldr	r0, [pc, #16]	; (8008a74 <ethernetif_input+0x5c>)
 8008a64:	f012 fc77 	bl	801b356 <sys_mutex_unlock>
      } while(p!=NULL);
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1e4      	bne.n	8008a38 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008a6e:	e7d9      	b.n	8008a24 <ethernetif_input+0xc>
 8008a70:	20000910 	.word	0x20000910
 8008a74:	2000a0a4 	.word	0x2000a0a4

08008a78 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d106      	bne.n	8008a94 <ethernetif_init+0x1c>
 8008a86:	4b0e      	ldr	r3, [pc, #56]	; (8008ac0 <ethernetif_init+0x48>)
 8008a88:	f240 2235 	movw	r2, #565	; 0x235
 8008a8c:	490d      	ldr	r1, [pc, #52]	; (8008ac4 <ethernetif_init+0x4c>)
 8008a8e:	480e      	ldr	r0, [pc, #56]	; (8008ac8 <ethernetif_init+0x50>)
 8008a90:	f013 f93c 	bl	801bd0c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2273      	movs	r2, #115	; 0x73
 8008a98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2274      	movs	r2, #116	; 0x74
 8008aa0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a09      	ldr	r2, [pc, #36]	; (8008acc <ethernetif_init+0x54>)
 8008aa8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a08      	ldr	r2, [pc, #32]	; (8008ad0 <ethernetif_init+0x58>)
 8008aae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f7ff fd87 	bl	80085c4 <low_level_init>

  return ERR_OK;
 8008ab6:	2300      	movs	r3, #0
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	3708      	adds	r7, #8
 8008abc:	46bd      	mov	sp, r7
 8008abe:	bd80      	pop	{r7, pc}
 8008ac0:	0801e268 	.word	0x0801e268
 8008ac4:	0801e284 	.word	0x0801e284
 8008ac8:	0801e294 	.word	0x0801e294
 8008acc:	080190d1 	.word	0x080190d1
 8008ad0:	08008775 	.word	0x08008775

08008ad4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008ad8:	f7f9 fa96 	bl	8002008 <HAL_GetTick>
 8008adc:	4603      	mov	r3, r0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	bd80      	pop	{r7, pc}
	...

08008ae4 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8008aec:	2300      	movs	r3, #0
 8008aee:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008af4:	f107 0308 	add.w	r3, r7, #8
 8008af8:	461a      	mov	r2, r3
 8008afa:	2101      	movs	r1, #1
 8008afc:	4816      	ldr	r0, [pc, #88]	; (8008b58 <ethernetif_set_link+0x74>)
 8008afe:	f7fb f936 	bl	8003d6e <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	f003 0304 	and.w	r3, r3, #4
 8008b08:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d108      	bne.n	8008b2c <ethernetif_set_link+0x48>
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4618      	mov	r0, r3
 8008b26:	f008 f97d 	bl	8010e24 <netif_set_link_up>
 8008b2a:	e011      	b.n	8008b50 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b34:	089b      	lsrs	r3, r3, #2
 8008b36:	f003 0301 	and.w	r3, r3, #1
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d007      	beq.n	8008b50 <ethernetif_set_link+0x6c>
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f008 f99e 	bl	8010e8c <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8008b50:	20c8      	movs	r0, #200	; 0xc8
 8008b52:	f000 f916 	bl	8008d82 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b56:	e7cd      	b.n	8008af4 <ethernetif_set_link+0x10>
 8008b58:	2000884c 	.word	0x2000884c

08008b5c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8008b64:	2300      	movs	r3, #0
 8008b66:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008b72:	089b      	lsrs	r3, r3, #2
 8008b74:	f003 0301 	and.w	r3, r3, #1
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d05d      	beq.n	8008c3a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8008b7e:	4b34      	ldr	r3, [pc, #208]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d03f      	beq.n	8008c06 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8008b86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008b8a:	2100      	movs	r1, #0
 8008b8c:	4830      	ldr	r0, [pc, #192]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008b8e:	f7fb f956 	bl	8003e3e <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8008b92:	f7f9 fa39 	bl	8002008 <HAL_GetTick>
 8008b96:	4603      	mov	r3, r0
 8008b98:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8008b9a:	f107 0308 	add.w	r3, r7, #8
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	482b      	ldr	r0, [pc, #172]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008ba4:	f7fb f8e3 	bl	8003d6e <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8008ba8:	f7f9 fa2e 	bl	8002008 <HAL_GetTick>
 8008bac:	4602      	mov	r2, r0
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	1ad3      	subs	r3, r2, r3
 8008bb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008bb6:	d828      	bhi.n	8008c0a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 0320 	and.w	r3, r3, #32
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0eb      	beq.n	8008b9a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8008bc2:	f107 0308 	add.w	r3, r7, #8
 8008bc6:	461a      	mov	r2, r3
 8008bc8:	2110      	movs	r1, #16
 8008bca:	4821      	ldr	r0, [pc, #132]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008bcc:	f7fb f8cf 	bl	8003d6e <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f003 0304 	and.w	r3, r3, #4
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d004      	beq.n	8008be4 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8008bda:	4b1d      	ldr	r3, [pc, #116]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008be0:	60da      	str	r2, [r3, #12]
 8008be2:	e002      	b.n	8008bea <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8008be4:	4b1a      	ldr	r3, [pc, #104]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8008bf4:	4b16      	ldr	r3, [pc, #88]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	609a      	str	r2, [r3, #8]
 8008bfa:	e016      	b.n	8008c2a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8008bfc:	4b14      	ldr	r3, [pc, #80]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008c02:	609a      	str	r2, [r3, #8]
 8008c04:	e011      	b.n	8008c2a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8008c06:	bf00      	nop
 8008c08:	e000      	b.n	8008c0c <ethernetif_update_config+0xb0>
          goto error;
 8008c0a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008c0c:	4b10      	ldr	r3, [pc, #64]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	08db      	lsrs	r3, r3, #3
 8008c12:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8008c14:	4b0e      	ldr	r3, [pc, #56]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	085b      	lsrs	r3, r3, #1
 8008c1a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	461a      	mov	r2, r3
 8008c22:	2100      	movs	r1, #0
 8008c24:	480a      	ldr	r0, [pc, #40]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c26:	f7fb f90a 	bl	8003e3e <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	4808      	ldr	r0, [pc, #32]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c2e:	f7fb f9cb 	bl	8003fc8 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8008c32:	4807      	ldr	r0, [pc, #28]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c34:	f7fb f969 	bl	8003f0a <HAL_ETH_Start>
 8008c38:	e002      	b.n	8008c40 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8008c3a:	4805      	ldr	r0, [pc, #20]	; (8008c50 <ethernetif_update_config+0xf4>)
 8008c3c:	f7fb f994 	bl	8003f68 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f807 	bl	8008c54 <ethernetif_notify_conn_changed>
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	2000884c 	.word	0x2000884c

08008c54 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8008c5c:	bf00      	nop
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	4603      	mov	r3, r0
 8008c70:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008c72:	2300      	movs	r3, #0
 8008c74:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008c76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008c7a:	2b84      	cmp	r3, #132	; 0x84
 8008c7c:	d005      	beq.n	8008c8a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008c7e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	4413      	add	r3, r2
 8008c86:	3303      	adds	r3, #3
 8008c88:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c9e:	f3ef 8305 	mrs	r3, IPSR
 8008ca2:	607b      	str	r3, [r7, #4]
  return(result);
 8008ca4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	bf14      	ite	ne
 8008caa:	2301      	movne	r3, #1
 8008cac:	2300      	moveq	r3, #0
 8008cae:	b2db      	uxtb	r3, r3
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008cc0:	f001 fdd2 	bl	800a868 <vTaskStartScheduler>
  
  return osOK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8008cce:	f7ff ffe3 	bl	8008c98 <inHandlerMode>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d003      	beq.n	8008ce0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8008cd8:	f001 feec 	bl	800aab4 <xTaskGetTickCountFromISR>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	e002      	b.n	8008ce6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8008ce0:	f001 fed8 	bl	800aa94 <xTaskGetTickCount>
 8008ce4:	4603      	mov	r3, r0
  }
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	bd80      	pop	{r7, pc}

08008cea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cec:	b089      	sub	sp, #36	; 0x24
 8008cee:	af04      	add	r7, sp, #16
 8008cf0:	6078      	str	r0, [r7, #4]
 8008cf2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	695b      	ldr	r3, [r3, #20]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d020      	beq.n	8008d3e <osThreadCreate+0x54>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d01c      	beq.n	8008d3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685c      	ldr	r4, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681d      	ldr	r5, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691e      	ldr	r6, [r3, #16]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f7ff ffa6 	bl	8008c68 <makeFreeRtosPriority>
 8008d1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	695b      	ldr	r3, [r3, #20]
 8008d22:	687a      	ldr	r2, [r7, #4]
 8008d24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d26:	9202      	str	r2, [sp, #8]
 8008d28:	9301      	str	r3, [sp, #4]
 8008d2a:	9100      	str	r1, [sp, #0]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	4632      	mov	r2, r6
 8008d30:	4629      	mov	r1, r5
 8008d32:	4620      	mov	r0, r4
 8008d34:	f001 fbc6 	bl	800a4c4 <xTaskCreateStatic>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	e01c      	b.n	8008d78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685c      	ldr	r4, [r3, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008d4a:	b29e      	uxth	r6, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008d52:	4618      	mov	r0, r3
 8008d54:	f7ff ff88 	bl	8008c68 <makeFreeRtosPriority>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	f107 030c 	add.w	r3, r7, #12
 8008d5e:	9301      	str	r3, [sp, #4]
 8008d60:	9200      	str	r2, [sp, #0]
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	4632      	mov	r2, r6
 8008d66:	4629      	mov	r1, r5
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f001 fc0e 	bl	800a58a <xTaskCreate>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d001      	beq.n	8008d78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008d74:	2300      	movs	r3, #0
 8008d76:	e000      	b.n	8008d7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008d78:	68fb      	ldr	r3, [r7, #12]
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3714      	adds	r7, #20
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008d82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008d82:	b580      	push	{r7, lr}
 8008d84:	b084      	sub	sp, #16
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <osDelay+0x16>
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	e000      	b.n	8008d9a <osDelay+0x18>
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fd2e 	bl	800a7fc <vTaskDelay>
  
  return osOK;
 8008da0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b082      	sub	sp, #8
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	2001      	movs	r0, #1
 8008dc2:	f000 fc92 	bl	80096ea <xQueueCreateMutexStatic>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	e003      	b.n	8008dd2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008dca:	2001      	movs	r0, #1
 8008dcc:	f000 fc75 	bl	80096ba <xQueueCreateMutex>
 8008dd0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3708      	adds	r7, #8
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d101      	bne.n	8008df4 <osMutexWait+0x18>
    return osErrorParameter;
 8008df0:	2380      	movs	r3, #128	; 0x80
 8008df2:	e03a      	b.n	8008e6a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8008df4:	2300      	movs	r3, #0
 8008df6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dfe:	d103      	bne.n	8008e08 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295
 8008e04:	60fb      	str	r3, [r7, #12]
 8008e06:	e009      	b.n	8008e1c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d006      	beq.n	8008e1c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d101      	bne.n	8008e1c <osMutexWait+0x40>
      ticks = 1;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008e1c:	f7ff ff3c 	bl	8008c98 <inHandlerMode>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d017      	beq.n	8008e56 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008e26:	f107 0308 	add.w	r3, r7, #8
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f001 f8ac 	bl	8009f8c <xQueueReceiveFromISR>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d001      	beq.n	8008e3e <osMutexWait+0x62>
      return osErrorOS;
 8008e3a:	23ff      	movs	r3, #255	; 0xff
 8008e3c:	e015      	b.n	8008e6a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d011      	beq.n	8008e68 <osMutexWait+0x8c>
 8008e44:	4b0b      	ldr	r3, [pc, #44]	; (8008e74 <osMutexWait+0x98>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
 8008e54:	e008      	b.n	8008e68 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8008e56:	68f9      	ldr	r1, [r7, #12]
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 ff83 	bl	8009d64 <xQueueSemaphoreTake>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d001      	beq.n	8008e68 <osMutexWait+0x8c>
    return osErrorOS;
 8008e64:	23ff      	movs	r3, #255	; 0xff
 8008e66:	e000      	b.n	8008e6a <osMutexWait+0x8e>
  }
  
  return osOK;
 8008e68:	2300      	movs	r3, #0
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	e000ed04 	.word	0xe000ed04

08008e78 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8008e88:	f7ff ff06 	bl	8008c98 <inHandlerMode>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d016      	beq.n	8008ec0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8008e92:	f107 0308 	add.w	r3, r7, #8
 8008e96:	4619      	mov	r1, r3
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fde7 	bl	8009a6c <xQueueGiveFromISR>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <osMutexRelease+0x30>
      return osErrorOS;
 8008ea4:	23ff      	movs	r3, #255	; 0xff
 8008ea6:	e017      	b.n	8008ed8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d013      	beq.n	8008ed6 <osMutexRelease+0x5e>
 8008eae:	4b0c      	ldr	r3, [pc, #48]	; (8008ee0 <osMutexRelease+0x68>)
 8008eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb4:	601a      	str	r2, [r3, #0]
 8008eb6:	f3bf 8f4f 	dsb	sy
 8008eba:	f3bf 8f6f 	isb	sy
 8008ebe:	e00a      	b.n	8008ed6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	2100      	movs	r1, #0
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fc2a 	bl	8009720 <xQueueGenericSend>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b01      	cmp	r3, #1
 8008ed0:	d001      	beq.n	8008ed6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8008ed2:	23ff      	movs	r3, #255	; 0xff
 8008ed4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	e000ed04 	.word	0xe000ed04

08008ee4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af02      	add	r7, sp, #8
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d00f      	beq.n	8008f16 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8008ef6:	683b      	ldr	r3, [r7, #0]
 8008ef8:	2b01      	cmp	r3, #1
 8008efa:	d10a      	bne.n	8008f12 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	2203      	movs	r2, #3
 8008f02:	9200      	str	r2, [sp, #0]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2100      	movs	r1, #0
 8008f08:	2001      	movs	r0, #1
 8008f0a:	f000 fad9 	bl	80094c0 <xQueueGenericCreateStatic>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	e016      	b.n	8008f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8008f12:	2300      	movs	r3, #0
 8008f14:	e014      	b.n	8008f40 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d110      	bne.n	8008f3e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8008f1c:	2203      	movs	r2, #3
 8008f1e:	2100      	movs	r1, #0
 8008f20:	2001      	movs	r0, #1
 8008f22:	f000 fb4f 	bl	80095c4 <xQueueGenericCreate>
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d005      	beq.n	8008f3a <osSemaphoreCreate+0x56>
 8008f2e:	2300      	movs	r3, #0
 8008f30:	2200      	movs	r2, #0
 8008f32:	2100      	movs	r1, #0
 8008f34:	68f8      	ldr	r0, [r7, #12]
 8008f36:	f000 fbf3 	bl	8009720 <xQueueGenericSend>
      return sema;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	e000      	b.n	8008f40 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8008f3e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8008f52:	2300      	movs	r3, #0
 8008f54:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d101      	bne.n	8008f60 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8008f5c:	2380      	movs	r3, #128	; 0x80
 8008f5e:	e03a      	b.n	8008fd6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8008f60:	2300      	movs	r3, #0
 8008f62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f6a:	d103      	bne.n	8008f74 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8008f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f70:	60fb      	str	r3, [r7, #12]
 8008f72:	e009      	b.n	8008f88 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d006      	beq.n	8008f88 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d101      	bne.n	8008f88 <osSemaphoreWait+0x40>
      ticks = 1;
 8008f84:	2301      	movs	r3, #1
 8008f86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8008f88:	f7ff fe86 	bl	8008c98 <inHandlerMode>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d017      	beq.n	8008fc2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008f92:	f107 0308 	add.w	r3, r7, #8
 8008f96:	461a      	mov	r2, r3
 8008f98:	2100      	movs	r1, #0
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fff6 	bl	8009f8c <xQueueReceiveFromISR>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d001      	beq.n	8008faa <osSemaphoreWait+0x62>
      return osErrorOS;
 8008fa6:	23ff      	movs	r3, #255	; 0xff
 8008fa8:	e015      	b.n	8008fd6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d011      	beq.n	8008fd4 <osSemaphoreWait+0x8c>
 8008fb0:	4b0b      	ldr	r3, [pc, #44]	; (8008fe0 <osSemaphoreWait+0x98>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
 8008fc0:	e008      	b.n	8008fd4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8008fc2:	68f9      	ldr	r1, [r7, #12]
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 fecd 	bl	8009d64 <xQueueSemaphoreTake>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d001      	beq.n	8008fd4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8008fd0:	23ff      	movs	r3, #255	; 0xff
 8008fd2:	e000      	b.n	8008fd6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8008fd4:	2300      	movs	r3, #0
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	e000ed04 	.word	0xe000ed04

08008fe4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8008ff4:	f7ff fe50 	bl	8008c98 <inHandlerMode>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d016      	beq.n	800902c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8008ffe:	f107 0308 	add.w	r3, r7, #8
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fd31 	bl	8009a6c <xQueueGiveFromISR>
 800900a:	4603      	mov	r3, r0
 800900c:	2b01      	cmp	r3, #1
 800900e:	d001      	beq.n	8009014 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009010:	23ff      	movs	r3, #255	; 0xff
 8009012:	e017      	b.n	8009044 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d013      	beq.n	8009042 <osSemaphoreRelease+0x5e>
 800901a:	4b0c      	ldr	r3, [pc, #48]	; (800904c <osSemaphoreRelease+0x68>)
 800901c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	f3bf 8f4f 	dsb	sy
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	e00a      	b.n	8009042 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800902c:	2300      	movs	r3, #0
 800902e:	2200      	movs	r2, #0
 8009030:	2100      	movs	r1, #0
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb74 	bl	8009720 <xQueueGenericSend>
 8009038:	4603      	mov	r3, r0
 800903a:	2b01      	cmp	r3, #1
 800903c:	d001      	beq.n	8009042 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800903e:	23ff      	movs	r3, #255	; 0xff
 8009040:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009042:	68fb      	ldr	r3, [r7, #12]
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	e000ed04 	.word	0xe000ed04

08009050 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b082      	sub	sp, #8
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009058:	f7ff fe1e 	bl	8008c98 <inHandlerMode>
 800905c:	4603      	mov	r3, r0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d001      	beq.n	8009066 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8009062:	2382      	movs	r3, #130	; 0x82
 8009064:	e003      	b.n	800906e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f001 f856 	bl	800a118 <vQueueDelete>

  return osOK; 
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009076:	b590      	push	{r4, r7, lr}
 8009078:	b085      	sub	sp, #20
 800907a:	af02      	add	r7, sp, #8
 800907c:	6078      	str	r0, [r7, #4]
 800907e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d011      	beq.n	80090ac <osMessageCreate+0x36>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00d      	beq.n	80090ac <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6818      	ldr	r0, [r3, #0]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6859      	ldr	r1, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	2400      	movs	r4, #0
 80090a2:	9400      	str	r4, [sp, #0]
 80090a4:	f000 fa0c 	bl	80094c0 <xQueueGenericCreateStatic>
 80090a8:	4603      	mov	r3, r0
 80090aa:	e008      	b.n	80090be <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6818      	ldr	r0, [r3, #0]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	2200      	movs	r2, #0
 80090b6:	4619      	mov	r1, r3
 80090b8:	f000 fa84 	bl	80095c4 <xQueueGenericCreate>
 80090bc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80090be:	4618      	mov	r0, r3
 80090c0:	370c      	adds	r7, #12
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd90      	pop	{r4, r7, pc}
	...

080090c8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b086      	sub	sp, #24
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d101      	bne.n	80090e6 <osMessagePut+0x1e>
    ticks = 1;
 80090e2:	2301      	movs	r3, #1
 80090e4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80090e6:	f7ff fdd7 	bl	8008c98 <inHandlerMode>
 80090ea:	4603      	mov	r3, r0
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d018      	beq.n	8009122 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80090f0:	f107 0210 	add.w	r2, r7, #16
 80090f4:	f107 0108 	add.w	r1, r7, #8
 80090f8:	2300      	movs	r3, #0
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f000 fc16 	bl	800992c <xQueueGenericSendFromISR>
 8009100:	4603      	mov	r3, r0
 8009102:	2b01      	cmp	r3, #1
 8009104:	d001      	beq.n	800910a <osMessagePut+0x42>
      return osErrorOS;
 8009106:	23ff      	movs	r3, #255	; 0xff
 8009108:	e018      	b.n	800913c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d014      	beq.n	800913a <osMessagePut+0x72>
 8009110:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <osMessagePut+0x7c>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	e00b      	b.n	800913a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009122:	f107 0108 	add.w	r1, r7, #8
 8009126:	2300      	movs	r3, #0
 8009128:	697a      	ldr	r2, [r7, #20]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 faf8 	bl	8009720 <xQueueGenericSend>
 8009130:	4603      	mov	r3, r0
 8009132:	2b01      	cmp	r3, #1
 8009134:	d001      	beq.n	800913a <osMessagePut+0x72>
      return osErrorOS;
 8009136:	23ff      	movs	r3, #255	; 0xff
 8009138:	e000      	b.n	800913c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3718      	adds	r7, #24
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	e000ed04 	.word	0xe000ed04

08009148 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8009148:	b590      	push	{r4, r7, lr}
 800914a:	b08b      	sub	sp, #44	; 0x2c
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8009158:	2300      	movs	r3, #0
 800915a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d10a      	bne.n	8009178 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009162:	2380      	movs	r3, #128	; 0x80
 8009164:	617b      	str	r3, [r7, #20]
    return event;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	461c      	mov	r4, r3
 800916a:	f107 0314 	add.w	r3, r7, #20
 800916e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009172:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009176:	e054      	b.n	8009222 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8009178:	2300      	movs	r3, #0
 800917a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800917c:	2300      	movs	r3, #0
 800917e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d103      	bne.n	8009190 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8009188:	f04f 33ff 	mov.w	r3, #4294967295
 800918c:	627b      	str	r3, [r7, #36]	; 0x24
 800918e:	e009      	b.n	80091a4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d006      	beq.n	80091a4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800919a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919c:	2b00      	cmp	r3, #0
 800919e:	d101      	bne.n	80091a4 <osMessageGet+0x5c>
      ticks = 1;
 80091a0:	2301      	movs	r3, #1
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80091a4:	f7ff fd78 	bl	8008c98 <inHandlerMode>
 80091a8:	4603      	mov	r3, r0
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d01c      	beq.n	80091e8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80091ae:	f107 0220 	add.w	r2, r7, #32
 80091b2:	f107 0314 	add.w	r3, r7, #20
 80091b6:	3304      	adds	r3, #4
 80091b8:	4619      	mov	r1, r3
 80091ba:	68b8      	ldr	r0, [r7, #8]
 80091bc:	f000 fee6 	bl	8009f8c <xQueueReceiveFromISR>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d102      	bne.n	80091cc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80091c6:	2310      	movs	r3, #16
 80091c8:	617b      	str	r3, [r7, #20]
 80091ca:	e001      	b.n	80091d0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80091d0:	6a3b      	ldr	r3, [r7, #32]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01d      	beq.n	8009212 <osMessageGet+0xca>
 80091d6:	4b15      	ldr	r3, [pc, #84]	; (800922c <osMessageGet+0xe4>)
 80091d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	f3bf 8f6f 	isb	sy
 80091e6:	e014      	b.n	8009212 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80091e8:	f107 0314 	add.w	r3, r7, #20
 80091ec:	3304      	adds	r3, #4
 80091ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091f0:	4619      	mov	r1, r3
 80091f2:	68b8      	ldr	r0, [r7, #8]
 80091f4:	f000 fcd0 	bl	8009b98 <xQueueReceive>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d102      	bne.n	8009204 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80091fe:	2310      	movs	r3, #16
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	e006      	b.n	8009212 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009206:	2b00      	cmp	r3, #0
 8009208:	d101      	bne.n	800920e <osMessageGet+0xc6>
 800920a:	2300      	movs	r3, #0
 800920c:	e000      	b.n	8009210 <osMessageGet+0xc8>
 800920e:	2340      	movs	r3, #64	; 0x40
 8009210:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	461c      	mov	r4, r3
 8009216:	f107 0314 	add.w	r3, r7, #20
 800921a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800921e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	372c      	adds	r7, #44	; 0x2c
 8009226:	46bd      	mov	sp, r7
 8009228:	bd90      	pop	{r4, r7, pc}
 800922a:	bf00      	nop
 800922c:	e000ed04 	.word	0xe000ed04

08009230 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009238:	f7ff fd2e 	bl	8008c98 <inHandlerMode>
 800923c:	4603      	mov	r3, r0
 800923e:	2b00      	cmp	r3, #0
 8009240:	d004      	beq.n	800924c <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 ff48 	bl	800a0d8 <uxQueueMessagesWaitingFromISR>
 8009248:	4603      	mov	r3, r0
 800924a:	e003      	b.n	8009254 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 ff23 	bl	800a098 <uxQueueMessagesWaiting>
 8009252:	4603      	mov	r3, r0
  }
}
 8009254:	4618      	mov	r0, r3
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}

0800925c <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b082      	sub	sp, #8
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8009264:	f7ff fd18 	bl	8008c98 <inHandlerMode>
 8009268:	4603      	mov	r3, r0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d001      	beq.n	8009272 <osMessageDelete+0x16>
    return osErrorISR;
 800926e:	2382      	movs	r3, #130	; 0x82
 8009270:	e003      	b.n	800927a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 ff50 	bl	800a118 <vQueueDelete>

  return osOK; 
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f103 0208 	add.w	r2, r3, #8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f04f 32ff 	mov.w	r2, #4294967295
 800929a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f103 0208 	add.w	r2, r3, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f103 0208 	add.w	r2, r3, #8
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	2200      	movs	r2, #0
 80092b4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092b6:	bf00      	nop
 80092b8:	370c      	adds	r7, #12
 80092ba:	46bd      	mov	sp, r7
 80092bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c0:	4770      	bx	lr

080092c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092c2:	b480      	push	{r7}
 80092c4:	b083      	sub	sp, #12
 80092c6:	af00      	add	r7, sp, #0
 80092c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092d0:	bf00      	nop
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	68fa      	ldr	r2, [r7, #12]
 80092f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	689a      	ldr	r2, [r3, #8]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	689b      	ldr	r3, [r3, #8]
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	683a      	ldr	r2, [r7, #0]
 8009306:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	687a      	ldr	r2, [r7, #4]
 800930c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	1c5a      	adds	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	601a      	str	r2, [r3, #0]
}
 8009318:	bf00      	nop
 800931a:	3714      	adds	r7, #20
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009324:	b480      	push	{r7}
 8009326:	b085      	sub	sp, #20
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800933a:	d103      	bne.n	8009344 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	60fb      	str	r3, [r7, #12]
 8009342:	e00c      	b.n	800935e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3308      	adds	r3, #8
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	e002      	b.n	8009352 <vListInsert+0x2e>
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	60fb      	str	r3, [r7, #12]
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68ba      	ldr	r2, [r7, #8]
 800935a:	429a      	cmp	r2, r3
 800935c:	d2f6      	bcs.n	800934c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	683a      	ldr	r2, [r7, #0]
 8009378:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	687a      	ldr	r2, [r7, #4]
 800937e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	1c5a      	adds	r2, r3, #1
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	601a      	str	r2, [r3, #0]
}
 800938a:	bf00      	nop
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	687a      	ldr	r2, [r7, #4]
 80093aa:	6892      	ldr	r2, [r2, #8]
 80093ac:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	687a      	ldr	r2, [r7, #4]
 80093b4:	6852      	ldr	r2, [r2, #4]
 80093b6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	687a      	ldr	r2, [r7, #4]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d103      	bne.n	80093ca <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	689a      	ldr	r2, [r3, #8]
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2200      	movs	r2, #0
 80093ce:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	1e5a      	subs	r2, r3, #1
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3714      	adds	r7, #20
 80093e2:	46bd      	mov	sp, r7
 80093e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e8:	4770      	bx	lr
	...

080093ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b084      	sub	sp, #16
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10c      	bne.n	800941a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009404:	b672      	cpsid	i
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	b662      	cpsie	i
 8009414:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009416:	bf00      	nop
 8009418:	e7fe      	b.n	8009418 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800941a:	f002 fd17 	bl	800be4c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009426:	68f9      	ldr	r1, [r7, #12]
 8009428:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800942a:	fb01 f303 	mul.w	r3, r1, r3
 800942e:	441a      	add	r2, r3
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944a:	3b01      	subs	r3, #1
 800944c:	68f9      	ldr	r1, [r7, #12]
 800944e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009450:	fb01 f303 	mul.w	r3, r1, r3
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	22ff      	movs	r2, #255	; 0xff
 800945e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	22ff      	movs	r2, #255	; 0xff
 8009466:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d114      	bne.n	800949a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d01a      	beq.n	80094ae <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	3310      	adds	r3, #16
 800947c:	4618      	mov	r0, r3
 800947e:	f001 fc97 	bl	800adb0 <xTaskRemoveFromEventList>
 8009482:	4603      	mov	r3, r0
 8009484:	2b00      	cmp	r3, #0
 8009486:	d012      	beq.n	80094ae <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009488:	4b0c      	ldr	r3, [pc, #48]	; (80094bc <xQueueGenericReset+0xd0>)
 800948a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800948e:	601a      	str	r2, [r3, #0]
 8009490:	f3bf 8f4f 	dsb	sy
 8009494:	f3bf 8f6f 	isb	sy
 8009498:	e009      	b.n	80094ae <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3310      	adds	r3, #16
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff feef 	bl	8009282 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3324      	adds	r3, #36	; 0x24
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7ff feea 	bl	8009282 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094ae:	f002 fd01 	bl	800beb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094b2:	2301      	movs	r3, #1
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	e000ed04 	.word	0xe000ed04

080094c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b08e      	sub	sp, #56	; 0x38
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d10c      	bne.n	80094ee <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80094d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d8:	b672      	cpsid	i
 80094da:	f383 8811 	msr	BASEPRI, r3
 80094de:	f3bf 8f6f 	isb	sy
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	b662      	cpsie	i
 80094e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80094ea:	bf00      	nop
 80094ec:	e7fe      	b.n	80094ec <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d10c      	bne.n	800950e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80094f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f8:	b672      	cpsid	i
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	b662      	cpsie	i
 8009508:	627b      	str	r3, [r7, #36]	; 0x24
}
 800950a:	bf00      	nop
 800950c:	e7fe      	b.n	800950c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d002      	beq.n	800951a <xQueueGenericCreateStatic+0x5a>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d001      	beq.n	800951e <xQueueGenericCreateStatic+0x5e>
 800951a:	2301      	movs	r3, #1
 800951c:	e000      	b.n	8009520 <xQueueGenericCreateStatic+0x60>
 800951e:	2300      	movs	r3, #0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d10c      	bne.n	800953e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8009524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009528:	b672      	cpsid	i
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	b662      	cpsie	i
 8009538:	623b      	str	r3, [r7, #32]
}
 800953a:	bf00      	nop
 800953c:	e7fe      	b.n	800953c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d102      	bne.n	800954a <xQueueGenericCreateStatic+0x8a>
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <xQueueGenericCreateStatic+0x8e>
 800954a:	2301      	movs	r3, #1
 800954c:	e000      	b.n	8009550 <xQueueGenericCreateStatic+0x90>
 800954e:	2300      	movs	r3, #0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d10c      	bne.n	800956e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8009554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009558:	b672      	cpsid	i
 800955a:	f383 8811 	msr	BASEPRI, r3
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f3bf 8f4f 	dsb	sy
 8009566:	b662      	cpsie	i
 8009568:	61fb      	str	r3, [r7, #28]
}
 800956a:	bf00      	nop
 800956c:	e7fe      	b.n	800956c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800956e:	2348      	movs	r3, #72	; 0x48
 8009570:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	2b48      	cmp	r3, #72	; 0x48
 8009576:	d00c      	beq.n	8009592 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	b672      	cpsid	i
 800957e:	f383 8811 	msr	BASEPRI, r3
 8009582:	f3bf 8f6f 	isb	sy
 8009586:	f3bf 8f4f 	dsb	sy
 800958a:	b662      	cpsie	i
 800958c:	61bb      	str	r3, [r7, #24]
}
 800958e:	bf00      	nop
 8009590:	e7fe      	b.n	8009590 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00d      	beq.n	80095ba <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800959e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	4613      	mov	r3, r2
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	68b9      	ldr	r1, [r7, #8]
 80095b4:	68f8      	ldr	r0, [r7, #12]
 80095b6:	f000 f847 	bl	8009648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095bc:	4618      	mov	r0, r3
 80095be:	3730      	adds	r7, #48	; 0x30
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b08a      	sub	sp, #40	; 0x28
 80095c8:	af02      	add	r7, sp, #8
 80095ca:	60f8      	str	r0, [r7, #12]
 80095cc:	60b9      	str	r1, [r7, #8]
 80095ce:	4613      	mov	r3, r2
 80095d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d10c      	bne.n	80095f2 <xQueueGenericCreate+0x2e>
	__asm volatile
 80095d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095dc:	b672      	cpsid	i
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	b662      	cpsie	i
 80095ec:	613b      	str	r3, [r7, #16]
}
 80095ee:	bf00      	nop
 80095f0:	e7fe      	b.n	80095f0 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d102      	bne.n	80095fe <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
 80095fc:	e004      	b.n	8009608 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	fb02 f303 	mul.w	r3, r2, r3
 8009606:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009608:	69fb      	ldr	r3, [r7, #28]
 800960a:	3348      	adds	r3, #72	; 0x48
 800960c:	4618      	mov	r0, r3
 800960e:	f002 fd49 	bl	800c0a4 <pvPortMalloc>
 8009612:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009614:	69bb      	ldr	r3, [r7, #24]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d011      	beq.n	800963e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	3348      	adds	r3, #72	; 0x48
 8009622:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	2200      	movs	r2, #0
 8009628:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800962c:	79fa      	ldrb	r2, [r7, #7]
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	9300      	str	r3, [sp, #0]
 8009632:	4613      	mov	r3, r2
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	68b9      	ldr	r1, [r7, #8]
 8009638:	68f8      	ldr	r0, [r7, #12]
 800963a:	f000 f805 	bl	8009648 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800963e:	69bb      	ldr	r3, [r7, #24]
	}
 8009640:	4618      	mov	r0, r3
 8009642:	3720      	adds	r7, #32
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	60f8      	str	r0, [r7, #12]
 8009650:	60b9      	str	r1, [r7, #8]
 8009652:	607a      	str	r2, [r7, #4]
 8009654:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d103      	bne.n	8009664 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	e002      	b.n	800966a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009676:	2101      	movs	r1, #1
 8009678:	69b8      	ldr	r0, [r7, #24]
 800967a:	f7ff feb7 	bl	80093ec <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800967e:	bf00      	nop
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009686:	b580      	push	{r7, lr}
 8009688:	b082      	sub	sp, #8
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d00e      	beq.n	80096b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	2200      	movs	r2, #0
 8009698:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	2200      	movs	r2, #0
 800969e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80096a6:	2300      	movs	r3, #0
 80096a8:	2200      	movs	r2, #0
 80096aa:	2100      	movs	r1, #0
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f837 	bl	8009720 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80096b2:	bf00      	nop
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b086      	sub	sp, #24
 80096be:	af00      	add	r7, sp, #0
 80096c0:	4603      	mov	r3, r0
 80096c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80096c4:	2301      	movs	r3, #1
 80096c6:	617b      	str	r3, [r7, #20]
 80096c8:	2300      	movs	r3, #0
 80096ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80096cc:	79fb      	ldrb	r3, [r7, #7]
 80096ce:	461a      	mov	r2, r3
 80096d0:	6939      	ldr	r1, [r7, #16]
 80096d2:	6978      	ldr	r0, [r7, #20]
 80096d4:	f7ff ff76 	bl	80095c4 <xQueueGenericCreate>
 80096d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff ffd3 	bl	8009686 <prvInitialiseMutex>

		return xNewQueue;
 80096e0:	68fb      	ldr	r3, [r7, #12]
	}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3718      	adds	r7, #24
 80096e6:	46bd      	mov	sp, r7
 80096e8:	bd80      	pop	{r7, pc}

080096ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b088      	sub	sp, #32
 80096ee:	af02      	add	r7, sp, #8
 80096f0:	4603      	mov	r3, r0
 80096f2:	6039      	str	r1, [r7, #0]
 80096f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80096f6:	2301      	movs	r3, #1
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	2300      	movs	r3, #0
 80096fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	9300      	str	r3, [sp, #0]
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	2200      	movs	r2, #0
 8009706:	6939      	ldr	r1, [r7, #16]
 8009708:	6978      	ldr	r0, [r7, #20]
 800970a:	f7ff fed9 	bl	80094c0 <xQueueGenericCreateStatic>
 800970e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff ffb8 	bl	8009686 <prvInitialiseMutex>

		return xNewQueue;
 8009716:	68fb      	ldr	r3, [r7, #12]
	}
 8009718:	4618      	mov	r0, r3
 800971a:	3718      	adds	r7, #24
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b08e      	sub	sp, #56	; 0x38
 8009724:	af00      	add	r7, sp, #0
 8009726:	60f8      	str	r0, [r7, #12]
 8009728:	60b9      	str	r1, [r7, #8]
 800972a:	607a      	str	r2, [r7, #4]
 800972c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800972e:	2300      	movs	r3, #0
 8009730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10c      	bne.n	8009756 <xQueueGenericSend+0x36>
	__asm volatile
 800973c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009740:	b672      	cpsid	i
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	b662      	cpsie	i
 8009750:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009752:	bf00      	nop
 8009754:	e7fe      	b.n	8009754 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d103      	bne.n	8009764 <xQueueGenericSend+0x44>
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009760:	2b00      	cmp	r3, #0
 8009762:	d101      	bne.n	8009768 <xQueueGenericSend+0x48>
 8009764:	2301      	movs	r3, #1
 8009766:	e000      	b.n	800976a <xQueueGenericSend+0x4a>
 8009768:	2300      	movs	r3, #0
 800976a:	2b00      	cmp	r3, #0
 800976c:	d10c      	bne.n	8009788 <xQueueGenericSend+0x68>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	b672      	cpsid	i
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	b662      	cpsie	i
 8009782:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	2b02      	cmp	r3, #2
 800978c:	d103      	bne.n	8009796 <xQueueGenericSend+0x76>
 800978e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009792:	2b01      	cmp	r3, #1
 8009794:	d101      	bne.n	800979a <xQueueGenericSend+0x7a>
 8009796:	2301      	movs	r3, #1
 8009798:	e000      	b.n	800979c <xQueueGenericSend+0x7c>
 800979a:	2300      	movs	r3, #0
 800979c:	2b00      	cmp	r3, #0
 800979e:	d10c      	bne.n	80097ba <xQueueGenericSend+0x9a>
	__asm volatile
 80097a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a4:	b672      	cpsid	i
 80097a6:	f383 8811 	msr	BASEPRI, r3
 80097aa:	f3bf 8f6f 	isb	sy
 80097ae:	f3bf 8f4f 	dsb	sy
 80097b2:	b662      	cpsie	i
 80097b4:	623b      	str	r3, [r7, #32]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80097ba:	f001 fcbd 	bl	800b138 <xTaskGetSchedulerState>
 80097be:	4603      	mov	r3, r0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d102      	bne.n	80097ca <xQueueGenericSend+0xaa>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d101      	bne.n	80097ce <xQueueGenericSend+0xae>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e000      	b.n	80097d0 <xQueueGenericSend+0xb0>
 80097ce:	2300      	movs	r3, #0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10c      	bne.n	80097ee <xQueueGenericSend+0xce>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	b672      	cpsid	i
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	b662      	cpsie	i
 80097e8:	61fb      	str	r3, [r7, #28]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80097ee:	f002 fb2d 	bl	800be4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097fa:	429a      	cmp	r2, r3
 80097fc:	d302      	bcc.n	8009804 <xQueueGenericSend+0xe4>
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2b02      	cmp	r3, #2
 8009802:	d129      	bne.n	8009858 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009804:	683a      	ldr	r2, [r7, #0]
 8009806:	68b9      	ldr	r1, [r7, #8]
 8009808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800980a:	f000 fcc2 	bl	800a192 <prvCopyDataToQueue>
 800980e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009814:	2b00      	cmp	r3, #0
 8009816:	d010      	beq.n	800983a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981a:	3324      	adds	r3, #36	; 0x24
 800981c:	4618      	mov	r0, r3
 800981e:	f001 fac7 	bl	800adb0 <xTaskRemoveFromEventList>
 8009822:	4603      	mov	r3, r0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d013      	beq.n	8009850 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009828:	4b3f      	ldr	r3, [pc, #252]	; (8009928 <xQueueGenericSend+0x208>)
 800982a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	e00a      	b.n	8009850 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	2b00      	cmp	r3, #0
 800983e:	d007      	beq.n	8009850 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009840:	4b39      	ldr	r3, [pc, #228]	; (8009928 <xQueueGenericSend+0x208>)
 8009842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009846:	601a      	str	r2, [r3, #0]
 8009848:	f3bf 8f4f 	dsb	sy
 800984c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009850:	f002 fb30 	bl	800beb4 <vPortExitCritical>
				return pdPASS;
 8009854:	2301      	movs	r3, #1
 8009856:	e063      	b.n	8009920 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d103      	bne.n	8009866 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800985e:	f002 fb29 	bl	800beb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009862:	2300      	movs	r3, #0
 8009864:	e05c      	b.n	8009920 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009866:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009868:	2b00      	cmp	r3, #0
 800986a:	d106      	bne.n	800987a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800986c:	f107 0314 	add.w	r3, r7, #20
 8009870:	4618      	mov	r0, r3
 8009872:	f001 fb01 	bl	800ae78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009876:	2301      	movs	r3, #1
 8009878:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800987a:	f002 fb1b 	bl	800beb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800987e:	f001 f85d 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009882:	f002 fae3 	bl	800be4c <vPortEnterCritical>
 8009886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009888:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800988c:	b25b      	sxtb	r3, r3
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009892:	d103      	bne.n	800989c <xQueueGenericSend+0x17c>
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2200      	movs	r2, #0
 8009898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800989c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098a2:	b25b      	sxtb	r3, r3
 80098a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098a8:	d103      	bne.n	80098b2 <xQueueGenericSend+0x192>
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098b2:	f002 faff 	bl	800beb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098b6:	1d3a      	adds	r2, r7, #4
 80098b8:	f107 0314 	add.w	r3, r7, #20
 80098bc:	4611      	mov	r1, r2
 80098be:	4618      	mov	r0, r3
 80098c0:	f001 faf0 	bl	800aea4 <xTaskCheckForTimeOut>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d124      	bne.n	8009914 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80098ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098cc:	f000 fd59 	bl	800a382 <prvIsQueueFull>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d018      	beq.n	8009908 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80098d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d8:	3310      	adds	r3, #16
 80098da:	687a      	ldr	r2, [r7, #4]
 80098dc:	4611      	mov	r1, r2
 80098de:	4618      	mov	r0, r3
 80098e0:	f001 fa12 	bl	800ad08 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80098e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098e6:	f000 fce4 	bl	800a2b2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80098ea:	f001 f835 	bl	800a958 <xTaskResumeAll>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f47f af7c 	bne.w	80097ee <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80098f6:	4b0c      	ldr	r3, [pc, #48]	; (8009928 <xQueueGenericSend+0x208>)
 80098f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	f3bf 8f6f 	isb	sy
 8009906:	e772      	b.n	80097ee <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009908:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800990a:	f000 fcd2 	bl	800a2b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800990e:	f001 f823 	bl	800a958 <xTaskResumeAll>
 8009912:	e76c      	b.n	80097ee <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009914:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009916:	f000 fccc 	bl	800a2b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800991a:	f001 f81d 	bl	800a958 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800991e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009920:	4618      	mov	r0, r3
 8009922:	3738      	adds	r7, #56	; 0x38
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}
 8009928:	e000ed04 	.word	0xe000ed04

0800992c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08e      	sub	sp, #56	; 0x38
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
 8009938:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800993e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10c      	bne.n	800995e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	b672      	cpsid	i
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	b662      	cpsie	i
 8009958:	627b      	str	r3, [r7, #36]	; 0x24
}
 800995a:	bf00      	nop
 800995c:	e7fe      	b.n	800995c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <xQueueGenericSendFromISR+0x40>
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009968:	2b00      	cmp	r3, #0
 800996a:	d101      	bne.n	8009970 <xQueueGenericSendFromISR+0x44>
 800996c:	2301      	movs	r3, #1
 800996e:	e000      	b.n	8009972 <xQueueGenericSendFromISR+0x46>
 8009970:	2300      	movs	r3, #0
 8009972:	2b00      	cmp	r3, #0
 8009974:	d10c      	bne.n	8009990 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8009976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800997a:	b672      	cpsid	i
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	b662      	cpsie	i
 800998a:	623b      	str	r3, [r7, #32]
}
 800998c:	bf00      	nop
 800998e:	e7fe      	b.n	800998e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	2b02      	cmp	r3, #2
 8009994:	d103      	bne.n	800999e <xQueueGenericSendFromISR+0x72>
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800999a:	2b01      	cmp	r3, #1
 800999c:	d101      	bne.n	80099a2 <xQueueGenericSendFromISR+0x76>
 800999e:	2301      	movs	r3, #1
 80099a0:	e000      	b.n	80099a4 <xQueueGenericSendFromISR+0x78>
 80099a2:	2300      	movs	r3, #0
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d10c      	bne.n	80099c2 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80099a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ac:	b672      	cpsid	i
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	b662      	cpsie	i
 80099bc:	61fb      	str	r3, [r7, #28]
}
 80099be:	bf00      	nop
 80099c0:	e7fe      	b.n	80099c0 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099c2:	f002 fb2b 	bl	800c01c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80099c6:	f3ef 8211 	mrs	r2, BASEPRI
 80099ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ce:	b672      	cpsid	i
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	b662      	cpsie	i
 80099de:	61ba      	str	r2, [r7, #24]
 80099e0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80099e2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80099e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099ee:	429a      	cmp	r2, r3
 80099f0:	d302      	bcc.n	80099f8 <xQueueGenericSendFromISR+0xcc>
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b02      	cmp	r3, #2
 80099f6:	d12c      	bne.n	8009a52 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80099f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	68b9      	ldr	r1, [r7, #8]
 8009a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a08:	f000 fbc3 	bl	800a192 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a0c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a14:	d112      	bne.n	8009a3c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d016      	beq.n	8009a4c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	3324      	adds	r3, #36	; 0x24
 8009a22:	4618      	mov	r0, r3
 8009a24:	f001 f9c4 	bl	800adb0 <xTaskRemoveFromEventList>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00e      	beq.n	8009a4c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d00b      	beq.n	8009a4c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2201      	movs	r2, #1
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	e007      	b.n	8009a4c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009a40:	3301      	adds	r3, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	b25a      	sxtb	r2, r3
 8009a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009a50:	e001      	b.n	8009a56 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a52:	2300      	movs	r3, #0
 8009a54:	637b      	str	r3, [r7, #52]	; 0x34
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009a60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3738      	adds	r7, #56	; 0x38
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}

08009a6c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08e      	sub	sp, #56	; 0x38
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d10c      	bne.n	8009a9a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8009a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a84:	b672      	cpsid	i
 8009a86:	f383 8811 	msr	BASEPRI, r3
 8009a8a:	f3bf 8f6f 	isb	sy
 8009a8e:	f3bf 8f4f 	dsb	sy
 8009a92:	b662      	cpsie	i
 8009a94:	623b      	str	r3, [r7, #32]
}
 8009a96:	bf00      	nop
 8009a98:	e7fe      	b.n	8009a98 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00c      	beq.n	8009abc <xQueueGiveFromISR+0x50>
	__asm volatile
 8009aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa6:	b672      	cpsid	i
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	b662      	cpsie	i
 8009ab6:	61fb      	str	r3, [r7, #28]
}
 8009ab8:	bf00      	nop
 8009aba:	e7fe      	b.n	8009aba <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d103      	bne.n	8009acc <xQueueGiveFromISR+0x60>
 8009ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d101      	bne.n	8009ad0 <xQueueGiveFromISR+0x64>
 8009acc:	2301      	movs	r3, #1
 8009ace:	e000      	b.n	8009ad2 <xQueueGiveFromISR+0x66>
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d10c      	bne.n	8009af0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8009ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ada:	b672      	cpsid	i
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	b662      	cpsie	i
 8009aea:	61bb      	str	r3, [r7, #24]
}
 8009aec:	bf00      	nop
 8009aee:	e7fe      	b.n	8009aee <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009af0:	f002 fa94 	bl	800c01c <vPortValidateInterruptPriority>
	__asm volatile
 8009af4:	f3ef 8211 	mrs	r2, BASEPRI
 8009af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afc:	b672      	cpsid	i
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	b662      	cpsie	i
 8009b0c:	617a      	str	r2, [r7, #20]
 8009b0e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009b10:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009b12:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b18:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d22b      	bcs.n	8009b7c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	1c5a      	adds	r2, r3, #1
 8009b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b34:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009b36:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b3e:	d112      	bne.n	8009b66 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d016      	beq.n	8009b76 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4a:	3324      	adds	r3, #36	; 0x24
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 f92f 	bl	800adb0 <xTaskRemoveFromEventList>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d00e      	beq.n	8009b76 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00b      	beq.n	8009b76 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	2201      	movs	r2, #1
 8009b62:	601a      	str	r2, [r3, #0]
 8009b64:	e007      	b.n	8009b76 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	b2db      	uxtb	r3, r3
 8009b6e:	b25a      	sxtb	r2, r3
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b76:	2301      	movs	r3, #1
 8009b78:	637b      	str	r3, [r7, #52]	; 0x34
 8009b7a:	e001      	b.n	8009b80 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	637b      	str	r3, [r7, #52]	; 0x34
 8009b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b82:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f383 8811 	msr	BASEPRI, r3
}
 8009b8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3738      	adds	r7, #56	; 0x38
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08c      	sub	sp, #48	; 0x30
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d10c      	bne.n	8009bcc <xQueueReceive+0x34>
	__asm volatile
 8009bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb6:	b672      	cpsid	i
 8009bb8:	f383 8811 	msr	BASEPRI, r3
 8009bbc:	f3bf 8f6f 	isb	sy
 8009bc0:	f3bf 8f4f 	dsb	sy
 8009bc4:	b662      	cpsie	i
 8009bc6:	623b      	str	r3, [r7, #32]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d103      	bne.n	8009bda <xQueueReceive+0x42>
 8009bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d101      	bne.n	8009bde <xQueueReceive+0x46>
 8009bda:	2301      	movs	r3, #1
 8009bdc:	e000      	b.n	8009be0 <xQueueReceive+0x48>
 8009bde:	2300      	movs	r3, #0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d10c      	bne.n	8009bfe <xQueueReceive+0x66>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	b672      	cpsid	i
 8009bea:	f383 8811 	msr	BASEPRI, r3
 8009bee:	f3bf 8f6f 	isb	sy
 8009bf2:	f3bf 8f4f 	dsb	sy
 8009bf6:	b662      	cpsie	i
 8009bf8:	61fb      	str	r3, [r7, #28]
}
 8009bfa:	bf00      	nop
 8009bfc:	e7fe      	b.n	8009bfc <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009bfe:	f001 fa9b 	bl	800b138 <xTaskGetSchedulerState>
 8009c02:	4603      	mov	r3, r0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d102      	bne.n	8009c0e <xQueueReceive+0x76>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <xQueueReceive+0x7a>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e000      	b.n	8009c14 <xQueueReceive+0x7c>
 8009c12:	2300      	movs	r3, #0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10c      	bne.n	8009c32 <xQueueReceive+0x9a>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	b672      	cpsid	i
 8009c1e:	f383 8811 	msr	BASEPRI, r3
 8009c22:	f3bf 8f6f 	isb	sy
 8009c26:	f3bf 8f4f 	dsb	sy
 8009c2a:	b662      	cpsie	i
 8009c2c:	61bb      	str	r3, [r7, #24]
}
 8009c2e:	bf00      	nop
 8009c30:	e7fe      	b.n	8009c30 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c32:	f002 f90b 	bl	800be4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d01f      	beq.n	8009c82 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c42:	68b9      	ldr	r1, [r7, #8]
 8009c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c46:	f000 fb0e 	bl	800a266 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	1e5a      	subs	r2, r3, #1
 8009c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	691b      	ldr	r3, [r3, #16]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d00f      	beq.n	8009c7a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	3310      	adds	r3, #16
 8009c5e:	4618      	mov	r0, r3
 8009c60:	f001 f8a6 	bl	800adb0 <xTaskRemoveFromEventList>
 8009c64:	4603      	mov	r3, r0
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d007      	beq.n	8009c7a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009c6a:	4b3d      	ldr	r3, [pc, #244]	; (8009d60 <xQueueReceive+0x1c8>)
 8009c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	f3bf 8f4f 	dsb	sy
 8009c76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c7a:	f002 f91b 	bl	800beb4 <vPortExitCritical>
				return pdPASS;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	e069      	b.n	8009d56 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d103      	bne.n	8009c90 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c88:	f002 f914 	bl	800beb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	e062      	b.n	8009d56 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d106      	bne.n	8009ca4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c96:	f107 0310 	add.w	r3, r7, #16
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f001 f8ec 	bl	800ae78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ca4:	f002 f906 	bl	800beb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ca8:	f000 fe48 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009cac:	f002 f8ce 	bl	800be4c <vPortEnterCritical>
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cb6:	b25b      	sxtb	r3, r3
 8009cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cbc:	d103      	bne.n	8009cc6 <xQueueReceive+0x12e>
 8009cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ccc:	b25b      	sxtb	r3, r3
 8009cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd2:	d103      	bne.n	8009cdc <xQueueReceive+0x144>
 8009cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cdc:	f002 f8ea 	bl	800beb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ce0:	1d3a      	adds	r2, r7, #4
 8009ce2:	f107 0310 	add.w	r3, r7, #16
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 f8db 	bl	800aea4 <xTaskCheckForTimeOut>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d123      	bne.n	8009d3c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cf6:	f000 fb2e 	bl	800a356 <prvIsQueueEmpty>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d017      	beq.n	8009d30 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d02:	3324      	adds	r3, #36	; 0x24
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	4611      	mov	r1, r2
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fffd 	bl	800ad08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d10:	f000 facf 	bl	800a2b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009d14:	f000 fe20 	bl	800a958 <xTaskResumeAll>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d189      	bne.n	8009c32 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8009d1e:	4b10      	ldr	r3, [pc, #64]	; (8009d60 <xQueueReceive+0x1c8>)
 8009d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d24:	601a      	str	r2, [r3, #0]
 8009d26:	f3bf 8f4f 	dsb	sy
 8009d2a:	f3bf 8f6f 	isb	sy
 8009d2e:	e780      	b.n	8009c32 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d32:	f000 fabe 	bl	800a2b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009d36:	f000 fe0f 	bl	800a958 <xTaskResumeAll>
 8009d3a:	e77a      	b.n	8009c32 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d3e:	f000 fab8 	bl	800a2b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009d42:	f000 fe09 	bl	800a958 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009d48:	f000 fb05 	bl	800a356 <prvIsQueueEmpty>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f43f af6f 	beq.w	8009c32 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3730      	adds	r7, #48	; 0x30
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}
 8009d5e:	bf00      	nop
 8009d60:	e000ed04 	.word	0xe000ed04

08009d64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b08e      	sub	sp, #56	; 0x38
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d76:	2300      	movs	r3, #0
 8009d78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d10c      	bne.n	8009d9a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	b672      	cpsid	i
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	b662      	cpsie	i
 8009d94:	623b      	str	r3, [r7, #32]
}
 8009d96:	bf00      	nop
 8009d98:	e7fe      	b.n	8009d98 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d00c      	beq.n	8009dbc <xQueueSemaphoreTake+0x58>
	__asm volatile
 8009da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009da6:	b672      	cpsid	i
 8009da8:	f383 8811 	msr	BASEPRI, r3
 8009dac:	f3bf 8f6f 	isb	sy
 8009db0:	f3bf 8f4f 	dsb	sy
 8009db4:	b662      	cpsie	i
 8009db6:	61fb      	str	r3, [r7, #28]
}
 8009db8:	bf00      	nop
 8009dba:	e7fe      	b.n	8009dba <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dbc:	f001 f9bc 	bl	800b138 <xTaskGetSchedulerState>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d102      	bne.n	8009dcc <xQueueSemaphoreTake+0x68>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d101      	bne.n	8009dd0 <xQueueSemaphoreTake+0x6c>
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e000      	b.n	8009dd2 <xQueueSemaphoreTake+0x6e>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d10c      	bne.n	8009df0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dda:	b672      	cpsid	i
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	b662      	cpsie	i
 8009dea:	61bb      	str	r3, [r7, #24]
}
 8009dec:	bf00      	nop
 8009dee:	e7fe      	b.n	8009dee <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009df0:	f002 f82c 	bl	800be4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d024      	beq.n	8009e4a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e02:	1e5a      	subs	r2, r3, #1
 8009e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d104      	bne.n	8009e1a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009e10:	f001 fb58 	bl	800b4c4 <pvTaskIncrementMutexHeldCount>
 8009e14:	4602      	mov	r2, r0
 8009e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00f      	beq.n	8009e42 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	3310      	adds	r3, #16
 8009e26:	4618      	mov	r0, r3
 8009e28:	f000 ffc2 	bl	800adb0 <xTaskRemoveFromEventList>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d007      	beq.n	8009e42 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e32:	4b55      	ldr	r3, [pc, #340]	; (8009f88 <xQueueSemaphoreTake+0x224>)
 8009e34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	f3bf 8f4f 	dsb	sy
 8009e3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009e42:	f002 f837 	bl	800beb4 <vPortExitCritical>
				return pdPASS;
 8009e46:	2301      	movs	r3, #1
 8009e48:	e099      	b.n	8009f7e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d113      	bne.n	8009e78 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d00c      	beq.n	8009e70 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8009e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e5a:	b672      	cpsid	i
 8009e5c:	f383 8811 	msr	BASEPRI, r3
 8009e60:	f3bf 8f6f 	isb	sy
 8009e64:	f3bf 8f4f 	dsb	sy
 8009e68:	b662      	cpsie	i
 8009e6a:	617b      	str	r3, [r7, #20]
}
 8009e6c:	bf00      	nop
 8009e6e:	e7fe      	b.n	8009e6e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009e70:	f002 f820 	bl	800beb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009e74:	2300      	movs	r3, #0
 8009e76:	e082      	b.n	8009f7e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e7e:	f107 030c 	add.w	r3, r7, #12
 8009e82:	4618      	mov	r0, r3
 8009e84:	f000 fff8 	bl	800ae78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e8c:	f002 f812 	bl	800beb4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e90:	f000 fd54 	bl	800a93c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e94:	f001 ffda 	bl	800be4c <vPortEnterCritical>
 8009e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e9e:	b25b      	sxtb	r3, r3
 8009ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ea4:	d103      	bne.n	8009eae <xQueueSemaphoreTake+0x14a>
 8009ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009eb4:	b25b      	sxtb	r3, r3
 8009eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eba:	d103      	bne.n	8009ec4 <xQueueSemaphoreTake+0x160>
 8009ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ec4:	f001 fff6 	bl	800beb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ec8:	463a      	mov	r2, r7
 8009eca:	f107 030c 	add.w	r3, r7, #12
 8009ece:	4611      	mov	r1, r2
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f000 ffe7 	bl	800aea4 <xTaskCheckForTimeOut>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d132      	bne.n	8009f42 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009edc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ede:	f000 fa3a 	bl	800a356 <prvIsQueueEmpty>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d026      	beq.n	8009f36 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d109      	bne.n	8009f04 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8009ef0:	f001 ffac 	bl	800be4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 f93b 	bl	800b174 <xTaskPriorityInherit>
 8009efe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009f00:	f001 ffd8 	bl	800beb4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f06:	3324      	adds	r3, #36	; 0x24
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	4611      	mov	r1, r2
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f000 fefb 	bl	800ad08 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f14:	f000 f9cd 	bl	800a2b2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f18:	f000 fd1e 	bl	800a958 <xTaskResumeAll>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f47f af66 	bne.w	8009df0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8009f24:	4b18      	ldr	r3, [pc, #96]	; (8009f88 <xQueueSemaphoreTake+0x224>)
 8009f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f2a:	601a      	str	r2, [r3, #0]
 8009f2c:	f3bf 8f4f 	dsb	sy
 8009f30:	f3bf 8f6f 	isb	sy
 8009f34:	e75c      	b.n	8009df0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009f36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f38:	f000 f9bb 	bl	800a2b2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f3c:	f000 fd0c 	bl	800a958 <xTaskResumeAll>
 8009f40:	e756      	b.n	8009df0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f44:	f000 f9b5 	bl	800a2b2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f48:	f000 fd06 	bl	800a958 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f4e:	f000 fa02 	bl	800a356 <prvIsQueueEmpty>
 8009f52:	4603      	mov	r3, r0
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f43f af4b 	beq.w	8009df0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00d      	beq.n	8009f7c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8009f60:	f001 ff74 	bl	800be4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009f64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009f66:	f000 f8fc 	bl	800a162 <prvGetDisinheritPriorityAfterTimeout>
 8009f6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f72:	4618      	mov	r0, r3
 8009f74:	f001 fa08 	bl	800b388 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009f78:	f001 ff9c 	bl	800beb4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3738      	adds	r7, #56	; 0x38
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}
 8009f86:	bf00      	nop
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08e      	sub	sp, #56	; 0x38
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	60f8      	str	r0, [r7, #12]
 8009f94:	60b9      	str	r1, [r7, #8]
 8009f96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10c      	bne.n	8009fbc <xQueueReceiveFromISR+0x30>
	__asm volatile
 8009fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa6:	b672      	cpsid	i
 8009fa8:	f383 8811 	msr	BASEPRI, r3
 8009fac:	f3bf 8f6f 	isb	sy
 8009fb0:	f3bf 8f4f 	dsb	sy
 8009fb4:	b662      	cpsie	i
 8009fb6:	623b      	str	r3, [r7, #32]
}
 8009fb8:	bf00      	nop
 8009fba:	e7fe      	b.n	8009fba <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d103      	bne.n	8009fca <xQueueReceiveFromISR+0x3e>
 8009fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <xQueueReceiveFromISR+0x42>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e000      	b.n	8009fd0 <xQueueReceiveFromISR+0x44>
 8009fce:	2300      	movs	r3, #0
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d10c      	bne.n	8009fee <xQueueReceiveFromISR+0x62>
	__asm volatile
 8009fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fd8:	b672      	cpsid	i
 8009fda:	f383 8811 	msr	BASEPRI, r3
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	b662      	cpsie	i
 8009fe8:	61fb      	str	r3, [r7, #28]
}
 8009fea:	bf00      	nop
 8009fec:	e7fe      	b.n	8009fec <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fee:	f002 f815 	bl	800c01c <vPortValidateInterruptPriority>
	__asm volatile
 8009ff2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	b672      	cpsid	i
 8009ffc:	f383 8811 	msr	BASEPRI, r3
 800a000:	f3bf 8f6f 	isb	sy
 800a004:	f3bf 8f4f 	dsb	sy
 800a008:	b662      	cpsie	i
 800a00a:	61ba      	str	r2, [r7, #24]
 800a00c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a00e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a010:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a016:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d02f      	beq.n	800a07e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a020:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a028:	68b9      	ldr	r1, [r7, #8]
 800a02a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a02c:	f000 f91b 	bl	800a266 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a032:	1e5a      	subs	r2, r3, #1
 800a034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a036:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a038:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a03c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a040:	d112      	bne.n	800a068 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d016      	beq.n	800a078 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a04a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a04c:	3310      	adds	r3, #16
 800a04e:	4618      	mov	r0, r3
 800a050:	f000 feae 	bl	800adb0 <xTaskRemoveFromEventList>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00e      	beq.n	800a078 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00b      	beq.n	800a078 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	601a      	str	r2, [r3, #0]
 800a066:	e007      	b.n	800a078 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a06c:	3301      	adds	r3, #1
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	b25a      	sxtb	r2, r3
 800a072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a078:	2301      	movs	r3, #1
 800a07a:	637b      	str	r3, [r7, #52]	; 0x34
 800a07c:	e001      	b.n	800a082 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800a07e:	2300      	movs	r3, #0
 800a080:	637b      	str	r3, [r7, #52]	; 0x34
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	f383 8811 	msr	BASEPRI, r3
}
 800a08c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a090:	4618      	mov	r0, r3
 800a092:	3738      	adds	r7, #56	; 0x38
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b084      	sub	sp, #16
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10c      	bne.n	800a0c0 <uxQueueMessagesWaiting+0x28>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	b672      	cpsid	i
 800a0ac:	f383 8811 	msr	BASEPRI, r3
 800a0b0:	f3bf 8f6f 	isb	sy
 800a0b4:	f3bf 8f4f 	dsb	sy
 800a0b8:	b662      	cpsie	i
 800a0ba:	60bb      	str	r3, [r7, #8]
}
 800a0bc:	bf00      	nop
 800a0be:	e7fe      	b.n	800a0be <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 800a0c0:	f001 fec4 	bl	800be4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0c8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a0ca:	f001 fef3 	bl	800beb4 <vPortExitCritical>

	return uxReturn;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3710      	adds	r7, #16
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d10c      	bne.n	800a104 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 800a0ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ee:	b672      	cpsid	i
 800a0f0:	f383 8811 	msr	BASEPRI, r3
 800a0f4:	f3bf 8f6f 	isb	sy
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	b662      	cpsie	i
 800a0fe:	60fb      	str	r3, [r7, #12]
}
 800a100:	bf00      	nop
 800a102:	e7fe      	b.n	800a102 <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a108:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a10a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a10c:	4618      	mov	r0, r3
 800a10e:	371c      	adds	r7, #28
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d10c      	bne.n	800a144 <vQueueDelete+0x2c>
	__asm volatile
 800a12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a12e:	b672      	cpsid	i
 800a130:	f383 8811 	msr	BASEPRI, r3
 800a134:	f3bf 8f6f 	isb	sy
 800a138:	f3bf 8f4f 	dsb	sy
 800a13c:	b662      	cpsie	i
 800a13e:	60bb      	str	r3, [r7, #8]
}
 800a140:	bf00      	nop
 800a142:	e7fe      	b.n	800a142 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f95f 	bl	800a408 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a150:	2b00      	cmp	r3, #0
 800a152:	d102      	bne.n	800a15a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800a154:	68f8      	ldr	r0, [r7, #12]
 800a156:	f002 f86f 	bl	800c238 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a15a:	bf00      	nop
 800a15c:	3710      	adds	r7, #16
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d006      	beq.n	800a180 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f1c3 0307 	rsb	r3, r3, #7
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	e001      	b.n	800a184 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a184:	68fb      	ldr	r3, [r7, #12]
	}
 800a186:	4618      	mov	r0, r3
 800a188:	3714      	adds	r7, #20
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a192:	b580      	push	{r7, lr}
 800a194:	b086      	sub	sp, #24
 800a196:	af00      	add	r7, sp, #0
 800a198:	60f8      	str	r0, [r7, #12]
 800a19a:	60b9      	str	r1, [r7, #8]
 800a19c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10d      	bne.n	800a1cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d14d      	bne.n	800a254 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f001 f859 	bl	800b274 <xTaskPriorityDisinherit>
 800a1c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	609a      	str	r2, [r3, #8]
 800a1ca:	e043      	b.n	800a254 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d119      	bne.n	800a206 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	6858      	ldr	r0, [r3, #4]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1da:	461a      	mov	r2, r3
 800a1dc:	68b9      	ldr	r1, [r7, #8]
 800a1de:	f011 f93d 	bl	801b45c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	685a      	ldr	r2, [r3, #4]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1ea:	441a      	add	r2, r3
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	685a      	ldr	r2, [r3, #4]
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	689b      	ldr	r3, [r3, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d32b      	bcc.n	800a254 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681a      	ldr	r2, [r3, #0]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	605a      	str	r2, [r3, #4]
 800a204:	e026      	b.n	800a254 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	68d8      	ldr	r0, [r3, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20e:	461a      	mov	r2, r3
 800a210:	68b9      	ldr	r1, [r7, #8]
 800a212:	f011 f923 	bl	801b45c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	68da      	ldr	r2, [r3, #12]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21e:	425b      	negs	r3, r3
 800a220:	441a      	add	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	68da      	ldr	r2, [r3, #12]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d207      	bcs.n	800a242 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	689a      	ldr	r2, [r3, #8]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a23a:	425b      	negs	r3, r3
 800a23c:	441a      	add	r2, r3
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b02      	cmp	r3, #2
 800a246:	d105      	bne.n	800a254 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d002      	beq.n	800a254 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	3b01      	subs	r3, #1
 800a252:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	1c5a      	adds	r2, r3, #1
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a25c:	697b      	ldr	r3, [r7, #20]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3718      	adds	r7, #24
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a274:	2b00      	cmp	r3, #0
 800a276:	d018      	beq.n	800a2aa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	68da      	ldr	r2, [r3, #12]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a280:	441a      	add	r2, r3
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	68da      	ldr	r2, [r3, #12]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d303      	bcc.n	800a29a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	68d9      	ldr	r1, [r3, #12]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	6838      	ldr	r0, [r7, #0]
 800a2a6:	f011 f8d9 	bl	801b45c <memcpy>
	}
}
 800a2aa:	bf00      	nop
 800a2ac:	3708      	adds	r7, #8
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	bd80      	pop	{r7, pc}

0800a2b2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a2b2:	b580      	push	{r7, lr}
 800a2b4:	b084      	sub	sp, #16
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a2ba:	f001 fdc7 	bl	800be4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2c4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2c6:	e011      	b.n	800a2ec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d012      	beq.n	800a2f6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	3324      	adds	r3, #36	; 0x24
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 fd6b 	bl	800adb0 <xTaskRemoveFromEventList>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d001      	beq.n	800a2e4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a2e0:	f000 fe46 	bl	800af70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a2e4:	7bfb      	ldrb	r3, [r7, #15]
 800a2e6:	3b01      	subs	r3, #1
 800a2e8:	b2db      	uxtb	r3, r3
 800a2ea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a2ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	dce9      	bgt.n	800a2c8 <prvUnlockQueue+0x16>
 800a2f4:	e000      	b.n	800a2f8 <prvUnlockQueue+0x46>
					break;
 800a2f6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	22ff      	movs	r2, #255	; 0xff
 800a2fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a300:	f001 fdd8 	bl	800beb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a304:	f001 fda2 	bl	800be4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a30e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a310:	e011      	b.n	800a336 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d012      	beq.n	800a340 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	3310      	adds	r3, #16
 800a31e:	4618      	mov	r0, r3
 800a320:	f000 fd46 	bl	800adb0 <xTaskRemoveFromEventList>
 800a324:	4603      	mov	r3, r0
 800a326:	2b00      	cmp	r3, #0
 800a328:	d001      	beq.n	800a32e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a32a:	f000 fe21 	bl	800af70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a32e:	7bbb      	ldrb	r3, [r7, #14]
 800a330:	3b01      	subs	r3, #1
 800a332:	b2db      	uxtb	r3, r3
 800a334:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	dce9      	bgt.n	800a312 <prvUnlockQueue+0x60>
 800a33e:	e000      	b.n	800a342 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a340:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	22ff      	movs	r2, #255	; 0xff
 800a346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a34a:	f001 fdb3 	bl	800beb4 <vPortExitCritical>
}
 800a34e:	bf00      	nop
 800a350:	3710      	adds	r7, #16
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b084      	sub	sp, #16
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a35e:	f001 fd75 	bl	800be4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a366:	2b00      	cmp	r3, #0
 800a368:	d102      	bne.n	800a370 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a36a:	2301      	movs	r3, #1
 800a36c:	60fb      	str	r3, [r7, #12]
 800a36e:	e001      	b.n	800a374 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a370:	2300      	movs	r3, #0
 800a372:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a374:	f001 fd9e 	bl	800beb4 <vPortExitCritical>

	return xReturn;
 800a378:	68fb      	ldr	r3, [r7, #12]
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3710      	adds	r7, #16
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}

0800a382 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a38a:	f001 fd5f 	bl	800be4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a396:	429a      	cmp	r2, r3
 800a398:	d102      	bne.n	800a3a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a39a:	2301      	movs	r3, #1
 800a39c:	60fb      	str	r3, [r7, #12]
 800a39e:	e001      	b.n	800a3a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a3a4:	f001 fd86 	bl	800beb4 <vPortExitCritical>

	return xReturn;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b085      	sub	sp, #20
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
 800a3bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3be:	2300      	movs	r3, #0
 800a3c0:	60fb      	str	r3, [r7, #12]
 800a3c2:	e014      	b.n	800a3ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a3c4:	4a0f      	ldr	r2, [pc, #60]	; (800a404 <vQueueAddToRegistry+0x50>)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d10b      	bne.n	800a3e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a3d0:	490c      	ldr	r1, [pc, #48]	; (800a404 <vQueueAddToRegistry+0x50>)
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	683a      	ldr	r2, [r7, #0]
 800a3d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a3da:	4a0a      	ldr	r2, [pc, #40]	; (800a404 <vQueueAddToRegistry+0x50>)
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	00db      	lsls	r3, r3, #3
 800a3e0:	4413      	add	r3, r2
 800a3e2:	687a      	ldr	r2, [r7, #4]
 800a3e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a3e6:	e006      	b.n	800a3f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2b07      	cmp	r3, #7
 800a3f2:	d9e7      	bls.n	800a3c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a3f4:	bf00      	nop
 800a3f6:	bf00      	nop
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	2000a064 	.word	0x2000a064

0800a408 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a408:	b480      	push	{r7}
 800a40a:	b085      	sub	sp, #20
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a410:	2300      	movs	r3, #0
 800a412:	60fb      	str	r3, [r7, #12]
 800a414:	e016      	b.n	800a444 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a416:	4a10      	ldr	r2, [pc, #64]	; (800a458 <vQueueUnregisterQueue+0x50>)
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	00db      	lsls	r3, r3, #3
 800a41c:	4413      	add	r3, r2
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d10b      	bne.n	800a43e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a426:	4a0c      	ldr	r2, [pc, #48]	; (800a458 <vQueueUnregisterQueue+0x50>)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2100      	movs	r1, #0
 800a42c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a430:	4a09      	ldr	r2, [pc, #36]	; (800a458 <vQueueUnregisterQueue+0x50>)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	00db      	lsls	r3, r3, #3
 800a436:	4413      	add	r3, r2
 800a438:	2200      	movs	r2, #0
 800a43a:	605a      	str	r2, [r3, #4]
				break;
 800a43c:	e006      	b.n	800a44c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	3301      	adds	r3, #1
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2b07      	cmp	r3, #7
 800a448:	d9e5      	bls.n	800a416 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a44a:	bf00      	nop
 800a44c:	bf00      	nop
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	2000a064 	.word	0x2000a064

0800a45c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b086      	sub	sp, #24
 800a460:	af00      	add	r7, sp, #0
 800a462:	60f8      	str	r0, [r7, #12]
 800a464:	60b9      	str	r1, [r7, #8]
 800a466:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a46c:	f001 fcee 	bl	800be4c <vPortEnterCritical>
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a476:	b25b      	sxtb	r3, r3
 800a478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a47c:	d103      	bne.n	800a486 <vQueueWaitForMessageRestricted+0x2a>
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2200      	movs	r2, #0
 800a482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a48c:	b25b      	sxtb	r3, r3
 800a48e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a492:	d103      	bne.n	800a49c <vQueueWaitForMessageRestricted+0x40>
 800a494:	697b      	ldr	r3, [r7, #20]
 800a496:	2200      	movs	r2, #0
 800a498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a49c:	f001 fd0a 	bl	800beb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a4a0:	697b      	ldr	r3, [r7, #20]
 800a4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d106      	bne.n	800a4b6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	3324      	adds	r3, #36	; 0x24
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	68b9      	ldr	r1, [r7, #8]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f000 fc4f 	bl	800ad54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a4b6:	6978      	ldr	r0, [r7, #20]
 800a4b8:	f7ff fefb 	bl	800a2b2 <prvUnlockQueue>
	}
 800a4bc:	bf00      	nop
 800a4be:	3718      	adds	r7, #24
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b08e      	sub	sp, #56	; 0x38
 800a4c8:	af04      	add	r7, sp, #16
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	60b9      	str	r1, [r7, #8]
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d10c      	bne.n	800a4f2 <xTaskCreateStatic+0x2e>
	__asm volatile
 800a4d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4dc:	b672      	cpsid	i
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	b662      	cpsie	i
 800a4ec:	623b      	str	r3, [r7, #32]
}
 800a4ee:	bf00      	nop
 800a4f0:	e7fe      	b.n	800a4f0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800a4f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d10c      	bne.n	800a512 <xTaskCreateStatic+0x4e>
	__asm volatile
 800a4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fc:	b672      	cpsid	i
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	b662      	cpsie	i
 800a50c:	61fb      	str	r3, [r7, #28]
}
 800a50e:	bf00      	nop
 800a510:	e7fe      	b.n	800a510 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a512:	2354      	movs	r3, #84	; 0x54
 800a514:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	2b54      	cmp	r3, #84	; 0x54
 800a51a:	d00c      	beq.n	800a536 <xTaskCreateStatic+0x72>
	__asm volatile
 800a51c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a520:	b672      	cpsid	i
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	b662      	cpsie	i
 800a530:	61bb      	str	r3, [r7, #24]
}
 800a532:	bf00      	nop
 800a534:	e7fe      	b.n	800a534 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a536:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d01e      	beq.n	800a57c <xTaskCreateStatic+0xb8>
 800a53e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a540:	2b00      	cmp	r3, #0
 800a542:	d01b      	beq.n	800a57c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a546:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a54a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a54c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a54e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a550:	2202      	movs	r2, #2
 800a552:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a556:	2300      	movs	r3, #0
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55c:	9302      	str	r3, [sp, #8]
 800a55e:	f107 0314 	add.w	r3, r7, #20
 800a562:	9301      	str	r3, [sp, #4]
 800a564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a566:	9300      	str	r3, [sp, #0]
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f850 	bl	800a614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a576:	f000 f8d7 	bl	800a728 <prvAddNewTaskToReadyList>
 800a57a:	e001      	b.n	800a580 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800a57c:	2300      	movs	r3, #0
 800a57e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a580:	697b      	ldr	r3, [r7, #20]
	}
 800a582:	4618      	mov	r0, r3
 800a584:	3728      	adds	r7, #40	; 0x28
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}

0800a58a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a58a:	b580      	push	{r7, lr}
 800a58c:	b08c      	sub	sp, #48	; 0x30
 800a58e:	af04      	add	r7, sp, #16
 800a590:	60f8      	str	r0, [r7, #12]
 800a592:	60b9      	str	r1, [r7, #8]
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	4613      	mov	r3, r2
 800a598:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a59a:	88fb      	ldrh	r3, [r7, #6]
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f001 fd80 	bl	800c0a4 <pvPortMalloc>
 800a5a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00e      	beq.n	800a5ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a5ac:	2054      	movs	r0, #84	; 0x54
 800a5ae:	f001 fd79 	bl	800c0a4 <pvPortMalloc>
 800a5b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d003      	beq.n	800a5c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5ba:	69fb      	ldr	r3, [r7, #28]
 800a5bc:	697a      	ldr	r2, [r7, #20]
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
 800a5c0:	e005      	b.n	800a5ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5c2:	6978      	ldr	r0, [r7, #20]
 800a5c4:	f001 fe38 	bl	800c238 <vPortFree>
 800a5c8:	e001      	b.n	800a5ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d017      	beq.n	800a604 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5dc:	88fa      	ldrh	r2, [r7, #6]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	9303      	str	r3, [sp, #12]
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	9302      	str	r3, [sp, #8]
 800a5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e8:	9301      	str	r3, [sp, #4]
 800a5ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5ec:	9300      	str	r3, [sp, #0]
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	68b9      	ldr	r1, [r7, #8]
 800a5f2:	68f8      	ldr	r0, [r7, #12]
 800a5f4:	f000 f80e 	bl	800a614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a5f8:	69f8      	ldr	r0, [r7, #28]
 800a5fa:	f000 f895 	bl	800a728 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a5fe:	2301      	movs	r3, #1
 800a600:	61bb      	str	r3, [r7, #24]
 800a602:	e002      	b.n	800a60a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a604:	f04f 33ff 	mov.w	r3, #4294967295
 800a608:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a60a:	69bb      	ldr	r3, [r7, #24]
	}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3720      	adds	r7, #32
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	607a      	str	r2, [r7, #4]
 800a620:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a626:	6879      	ldr	r1, [r7, #4]
 800a628:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a62c:	440b      	add	r3, r1
 800a62e:	009b      	lsls	r3, r3, #2
 800a630:	4413      	add	r3, r2
 800a632:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a634:	69bb      	ldr	r3, [r7, #24]
 800a636:	f023 0307 	bic.w	r3, r3, #7
 800a63a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	f003 0307 	and.w	r3, r3, #7
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00c      	beq.n	800a660 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	b672      	cpsid	i
 800a64c:	f383 8811 	msr	BASEPRI, r3
 800a650:	f3bf 8f6f 	isb	sy
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	b662      	cpsie	i
 800a65a:	617b      	str	r3, [r7, #20]
}
 800a65c:	bf00      	nop
 800a65e:	e7fe      	b.n	800a65e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d01f      	beq.n	800a6a6 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a666:	2300      	movs	r3, #0
 800a668:	61fb      	str	r3, [r7, #28]
 800a66a:	e012      	b.n	800a692 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	69fb      	ldr	r3, [r7, #28]
 800a670:	4413      	add	r3, r2
 800a672:	7819      	ldrb	r1, [r3, #0]
 800a674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	4413      	add	r3, r2
 800a67a:	3334      	adds	r3, #52	; 0x34
 800a67c:	460a      	mov	r2, r1
 800a67e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a680:	68ba      	ldr	r2, [r7, #8]
 800a682:	69fb      	ldr	r3, [r7, #28]
 800a684:	4413      	add	r3, r2
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d006      	beq.n	800a69a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	3301      	adds	r3, #1
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	2b0f      	cmp	r3, #15
 800a696:	d9e9      	bls.n	800a66c <prvInitialiseNewTask+0x58>
 800a698:	e000      	b.n	800a69c <prvInitialiseNewTask+0x88>
			{
				break;
 800a69a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a6a4:	e003      	b.n	800a6ae <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b0:	2b06      	cmp	r3, #6
 800a6b2:	d901      	bls.n	800a6b8 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6b4:	2306      	movs	r3, #6
 800a6b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6c2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a6c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7fe fdf7 	bl	80092c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d6:	3318      	adds	r3, #24
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fdf2 	bl	80092c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e6:	f1c3 0207 	rsb	r2, r3, #7
 800a6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a702:	683a      	ldr	r2, [r7, #0]
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	69b8      	ldr	r0, [r7, #24]
 800a708:	f001 fa94 	bl	800bc34 <pxPortInitialiseStack>
 800a70c:	4602      	mov	r2, r0
 800a70e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a710:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d002      	beq.n	800a71e <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a71a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a71c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a71e:	bf00      	nop
 800a720:	3720      	adds	r7, #32
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
	...

0800a728 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a730:	f001 fb8c 	bl	800be4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a734:	4b2a      	ldr	r3, [pc, #168]	; (800a7e0 <prvAddNewTaskToReadyList+0xb8>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	3301      	adds	r3, #1
 800a73a:	4a29      	ldr	r2, [pc, #164]	; (800a7e0 <prvAddNewTaskToReadyList+0xb8>)
 800a73c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a73e:	4b29      	ldr	r3, [pc, #164]	; (800a7e4 <prvAddNewTaskToReadyList+0xbc>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d109      	bne.n	800a75a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a746:	4a27      	ldr	r2, [pc, #156]	; (800a7e4 <prvAddNewTaskToReadyList+0xbc>)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a74c:	4b24      	ldr	r3, [pc, #144]	; (800a7e0 <prvAddNewTaskToReadyList+0xb8>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	2b01      	cmp	r3, #1
 800a752:	d110      	bne.n	800a776 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a754:	f000 fc30 	bl	800afb8 <prvInitialiseTaskLists>
 800a758:	e00d      	b.n	800a776 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a75a:	4b23      	ldr	r3, [pc, #140]	; (800a7e8 <prvAddNewTaskToReadyList+0xc0>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d109      	bne.n	800a776 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a762:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <prvAddNewTaskToReadyList+0xbc>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d802      	bhi.n	800a776 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a770:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <prvAddNewTaskToReadyList+0xbc>)
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a776:	4b1d      	ldr	r3, [pc, #116]	; (800a7ec <prvAddNewTaskToReadyList+0xc4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	3301      	adds	r3, #1
 800a77c:	4a1b      	ldr	r2, [pc, #108]	; (800a7ec <prvAddNewTaskToReadyList+0xc4>)
 800a77e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a784:	2201      	movs	r2, #1
 800a786:	409a      	lsls	r2, r3
 800a788:	4b19      	ldr	r3, [pc, #100]	; (800a7f0 <prvAddNewTaskToReadyList+0xc8>)
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	4313      	orrs	r3, r2
 800a78e:	4a18      	ldr	r2, [pc, #96]	; (800a7f0 <prvAddNewTaskToReadyList+0xc8>)
 800a790:	6013      	str	r3, [r2, #0]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a796:	4613      	mov	r3, r2
 800a798:	009b      	lsls	r3, r3, #2
 800a79a:	4413      	add	r3, r2
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	4a15      	ldr	r2, [pc, #84]	; (800a7f4 <prvAddNewTaskToReadyList+0xcc>)
 800a7a0:	441a      	add	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	3304      	adds	r3, #4
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	4610      	mov	r0, r2
 800a7aa:	f7fe fd97 	bl	80092dc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7ae:	f001 fb81 	bl	800beb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7b2:	4b0d      	ldr	r3, [pc, #52]	; (800a7e8 <prvAddNewTaskToReadyList+0xc0>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d00e      	beq.n	800a7d8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7ba:	4b0a      	ldr	r3, [pc, #40]	; (800a7e4 <prvAddNewTaskToReadyList+0xbc>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d207      	bcs.n	800a7d8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7c8:	4b0b      	ldr	r3, [pc, #44]	; (800a7f8 <prvAddNewTaskToReadyList+0xd0>)
 800a7ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ce:	601a      	str	r2, [r3, #0]
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d8:	bf00      	nop
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}
 800a7e0:	20000a14 	.word	0x20000a14
 800a7e4:	20000914 	.word	0x20000914
 800a7e8:	20000a20 	.word	0x20000a20
 800a7ec:	20000a30 	.word	0x20000a30
 800a7f0:	20000a1c 	.word	0x20000a1c
 800a7f4:	20000918 	.word	0x20000918
 800a7f8:	e000ed04 	.word	0xe000ed04

0800a7fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d019      	beq.n	800a842 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a80e:	4b14      	ldr	r3, [pc, #80]	; (800a860 <vTaskDelay+0x64>)
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00c      	beq.n	800a830 <vTaskDelay+0x34>
	__asm volatile
 800a816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81a:	b672      	cpsid	i
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	b662      	cpsie	i
 800a82a:	60bb      	str	r3, [r7, #8]
}
 800a82c:	bf00      	nop
 800a82e:	e7fe      	b.n	800a82e <vTaskDelay+0x32>
			vTaskSuspendAll();
 800a830:	f000 f884 	bl	800a93c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a834:	2100      	movs	r1, #0
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 fe58 	bl	800b4ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a83c:	f000 f88c 	bl	800a958 <xTaskResumeAll>
 800a840:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d107      	bne.n	800a858 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800a848:	4b06      	ldr	r3, [pc, #24]	; (800a864 <vTaskDelay+0x68>)
 800a84a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a84e:	601a      	str	r2, [r3, #0]
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a858:	bf00      	nop
 800a85a:	3710      	adds	r7, #16
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20000a3c 	.word	0x20000a3c
 800a864:	e000ed04 	.word	0xe000ed04

0800a868 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b08a      	sub	sp, #40	; 0x28
 800a86c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a86e:	2300      	movs	r3, #0
 800a870:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a872:	2300      	movs	r3, #0
 800a874:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a876:	463a      	mov	r2, r7
 800a878:	1d39      	adds	r1, r7, #4
 800a87a:	f107 0308 	add.w	r3, r7, #8
 800a87e:	4618      	mov	r0, r3
 800a880:	f7f5 feec 	bl	800065c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a884:	6839      	ldr	r1, [r7, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	9202      	str	r2, [sp, #8]
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	2300      	movs	r3, #0
 800a890:	9300      	str	r3, [sp, #0]
 800a892:	2300      	movs	r3, #0
 800a894:	460a      	mov	r2, r1
 800a896:	4923      	ldr	r1, [pc, #140]	; (800a924 <vTaskStartScheduler+0xbc>)
 800a898:	4823      	ldr	r0, [pc, #140]	; (800a928 <vTaskStartScheduler+0xc0>)
 800a89a:	f7ff fe13 	bl	800a4c4 <xTaskCreateStatic>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	4a22      	ldr	r2, [pc, #136]	; (800a92c <vTaskStartScheduler+0xc4>)
 800a8a2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a8a4:	4b21      	ldr	r3, [pc, #132]	; (800a92c <vTaskStartScheduler+0xc4>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	617b      	str	r3, [r7, #20]
 800a8b0:	e001      	b.n	800a8b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d102      	bne.n	800a8c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a8bc:	f000 fe7c 	bl	800b5b8 <xTimerCreateTimerTask>
 800a8c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	2b01      	cmp	r3, #1
 800a8c6:	d118      	bne.n	800a8fa <vTaskStartScheduler+0x92>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8cc:	b672      	cpsid	i
 800a8ce:	f383 8811 	msr	BASEPRI, r3
 800a8d2:	f3bf 8f6f 	isb	sy
 800a8d6:	f3bf 8f4f 	dsb	sy
 800a8da:	b662      	cpsie	i
 800a8dc:	613b      	str	r3, [r7, #16]
}
 800a8de:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8e0:	4b13      	ldr	r3, [pc, #76]	; (800a930 <vTaskStartScheduler+0xc8>)
 800a8e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8e6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8e8:	4b12      	ldr	r3, [pc, #72]	; (800a934 <vTaskStartScheduler+0xcc>)
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a8ee:	4b12      	ldr	r3, [pc, #72]	; (800a938 <vTaskStartScheduler+0xd0>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8f4:	f001 fa2c 	bl	800bd50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8f8:	e010      	b.n	800a91c <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a900:	d10c      	bne.n	800a91c <vTaskStartScheduler+0xb4>
	__asm volatile
 800a902:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a906:	b672      	cpsid	i
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	b662      	cpsie	i
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <vTaskStartScheduler+0xb2>
}
 800a91c:	bf00      	nop
 800a91e:	3718      	adds	r7, #24
 800a920:	46bd      	mov	sp, r7
 800a922:	bd80      	pop	{r7, pc}
 800a924:	0801e2bc 	.word	0x0801e2bc
 800a928:	0800af89 	.word	0x0800af89
 800a92c:	20000a38 	.word	0x20000a38
 800a930:	20000a34 	.word	0x20000a34
 800a934:	20000a20 	.word	0x20000a20
 800a938:	20000a18 	.word	0x20000a18

0800a93c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a93c:	b480      	push	{r7}
 800a93e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a940:	4b04      	ldr	r3, [pc, #16]	; (800a954 <vTaskSuspendAll+0x18>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	3301      	adds	r3, #1
 800a946:	4a03      	ldr	r2, [pc, #12]	; (800a954 <vTaskSuspendAll+0x18>)
 800a948:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a94a:	bf00      	nop
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	20000a3c 	.word	0x20000a3c

0800a958 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a95e:	2300      	movs	r3, #0
 800a960:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a962:	2300      	movs	r3, #0
 800a964:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a966:	4b42      	ldr	r3, [pc, #264]	; (800aa70 <xTaskResumeAll+0x118>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d10c      	bne.n	800a988 <xTaskResumeAll+0x30>
	__asm volatile
 800a96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a972:	b672      	cpsid	i
 800a974:	f383 8811 	msr	BASEPRI, r3
 800a978:	f3bf 8f6f 	isb	sy
 800a97c:	f3bf 8f4f 	dsb	sy
 800a980:	b662      	cpsie	i
 800a982:	603b      	str	r3, [r7, #0]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a988:	f001 fa60 	bl	800be4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a98c:	4b38      	ldr	r3, [pc, #224]	; (800aa70 <xTaskResumeAll+0x118>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3b01      	subs	r3, #1
 800a992:	4a37      	ldr	r2, [pc, #220]	; (800aa70 <xTaskResumeAll+0x118>)
 800a994:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a996:	4b36      	ldr	r3, [pc, #216]	; (800aa70 <xTaskResumeAll+0x118>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d161      	bne.n	800aa62 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a99e:	4b35      	ldr	r3, [pc, #212]	; (800aa74 <xTaskResumeAll+0x11c>)
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d05d      	beq.n	800aa62 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9a6:	e02e      	b.n	800aa06 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9a8:	4b33      	ldr	r3, [pc, #204]	; (800aa78 <xTaskResumeAll+0x120>)
 800a9aa:	68db      	ldr	r3, [r3, #12]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	3318      	adds	r3, #24
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f7fe fcee 	bl	8009396 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7fe fce9 	bl	8009396 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	409a      	lsls	r2, r3
 800a9cc:	4b2b      	ldr	r3, [pc, #172]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	4a2a      	ldr	r2, [pc, #168]	; (800aa7c <xTaskResumeAll+0x124>)
 800a9d4:	6013      	str	r3, [r2, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9da:	4613      	mov	r3, r2
 800a9dc:	009b      	lsls	r3, r3, #2
 800a9de:	4413      	add	r3, r2
 800a9e0:	009b      	lsls	r3, r3, #2
 800a9e2:	4a27      	ldr	r2, [pc, #156]	; (800aa80 <xTaskResumeAll+0x128>)
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	3304      	adds	r3, #4
 800a9ea:	4619      	mov	r1, r3
 800a9ec:	4610      	mov	r0, r2
 800a9ee:	f7fe fc75 	bl	80092dc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f6:	4b23      	ldr	r3, [pc, #140]	; (800aa84 <xTaskResumeAll+0x12c>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d302      	bcc.n	800aa06 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800aa00:	4b21      	ldr	r3, [pc, #132]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa02:	2201      	movs	r2, #1
 800aa04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aa06:	4b1c      	ldr	r3, [pc, #112]	; (800aa78 <xTaskResumeAll+0x120>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d1cc      	bne.n	800a9a8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800aa14:	f000 fb70 	bl	800b0f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800aa18:	4b1c      	ldr	r3, [pc, #112]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d010      	beq.n	800aa46 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800aa24:	f000 f858 	bl	800aad8 <xTaskIncrementTick>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d002      	beq.n	800aa34 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800aa2e:	4b16      	ldr	r3, [pc, #88]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa30:	2201      	movs	r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d1f1      	bne.n	800aa24 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800aa40:	4b12      	ldr	r3, [pc, #72]	; (800aa8c <xTaskResumeAll+0x134>)
 800aa42:	2200      	movs	r2, #0
 800aa44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa46:	4b10      	ldr	r3, [pc, #64]	; (800aa88 <xTaskResumeAll+0x130>)
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d009      	beq.n	800aa62 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa52:	4b0f      	ldr	r3, [pc, #60]	; (800aa90 <xTaskResumeAll+0x138>)
 800aa54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	f3bf 8f4f 	dsb	sy
 800aa5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa62:	f001 fa27 	bl	800beb4 <vPortExitCritical>

	return xAlreadyYielded;
 800aa66:	68bb      	ldr	r3, [r7, #8]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3710      	adds	r7, #16
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	20000a3c 	.word	0x20000a3c
 800aa74:	20000a14 	.word	0x20000a14
 800aa78:	200009d4 	.word	0x200009d4
 800aa7c:	20000a1c 	.word	0x20000a1c
 800aa80:	20000918 	.word	0x20000918
 800aa84:	20000914 	.word	0x20000914
 800aa88:	20000a28 	.word	0x20000a28
 800aa8c:	20000a24 	.word	0x20000a24
 800aa90:	e000ed04 	.word	0xe000ed04

0800aa94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa9a:	4b05      	ldr	r3, [pc, #20]	; (800aab0 <xTaskGetTickCount+0x1c>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aaa0:	687b      	ldr	r3, [r7, #4]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	370c      	adds	r7, #12
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
 800aaae:	bf00      	nop
 800aab0:	20000a18 	.word	0x20000a18

0800aab4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aaba:	f001 faaf 	bl	800c01c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aabe:	2300      	movs	r3, #0
 800aac0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aac2:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <xTaskGetTickCountFromISR+0x20>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aac8:	683b      	ldr	r3, [r7, #0]
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3708      	adds	r7, #8
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20000a18 	.word	0x20000a18

0800aad8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aade:	2300      	movs	r3, #0
 800aae0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae2:	4b4f      	ldr	r3, [pc, #316]	; (800ac20 <xTaskIncrementTick+0x148>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	f040 808a 	bne.w	800ac00 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aaec:	4b4d      	ldr	r3, [pc, #308]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aaf4:	4a4b      	ldr	r2, [pc, #300]	; (800ac24 <xTaskIncrementTick+0x14c>)
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d122      	bne.n	800ab46 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800ab00:	4b49      	ldr	r3, [pc, #292]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d00c      	beq.n	800ab24 <xTaskIncrementTick+0x4c>
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	b672      	cpsid	i
 800ab10:	f383 8811 	msr	BASEPRI, r3
 800ab14:	f3bf 8f6f 	isb	sy
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	b662      	cpsie	i
 800ab1e:	603b      	str	r3, [r7, #0]
}
 800ab20:	bf00      	nop
 800ab22:	e7fe      	b.n	800ab22 <xTaskIncrementTick+0x4a>
 800ab24:	4b40      	ldr	r3, [pc, #256]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
 800ab2a:	4b40      	ldr	r3, [pc, #256]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a3e      	ldr	r2, [pc, #248]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	4a3e      	ldr	r2, [pc, #248]	; (800ac2c <xTaskIncrementTick+0x154>)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	6013      	str	r3, [r2, #0]
 800ab38:	4b3d      	ldr	r3, [pc, #244]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	4a3c      	ldr	r2, [pc, #240]	; (800ac30 <xTaskIncrementTick+0x158>)
 800ab40:	6013      	str	r3, [r2, #0]
 800ab42:	f000 fad9 	bl	800b0f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab46:	4b3b      	ldr	r3, [pc, #236]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	693a      	ldr	r2, [r7, #16]
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	d348      	bcc.n	800abe2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab50:	4b35      	ldr	r3, [pc, #212]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d104      	bne.n	800ab64 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5a:	4b36      	ldr	r3, [pc, #216]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ab60:	601a      	str	r2, [r3, #0]
					break;
 800ab62:	e03e      	b.n	800abe2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab64:	4b30      	ldr	r3, [pc, #192]	; (800ac28 <xTaskIncrementTick+0x150>)
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	685b      	ldr	r3, [r3, #4]
 800ab72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab74:	693a      	ldr	r2, [r7, #16]
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	d203      	bcs.n	800ab84 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab7c:	4a2d      	ldr	r2, [pc, #180]	; (800ac34 <xTaskIncrementTick+0x15c>)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ab82:	e02e      	b.n	800abe2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3304      	adds	r3, #4
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fc04 	bl	8009396 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d004      	beq.n	800aba0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3318      	adds	r3, #24
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fbfb 	bl	8009396 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba4:	2201      	movs	r2, #1
 800aba6:	409a      	lsls	r2, r3
 800aba8:	4b23      	ldr	r3, [pc, #140]	; (800ac38 <xTaskIncrementTick+0x160>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	4313      	orrs	r3, r2
 800abae:	4a22      	ldr	r2, [pc, #136]	; (800ac38 <xTaskIncrementTick+0x160>)
 800abb0:	6013      	str	r3, [r2, #0]
 800abb2:	68bb      	ldr	r3, [r7, #8]
 800abb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb6:	4613      	mov	r3, r2
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4a1f      	ldr	r2, [pc, #124]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abc0:	441a      	add	r2, r3
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	3304      	adds	r3, #4
 800abc6:	4619      	mov	r1, r3
 800abc8:	4610      	mov	r0, r2
 800abca:	f7fe fb87 	bl	80092dc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abd2:	4b1b      	ldr	r3, [pc, #108]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abd8:	429a      	cmp	r2, r3
 800abda:	d3b9      	bcc.n	800ab50 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800abdc:	2301      	movs	r3, #1
 800abde:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abe0:	e7b6      	b.n	800ab50 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abe2:	4b17      	ldr	r3, [pc, #92]	; (800ac40 <xTaskIncrementTick+0x168>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abe8:	4914      	ldr	r1, [pc, #80]	; (800ac3c <xTaskIncrementTick+0x164>)
 800abea:	4613      	mov	r3, r2
 800abec:	009b      	lsls	r3, r3, #2
 800abee:	4413      	add	r3, r2
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d907      	bls.n	800ac0a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800abfa:	2301      	movs	r3, #1
 800abfc:	617b      	str	r3, [r7, #20]
 800abfe:	e004      	b.n	800ac0a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ac00:	4b10      	ldr	r3, [pc, #64]	; (800ac44 <xTaskIncrementTick+0x16c>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	3301      	adds	r3, #1
 800ac06:	4a0f      	ldr	r2, [pc, #60]	; (800ac44 <xTaskIncrementTick+0x16c>)
 800ac08:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <xTaskIncrementTick+0x170>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d001      	beq.n	800ac16 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ac12:	2301      	movs	r3, #1
 800ac14:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ac16:	697b      	ldr	r3, [r7, #20]
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	3718      	adds	r7, #24
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	bd80      	pop	{r7, pc}
 800ac20:	20000a3c 	.word	0x20000a3c
 800ac24:	20000a18 	.word	0x20000a18
 800ac28:	200009cc 	.word	0x200009cc
 800ac2c:	200009d0 	.word	0x200009d0
 800ac30:	20000a2c 	.word	0x20000a2c
 800ac34:	20000a34 	.word	0x20000a34
 800ac38:	20000a1c 	.word	0x20000a1c
 800ac3c:	20000918 	.word	0x20000918
 800ac40:	20000914 	.word	0x20000914
 800ac44:	20000a24 	.word	0x20000a24
 800ac48:	20000a28 	.word	0x20000a28

0800ac4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac4c:	b480      	push	{r7}
 800ac4e:	b087      	sub	sp, #28
 800ac50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac52:	4b28      	ldr	r3, [pc, #160]	; (800acf4 <vTaskSwitchContext+0xa8>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d003      	beq.n	800ac62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac5a:	4b27      	ldr	r3, [pc, #156]	; (800acf8 <vTaskSwitchContext+0xac>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac60:	e041      	b.n	800ace6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800ac62:	4b25      	ldr	r3, [pc, #148]	; (800acf8 <vTaskSwitchContext+0xac>)
 800ac64:	2200      	movs	r2, #0
 800ac66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac68:	4b24      	ldr	r3, [pc, #144]	; (800acfc <vTaskSwitchContext+0xb0>)
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	fab3 f383 	clz	r3, r3
 800ac74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac76:	7afb      	ldrb	r3, [r7, #11]
 800ac78:	f1c3 031f 	rsb	r3, r3, #31
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	4920      	ldr	r1, [pc, #128]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800ac80:	697a      	ldr	r2, [r7, #20]
 800ac82:	4613      	mov	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	4413      	add	r3, r2
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	440b      	add	r3, r1
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d10c      	bne.n	800acac <vTaskSwitchContext+0x60>
	__asm volatile
 800ac92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac96:	b672      	cpsid	i
 800ac98:	f383 8811 	msr	BASEPRI, r3
 800ac9c:	f3bf 8f6f 	isb	sy
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	b662      	cpsie	i
 800aca6:	607b      	str	r3, [r7, #4]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <vTaskSwitchContext+0x5e>
 800acac:	697a      	ldr	r2, [r7, #20]
 800acae:	4613      	mov	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	4413      	add	r3, r2
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	4a12      	ldr	r2, [pc, #72]	; (800ad00 <vTaskSwitchContext+0xb4>)
 800acb8:	4413      	add	r3, r2
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	685b      	ldr	r3, [r3, #4]
 800acc0:	685a      	ldr	r2, [r3, #4]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	605a      	str	r2, [r3, #4]
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	685a      	ldr	r2, [r3, #4]
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	3308      	adds	r3, #8
 800acce:	429a      	cmp	r2, r3
 800acd0:	d104      	bne.n	800acdc <vTaskSwitchContext+0x90>
 800acd2:	693b      	ldr	r3, [r7, #16]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	685a      	ldr	r2, [r3, #4]
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	605a      	str	r2, [r3, #4]
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	4a08      	ldr	r2, [pc, #32]	; (800ad04 <vTaskSwitchContext+0xb8>)
 800ace4:	6013      	str	r3, [r2, #0]
}
 800ace6:	bf00      	nop
 800ace8:	371c      	adds	r7, #28
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr
 800acf2:	bf00      	nop
 800acf4:	20000a3c 	.word	0x20000a3c
 800acf8:	20000a28 	.word	0x20000a28
 800acfc:	20000a1c 	.word	0x20000a1c
 800ad00:	20000918 	.word	0x20000918
 800ad04:	20000914 	.word	0x20000914

0800ad08 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b084      	sub	sp, #16
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
 800ad10:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d10c      	bne.n	800ad32 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800ad18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad1c:	b672      	cpsid	i
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	b662      	cpsie	i
 800ad2c:	60fb      	str	r3, [r7, #12]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad32:	4b07      	ldr	r3, [pc, #28]	; (800ad50 <vTaskPlaceOnEventList+0x48>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	3318      	adds	r3, #24
 800ad38:	4619      	mov	r1, r3
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f7fe faf2 	bl	8009324 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad40:	2101      	movs	r1, #1
 800ad42:	6838      	ldr	r0, [r7, #0]
 800ad44:	f000 fbd2 	bl	800b4ec <prvAddCurrentTaskToDelayedList>
}
 800ad48:	bf00      	nop
 800ad4a:	3710      	adds	r7, #16
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	20000914 	.word	0x20000914

0800ad54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b086      	sub	sp, #24
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	60f8      	str	r0, [r7, #12]
 800ad5c:	60b9      	str	r1, [r7, #8]
 800ad5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10c      	bne.n	800ad80 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800ad66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6a:	b672      	cpsid	i
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	b662      	cpsie	i
 800ad7a:	617b      	str	r3, [r7, #20]
}
 800ad7c:	bf00      	nop
 800ad7e:	e7fe      	b.n	800ad7e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad80:	4b0a      	ldr	r3, [pc, #40]	; (800adac <vTaskPlaceOnEventListRestricted+0x58>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3318      	adds	r3, #24
 800ad86:	4619      	mov	r1, r3
 800ad88:	68f8      	ldr	r0, [r7, #12]
 800ad8a:	f7fe faa7 	bl	80092dc <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d002      	beq.n	800ad9a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800ad94:	f04f 33ff 	mov.w	r3, #4294967295
 800ad98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ad9a:	6879      	ldr	r1, [r7, #4]
 800ad9c:	68b8      	ldr	r0, [r7, #8]
 800ad9e:	f000 fba5 	bl	800b4ec <prvAddCurrentTaskToDelayedList>
	}
 800ada2:	bf00      	nop
 800ada4:	3718      	adds	r7, #24
 800ada6:	46bd      	mov	sp, r7
 800ada8:	bd80      	pop	{r7, pc}
 800adaa:	bf00      	nop
 800adac:	20000914 	.word	0x20000914

0800adb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	68db      	ldr	r3, [r3, #12]
 800adbc:	68db      	ldr	r3, [r3, #12]
 800adbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d10c      	bne.n	800ade0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800adc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adca:	b672      	cpsid	i
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	b662      	cpsie	i
 800adda:	60fb      	str	r3, [r7, #12]
}
 800addc:	bf00      	nop
 800adde:	e7fe      	b.n	800adde <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	3318      	adds	r3, #24
 800ade4:	4618      	mov	r0, r3
 800ade6:	f7fe fad6 	bl	8009396 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800adea:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <xTaskRemoveFromEventList+0xb0>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d11c      	bne.n	800ae2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800adf2:	693b      	ldr	r3, [r7, #16]
 800adf4:	3304      	adds	r3, #4
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fe facd 	bl	8009396 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	2201      	movs	r2, #1
 800ae02:	409a      	lsls	r2, r3
 800ae04:	4b17      	ldr	r3, [pc, #92]	; (800ae64 <xTaskRemoveFromEventList+0xb4>)
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	4313      	orrs	r3, r2
 800ae0a:	4a16      	ldr	r2, [pc, #88]	; (800ae64 <xTaskRemoveFromEventList+0xb4>)
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae12:	4613      	mov	r3, r2
 800ae14:	009b      	lsls	r3, r3, #2
 800ae16:	4413      	add	r3, r2
 800ae18:	009b      	lsls	r3, r3, #2
 800ae1a:	4a13      	ldr	r2, [pc, #76]	; (800ae68 <xTaskRemoveFromEventList+0xb8>)
 800ae1c:	441a      	add	r2, r3
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	3304      	adds	r3, #4
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f7fe fa59 	bl	80092dc <vListInsertEnd>
 800ae2a:	e005      	b.n	800ae38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	3318      	adds	r3, #24
 800ae30:	4619      	mov	r1, r3
 800ae32:	480e      	ldr	r0, [pc, #56]	; (800ae6c <xTaskRemoveFromEventList+0xbc>)
 800ae34:	f7fe fa52 	bl	80092dc <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae3c:	4b0c      	ldr	r3, [pc, #48]	; (800ae70 <xTaskRemoveFromEventList+0xc0>)
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae42:	429a      	cmp	r2, r3
 800ae44:	d905      	bls.n	800ae52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ae46:	2301      	movs	r3, #1
 800ae48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ae4a:	4b0a      	ldr	r3, [pc, #40]	; (800ae74 <xTaskRemoveFromEventList+0xc4>)
 800ae4c:	2201      	movs	r2, #1
 800ae4e:	601a      	str	r2, [r3, #0]
 800ae50:	e001      	b.n	800ae56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ae52:	2300      	movs	r3, #0
 800ae54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ae56:	697b      	ldr	r3, [r7, #20]
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	3718      	adds	r7, #24
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}
 800ae60:	20000a3c 	.word	0x20000a3c
 800ae64:	20000a1c 	.word	0x20000a1c
 800ae68:	20000918 	.word	0x20000918
 800ae6c:	200009d4 	.word	0x200009d4
 800ae70:	20000914 	.word	0x20000914
 800ae74:	20000a28 	.word	0x20000a28

0800ae78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b083      	sub	sp, #12
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ae80:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <vTaskInternalSetTimeOutState+0x24>)
 800ae82:	681a      	ldr	r2, [r3, #0]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ae88:	4b05      	ldr	r3, [pc, #20]	; (800aea0 <vTaskInternalSetTimeOutState+0x28>)
 800ae8a:	681a      	ldr	r2, [r3, #0]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	605a      	str	r2, [r3, #4]
}
 800ae90:	bf00      	nop
 800ae92:	370c      	adds	r7, #12
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr
 800ae9c:	20000a2c 	.word	0x20000a2c
 800aea0:	20000a18 	.word	0x20000a18

0800aea4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b088      	sub	sp, #32
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
 800aeac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d10c      	bne.n	800aece <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800aeb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb8:	b672      	cpsid	i
 800aeba:	f383 8811 	msr	BASEPRI, r3
 800aebe:	f3bf 8f6f 	isb	sy
 800aec2:	f3bf 8f4f 	dsb	sy
 800aec6:	b662      	cpsie	i
 800aec8:	613b      	str	r3, [r7, #16]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800aece:	683b      	ldr	r3, [r7, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d10c      	bne.n	800aeee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	b672      	cpsid	i
 800aeda:	f383 8811 	msr	BASEPRI, r3
 800aede:	f3bf 8f6f 	isb	sy
 800aee2:	f3bf 8f4f 	dsb	sy
 800aee6:	b662      	cpsie	i
 800aee8:	60fb      	str	r3, [r7, #12]
}
 800aeea:	bf00      	nop
 800aeec:	e7fe      	b.n	800aeec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800aeee:	f000 ffad 	bl	800be4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aef2:	4b1d      	ldr	r3, [pc, #116]	; (800af68 <xTaskCheckForTimeOut+0xc4>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	69ba      	ldr	r2, [r7, #24]
 800aefe:	1ad3      	subs	r3, r2, r3
 800af00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0a:	d102      	bne.n	800af12 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800af0c:	2300      	movs	r3, #0
 800af0e:	61fb      	str	r3, [r7, #28]
 800af10:	e023      	b.n	800af5a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	4b15      	ldr	r3, [pc, #84]	; (800af6c <xTaskCheckForTimeOut+0xc8>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d007      	beq.n	800af2e <xTaskCheckForTimeOut+0x8a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	429a      	cmp	r2, r3
 800af26:	d302      	bcc.n	800af2e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800af28:	2301      	movs	r3, #1
 800af2a:	61fb      	str	r3, [r7, #28]
 800af2c:	e015      	b.n	800af5a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	697a      	ldr	r2, [r7, #20]
 800af34:	429a      	cmp	r2, r3
 800af36:	d20b      	bcs.n	800af50 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	1ad2      	subs	r2, r2, r3
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f7ff ff97 	bl	800ae78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800af4a:	2300      	movs	r3, #0
 800af4c:	61fb      	str	r3, [r7, #28]
 800af4e:	e004      	b.n	800af5a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	2200      	movs	r2, #0
 800af54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800af56:	2301      	movs	r3, #1
 800af58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800af5a:	f000 ffab 	bl	800beb4 <vPortExitCritical>

	return xReturn;
 800af5e:	69fb      	ldr	r3, [r7, #28]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3720      	adds	r7, #32
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	20000a18 	.word	0x20000a18
 800af6c:	20000a2c 	.word	0x20000a2c

0800af70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800af70:	b480      	push	{r7}
 800af72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800af74:	4b03      	ldr	r3, [pc, #12]	; (800af84 <vTaskMissedYield+0x14>)
 800af76:	2201      	movs	r2, #1
 800af78:	601a      	str	r2, [r3, #0]
}
 800af7a:	bf00      	nop
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr
 800af84:	20000a28 	.word	0x20000a28

0800af88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b082      	sub	sp, #8
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800af90:	f000 f852 	bl	800b038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800af94:	4b06      	ldr	r3, [pc, #24]	; (800afb0 <prvIdleTask+0x28>)
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d9f9      	bls.n	800af90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af9c:	4b05      	ldr	r3, [pc, #20]	; (800afb4 <prvIdleTask+0x2c>)
 800af9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	f3bf 8f4f 	dsb	sy
 800afa8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800afac:	e7f0      	b.n	800af90 <prvIdleTask+0x8>
 800afae:	bf00      	nop
 800afb0:	20000918 	.word	0x20000918
 800afb4:	e000ed04 	.word	0xe000ed04

0800afb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b082      	sub	sp, #8
 800afbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afbe:	2300      	movs	r3, #0
 800afc0:	607b      	str	r3, [r7, #4]
 800afc2:	e00c      	b.n	800afde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800afc4:	687a      	ldr	r2, [r7, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4a12      	ldr	r2, [pc, #72]	; (800b018 <prvInitialiseTaskLists+0x60>)
 800afd0:	4413      	add	r3, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe f955 	bl	8009282 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3301      	adds	r3, #1
 800afdc:	607b      	str	r3, [r7, #4]
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2b06      	cmp	r3, #6
 800afe2:	d9ef      	bls.n	800afc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800afe4:	480d      	ldr	r0, [pc, #52]	; (800b01c <prvInitialiseTaskLists+0x64>)
 800afe6:	f7fe f94c 	bl	8009282 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800afea:	480d      	ldr	r0, [pc, #52]	; (800b020 <prvInitialiseTaskLists+0x68>)
 800afec:	f7fe f949 	bl	8009282 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800aff0:	480c      	ldr	r0, [pc, #48]	; (800b024 <prvInitialiseTaskLists+0x6c>)
 800aff2:	f7fe f946 	bl	8009282 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800aff6:	480c      	ldr	r0, [pc, #48]	; (800b028 <prvInitialiseTaskLists+0x70>)
 800aff8:	f7fe f943 	bl	8009282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800affc:	480b      	ldr	r0, [pc, #44]	; (800b02c <prvInitialiseTaskLists+0x74>)
 800affe:	f7fe f940 	bl	8009282 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <prvInitialiseTaskLists+0x78>)
 800b004:	4a05      	ldr	r2, [pc, #20]	; (800b01c <prvInitialiseTaskLists+0x64>)
 800b006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b008:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <prvInitialiseTaskLists+0x7c>)
 800b00a:	4a05      	ldr	r2, [pc, #20]	; (800b020 <prvInitialiseTaskLists+0x68>)
 800b00c:	601a      	str	r2, [r3, #0]
}
 800b00e:	bf00      	nop
 800b010:	3708      	adds	r7, #8
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}
 800b016:	bf00      	nop
 800b018:	20000918 	.word	0x20000918
 800b01c:	200009a4 	.word	0x200009a4
 800b020:	200009b8 	.word	0x200009b8
 800b024:	200009d4 	.word	0x200009d4
 800b028:	200009e8 	.word	0x200009e8
 800b02c:	20000a00 	.word	0x20000a00
 800b030:	200009cc 	.word	0x200009cc
 800b034:	200009d0 	.word	0x200009d0

0800b038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b038:	b580      	push	{r7, lr}
 800b03a:	b082      	sub	sp, #8
 800b03c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b03e:	e019      	b.n	800b074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b040:	f000 ff04 	bl	800be4c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b044:	4b10      	ldr	r3, [pc, #64]	; (800b088 <prvCheckTasksWaitingTermination+0x50>)
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	68db      	ldr	r3, [r3, #12]
 800b04a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	3304      	adds	r3, #4
 800b050:	4618      	mov	r0, r3
 800b052:	f7fe f9a0 	bl	8009396 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b056:	4b0d      	ldr	r3, [pc, #52]	; (800b08c <prvCheckTasksWaitingTermination+0x54>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	3b01      	subs	r3, #1
 800b05c:	4a0b      	ldr	r2, [pc, #44]	; (800b08c <prvCheckTasksWaitingTermination+0x54>)
 800b05e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b060:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <prvCheckTasksWaitingTermination+0x58>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	3b01      	subs	r3, #1
 800b066:	4a0a      	ldr	r2, [pc, #40]	; (800b090 <prvCheckTasksWaitingTermination+0x58>)
 800b068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b06a:	f000 ff23 	bl	800beb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 f810 	bl	800b094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b074:	4b06      	ldr	r3, [pc, #24]	; (800b090 <prvCheckTasksWaitingTermination+0x58>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1e1      	bne.n	800b040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	3708      	adds	r7, #8
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	200009e8 	.word	0x200009e8
 800b08c:	20000a14 	.word	0x20000a14
 800b090:	200009fc 	.word	0x200009fc

0800b094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d108      	bne.n	800b0b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f001 f8c4 	bl	800c238 <vPortFree>
				vPortFree( pxTCB );
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f001 f8c1 	bl	800c238 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b0b6:	e01a      	b.n	800b0ee <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d103      	bne.n	800b0ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f001 f8b8 	bl	800c238 <vPortFree>
	}
 800b0c8:	e011      	b.n	800b0ee <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0d0:	2b02      	cmp	r3, #2
 800b0d2:	d00c      	beq.n	800b0ee <prvDeleteTCB+0x5a>
	__asm volatile
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	b672      	cpsid	i
 800b0da:	f383 8811 	msr	BASEPRI, r3
 800b0de:	f3bf 8f6f 	isb	sy
 800b0e2:	f3bf 8f4f 	dsb	sy
 800b0e6:	b662      	cpsie	i
 800b0e8:	60fb      	str	r3, [r7, #12]
}
 800b0ea:	bf00      	nop
 800b0ec:	e7fe      	b.n	800b0ec <prvDeleteTCB+0x58>
	}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}
	...

0800b0f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b0f8:	b480      	push	{r7}
 800b0fa:	b083      	sub	sp, #12
 800b0fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0fe:	4b0c      	ldr	r3, [pc, #48]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d104      	bne.n	800b112 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b108:	4b0a      	ldr	r3, [pc, #40]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b10a:	f04f 32ff 	mov.w	r2, #4294967295
 800b10e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b110:	e008      	b.n	800b124 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b112:	4b07      	ldr	r3, [pc, #28]	; (800b130 <prvResetNextTaskUnblockTime+0x38>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68db      	ldr	r3, [r3, #12]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	685b      	ldr	r3, [r3, #4]
 800b120:	4a04      	ldr	r2, [pc, #16]	; (800b134 <prvResetNextTaskUnblockTime+0x3c>)
 800b122:	6013      	str	r3, [r2, #0]
}
 800b124:	bf00      	nop
 800b126:	370c      	adds	r7, #12
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	200009cc 	.word	0x200009cc
 800b134:	20000a34 	.word	0x20000a34

0800b138 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b13e:	4b0b      	ldr	r3, [pc, #44]	; (800b16c <xTaskGetSchedulerState+0x34>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d102      	bne.n	800b14c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b146:	2301      	movs	r3, #1
 800b148:	607b      	str	r3, [r7, #4]
 800b14a:	e008      	b.n	800b15e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b14c:	4b08      	ldr	r3, [pc, #32]	; (800b170 <xTaskGetSchedulerState+0x38>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d102      	bne.n	800b15a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b154:	2302      	movs	r3, #2
 800b156:	607b      	str	r3, [r7, #4]
 800b158:	e001      	b.n	800b15e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b15a:	2300      	movs	r3, #0
 800b15c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b15e:	687b      	ldr	r3, [r7, #4]
	}
 800b160:	4618      	mov	r0, r3
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	20000a20 	.word	0x20000a20
 800b170:	20000a3c 	.word	0x20000a3c

0800b174 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b180:	2300      	movs	r3, #0
 800b182:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d069      	beq.n	800b25e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b18e:	4b36      	ldr	r3, [pc, #216]	; (800b268 <xTaskPriorityInherit+0xf4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b194:	429a      	cmp	r2, r3
 800b196:	d259      	bcs.n	800b24c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	db06      	blt.n	800b1ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1a0:	4b31      	ldr	r3, [pc, #196]	; (800b268 <xTaskPriorityInherit+0xf4>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a6:	f1c3 0207 	rsb	r2, r3, #7
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	6959      	ldr	r1, [r3, #20]
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b6:	4613      	mov	r3, r2
 800b1b8:	009b      	lsls	r3, r3, #2
 800b1ba:	4413      	add	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4a2b      	ldr	r2, [pc, #172]	; (800b26c <xTaskPriorityInherit+0xf8>)
 800b1c0:	4413      	add	r3, r2
 800b1c2:	4299      	cmp	r1, r3
 800b1c4:	d13a      	bne.n	800b23c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f7fe f8e3 	bl	8009396 <uxListRemove>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d115      	bne.n	800b202 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1da:	4924      	ldr	r1, [pc, #144]	; (800b26c <xTaskPriorityInherit+0xf8>)
 800b1dc:	4613      	mov	r3, r2
 800b1de:	009b      	lsls	r3, r3, #2
 800b1e0:	4413      	add	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	440b      	add	r3, r1
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d10a      	bne.n	800b202 <xTaskPriorityInherit+0x8e>
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f6:	43da      	mvns	r2, r3
 800b1f8:	4b1d      	ldr	r3, [pc, #116]	; (800b270 <xTaskPriorityInherit+0xfc>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4013      	ands	r3, r2
 800b1fe:	4a1c      	ldr	r2, [pc, #112]	; (800b270 <xTaskPriorityInherit+0xfc>)
 800b200:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b202:	4b19      	ldr	r3, [pc, #100]	; (800b268 <xTaskPriorityInherit+0xf4>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	2201      	movs	r2, #1
 800b212:	409a      	lsls	r2, r3
 800b214:	4b16      	ldr	r3, [pc, #88]	; (800b270 <xTaskPriorityInherit+0xfc>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4313      	orrs	r3, r2
 800b21a:	4a15      	ldr	r2, [pc, #84]	; (800b270 <xTaskPriorityInherit+0xfc>)
 800b21c:	6013      	str	r3, [r2, #0]
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4613      	mov	r3, r2
 800b224:	009b      	lsls	r3, r3, #2
 800b226:	4413      	add	r3, r2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4a10      	ldr	r2, [pc, #64]	; (800b26c <xTaskPriorityInherit+0xf8>)
 800b22c:	441a      	add	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	3304      	adds	r3, #4
 800b232:	4619      	mov	r1, r3
 800b234:	4610      	mov	r0, r2
 800b236:	f7fe f851 	bl	80092dc <vListInsertEnd>
 800b23a:	e004      	b.n	800b246 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b23c:	4b0a      	ldr	r3, [pc, #40]	; (800b268 <xTaskPriorityInherit+0xf4>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b246:	2301      	movs	r3, #1
 800b248:	60fb      	str	r3, [r7, #12]
 800b24a:	e008      	b.n	800b25e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b250:	4b05      	ldr	r3, [pc, #20]	; (800b268 <xTaskPriorityInherit+0xf4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b256:	429a      	cmp	r2, r3
 800b258:	d201      	bcs.n	800b25e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b25a:	2301      	movs	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b25e:	68fb      	ldr	r3, [r7, #12]
	}
 800b260:	4618      	mov	r0, r3
 800b262:	3710      	adds	r7, #16
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	20000914 	.word	0x20000914
 800b26c:	20000918 	.word	0x20000918
 800b270:	20000a1c 	.word	0x20000a1c

0800b274 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b086      	sub	sp, #24
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2b00      	cmp	r3, #0
 800b288:	d072      	beq.n	800b370 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b28a:	4b3c      	ldr	r3, [pc, #240]	; (800b37c <xTaskPriorityDisinherit+0x108>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	693a      	ldr	r2, [r7, #16]
 800b290:	429a      	cmp	r2, r3
 800b292:	d00c      	beq.n	800b2ae <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	b672      	cpsid	i
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	b662      	cpsie	i
 800b2a8:	60fb      	str	r3, [r7, #12]
}
 800b2aa:	bf00      	nop
 800b2ac:	e7fe      	b.n	800b2ac <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10c      	bne.n	800b2d0 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800b2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ba:	b672      	cpsid	i
 800b2bc:	f383 8811 	msr	BASEPRI, r3
 800b2c0:	f3bf 8f6f 	isb	sy
 800b2c4:	f3bf 8f4f 	dsb	sy
 800b2c8:	b662      	cpsie	i
 800b2ca:	60bb      	str	r3, [r7, #8]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800b2d0:	693b      	ldr	r3, [r7, #16]
 800b2d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d4:	1e5a      	subs	r2, r3, #1
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d044      	beq.n	800b370 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d140      	bne.n	800b370 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe f84f 	bl	8009396 <uxListRemove>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d115      	bne.n	800b32a <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b302:	491f      	ldr	r1, [pc, #124]	; (800b380 <xTaskPriorityDisinherit+0x10c>)
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10a      	bne.n	800b32a <xTaskPriorityDisinherit+0xb6>
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b318:	2201      	movs	r2, #1
 800b31a:	fa02 f303 	lsl.w	r3, r2, r3
 800b31e:	43da      	mvns	r2, r3
 800b320:	4b18      	ldr	r3, [pc, #96]	; (800b384 <xTaskPriorityDisinherit+0x110>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4013      	ands	r3, r2
 800b326:	4a17      	ldr	r2, [pc, #92]	; (800b384 <xTaskPriorityDisinherit+0x110>)
 800b328:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b336:	f1c3 0207 	rsb	r2, r3, #7
 800b33a:	693b      	ldr	r3, [r7, #16]
 800b33c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b342:	2201      	movs	r2, #1
 800b344:	409a      	lsls	r2, r3
 800b346:	4b0f      	ldr	r3, [pc, #60]	; (800b384 <xTaskPriorityDisinherit+0x110>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	4a0d      	ldr	r2, [pc, #52]	; (800b384 <xTaskPriorityDisinherit+0x110>)
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	4a08      	ldr	r2, [pc, #32]	; (800b380 <xTaskPriorityDisinherit+0x10c>)
 800b35e:	441a      	add	r2, r3
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	3304      	adds	r3, #4
 800b364:	4619      	mov	r1, r3
 800b366:	4610      	mov	r0, r2
 800b368:	f7fd ffb8 	bl	80092dc <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b36c:	2301      	movs	r3, #1
 800b36e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b370:	697b      	ldr	r3, [r7, #20]
	}
 800b372:	4618      	mov	r0, r3
 800b374:	3718      	adds	r7, #24
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
 800b37a:	bf00      	nop
 800b37c:	20000914 	.word	0x20000914
 800b380:	20000918 	.word	0x20000918
 800b384:	20000a1c 	.word	0x20000a1c

0800b388 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b396:	2301      	movs	r3, #1
 800b398:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8087 	beq.w	800b4b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d10c      	bne.n	800b3c4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800b3aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ae:	b672      	cpsid	i
 800b3b0:	f383 8811 	msr	BASEPRI, r3
 800b3b4:	f3bf 8f6f 	isb	sy
 800b3b8:	f3bf 8f4f 	dsb	sy
 800b3bc:	b662      	cpsie	i
 800b3be:	60fb      	str	r3, [r7, #12]
}
 800b3c0:	bf00      	nop
 800b3c2:	e7fe      	b.n	800b3c2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b3c4:	69bb      	ldr	r3, [r7, #24]
 800b3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d902      	bls.n	800b3d4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	61fb      	str	r3, [r7, #28]
 800b3d2:	e002      	b.n	800b3da <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b3d4:	69bb      	ldr	r3, [r7, #24]
 800b3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3d8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3de:	69fa      	ldr	r2, [r7, #28]
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d065      	beq.n	800b4b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3e8:	697a      	ldr	r2, [r7, #20]
 800b3ea:	429a      	cmp	r2, r3
 800b3ec:	d160      	bne.n	800b4b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b3ee:	4b32      	ldr	r3, [pc, #200]	; (800b4b8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	69ba      	ldr	r2, [r7, #24]
 800b3f4:	429a      	cmp	r2, r3
 800b3f6:	d10c      	bne.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800b3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3fc:	b672      	cpsid	i
 800b3fe:	f383 8811 	msr	BASEPRI, r3
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	f3bf 8f4f 	dsb	sy
 800b40a:	b662      	cpsie	i
 800b40c:	60bb      	str	r3, [r7, #8]
}
 800b40e:	bf00      	nop
 800b410:	e7fe      	b.n	800b410 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b416:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	69fa      	ldr	r2, [r7, #28]
 800b41c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b41e:	69bb      	ldr	r3, [r7, #24]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	2b00      	cmp	r3, #0
 800b424:	db04      	blt.n	800b430 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	f1c3 0207 	rsb	r2, r3, #7
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	6959      	ldr	r1, [r3, #20]
 800b434:	693a      	ldr	r2, [r7, #16]
 800b436:	4613      	mov	r3, r2
 800b438:	009b      	lsls	r3, r3, #2
 800b43a:	4413      	add	r3, r2
 800b43c:	009b      	lsls	r3, r3, #2
 800b43e:	4a1f      	ldr	r2, [pc, #124]	; (800b4bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b440:	4413      	add	r3, r2
 800b442:	4299      	cmp	r1, r3
 800b444:	d134      	bne.n	800b4b0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b446:	69bb      	ldr	r3, [r7, #24]
 800b448:	3304      	adds	r3, #4
 800b44a:	4618      	mov	r0, r3
 800b44c:	f7fd ffa3 	bl	8009396 <uxListRemove>
 800b450:	4603      	mov	r3, r0
 800b452:	2b00      	cmp	r3, #0
 800b454:	d115      	bne.n	800b482 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b456:	69bb      	ldr	r3, [r7, #24]
 800b458:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b45a:	4918      	ldr	r1, [pc, #96]	; (800b4bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d10a      	bne.n	800b482 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b470:	2201      	movs	r2, #1
 800b472:	fa02 f303 	lsl.w	r3, r2, r3
 800b476:	43da      	mvns	r2, r3
 800b478:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4013      	ands	r3, r2
 800b47e:	4a10      	ldr	r2, [pc, #64]	; (800b4c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b480:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b482:	69bb      	ldr	r3, [r7, #24]
 800b484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b486:	2201      	movs	r2, #1
 800b488:	409a      	lsls	r2, r3
 800b48a:	4b0d      	ldr	r3, [pc, #52]	; (800b4c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	4313      	orrs	r3, r2
 800b490:	4a0b      	ldr	r2, [pc, #44]	; (800b4c0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	69bb      	ldr	r3, [r7, #24]
 800b496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b498:	4613      	mov	r3, r2
 800b49a:	009b      	lsls	r3, r3, #2
 800b49c:	4413      	add	r3, r2
 800b49e:	009b      	lsls	r3, r3, #2
 800b4a0:	4a06      	ldr	r2, [pc, #24]	; (800b4bc <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b4a2:	441a      	add	r2, r3
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	4619      	mov	r1, r3
 800b4aa:	4610      	mov	r0, r2
 800b4ac:	f7fd ff16 	bl	80092dc <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b4b0:	bf00      	nop
 800b4b2:	3720      	adds	r7, #32
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	bd80      	pop	{r7, pc}
 800b4b8:	20000914 	.word	0x20000914
 800b4bc:	20000918 	.word	0x20000918
 800b4c0:	20000a1c 	.word	0x20000a1c

0800b4c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b4c4:	b480      	push	{r7}
 800b4c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b4c8:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d004      	beq.n	800b4da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b4d0:	4b05      	ldr	r3, [pc, #20]	; (800b4e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4d6:	3201      	adds	r2, #1
 800b4d8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b4da:	4b03      	ldr	r3, [pc, #12]	; (800b4e8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
	}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr
 800b4e8:	20000914 	.word	0x20000914

0800b4ec <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b4f6:	4b29      	ldr	r3, [pc, #164]	; (800b59c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b4fc:	4b28      	ldr	r3, [pc, #160]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	3304      	adds	r3, #4
 800b502:	4618      	mov	r0, r3
 800b504:	f7fd ff47 	bl	8009396 <uxListRemove>
 800b508:	4603      	mov	r3, r0
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10b      	bne.n	800b526 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b50e:	4b24      	ldr	r3, [pc, #144]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b514:	2201      	movs	r2, #1
 800b516:	fa02 f303 	lsl.w	r3, r2, r3
 800b51a:	43da      	mvns	r2, r3
 800b51c:	4b21      	ldr	r3, [pc, #132]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	4013      	ands	r3, r2
 800b522:	4a20      	ldr	r2, [pc, #128]	; (800b5a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b524:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52c:	d10a      	bne.n	800b544 <prvAddCurrentTaskToDelayedList+0x58>
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	2b00      	cmp	r3, #0
 800b532:	d007      	beq.n	800b544 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b534:	4b1a      	ldr	r3, [pc, #104]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	3304      	adds	r3, #4
 800b53a:	4619      	mov	r1, r3
 800b53c:	481a      	ldr	r0, [pc, #104]	; (800b5a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b53e:	f7fd fecd 	bl	80092dc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b542:	e026      	b.n	800b592 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b544:	68fa      	ldr	r2, [r7, #12]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	4413      	add	r3, r2
 800b54a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b54c:	4b14      	ldr	r3, [pc, #80]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	68ba      	ldr	r2, [r7, #8]
 800b552:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d209      	bcs.n	800b570 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b55c:	4b13      	ldr	r3, [pc, #76]	; (800b5ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	4b0f      	ldr	r3, [pc, #60]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	3304      	adds	r3, #4
 800b566:	4619      	mov	r1, r3
 800b568:	4610      	mov	r0, r2
 800b56a:	f7fd fedb 	bl	8009324 <vListInsert>
}
 800b56e:	e010      	b.n	800b592 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b570:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b572:	681a      	ldr	r2, [r3, #0]
 800b574:	4b0a      	ldr	r3, [pc, #40]	; (800b5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3304      	adds	r3, #4
 800b57a:	4619      	mov	r1, r3
 800b57c:	4610      	mov	r0, r2
 800b57e:	f7fd fed1 	bl	8009324 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b582:	4b0c      	ldr	r3, [pc, #48]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68ba      	ldr	r2, [r7, #8]
 800b588:	429a      	cmp	r2, r3
 800b58a:	d202      	bcs.n	800b592 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b58c:	4a09      	ldr	r2, [pc, #36]	; (800b5b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	6013      	str	r3, [r2, #0]
}
 800b592:	bf00      	nop
 800b594:	3710      	adds	r7, #16
 800b596:	46bd      	mov	sp, r7
 800b598:	bd80      	pop	{r7, pc}
 800b59a:	bf00      	nop
 800b59c:	20000a18 	.word	0x20000a18
 800b5a0:	20000914 	.word	0x20000914
 800b5a4:	20000a1c 	.word	0x20000a1c
 800b5a8:	20000a00 	.word	0x20000a00
 800b5ac:	200009d0 	.word	0x200009d0
 800b5b0:	200009cc 	.word	0x200009cc
 800b5b4:	20000a34 	.word	0x20000a34

0800b5b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08a      	sub	sp, #40	; 0x28
 800b5bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b5c2:	f000 faf7 	bl	800bbb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b5c6:	4b1d      	ldr	r3, [pc, #116]	; (800b63c <xTimerCreateTimerTask+0x84>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d021      	beq.n	800b612 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b5d6:	1d3a      	adds	r2, r7, #4
 800b5d8:	f107 0108 	add.w	r1, r7, #8
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f7f5 f855 	bl	8000690 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b5e6:	6879      	ldr	r1, [r7, #4]
 800b5e8:	68bb      	ldr	r3, [r7, #8]
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	9202      	str	r2, [sp, #8]
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	2302      	movs	r3, #2
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	460a      	mov	r2, r1
 800b5f8:	4911      	ldr	r1, [pc, #68]	; (800b640 <xTimerCreateTimerTask+0x88>)
 800b5fa:	4812      	ldr	r0, [pc, #72]	; (800b644 <xTimerCreateTimerTask+0x8c>)
 800b5fc:	f7fe ff62 	bl	800a4c4 <xTaskCreateStatic>
 800b600:	4603      	mov	r3, r0
 800b602:	4a11      	ldr	r2, [pc, #68]	; (800b648 <xTimerCreateTimerTask+0x90>)
 800b604:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b606:	4b10      	ldr	r3, [pc, #64]	; (800b648 <xTimerCreateTimerTask+0x90>)
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d001      	beq.n	800b612 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b60e:	2301      	movs	r3, #1
 800b610:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b612:	697b      	ldr	r3, [r7, #20]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10c      	bne.n	800b632 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 800b618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61c:	b672      	cpsid	i
 800b61e:	f383 8811 	msr	BASEPRI, r3
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	f3bf 8f4f 	dsb	sy
 800b62a:	b662      	cpsie	i
 800b62c:	613b      	str	r3, [r7, #16]
}
 800b62e:	bf00      	nop
 800b630:	e7fe      	b.n	800b630 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800b632:	697b      	ldr	r3, [r7, #20]
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	20000a70 	.word	0x20000a70
 800b640:	0801e2c4 	.word	0x0801e2c4
 800b644:	0800b789 	.word	0x0800b789
 800b648:	20000a74 	.word	0x20000a74

0800b64c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b08a      	sub	sp, #40	; 0x28
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b65a:	2300      	movs	r3, #0
 800b65c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d10c      	bne.n	800b67e <xTimerGenericCommand+0x32>
	__asm volatile
 800b664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b668:	b672      	cpsid	i
 800b66a:	f383 8811 	msr	BASEPRI, r3
 800b66e:	f3bf 8f6f 	isb	sy
 800b672:	f3bf 8f4f 	dsb	sy
 800b676:	b662      	cpsie	i
 800b678:	623b      	str	r3, [r7, #32]
}
 800b67a:	bf00      	nop
 800b67c:	e7fe      	b.n	800b67c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b67e:	4b1a      	ldr	r3, [pc, #104]	; (800b6e8 <xTimerGenericCommand+0x9c>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d02a      	beq.n	800b6dc <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	2b05      	cmp	r3, #5
 800b696:	dc18      	bgt.n	800b6ca <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b698:	f7ff fd4e 	bl	800b138 <xTaskGetSchedulerState>
 800b69c:	4603      	mov	r3, r0
 800b69e:	2b02      	cmp	r3, #2
 800b6a0:	d109      	bne.n	800b6b6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b6a2:	4b11      	ldr	r3, [pc, #68]	; (800b6e8 <xTimerGenericCommand+0x9c>)
 800b6a4:	6818      	ldr	r0, [r3, #0]
 800b6a6:	f107 0114 	add.w	r1, r7, #20
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6ae:	f7fe f837 	bl	8009720 <xQueueGenericSend>
 800b6b2:	6278      	str	r0, [r7, #36]	; 0x24
 800b6b4:	e012      	b.n	800b6dc <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b6b6:	4b0c      	ldr	r3, [pc, #48]	; (800b6e8 <xTimerGenericCommand+0x9c>)
 800b6b8:	6818      	ldr	r0, [r3, #0]
 800b6ba:	f107 0114 	add.w	r1, r7, #20
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f7fe f82d 	bl	8009720 <xQueueGenericSend>
 800b6c6:	6278      	str	r0, [r7, #36]	; 0x24
 800b6c8:	e008      	b.n	800b6dc <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b6ca:	4b07      	ldr	r3, [pc, #28]	; (800b6e8 <xTimerGenericCommand+0x9c>)
 800b6cc:	6818      	ldr	r0, [r3, #0]
 800b6ce:	f107 0114 	add.w	r1, r7, #20
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	683a      	ldr	r2, [r7, #0]
 800b6d6:	f7fe f929 	bl	800992c <xQueueGenericSendFromISR>
 800b6da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3728      	adds	r7, #40	; 0x28
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20000a70 	.word	0x20000a70

0800b6ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b088      	sub	sp, #32
 800b6f0:	af02      	add	r7, sp, #8
 800b6f2:	6078      	str	r0, [r7, #4]
 800b6f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6f6:	4b23      	ldr	r3, [pc, #140]	; (800b784 <prvProcessExpiredTimer+0x98>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68db      	ldr	r3, [r3, #12]
 800b6fc:	68db      	ldr	r3, [r3, #12]
 800b6fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	3304      	adds	r3, #4
 800b704:	4618      	mov	r0, r3
 800b706:	f7fd fe46 	bl	8009396 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b70a:	697b      	ldr	r3, [r7, #20]
 800b70c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b710:	f003 0304 	and.w	r3, r3, #4
 800b714:	2b00      	cmp	r3, #0
 800b716:	d024      	beq.n	800b762 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	699a      	ldr	r2, [r3, #24]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	18d1      	adds	r1, r2, r3
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	6978      	ldr	r0, [r7, #20]
 800b726:	f000 f8d3 	bl	800b8d0 <prvInsertTimerInActiveList>
 800b72a:	4603      	mov	r3, r0
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d021      	beq.n	800b774 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b730:	2300      	movs	r3, #0
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	2300      	movs	r3, #0
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	2100      	movs	r1, #0
 800b73a:	6978      	ldr	r0, [r7, #20]
 800b73c:	f7ff ff86 	bl	800b64c <xTimerGenericCommand>
 800b740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	2b00      	cmp	r3, #0
 800b746:	d115      	bne.n	800b774 <prvProcessExpiredTimer+0x88>
	__asm volatile
 800b748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b74c:	b672      	cpsid	i
 800b74e:	f383 8811 	msr	BASEPRI, r3
 800b752:	f3bf 8f6f 	isb	sy
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	b662      	cpsie	i
 800b75c:	60fb      	str	r3, [r7, #12]
}
 800b75e:	bf00      	nop
 800b760:	e7fe      	b.n	800b760 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b762:	697b      	ldr	r3, [r7, #20]
 800b764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b768:	f023 0301 	bic.w	r3, r3, #1
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	697b      	ldr	r3, [r7, #20]
 800b770:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	6978      	ldr	r0, [r7, #20]
 800b77a:	4798      	blx	r3
}
 800b77c:	bf00      	nop
 800b77e:	3718      	adds	r7, #24
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20000a68 	.word	0x20000a68

0800b788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b790:	f107 0308 	add.w	r3, r7, #8
 800b794:	4618      	mov	r0, r3
 800b796:	f000 f857 	bl	800b848 <prvGetNextExpireTime>
 800b79a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	4619      	mov	r1, r3
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f000 f803 	bl	800b7ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b7a6:	f000 f8d5 	bl	800b954 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b7aa:	e7f1      	b.n	800b790 <prvTimerTask+0x8>

0800b7ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b084      	sub	sp, #16
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b7b6:	f7ff f8c1 	bl	800a93c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b7ba:	f107 0308 	add.w	r3, r7, #8
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f000 f866 	bl	800b890 <prvSampleTimeNow>
 800b7c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d130      	bne.n	800b82e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d10a      	bne.n	800b7e8 <prvProcessTimerOrBlockTask+0x3c>
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	429a      	cmp	r2, r3
 800b7d8:	d806      	bhi.n	800b7e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b7da:	f7ff f8bd 	bl	800a958 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b7de:	68f9      	ldr	r1, [r7, #12]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	f7ff ff83 	bl	800b6ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b7e6:	e024      	b.n	800b832 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d008      	beq.n	800b800 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b7ee:	4b13      	ldr	r3, [pc, #76]	; (800b83c <prvProcessTimerOrBlockTask+0x90>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d101      	bne.n	800b7fc <prvProcessTimerOrBlockTask+0x50>
 800b7f8:	2301      	movs	r3, #1
 800b7fa:	e000      	b.n	800b7fe <prvProcessTimerOrBlockTask+0x52>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b800:	4b0f      	ldr	r3, [pc, #60]	; (800b840 <prvProcessTimerOrBlockTask+0x94>)
 800b802:	6818      	ldr	r0, [r3, #0]
 800b804:	687a      	ldr	r2, [r7, #4]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	1ad3      	subs	r3, r2, r3
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4619      	mov	r1, r3
 800b80e:	f7fe fe25 	bl	800a45c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b812:	f7ff f8a1 	bl	800a958 <xTaskResumeAll>
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d10a      	bne.n	800b832 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b81c:	4b09      	ldr	r3, [pc, #36]	; (800b844 <prvProcessTimerOrBlockTask+0x98>)
 800b81e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b822:	601a      	str	r2, [r3, #0]
 800b824:	f3bf 8f4f 	dsb	sy
 800b828:	f3bf 8f6f 	isb	sy
}
 800b82c:	e001      	b.n	800b832 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b82e:	f7ff f893 	bl	800a958 <xTaskResumeAll>
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}
 800b83a:	bf00      	nop
 800b83c:	20000a6c 	.word	0x20000a6c
 800b840:	20000a70 	.word	0x20000a70
 800b844:	e000ed04 	.word	0xe000ed04

0800b848 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b848:	b480      	push	{r7}
 800b84a:	b085      	sub	sp, #20
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b850:	4b0e      	ldr	r3, [pc, #56]	; (800b88c <prvGetNextExpireTime+0x44>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <prvGetNextExpireTime+0x16>
 800b85a:	2201      	movs	r2, #1
 800b85c:	e000      	b.n	800b860 <prvGetNextExpireTime+0x18>
 800b85e:	2200      	movs	r2, #0
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d105      	bne.n	800b878 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b86c:	4b07      	ldr	r3, [pc, #28]	; (800b88c <prvGetNextExpireTime+0x44>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	60fb      	str	r3, [r7, #12]
 800b876:	e001      	b.n	800b87c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b878:	2300      	movs	r3, #0
 800b87a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b87c:	68fb      	ldr	r3, [r7, #12]
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3714      	adds	r7, #20
 800b882:	46bd      	mov	sp, r7
 800b884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop
 800b88c:	20000a68 	.word	0x20000a68

0800b890 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b890:	b580      	push	{r7, lr}
 800b892:	b084      	sub	sp, #16
 800b894:	af00      	add	r7, sp, #0
 800b896:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b898:	f7ff f8fc 	bl	800aa94 <xTaskGetTickCount>
 800b89c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b89e:	4b0b      	ldr	r3, [pc, #44]	; (800b8cc <prvSampleTimeNow+0x3c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d205      	bcs.n	800b8b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b8a8:	f000 f91e 	bl	800bae8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2201      	movs	r2, #1
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e002      	b.n	800b8ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2200      	movs	r2, #0
 800b8b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b8ba:	4a04      	ldr	r2, [pc, #16]	; (800b8cc <prvSampleTimeNow+0x3c>)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	20000a78 	.word	0x20000a78

0800b8d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b086      	sub	sp, #24
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
 800b8dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	68ba      	ldr	r2, [r7, #8]
 800b8e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	68fa      	ldr	r2, [r7, #12]
 800b8ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d812      	bhi.n	800b91c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	1ad2      	subs	r2, r2, r3
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	429a      	cmp	r2, r3
 800b902:	d302      	bcc.n	800b90a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b904:	2301      	movs	r3, #1
 800b906:	617b      	str	r3, [r7, #20]
 800b908:	e01b      	b.n	800b942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b90a:	4b10      	ldr	r3, [pc, #64]	; (800b94c <prvInsertTimerInActiveList+0x7c>)
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3304      	adds	r3, #4
 800b912:	4619      	mov	r1, r3
 800b914:	4610      	mov	r0, r2
 800b916:	f7fd fd05 	bl	8009324 <vListInsert>
 800b91a:	e012      	b.n	800b942 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b91c:	687a      	ldr	r2, [r7, #4]
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	429a      	cmp	r2, r3
 800b922:	d206      	bcs.n	800b932 <prvInsertTimerInActiveList+0x62>
 800b924:	68ba      	ldr	r2, [r7, #8]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d302      	bcc.n	800b932 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b92c:	2301      	movs	r3, #1
 800b92e:	617b      	str	r3, [r7, #20]
 800b930:	e007      	b.n	800b942 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b932:	4b07      	ldr	r3, [pc, #28]	; (800b950 <prvInsertTimerInActiveList+0x80>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fcf1 	bl	8009324 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b942:	697b      	ldr	r3, [r7, #20]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3718      	adds	r7, #24
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}
 800b94c:	20000a6c 	.word	0x20000a6c
 800b950:	20000a68 	.word	0x20000a68

0800b954 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b08c      	sub	sp, #48	; 0x30
 800b958:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b95a:	e0b2      	b.n	800bac2 <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	f2c0 80ae 	blt.w	800bac0 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b96a:	695b      	ldr	r3, [r3, #20]
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d004      	beq.n	800b97a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f7fd fd0e 	bl	8009396 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b97a:	1d3b      	adds	r3, r7, #4
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff ff87 	bl	800b890 <prvSampleTimeNow>
 800b982:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b09      	cmp	r3, #9
 800b988:	f200 809b 	bhi.w	800bac2 <prvProcessReceivedCommands+0x16e>
 800b98c:	a201      	add	r2, pc, #4	; (adr r2, 800b994 <prvProcessReceivedCommands+0x40>)
 800b98e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b992:	bf00      	nop
 800b994:	0800b9bd 	.word	0x0800b9bd
 800b998:	0800b9bd 	.word	0x0800b9bd
 800b99c:	0800b9bd 	.word	0x0800b9bd
 800b9a0:	0800ba35 	.word	0x0800ba35
 800b9a4:	0800ba49 	.word	0x0800ba49
 800b9a8:	0800ba97 	.word	0x0800ba97
 800b9ac:	0800b9bd 	.word	0x0800b9bd
 800b9b0:	0800b9bd 	.word	0x0800b9bd
 800b9b4:	0800ba35 	.word	0x0800ba35
 800b9b8:	0800ba49 	.word	0x0800ba49
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9c2:	f043 0301 	orr.w	r3, r3, #1
 800b9c6:	b2da      	uxtb	r2, r3
 800b9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b9ce:	68fa      	ldr	r2, [r7, #12]
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9d2:	699b      	ldr	r3, [r3, #24]
 800b9d4:	18d1      	adds	r1, r2, r3
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a3a      	ldr	r2, [r7, #32]
 800b9da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9dc:	f7ff ff78 	bl	800b8d0 <prvInsertTimerInActiveList>
 800b9e0:	4603      	mov	r3, r0
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d06d      	beq.n	800bac2 <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9e8:	6a1b      	ldr	r3, [r3, #32]
 800b9ea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b9ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b9f4:	f003 0304 	and.w	r3, r3, #4
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d062      	beq.n	800bac2 <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b9fc:	68fa      	ldr	r2, [r7, #12]
 800b9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba00:	699b      	ldr	r3, [r3, #24]
 800ba02:	441a      	add	r2, r3
 800ba04:	2300      	movs	r3, #0
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba0e:	f7ff fe1d 	bl	800b64c <xTimerGenericCommand>
 800ba12:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800ba14:	69fb      	ldr	r3, [r7, #28]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d153      	bne.n	800bac2 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 800ba1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba1e:	b672      	cpsid	i
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	b662      	cpsie	i
 800ba2e:	61bb      	str	r3, [r7, #24]
}
 800ba30:	bf00      	nop
 800ba32:	e7fe      	b.n	800ba32 <prvProcessReceivedCommands+0xde>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba3a:	f023 0301 	bic.w	r3, r3, #1
 800ba3e:	b2da      	uxtb	r2, r3
 800ba40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800ba46:	e03c      	b.n	800bac2 <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba4e:	f043 0301 	orr.w	r3, r3, #1
 800ba52:	b2da      	uxtb	r2, r3
 800ba54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba5e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ba60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba62:	699b      	ldr	r3, [r3, #24]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10c      	bne.n	800ba82 <prvProcessReceivedCommands+0x12e>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba6c:	b672      	cpsid	i
 800ba6e:	f383 8811 	msr	BASEPRI, r3
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	f3bf 8f4f 	dsb	sy
 800ba7a:	b662      	cpsie	i
 800ba7c:	617b      	str	r3, [r7, #20]
}
 800ba7e:	bf00      	nop
 800ba80:	e7fe      	b.n	800ba80 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	699a      	ldr	r2, [r3, #24]
 800ba86:	6a3b      	ldr	r3, [r7, #32]
 800ba88:	18d1      	adds	r1, r2, r3
 800ba8a:	6a3b      	ldr	r3, [r7, #32]
 800ba8c:	6a3a      	ldr	r2, [r7, #32]
 800ba8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ba90:	f7ff ff1e 	bl	800b8d0 <prvInsertTimerInActiveList>
					break;
 800ba94:	e015      	b.n	800bac2 <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d103      	bne.n	800baac <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800baa4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800baa6:	f000 fbc7 	bl	800c238 <vPortFree>
 800baaa:	e00a      	b.n	800bac2 <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bab2:	f023 0301 	bic.w	r3, r3, #1
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800babe:	e000      	b.n	800bac2 <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bac0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bac2:	4b08      	ldr	r3, [pc, #32]	; (800bae4 <prvProcessReceivedCommands+0x190>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f107 0108 	add.w	r1, r7, #8
 800baca:	2200      	movs	r2, #0
 800bacc:	4618      	mov	r0, r3
 800bace:	f7fe f863 	bl	8009b98 <xQueueReceive>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	f47f af41 	bne.w	800b95c <prvProcessReceivedCommands+0x8>
	}
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	3728      	adds	r7, #40	; 0x28
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}
 800bae4:	20000a70 	.word	0x20000a70

0800bae8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b088      	sub	sp, #32
 800baec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800baee:	e04a      	b.n	800bb86 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800baf0:	4b2e      	ldr	r3, [pc, #184]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bafa:	4b2c      	ldr	r3, [pc, #176]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	3304      	adds	r3, #4
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7fd fc44 	bl	8009396 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	6a1b      	ldr	r3, [r3, #32]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800bb1c:	f003 0304 	and.w	r3, r3, #4
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d030      	beq.n	800bb86 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	699b      	ldr	r3, [r3, #24]
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	4413      	add	r3, r2
 800bb2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	429a      	cmp	r2, r3
 800bb34:	d90e      	bls.n	800bb54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	68ba      	ldr	r2, [r7, #8]
 800bb3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	68fa      	ldr	r2, [r7, #12]
 800bb40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb42:	4b1a      	ldr	r3, [pc, #104]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	3304      	adds	r3, #4
 800bb4a:	4619      	mov	r1, r3
 800bb4c:	4610      	mov	r0, r2
 800bb4e:	f7fd fbe9 	bl	8009324 <vListInsert>
 800bb52:	e018      	b.n	800bb86 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bb54:	2300      	movs	r3, #0
 800bb56:	9300      	str	r3, [sp, #0]
 800bb58:	2300      	movs	r3, #0
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	68f8      	ldr	r0, [r7, #12]
 800bb60:	f7ff fd74 	bl	800b64c <xTimerGenericCommand>
 800bb64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d10c      	bne.n	800bb86 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800bb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb70:	b672      	cpsid	i
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	b662      	cpsie	i
 800bb80:	603b      	str	r3, [r7, #0]
}
 800bb82:	bf00      	nop
 800bb84:	e7fe      	b.n	800bb84 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bb86:	4b09      	ldr	r3, [pc, #36]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1af      	bne.n	800baf0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bb90:	4b06      	ldr	r3, [pc, #24]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bb96:	4b06      	ldr	r3, [pc, #24]	; (800bbb0 <prvSwitchTimerLists+0xc8>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4a04      	ldr	r2, [pc, #16]	; (800bbac <prvSwitchTimerLists+0xc4>)
 800bb9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bb9e:	4a04      	ldr	r2, [pc, #16]	; (800bbb0 <prvSwitchTimerLists+0xc8>)
 800bba0:	697b      	ldr	r3, [r7, #20]
 800bba2:	6013      	str	r3, [r2, #0]
}
 800bba4:	bf00      	nop
 800bba6:	3718      	adds	r7, #24
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	20000a68 	.word	0x20000a68
 800bbb0:	20000a6c 	.word	0x20000a6c

0800bbb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bbba:	f000 f947 	bl	800be4c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bbbe:	4b15      	ldr	r3, [pc, #84]	; (800bc14 <prvCheckForValidListAndQueue+0x60>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d120      	bne.n	800bc08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bbc6:	4814      	ldr	r0, [pc, #80]	; (800bc18 <prvCheckForValidListAndQueue+0x64>)
 800bbc8:	f7fd fb5b 	bl	8009282 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bbcc:	4813      	ldr	r0, [pc, #76]	; (800bc1c <prvCheckForValidListAndQueue+0x68>)
 800bbce:	f7fd fb58 	bl	8009282 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bbd2:	4b13      	ldr	r3, [pc, #76]	; (800bc20 <prvCheckForValidListAndQueue+0x6c>)
 800bbd4:	4a10      	ldr	r2, [pc, #64]	; (800bc18 <prvCheckForValidListAndQueue+0x64>)
 800bbd6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bbd8:	4b12      	ldr	r3, [pc, #72]	; (800bc24 <prvCheckForValidListAndQueue+0x70>)
 800bbda:	4a10      	ldr	r2, [pc, #64]	; (800bc1c <prvCheckForValidListAndQueue+0x68>)
 800bbdc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800bbde:	2300      	movs	r3, #0
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	4b11      	ldr	r3, [pc, #68]	; (800bc28 <prvCheckForValidListAndQueue+0x74>)
 800bbe4:	4a11      	ldr	r2, [pc, #68]	; (800bc2c <prvCheckForValidListAndQueue+0x78>)
 800bbe6:	210c      	movs	r1, #12
 800bbe8:	200a      	movs	r0, #10
 800bbea:	f7fd fc69 	bl	80094c0 <xQueueGenericCreateStatic>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4a08      	ldr	r2, [pc, #32]	; (800bc14 <prvCheckForValidListAndQueue+0x60>)
 800bbf2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bbf4:	4b07      	ldr	r3, [pc, #28]	; (800bc14 <prvCheckForValidListAndQueue+0x60>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bbfc:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <prvCheckForValidListAndQueue+0x60>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	490b      	ldr	r1, [pc, #44]	; (800bc30 <prvCheckForValidListAndQueue+0x7c>)
 800bc02:	4618      	mov	r0, r3
 800bc04:	f7fe fbd6 	bl	800a3b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc08:	f000 f954 	bl	800beb4 <vPortExitCritical>
}
 800bc0c:	bf00      	nop
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	20000a70 	.word	0x20000a70
 800bc18:	20000a40 	.word	0x20000a40
 800bc1c:	20000a54 	.word	0x20000a54
 800bc20:	20000a68 	.word	0x20000a68
 800bc24:	20000a6c 	.word	0x20000a6c
 800bc28:	20000af4 	.word	0x20000af4
 800bc2c:	20000a7c 	.word	0x20000a7c
 800bc30:	0801e2cc 	.word	0x0801e2cc

0800bc34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b085      	sub	sp, #20
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	60f8      	str	r0, [r7, #12]
 800bc3c:	60b9      	str	r1, [r7, #8]
 800bc3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	3b04      	subs	r3, #4
 800bc44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800bc4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	3b04      	subs	r3, #4
 800bc52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	f023 0201 	bic.w	r2, r3, #1
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	3b04      	subs	r3, #4
 800bc62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bc64:	4a0c      	ldr	r2, [pc, #48]	; (800bc98 <pxPortInitialiseStack+0x64>)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	3b14      	subs	r3, #20
 800bc6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	3b04      	subs	r3, #4
 800bc7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f06f 0202 	mvn.w	r2, #2
 800bc82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	3b20      	subs	r3, #32
 800bc88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
}
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	3714      	adds	r7, #20
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr
 800bc98:	0800bc9d 	.word	0x0800bc9d

0800bc9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bc9c:	b480      	push	{r7}
 800bc9e:	b085      	sub	sp, #20
 800bca0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bca2:	2300      	movs	r3, #0
 800bca4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bca6:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <prvTaskExitError+0x5c>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcae:	d00c      	beq.n	800bcca <prvTaskExitError+0x2e>
	__asm volatile
 800bcb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb4:	b672      	cpsid	i
 800bcb6:	f383 8811 	msr	BASEPRI, r3
 800bcba:	f3bf 8f6f 	isb	sy
 800bcbe:	f3bf 8f4f 	dsb	sy
 800bcc2:	b662      	cpsie	i
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	e7fe      	b.n	800bcc8 <prvTaskExitError+0x2c>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	b672      	cpsid	i
 800bcd0:	f383 8811 	msr	BASEPRI, r3
 800bcd4:	f3bf 8f6f 	isb	sy
 800bcd8:	f3bf 8f4f 	dsb	sy
 800bcdc:	b662      	cpsie	i
 800bcde:	60bb      	str	r3, [r7, #8]
}
 800bce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bce2:	bf00      	nop
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d0fc      	beq.n	800bce4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bcea:	bf00      	nop
 800bcec:	bf00      	nop
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr
 800bcf8:	2000000c 	.word	0x2000000c
 800bcfc:	00000000 	.word	0x00000000

0800bd00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bd00:	4b07      	ldr	r3, [pc, #28]	; (800bd20 <pxCurrentTCBConst2>)
 800bd02:	6819      	ldr	r1, [r3, #0]
 800bd04:	6808      	ldr	r0, [r1, #0]
 800bd06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd0a:	f380 8809 	msr	PSP, r0
 800bd0e:	f3bf 8f6f 	isb	sy
 800bd12:	f04f 0000 	mov.w	r0, #0
 800bd16:	f380 8811 	msr	BASEPRI, r0
 800bd1a:	4770      	bx	lr
 800bd1c:	f3af 8000 	nop.w

0800bd20 <pxCurrentTCBConst2>:
 800bd20:	20000914 	.word	0x20000914
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bd24:	bf00      	nop
 800bd26:	bf00      	nop

0800bd28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bd28:	4808      	ldr	r0, [pc, #32]	; (800bd4c <prvPortStartFirstTask+0x24>)
 800bd2a:	6800      	ldr	r0, [r0, #0]
 800bd2c:	6800      	ldr	r0, [r0, #0]
 800bd2e:	f380 8808 	msr	MSP, r0
 800bd32:	f04f 0000 	mov.w	r0, #0
 800bd36:	f380 8814 	msr	CONTROL, r0
 800bd3a:	b662      	cpsie	i
 800bd3c:	b661      	cpsie	f
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	df00      	svc	0
 800bd48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bd4a:	bf00      	nop
 800bd4c:	e000ed08 	.word	0xe000ed08

0800bd50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b084      	sub	sp, #16
 800bd54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bd56:	4b37      	ldr	r3, [pc, #220]	; (800be34 <xPortStartScheduler+0xe4>)
 800bd58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	22ff      	movs	r2, #255	; 0xff
 800bd66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	b2db      	uxtb	r3, r3
 800bd6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bd70:	78fb      	ldrb	r3, [r7, #3]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bd78:	b2da      	uxtb	r2, r3
 800bd7a:	4b2f      	ldr	r3, [pc, #188]	; (800be38 <xPortStartScheduler+0xe8>)
 800bd7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bd7e:	4b2f      	ldr	r3, [pc, #188]	; (800be3c <xPortStartScheduler+0xec>)
 800bd80:	2207      	movs	r2, #7
 800bd82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd84:	e009      	b.n	800bd9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800bd86:	4b2d      	ldr	r3, [pc, #180]	; (800be3c <xPortStartScheduler+0xec>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	4a2b      	ldr	r2, [pc, #172]	; (800be3c <xPortStartScheduler+0xec>)
 800bd8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bd90:	78fb      	ldrb	r3, [r7, #3]
 800bd92:	b2db      	uxtb	r3, r3
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	b2db      	uxtb	r3, r3
 800bd98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bd9a:	78fb      	ldrb	r3, [r7, #3]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bda2:	2b80      	cmp	r3, #128	; 0x80
 800bda4:	d0ef      	beq.n	800bd86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bda6:	4b25      	ldr	r3, [pc, #148]	; (800be3c <xPortStartScheduler+0xec>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f1c3 0307 	rsb	r3, r3, #7
 800bdae:	2b04      	cmp	r3, #4
 800bdb0:	d00c      	beq.n	800bdcc <xPortStartScheduler+0x7c>
	__asm volatile
 800bdb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdb6:	b672      	cpsid	i
 800bdb8:	f383 8811 	msr	BASEPRI, r3
 800bdbc:	f3bf 8f6f 	isb	sy
 800bdc0:	f3bf 8f4f 	dsb	sy
 800bdc4:	b662      	cpsie	i
 800bdc6:	60bb      	str	r3, [r7, #8]
}
 800bdc8:	bf00      	nop
 800bdca:	e7fe      	b.n	800bdca <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bdcc:	4b1b      	ldr	r3, [pc, #108]	; (800be3c <xPortStartScheduler+0xec>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	021b      	lsls	r3, r3, #8
 800bdd2:	4a1a      	ldr	r2, [pc, #104]	; (800be3c <xPortStartScheduler+0xec>)
 800bdd4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bdd6:	4b19      	ldr	r3, [pc, #100]	; (800be3c <xPortStartScheduler+0xec>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bdde:	4a17      	ldr	r2, [pc, #92]	; (800be3c <xPortStartScheduler+0xec>)
 800bde0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	b2da      	uxtb	r2, r3
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bdea:	4b15      	ldr	r3, [pc, #84]	; (800be40 <xPortStartScheduler+0xf0>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a14      	ldr	r2, [pc, #80]	; (800be40 <xPortStartScheduler+0xf0>)
 800bdf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdf4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdf6:	4b12      	ldr	r3, [pc, #72]	; (800be40 <xPortStartScheduler+0xf0>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	4a11      	ldr	r2, [pc, #68]	; (800be40 <xPortStartScheduler+0xf0>)
 800bdfc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800be00:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800be02:	f000 f8dd 	bl	800bfc0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800be06:	4b0f      	ldr	r3, [pc, #60]	; (800be44 <xPortStartScheduler+0xf4>)
 800be08:	2200      	movs	r2, #0
 800be0a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800be0c:	f000 f8fc 	bl	800c008 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800be10:	4b0d      	ldr	r3, [pc, #52]	; (800be48 <xPortStartScheduler+0xf8>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a0c      	ldr	r2, [pc, #48]	; (800be48 <xPortStartScheduler+0xf8>)
 800be16:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800be1a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800be1c:	f7ff ff84 	bl	800bd28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800be20:	f7fe ff14 	bl	800ac4c <vTaskSwitchContext>
	prvTaskExitError();
 800be24:	f7ff ff3a 	bl	800bc9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800be28:	2300      	movs	r3, #0
}
 800be2a:	4618      	mov	r0, r3
 800be2c:	3710      	adds	r7, #16
 800be2e:	46bd      	mov	sp, r7
 800be30:	bd80      	pop	{r7, pc}
 800be32:	bf00      	nop
 800be34:	e000e400 	.word	0xe000e400
 800be38:	20000b3c 	.word	0x20000b3c
 800be3c:	20000b40 	.word	0x20000b40
 800be40:	e000ed20 	.word	0xe000ed20
 800be44:	2000000c 	.word	0x2000000c
 800be48:	e000ef34 	.word	0xe000ef34

0800be4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be56:	b672      	cpsid	i
 800be58:	f383 8811 	msr	BASEPRI, r3
 800be5c:	f3bf 8f6f 	isb	sy
 800be60:	f3bf 8f4f 	dsb	sy
 800be64:	b662      	cpsie	i
 800be66:	607b      	str	r3, [r7, #4]
}
 800be68:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800be6a:	4b10      	ldr	r3, [pc, #64]	; (800beac <vPortEnterCritical+0x60>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	3301      	adds	r3, #1
 800be70:	4a0e      	ldr	r2, [pc, #56]	; (800beac <vPortEnterCritical+0x60>)
 800be72:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800be74:	4b0d      	ldr	r3, [pc, #52]	; (800beac <vPortEnterCritical+0x60>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	2b01      	cmp	r3, #1
 800be7a:	d111      	bne.n	800bea0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800be7c:	4b0c      	ldr	r3, [pc, #48]	; (800beb0 <vPortEnterCritical+0x64>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	b2db      	uxtb	r3, r3
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00c      	beq.n	800bea0 <vPortEnterCritical+0x54>
	__asm volatile
 800be86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be8a:	b672      	cpsid	i
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	b662      	cpsie	i
 800be9a:	603b      	str	r3, [r7, #0]
}
 800be9c:	bf00      	nop
 800be9e:	e7fe      	b.n	800be9e <vPortEnterCritical+0x52>
	}
}
 800bea0:	bf00      	nop
 800bea2:	370c      	adds	r7, #12
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr
 800beac:	2000000c 	.word	0x2000000c
 800beb0:	e000ed04 	.word	0xe000ed04

0800beb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800beb4:	b480      	push	{r7}
 800beb6:	b083      	sub	sp, #12
 800beb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800beba:	4b13      	ldr	r3, [pc, #76]	; (800bf08 <vPortExitCritical+0x54>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10c      	bne.n	800bedc <vPortExitCritical+0x28>
	__asm volatile
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	b672      	cpsid	i
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	b662      	cpsie	i
 800bed6:	607b      	str	r3, [r7, #4]
}
 800bed8:	bf00      	nop
 800beda:	e7fe      	b.n	800beda <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800bedc:	4b0a      	ldr	r3, [pc, #40]	; (800bf08 <vPortExitCritical+0x54>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	3b01      	subs	r3, #1
 800bee2:	4a09      	ldr	r2, [pc, #36]	; (800bf08 <vPortExitCritical+0x54>)
 800bee4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bee6:	4b08      	ldr	r3, [pc, #32]	; (800bf08 <vPortExitCritical+0x54>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d105      	bne.n	800befa <vPortExitCritical+0x46>
 800beee:	2300      	movs	r3, #0
 800bef0:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	f383 8811 	msr	BASEPRI, r3
}
 800bef8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800befa:	bf00      	nop
 800befc:	370c      	adds	r7, #12
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2000000c 	.word	0x2000000c
 800bf0c:	00000000 	.word	0x00000000

0800bf10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bf10:	f3ef 8009 	mrs	r0, PSP
 800bf14:	f3bf 8f6f 	isb	sy
 800bf18:	4b15      	ldr	r3, [pc, #84]	; (800bf70 <pxCurrentTCBConst>)
 800bf1a:	681a      	ldr	r2, [r3, #0]
 800bf1c:	f01e 0f10 	tst.w	lr, #16
 800bf20:	bf08      	it	eq
 800bf22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bf26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf2a:	6010      	str	r0, [r2, #0]
 800bf2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bf30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bf34:	b672      	cpsid	i
 800bf36:	f380 8811 	msr	BASEPRI, r0
 800bf3a:	f3bf 8f4f 	dsb	sy
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	b662      	cpsie	i
 800bf44:	f7fe fe82 	bl	800ac4c <vTaskSwitchContext>
 800bf48:	f04f 0000 	mov.w	r0, #0
 800bf4c:	f380 8811 	msr	BASEPRI, r0
 800bf50:	bc09      	pop	{r0, r3}
 800bf52:	6819      	ldr	r1, [r3, #0]
 800bf54:	6808      	ldr	r0, [r1, #0]
 800bf56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5a:	f01e 0f10 	tst.w	lr, #16
 800bf5e:	bf08      	it	eq
 800bf60:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bf64:	f380 8809 	msr	PSP, r0
 800bf68:	f3bf 8f6f 	isb	sy
 800bf6c:	4770      	bx	lr
 800bf6e:	bf00      	nop

0800bf70 <pxCurrentTCBConst>:
 800bf70:	20000914 	.word	0x20000914
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop

0800bf78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	b672      	cpsid	i
 800bf84:	f383 8811 	msr	BASEPRI, r3
 800bf88:	f3bf 8f6f 	isb	sy
 800bf8c:	f3bf 8f4f 	dsb	sy
 800bf90:	b662      	cpsie	i
 800bf92:	607b      	str	r3, [r7, #4]
}
 800bf94:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bf96:	f7fe fd9f 	bl	800aad8 <xTaskIncrementTick>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d003      	beq.n	800bfa8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bfa0:	4b06      	ldr	r3, [pc, #24]	; (800bfbc <SysTick_Handler+0x44>)
 800bfa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfa6:	601a      	str	r2, [r3, #0]
 800bfa8:	2300      	movs	r3, #0
 800bfaa:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	f383 8811 	msr	BASEPRI, r3
}
 800bfb2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bfb4:	bf00      	nop
 800bfb6:	3708      	adds	r7, #8
 800bfb8:	46bd      	mov	sp, r7
 800bfba:	bd80      	pop	{r7, pc}
 800bfbc:	e000ed04 	.word	0xe000ed04

0800bfc0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bfc0:	b480      	push	{r7}
 800bfc2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bfc4:	4b0b      	ldr	r3, [pc, #44]	; (800bff4 <vPortSetupTimerInterrupt+0x34>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bfca:	4b0b      	ldr	r3, [pc, #44]	; (800bff8 <vPortSetupTimerInterrupt+0x38>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <vPortSetupTimerInterrupt+0x3c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a0a      	ldr	r2, [pc, #40]	; (800c000 <vPortSetupTimerInterrupt+0x40>)
 800bfd6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfda:	099b      	lsrs	r3, r3, #6
 800bfdc:	4a09      	ldr	r2, [pc, #36]	; (800c004 <vPortSetupTimerInterrupt+0x44>)
 800bfde:	3b01      	subs	r3, #1
 800bfe0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bfe2:	4b04      	ldr	r3, [pc, #16]	; (800bff4 <vPortSetupTimerInterrupt+0x34>)
 800bfe4:	2207      	movs	r2, #7
 800bfe6:	601a      	str	r2, [r3, #0]
}
 800bfe8:	bf00      	nop
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr
 800bff2:	bf00      	nop
 800bff4:	e000e010 	.word	0xe000e010
 800bff8:	e000e018 	.word	0xe000e018
 800bffc:	20000000 	.word	0x20000000
 800c000:	10624dd3 	.word	0x10624dd3
 800c004:	e000e014 	.word	0xe000e014

0800c008 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c008:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c018 <vPortEnableVFP+0x10>
 800c00c:	6801      	ldr	r1, [r0, #0]
 800c00e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c012:	6001      	str	r1, [r0, #0]
 800c014:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c016:	bf00      	nop
 800c018:	e000ed88 	.word	0xe000ed88

0800c01c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c022:	f3ef 8305 	mrs	r3, IPSR
 800c026:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	2b0f      	cmp	r3, #15
 800c02c:	d916      	bls.n	800c05c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c02e:	4a19      	ldr	r2, [pc, #100]	; (800c094 <vPortValidateInterruptPriority+0x78>)
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	4413      	add	r3, r2
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c038:	4b17      	ldr	r3, [pc, #92]	; (800c098 <vPortValidateInterruptPriority+0x7c>)
 800c03a:	781b      	ldrb	r3, [r3, #0]
 800c03c:	7afa      	ldrb	r2, [r7, #11]
 800c03e:	429a      	cmp	r2, r3
 800c040:	d20c      	bcs.n	800c05c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800c042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c046:	b672      	cpsid	i
 800c048:	f383 8811 	msr	BASEPRI, r3
 800c04c:	f3bf 8f6f 	isb	sy
 800c050:	f3bf 8f4f 	dsb	sy
 800c054:	b662      	cpsie	i
 800c056:	607b      	str	r3, [r7, #4]
}
 800c058:	bf00      	nop
 800c05a:	e7fe      	b.n	800c05a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c05c:	4b0f      	ldr	r3, [pc, #60]	; (800c09c <vPortValidateInterruptPriority+0x80>)
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c064:	4b0e      	ldr	r3, [pc, #56]	; (800c0a0 <vPortValidateInterruptPriority+0x84>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d90c      	bls.n	800c086 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800c06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c070:	b672      	cpsid	i
 800c072:	f383 8811 	msr	BASEPRI, r3
 800c076:	f3bf 8f6f 	isb	sy
 800c07a:	f3bf 8f4f 	dsb	sy
 800c07e:	b662      	cpsie	i
 800c080:	603b      	str	r3, [r7, #0]
}
 800c082:	bf00      	nop
 800c084:	e7fe      	b.n	800c084 <vPortValidateInterruptPriority+0x68>
	}
 800c086:	bf00      	nop
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	e000e3f0 	.word	0xe000e3f0
 800c098:	20000b3c 	.word	0x20000b3c
 800c09c:	e000ed0c 	.word	0xe000ed0c
 800c0a0:	20000b40 	.word	0x20000b40

0800c0a4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b08a      	sub	sp, #40	; 0x28
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c0b0:	f7fe fc44 	bl	800a93c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c0b4:	4b5b      	ldr	r3, [pc, #364]	; (800c224 <pvPortMalloc+0x180>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d101      	bne.n	800c0c0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c0bc:	f000 f91a 	bl	800c2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c0c0:	4b59      	ldr	r3, [pc, #356]	; (800c228 <pvPortMalloc+0x184>)
 800c0c2:	681a      	ldr	r2, [r3, #0]
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	f040 8092 	bne.w	800c1f2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d01f      	beq.n	800c114 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800c0d4:	2208      	movs	r2, #8
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4413      	add	r3, r2
 800c0da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f003 0307 	and.w	r3, r3, #7
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d016      	beq.n	800c114 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f023 0307 	bic.w	r3, r3, #7
 800c0ec:	3308      	adds	r3, #8
 800c0ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f003 0307 	and.w	r3, r3, #7
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00c      	beq.n	800c114 <pvPortMalloc+0x70>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	b672      	cpsid	i
 800c100:	f383 8811 	msr	BASEPRI, r3
 800c104:	f3bf 8f6f 	isb	sy
 800c108:	f3bf 8f4f 	dsb	sy
 800c10c:	b662      	cpsie	i
 800c10e:	617b      	str	r3, [r7, #20]
}
 800c110:	bf00      	nop
 800c112:	e7fe      	b.n	800c112 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d06b      	beq.n	800c1f2 <pvPortMalloc+0x14e>
 800c11a:	4b44      	ldr	r3, [pc, #272]	; (800c22c <pvPortMalloc+0x188>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	429a      	cmp	r2, r3
 800c122:	d866      	bhi.n	800c1f2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c124:	4b42      	ldr	r3, [pc, #264]	; (800c230 <pvPortMalloc+0x18c>)
 800c126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c128:	4b41      	ldr	r3, [pc, #260]	; (800c230 <pvPortMalloc+0x18c>)
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c12e:	e004      	b.n	800c13a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	687a      	ldr	r2, [r7, #4]
 800c140:	429a      	cmp	r2, r3
 800c142:	d903      	bls.n	800c14c <pvPortMalloc+0xa8>
 800c144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d1f1      	bne.n	800c130 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c14c:	4b35      	ldr	r3, [pc, #212]	; (800c224 <pvPortMalloc+0x180>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c152:	429a      	cmp	r2, r3
 800c154:	d04d      	beq.n	800c1f2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c156:	6a3b      	ldr	r3, [r7, #32]
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	2208      	movs	r2, #8
 800c15c:	4413      	add	r3, r2
 800c15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c16a:	685a      	ldr	r2, [r3, #4]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	1ad2      	subs	r2, r2, r3
 800c170:	2308      	movs	r3, #8
 800c172:	005b      	lsls	r3, r3, #1
 800c174:	429a      	cmp	r2, r3
 800c176:	d921      	bls.n	800c1bc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4413      	add	r3, r2
 800c17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	f003 0307 	and.w	r3, r3, #7
 800c186:	2b00      	cmp	r3, #0
 800c188:	d00c      	beq.n	800c1a4 <pvPortMalloc+0x100>
	__asm volatile
 800c18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18e:	b672      	cpsid	i
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	b662      	cpsie	i
 800c19e:	613b      	str	r3, [r7, #16]
}
 800c1a0:	bf00      	nop
 800c1a2:	e7fe      	b.n	800c1a2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1a6:	685a      	ldr	r2, [r3, #4]
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	1ad2      	subs	r2, r2, r3
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1b2:	687a      	ldr	r2, [r7, #4]
 800c1b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c1b6:	69b8      	ldr	r0, [r7, #24]
 800c1b8:	f000 f8fe 	bl	800c3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c1bc:	4b1b      	ldr	r3, [pc, #108]	; (800c22c <pvPortMalloc+0x188>)
 800c1be:	681a      	ldr	r2, [r3, #0]
 800c1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1c2:	685b      	ldr	r3, [r3, #4]
 800c1c4:	1ad3      	subs	r3, r2, r3
 800c1c6:	4a19      	ldr	r2, [pc, #100]	; (800c22c <pvPortMalloc+0x188>)
 800c1c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c1ca:	4b18      	ldr	r3, [pc, #96]	; (800c22c <pvPortMalloc+0x188>)
 800c1cc:	681a      	ldr	r2, [r3, #0]
 800c1ce:	4b19      	ldr	r3, [pc, #100]	; (800c234 <pvPortMalloc+0x190>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d203      	bcs.n	800c1de <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c1d6:	4b15      	ldr	r3, [pc, #84]	; (800c22c <pvPortMalloc+0x188>)
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	4a16      	ldr	r2, [pc, #88]	; (800c234 <pvPortMalloc+0x190>)
 800c1dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1e0:	685a      	ldr	r2, [r3, #4]
 800c1e2:	4b11      	ldr	r3, [pc, #68]	; (800c228 <pvPortMalloc+0x184>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	431a      	orrs	r2, r3
 800c1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c1f2:	f7fe fbb1 	bl	800a958 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c1f6:	69fb      	ldr	r3, [r7, #28]
 800c1f8:	f003 0307 	and.w	r3, r3, #7
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00c      	beq.n	800c21a <pvPortMalloc+0x176>
	__asm volatile
 800c200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c204:	b672      	cpsid	i
 800c206:	f383 8811 	msr	BASEPRI, r3
 800c20a:	f3bf 8f6f 	isb	sy
 800c20e:	f3bf 8f4f 	dsb	sy
 800c212:	b662      	cpsie	i
 800c214:	60fb      	str	r3, [r7, #12]
}
 800c216:	bf00      	nop
 800c218:	e7fe      	b.n	800c218 <pvPortMalloc+0x174>
	return pvReturn;
 800c21a:	69fb      	ldr	r3, [r7, #28]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3728      	adds	r7, #40	; 0x28
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}
 800c224:	2000474c 	.word	0x2000474c
 800c228:	20004758 	.word	0x20004758
 800c22c:	20004750 	.word	0x20004750
 800c230:	20004744 	.word	0x20004744
 800c234:	20004754 	.word	0x20004754

0800c238 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d04c      	beq.n	800c2e4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c24a:	2308      	movs	r3, #8
 800c24c:	425b      	negs	r3, r3
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	4413      	add	r3, r2
 800c252:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	685a      	ldr	r2, [r3, #4]
 800c25c:	4b23      	ldr	r3, [pc, #140]	; (800c2ec <vPortFree+0xb4>)
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4013      	ands	r3, r2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d10c      	bne.n	800c280 <vPortFree+0x48>
	__asm volatile
 800c266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c26a:	b672      	cpsid	i
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	b662      	cpsie	i
 800c27a:	60fb      	str	r3, [r7, #12]
}
 800c27c:	bf00      	nop
 800c27e:	e7fe      	b.n	800c27e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d00c      	beq.n	800c2a2 <vPortFree+0x6a>
	__asm volatile
 800c288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c28c:	b672      	cpsid	i
 800c28e:	f383 8811 	msr	BASEPRI, r3
 800c292:	f3bf 8f6f 	isb	sy
 800c296:	f3bf 8f4f 	dsb	sy
 800c29a:	b662      	cpsie	i
 800c29c:	60bb      	str	r3, [r7, #8]
}
 800c29e:	bf00      	nop
 800c2a0:	e7fe      	b.n	800c2a0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	685a      	ldr	r2, [r3, #4]
 800c2a6:	4b11      	ldr	r3, [pc, #68]	; (800c2ec <vPortFree+0xb4>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4013      	ands	r3, r2
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d019      	beq.n	800c2e4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d115      	bne.n	800c2e4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	685a      	ldr	r2, [r3, #4]
 800c2bc:	4b0b      	ldr	r3, [pc, #44]	; (800c2ec <vPortFree+0xb4>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	43db      	mvns	r3, r3
 800c2c2:	401a      	ands	r2, r3
 800c2c4:	693b      	ldr	r3, [r7, #16]
 800c2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c2c8:	f7fe fb38 	bl	800a93c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c2cc:	693b      	ldr	r3, [r7, #16]
 800c2ce:	685a      	ldr	r2, [r3, #4]
 800c2d0:	4b07      	ldr	r3, [pc, #28]	; (800c2f0 <vPortFree+0xb8>)
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4a06      	ldr	r2, [pc, #24]	; (800c2f0 <vPortFree+0xb8>)
 800c2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c2da:	6938      	ldr	r0, [r7, #16]
 800c2dc:	f000 f86c 	bl	800c3b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c2e0:	f7fe fb3a 	bl	800a958 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}
 800c2ec:	20004758 	.word	0x20004758
 800c2f0:	20004750 	.word	0x20004750

0800c2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c2fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c300:	4b27      	ldr	r3, [pc, #156]	; (800c3a0 <prvHeapInit+0xac>)
 800c302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	f003 0307 	and.w	r3, r3, #7
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d00c      	beq.n	800c328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	3307      	adds	r3, #7
 800c312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f023 0307 	bic.w	r3, r3, #7
 800c31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c31c:	68ba      	ldr	r2, [r7, #8]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	1ad3      	subs	r3, r2, r3
 800c322:	4a1f      	ldr	r2, [pc, #124]	; (800c3a0 <prvHeapInit+0xac>)
 800c324:	4413      	add	r3, r2
 800c326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c32c:	4a1d      	ldr	r2, [pc, #116]	; (800c3a4 <prvHeapInit+0xb0>)
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c332:	4b1c      	ldr	r3, [pc, #112]	; (800c3a4 <prvHeapInit+0xb0>)
 800c334:	2200      	movs	r2, #0
 800c336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	68ba      	ldr	r2, [r7, #8]
 800c33c:	4413      	add	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c340:	2208      	movs	r2, #8
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	1a9b      	subs	r3, r3, r2
 800c346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f023 0307 	bic.w	r3, r3, #7
 800c34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4a15      	ldr	r2, [pc, #84]	; (800c3a8 <prvHeapInit+0xb4>)
 800c354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c356:	4b14      	ldr	r3, [pc, #80]	; (800c3a8 <prvHeapInit+0xb4>)
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	2200      	movs	r2, #0
 800c35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c35e:	4b12      	ldr	r3, [pc, #72]	; (800c3a8 <prvHeapInit+0xb4>)
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2200      	movs	r2, #0
 800c364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	1ad2      	subs	r2, r2, r3
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c374:	4b0c      	ldr	r3, [pc, #48]	; (800c3a8 <prvHeapInit+0xb4>)
 800c376:	681a      	ldr	r2, [r3, #0]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	685b      	ldr	r3, [r3, #4]
 800c380:	4a0a      	ldr	r2, [pc, #40]	; (800c3ac <prvHeapInit+0xb8>)
 800c382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	4a09      	ldr	r2, [pc, #36]	; (800c3b0 <prvHeapInit+0xbc>)
 800c38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c38c:	4b09      	ldr	r3, [pc, #36]	; (800c3b4 <prvHeapInit+0xc0>)
 800c38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c392:	601a      	str	r2, [r3, #0]
}
 800c394:	bf00      	nop
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	20000b44 	.word	0x20000b44
 800c3a4:	20004744 	.word	0x20004744
 800c3a8:	2000474c 	.word	0x2000474c
 800c3ac:	20004754 	.word	0x20004754
 800c3b0:	20004750 	.word	0x20004750
 800c3b4:	20004758 	.word	0x20004758

0800c3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c3c0:	4b28      	ldr	r3, [pc, #160]	; (800c464 <prvInsertBlockIntoFreeList+0xac>)
 800c3c2:	60fb      	str	r3, [r7, #12]
 800c3c4:	e002      	b.n	800c3cc <prvInsertBlockIntoFreeList+0x14>
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	687a      	ldr	r2, [r7, #4]
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d8f7      	bhi.n	800c3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	68ba      	ldr	r2, [r7, #8]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d108      	bne.n	800c3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	685a      	ldr	r2, [r3, #4]
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	685b      	ldr	r3, [r3, #4]
 800c3f0:	441a      	add	r2, r3
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	685b      	ldr	r3, [r3, #4]
 800c402:	68ba      	ldr	r2, [r7, #8]
 800c404:	441a      	add	r2, r3
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d118      	bne.n	800c440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b15      	ldr	r3, [pc, #84]	; (800c468 <prvInsertBlockIntoFreeList+0xb0>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	429a      	cmp	r2, r3
 800c418:	d00d      	beq.n	800c436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	685a      	ldr	r2, [r3, #4]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	441a      	add	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	601a      	str	r2, [r3, #0]
 800c434:	e008      	b.n	800c448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c436:	4b0c      	ldr	r3, [pc, #48]	; (800c468 <prvInsertBlockIntoFreeList+0xb0>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	601a      	str	r2, [r3, #0]
 800c43e:	e003      	b.n	800c448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	681a      	ldr	r2, [r3, #0]
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c448:	68fa      	ldr	r2, [r7, #12]
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d002      	beq.n	800c456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	687a      	ldr	r2, [r7, #4]
 800c454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c456:	bf00      	nop
 800c458:	3714      	adds	r7, #20
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	20004744 	.word	0x20004744
 800c468:	2000474c 	.word	0x2000474c

0800c46c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	330c      	adds	r3, #12
 800c47c:	461a      	mov	r2, r3
 800c47e:	6839      	ldr	r1, [r7, #0]
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f003 fcd5 	bl	800fe30 <tcpip_send_msg_wait_sem>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800c48a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d103      	bne.n	800c49a <netconn_apimsg+0x2e>
    return apimsg->err;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c498:	e001      	b.n	800c49e <netconn_apimsg+0x32>
  }
  return err;
 800c49a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3710      	adds	r7, #16
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
	...

0800c4a8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b08c      	sub	sp, #48	; 0x30
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	4603      	mov	r3, r0
 800c4b0:	603a      	str	r2, [r7, #0]
 800c4b2:	71fb      	strb	r3, [r7, #7]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800c4b8:	79fb      	ldrb	r3, [r7, #7]
 800c4ba:	6839      	ldr	r1, [r7, #0]
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f001 f82f 	bl	800d520 <netconn_alloc>
 800c4c2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d054      	beq.n	800c574 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800c4ca:	79bb      	ldrb	r3, [r7, #6]
 800c4cc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800c4d2:	f107 0308 	add.w	r3, r7, #8
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4829      	ldr	r0, [pc, #164]	; (800c580 <netconn_new_with_proto_and_callback+0xd8>)
 800c4da:	f7ff ffc7 	bl	800c46c <netconn_apimsg>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800c4e4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d043      	beq.n	800c574 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d005      	beq.n	800c500 <netconn_new_with_proto_and_callback+0x58>
 800c4f4:	4b23      	ldr	r3, [pc, #140]	; (800c584 <netconn_new_with_proto_and_callback+0xdc>)
 800c4f6:	22a3      	movs	r2, #163	; 0xa3
 800c4f8:	4923      	ldr	r1, [pc, #140]	; (800c588 <netconn_new_with_proto_and_callback+0xe0>)
 800c4fa:	4824      	ldr	r0, [pc, #144]	; (800c58c <netconn_new_with_proto_and_callback+0xe4>)
 800c4fc:	f00f fc06 	bl	801bd0c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800c500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c502:	3310      	adds	r3, #16
 800c504:	4618      	mov	r0, r3
 800c506:	f00e fe3e 	bl	801b186 <sys_mbox_valid>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d105      	bne.n	800c51c <netconn_new_with_proto_and_callback+0x74>
 800c510:	4b1c      	ldr	r3, [pc, #112]	; (800c584 <netconn_new_with_proto_and_callback+0xdc>)
 800c512:	22a4      	movs	r2, #164	; 0xa4
 800c514:	491e      	ldr	r1, [pc, #120]	; (800c590 <netconn_new_with_proto_and_callback+0xe8>)
 800c516:	481d      	ldr	r0, [pc, #116]	; (800c58c <netconn_new_with_proto_and_callback+0xe4>)
 800c518:	f00f fbf8 	bl	801bd0c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	3314      	adds	r3, #20
 800c520:	4618      	mov	r0, r3
 800c522:	f00e fe30 	bl	801b186 <sys_mbox_valid>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d005      	beq.n	800c538 <netconn_new_with_proto_and_callback+0x90>
 800c52c:	4b15      	ldr	r3, [pc, #84]	; (800c584 <netconn_new_with_proto_and_callback+0xdc>)
 800c52e:	22a6      	movs	r2, #166	; 0xa6
 800c530:	4918      	ldr	r1, [pc, #96]	; (800c594 <netconn_new_with_proto_and_callback+0xec>)
 800c532:	4816      	ldr	r0, [pc, #88]	; (800c58c <netconn_new_with_proto_and_callback+0xe4>)
 800c534:	f00f fbea 	bl	801bd0c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800c538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53a:	330c      	adds	r3, #12
 800c53c:	4618      	mov	r0, r3
 800c53e:	f00e feb3 	bl	801b2a8 <sys_sem_valid>
 800c542:	4603      	mov	r3, r0
 800c544:	2b00      	cmp	r3, #0
 800c546:	d105      	bne.n	800c554 <netconn_new_with_proto_and_callback+0xac>
 800c548:	4b0e      	ldr	r3, [pc, #56]	; (800c584 <netconn_new_with_proto_and_callback+0xdc>)
 800c54a:	22a9      	movs	r2, #169	; 0xa9
 800c54c:	4912      	ldr	r1, [pc, #72]	; (800c598 <netconn_new_with_proto_and_callback+0xf0>)
 800c54e:	480f      	ldr	r0, [pc, #60]	; (800c58c <netconn_new_with_proto_and_callback+0xe4>)
 800c550:	f00f fbdc 	bl	801bd0c <iprintf>
      sys_sem_free(&conn->op_completed);
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	330c      	adds	r3, #12
 800c558:	4618      	mov	r0, r3
 800c55a:	f00e fe98 	bl	801b28e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800c55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c560:	3310      	adds	r3, #16
 800c562:	4618      	mov	r0, r3
 800c564:	f00e fd88 	bl	801b078 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800c568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c56a:	2007      	movs	r0, #7
 800c56c:	f004 f9c8 	bl	8010900 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	e000      	b.n	800c576 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800c574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c576:	4618      	mov	r0, r3
 800c578:	3730      	adds	r7, #48	; 0x30
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
 800c57e:	bf00      	nop
 800c580:	0800d4f5 	.word	0x0800d4f5
 800c584:	0801e2d4 	.word	0x0801e2d4
 800c588:	0801e308 	.word	0x0801e308
 800c58c:	0801e32c 	.word	0x0801e32c
 800c590:	0801e354 	.word	0x0801e354
 800c594:	0801e36c 	.word	0x0801e36c
 800c598:	0801e390 	.word	0x0801e390

0800c59c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b08c      	sub	sp, #48	; 0x30
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d101      	bne.n	800c5ae <netconn_prepare_delete+0x12>
    return ERR_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	e014      	b.n	800c5d8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c5b2:	2329      	movs	r3, #41	; 0x29
 800c5b4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	4808      	ldr	r0, [pc, #32]	; (800c5e0 <netconn_prepare_delete+0x44>)
 800c5be:	f7ff ff55 	bl	800c46c <netconn_apimsg>
 800c5c2:	4603      	mov	r3, r0
 800c5c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800c5c8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d002      	beq.n	800c5d6 <netconn_prepare_delete+0x3a>
    return err;
 800c5d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800c5d4:	e000      	b.n	800c5d8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3730      	adds	r7, #48	; 0x30
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	0800da59 	.word	0x0800da59

0800c5e4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d101      	bne.n	800c5f6 <netconn_delete+0x12>
    return ERR_OK;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	e00d      	b.n	800c612 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7ff ffd0 	bl	800c59c <netconn_prepare_delete>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800c600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d102      	bne.n	800c60e <netconn_delete+0x2a>
    netconn_free(conn);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fff7 	bl	800d5fc <netconn_free>
  }
  return err;
 800c60e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}
	...

0800c61c <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b08e      	sub	sp, #56	; 0x38
 800c620:	af00      	add	r7, sp, #0
 800c622:	60f8      	str	r0, [r7, #12]
 800c624:	60b9      	str	r1, [r7, #8]
 800c626:	607a      	str	r2, [r7, #4]
 800c628:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d109      	bne.n	800c644 <netconn_getaddr+0x28>
 800c630:	4b1d      	ldr	r3, [pc, #116]	; (800c6a8 <netconn_getaddr+0x8c>)
 800c632:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c636:	491d      	ldr	r1, [pc, #116]	; (800c6ac <netconn_getaddr+0x90>)
 800c638:	481d      	ldr	r0, [pc, #116]	; (800c6b0 <netconn_getaddr+0x94>)
 800c63a:	f00f fb67 	bl	801bd0c <iprintf>
 800c63e:	f06f 030f 	mvn.w	r3, #15
 800c642:	e02d      	b.n	800c6a0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d109      	bne.n	800c65e <netconn_getaddr+0x42>
 800c64a:	4b17      	ldr	r3, [pc, #92]	; (800c6a8 <netconn_getaddr+0x8c>)
 800c64c:	f240 1213 	movw	r2, #275	; 0x113
 800c650:	4918      	ldr	r1, [pc, #96]	; (800c6b4 <netconn_getaddr+0x98>)
 800c652:	4817      	ldr	r0, [pc, #92]	; (800c6b0 <netconn_getaddr+0x94>)
 800c654:	f00f fb5a 	bl	801bd0c <iprintf>
 800c658:	f06f 030f 	mvn.w	r3, #15
 800c65c:	e020      	b.n	800c6a0 <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d109      	bne.n	800c678 <netconn_getaddr+0x5c>
 800c664:	4b10      	ldr	r3, [pc, #64]	; (800c6a8 <netconn_getaddr+0x8c>)
 800c666:	f44f 728a 	mov.w	r2, #276	; 0x114
 800c66a:	4913      	ldr	r1, [pc, #76]	; (800c6b8 <netconn_getaddr+0x9c>)
 800c66c:	4810      	ldr	r0, [pc, #64]	; (800c6b0 <netconn_getaddr+0x94>)
 800c66e:	f00f fb4d 	bl	801bd0c <iprintf>
 800c672:	f06f 030f 	mvn.w	r3, #15
 800c676:	e013      	b.n	800c6a0 <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800c67c:	78fb      	ldrb	r3, [r7, #3]
 800c67e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800c68a:	f107 0314 	add.w	r3, r7, #20
 800c68e:	4619      	mov	r1, r3
 800c690:	480a      	ldr	r0, [pc, #40]	; (800c6bc <netconn_getaddr+0xa0>)
 800c692:	f7ff feeb 	bl	800c46c <netconn_apimsg>
 800c696:	4603      	mov	r3, r0
 800c698:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800c69c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3738      	adds	r7, #56	; 0x38
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	0801e2d4 	.word	0x0801e2d4
 800c6ac:	0801e3ac 	.word	0x0801e3ac
 800c6b0:	0801e32c 	.word	0x0801e32c
 800c6b4:	0801e3cc 	.word	0x0801e3cc
 800c6b8:	0801e3ec 	.word	0x0801e3ec
 800c6bc:	0800e249 	.word	0x0800e249

0800c6c0 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b08e      	sub	sp, #56	; 0x38
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	60f8      	str	r0, [r7, #12]
 800c6c8:	60b9      	str	r1, [r7, #8]
 800c6ca:	4613      	mov	r3, r2
 800c6cc:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d109      	bne.n	800c6e8 <netconn_bind+0x28>
 800c6d4:	4b11      	ldr	r3, [pc, #68]	; (800c71c <netconn_bind+0x5c>)
 800c6d6:	f44f 729c 	mov.w	r2, #312	; 0x138
 800c6da:	4911      	ldr	r1, [pc, #68]	; (800c720 <netconn_bind+0x60>)
 800c6dc:	4811      	ldr	r0, [pc, #68]	; (800c724 <netconn_bind+0x64>)
 800c6de:	f00f fb15 	bl	801bd0c <iprintf>
 800c6e2:	f06f 030f 	mvn.w	r3, #15
 800c6e6:	e015      	b.n	800c714 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d101      	bne.n	800c6f2 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800c6ee:	4b0e      	ldr	r3, [pc, #56]	; (800c728 <netconn_bind+0x68>)
 800c6f0:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800c6fa:	88fb      	ldrh	r3, [r7, #6]
 800c6fc:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800c6fe:	f107 0314 	add.w	r3, r7, #20
 800c702:	4619      	mov	r1, r3
 800c704:	4809      	ldr	r0, [pc, #36]	; (800c72c <netconn_bind+0x6c>)
 800c706:	f7ff feb1 	bl	800c46c <netconn_apimsg>
 800c70a:	4603      	mov	r3, r0
 800c70c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800c710:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800c714:	4618      	mov	r0, r3
 800c716:	3738      	adds	r7, #56	; 0x38
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}
 800c71c:	0801e2d4 	.word	0x0801e2d4
 800c720:	0801e40c 	.word	0x0801e40c
 800c724:	0801e32c 	.word	0x0801e32c
 800c728:	08021d5c 	.word	0x08021d5c
 800c72c:	0800dc21 	.word	0x0800dc21

0800c730 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b088      	sub	sp, #32
 800c734:	af00      	add	r7, sp, #0
 800c736:	60f8      	str	r0, [r7, #12]
 800c738:	60b9      	str	r1, [r7, #8]
 800c73a:	4613      	mov	r3, r2
 800c73c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800c73e:	2300      	movs	r3, #0
 800c740:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d109      	bne.n	800c75c <netconn_recv_data+0x2c>
 800c748:	4b58      	ldr	r3, [pc, #352]	; (800c8ac <netconn_recv_data+0x17c>)
 800c74a:	f44f 7212 	mov.w	r2, #584	; 0x248
 800c74e:	4958      	ldr	r1, [pc, #352]	; (800c8b0 <netconn_recv_data+0x180>)
 800c750:	4858      	ldr	r0, [pc, #352]	; (800c8b4 <netconn_recv_data+0x184>)
 800c752:	f00f fadb 	bl	801bd0c <iprintf>
 800c756:	f06f 030f 	mvn.w	r3, #15
 800c75a:	e0a2      	b.n	800c8a2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800c75c:	68bb      	ldr	r3, [r7, #8]
 800c75e:	2200      	movs	r2, #0
 800c760:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d109      	bne.n	800c77c <netconn_recv_data+0x4c>
 800c768:	4b50      	ldr	r3, [pc, #320]	; (800c8ac <netconn_recv_data+0x17c>)
 800c76a:	f240 224a 	movw	r2, #586	; 0x24a
 800c76e:	4952      	ldr	r1, [pc, #328]	; (800c8b8 <netconn_recv_data+0x188>)
 800c770:	4850      	ldr	r0, [pc, #320]	; (800c8b4 <netconn_recv_data+0x184>)
 800c772:	f00f facb 	bl	801bd0c <iprintf>
 800c776:	f06f 030f 	mvn.w	r3, #15
 800c77a:	e092      	b.n	800c8a2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	3310      	adds	r3, #16
 800c780:	4618      	mov	r0, r3
 800c782:	f00e fd00 	bl	801b186 <sys_mbox_valid>
 800c786:	4603      	mov	r3, r0
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d10e      	bne.n	800c7aa <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f000 fb01 	bl	800cd94 <netconn_err>
 800c792:	4603      	mov	r3, r0
 800c794:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800c796:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d002      	beq.n	800c7a4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800c79e:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800c7a2:	e07e      	b.n	800c8a2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800c7a4:	f06f 030a 	mvn.w	r3, #10
 800c7a8:	e07b      	b.n	800c8a2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	7f1b      	ldrb	r3, [r3, #28]
 800c7ae:	f003 0302 	and.w	r3, r3, #2
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d10f      	bne.n	800c7d6 <netconn_recv_data+0xa6>
 800c7b6:	79fb      	ldrb	r3, [r7, #7]
 800c7b8:	f003 0304 	and.w	r3, r3, #4
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d10a      	bne.n	800c7d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	7f1b      	ldrb	r3, [r3, #28]
 800c7c4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d104      	bne.n	800c7d6 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d023      	beq.n	800c81e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	3310      	adds	r3, #16
 800c7da:	f107 0218 	add.w	r2, r7, #24
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f00e fcb4 	bl	801b14e <sys_arch_mbox_tryfetch>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ec:	d11f      	bne.n	800c82e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800c7ee:	68f8      	ldr	r0, [r7, #12]
 800c7f0:	f000 fad0 	bl	800cd94 <netconn_err>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800c7f8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800c800:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800c804:	e04d      	b.n	800c8a2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	7f1b      	ldrb	r3, [r3, #28]
 800c80a:	f003 0301 	and.w	r3, r3, #1
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d002      	beq.n	800c818 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800c812:	f06f 030a 	mvn.w	r3, #10
 800c816:	e044      	b.n	800c8a2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800c818:	f06f 0306 	mvn.w	r3, #6
 800c81c:	e041      	b.n	800c8a2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3310      	adds	r3, #16
 800c822:	f107 0118 	add.w	r1, r7, #24
 800c826:	2200      	movs	r2, #0
 800c828:	4618      	mov	r0, r3
 800c82a:	f00e fc51 	bl	801b0d0 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	781b      	ldrb	r3, [r3, #0]
 800c832:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c836:	2b10      	cmp	r3, #16
 800c838:	d117      	bne.n	800c86a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800c83a:	69bb      	ldr	r3, [r7, #24]
 800c83c:	f107 0217 	add.w	r2, r7, #23
 800c840:	4611      	mov	r1, r2
 800c842:	4618      	mov	r0, r3
 800c844:	f000 faf8 	bl	800ce38 <lwip_netconn_is_err_msg>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d009      	beq.n	800c862 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800c84e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c852:	f113 0f0f 	cmn.w	r3, #15
 800c856:	d101      	bne.n	800c85c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800c858:	2300      	movs	r3, #0
 800c85a:	e022      	b.n	800c8a2 <netconn_recv_data+0x172>
      }
      return err;
 800c85c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c860:	e01f      	b.n	800c8a2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800c862:	69bb      	ldr	r3, [r7, #24]
 800c864:	891b      	ldrh	r3, [r3, #8]
 800c866:	83fb      	strh	r3, [r7, #30]
 800c868:	e00d      	b.n	800c886 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800c86a:	69bb      	ldr	r3, [r7, #24]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d106      	bne.n	800c87e <netconn_recv_data+0x14e>
 800c870:	4b0e      	ldr	r3, [pc, #56]	; (800c8ac <netconn_recv_data+0x17c>)
 800c872:	f240 2291 	movw	r2, #657	; 0x291
 800c876:	4911      	ldr	r1, [pc, #68]	; (800c8bc <netconn_recv_data+0x18c>)
 800c878:	480e      	ldr	r0, [pc, #56]	; (800c8b4 <netconn_recv_data+0x184>)
 800c87a:	f00f fa47 	bl	801bd0c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	891b      	ldrh	r3, [r3, #8]
 800c884:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <netconn_recv_data+0x16a>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c892:	8bfa      	ldrh	r2, [r7, #30]
 800c894:	2101      	movs	r1, #1
 800c896:	68f8      	ldr	r0, [r7, #12]
 800c898:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800c89a:	69ba      	ldr	r2, [r7, #24]
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800c8a0:	2300      	movs	r3, #0
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3720      	adds	r7, #32
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}
 800c8aa:	bf00      	nop
 800c8ac:	0801e2d4 	.word	0x0801e2d4
 800c8b0:	0801e4ec 	.word	0x0801e4ec
 800c8b4:	0801e32c 	.word	0x0801e32c
 800c8b8:	0801e50c 	.word	0x0801e50c
 800c8bc:	0801e528 	.word	0x0801e528

0800c8c0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800c8c0:	b580      	push	{r7, lr}
 800c8c2:	b084      	sub	sp, #16
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	60f8      	str	r0, [r7, #12]
 800c8c8:	60b9      	str	r1, [r7, #8]
 800c8ca:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d005      	beq.n	800c8de <netconn_tcp_recvd_msg+0x1e>
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	781b      	ldrb	r3, [r3, #0]
 800c8d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8da:	2b10      	cmp	r3, #16
 800c8dc:	d009      	beq.n	800c8f2 <netconn_tcp_recvd_msg+0x32>
 800c8de:	4b0c      	ldr	r3, [pc, #48]	; (800c910 <netconn_tcp_recvd_msg+0x50>)
 800c8e0:	f240 22a7 	movw	r2, #679	; 0x2a7
 800c8e4:	490b      	ldr	r1, [pc, #44]	; (800c914 <netconn_tcp_recvd_msg+0x54>)
 800c8e6:	480c      	ldr	r0, [pc, #48]	; (800c918 <netconn_tcp_recvd_msg+0x58>)
 800c8e8:	f00f fa10 	bl	801bd0c <iprintf>
 800c8ec:	f06f 030f 	mvn.w	r3, #15
 800c8f0:	e00a      	b.n	800c908 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68fa      	ldr	r2, [r7, #12]
 800c8f6:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	68ba      	ldr	r2, [r7, #8]
 800c8fc:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	4806      	ldr	r0, [pc, #24]	; (800c91c <netconn_tcp_recvd_msg+0x5c>)
 800c902:	f7ff fdb3 	bl	800c46c <netconn_apimsg>
 800c906:	4603      	mov	r3, r0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	0801e2d4 	.word	0x0801e2d4
 800c914:	0801e534 	.word	0x0801e534
 800c918:	0801e32c 	.word	0x0801e32c
 800c91c:	0800dd2f 	.word	0x0800dd2f

0800c920 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b08c      	sub	sp, #48	; 0x30
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d005      	beq.n	800c93c <netconn_tcp_recvd+0x1c>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c938:	2b10      	cmp	r3, #16
 800c93a:	d009      	beq.n	800c950 <netconn_tcp_recvd+0x30>
 800c93c:	4b0c      	ldr	r3, [pc, #48]	; (800c970 <netconn_tcp_recvd+0x50>)
 800c93e:	f240 22b5 	movw	r2, #693	; 0x2b5
 800c942:	490c      	ldr	r1, [pc, #48]	; (800c974 <netconn_tcp_recvd+0x54>)
 800c944:	480c      	ldr	r0, [pc, #48]	; (800c978 <netconn_tcp_recvd+0x58>)
 800c946:	f00f f9e1 	bl	801bd0c <iprintf>
 800c94a:	f06f 030f 	mvn.w	r3, #15
 800c94e:	e00b      	b.n	800c968 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800c950:	f107 030c 	add.w	r3, r7, #12
 800c954:	461a      	mov	r2, r3
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	f7ff ffb1 	bl	800c8c0 <netconn_tcp_recvd_msg>
 800c95e:	4603      	mov	r3, r0
 800c960:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800c964:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3730      	adds	r7, #48	; 0x30
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}
 800c970:	0801e2d4 	.word	0x0801e2d4
 800c974:	0801e534 	.word	0x0801e534
 800c978:	0801e32c 	.word	0x0801e32c

0800c97c <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b090      	sub	sp, #64	; 0x40
 800c980:	af00      	add	r7, sp, #0
 800c982:	60f8      	str	r0, [r7, #12]
 800c984:	60b9      	str	r1, [r7, #8]
 800c986:	4613      	mov	r3, r2
 800c988:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	3310      	adds	r3, #16
 800c98e:	4618      	mov	r0, r3
 800c990:	f00e fbf9 	bl	801b186 <sys_mbox_valid>
 800c994:	4603      	mov	r3, r0
 800c996:	2b00      	cmp	r3, #0
 800c998:	d102      	bne.n	800c9a0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800c99a:	f06f 030a 	mvn.w	r3, #10
 800c99e:	e06d      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	7f1b      	ldrb	r3, [r3, #28]
 800c9a4:	b25b      	sxtb	r3, r3
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	da07      	bge.n	800c9ba <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	7f1b      	ldrb	r3, [r3, #28]
 800c9ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9b2:	b2da      	uxtb	r2, r3
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800c9b8:	e039      	b.n	800ca2e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c9ba:	79fb      	ldrb	r3, [r7, #7]
 800c9bc:	461a      	mov	r2, r3
 800c9be:	68b9      	ldr	r1, [r7, #8]
 800c9c0:	68f8      	ldr	r0, [r7, #12]
 800c9c2:	f7ff feb5 	bl	800c730 <netconn_recv_data>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800c9cc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d002      	beq.n	800c9da <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800c9d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c9d8:	e050      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800c9e0:	79fb      	ldrb	r3, [r7, #7]
 800c9e2:	f003 0308 	and.w	r3, r3, #8
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d10e      	bne.n	800ca08 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800c9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d002      	beq.n	800c9f6 <netconn_recv_data_tcp+0x7a>
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	891b      	ldrh	r3, [r3, #8]
 800c9f4:	e000      	b.n	800c9f8 <netconn_recv_data_tcp+0x7c>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800c9fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c9fc:	f107 0214 	add.w	r2, r7, #20
 800ca00:	4619      	mov	r1, r3
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	f7ff ff5c 	bl	800c8c0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800ca08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d134      	bne.n	800ca78 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	f003 0310 	and.w	r3, r3, #16
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d009      	beq.n	800ca2c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	7f1b      	ldrb	r3, [r3, #28]
 800ca1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ca20:	b2da      	uxtb	r2, r3
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800ca26:	f06f 0306 	mvn.w	r3, #6
 800ca2a:	e027      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800ca2c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d005      	beq.n	800ca42 <netconn_recv_data_tcp+0xc6>
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2101      	movs	r1, #1
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10f      	bne.n	800ca6a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f000 f9a2 	bl	800cd94 <netconn_err>
 800ca50:	4603      	mov	r3, r0
 800ca52:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800ca56:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d002      	beq.n	800ca64 <netconn_recv_data_tcp+0xe8>
          return err;
 800ca5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ca62:	e00b      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800ca64:	f06f 030d 	mvn.w	r3, #13
 800ca68:	e008      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800ca6a:	2101      	movs	r1, #1
 800ca6c:	68f8      	ldr	r0, [r7, #12]
 800ca6e:	f000 f961 	bl	800cd34 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800ca72:	f06f 030e 	mvn.w	r3, #14
 800ca76:	e001      	b.n	800ca7c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ca78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3740      	adds	r7, #64	; 0x40
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d005      	beq.n	800caa4 <netconn_recv_tcp_pbuf_flags+0x20>
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	781b      	ldrb	r3, [r3, #0]
 800ca9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caa0:	2b10      	cmp	r3, #16
 800caa2:	d009      	beq.n	800cab8 <netconn_recv_tcp_pbuf_flags+0x34>
 800caa4:	4b0a      	ldr	r3, [pc, #40]	; (800cad0 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800caa6:	f240 3225 	movw	r2, #805	; 0x325
 800caaa:	490a      	ldr	r1, [pc, #40]	; (800cad4 <netconn_recv_tcp_pbuf_flags+0x50>)
 800caac:	480a      	ldr	r0, [pc, #40]	; (800cad8 <netconn_recv_tcp_pbuf_flags+0x54>)
 800caae:	f00f f92d 	bl	801bd0c <iprintf>
 800cab2:	f06f 030f 	mvn.w	r3, #15
 800cab6:	e006      	b.n	800cac6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800cab8:	79fb      	ldrb	r3, [r7, #7]
 800caba:	461a      	mov	r2, r3
 800cabc:	68b9      	ldr	r1, [r7, #8]
 800cabe:	68f8      	ldr	r0, [r7, #12]
 800cac0:	f7ff ff5c 	bl	800c97c <netconn_recv_data_tcp>
 800cac4:	4603      	mov	r3, r0
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bd80      	pop	{r7, pc}
 800cace:	bf00      	nop
 800cad0:	0801e2d4 	.word	0x0801e2d4
 800cad4:	0801e534 	.word	0x0801e534
 800cad8:	0801e32c 	.word	0x0801e32c

0800cadc <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	4613      	mov	r3, r2
 800cae8:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d005      	beq.n	800cafc <netconn_recv_udp_raw_netbuf_flags+0x20>
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800caf8:	2b10      	cmp	r3, #16
 800cafa:	d109      	bne.n	800cb10 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800cafc:	4b0a      	ldr	r3, [pc, #40]	; (800cb28 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800cafe:	f44f 7253 	mov.w	r2, #844	; 0x34c
 800cb02:	490a      	ldr	r1, [pc, #40]	; (800cb2c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800cb04:	480a      	ldr	r0, [pc, #40]	; (800cb30 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800cb06:	f00f f901 	bl	801bd0c <iprintf>
 800cb0a:	f06f 030f 	mvn.w	r3, #15
 800cb0e:	e006      	b.n	800cb1e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800cb10:	79fb      	ldrb	r3, [r7, #7]
 800cb12:	461a      	mov	r2, r3
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	68f8      	ldr	r0, [r7, #12]
 800cb18:	f7ff fe0a 	bl	800c730 <netconn_recv_data>
 800cb1c:	4603      	mov	r3, r0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3710      	adds	r7, #16
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}
 800cb26:	bf00      	nop
 800cb28:	0801e2d4 	.word	0x0801e2d4
 800cb2c:	0801e558 	.word	0x0801e558
 800cb30:	0801e32c 	.word	0x0801e32c

0800cb34 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b08c      	sub	sp, #48	; 0x30
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
 800cb3c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <netconn_send+0x24>
 800cb44:	4b0e      	ldr	r3, [pc, #56]	; (800cb80 <netconn_send+0x4c>)
 800cb46:	f240 32b2 	movw	r2, #946	; 0x3b2
 800cb4a:	490e      	ldr	r1, [pc, #56]	; (800cb84 <netconn_send+0x50>)
 800cb4c:	480e      	ldr	r0, [pc, #56]	; (800cb88 <netconn_send+0x54>)
 800cb4e:	f00f f8dd 	bl	801bd0c <iprintf>
 800cb52:	f06f 030f 	mvn.w	r3, #15
 800cb56:	e00e      	b.n	800cb76 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800cb60:	f107 030c 	add.w	r3, r7, #12
 800cb64:	4619      	mov	r1, r3
 800cb66:	4809      	ldr	r0, [pc, #36]	; (800cb8c <netconn_send+0x58>)
 800cb68:	f7ff fc80 	bl	800c46c <netconn_apimsg>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cb72:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3730      	adds	r7, #48	; 0x30
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}
 800cb7e:	bf00      	nop
 800cb80:	0801e2d4 	.word	0x0801e2d4
 800cb84:	0801e590 	.word	0x0801e590
 800cb88:	0801e32c 	.word	0x0801e32c
 800cb8c:	0800dc95 	.word	0x0800dc95

0800cb90 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b088      	sub	sp, #32
 800cb94:	af02      	add	r7, sp, #8
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
 800cb9c:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800cba6:	78fa      	ldrb	r2, [r7, #3]
 800cba8:	f107 0110 	add.w	r1, r7, #16
 800cbac:	6a3b      	ldr	r3, [r7, #32]
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	4613      	mov	r3, r2
 800cbb2:	2201      	movs	r2, #1
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f000 f805 	bl	800cbc4 <netconn_write_vectors_partly>
 800cbba:	4603      	mov	r3, r0
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b092      	sub	sp, #72	; 0x48
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	60f8      	str	r0, [r7, #12]
 800cbcc:	60b9      	str	r1, [r7, #8]
 800cbce:	4611      	mov	r1, r2
 800cbd0:	461a      	mov	r2, r3
 800cbd2:	460b      	mov	r3, r1
 800cbd4:	80fb      	strh	r3, [r7, #6]
 800cbd6:	4613      	mov	r3, r2
 800cbd8:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d109      	bne.n	800cbf4 <netconn_write_vectors_partly+0x30>
 800cbe0:	4b4e      	ldr	r3, [pc, #312]	; (800cd1c <netconn_write_vectors_partly+0x158>)
 800cbe2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800cbe6:	494e      	ldr	r1, [pc, #312]	; (800cd20 <netconn_write_vectors_partly+0x15c>)
 800cbe8:	484e      	ldr	r0, [pc, #312]	; (800cd24 <netconn_write_vectors_partly+0x160>)
 800cbea:	f00f f88f 	bl	801bd0c <iprintf>
 800cbee:	f06f 030f 	mvn.w	r3, #15
 800cbf2:	e08e      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	781b      	ldrb	r3, [r3, #0]
 800cbf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbfc:	2b10      	cmp	r3, #16
 800cbfe:	d009      	beq.n	800cc14 <netconn_write_vectors_partly+0x50>
 800cc00:	4b46      	ldr	r3, [pc, #280]	; (800cd1c <netconn_write_vectors_partly+0x158>)
 800cc02:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800cc06:	4948      	ldr	r1, [pc, #288]	; (800cd28 <netconn_write_vectors_partly+0x164>)
 800cc08:	4846      	ldr	r0, [pc, #280]	; (800cd24 <netconn_write_vectors_partly+0x160>)
 800cc0a:	f00f f87f 	bl	801bd0c <iprintf>
 800cc0e:	f06f 0305 	mvn.w	r3, #5
 800cc12:	e07e      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	7f1b      	ldrb	r3, [r3, #28]
 800cc18:	f003 0302 	and.w	r3, r3, #2
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d104      	bne.n	800cc2a <netconn_write_vectors_partly+0x66>
 800cc20:	797b      	ldrb	r3, [r7, #5]
 800cc22:	f003 0304 	and.w	r3, r3, #4
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d001      	beq.n	800cc2e <netconn_write_vectors_partly+0x6a>
 800cc2a:	2301      	movs	r3, #1
 800cc2c:	e000      	b.n	800cc30 <netconn_write_vectors_partly+0x6c>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800cc34:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d005      	beq.n	800cc48 <netconn_write_vectors_partly+0x84>
 800cc3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800cc42:	f06f 0305 	mvn.w	r3, #5
 800cc46:	e064      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 800cc4c:	2300      	movs	r3, #0
 800cc4e:	643b      	str	r3, [r7, #64]	; 0x40
 800cc50:	e015      	b.n	800cc7e <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800cc52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	4413      	add	r3, r2
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc5e:	4413      	add	r3, r2
 800cc60:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800cc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc64:	00db      	lsls	r3, r3, #3
 800cc66:	68ba      	ldr	r2, [r7, #8]
 800cc68:	4413      	add	r3, r2
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc6e:	429a      	cmp	r2, r3
 800cc70:	d202      	bcs.n	800cc78 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800cc72:	f06f 0305 	mvn.w	r3, #5
 800cc76:	e04c      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800cc78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	643b      	str	r3, [r7, #64]	; 0x40
 800cc7e:	88fb      	ldrh	r3, [r7, #6]
 800cc80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc82:	429a      	cmp	r2, r3
 800cc84:	dbe5      	blt.n	800cc52 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800cc86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d101      	bne.n	800cc90 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	e040      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800cc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	da0a      	bge.n	800ccac <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800cc96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d102      	bne.n	800cca2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800cc9c:	f06f 0305 	mvn.w	r3, #5
 800cca0:	e037      	b.n	800cd12 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800cca2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800cca6:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 800cca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccaa:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800ccb4:	88fb      	ldrh	r3, [r7, #6]
 800ccb6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800ccbc:	797b      	ldrb	r3, [r7, #5]
 800ccbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800ccc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ccc4:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800ccca:	f107 0314 	add.w	r3, r7, #20
 800ccce:	4619      	mov	r1, r3
 800ccd0:	4816      	ldr	r0, [pc, #88]	; (800cd2c <netconn_write_vectors_partly+0x168>)
 800ccd2:	f7ff fbcb 	bl	800c46c <netconn_apimsg>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 800ccdc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d114      	bne.n	800cd0e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800cce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800ccea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ccec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccee:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800ccf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10a      	bne.n	800cd0e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ccfc:	429a      	cmp	r2, r3
 800ccfe:	d006      	beq.n	800cd0e <netconn_write_vectors_partly+0x14a>
 800cd00:	4b06      	ldr	r3, [pc, #24]	; (800cd1c <netconn_write_vectors_partly+0x158>)
 800cd02:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cd06:	490a      	ldr	r1, [pc, #40]	; (800cd30 <netconn_write_vectors_partly+0x16c>)
 800cd08:	4806      	ldr	r0, [pc, #24]	; (800cd24 <netconn_write_vectors_partly+0x160>)
 800cd0a:	f00e ffff 	bl	801bd0c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800cd0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800cd12:	4618      	mov	r0, r3
 800cd14:	3748      	adds	r7, #72	; 0x48
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	0801e2d4 	.word	0x0801e2d4
 800cd20:	0801e5ac 	.word	0x0801e5ac
 800cd24:	0801e32c 	.word	0x0801e32c
 800cd28:	0801e5c8 	.word	0x0801e5c8
 800cd2c:	0800e131 	.word	0x0800e131
 800cd30:	0801e5ec 	.word	0x0801e5ec

0800cd34 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b08c      	sub	sp, #48	; 0x30
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	460b      	mov	r3, r1
 800cd3e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d109      	bne.n	800cd5a <netconn_close_shutdown+0x26>
 800cd46:	4b0f      	ldr	r3, [pc, #60]	; (800cd84 <netconn_close_shutdown+0x50>)
 800cd48:	f240 4247 	movw	r2, #1095	; 0x447
 800cd4c:	490e      	ldr	r1, [pc, #56]	; (800cd88 <netconn_close_shutdown+0x54>)
 800cd4e:	480f      	ldr	r0, [pc, #60]	; (800cd8c <netconn_close_shutdown+0x58>)
 800cd50:	f00e ffdc 	bl	801bd0c <iprintf>
 800cd54:	f06f 030f 	mvn.w	r3, #15
 800cd58:	e010      	b.n	800cd7c <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800cd5e:	78fb      	ldrb	r3, [r7, #3]
 800cd60:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800cd62:	2329      	movs	r3, #41	; 0x29
 800cd64:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800cd66:	f107 030c 	add.w	r3, r7, #12
 800cd6a:	4619      	mov	r1, r3
 800cd6c:	4808      	ldr	r0, [pc, #32]	; (800cd90 <netconn_close_shutdown+0x5c>)
 800cd6e:	f7ff fb7d 	bl	800c46c <netconn_apimsg>
 800cd72:	4603      	mov	r3, r0
 800cd74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cd78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	3730      	adds	r7, #48	; 0x30
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	0801e2d4 	.word	0x0801e2d4
 800cd88:	0801e610 	.word	0x0801e610
 800cd8c:	0801e32c 	.word	0x0801e32c
 800cd90:	0800e355 	.word	0x0800e355

0800cd94 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d101      	bne.n	800cda6 <netconn_err+0x12>
    return ERR_OK;
 800cda2:	2300      	movs	r3, #0
 800cda4:	e00d      	b.n	800cdc2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cda6:	f00e fb09 	bl	801b3bc <sys_arch_protect>
 800cdaa:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7a1b      	ldrb	r3, [r3, #8]
 800cdb0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800cdb8:	68f8      	ldr	r0, [r7, #12]
 800cdba:	f00e fb0d 	bl	801b3d8 <sys_arch_unprotect>
  return err;
 800cdbe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	3710      	adds	r7, #16
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}
	...

0800cdcc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b082      	sub	sp, #8
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800cdd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cdda:	f113 0f0d 	cmn.w	r3, #13
 800cdde:	d009      	beq.n	800cdf4 <lwip_netconn_err_to_msg+0x28>
 800cde0:	f113 0f0d 	cmn.w	r3, #13
 800cde4:	dc0c      	bgt.n	800ce00 <lwip_netconn_err_to_msg+0x34>
 800cde6:	f113 0f0f 	cmn.w	r3, #15
 800cdea:	d007      	beq.n	800cdfc <lwip_netconn_err_to_msg+0x30>
 800cdec:	f113 0f0e 	cmn.w	r3, #14
 800cdf0:	d002      	beq.n	800cdf8 <lwip_netconn_err_to_msg+0x2c>
 800cdf2:	e005      	b.n	800ce00 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800cdf4:	4b0a      	ldr	r3, [pc, #40]	; (800ce20 <lwip_netconn_err_to_msg+0x54>)
 800cdf6:	e00e      	b.n	800ce16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800cdf8:	4b0a      	ldr	r3, [pc, #40]	; (800ce24 <lwip_netconn_err_to_msg+0x58>)
 800cdfa:	e00c      	b.n	800ce16 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800cdfc:	4b0a      	ldr	r3, [pc, #40]	; (800ce28 <lwip_netconn_err_to_msg+0x5c>)
 800cdfe:	e00a      	b.n	800ce16 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800ce00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <lwip_netconn_err_to_msg+0x48>
 800ce08:	4b08      	ldr	r3, [pc, #32]	; (800ce2c <lwip_netconn_err_to_msg+0x60>)
 800ce0a:	227d      	movs	r2, #125	; 0x7d
 800ce0c:	4908      	ldr	r1, [pc, #32]	; (800ce30 <lwip_netconn_err_to_msg+0x64>)
 800ce0e:	4809      	ldr	r0, [pc, #36]	; (800ce34 <lwip_netconn_err_to_msg+0x68>)
 800ce10:	f00e ff7c 	bl	801bd0c <iprintf>
      return NULL;
 800ce14:	2300      	movs	r3, #0
  }
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3708      	adds	r7, #8
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	08021c04 	.word	0x08021c04
 800ce24:	08021c05 	.word	0x08021c05
 800ce28:	08021c06 	.word	0x08021c06
 800ce2c:	0801e62c 	.word	0x0801e62c
 800ce30:	0801e660 	.word	0x0801e660
 800ce34:	0801e670 	.word	0x0801e670

0800ce38 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
 800ce40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d105      	bne.n	800ce54 <lwip_netconn_is_err_msg+0x1c>
 800ce48:	4b12      	ldr	r3, [pc, #72]	; (800ce94 <lwip_netconn_is_err_msg+0x5c>)
 800ce4a:	2285      	movs	r2, #133	; 0x85
 800ce4c:	4912      	ldr	r1, [pc, #72]	; (800ce98 <lwip_netconn_is_err_msg+0x60>)
 800ce4e:	4813      	ldr	r0, [pc, #76]	; (800ce9c <lwip_netconn_is_err_msg+0x64>)
 800ce50:	f00e ff5c 	bl	801bd0c <iprintf>

  if (msg == &netconn_aborted) {
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	4a12      	ldr	r2, [pc, #72]	; (800cea0 <lwip_netconn_is_err_msg+0x68>)
 800ce58:	4293      	cmp	r3, r2
 800ce5a:	d104      	bne.n	800ce66 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	22f3      	movs	r2, #243	; 0xf3
 800ce60:	701a      	strb	r2, [r3, #0]
    return 1;
 800ce62:	2301      	movs	r3, #1
 800ce64:	e012      	b.n	800ce8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	4a0e      	ldr	r2, [pc, #56]	; (800cea4 <lwip_netconn_is_err_msg+0x6c>)
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d104      	bne.n	800ce78 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	22f2      	movs	r2, #242	; 0xf2
 800ce72:	701a      	strb	r2, [r3, #0]
    return 1;
 800ce74:	2301      	movs	r3, #1
 800ce76:	e009      	b.n	800ce8c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4a0b      	ldr	r2, [pc, #44]	; (800cea8 <lwip_netconn_is_err_msg+0x70>)
 800ce7c:	4293      	cmp	r3, r2
 800ce7e:	d104      	bne.n	800ce8a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	22f1      	movs	r2, #241	; 0xf1
 800ce84:	701a      	strb	r2, [r3, #0]
    return 1;
 800ce86:	2301      	movs	r3, #1
 800ce88:	e000      	b.n	800ce8c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800ce8a:	2300      	movs	r3, #0
}
 800ce8c:	4618      	mov	r0, r3
 800ce8e:	3708      	adds	r7, #8
 800ce90:	46bd      	mov	sp, r7
 800ce92:	bd80      	pop	{r7, pc}
 800ce94:	0801e62c 	.word	0x0801e62c
 800ce98:	0801e698 	.word	0x0801e698
 800ce9c:	0801e670 	.word	0x0801e670
 800cea0:	08021c04 	.word	0x08021c04
 800cea4:	08021c05 	.word	0x08021c05
 800cea8:	08021c06 	.word	0x08021c06

0800ceac <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b088      	sub	sp, #32
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	607a      	str	r2, [r7, #4]
 800ceb8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800ceba:	68bb      	ldr	r3, [r7, #8]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d105      	bne.n	800cecc <recv_udp+0x20>
 800cec0:	4b34      	ldr	r3, [pc, #208]	; (800cf94 <recv_udp+0xe8>)
 800cec2:	22e5      	movs	r2, #229	; 0xe5
 800cec4:	4934      	ldr	r1, [pc, #208]	; (800cf98 <recv_udp+0xec>)
 800cec6:	4835      	ldr	r0, [pc, #212]	; (800cf9c <recv_udp+0xf0>)
 800cec8:	f00e ff20 	bl	801bd0c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d105      	bne.n	800cede <recv_udp+0x32>
 800ced2:	4b30      	ldr	r3, [pc, #192]	; (800cf94 <recv_udp+0xe8>)
 800ced4:	22e6      	movs	r2, #230	; 0xe6
 800ced6:	4932      	ldr	r1, [pc, #200]	; (800cfa0 <recv_udp+0xf4>)
 800ced8:	4830      	ldr	r0, [pc, #192]	; (800cf9c <recv_udp+0xf0>)
 800ceda:	f00e ff17 	bl	801bd0c <iprintf>
  conn = (struct netconn *)arg;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800cee2:	69fb      	ldr	r3, [r7, #28]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d103      	bne.n	800cef0 <recv_udp+0x44>
    pbuf_free(p);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f004 fbdf 	bl	80116ac <pbuf_free>
    return;
 800ceee:	e04d      	b.n	800cf8c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	68ba      	ldr	r2, [r7, #8]
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d005      	beq.n	800cf06 <recv_udp+0x5a>
 800cefa:	4b26      	ldr	r3, [pc, #152]	; (800cf94 <recv_udp+0xe8>)
 800cefc:	22ee      	movs	r2, #238	; 0xee
 800cefe:	4929      	ldr	r1, [pc, #164]	; (800cfa4 <recv_udp+0xf8>)
 800cf00:	4826      	ldr	r0, [pc, #152]	; (800cf9c <recv_udp+0xf0>)
 800cf02:	f00e ff03 	bl	801bd0c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800cf06:	69fb      	ldr	r3, [r7, #28]
 800cf08:	3310      	adds	r3, #16
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	f00e f93b 	bl	801b186 <sys_mbox_valid>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d103      	bne.n	800cf1e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f004 fbc8 	bl	80116ac <pbuf_free>
    return;
 800cf1c:	e036      	b.n	800cf8c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800cf1e:	2006      	movs	r0, #6
 800cf20:	f003 fc9c 	bl	801085c <memp_malloc>
 800cf24:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800cf26:	69bb      	ldr	r3, [r7, #24]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d103      	bne.n	800cf34 <recv_udp+0x88>
    pbuf_free(p);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f004 fbbd 	bl	80116ac <pbuf_free>
    return;
 800cf32:	e02b      	b.n	800cf8c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800cf34:	69bb      	ldr	r3, [r7, #24]
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800cf3a:	69bb      	ldr	r3, [r7, #24]
 800cf3c:	687a      	ldr	r2, [r7, #4]
 800cf3e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d002      	beq.n	800cf4c <recv_udp+0xa0>
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	e000      	b.n	800cf4e <recv_udp+0xa2>
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	69ba      	ldr	r2, [r7, #24]
 800cf50:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cf56:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	891b      	ldrh	r3, [r3, #8]
 800cf5c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800cf5e:	69fb      	ldr	r3, [r7, #28]
 800cf60:	3310      	adds	r3, #16
 800cf62:	69b9      	ldr	r1, [r7, #24]
 800cf64:	4618      	mov	r0, r3
 800cf66:	f00e f899 	bl	801b09c <sys_mbox_trypost>
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d003      	beq.n	800cf78 <recv_udp+0xcc>
    netbuf_delete(buf);
 800cf70:	69b8      	ldr	r0, [r7, #24]
 800cf72:	f001 fa99 	bl	800e4a8 <netbuf_delete>
    return;
 800cf76:	e009      	b.n	800cf8c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800cf78:	69fb      	ldr	r3, [r7, #28]
 800cf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d005      	beq.n	800cf8c <recv_udp+0xe0>
 800cf80:	69fb      	ldr	r3, [r7, #28]
 800cf82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf84:	8afa      	ldrh	r2, [r7, #22]
 800cf86:	2100      	movs	r1, #0
 800cf88:	69f8      	ldr	r0, [r7, #28]
 800cf8a:	4798      	blx	r3
  }
}
 800cf8c:	3720      	adds	r7, #32
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}
 800cf92:	bf00      	nop
 800cf94:	0801e62c 	.word	0x0801e62c
 800cf98:	0801e6a4 	.word	0x0801e6a4
 800cf9c:	0801e670 	.word	0x0801e670
 800cfa0:	0801e6c8 	.word	0x0801e6c8
 800cfa4:	0801e6e8 	.word	0x0801e6e8

0800cfa8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b088      	sub	sp, #32
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	60f8      	str	r0, [r7, #12]
 800cfb0:	60b9      	str	r1, [r7, #8]
 800cfb2:	607a      	str	r2, [r7, #4]
 800cfb4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800cfb6:	68bb      	ldr	r3, [r7, #8]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d106      	bne.n	800cfca <recv_tcp+0x22>
 800cfbc:	4b36      	ldr	r3, [pc, #216]	; (800d098 <recv_tcp+0xf0>)
 800cfbe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800cfc2:	4936      	ldr	r1, [pc, #216]	; (800d09c <recv_tcp+0xf4>)
 800cfc4:	4836      	ldr	r0, [pc, #216]	; (800d0a0 <recv_tcp+0xf8>)
 800cfc6:	f00e fea1 	bl	801bd0c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d106      	bne.n	800cfde <recv_tcp+0x36>
 800cfd0:	4b31      	ldr	r3, [pc, #196]	; (800d098 <recv_tcp+0xf0>)
 800cfd2:	f240 122d 	movw	r2, #301	; 0x12d
 800cfd6:	4933      	ldr	r1, [pc, #204]	; (800d0a4 <recv_tcp+0xfc>)
 800cfd8:	4831      	ldr	r0, [pc, #196]	; (800d0a0 <recv_tcp+0xf8>)
 800cfda:	f00e fe97 	bl	801bd0c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800cfde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d006      	beq.n	800cff4 <recv_tcp+0x4c>
 800cfe6:	4b2c      	ldr	r3, [pc, #176]	; (800d098 <recv_tcp+0xf0>)
 800cfe8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800cfec:	492e      	ldr	r1, [pc, #184]	; (800d0a8 <recv_tcp+0x100>)
 800cfee:	482c      	ldr	r0, [pc, #176]	; (800d0a0 <recv_tcp+0xf8>)
 800cff0:	f00e fe8c 	bl	801bd0c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800cff8:	697b      	ldr	r3, [r7, #20]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <recv_tcp+0x5c>
    return ERR_VAL;
 800cffe:	f06f 0305 	mvn.w	r3, #5
 800d002:	e045      	b.n	800d090 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	685b      	ldr	r3, [r3, #4]
 800d008:	68ba      	ldr	r2, [r7, #8]
 800d00a:	429a      	cmp	r2, r3
 800d00c:	d006      	beq.n	800d01c <recv_tcp+0x74>
 800d00e:	4b22      	ldr	r3, [pc, #136]	; (800d098 <recv_tcp+0xf0>)
 800d010:	f240 1235 	movw	r2, #309	; 0x135
 800d014:	4925      	ldr	r1, [pc, #148]	; (800d0ac <recv_tcp+0x104>)
 800d016:	4822      	ldr	r0, [pc, #136]	; (800d0a0 <recv_tcp+0xf8>)
 800d018:	f00e fe78 	bl	801bd0c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	3310      	adds	r3, #16
 800d020:	4618      	mov	r0, r3
 800d022:	f00e f8b0 	bl	801b186 <sys_mbox_valid>
 800d026:	4603      	mov	r3, r0
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d10d      	bne.n	800d048 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d008      	beq.n	800d044 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	891b      	ldrh	r3, [r3, #8]
 800d036:	4619      	mov	r1, r3
 800d038:	68b8      	ldr	r0, [r7, #8]
 800d03a:	f005 fa35 	bl	80124a8 <tcp_recved>
      pbuf_free(p);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f004 fb34 	bl	80116ac <pbuf_free>
    }
    return ERR_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	e023      	b.n	800d090 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d005      	beq.n	800d05a <recv_tcp+0xb2>
    msg = p;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	891b      	ldrh	r3, [r3, #8]
 800d056:	83fb      	strh	r3, [r7, #30]
 800d058:	e003      	b.n	800d062 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d05a:	4b15      	ldr	r3, [pc, #84]	; (800d0b0 <recv_tcp+0x108>)
 800d05c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	3310      	adds	r3, #16
 800d066:	69b9      	ldr	r1, [r7, #24]
 800d068:	4618      	mov	r0, r3
 800d06a:	f00e f817 	bl	801b09c <sys_mbox_trypost>
 800d06e:	4603      	mov	r3, r0
 800d070:	2b00      	cmp	r3, #0
 800d072:	d002      	beq.n	800d07a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d074:	f04f 33ff 	mov.w	r3, #4294967295
 800d078:	e00a      	b.n	800d090 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d07a:	697b      	ldr	r3, [r7, #20]
 800d07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d005      	beq.n	800d08e <recv_tcp+0xe6>
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d086:	8bfa      	ldrh	r2, [r7, #30]
 800d088:	2100      	movs	r1, #0
 800d08a:	6978      	ldr	r0, [r7, #20]
 800d08c:	4798      	blx	r3
  }

  return ERR_OK;
 800d08e:	2300      	movs	r3, #0
}
 800d090:	4618      	mov	r0, r3
 800d092:	3720      	adds	r7, #32
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	0801e62c 	.word	0x0801e62c
 800d09c:	0801e708 	.word	0x0801e708
 800d0a0:	0801e670 	.word	0x0801e670
 800d0a4:	0801e72c 	.word	0x0801e72c
 800d0a8:	0801e74c 	.word	0x0801e74c
 800d0ac:	0801e764 	.word	0x0801e764
 800d0b0:	08021c06 	.word	0x08021c06

0800d0b4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d0b4:	b580      	push	{r7, lr}
 800d0b6:	b084      	sub	sp, #16
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d106      	bne.n	800d0d6 <poll_tcp+0x22>
 800d0c8:	4b29      	ldr	r3, [pc, #164]	; (800d170 <poll_tcp+0xbc>)
 800d0ca:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800d0ce:	4929      	ldr	r1, [pc, #164]	; (800d174 <poll_tcp+0xc0>)
 800d0d0:	4829      	ldr	r0, [pc, #164]	; (800d178 <poll_tcp+0xc4>)
 800d0d2:	f00e fe1b 	bl	801bd0c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	785b      	ldrb	r3, [r3, #1]
 800d0da:	2b01      	cmp	r3, #1
 800d0dc:	d104      	bne.n	800d0e8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d0de:	2101      	movs	r1, #1
 800d0e0:	68f8      	ldr	r0, [r7, #12]
 800d0e2:	f000 fe59 	bl	800dd98 <lwip_netconn_do_writemore>
 800d0e6:	e016      	b.n	800d116 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	785b      	ldrb	r3, [r3, #1]
 800d0ec:	2b04      	cmp	r3, #4
 800d0ee:	d112      	bne.n	800d116 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6a1b      	ldr	r3, [r3, #32]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d00a      	beq.n	800d10e <poll_tcp+0x5a>
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	6a1b      	ldr	r3, [r3, #32]
 800d0fc:	7a5b      	ldrb	r3, [r3, #9]
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d005      	beq.n	800d10e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1b      	ldr	r3, [r3, #32]
 800d106:	7a5a      	ldrb	r2, [r3, #9]
 800d108:	3a01      	subs	r2, #1
 800d10a:	b2d2      	uxtb	r2, r2
 800d10c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d10e:	2101      	movs	r1, #1
 800d110:	68f8      	ldr	r0, [r7, #12]
 800d112:	f000 fb3b 	bl	800d78c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	7f1b      	ldrb	r3, [r3, #28]
 800d11a:	f003 0310 	and.w	r3, r3, #16
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d021      	beq.n	800d166 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	685b      	ldr	r3, [r3, #4]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d01d      	beq.n	800d166 <poll_tcp+0xb2>
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	685b      	ldr	r3, [r3, #4]
 800d12e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d132:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d136:	d316      	bcc.n	800d166 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d140:	2b04      	cmp	r3, #4
 800d142:	d810      	bhi.n	800d166 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	7f1b      	ldrb	r3, [r3, #28]
 800d148:	f023 0310 	bic.w	r3, r3, #16
 800d14c:	b2da      	uxtb	r2, r3
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	d005      	beq.n	800d166 <poll_tcp+0xb2>
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d15e:	2200      	movs	r2, #0
 800d160:	2102      	movs	r1, #2
 800d162:	68f8      	ldr	r0, [r7, #12]
 800d164:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d166:	2300      	movs	r3, #0
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}
 800d170:	0801e62c 	.word	0x0801e62c
 800d174:	0801e784 	.word	0x0801e784
 800d178:	0801e670 	.word	0x0801e670

0800d17c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b086      	sub	sp, #24
 800d180:	af00      	add	r7, sp, #0
 800d182:	60f8      	str	r0, [r7, #12]
 800d184:	60b9      	str	r1, [r7, #8]
 800d186:	4613      	mov	r3, r2
 800d188:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d106      	bne.n	800d1a2 <sent_tcp+0x26>
 800d194:	4b20      	ldr	r3, [pc, #128]	; (800d218 <sent_tcp+0x9c>)
 800d196:	f240 1293 	movw	r2, #403	; 0x193
 800d19a:	4920      	ldr	r1, [pc, #128]	; (800d21c <sent_tcp+0xa0>)
 800d19c:	4820      	ldr	r0, [pc, #128]	; (800d220 <sent_tcp+0xa4>)
 800d19e:	f00e fdb5 	bl	801bd0c <iprintf>

  if (conn) {
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d032      	beq.n	800d20e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	785b      	ldrb	r3, [r3, #1]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d104      	bne.n	800d1ba <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	6978      	ldr	r0, [r7, #20]
 800d1b4:	f000 fdf0 	bl	800dd98 <lwip_netconn_do_writemore>
 800d1b8:	e007      	b.n	800d1ca <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	785b      	ldrb	r3, [r3, #1]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d103      	bne.n	800d1ca <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	6978      	ldr	r0, [r7, #20]
 800d1c6:	f000 fae1 	bl	800d78c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	685b      	ldr	r3, [r3, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01d      	beq.n	800d20e <sent_tcp+0x92>
 800d1d2:	697b      	ldr	r3, [r7, #20]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800d1da:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800d1de:	d316      	bcc.n	800d20e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d1e0:	697b      	ldr	r3, [r7, #20]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d1e8:	2b04      	cmp	r3, #4
 800d1ea:	d810      	bhi.n	800d20e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d1ec:	697b      	ldr	r3, [r7, #20]
 800d1ee:	7f1b      	ldrb	r3, [r3, #28]
 800d1f0:	f023 0310 	bic.w	r3, r3, #16
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d1fa:	697b      	ldr	r3, [r7, #20]
 800d1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d005      	beq.n	800d20e <sent_tcp+0x92>
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d206:	88fa      	ldrh	r2, [r7, #6]
 800d208:	2102      	movs	r1, #2
 800d20a:	6978      	ldr	r0, [r7, #20]
 800d20c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d20e:	2300      	movs	r3, #0
}
 800d210:	4618      	mov	r0, r3
 800d212:	3718      	adds	r7, #24
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}
 800d218:	0801e62c 	.word	0x0801e62c
 800d21c:	0801e784 	.word	0x0801e784
 800d220:	0801e670 	.word	0x0801e670

0800d224 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b088      	sub	sp, #32
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	460b      	mov	r3, r1
 800d22e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d234:	69fb      	ldr	r3, [r7, #28]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d106      	bne.n	800d248 <err_tcp+0x24>
 800d23a:	4b5f      	ldr	r3, [pc, #380]	; (800d3b8 <err_tcp+0x194>)
 800d23c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800d240:	495e      	ldr	r1, [pc, #376]	; (800d3bc <err_tcp+0x198>)
 800d242:	485f      	ldr	r0, [pc, #380]	; (800d3c0 <err_tcp+0x19c>)
 800d244:	f00e fd62 	bl	801bd0c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d248:	f00e f8b8 	bl	801b3bc <sys_arch_protect>
 800d24c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d24e:	69fb      	ldr	r3, [r7, #28]
 800d250:	2200      	movs	r2, #0
 800d252:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d254:	69fb      	ldr	r3, [r7, #28]
 800d256:	78fa      	ldrb	r2, [r7, #3]
 800d258:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d25a:	69fb      	ldr	r3, [r7, #28]
 800d25c:	7f1b      	ldrb	r3, [r3, #28]
 800d25e:	f043 0301 	orr.w	r3, r3, #1
 800d262:	b2da      	uxtb	r2, r3
 800d264:	69fb      	ldr	r3, [r7, #28]
 800d266:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	785b      	ldrb	r3, [r3, #1]
 800d26c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	2200      	movs	r2, #0
 800d272:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d274:	69b8      	ldr	r0, [r7, #24]
 800d276:	f00e f8af 	bl	801b3d8 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d27a:	69fb      	ldr	r3, [r7, #28]
 800d27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d005      	beq.n	800d28e <err_tcp+0x6a>
 800d282:	69fb      	ldr	r3, [r7, #28]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	2200      	movs	r2, #0
 800d288:	2104      	movs	r1, #4
 800d28a:	69f8      	ldr	r0, [r7, #28]
 800d28c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <err_tcp+0x7e>
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d29a:	2200      	movs	r2, #0
 800d29c:	2100      	movs	r1, #0
 800d29e:	69f8      	ldr	r0, [r7, #28]
 800d2a0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d005      	beq.n	800d2b6 <err_tcp+0x92>
 800d2aa:	69fb      	ldr	r3, [r7, #28]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	2102      	movs	r1, #2
 800d2b2:	69f8      	ldr	r0, [r7, #28]
 800d2b4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d2b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7ff fd86 	bl	800cdcc <lwip_netconn_err_to_msg>
 800d2c0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	3310      	adds	r3, #16
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f00d ff5d 	bl	801b186 <sys_mbox_valid>
 800d2cc:	4603      	mov	r3, r0
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d005      	beq.n	800d2de <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	3310      	adds	r3, #16
 800d2d6:	6939      	ldr	r1, [r7, #16]
 800d2d8:	4618      	mov	r0, r3
 800d2da:	f00d fedf 	bl	801b09c <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d2de:	69fb      	ldr	r3, [r7, #28]
 800d2e0:	3314      	adds	r3, #20
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f00d ff4f 	bl	801b186 <sys_mbox_valid>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d005      	beq.n	800d2fa <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	3314      	adds	r3, #20
 800d2f2:	6939      	ldr	r1, [r7, #16]
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f00d fed1 	bl	801b09c <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d2fa:	7dfb      	ldrb	r3, [r7, #23]
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d005      	beq.n	800d30c <err_tcp+0xe8>
 800d300:	7dfb      	ldrb	r3, [r7, #23]
 800d302:	2b04      	cmp	r3, #4
 800d304:	d002      	beq.n	800d30c <err_tcp+0xe8>
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	2b03      	cmp	r3, #3
 800d30a:	d143      	bne.n	800d394 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d30c:	69fb      	ldr	r3, [r7, #28]
 800d30e:	7f1b      	ldrb	r3, [r3, #28]
 800d310:	f003 0304 	and.w	r3, r3, #4
 800d314:	2b00      	cmp	r3, #0
 800d316:	bf14      	ite	ne
 800d318:	2301      	movne	r3, #1
 800d31a:	2300      	moveq	r3, #0
 800d31c:	b2db      	uxtb	r3, r3
 800d31e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d320:	69fb      	ldr	r3, [r7, #28]
 800d322:	7f1b      	ldrb	r3, [r3, #28]
 800d324:	f023 0304 	bic.w	r3, r3, #4
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2b00      	cmp	r3, #0
 800d332:	d13b      	bne.n	800d3ac <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	6a1b      	ldr	r3, [r3, #32]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d106      	bne.n	800d34a <err_tcp+0x126>
 800d33c:	4b1e      	ldr	r3, [pc, #120]	; (800d3b8 <err_tcp+0x194>)
 800d33e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d342:	4920      	ldr	r1, [pc, #128]	; (800d3c4 <err_tcp+0x1a0>)
 800d344:	481e      	ldr	r0, [pc, #120]	; (800d3c0 <err_tcp+0x19c>)
 800d346:	f00e fce1 	bl	801bd0c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d34a:	7dfb      	ldrb	r3, [r7, #23]
 800d34c:	2b04      	cmp	r3, #4
 800d34e:	d104      	bne.n	800d35a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d350:	69fb      	ldr	r3, [r7, #28]
 800d352:	6a1b      	ldr	r3, [r3, #32]
 800d354:	2200      	movs	r2, #0
 800d356:	711a      	strb	r2, [r3, #4]
 800d358:	e003      	b.n	800d362 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d35a:	69fb      	ldr	r3, [r7, #28]
 800d35c:	6a1b      	ldr	r3, [r3, #32]
 800d35e:	78fa      	ldrb	r2, [r7, #3]
 800d360:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d362:	69fb      	ldr	r3, [r7, #28]
 800d364:	6a1b      	ldr	r3, [r3, #32]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	330c      	adds	r3, #12
 800d36a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d36c:	68b8      	ldr	r0, [r7, #8]
 800d36e:	f00d ff9b 	bl	801b2a8 <sys_sem_valid>
 800d372:	4603      	mov	r3, r0
 800d374:	2b00      	cmp	r3, #0
 800d376:	d106      	bne.n	800d386 <err_tcp+0x162>
 800d378:	4b0f      	ldr	r3, [pc, #60]	; (800d3b8 <err_tcp+0x194>)
 800d37a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800d37e:	4912      	ldr	r1, [pc, #72]	; (800d3c8 <err_tcp+0x1a4>)
 800d380:	480f      	ldr	r0, [pc, #60]	; (800d3c0 <err_tcp+0x19c>)
 800d382:	f00e fcc3 	bl	801bd0c <iprintf>
      conn->current_msg = NULL;
 800d386:	69fb      	ldr	r3, [r7, #28]
 800d388:	2200      	movs	r2, #0
 800d38a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d38c:	68b8      	ldr	r0, [r7, #8]
 800d38e:	f00d ff71 	bl	801b274 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d392:	e00b      	b.n	800d3ac <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	6a1b      	ldr	r3, [r3, #32]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d008      	beq.n	800d3ae <err_tcp+0x18a>
 800d39c:	4b06      	ldr	r3, [pc, #24]	; (800d3b8 <err_tcp+0x194>)
 800d39e:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d3a2:	490a      	ldr	r1, [pc, #40]	; (800d3cc <err_tcp+0x1a8>)
 800d3a4:	4806      	ldr	r0, [pc, #24]	; (800d3c0 <err_tcp+0x19c>)
 800d3a6:	f00e fcb1 	bl	801bd0c <iprintf>
  }
}
 800d3aa:	e000      	b.n	800d3ae <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d3ac:	bf00      	nop
}
 800d3ae:	bf00      	nop
 800d3b0:	3720      	adds	r7, #32
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	0801e62c 	.word	0x0801e62c
 800d3bc:	0801e784 	.word	0x0801e784
 800d3c0:	0801e670 	.word	0x0801e670
 800d3c4:	0801e794 	.word	0x0801e794
 800d3c8:	0801e7b0 	.word	0x0801e7b0
 800d3cc:	0801e7cc 	.word	0x0801e7cc

0800d3d0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d3d0:	b580      	push	{r7, lr}
 800d3d2:	b084      	sub	sp, #16
 800d3d4:	af00      	add	r7, sp, #0
 800d3d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	685b      	ldr	r3, [r3, #4]
 800d3dc:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	68f8      	ldr	r0, [r7, #12]
 800d3e2:	f005 ff27 	bl	8013234 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d3e6:	490a      	ldr	r1, [pc, #40]	; (800d410 <setup_tcp+0x40>)
 800d3e8:	68f8      	ldr	r0, [r7, #12]
 800d3ea:	f005 ff35 	bl	8013258 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d3ee:	4909      	ldr	r1, [pc, #36]	; (800d414 <setup_tcp+0x44>)
 800d3f0:	68f8      	ldr	r0, [r7, #12]
 800d3f2:	f005 ff53 	bl	801329c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d3f6:	2202      	movs	r2, #2
 800d3f8:	4907      	ldr	r1, [pc, #28]	; (800d418 <setup_tcp+0x48>)
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	f005 ffaa 	bl	8013354 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d400:	4906      	ldr	r1, [pc, #24]	; (800d41c <setup_tcp+0x4c>)
 800d402:	68f8      	ldr	r0, [r7, #12]
 800d404:	f005 ff6c 	bl	80132e0 <tcp_err>
}
 800d408:	bf00      	nop
 800d40a:	3710      	adds	r7, #16
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}
 800d410:	0800cfa9 	.word	0x0800cfa9
 800d414:	0800d17d 	.word	0x0800d17d
 800d418:	0800d0b5 	.word	0x0800d0b5
 800d41c:	0800d225 	.word	0x0800d225

0800d420 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d420:	b590      	push	{r4, r7, lr}
 800d422:	b085      	sub	sp, #20
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d428:	2300      	movs	r3, #0
 800d42a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d006      	beq.n	800d444 <pcb_new+0x24>
 800d436:	4b2b      	ldr	r3, [pc, #172]	; (800d4e4 <pcb_new+0xc4>)
 800d438:	f240 2265 	movw	r2, #613	; 0x265
 800d43c:	492a      	ldr	r1, [pc, #168]	; (800d4e8 <pcb_new+0xc8>)
 800d43e:	482b      	ldr	r0, [pc, #172]	; (800d4ec <pcb_new+0xcc>)
 800d440:	f00e fc64 	bl	801bd0c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	781b      	ldrb	r3, [r3, #0]
 800d44a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d44e:	2b10      	cmp	r3, #16
 800d450:	d022      	beq.n	800d498 <pcb_new+0x78>
 800d452:	2b20      	cmp	r3, #32
 800d454:	d133      	bne.n	800d4be <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	681c      	ldr	r4, [r3, #0]
 800d45a:	7bfb      	ldrb	r3, [r7, #15]
 800d45c:	4618      	mov	r0, r3
 800d45e:	f00b f9ae 	bl	80187be <udp_new_ip_type>
 800d462:	4603      	mov	r3, r0
 800d464:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	685b      	ldr	r3, [r3, #4]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d02a      	beq.n	800d4c6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	2b22      	cmp	r3, #34	; 0x22
 800d478:	d104      	bne.n	800d484 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	685b      	ldr	r3, [r3, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	6858      	ldr	r0, [r3, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	461a      	mov	r2, r3
 800d490:	4917      	ldr	r1, [pc, #92]	; (800d4f0 <pcb_new+0xd0>)
 800d492:	f00b f91b 	bl	80186cc <udp_recv>
      }
      break;
 800d496:	e016      	b.n	800d4c6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681c      	ldr	r4, [r3, #0]
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f005 feba 	bl	8013218 <tcp_new_ip_type>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	685b      	ldr	r3, [r3, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00b      	beq.n	800d4ca <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f7ff ff8a 	bl	800d3d0 <setup_tcp>
      }
      break;
 800d4bc:	e005      	b.n	800d4ca <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	22fa      	movs	r2, #250	; 0xfa
 800d4c2:	711a      	strb	r2, [r3, #4]
      return;
 800d4c4:	e00a      	b.n	800d4dc <pcb_new+0xbc>
      break;
 800d4c6:	bf00      	nop
 800d4c8:	e000      	b.n	800d4cc <pcb_new+0xac>
      break;
 800d4ca:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	685b      	ldr	r3, [r3, #4]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d102      	bne.n	800d4dc <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	22ff      	movs	r2, #255	; 0xff
 800d4da:	711a      	strb	r2, [r3, #4]
  }
}
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd90      	pop	{r4, r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	0801e62c 	.word	0x0801e62c
 800d4e8:	0801e810 	.word	0x0801e810
 800d4ec:	0801e670 	.word	0x0801e670
 800d4f0:	0800cead 	.word	0x0800cead

0800d4f4 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b084      	sub	sp, #16
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	685b      	ldr	r3, [r3, #4]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d102      	bne.n	800d516 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d510:	68f8      	ldr	r0, [r7, #12]
 800d512:	f7ff ff85 	bl	800d420 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d516:	bf00      	nop
 800d518:	3710      	adds	r7, #16
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
	...

0800d520 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b086      	sub	sp, #24
 800d524:	af00      	add	r7, sp, #0
 800d526:	4603      	mov	r3, r0
 800d528:	6039      	str	r1, [r7, #0]
 800d52a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d530:	2007      	movs	r0, #7
 800d532:	f003 f993 	bl	801085c <memp_malloc>
 800d536:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <netconn_alloc+0x22>
    return NULL;
 800d53e:	2300      	movs	r3, #0
 800d540:	e052      	b.n	800d5e8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	2200      	movs	r2, #0
 800d546:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	79fa      	ldrb	r2, [r7, #7]
 800d54c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	2200      	movs	r2, #0
 800d552:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d554:	79fb      	ldrb	r3, [r7, #7]
 800d556:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d55a:	2b10      	cmp	r3, #16
 800d55c:	d004      	beq.n	800d568 <netconn_alloc+0x48>
 800d55e:	2b20      	cmp	r3, #32
 800d560:	d105      	bne.n	800d56e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d562:	2306      	movs	r3, #6
 800d564:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d566:	e00a      	b.n	800d57e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d568:	2306      	movs	r3, #6
 800d56a:	617b      	str	r3, [r7, #20]
      break;
 800d56c:	e007      	b.n	800d57e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d56e:	4b20      	ldr	r3, [pc, #128]	; (800d5f0 <netconn_alloc+0xd0>)
 800d570:	f240 22e5 	movw	r2, #741	; 0x2e5
 800d574:	491f      	ldr	r1, [pc, #124]	; (800d5f4 <netconn_alloc+0xd4>)
 800d576:	4820      	ldr	r0, [pc, #128]	; (800d5f8 <netconn_alloc+0xd8>)
 800d578:	f00e fbc8 	bl	801bd0c <iprintf>
      goto free_and_return;
 800d57c:	e02f      	b.n	800d5de <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	3310      	adds	r3, #16
 800d582:	6979      	ldr	r1, [r7, #20]
 800d584:	4618      	mov	r0, r3
 800d586:	f00d fd55 	bl	801b034 <sys_mbox_new>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d125      	bne.n	800d5dc <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	330c      	adds	r3, #12
 800d594:	2100      	movs	r1, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f00d fe13 	bl	801b1c2 <sys_sem_new>
 800d59c:	4603      	mov	r3, r0
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d005      	beq.n	800d5ae <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	3310      	adds	r3, #16
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f00d fd66 	bl	801b078 <sys_mbox_free>
    goto free_and_return;
 800d5ac:	e017      	b.n	800d5de <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3314      	adds	r3, #20
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f00d fdf8 	bl	801b1a8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5c4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	683a      	ldr	r2, [r7, #0]
 800d5ca:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	7cfa      	ldrb	r2, [r7, #19]
 800d5d6:	771a      	strb	r2, [r3, #28]
  return conn;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	e005      	b.n	800d5e8 <netconn_alloc+0xc8>
    goto free_and_return;
 800d5dc:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d5de:	68f9      	ldr	r1, [r7, #12]
 800d5e0:	2007      	movs	r0, #7
 800d5e2:	f003 f98d 	bl	8010900 <memp_free>
  return NULL;
 800d5e6:	2300      	movs	r3, #0
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}
 800d5f0:	0801e62c 	.word	0x0801e62c
 800d5f4:	0801e830 	.word	0x0801e830
 800d5f8:	0801e670 	.word	0x0801e670

0800d5fc <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	685b      	ldr	r3, [r3, #4]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d006      	beq.n	800d61a <netconn_free+0x1e>
 800d60c:	4b1b      	ldr	r3, [pc, #108]	; (800d67c <netconn_free+0x80>)
 800d60e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800d612:	491b      	ldr	r1, [pc, #108]	; (800d680 <netconn_free+0x84>)
 800d614:	481b      	ldr	r0, [pc, #108]	; (800d684 <netconn_free+0x88>)
 800d616:	f00e fb79 	bl	801bd0c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	3310      	adds	r3, #16
 800d61e:	4618      	mov	r0, r3
 800d620:	f00d fdb1 	bl	801b186 <sys_mbox_valid>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d006      	beq.n	800d638 <netconn_free+0x3c>
 800d62a:	4b14      	ldr	r3, [pc, #80]	; (800d67c <netconn_free+0x80>)
 800d62c:	f240 3223 	movw	r2, #803	; 0x323
 800d630:	4915      	ldr	r1, [pc, #84]	; (800d688 <netconn_free+0x8c>)
 800d632:	4814      	ldr	r0, [pc, #80]	; (800d684 <netconn_free+0x88>)
 800d634:	f00e fb6a 	bl	801bd0c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	3314      	adds	r3, #20
 800d63c:	4618      	mov	r0, r3
 800d63e:	f00d fda2 	bl	801b186 <sys_mbox_valid>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d006      	beq.n	800d656 <netconn_free+0x5a>
 800d648:	4b0c      	ldr	r3, [pc, #48]	; (800d67c <netconn_free+0x80>)
 800d64a:	f240 3226 	movw	r2, #806	; 0x326
 800d64e:	490f      	ldr	r1, [pc, #60]	; (800d68c <netconn_free+0x90>)
 800d650:	480c      	ldr	r0, [pc, #48]	; (800d684 <netconn_free+0x88>)
 800d652:	f00e fb5b 	bl	801bd0c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	330c      	adds	r3, #12
 800d65a:	4618      	mov	r0, r3
 800d65c:	f00d fe17 	bl	801b28e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	330c      	adds	r3, #12
 800d664:	4618      	mov	r0, r3
 800d666:	f00d fe30 	bl	801b2ca <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	2007      	movs	r0, #7
 800d66e:	f003 f947 	bl	8010900 <memp_free>
}
 800d672:	bf00      	nop
 800d674:	3708      	adds	r7, #8
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	0801e62c 	.word	0x0801e62c
 800d680:	0801e858 	.word	0x0801e858
 800d684:	0801e670 	.word	0x0801e670
 800d688:	0801e888 	.word	0x0801e888
 800d68c:	0801e8c4 	.word	0x0801e8c4

0800d690 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b086      	sub	sp, #24
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	3310      	adds	r3, #16
 800d69c:	4618      	mov	r0, r3
 800d69e:	f00d fd72 	bl	801b186 <sys_mbox_valid>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d02f      	beq.n	800d708 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d6a8:	e018      	b.n	800d6dc <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	781b      	ldrb	r3, [r3, #0]
 800d6ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d6b2:	2b10      	cmp	r3, #16
 800d6b4:	d10e      	bne.n	800d6d4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d6b6:	693b      	ldr	r3, [r7, #16]
 800d6b8:	f107 020f 	add.w	r2, r7, #15
 800d6bc:	4611      	mov	r1, r2
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7ff fbba 	bl	800ce38 <lwip_netconn_is_err_msg>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d108      	bne.n	800d6dc <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f003 ffed 	bl	80116ac <pbuf_free>
 800d6d2:	e003      	b.n	800d6dc <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f000 fee6 	bl	800e4a8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	3310      	adds	r3, #16
 800d6e0:	f107 0210 	add.w	r2, r7, #16
 800d6e4:	4611      	mov	r1, r2
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f00d fd31 	bl	801b14e <sys_arch_mbox_tryfetch>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6f2:	d1da      	bne.n	800d6aa <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	3310      	adds	r3, #16
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	f00d fcbd 	bl	801b078 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	3310      	adds	r3, #16
 800d702:	4618      	mov	r0, r3
 800d704:	f00d fd50 	bl	801b1a8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	3314      	adds	r3, #20
 800d70c:	4618      	mov	r0, r3
 800d70e:	f00d fd3a 	bl	801b186 <sys_mbox_valid>
 800d712:	4603      	mov	r3, r0
 800d714:	2b00      	cmp	r3, #0
 800d716:	d034      	beq.n	800d782 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d718:	e01d      	b.n	800d756 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	f107 020e 	add.w	r2, r7, #14
 800d720:	4611      	mov	r1, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7ff fb88 	bl	800ce38 <lwip_netconn_is_err_msg>
 800d728:	4603      	mov	r3, r0
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d113      	bne.n	800d756 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d732:	6978      	ldr	r0, [r7, #20]
 800d734:	f7ff ffac 	bl	800d690 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	685b      	ldr	r3, [r3, #4]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d007      	beq.n	800d750 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	685b      	ldr	r3, [r3, #4]
 800d744:	4618      	mov	r0, r3
 800d746:	f004 fdb1 	bl	80122ac <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	2200      	movs	r2, #0
 800d74e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d750:	6978      	ldr	r0, [r7, #20]
 800d752:	f7ff ff53 	bl	800d5fc <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	3314      	adds	r3, #20
 800d75a:	f107 0210 	add.w	r2, r7, #16
 800d75e:	4611      	mov	r1, r2
 800d760:	4618      	mov	r0, r3
 800d762:	f00d fcf4 	bl	801b14e <sys_arch_mbox_tryfetch>
 800d766:	4603      	mov	r3, r0
 800d768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d76c:	d1d5      	bne.n	800d71a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	3314      	adds	r3, #20
 800d772:	4618      	mov	r0, r3
 800d774:	f00d fc80 	bl	801b078 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	3314      	adds	r3, #20
 800d77c:	4618      	mov	r0, r3
 800d77e:	f00d fd13 	bl	801b1a8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d782:	bf00      	nop
 800d784:	3718      	adds	r7, #24
 800d786:	46bd      	mov	sp, r7
 800d788:	bd80      	pop	{r7, pc}
	...

0800d78c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b086      	sub	sp, #24
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
 800d794:	460b      	mov	r3, r1
 800d796:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d798:	2300      	movs	r3, #0
 800d79a:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <lwip_netconn_do_close_internal+0x24>
 800d7a2:	4ba1      	ldr	r3, [pc, #644]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d7a4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800d7a8:	49a0      	ldr	r1, [pc, #640]	; (800da2c <lwip_netconn_do_close_internal+0x2a0>)
 800d7aa:	48a1      	ldr	r0, [pc, #644]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d7ac:	f00e faae 	bl	801bd0c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d7b8:	2b10      	cmp	r3, #16
 800d7ba:	d006      	beq.n	800d7ca <lwip_netconn_do_close_internal+0x3e>
 800d7bc:	4b9a      	ldr	r3, [pc, #616]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d7be:	f240 32a3 	movw	r2, #931	; 0x3a3
 800d7c2:	499c      	ldr	r1, [pc, #624]	; (800da34 <lwip_netconn_do_close_internal+0x2a8>)
 800d7c4:	489a      	ldr	r0, [pc, #616]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d7c6:	f00e faa1 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	785b      	ldrb	r3, [r3, #1]
 800d7ce:	2b04      	cmp	r3, #4
 800d7d0:	d006      	beq.n	800d7e0 <lwip_netconn_do_close_internal+0x54>
 800d7d2:	4b95      	ldr	r3, [pc, #596]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d7d4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800d7d8:	4997      	ldr	r1, [pc, #604]	; (800da38 <lwip_netconn_do_close_internal+0x2ac>)
 800d7da:	4895      	ldr	r0, [pc, #596]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d7dc:	f00e fa96 	bl	801bd0c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d106      	bne.n	800d7f6 <lwip_netconn_do_close_internal+0x6a>
 800d7e8:	4b8f      	ldr	r3, [pc, #572]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d7ea:	f240 32a5 	movw	r2, #933	; 0x3a5
 800d7ee:	4993      	ldr	r1, [pc, #588]	; (800da3c <lwip_netconn_do_close_internal+0x2b0>)
 800d7f0:	488f      	ldr	r0, [pc, #572]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d7f2:	f00e fa8b 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6a1b      	ldr	r3, [r3, #32]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d106      	bne.n	800d80c <lwip_netconn_do_close_internal+0x80>
 800d7fe:	4b8a      	ldr	r3, [pc, #552]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d800:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d804:	498e      	ldr	r1, [pc, #568]	; (800da40 <lwip_netconn_do_close_internal+0x2b4>)
 800d806:	488a      	ldr	r0, [pc, #552]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d808:	f00e fa80 	bl	801bd0c <iprintf>

  tpcb = conn->pcb.tcp;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	685b      	ldr	r3, [r3, #4]
 800d810:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6a1b      	ldr	r3, [r3, #32]
 800d816:	7a1b      	ldrb	r3, [r3, #8]
 800d818:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800d81a:	7bfb      	ldrb	r3, [r7, #15]
 800d81c:	f003 0301 	and.w	r3, r3, #1
 800d820:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800d822:	7bfb      	ldrb	r3, [r7, #15]
 800d824:	f003 0302 	and.w	r3, r3, #2
 800d828:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800d82a:	7bfb      	ldrb	r3, [r7, #15]
 800d82c:	2b03      	cmp	r3, #3
 800d82e:	d102      	bne.n	800d836 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800d830:	2301      	movs	r3, #1
 800d832:	75bb      	strb	r3, [r7, #22]
 800d834:	e01f      	b.n	800d876 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800d836:	7bbb      	ldrb	r3, [r7, #14]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00e      	beq.n	800d85a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800d83c:	693b      	ldr	r3, [r7, #16]
 800d83e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800d840:	2b05      	cmp	r3, #5
 800d842:	d007      	beq.n	800d854 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800d848:	2b06      	cmp	r3, #6
 800d84a:	d003      	beq.n	800d854 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800d84c:	693b      	ldr	r3, [r7, #16]
 800d84e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800d850:	2b08      	cmp	r3, #8
 800d852:	d102      	bne.n	800d85a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800d854:	2301      	movs	r3, #1
 800d856:	75bb      	strb	r3, [r7, #22]
 800d858:	e00d      	b.n	800d876 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800d85a:	7b7b      	ldrb	r3, [r7, #13]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d008      	beq.n	800d872 <lwip_netconn_do_close_internal+0xe6>
 800d860:	693b      	ldr	r3, [r7, #16]
 800d862:	8b5b      	ldrh	r3, [r3, #26]
 800d864:	f003 0310 	and.w	r3, r3, #16
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d002      	beq.n	800d872 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800d86c:	2301      	movs	r3, #1
 800d86e:	75bb      	strb	r3, [r7, #22]
 800d870:	e001      	b.n	800d876 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800d872:	2300      	movs	r3, #0
 800d874:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800d876:	7dbb      	ldrb	r3, [r7, #22]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d003      	beq.n	800d884 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800d87c:	2100      	movs	r1, #0
 800d87e:	6938      	ldr	r0, [r7, #16]
 800d880:	f005 fcd8 	bl	8013234 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	7d1b      	ldrb	r3, [r3, #20]
 800d888:	2b01      	cmp	r3, #1
 800d88a:	d104      	bne.n	800d896 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800d88c:	2100      	movs	r1, #0
 800d88e:	6938      	ldr	r0, [r7, #16]
 800d890:	f005 fd48 	bl	8013324 <tcp_accept>
 800d894:	e01d      	b.n	800d8d2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800d896:	7bbb      	ldrb	r3, [r7, #14]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d007      	beq.n	800d8ac <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800d89c:	2100      	movs	r1, #0
 800d89e:	6938      	ldr	r0, [r7, #16]
 800d8a0:	f005 fcda 	bl	8013258 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	6938      	ldr	r0, [r7, #16]
 800d8a8:	f005 fd3c 	bl	8013324 <tcp_accept>
    }
    if (shut_tx) {
 800d8ac:	7b7b      	ldrb	r3, [r7, #13]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	6938      	ldr	r0, [r7, #16]
 800d8b6:	f005 fcf1 	bl	801329c <tcp_sent>
    }
    if (shut_close) {
 800d8ba:	7dbb      	ldrb	r3, [r7, #22]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d008      	beq.n	800d8d2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	6938      	ldr	r0, [r7, #16]
 800d8c6:	f005 fd45 	bl	8013354 <tcp_poll>
      tcp_err(tpcb, NULL);
 800d8ca:	2100      	movs	r1, #0
 800d8cc:	6938      	ldr	r0, [r7, #16]
 800d8ce:	f005 fd07 	bl	80132e0 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800d8d2:	7dbb      	ldrb	r3, [r7, #22]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d005      	beq.n	800d8e4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800d8d8:	6938      	ldr	r0, [r7, #16]
 800d8da:	f004 fba1 	bl	8012020 <tcp_close>
 800d8de:	4603      	mov	r3, r0
 800d8e0:	75fb      	strb	r3, [r7, #23]
 800d8e2:	e007      	b.n	800d8f4 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800d8e4:	7bbb      	ldrb	r3, [r7, #14]
 800d8e6:	7b7a      	ldrb	r2, [r7, #13]
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6938      	ldr	r0, [r7, #16]
 800d8ec:	f004 fbc4 	bl	8012078 <tcp_shutdown>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800d8f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d102      	bne.n	800d902 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	757b      	strb	r3, [r7, #21]
 800d900:	e016      	b.n	800d930 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800d902:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d90a:	d10f      	bne.n	800d92c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a1b      	ldr	r3, [r3, #32]
 800d910:	7a5b      	ldrb	r3, [r3, #9]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10c      	bne.n	800d930 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800d916:	2301      	movs	r3, #1
 800d918:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800d91a:	7dbb      	ldrb	r3, [r7, #22]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d007      	beq.n	800d930 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800d920:	6938      	ldr	r0, [r7, #16]
 800d922:	f004 fcc3 	bl	80122ac <tcp_abort>
          err = ERR_OK;
 800d926:	2300      	movs	r3, #0
 800d928:	75fb      	strb	r3, [r7, #23]
 800d92a:	e001      	b.n	800d930 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800d92c:	2301      	movs	r3, #1
 800d92e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800d930:	7d7b      	ldrb	r3, [r7, #21]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d044      	beq.n	800d9c0 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	6a1b      	ldr	r3, [r3, #32]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	330c      	adds	r3, #12
 800d93e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6a1b      	ldr	r3, [r3, #32]
 800d944:	7dfa      	ldrb	r2, [r7, #23]
 800d946:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	2200      	movs	r2, #0
 800d94c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2200      	movs	r2, #0
 800d952:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800d954:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d129      	bne.n	800d9b0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800d95c:	7dbb      	ldrb	r3, [r7, #22]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00c      	beq.n	800d97c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	2200      	movs	r2, #0
 800d966:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d005      	beq.n	800d97c <lwip_netconn_do_close_internal+0x1f0>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d974:	2200      	movs	r2, #0
 800d976:	2104      	movs	r1, #4
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	4798      	blx	r3
      }
      if (shut_rx) {
 800d97c:	7bbb      	ldrb	r3, [r7, #14]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d009      	beq.n	800d996 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d986:	2b00      	cmp	r3, #0
 800d988:	d005      	beq.n	800d996 <lwip_netconn_do_close_internal+0x20a>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d98e:	2200      	movs	r2, #0
 800d990:	2100      	movs	r1, #0
 800d992:	6878      	ldr	r0, [r7, #4]
 800d994:	4798      	blx	r3
      }
      if (shut_tx) {
 800d996:	7b7b      	ldrb	r3, [r7, #13]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d009      	beq.n	800d9b0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d005      	beq.n	800d9b0 <lwip_netconn_do_close_internal+0x224>
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	2102      	movs	r1, #2
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d9b0:	78fb      	ldrb	r3, [r7, #3]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800d9b6:	68b8      	ldr	r0, [r7, #8]
 800d9b8:	f00d fc5c 	bl	801b274 <sys_sem_signal>
    }
    return ERR_OK;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	e02e      	b.n	800da1e <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800d9c0:	7d7b      	ldrb	r3, [r7, #21]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d11e      	bne.n	800da04 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d106      	bne.n	800d9dc <lwip_netconn_do_close_internal+0x250>
 800d9ce:	4b16      	ldr	r3, [pc, #88]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800d9d0:	f240 4241 	movw	r2, #1089	; 0x441
 800d9d4:	491b      	ldr	r1, [pc, #108]	; (800da44 <lwip_netconn_do_close_internal+0x2b8>)
 800d9d6:	4816      	ldr	r0, [pc, #88]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800d9d8:	f00e f998 	bl	801bd0c <iprintf>
    if (shut_tx) {
 800d9dc:	7b7b      	ldrb	r3, [r7, #13]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d003      	beq.n	800d9ea <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800d9e2:	4919      	ldr	r1, [pc, #100]	; (800da48 <lwip_netconn_do_close_internal+0x2bc>)
 800d9e4:	6938      	ldr	r0, [r7, #16]
 800d9e6:	f005 fc59 	bl	801329c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800d9ea:	2201      	movs	r2, #1
 800d9ec:	4917      	ldr	r1, [pc, #92]	; (800da4c <lwip_netconn_do_close_internal+0x2c0>)
 800d9ee:	6938      	ldr	r0, [r7, #16]
 800d9f0:	f005 fcb0 	bl	8013354 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800d9f4:	4916      	ldr	r1, [pc, #88]	; (800da50 <lwip_netconn_do_close_internal+0x2c4>)
 800d9f6:	6938      	ldr	r0, [r7, #16]
 800d9f8:	f005 fc72 	bl	80132e0 <tcp_err>
    tcp_arg(tpcb, conn);
 800d9fc:	6879      	ldr	r1, [r7, #4]
 800d9fe:	6938      	ldr	r0, [r7, #16]
 800da00:	f005 fc18 	bl	8013234 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800da04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d106      	bne.n	800da1a <lwip_netconn_do_close_internal+0x28e>
 800da0c:	4b06      	ldr	r3, [pc, #24]	; (800da28 <lwip_netconn_do_close_internal+0x29c>)
 800da0e:	f240 424d 	movw	r2, #1101	; 0x44d
 800da12:	4910      	ldr	r1, [pc, #64]	; (800da54 <lwip_netconn_do_close_internal+0x2c8>)
 800da14:	4806      	ldr	r0, [pc, #24]	; (800da30 <lwip_netconn_do_close_internal+0x2a4>)
 800da16:	f00e f979 	bl	801bd0c <iprintf>
  return err;
 800da1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3718      	adds	r7, #24
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop
 800da28:	0801e62c 	.word	0x0801e62c
 800da2c:	0801e900 	.word	0x0801e900
 800da30:	0801e670 	.word	0x0801e670
 800da34:	0801e910 	.word	0x0801e910
 800da38:	0801e930 	.word	0x0801e930
 800da3c:	0801e954 	.word	0x0801e954
 800da40:	0801e794 	.word	0x0801e794
 800da44:	0801e968 	.word	0x0801e968
 800da48:	0800d17d 	.word	0x0800d17d
 800da4c:	0800d0b5 	.word	0x0800d0b5
 800da50:	0800d225 	.word	0x0800d225
 800da54:	0801e98c 	.word	0x0801e98c

0800da58 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	785b      	ldrb	r3, [r3, #1]
 800da6a:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800da6c:	7afb      	ldrb	r3, [r7, #11]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00d      	beq.n	800da8e <lwip_netconn_do_delconn+0x36>
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800da7c:	2b10      	cmp	r3, #16
 800da7e:	d006      	beq.n	800da8e <lwip_netconn_do_delconn+0x36>
 800da80:	4b60      	ldr	r3, [pc, #384]	; (800dc04 <lwip_netconn_do_delconn+0x1ac>)
 800da82:	f240 425e 	movw	r2, #1118	; 0x45e
 800da86:	4960      	ldr	r1, [pc, #384]	; (800dc08 <lwip_netconn_do_delconn+0x1b0>)
 800da88:	4860      	ldr	r0, [pc, #384]	; (800dc0c <lwip_netconn_do_delconn+0x1b4>)
 800da8a:	f00e f93f 	bl	801bd0c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800da8e:	7afb      	ldrb	r3, [r7, #11]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d005      	beq.n	800daa0 <lwip_netconn_do_delconn+0x48>
 800da94:	7afb      	ldrb	r3, [r7, #11]
 800da96:	2b02      	cmp	r3, #2
 800da98:	d002      	beq.n	800daa0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800da9a:	7afb      	ldrb	r3, [r7, #11]
 800da9c:	2b03      	cmp	r3, #3
 800da9e:	d109      	bne.n	800dab4 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800daa0:	7afb      	ldrb	r3, [r7, #11]
 800daa2:	2b03      	cmp	r3, #3
 800daa4:	d10a      	bne.n	800dabc <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	7f1b      	ldrb	r3, [r3, #28]
 800daac:	f003 0304 	and.w	r3, r3, #4
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d103      	bne.n	800dabc <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	22fb      	movs	r2, #251	; 0xfb
 800dab8:	711a      	strb	r2, [r3, #4]
 800daba:	e097      	b.n	800dbec <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dabc:	7afb      	ldrb	r3, [r7, #11]
 800dabe:	2b03      	cmp	r3, #3
 800dac0:	d10d      	bne.n	800dade <lwip_netconn_do_delconn+0x86>
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	7f1b      	ldrb	r3, [r3, #28]
 800dac8:	f003 0304 	and.w	r3, r3, #4
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d106      	bne.n	800dade <lwip_netconn_do_delconn+0x86>
 800dad0:	4b4c      	ldr	r3, [pc, #304]	; (800dc04 <lwip_netconn_do_delconn+0x1ac>)
 800dad2:	f240 427a 	movw	r2, #1146	; 0x47a
 800dad6:	494e      	ldr	r1, [pc, #312]	; (800dc10 <lwip_netconn_do_delconn+0x1b8>)
 800dad8:	484c      	ldr	r0, [pc, #304]	; (800dc0c <lwip_netconn_do_delconn+0x1b4>)
 800dada:	f00e f917 	bl	801bd0c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2200      	movs	r2, #0
 800dae2:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	4618      	mov	r0, r3
 800daea:	f7ff fdd1 	bl	800d690 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	685b      	ldr	r3, [r3, #4]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d05f      	beq.n	800dbb8 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db02:	2b10      	cmp	r3, #16
 800db04:	d00d      	beq.n	800db22 <lwip_netconn_do_delconn+0xca>
 800db06:	2b20      	cmp	r3, #32
 800db08:	d151      	bne.n	800dbae <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	685b      	ldr	r3, [r3, #4]
 800db10:	2200      	movs	r2, #0
 800db12:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	4618      	mov	r0, r3
 800db1c:	f00a fdf6 	bl	801870c <udp_remove>
          break;
 800db20:	e046      	b.n	800dbb0 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	6a1b      	ldr	r3, [r3, #32]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d006      	beq.n	800db3a <lwip_netconn_do_delconn+0xe2>
 800db2c:	4b35      	ldr	r3, [pc, #212]	; (800dc04 <lwip_netconn_do_delconn+0x1ac>)
 800db2e:	f240 4294 	movw	r2, #1172	; 0x494
 800db32:	4938      	ldr	r1, [pc, #224]	; (800dc14 <lwip_netconn_do_delconn+0x1bc>)
 800db34:	4835      	ldr	r0, [pc, #212]	; (800dc0c <lwip_netconn_do_delconn+0x1b4>)
 800db36:	f00e f8e9 	bl	801bd0c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	2204      	movs	r2, #4
 800db40:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	2203      	movs	r2, #3
 800db46:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	2100      	movs	r1, #0
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff fe18 	bl	800d78c <lwip_netconn_do_close_internal>
 800db5c:	4603      	mov	r3, r0
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d04b      	beq.n	800dbfa <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	785b      	ldrb	r3, [r3, #1]
 800db68:	2b04      	cmp	r3, #4
 800db6a:	d006      	beq.n	800db7a <lwip_netconn_do_delconn+0x122>
 800db6c:	4b25      	ldr	r3, [pc, #148]	; (800dc04 <lwip_netconn_do_delconn+0x1ac>)
 800db6e:	f240 429a 	movw	r2, #1178	; 0x49a
 800db72:	4929      	ldr	r1, [pc, #164]	; (800dc18 <lwip_netconn_do_delconn+0x1c0>)
 800db74:	4825      	ldr	r0, [pc, #148]	; (800dc0c <lwip_netconn_do_delconn+0x1b4>)
 800db76:	f00e f8c9 	bl	801bd0c <iprintf>
            UNLOCK_TCPIP_CORE();
 800db7a:	4828      	ldr	r0, [pc, #160]	; (800dc1c <lwip_netconn_do_delconn+0x1c4>)
 800db7c:	f00d fbeb 	bl	801b356 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	330c      	adds	r3, #12
 800db86:	2100      	movs	r1, #0
 800db88:	4618      	mov	r0, r3
 800db8a:	f00d fb42 	bl	801b212 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800db8e:	4823      	ldr	r0, [pc, #140]	; (800dc1c <lwip_netconn_do_delconn+0x1c4>)
 800db90:	f00d fbd2 	bl	801b338 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	785b      	ldrb	r3, [r3, #1]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d02d      	beq.n	800dbfa <lwip_netconn_do_delconn+0x1a2>
 800db9e:	4b19      	ldr	r3, [pc, #100]	; (800dc04 <lwip_netconn_do_delconn+0x1ac>)
 800dba0:	f240 429e 	movw	r2, #1182	; 0x49e
 800dba4:	491c      	ldr	r1, [pc, #112]	; (800dc18 <lwip_netconn_do_delconn+0x1c0>)
 800dba6:	4819      	ldr	r0, [pc, #100]	; (800dc0c <lwip_netconn_do_delconn+0x1b4>)
 800dba8:	f00e f8b0 	bl	801bd0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800dbac:	e025      	b.n	800dbfa <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800dbae:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d007      	beq.n	800dbd2 <lwip_netconn_do_delconn+0x17a>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	68fa      	ldr	r2, [r7, #12]
 800dbca:	6810      	ldr	r0, [r2, #0]
 800dbcc:	2200      	movs	r2, #0
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d007      	beq.n	800dbec <lwip_netconn_do_delconn+0x194>
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbe2:	68fa      	ldr	r2, [r7, #12]
 800dbe4:	6810      	ldr	r0, [r2, #0]
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	2102      	movs	r1, #2
 800dbea:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	330c      	adds	r3, #12
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f00d fb58 	bl	801b2a8 <sys_sem_valid>
 800dbf8:	e000      	b.n	800dbfc <lwip_netconn_do_delconn+0x1a4>
          return;
 800dbfa:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}
 800dc02:	bf00      	nop
 800dc04:	0801e62c 	.word	0x0801e62c
 800dc08:	0801e99c 	.word	0x0801e99c
 800dc0c:	0801e670 	.word	0x0801e670
 800dc10:	0801e9b0 	.word	0x0801e9b0
 800dc14:	0801e9d0 	.word	0x0801e9d0
 800dc18:	0801e9ec 	.word	0x0801e9ec
 800dc1c:	2000a0a4 	.word	0x2000a0a4

0800dc20 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b084      	sub	sp, #16
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d025      	beq.n	800dc82 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc40:	2b10      	cmp	r3, #16
 800dc42:	d00e      	beq.n	800dc62 <lwip_netconn_do_bind+0x42>
 800dc44:	2b20      	cmp	r3, #32
 800dc46:	d119      	bne.n	800dc7c <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	6858      	ldr	r0, [r3, #4]
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	6899      	ldr	r1, [r3, #8]
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	899b      	ldrh	r3, [r3, #12]
 800dc56:	461a      	mov	r2, r3
 800dc58:	f00a fcb0 	bl	80185bc <udp_bind>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	73fb      	strb	r3, [r7, #15]
        break;
 800dc60:	e011      	b.n	800dc86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6858      	ldr	r0, [r3, #4]
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	6899      	ldr	r1, [r3, #8]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	899b      	ldrh	r3, [r3, #12]
 800dc70:	461a      	mov	r2, r3
 800dc72:	f004 fb27 	bl	80122c4 <tcp_bind>
 800dc76:	4603      	mov	r3, r0
 800dc78:	73fb      	strb	r3, [r7, #15]
        break;
 800dc7a:	e004      	b.n	800dc86 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800dc7c:	23fa      	movs	r3, #250	; 0xfa
 800dc7e:	73fb      	strb	r3, [r7, #15]
        break;
 800dc80:	e001      	b.n	800dc86 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800dc82:	23fa      	movs	r3, #250	; 0xfa
 800dc84:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	7bfa      	ldrb	r2, [r7, #15]
 800dc8a:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dc8c:	bf00      	nop
 800dc8e:	3710      	adds	r7, #16
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}

0800dc94 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b084      	sub	sp, #16
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7ff f875 	bl	800cd94 <netconn_err>
 800dcaa:	4603      	mov	r3, r0
 800dcac:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800dcae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d134      	bne.n	800dd20 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800dcb6:	68bb      	ldr	r3, [r7, #8]
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d02d      	beq.n	800dd1c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dcc0:	68bb      	ldr	r3, [r7, #8]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dcca:	2b20      	cmp	r3, #32
 800dccc:	d123      	bne.n	800dd16 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	689b      	ldr	r3, [r3, #8]
 800dcd2:	689b      	ldr	r3, [r3, #8]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10c      	bne.n	800dcf2 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800dcd8:	68bb      	ldr	r3, [r7, #8]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4619      	mov	r1, r3
 800dce6:	4610      	mov	r0, r2
 800dce8:	f00a fa7e 	bl	80181e8 <udp_send>
 800dcec:	4603      	mov	r3, r0
 800dcee:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800dcf0:	e016      	b.n	800dd20 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6858      	ldr	r0, [r3, #4]
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	6819      	ldr	r1, [r3, #0]
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	689b      	ldr	r3, [r3, #8]
 800dd02:	f103 0208 	add.w	r2, r3, #8
 800dd06:	68bb      	ldr	r3, [r7, #8]
 800dd08:	689b      	ldr	r3, [r3, #8]
 800dd0a:	899b      	ldrh	r3, [r3, #12]
 800dd0c:	f00a faa0 	bl	8018250 <udp_sendto>
 800dd10:	4603      	mov	r3, r0
 800dd12:	73fb      	strb	r3, [r7, #15]
          break;
 800dd14:	e004      	b.n	800dd20 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800dd16:	23f5      	movs	r3, #245	; 0xf5
 800dd18:	73fb      	strb	r3, [r7, #15]
          break;
 800dd1a:	e001      	b.n	800dd20 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800dd1c:	23f5      	movs	r3, #245	; 0xf5
 800dd1e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	7bfa      	ldrb	r2, [r7, #15]
 800dd24:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800dd26:	bf00      	nop
 800dd28:	3710      	adds	r7, #16
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	bd80      	pop	{r7, pc}

0800dd2e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800dd2e:	b580      	push	{r7, lr}
 800dd30:	b086      	sub	sp, #24
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d022      	beq.n	800dd90 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dd54:	2b10      	cmp	r3, #16
 800dd56:	d11b      	bne.n	800dd90 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	689b      	ldr	r3, [r3, #8]
 800dd5c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dd64:	d202      	bcs.n	800dd6c <lwip_netconn_do_recv+0x3e>
 800dd66:	697b      	ldr	r3, [r7, #20]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	e001      	b.n	800dd70 <lwip_netconn_do_recv+0x42>
 800dd6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800dd70:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	685b      	ldr	r3, [r3, #4]
 800dd78:	89fa      	ldrh	r2, [r7, #14]
 800dd7a:	4611      	mov	r1, r2
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f004 fb93 	bl	80124a8 <tcp_recved>
        remaining -= recved;
 800dd82:	89fb      	ldrh	r3, [r7, #14]
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	1ad3      	subs	r3, r2, r3
 800dd88:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d1e6      	bne.n	800dd5e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dd90:	bf00      	nop
 800dd92:	3718      	adds	r7, #24
 800dd94:	46bd      	mov	sp, r7
 800dd96:	bd80      	pop	{r7, pc}

0800dd98 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800dd98:	b580      	push	{r7, lr}
 800dd9a:	b088      	sub	sp, #32
 800dd9c:	af00      	add	r7, sp, #0
 800dd9e:	6078      	str	r0, [r7, #4]
 800dda0:	460b      	mov	r3, r1
 800dda2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800dda4:	2300      	movs	r3, #0
 800dda6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d106      	bne.n	800ddbc <lwip_netconn_do_writemore+0x24>
 800ddae:	4b96      	ldr	r3, [pc, #600]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800ddb0:	f240 6273 	movw	r2, #1651	; 0x673
 800ddb4:	4995      	ldr	r1, [pc, #596]	; (800e00c <lwip_netconn_do_writemore+0x274>)
 800ddb6:	4896      	ldr	r0, [pc, #600]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800ddb8:	f00d ffa8 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	785b      	ldrb	r3, [r3, #1]
 800ddc0:	2b01      	cmp	r3, #1
 800ddc2:	d006      	beq.n	800ddd2 <lwip_netconn_do_writemore+0x3a>
 800ddc4:	4b90      	ldr	r3, [pc, #576]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800ddc6:	f240 6274 	movw	r2, #1652	; 0x674
 800ddca:	4992      	ldr	r1, [pc, #584]	; (800e014 <lwip_netconn_do_writemore+0x27c>)
 800ddcc:	4890      	ldr	r0, [pc, #576]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800ddce:	f00d ff9d 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d106      	bne.n	800dde8 <lwip_netconn_do_writemore+0x50>
 800ddda:	4b8b      	ldr	r3, [pc, #556]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800dddc:	f240 6275 	movw	r2, #1653	; 0x675
 800dde0:	498d      	ldr	r1, [pc, #564]	; (800e018 <lwip_netconn_do_writemore+0x280>)
 800dde2:	488b      	ldr	r0, [pc, #556]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800dde4:	f00d ff92 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d106      	bne.n	800ddfe <lwip_netconn_do_writemore+0x66>
 800ddf0:	4b85      	ldr	r3, [pc, #532]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800ddf2:	f240 6276 	movw	r2, #1654	; 0x676
 800ddf6:	4989      	ldr	r1, [pc, #548]	; (800e01c <lwip_netconn_do_writemore+0x284>)
 800ddf8:	4885      	ldr	r0, [pc, #532]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800ddfa:	f00d ff87 	bl	801bd0c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6a1b      	ldr	r3, [r3, #32]
 800de02:	699a      	ldr	r2, [r3, #24]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	6a1b      	ldr	r3, [r3, #32]
 800de08:	695b      	ldr	r3, [r3, #20]
 800de0a:	429a      	cmp	r2, r3
 800de0c:	d306      	bcc.n	800de1c <lwip_netconn_do_writemore+0x84>
 800de0e:	4b7e      	ldr	r3, [pc, #504]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800de10:	f240 6277 	movw	r2, #1655	; 0x677
 800de14:	4982      	ldr	r1, [pc, #520]	; (800e020 <lwip_netconn_do_writemore+0x288>)
 800de16:	487e      	ldr	r0, [pc, #504]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800de18:	f00d ff78 	bl	801bd0c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	899b      	ldrh	r3, [r3, #12]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d106      	bne.n	800de34 <lwip_netconn_do_writemore+0x9c>
 800de26:	4b78      	ldr	r3, [pc, #480]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800de28:	f240 6279 	movw	r2, #1657	; 0x679
 800de2c:	497d      	ldr	r1, [pc, #500]	; (800e024 <lwip_netconn_do_writemore+0x28c>)
 800de2e:	4878      	ldr	r0, [pc, #480]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800de30:	f00d ff6c 	bl	801bd0c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	6a1b      	ldr	r3, [r3, #32]
 800de38:	7f1b      	ldrb	r3, [r3, #28]
 800de3a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	7f1b      	ldrb	r3, [r3, #28]
 800de40:	f003 0302 	and.w	r3, r3, #2
 800de44:	2b00      	cmp	r3, #0
 800de46:	d104      	bne.n	800de52 <lwip_netconn_do_writemore+0xba>
 800de48:	7ebb      	ldrb	r3, [r7, #26]
 800de4a:	f003 0304 	and.w	r3, r3, #4
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d001      	beq.n	800de56 <lwip_netconn_do_writemore+0xbe>
 800de52:	2301      	movs	r3, #1
 800de54:	e000      	b.n	800de58 <lwip_netconn_do_writemore+0xc0>
 800de56:	2300      	movs	r3, #0
 800de58:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a1b      	ldr	r3, [r3, #32]
 800de5e:	689b      	ldr	r3, [r3, #8]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6a1b      	ldr	r3, [r3, #32]
 800de66:	691b      	ldr	r3, [r3, #16]
 800de68:	4413      	add	r3, r2
 800de6a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6a1b      	ldr	r3, [r3, #32]
 800de70:	689b      	ldr	r3, [r3, #8]
 800de72:	685a      	ldr	r2, [r3, #4]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6a1b      	ldr	r3, [r3, #32]
 800de78:	691b      	ldr	r3, [r3, #16]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800de84:	d307      	bcc.n	800de96 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800de86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800de8a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800de8c:	7ebb      	ldrb	r3, [r7, #26]
 800de8e:	f043 0302 	orr.w	r3, r3, #2
 800de92:	76bb      	strb	r3, [r7, #26]
 800de94:	e001      	b.n	800de9a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800de96:	693b      	ldr	r3, [r7, #16]
 800de98:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dea2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800dea4:	89fa      	ldrh	r2, [r7, #14]
 800dea6:	8bbb      	ldrh	r3, [r7, #28]
 800dea8:	429a      	cmp	r2, r3
 800deaa:	d216      	bcs.n	800deda <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800deac:	89fb      	ldrh	r3, [r7, #14]
 800deae:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800deb0:	7e3b      	ldrb	r3, [r7, #24]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d00d      	beq.n	800ded2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800deb6:	8bbb      	ldrh	r3, [r7, #28]
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10e      	bne.n	800deda <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6a1b      	ldr	r3, [r3, #32]
 800dec0:	699b      	ldr	r3, [r3, #24]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <lwip_netconn_do_writemore+0x134>
 800dec6:	f06f 0306 	mvn.w	r3, #6
 800deca:	e000      	b.n	800dece <lwip_netconn_do_writemore+0x136>
 800decc:	2300      	movs	r3, #0
 800dece:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800ded0:	e07d      	b.n	800dfce <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800ded2:	7ebb      	ldrb	r3, [r7, #26]
 800ded4:	f043 0302 	orr.w	r3, r3, #2
 800ded8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	691a      	ldr	r2, [r3, #16]
 800dee0:	8bbb      	ldrh	r3, [r7, #28]
 800dee2:	441a      	add	r2, r3
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6a1b      	ldr	r3, [r3, #32]
 800dee8:	689b      	ldr	r3, [r3, #8]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	429a      	cmp	r2, r3
 800deee:	d906      	bls.n	800defe <lwip_netconn_do_writemore+0x166>
 800def0:	4b45      	ldr	r3, [pc, #276]	; (800e008 <lwip_netconn_do_writemore+0x270>)
 800def2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800def6:	494c      	ldr	r1, [pc, #304]	; (800e028 <lwip_netconn_do_writemore+0x290>)
 800def8:	4845      	ldr	r0, [pc, #276]	; (800e010 <lwip_netconn_do_writemore+0x278>)
 800defa:	f00d ff07 	bl	801bd0c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800defe:	8bbb      	ldrh	r3, [r7, #28]
 800df00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df04:	4293      	cmp	r3, r2
 800df06:	d103      	bne.n	800df10 <lwip_netconn_do_writemore+0x178>
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df0e:	d209      	bcs.n	800df24 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800df14:	8bba      	ldrh	r2, [r7, #28]
 800df16:	429a      	cmp	r2, r3
 800df18:	d10b      	bne.n	800df32 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a1b      	ldr	r3, [r3, #32]
 800df1e:	899b      	ldrh	r3, [r3, #12]
 800df20:	2b01      	cmp	r3, #1
 800df22:	d906      	bls.n	800df32 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800df24:	2301      	movs	r3, #1
 800df26:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800df28:	7ebb      	ldrb	r3, [r7, #26]
 800df2a:	f043 0302 	orr.w	r3, r3, #2
 800df2e:	76bb      	strb	r3, [r7, #26]
 800df30:	e001      	b.n	800df36 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800df32:	2300      	movs	r3, #0
 800df34:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6858      	ldr	r0, [r3, #4]
 800df3a:	7ebb      	ldrb	r3, [r7, #26]
 800df3c:	8bba      	ldrh	r2, [r7, #28]
 800df3e:	6979      	ldr	r1, [r7, #20]
 800df40:	f008 f8b6 	bl	80160b0 <tcp_write>
 800df44:	4603      	mov	r3, r0
 800df46:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800df48:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d12c      	bne.n	800dfaa <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6a1b      	ldr	r3, [r3, #32]
 800df54:	6999      	ldr	r1, [r3, #24]
 800df56:	8bba      	ldrh	r2, [r7, #28]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a1b      	ldr	r3, [r3, #32]
 800df5c:	440a      	add	r2, r1
 800df5e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	6a1b      	ldr	r3, [r3, #32]
 800df64:	6919      	ldr	r1, [r3, #16]
 800df66:	8bba      	ldrh	r2, [r7, #28]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6a1b      	ldr	r3, [r3, #32]
 800df6c:	440a      	add	r2, r1
 800df6e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a1b      	ldr	r3, [r3, #32]
 800df74:	691a      	ldr	r2, [r3, #16]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6a1b      	ldr	r3, [r3, #32]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	685b      	ldr	r3, [r3, #4]
 800df7e:	429a      	cmp	r2, r3
 800df80:	d113      	bne.n	800dfaa <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	899a      	ldrh	r2, [r3, #12]
 800df88:	3a01      	subs	r2, #1
 800df8a:	b292      	uxth	r2, r2
 800df8c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a1b      	ldr	r3, [r3, #32]
 800df92:	899b      	ldrh	r3, [r3, #12]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d008      	beq.n	800dfaa <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	6a1b      	ldr	r3, [r3, #32]
 800df9c:	689a      	ldr	r2, [r3, #8]
 800df9e:	3208      	adds	r2, #8
 800dfa0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a1b      	ldr	r3, [r3, #32]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800dfaa:	7e7b      	ldrb	r3, [r7, #25]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d004      	beq.n	800dfba <lwip_netconn_do_writemore+0x222>
 800dfb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	f43f af50 	beq.w	800de5a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800dfba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d004      	beq.n	800dfcc <lwip_netconn_do_writemore+0x234>
 800dfc2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800dfc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfca:	d146      	bne.n	800e05a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800dfcc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800dfce:	7e3b      	ldrb	r3, [r7, #24]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d02b      	beq.n	800e02c <lwip_netconn_do_writemore+0x294>
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	699a      	ldr	r2, [r3, #24]
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6a1b      	ldr	r3, [r3, #32]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d223      	bcs.n	800e02c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d005      	beq.n	800dff8 <lwip_netconn_do_writemore+0x260>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dff0:	2200      	movs	r2, #0
 800dff2:	2103      	movs	r1, #3
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	7f1b      	ldrb	r3, [r3, #28]
 800dffc:	f043 0310 	orr.w	r3, r3, #16
 800e000:	b2da      	uxtb	r2, r3
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	771a      	strb	r2, [r3, #28]
 800e006:	e028      	b.n	800e05a <lwip_netconn_do_writemore+0x2c2>
 800e008:	0801e62c 	.word	0x0801e62c
 800e00c:	0801e784 	.word	0x0801e784
 800e010:	0801e670 	.word	0x0801e670
 800e014:	0801ea8c 	.word	0x0801ea8c
 800e018:	0801e794 	.word	0x0801e794
 800e01c:	0801eaac 	.word	0x0801eaac
 800e020:	0801eac4 	.word	0x0801eac4
 800e024:	0801eb04 	.word	0x0801eb04
 800e028:	0801eb2c 	.word	0x0801eb2c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e034:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800e038:	d305      	bcc.n	800e046 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	685b      	ldr	r3, [r3, #4]
 800e03e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e042:	2b04      	cmp	r3, #4
 800e044:	d909      	bls.n	800e05a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d005      	beq.n	800e05a <lwip_netconn_do_writemore+0x2c2>
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e052:	2200      	movs	r2, #0
 800e054:	2103      	movs	r1, #3
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e05a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d11d      	bne.n	800e09e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6a1b      	ldr	r3, [r3, #32]
 800e066:	699a      	ldr	r2, [r3, #24]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	6a1b      	ldr	r3, [r3, #32]
 800e06c:	695b      	ldr	r3, [r3, #20]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d002      	beq.n	800e078 <lwip_netconn_do_writemore+0x2e0>
 800e072:	7e3b      	ldrb	r3, [r7, #24]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d001      	beq.n	800e07c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e078:	2301      	movs	r3, #1
 800e07a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	685b      	ldr	r3, [r3, #4]
 800e080:	4618      	mov	r0, r3
 800e082:	f008 fdff 	bl	8016c84 <tcp_output>
 800e086:	4603      	mov	r3, r0
 800e088:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e08a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e08e:	f113 0f04 	cmn.w	r3, #4
 800e092:	d12c      	bne.n	800e0ee <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e094:	7b3b      	ldrb	r3, [r7, #12]
 800e096:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e098:	2301      	movs	r3, #1
 800e09a:	76fb      	strb	r3, [r7, #27]
 800e09c:	e027      	b.n	800e0ee <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e09e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0a6:	d120      	bne.n	800e0ea <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	685b      	ldr	r3, [r3, #4]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f008 fde9 	bl	8016c84 <tcp_output>
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e0b6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e0ba:	f113 0f04 	cmn.w	r3, #4
 800e0be:	d104      	bne.n	800e0ca <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e0c0:	7b7b      	ldrb	r3, [r7, #13]
 800e0c2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	76fb      	strb	r3, [r7, #27]
 800e0c8:	e011      	b.n	800e0ee <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e0ca:	7e3b      	ldrb	r3, [r7, #24]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00e      	beq.n	800e0ee <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6a1b      	ldr	r3, [r3, #32]
 800e0d4:	699b      	ldr	r3, [r3, #24]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d102      	bne.n	800e0e0 <lwip_netconn_do_writemore+0x348>
 800e0da:	f06f 0306 	mvn.w	r3, #6
 800e0de:	e000      	b.n	800e0e2 <lwip_netconn_do_writemore+0x34a>
 800e0e0:	2300      	movs	r3, #0
 800e0e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	76fb      	strb	r3, [r7, #27]
 800e0e8:	e001      	b.n	800e0ee <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e0ea:	2301      	movs	r3, #1
 800e0ec:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e0ee:	7efb      	ldrb	r3, [r7, #27]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d015      	beq.n	800e120 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6a1b      	ldr	r3, [r3, #32]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	330c      	adds	r3, #12
 800e0fc:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6a1b      	ldr	r3, [r3, #32]
 800e102:	7ffa      	ldrb	r2, [r7, #31]
 800e104:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2200      	movs	r2, #0
 800e10a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2200      	movs	r2, #0
 800e110:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e112:	78fb      	ldrb	r3, [r7, #3]
 800e114:	2b00      	cmp	r3, #0
 800e116:	d006      	beq.n	800e126 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e118:	68b8      	ldr	r0, [r7, #8]
 800e11a:	f00d f8ab 	bl	801b274 <sys_sem_signal>
 800e11e:	e002      	b.n	800e126 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e120:	f04f 33ff 	mov.w	r3, #4294967295
 800e124:	e000      	b.n	800e128 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e126:	2300      	movs	r3, #0
}
 800e128:	4618      	mov	r0, r3
 800e12a:	3720      	adds	r7, #32
 800e12c:	46bd      	mov	sp, r7
 800e12e:	bd80      	pop	{r7, pc}

0800e130 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e130:	b580      	push	{r7, lr}
 800e132:	b084      	sub	sp, #16
 800e134:	af00      	add	r7, sp, #0
 800e136:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4618      	mov	r0, r3
 800e142:	f7fe fe27 	bl	800cd94 <netconn_err>
 800e146:	4603      	mov	r3, r0
 800e148:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e14a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d166      	bne.n	800e220 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e152:	68bb      	ldr	r3, [r7, #8]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e15c:	2b10      	cmp	r3, #16
 800e15e:	d15d      	bne.n	800e21c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e160:	68bb      	ldr	r3, [r7, #8]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	785b      	ldrb	r3, [r3, #1]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d002      	beq.n	800e170 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e16a:	23fb      	movs	r3, #251	; 0xfb
 800e16c:	73fb      	strb	r3, [r7, #15]
 800e16e:	e057      	b.n	800e220 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	2b00      	cmp	r3, #0
 800e178:	d04d      	beq.n	800e216 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2201      	movs	r2, #1
 800e180:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	6a1b      	ldr	r3, [r3, #32]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d006      	beq.n	800e19a <lwip_netconn_do_write+0x6a>
 800e18c:	4b28      	ldr	r3, [pc, #160]	; (800e230 <lwip_netconn_do_write+0x100>)
 800e18e:	f240 7223 	movw	r2, #1827	; 0x723
 800e192:	4928      	ldr	r1, [pc, #160]	; (800e234 <lwip_netconn_do_write+0x104>)
 800e194:	4828      	ldr	r0, [pc, #160]	; (800e238 <lwip_netconn_do_write+0x108>)
 800e196:	f00d fdb9 	bl	801bd0c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	695b      	ldr	r3, [r3, #20]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <lwip_netconn_do_write+0x80>
 800e1a2:	4b23      	ldr	r3, [pc, #140]	; (800e230 <lwip_netconn_do_write+0x100>)
 800e1a4:	f240 7224 	movw	r2, #1828	; 0x724
 800e1a8:	4924      	ldr	r1, [pc, #144]	; (800e23c <lwip_netconn_do_write+0x10c>)
 800e1aa:	4823      	ldr	r0, [pc, #140]	; (800e238 <lwip_netconn_do_write+0x108>)
 800e1ac:	f00d fdae 	bl	801bd0c <iprintf>
        msg->conn->current_msg = msg;
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	68ba      	ldr	r2, [r7, #8]
 800e1b6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	2100      	movs	r1, #0
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7ff fdea 	bl	800dd98 <lwip_netconn_do_writemore>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d02e      	beq.n	800e228 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	785b      	ldrb	r3, [r3, #1]
 800e1d0:	2b01      	cmp	r3, #1
 800e1d2:	d006      	beq.n	800e1e2 <lwip_netconn_do_write+0xb2>
 800e1d4:	4b16      	ldr	r3, [pc, #88]	; (800e230 <lwip_netconn_do_write+0x100>)
 800e1d6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800e1da:	4919      	ldr	r1, [pc, #100]	; (800e240 <lwip_netconn_do_write+0x110>)
 800e1dc:	4816      	ldr	r0, [pc, #88]	; (800e238 <lwip_netconn_do_write+0x108>)
 800e1de:	f00d fd95 	bl	801bd0c <iprintf>
          UNLOCK_TCPIP_CORE();
 800e1e2:	4818      	ldr	r0, [pc, #96]	; (800e244 <lwip_netconn_do_write+0x114>)
 800e1e4:	f00d f8b7 	bl	801b356 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	330c      	adds	r3, #12
 800e1ee:	2100      	movs	r1, #0
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f00d f80e 	bl	801b212 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e1f6:	4813      	ldr	r0, [pc, #76]	; (800e244 <lwip_netconn_do_write+0x114>)
 800e1f8:	f00d f89e 	bl	801b338 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	785b      	ldrb	r3, [r3, #1]
 800e202:	2b01      	cmp	r3, #1
 800e204:	d110      	bne.n	800e228 <lwip_netconn_do_write+0xf8>
 800e206:	4b0a      	ldr	r3, [pc, #40]	; (800e230 <lwip_netconn_do_write+0x100>)
 800e208:	f240 722c 	movw	r2, #1836	; 0x72c
 800e20c:	490c      	ldr	r1, [pc, #48]	; (800e240 <lwip_netconn_do_write+0x110>)
 800e20e:	480a      	ldr	r0, [pc, #40]	; (800e238 <lwip_netconn_do_write+0x108>)
 800e210:	f00d fd7c 	bl	801bd0c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e214:	e008      	b.n	800e228 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e216:	23f5      	movs	r3, #245	; 0xf5
 800e218:	73fb      	strb	r3, [r7, #15]
 800e21a:	e001      	b.n	800e220 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e21c:	23fa      	movs	r3, #250	; 0xfa
 800e21e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	7bfa      	ldrb	r2, [r7, #15]
 800e224:	711a      	strb	r2, [r3, #4]
 800e226:	e000      	b.n	800e22a <lwip_netconn_do_write+0xfa>
        return;
 800e228:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	0801e62c 	.word	0x0801e62c
 800e234:	0801e9d0 	.word	0x0801e9d0
 800e238:	0801e670 	.word	0x0801e670
 800e23c:	0801eb58 	.word	0x0801eb58
 800e240:	0801e9ec 	.word	0x0801e9ec
 800e244:	2000a0a4 	.word	0x2000a0a4

0800e248 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b084      	sub	sp, #16
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d06b      	beq.n	800e336 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	7c1b      	ldrb	r3, [r3, #16]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d007      	beq.n	800e276 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	689b      	ldr	r3, [r3, #8]
 800e270:	6812      	ldr	r2, [r2, #0]
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	e006      	b.n	800e284 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	685a      	ldr	r2, [r3, #4]
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	689b      	ldr	r3, [r3, #8]
 800e280:	6852      	ldr	r2, [r2, #4]
 800e282:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e294:	2b10      	cmp	r3, #16
 800e296:	d021      	beq.n	800e2dc <lwip_netconn_do_getaddr+0x94>
 800e298:	2b20      	cmp	r3, #32
 800e29a:	d144      	bne.n	800e326 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	7c1b      	ldrb	r3, [r3, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	68db      	ldr	r3, [r3, #12]
 800e2ae:	8a52      	ldrh	r2, [r2, #18]
 800e2b0:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800e2b2:	e044      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	7c1b      	ldrb	r3, [r3, #16]
 800e2bc:	f003 0304 	and.w	r3, r3, #4
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d103      	bne.n	800e2cc <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	22f5      	movs	r2, #245	; 0xf5
 800e2c8:	711a      	strb	r2, [r3, #4]
        break;
 800e2ca:	e038      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	685a      	ldr	r2, [r3, #4]
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	8a92      	ldrh	r2, [r2, #20]
 800e2d8:	801a      	strh	r2, [r3, #0]
        break;
 800e2da:	e030      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	7c1b      	ldrb	r3, [r3, #16]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d10f      	bne.n	800e304 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d005      	beq.n	800e2fc <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	7d1b      	ldrb	r3, [r3, #20]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d103      	bne.n	800e304 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	22f5      	movs	r2, #245	; 0xf5
 800e300:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800e302:	e01c      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	7c1b      	ldrb	r3, [r3, #16]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d004      	beq.n	800e316 <lwip_netconn_do_getaddr+0xce>
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	8adb      	ldrh	r3, [r3, #22]
 800e314:	e003      	b.n	800e31e <lwip_netconn_do_getaddr+0xd6>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	685b      	ldr	r3, [r3, #4]
 800e31c:	8b1b      	ldrh	r3, [r3, #24]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	68d2      	ldr	r2, [r2, #12]
 800e322:	8013      	strh	r3, [r2, #0]
        break;
 800e324:	e00b      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800e326:	4b08      	ldr	r3, [pc, #32]	; (800e348 <lwip_netconn_do_getaddr+0x100>)
 800e328:	f240 727d 	movw	r2, #1917	; 0x77d
 800e32c:	4907      	ldr	r1, [pc, #28]	; (800e34c <lwip_netconn_do_getaddr+0x104>)
 800e32e:	4808      	ldr	r0, [pc, #32]	; (800e350 <lwip_netconn_do_getaddr+0x108>)
 800e330:	f00d fcec 	bl	801bd0c <iprintf>
        break;
 800e334:	e003      	b.n	800e33e <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	22f5      	movs	r2, #245	; 0xf5
 800e33a:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e33c:	bf00      	nop
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
 800e346:	bf00      	nop
 800e348:	0801e62c 	.word	0x0801e62c
 800e34c:	0801eb6c 	.word	0x0801eb6c
 800e350:	0801e670 	.word	0x0801e670

0800e354 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b084      	sub	sp, #16
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	785b      	ldrb	r3, [r3, #1]
 800e366:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d069      	beq.n	800e446 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	781b      	ldrb	r3, [r3, #0]
 800e378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800e37c:	2b10      	cmp	r3, #16
 800e37e:	d162      	bne.n	800e446 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800e384:	2b03      	cmp	r3, #3
 800e386:	d002      	beq.n	800e38e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800e388:	7afb      	ldrb	r3, [r7, #11]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d05b      	beq.n	800e446 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800e38e:	7afb      	ldrb	r3, [r7, #11]
 800e390:	2b03      	cmp	r3, #3
 800e392:	d103      	bne.n	800e39c <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	22f5      	movs	r2, #245	; 0xf5
 800e398:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e39a:	e059      	b.n	800e450 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800e39c:	7afb      	ldrb	r3, [r7, #11]
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d103      	bne.n	800e3aa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	22fb      	movs	r2, #251	; 0xfb
 800e3a6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800e3a8:	e052      	b.n	800e450 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	7a1b      	ldrb	r3, [r3, #8]
 800e3ae:	f003 0301 	and.w	r3, r3, #1
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d004      	beq.n	800e3c0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7ff f968 	bl	800d690 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d006      	beq.n	800e3d8 <lwip_netconn_do_close+0x84>
 800e3ca:	4b23      	ldr	r3, [pc, #140]	; (800e458 <lwip_netconn_do_close+0x104>)
 800e3cc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800e3d0:	4922      	ldr	r1, [pc, #136]	; (800e45c <lwip_netconn_do_close+0x108>)
 800e3d2:	4823      	ldr	r0, [pc, #140]	; (800e460 <lwip_netconn_do_close+0x10c>)
 800e3d4:	f00d fc9a 	bl	801bd0c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2204      	movs	r2, #4
 800e3de:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	2100      	movs	r1, #0
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff f9cc 	bl	800d78c <lwip_netconn_do_close_internal>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d029      	beq.n	800e44e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	785b      	ldrb	r3, [r3, #1]
 800e400:	2b04      	cmp	r3, #4
 800e402:	d006      	beq.n	800e412 <lwip_netconn_do_close+0xbe>
 800e404:	4b14      	ldr	r3, [pc, #80]	; (800e458 <lwip_netconn_do_close+0x104>)
 800e406:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800e40a:	4916      	ldr	r1, [pc, #88]	; (800e464 <lwip_netconn_do_close+0x110>)
 800e40c:	4814      	ldr	r0, [pc, #80]	; (800e460 <lwip_netconn_do_close+0x10c>)
 800e40e:	f00d fc7d 	bl	801bd0c <iprintf>
        UNLOCK_TCPIP_CORE();
 800e412:	4815      	ldr	r0, [pc, #84]	; (800e468 <lwip_netconn_do_close+0x114>)
 800e414:	f00c ff9f 	bl	801b356 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	330c      	adds	r3, #12
 800e41e:	2100      	movs	r1, #0
 800e420:	4618      	mov	r0, r3
 800e422:	f00c fef6 	bl	801b212 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800e426:	4810      	ldr	r0, [pc, #64]	; (800e468 <lwip_netconn_do_close+0x114>)
 800e428:	f00c ff86 	bl	801b338 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	785b      	ldrb	r3, [r3, #1]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00b      	beq.n	800e44e <lwip_netconn_do_close+0xfa>
 800e436:	4b08      	ldr	r3, [pc, #32]	; (800e458 <lwip_netconn_do_close+0x104>)
 800e438:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800e43c:	4909      	ldr	r1, [pc, #36]	; (800e464 <lwip_netconn_do_close+0x110>)
 800e43e:	4808      	ldr	r0, [pc, #32]	; (800e460 <lwip_netconn_do_close+0x10c>)
 800e440:	f00d fc64 	bl	801bd0c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800e444:	e003      	b.n	800e44e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	22f5      	movs	r2, #245	; 0xf5
 800e44a:	711a      	strb	r2, [r3, #4]
 800e44c:	e000      	b.n	800e450 <lwip_netconn_do_close+0xfc>
      return;
 800e44e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e450:	3710      	adds	r7, #16
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}
 800e456:	bf00      	nop
 800e458:	0801e62c 	.word	0x0801e62c
 800e45c:	0801e9d0 	.word	0x0801e9d0
 800e460:	0801e670 	.word	0x0801e670
 800e464:	0801e9ec 	.word	0x0801e9ec
 800e468:	2000a0a4 	.word	0x2000a0a4

0800e46c <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e46c:	b480      	push	{r7}
 800e46e:	b083      	sub	sp, #12
 800e470:	af00      	add	r7, sp, #0
 800e472:	4603      	mov	r3, r0
 800e474:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	dc04      	bgt.n	800e488 <err_to_errno+0x1c>
 800e47e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e482:	f113 0f10 	cmn.w	r3, #16
 800e486:	da01      	bge.n	800e48c <err_to_errno+0x20>
    return EIO;
 800e488:	2305      	movs	r3, #5
 800e48a:	e005      	b.n	800e498 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e48c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e490:	425b      	negs	r3, r3
 800e492:	4a04      	ldr	r2, [pc, #16]	; (800e4a4 <err_to_errno+0x38>)
 800e494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e498:	4618      	mov	r0, r3
 800e49a:	370c      	adds	r7, #12
 800e49c:	46bd      	mov	sp, r7
 800e49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a2:	4770      	bx	lr
 800e4a4:	08021c08 	.word	0x08021c08

0800e4a8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d013      	beq.n	800e4de <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00b      	beq.n	800e4d6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f003 f8f2 	bl	80116ac <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	605a      	str	r2, [r3, #4]
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	685a      	ldr	r2, [r3, #4]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e4d6:	6879      	ldr	r1, [r7, #4]
 800e4d8:	2006      	movs	r0, #6
 800e4da:	f002 fa11 	bl	8010900 <memp_free>
  }
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b082      	sub	sp, #8
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d106      	bne.n	800e504 <netbuf_free+0x1c>
 800e4f6:	4b0d      	ldr	r3, [pc, #52]	; (800e52c <netbuf_free+0x44>)
 800e4f8:	2281      	movs	r2, #129	; 0x81
 800e4fa:	490d      	ldr	r1, [pc, #52]	; (800e530 <netbuf_free+0x48>)
 800e4fc:	480d      	ldr	r0, [pc, #52]	; (800e534 <netbuf_free+0x4c>)
 800e4fe:	f00d fc05 	bl	801bd0c <iprintf>
 800e502:	e00f      	b.n	800e524 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d004      	beq.n	800e516 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	4618      	mov	r0, r3
 800e512:	f003 f8cb 	bl	80116ac <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	2200      	movs	r2, #0
 800e51a:	605a      	str	r2, [r3, #4]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	685a      	ldr	r2, [r3, #4]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e524:	3708      	adds	r7, #8
 800e526:	46bd      	mov	sp, r7
 800e528:	bd80      	pop	{r7, pc}
 800e52a:	bf00      	nop
 800e52c:	0801eb84 	.word	0x0801eb84
 800e530:	0801ec20 	.word	0x0801ec20
 800e534:	0801ebd4 	.word	0x0801ebd4

0800e538 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b084      	sub	sp, #16
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	60f8      	str	r0, [r7, #12]
 800e540:	60b9      	str	r1, [r7, #8]
 800e542:	4613      	mov	r3, r2
 800e544:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d108      	bne.n	800e55e <netbuf_ref+0x26>
 800e54c:	4b1c      	ldr	r3, [pc, #112]	; (800e5c0 <netbuf_ref+0x88>)
 800e54e:	2299      	movs	r2, #153	; 0x99
 800e550:	491c      	ldr	r1, [pc, #112]	; (800e5c4 <netbuf_ref+0x8c>)
 800e552:	481d      	ldr	r0, [pc, #116]	; (800e5c8 <netbuf_ref+0x90>)
 800e554:	f00d fbda 	bl	801bd0c <iprintf>
 800e558:	f06f 030f 	mvn.w	r3, #15
 800e55c:	e02b      	b.n	800e5b6 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	2b00      	cmp	r3, #0
 800e564:	d004      	beq.n	800e570 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4618      	mov	r0, r3
 800e56c:	f003 f89e 	bl	80116ac <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e570:	2241      	movs	r2, #65	; 0x41
 800e572:	2100      	movs	r1, #0
 800e574:	2036      	movs	r0, #54	; 0x36
 800e576:	f002 fd83 	bl	8011080 <pbuf_alloc>
 800e57a:	4602      	mov	r2, r0
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2b00      	cmp	r3, #0
 800e586:	d105      	bne.n	800e594 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2200      	movs	r2, #0
 800e58c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e58e:	f04f 33ff 	mov.w	r3, #4294967295
 800e592:	e010      	b.n	800e5b6 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	88fa      	ldrh	r2, [r7, #6]
 800e5a2:	811a      	strh	r2, [r3, #8]
 800e5a4:	68fa      	ldr	r2, [r7, #12]
 800e5a6:	6812      	ldr	r2, [r2, #0]
 800e5a8:	891b      	ldrh	r3, [r3, #8]
 800e5aa:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681a      	ldr	r2, [r3, #0]
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e5b4:	2300      	movs	r3, #0
}
 800e5b6:	4618      	mov	r0, r3
 800e5b8:	3710      	adds	r7, #16
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	bd80      	pop	{r7, pc}
 800e5be:	bf00      	nop
 800e5c0:	0801eb84 	.word	0x0801eb84
 800e5c4:	0801ec3c 	.word	0x0801ec3c
 800e5c8:	0801ebd4 	.word	0x0801ebd4

0800e5cc <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e5cc:	b480      	push	{r7}
 800e5ce:	b085      	sub	sp, #20
 800e5d0:	af00      	add	r7, sp, #0
 800e5d2:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	db02      	blt.n	800e5e4 <tryget_socket_unconn_nouse+0x18>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2b03      	cmp	r3, #3
 800e5e2:	dd01      	ble.n	800e5e8 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	e003      	b.n	800e5f0 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	011b      	lsls	r3, r3, #4
 800e5ec:	4a03      	ldr	r2, [pc, #12]	; (800e5fc <tryget_socket_unconn_nouse+0x30>)
 800e5ee:	4413      	add	r3, r2
}
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5fa:	4770      	bx	lr
 800e5fc:	2000475c 	.word	0x2000475c

0800e600 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b084      	sub	sp, #16
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f7ff ffdf 	bl	800e5cc <tryget_socket_unconn_nouse>
 800e60e:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e610:	68fb      	ldr	r3, [r7, #12]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}

0800e61a <tryget_socket_unconn_locked>:

/* Like tryget_socket_unconn(), but called under SYS_ARCH_PROTECT lock. */
static struct lwip_sock *
tryget_socket_unconn_locked(int fd)
{
 800e61a:	b580      	push	{r7, lr}
 800e61c:	b084      	sub	sp, #16
 800e61e:	af00      	add	r7, sp, #0
 800e620:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e622:	6878      	ldr	r0, [r7, #4]
 800e624:	f7ff ffd2 	bl	800e5cc <tryget_socket_unconn_nouse>
 800e628:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used_locked(ret)) {
      return NULL;
    }
  }
  return ret;
 800e62a:	68fb      	ldr	r3, [r7, #12]
}
 800e62c:	4618      	mov	r0, r3
 800e62e:	3710      	adds	r7, #16
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b084      	sub	sp, #16
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e63c:	6878      	ldr	r0, [r7, #4]
 800e63e:	f7ff ffdf 	bl	800e600 <tryget_socket_unconn>
 800e642:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d005      	beq.n	800e656 <tryget_socket+0x22>
    if (sock->conn) {
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d001      	beq.n	800e656 <tryget_socket+0x22>
      return sock;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	e000      	b.n	800e658 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b084      	sub	sp, #16
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f7ff ffe3 	bl	800e634 <tryget_socket>
 800e66e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d104      	bne.n	800e680 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e676:	4b05      	ldr	r3, [pc, #20]	; (800e68c <get_socket+0x2c>)
 800e678:	2209      	movs	r2, #9
 800e67a:	601a      	str	r2, [r3, #0]
    return NULL;
 800e67c:	2300      	movs	r3, #0
 800e67e:	e000      	b.n	800e682 <get_socket+0x22>
  }
  return sock;
 800e680:	68fb      	ldr	r3, [r7, #12]
}
 800e682:	4618      	mov	r0, r3
 800e684:	3710      	adds	r7, #16
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}
 800e68a:	bf00      	nop
 800e68c:	2000d7d8 	.word	0x2000d7d8

0800e690 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
 800e698:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e69a:	2300      	movs	r3, #0
 800e69c:	60fb      	str	r3, [r7, #12]
 800e69e:	e052      	b.n	800e746 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e6a0:	f00c fe8c 	bl	801b3bc <sys_arch_protect>
 800e6a4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e6a6:	4a2c      	ldr	r2, [pc, #176]	; (800e758 <alloc_socket+0xc8>)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	011b      	lsls	r3, r3, #4
 800e6ac:	4413      	add	r3, r2
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d142      	bne.n	800e73a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e6b4:	4a28      	ldr	r2, [pc, #160]	; (800e758 <alloc_socket+0xc8>)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	011b      	lsls	r3, r3, #4
 800e6ba:	4413      	add	r3, r2
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e6c0:	68b8      	ldr	r0, [r7, #8]
 800e6c2:	f00c fe89 	bl	801b3d8 <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e6c6:	4a24      	ldr	r2, [pc, #144]	; (800e758 <alloc_socket+0xc8>)
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	011b      	lsls	r3, r3, #4
 800e6cc:	4413      	add	r3, r2
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e6d4:	4a20      	ldr	r2, [pc, #128]	; (800e758 <alloc_socket+0xc8>)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	011b      	lsls	r3, r3, #4
 800e6da:	4413      	add	r3, r2
 800e6dc:	330e      	adds	r3, #14
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d006      	beq.n	800e6f2 <alloc_socket+0x62>
 800e6e4:	4b1d      	ldr	r3, [pc, #116]	; (800e75c <alloc_socket+0xcc>)
 800e6e6:	f240 220e 	movw	r2, #526	; 0x20e
 800e6ea:	491d      	ldr	r1, [pc, #116]	; (800e760 <alloc_socket+0xd0>)
 800e6ec:	481d      	ldr	r0, [pc, #116]	; (800e764 <alloc_socket+0xd4>)
 800e6ee:	f00d fb0d 	bl	801bd0c <iprintf>
      sockets[i].rcvevent   = 0;
 800e6f2:	4a19      	ldr	r2, [pc, #100]	; (800e758 <alloc_socket+0xc8>)
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	011b      	lsls	r3, r3, #4
 800e6f8:	4413      	add	r3, r2
 800e6fa:	3308      	adds	r3, #8
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	781b      	ldrb	r3, [r3, #0]
 800e704:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e708:	2b10      	cmp	r3, #16
 800e70a:	d102      	bne.n	800e712 <alloc_socket+0x82>
 800e70c:	683b      	ldr	r3, [r7, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d001      	beq.n	800e716 <alloc_socket+0x86>
 800e712:	2301      	movs	r3, #1
 800e714:	e000      	b.n	800e718 <alloc_socket+0x88>
 800e716:	2300      	movs	r3, #0
 800e718:	b299      	uxth	r1, r3
 800e71a:	4a0f      	ldr	r2, [pc, #60]	; (800e758 <alloc_socket+0xc8>)
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	011b      	lsls	r3, r3, #4
 800e720:	4413      	add	r3, r2
 800e722:	330a      	adds	r3, #10
 800e724:	460a      	mov	r2, r1
 800e726:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e728:	4a0b      	ldr	r2, [pc, #44]	; (800e758 <alloc_socket+0xc8>)
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	011b      	lsls	r3, r3, #4
 800e72e:	4413      	add	r3, r2
 800e730:	330c      	adds	r3, #12
 800e732:	2200      	movs	r2, #0
 800e734:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	e00a      	b.n	800e750 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e73a:	68b8      	ldr	r0, [r7, #8]
 800e73c:	f00c fe4c 	bl	801b3d8 <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	3301      	adds	r3, #1
 800e744:	60fb      	str	r3, [r7, #12]
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2b03      	cmp	r3, #3
 800e74a:	dda9      	ble.n	800e6a0 <alloc_socket+0x10>
  }
  return -1;
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e750:	4618      	mov	r0, r3
 800e752:	3710      	adds	r7, #16
 800e754:	46bd      	mov	sp, r7
 800e756:	bd80      	pop	{r7, pc}
 800e758:	2000475c 	.word	0x2000475c
 800e75c:	0801ed1c 	.word	0x0801ed1c
 800e760:	0801ed50 	.word	0x0801ed50
 800e764:	0801ed70 	.word	0x0801ed70

0800e768 <lwip_bind>:
  return newsock;
}

int
lwip_bind(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b08a      	sub	sp, #40	; 0x28
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	60f8      	str	r0, [r7, #12]
 800e770:	60b9      	str	r1, [r7, #8]
 800e772:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  ip_addr_t local_addr;
  u16_t local_port;
  err_t err;

  sock = get_socket(s);
 800e774:	68f8      	ldr	r0, [r7, #12]
 800e776:	f7ff ff73 	bl	800e660 <get_socket>
 800e77a:	6278      	str	r0, [r7, #36]	; 0x24
  if (!sock) {
 800e77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d102      	bne.n	800e788 <lwip_bind+0x20>
    return -1;
 800e782:	f04f 33ff 	mov.w	r3, #4294967295
 800e786:	e051      	b.n	800e82c <lwip_bind+0xc4>
    done_socket(sock);
    return -1;
  }

  /* check size, family and alignment of 'name' */
  LWIP_ERROR("lwip_bind: invalid address", (IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	2b10      	cmp	r3, #16
 800e78c:	d108      	bne.n	800e7a0 <lwip_bind+0x38>
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	785b      	ldrb	r3, [r3, #1]
 800e792:	2b02      	cmp	r3, #2
 800e794:	d104      	bne.n	800e7a0 <lwip_bind+0x38>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	f003 0303 	and.w	r3, r3, #3
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d014      	beq.n	800e7ca <lwip_bind+0x62>
 800e7a0:	4b24      	ldr	r3, [pc, #144]	; (800e834 <lwip_bind+0xcc>)
 800e7a2:	f240 22e2 	movw	r2, #738	; 0x2e2
 800e7a6:	4924      	ldr	r1, [pc, #144]	; (800e838 <lwip_bind+0xd0>)
 800e7a8:	4824      	ldr	r0, [pc, #144]	; (800e83c <lwip_bind+0xd4>)
 800e7aa:	f00d faaf 	bl	801bd0c <iprintf>
 800e7ae:	f06f 000f 	mvn.w	r0, #15
 800e7b2:	f7ff fe5b 	bl	800e46c <err_to_errno>
 800e7b6:	6178      	str	r0, [r7, #20]
 800e7b8:	697b      	ldr	r3, [r7, #20]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d002      	beq.n	800e7c4 <lwip_bind+0x5c>
 800e7be:	4a20      	ldr	r2, [pc, #128]	; (800e840 <lwip_bind+0xd8>)
 800e7c0:	697b      	ldr	r3, [r7, #20]
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e7c8:	e030      	b.n	800e82c <lwip_bind+0xc4>
             IS_SOCK_ADDR_TYPE_VALID(name) && IS_SOCK_ADDR_ALIGNED(name)),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(namelen);

  SOCKADDR_TO_IPADDR_PORT(name, &local_addr, local_port);
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	685b      	ldr	r3, [r3, #4]
 800e7ce:	613b      	str	r3, [r7, #16]
 800e7d0:	68bb      	ldr	r3, [r7, #8]
 800e7d2:	885b      	ldrh	r3, [r3, #2]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f001 fb8b 	bl	800fef0 <lwip_htons>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	847b      	strh	r3, [r7, #34]	; 0x22
    unmap_ipv4_mapped_ipv6(ip_2_ip4(&local_addr), ip_2_ip6(&local_addr));
    IP_SET_TYPE_VAL(local_addr, IPADDR_TYPE_V4);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  err = netconn_bind(sock->conn, &local_addr, local_port);
 800e7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e7e4:	f107 0110 	add.w	r1, r7, #16
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fd ff69 	bl	800c6c0 <netconn_bind>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

  if (err != ERR_OK) {
 800e7f4:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d00e      	beq.n	800e81a <lwip_bind+0xb2>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800e7fc:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e800:	4618      	mov	r0, r3
 800e802:	f7ff fe33 	bl	800e46c <err_to_errno>
 800e806:	61b8      	str	r0, [r7, #24]
 800e808:	69bb      	ldr	r3, [r7, #24]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d002      	beq.n	800e814 <lwip_bind+0xac>
 800e80e:	4a0c      	ldr	r2, [pc, #48]	; (800e840 <lwip_bind+0xd8>)
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e814:	f04f 33ff 	mov.w	r3, #4294967295
 800e818:	e008      	b.n	800e82c <lwip_bind+0xc4>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_bind(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800e81a:	2300      	movs	r3, #0
 800e81c:	61fb      	str	r3, [r7, #28]
 800e81e:	69fb      	ldr	r3, [r7, #28]
 800e820:	2b00      	cmp	r3, #0
 800e822:	d002      	beq.n	800e82a <lwip_bind+0xc2>
 800e824:	4a06      	ldr	r2, [pc, #24]	; (800e840 <lwip_bind+0xd8>)
 800e826:	69fb      	ldr	r3, [r7, #28]
 800e828:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3728      	adds	r7, #40	; 0x28
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}
 800e834:	0801ed1c 	.word	0x0801ed1c
 800e838:	0801edc0 	.word	0x0801edc0
 800e83c:	0801ed70 	.word	0x0801ed70
 800e840:	2000d7d8 	.word	0x2000d7d8

0800e844 <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b08c      	sub	sp, #48	; 0x30
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	60b9      	str	r1, [r7, #8]
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800e852:	2308      	movs	r3, #8
 800e854:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  ssize_t recvd = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	62bb      	str	r3, [r7, #40]	; 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	db01      	blt.n	800e866 <lwip_recv_tcp+0x22>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	e001      	b.n	800e86a <lwip_recv_tcp+0x26>
 800e866:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e86a:	627b      	str	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d106      	bne.n	800e880 <lwip_recv_tcp+0x3c>
 800e872:	4b74      	ldr	r3, [pc, #464]	; (800ea44 <lwip_recv_tcp+0x200>)
 800e874:	f240 329e 	movw	r2, #926	; 0x39e
 800e878:	4973      	ldr	r1, [pc, #460]	; (800ea48 <lwip_recv_tcp+0x204>)
 800e87a:	4874      	ldr	r0, [pc, #464]	; (800ea4c <lwip_recv_tcp+0x208>)
 800e87c:	f00d fa46 	bl	801bd0c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	781b      	ldrb	r3, [r3, #0]
 800e886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e88a:	2b10      	cmp	r3, #16
 800e88c:	d006      	beq.n	800e89c <lwip_recv_tcp+0x58>
 800e88e:	4b6d      	ldr	r3, [pc, #436]	; (800ea44 <lwip_recv_tcp+0x200>)
 800e890:	f240 329f 	movw	r2, #927	; 0x39f
 800e894:	496e      	ldr	r1, [pc, #440]	; (800ea50 <lwip_recv_tcp+0x20c>)
 800e896:	486d      	ldr	r0, [pc, #436]	; (800ea4c <lwip_recv_tcp+0x208>)
 800e898:	f00d fa38 	bl	801bd0c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	f003 0308 	and.w	r3, r3, #8
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d005      	beq.n	800e8b2 <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e8a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8aa:	f043 0304 	orr.w	r3, r3, #4
 800e8ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	685b      	ldr	r3, [r3, #4]
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d003      	beq.n	800e8c2 <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	685b      	ldr	r3, [r3, #4]
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	e036      	b.n	800e930 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e8ca:	f107 0114 	add.w	r1, r7, #20
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7fe f8d8 	bl	800ca84 <netconn_recv_tcp_pbuf_flags>
 800e8d4:	4603      	mov	r3, r0
 800e8d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e8da:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d019      	beq.n	800e916 <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	f300 808d 	bgt.w	800ea04 <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e8ea:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7ff fdbc 	bl	800e46c <err_to_errno>
 800e8f4:	61f8      	str	r0, [r7, #28]
 800e8f6:	69fb      	ldr	r3, [r7, #28]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d002      	beq.n	800e902 <lwip_recv_tcp+0xbe>
 800e8fc:	4a55      	ldr	r2, [pc, #340]	; (800ea54 <lwip_recv_tcp+0x210>)
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e902:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800e906:	f113 0f0f 	cmn.w	r3, #15
 800e90a:	d101      	bne.n	800e910 <lwip_recv_tcp+0xcc>
          return 0;
 800e90c:	2300      	movs	r3, #0
 800e90e:	e094      	b.n	800ea3a <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e910:	f04f 33ff 	mov.w	r3, #4294967295
 800e914:	e091      	b.n	800ea3a <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d106      	bne.n	800e92a <lwip_recv_tcp+0xe6>
 800e91c:	4b49      	ldr	r3, [pc, #292]	; (800ea44 <lwip_recv_tcp+0x200>)
 800e91e:	f240 32c5 	movw	r2, #965	; 0x3c5
 800e922:	494d      	ldr	r1, [pc, #308]	; (800ea58 <lwip_recv_tcp+0x214>)
 800e924:	4849      	ldr	r0, [pc, #292]	; (800ea4c <lwip_recv_tcp+0x208>)
 800e926:	f00d f9f1 	bl	801bd0c <iprintf>
      sock->lastdata.pbuf = p;
 800e92a:	697a      	ldr	r2, [r7, #20]
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e930:	697b      	ldr	r3, [r7, #20]
 800e932:	891b      	ldrh	r3, [r3, #8]
 800e934:	461a      	mov	r2, r3
 800e936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e938:	4293      	cmp	r3, r2
 800e93a:	dd03      	ble.n	800e944 <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	891b      	ldrh	r3, [r3, #8]
 800e940:	847b      	strh	r3, [r7, #34]	; 0x22
 800e942:	e001      	b.n	800e948 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e946:	847b      	strh	r3, [r7, #34]	; 0x22
    }
    if (recvd + copylen < recvd) {
 800e948:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e94a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e94c:	4413      	add	r3, r2
 800e94e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e950:	429a      	cmp	r2, r3
 800e952:	dd03      	ble.n	800e95c <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e956:	b29b      	uxth	r3, r3
 800e958:	43db      	mvns	r3, r3
 800e95a:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e95c:	6978      	ldr	r0, [r7, #20]
 800e95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e960:	68ba      	ldr	r2, [r7, #8]
 800e962:	18d1      	adds	r1, r2, r3
 800e964:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e966:	2300      	movs	r3, #0
 800e968:	f003 f8a6 	bl	8011ab8 <pbuf_copy_partial>

    recvd += copylen;
 800e96c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e96e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e970:	4413      	add	r3, r2
 800e972:	62bb      	str	r3, [r7, #40]	; 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e978:	429a      	cmp	r2, r3
 800e97a:	da06      	bge.n	800e98a <lwip_recv_tcp+0x146>
 800e97c:	4b31      	ldr	r3, [pc, #196]	; (800ea44 <lwip_recv_tcp+0x200>)
 800e97e:	f240 32dd 	movw	r2, #989	; 0x3dd
 800e982:	4936      	ldr	r1, [pc, #216]	; (800ea5c <lwip_recv_tcp+0x218>)
 800e984:	4831      	ldr	r0, [pc, #196]	; (800ea4c <lwip_recv_tcp+0x208>)
 800e986:	f00d f9c1 	bl	801bd0c <iprintf>
    recv_left -= copylen;
 800e98a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e98c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e98e:	1ad3      	subs	r3, r2, r3
 800e990:	627b      	str	r3, [r7, #36]	; 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	f003 0301 	and.w	r3, r3, #1
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d123      	bne.n	800e9e4 <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	891b      	ldrh	r3, [r3, #8]
 800e9a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d906      	bls.n	800e9b4 <lwip_recv_tcp+0x170>
 800e9a6:	4b27      	ldr	r3, [pc, #156]	; (800ea44 <lwip_recv_tcp+0x200>)
 800e9a8:	f240 32e3 	movw	r2, #995	; 0x3e3
 800e9ac:	492c      	ldr	r1, [pc, #176]	; (800ea60 <lwip_recv_tcp+0x21c>)
 800e9ae:	4827      	ldr	r0, [pc, #156]	; (800ea4c <lwip_recv_tcp+0x208>)
 800e9b0:	f00d f9ac 	bl	801bd0c <iprintf>
      if (p->tot_len - copylen > 0) {
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	891b      	ldrh	r3, [r3, #8]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	dd09      	ble.n	800e9d6 <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e9c6:	4611      	mov	r1, r2
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f002 fe3c 	bl	8011646 <pbuf_free_header>
 800e9ce:	4602      	mov	r2, r0
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	605a      	str	r2, [r3, #4]
 800e9d4:	e006      	b.n	800e9e4 <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e9dc:	697b      	ldr	r3, [r7, #20]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f002 fe64 	bl	80116ac <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e9e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9e8:	f043 0314 	orr.w	r3, r3, #20
 800e9ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e9f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	dd08      	ble.n	800ea08 <lwip_recv_tcp+0x1c4>
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	f003 0301 	and.w	r3, r3, #1
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	f43f af58 	beq.w	800e8b2 <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800ea02:	e001      	b.n	800ea08 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800ea04:	bf00      	nop
 800ea06:	e000      	b.n	800ea0a <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800ea08:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800ea0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	dd0b      	ble.n	800ea28 <lwip_recv_tcp+0x1e4>
 800ea10:	683b      	ldr	r3, [r7, #0]
 800ea12:	f003 0301 	and.w	r3, r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d106      	bne.n	800ea28 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ea20:	4611      	mov	r1, r2
 800ea22:	4618      	mov	r0, r3
 800ea24:	f7fd ff7c 	bl	800c920 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800ea28:	2300      	movs	r3, #0
 800ea2a:	61bb      	str	r3, [r7, #24]
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d002      	beq.n	800ea38 <lwip_recv_tcp+0x1f4>
 800ea32:	4a08      	ldr	r2, [pc, #32]	; (800ea54 <lwip_recv_tcp+0x210>)
 800ea34:	69bb      	ldr	r3, [r7, #24]
 800ea36:	6013      	str	r3, [r2, #0]
  return recvd;
 800ea38:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3730      	adds	r7, #48	; 0x30
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	0801ed1c 	.word	0x0801ed1c
 800ea48:	0801ee14 	.word	0x0801ee14
 800ea4c:	0801ed70 	.word	0x0801ed70
 800ea50:	0801ee24 	.word	0x0801ee24
 800ea54:	2000d7d8 	.word	0x2000d7d8
 800ea58:	0801ee48 	.word	0x0801ee48
 800ea5c:	0801ee54 	.word	0x0801ee54
 800ea60:	0801ee7c 	.word	0x0801ee7c

0800ea64 <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800ea64:	b590      	push	{r4, r7, lr}
 800ea66:	b08b      	sub	sp, #44	; 0x2c
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	603b      	str	r3, [r7, #0]
 800ea70:	4613      	mov	r3, r2
 800ea72:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	627b      	str	r3, [r7, #36]	; 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d106      	bne.n	800ea8c <lwip_sock_make_addr+0x28>
 800ea7e:	4b2b      	ldr	r3, [pc, #172]	; (800eb2c <lwip_sock_make_addr+0xc8>)
 800ea80:	f240 4207 	movw	r2, #1031	; 0x407
 800ea84:	492a      	ldr	r1, [pc, #168]	; (800eb30 <lwip_sock_make_addr+0xcc>)
 800ea86:	482b      	ldr	r0, [pc, #172]	; (800eb34 <lwip_sock_make_addr+0xd0>)
 800ea88:	f00d f940 	bl	801bd0c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d106      	bne.n	800eaa0 <lwip_sock_make_addr+0x3c>
 800ea92:	4b26      	ldr	r3, [pc, #152]	; (800eb2c <lwip_sock_make_addr+0xc8>)
 800ea94:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800ea98:	4927      	ldr	r1, [pc, #156]	; (800eb38 <lwip_sock_make_addr+0xd4>)
 800ea9a:	4826      	ldr	r0, [pc, #152]	; (800eb34 <lwip_sock_make_addr+0xd0>)
 800ea9c:	f00d f936 	bl	801bd0c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800eaa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d106      	bne.n	800eab4 <lwip_sock_make_addr+0x50>
 800eaa6:	4b21      	ldr	r3, [pc, #132]	; (800eb2c <lwip_sock_make_addr+0xc8>)
 800eaa8:	f240 4209 	movw	r2, #1033	; 0x409
 800eaac:	4923      	ldr	r1, [pc, #140]	; (800eb3c <lwip_sock_make_addr+0xd8>)
 800eaae:	4821      	ldr	r0, [pc, #132]	; (800eb34 <lwip_sock_make_addr+0xd0>)
 800eab0:	f00d f92c 	bl	801bd0c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800eab4:	f107 0314 	add.w	r3, r7, #20
 800eab8:	2210      	movs	r2, #16
 800eaba:	701a      	strb	r2, [r3, #0]
 800eabc:	f107 0314 	add.w	r3, r7, #20
 800eac0:	2202      	movs	r2, #2
 800eac2:	705a      	strb	r2, [r3, #1]
 800eac4:	f107 0414 	add.w	r4, r7, #20
 800eac8:	88fb      	ldrh	r3, [r7, #6]
 800eaca:	4618      	mov	r0, r3
 800eacc:	f001 fa10 	bl	800fef0 <lwip_htons>
 800ead0:	4603      	mov	r3, r0
 800ead2:	8063      	strh	r3, [r4, #2]
 800ead4:	f107 0314 	add.w	r3, r7, #20
 800ead8:	68ba      	ldr	r2, [r7, #8]
 800eada:	6812      	ldr	r2, [r2, #0]
 800eadc:	605a      	str	r2, [r3, #4]
 800eade:	f107 0314 	add.w	r3, r7, #20
 800eae2:	3308      	adds	r3, #8
 800eae4:	2208      	movs	r2, #8
 800eae6:	2100      	movs	r1, #0
 800eae8:	4618      	mov	r0, r3
 800eaea:	f00c fcc5 	bl	801b478 <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800eaee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	7d3a      	ldrb	r2, [r7, #20]
 800eaf4:	4293      	cmp	r3, r2
 800eaf6:	d202      	bcs.n	800eafe <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800eaf8:	2301      	movs	r3, #1
 800eafa:	627b      	str	r3, [r7, #36]	; 0x24
 800eafc:	e008      	b.n	800eb10 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800eafe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	7d3a      	ldrb	r2, [r7, #20]
 800eb04:	4293      	cmp	r3, r2
 800eb06:	d903      	bls.n	800eb10 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800eb08:	7d3b      	ldrb	r3, [r7, #20]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb0e:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	f107 0314 	add.w	r3, r7, #20
 800eb18:	4619      	mov	r1, r3
 800eb1a:	6838      	ldr	r0, [r7, #0]
 800eb1c:	f00c fc9e 	bl	801b45c <memcpy>
  return truncated;
 800eb20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	372c      	adds	r7, #44	; 0x2c
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd90      	pop	{r4, r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	0801ed1c 	.word	0x0801ed1c
 800eb30:	0801ee8c 	.word	0x0801ee8c
 800eb34:	0801ed70 	.word	0x0801ed70
 800eb38:	0801eea0 	.word	0x0801eea0
 800eb3c:	0801eeb0 	.word	0x0801eeb0

0800eb40 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d101      	bne.n	800eb58 <lwip_recv_tcp_from+0x18>
    return 0;
 800eb54:	2300      	movs	r3, #0
 800eb56:	e021      	b.n	800eb9c <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d01d      	beq.n	800eb9a <lwip_recv_tcp_from+0x5a>
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d01a      	beq.n	800eb9a <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	6818      	ldr	r0, [r3, #0]
 800eb68:	f107 0216 	add.w	r2, r7, #22
 800eb6c:	f107 0110 	add.w	r1, r7, #16
 800eb70:	2300      	movs	r3, #0
 800eb72:	f7fd fd53 	bl	800c61c <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00e      	beq.n	800eb9a <lwip_recv_tcp_from+0x5a>
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00b      	beq.n	800eb9a <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	6818      	ldr	r0, [r3, #0]
 800eb86:	8afa      	ldrh	r2, [r7, #22]
 800eb88:	f107 0110 	add.w	r1, r7, #16
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	9300      	str	r3, [sp, #0]
 800eb90:	68bb      	ldr	r3, [r7, #8]
 800eb92:	f7ff ff67 	bl	800ea64 <lwip_sock_make_addr>
 800eb96:	4603      	mov	r3, r0
 800eb98:	e000      	b.n	800eb9c <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800eba4:	b590      	push	{r4, r7, lr}
 800eba6:	b08d      	sub	sp, #52	; 0x34
 800eba8:	af02      	add	r7, sp, #8
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
 800ebb0:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	689b      	ldr	r3, [r3, #8]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d10d      	bne.n	800ebd6 <lwip_recvfrom_udp_raw+0x32>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	68db      	ldr	r3, [r3, #12]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	dd09      	ble.n	800ebd6 <lwip_recvfrom_udp_raw+0x32>
 800ebc2:	4b5e      	ldr	r3, [pc, #376]	; (800ed3c <lwip_recvfrom_udp_raw+0x198>)
 800ebc4:	f240 4249 	movw	r2, #1097	; 0x449
 800ebc8:	495d      	ldr	r1, [pc, #372]	; (800ed40 <lwip_recvfrom_udp_raw+0x19c>)
 800ebca:	485e      	ldr	r0, [pc, #376]	; (800ed44 <lwip_recvfrom_udp_raw+0x1a0>)
 800ebcc:	f00d f89e 	bl	801bd0c <iprintf>
 800ebd0:	f06f 030f 	mvn.w	r3, #15
 800ebd4:	e0ad      	b.n	800ed32 <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800ebd6:	68bb      	ldr	r3, [r7, #8]
 800ebd8:	f003 0308 	and.w	r3, r3, #8
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d003      	beq.n	800ebe8 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800ebe0:	2304      	movs	r3, #4
 800ebe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebe6:	e002      	b.n	800ebee <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d11e      	bne.n	800ec38 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800ec02:	f107 0110 	add.w	r1, r7, #16
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fd ff68 	bl	800cadc <netconn_recv_udp_raw_netbuf_flags>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800ec10:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d002      	beq.n	800ec1e <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800ec18:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ec1c:	e089      	b.n	800ed32 <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d106      	bne.n	800ec32 <lwip_recvfrom_udp_raw+0x8e>
 800ec24:	4b45      	ldr	r3, [pc, #276]	; (800ed3c <lwip_recvfrom_udp_raw+0x198>)
 800ec26:	f240 425e 	movw	r2, #1118	; 0x45e
 800ec2a:	4947      	ldr	r1, [pc, #284]	; (800ed48 <lwip_recvfrom_udp_raw+0x1a4>)
 800ec2c:	4845      	ldr	r0, [pc, #276]	; (800ed44 <lwip_recvfrom_udp_raw+0x1a0>)
 800ec2e:	f00d f86d 	bl	801bd0c <iprintf>
    sock->lastdata.netbuf = buf;
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800ec38:	693b      	ldr	r3, [r7, #16]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	891b      	ldrh	r3, [r3, #8]
 800ec3e:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800ec40:	2300      	movs	r3, #0
 800ec42:	847b      	strh	r3, [r7, #34]	; 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ec44:	2300      	movs	r3, #0
 800ec46:	61fb      	str	r3, [r7, #28]
 800ec48:	e029      	b.n	800ec9e <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800ec4a:	8b3a      	ldrh	r2, [r7, #24]
 800ec4c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec4e:	1ad3      	subs	r3, r2, r3
 800ec50:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	689a      	ldr	r2, [r3, #8]
 800ec56:	69fb      	ldr	r3, [r7, #28]
 800ec58:	00db      	lsls	r3, r3, #3
 800ec5a:	4413      	add	r3, r2
 800ec5c:	685a      	ldr	r2, [r3, #4]
 800ec5e:	8afb      	ldrh	r3, [r7, #22]
 800ec60:	429a      	cmp	r2, r3
 800ec62:	d902      	bls.n	800ec6a <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800ec64:	8afb      	ldrh	r3, [r7, #22]
 800ec66:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ec68:	e006      	b.n	800ec78 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	689a      	ldr	r2, [r3, #8]
 800ec6e:	69fb      	ldr	r3, [r7, #28]
 800ec70:	00db      	lsls	r3, r3, #3
 800ec72:	4413      	add	r3, r2
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	6818      	ldr	r0, [r3, #0]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	689a      	ldr	r2, [r3, #8]
 800ec80:	69fb      	ldr	r3, [r7, #28]
 800ec82:	00db      	lsls	r3, r3, #3
 800ec84:	4413      	add	r3, r2
 800ec86:	6819      	ldr	r1, [r3, #0]
 800ec88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ec8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ec8c:	f002 ff14 	bl	8011ab8 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800ec90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ec92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec94:	4413      	add	r3, r2
 800ec96:	847b      	strh	r3, [r7, #34]	; 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800ec98:	69fb      	ldr	r3, [r7, #28]
 800ec9a:	3301      	adds	r3, #1
 800ec9c:	61fb      	str	r3, [r7, #28]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	69fa      	ldr	r2, [r7, #28]
 800eca4:	429a      	cmp	r2, r3
 800eca6:	da03      	bge.n	800ecb0 <lwip_recvfrom_udp_raw+0x10c>
 800eca8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ecaa:	8b3b      	ldrh	r3, [r7, #24]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	d3cc      	bcc.n	800ec4a <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d01a      	beq.n	800ecee <lwip_recvfrom_udp_raw+0x14a>
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	685b      	ldr	r3, [r3, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d016      	beq.n	800ecee <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d012      	beq.n	800ecee <lwip_recvfrom_udp_raw+0x14a>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00e      	beq.n	800ecee <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	6818      	ldr	r0, [r3, #0]
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	f103 0108 	add.w	r1, r3, #8
 800ecda:	693b      	ldr	r3, [r7, #16]
 800ecdc:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	3304      	adds	r3, #4
 800ece6:	9300      	str	r3, [sp, #0]
 800ece8:	4623      	mov	r3, r4
 800ecea:	f7ff febb 	bl	800ea64 <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	691b      	ldr	r3, [r3, #16]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d007      	beq.n	800ed0c <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800ecfc:	2300      	movs	r3, #0
 800ecfe:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800ed00:	7d7b      	ldrb	r3, [r7, #21]
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d102      	bne.n	800ed0c <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d106      	bne.n	800ed24 <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	2200      	movs	r2, #0
 800ed1a:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7ff fbc2 	bl	800e4a8 <netbuf_delete>
  }
  if (datagram_len) {
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d002      	beq.n	800ed30 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	8b3a      	ldrh	r2, [r7, #24]
 800ed2e:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800ed30:	2300      	movs	r3, #0
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	372c      	adds	r7, #44	; 0x2c
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd90      	pop	{r4, r7, pc}
 800ed3a:	bf00      	nop
 800ed3c:	0801ed1c 	.word	0x0801ed1c
 800ed40:	0801eec0 	.word	0x0801eec0
 800ed44:	0801ed70 	.word	0x0801ed70
 800ed48:	0801eeec 	.word	0x0801eeec

0800ed4c <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b096      	sub	sp, #88	; 0x58
 800ed50:	af02      	add	r7, sp, #8
 800ed52:	60f8      	str	r0, [r7, #12]
 800ed54:	60b9      	str	r1, [r7, #8]
 800ed56:	607a      	str	r2, [r7, #4]
 800ed58:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800ed5a:	68f8      	ldr	r0, [r7, #12]
 800ed5c:	f7ff fc80 	bl	800e660 <get_socket>
 800ed60:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (!sock) {
 800ed62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d102      	bne.n	800ed6e <lwip_recvfrom+0x22>
    return -1;
 800ed68:	f04f 33ff 	mov.w	r3, #4294967295
 800ed6c:	e078      	b.n	800ee60 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ed6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ed78:	2b10      	cmp	r3, #16
 800ed7a:	d112      	bne.n	800eda2 <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	68b9      	ldr	r1, [r7, #8]
 800ed82:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed84:	f7ff fd5e 	bl	800e844 <lwip_recv_tcp>
 800ed88:	6478      	str	r0, [r7, #68]	; 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800ed8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8c:	9301      	str	r3, [sp, #4]
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	9300      	str	r3, [sp, #0]
 800ed92:	4b35      	ldr	r3, [pc, #212]	; (800ee68 <lwip_recvfrom+0x11c>)
 800ed94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ed96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ed98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed9a:	f7ff fed1 	bl	800eb40 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800ed9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eda0:	e05e      	b.n	800ee60 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800eda2:	2300      	movs	r3, #0
 800eda4:	877b      	strh	r3, [r7, #58]	; 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	633b      	str	r3, [r7, #48]	; 0x30
    vec.iov_len = len;
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	637b      	str	r3, [r7, #52]	; 0x34
    msg.msg_control = NULL;
 800edae:	2300      	movs	r3, #0
 800edb0:	627b      	str	r3, [r7, #36]	; 0x24
    msg.msg_controllen = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	62bb      	str	r3, [r7, #40]	; 0x28
    msg.msg_flags = 0;
 800edb6:	2300      	movs	r3, #0
 800edb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    msg.msg_iov = &vec;
 800edba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800edbe:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800edc0:	2301      	movs	r3, #1
 800edc2:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800edc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800edc6:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800edc8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d002      	beq.n	800edd4 <lwip_recvfrom+0x88>
 800edce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	e000      	b.n	800edd6 <lwip_recvfrom+0x8a>
 800edd4:	2300      	movs	r3, #0
 800edd6:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800edd8:	f107 013a 	add.w	r1, r7, #58	; 0x3a
 800eddc:	f107 0214 	add.w	r2, r7, #20
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	460b      	mov	r3, r1
 800ede6:	6839      	ldr	r1, [r7, #0]
 800ede8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800edea:	f7ff fedb 	bl	800eba4 <lwip_recvfrom_udp_raw>
 800edee:	4603      	mov	r3, r0
 800edf0:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (err != ERR_OK) {
 800edf4:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d00e      	beq.n	800ee1a <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800edfc:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 800ee00:	4618      	mov	r0, r3
 800ee02:	f7ff fb33 	bl	800e46c <err_to_errno>
 800ee06:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ee08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d002      	beq.n	800ee14 <lwip_recvfrom+0xc8>
 800ee0e:	4a17      	ldr	r2, [pc, #92]	; (800ee6c <lwip_recvfrom+0x120>)
 800ee10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee12:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800ee14:	f04f 33ff 	mov.w	r3, #4294967295
 800ee18:	e022      	b.n	800ee60 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800ee1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ee1c:	461a      	mov	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	4293      	cmp	r3, r2
 800ee22:	bf28      	it	cs
 800ee24:	4613      	movcs	r3, r2
 800ee26:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d206      	bcs.n	800ee3c <lwip_recvfrom+0xf0>
 800ee2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ee30:	461a      	mov	r2, r3
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	4293      	cmp	r3, r2
 800ee36:	bf28      	it	cs
 800ee38:	4613      	movcs	r3, r2
 800ee3a:	e001      	b.n	800ee40 <lwip_recvfrom+0xf4>
 800ee3c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ee40:	647b      	str	r3, [r7, #68]	; 0x44
    if (fromlen) {
 800ee42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d002      	beq.n	800ee4e <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800ee48:	69ba      	ldr	r2, [r7, #24]
 800ee4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ee4c:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800ee4e:	2300      	movs	r3, #0
 800ee50:	643b      	str	r3, [r7, #64]	; 0x40
 800ee52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d002      	beq.n	800ee5e <lwip_recvfrom+0x112>
 800ee58:	4a04      	ldr	r2, [pc, #16]	; (800ee6c <lwip_recvfrom+0x120>)
 800ee5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ee5c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800ee5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800ee60:	4618      	mov	r0, r3
 800ee62:	3750      	adds	r7, #80	; 0x50
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}
 800ee68:	0801eef8 	.word	0x0801eef8
 800ee6c:	2000d7d8 	.word	0x2000d7d8

0800ee70 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b08a      	sub	sp, #40	; 0x28
 800ee74:	af02      	add	r7, sp, #8
 800ee76:	60f8      	str	r0, [r7, #12]
 800ee78:	60b9      	str	r1, [r7, #8]
 800ee7a:	607a      	str	r2, [r7, #4]
 800ee7c:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ee7e:	68f8      	ldr	r0, [r7, #12]
 800ee80:	f7ff fbee 	bl	800e660 <get_socket>
 800ee84:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ee86:	69fb      	ldr	r3, [r7, #28]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d102      	bne.n	800ee92 <lwip_send+0x22>
    return -1;
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee90:	e046      	b.n	800ef20 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	781b      	ldrb	r3, [r3, #0]
 800ee98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ee9c:	2b10      	cmp	r3, #16
 800ee9e:	d00b      	beq.n	800eeb8 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800eea0:	2300      	movs	r3, #0
 800eea2:	9301      	str	r3, [sp, #4]
 800eea4:	2300      	movs	r3, #0
 800eea6:	9300      	str	r3, [sp, #0]
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	687a      	ldr	r2, [r7, #4]
 800eeac:	68b9      	ldr	r1, [r7, #8]
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f000 f83c 	bl	800ef2c <lwip_sendto>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	e033      	b.n	800ef20 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d001      	beq.n	800eec6 <lwip_send+0x56>
 800eec2:	2203      	movs	r2, #3
 800eec4:	e000      	b.n	800eec8 <lwip_send+0x58>
 800eec6:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	105b      	asrs	r3, r3, #1
 800eecc:	b25b      	sxtb	r3, r3
 800eece:	f003 0304 	and.w	r3, r3, #4
 800eed2:	b25b      	sxtb	r3, r3
 800eed4:	4313      	orrs	r3, r2
 800eed6:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800eed8:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800eeda:	2300      	movs	r3, #0
 800eedc:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	6818      	ldr	r0, [r3, #0]
 800eee2:	7efa      	ldrb	r2, [r7, #27]
 800eee4:	f107 0310 	add.w	r3, r7, #16
 800eee8:	9300      	str	r3, [sp, #0]
 800eeea:	4613      	mov	r3, r2
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	68b9      	ldr	r1, [r7, #8]
 800eef0:	f7fd fe4e 	bl	800cb90 <netconn_write_partly>
 800eef4:	4603      	mov	r3, r0
 800eef6:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800eef8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eefc:	4618      	mov	r0, r3
 800eefe:	f7ff fab5 	bl	800e46c <err_to_errno>
 800ef02:	6178      	str	r0, [r7, #20]
 800ef04:	697b      	ldr	r3, [r7, #20]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <lwip_send+0xa0>
 800ef0a:	4a07      	ldr	r2, [pc, #28]	; (800ef28 <lwip_send+0xb8>)
 800ef0c:	697b      	ldr	r3, [r7, #20]
 800ef0e:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800ef10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d101      	bne.n	800ef1c <lwip_send+0xac>
 800ef18:	693b      	ldr	r3, [r7, #16]
 800ef1a:	e001      	b.n	800ef20 <lwip_send+0xb0>
 800ef1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	3720      	adds	r7, #32
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	2000d7d8 	.word	0x2000d7d8

0800ef2c <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b08e      	sub	sp, #56	; 0x38
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	60f8      	str	r0, [r7, #12]
 800ef34:	60b9      	str	r1, [r7, #8]
 800ef36:	607a      	str	r2, [r7, #4]
 800ef38:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800ef3a:	68f8      	ldr	r0, [r7, #12]
 800ef3c:	f7ff fb90 	bl	800e660 <get_socket>
 800ef40:	6338      	str	r0, [r7, #48]	; 0x30
  if (!sock) {
 800ef42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d102      	bne.n	800ef4e <lwip_sendto+0x22>
    return -1;
 800ef48:	f04f 33ff 	mov.w	r3, #4294967295
 800ef4c:	e093      	b.n	800f076 <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800ef4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef58:	2b10      	cmp	r3, #16
 800ef5a:	d107      	bne.n	800ef6c <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800ef5c:	683b      	ldr	r3, [r7, #0]
 800ef5e:	687a      	ldr	r2, [r7, #4]
 800ef60:	68b9      	ldr	r1, [r7, #8]
 800ef62:	68f8      	ldr	r0, [r7, #12]
 800ef64:	f7ff ff84 	bl	800ee70 <lwip_send>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	e084      	b.n	800f076 <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef72:	d30a      	bcc.n	800ef8a <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800ef74:	235a      	movs	r3, #90	; 0x5a
 800ef76:	623b      	str	r3, [r7, #32]
 800ef78:	6a3b      	ldr	r3, [r7, #32]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d002      	beq.n	800ef84 <lwip_sendto+0x58>
 800ef7e:	4a40      	ldr	r2, [pc, #256]	; (800f080 <lwip_sendto+0x154>)
 800ef80:	6a3b      	ldr	r3, [r7, #32]
 800ef82:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ef84:	f04f 33ff 	mov.w	r3, #4294967295
 800ef88:	e075      	b.n	800f076 <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	85fb      	strh	r3, [r7, #46]	; 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800ef8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <lwip_sendto+0x6e>
 800ef94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d023      	beq.n	800efe2 <lwip_sendto+0xb6>
 800ef9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef9c:	2b10      	cmp	r3, #16
 800ef9e:	d10b      	bne.n	800efb8 <lwip_sendto+0x8c>
 800efa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d008      	beq.n	800efb8 <lwip_sendto+0x8c>
 800efa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efa8:	785b      	ldrb	r3, [r3, #1]
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d104      	bne.n	800efb8 <lwip_sendto+0x8c>
 800efae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb0:	f003 0303 	and.w	r3, r3, #3
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d014      	beq.n	800efe2 <lwip_sendto+0xb6>
 800efb8:	4b32      	ldr	r3, [pc, #200]	; (800f084 <lwip_sendto+0x158>)
 800efba:	f240 6252 	movw	r2, #1618	; 0x652
 800efbe:	4932      	ldr	r1, [pc, #200]	; (800f088 <lwip_sendto+0x15c>)
 800efc0:	4832      	ldr	r0, [pc, #200]	; (800f08c <lwip_sendto+0x160>)
 800efc2:	f00c fea3 	bl	801bd0c <iprintf>
 800efc6:	f06f 000f 	mvn.w	r0, #15
 800efca:	f7ff fa4f 	bl	800e46c <err_to_errno>
 800efce:	62b8      	str	r0, [r7, #40]	; 0x28
 800efd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d002      	beq.n	800efdc <lwip_sendto+0xb0>
 800efd6:	4a2a      	ldr	r2, [pc, #168]	; (800f080 <lwip_sendto+0x154>)
 800efd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efda:	6013      	str	r3, [r2, #0]
 800efdc:	f04f 33ff 	mov.w	r3, #4294967295
 800efe0:	e049      	b.n	800f076 <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800efe2:	2300      	movs	r3, #0
 800efe4:	617b      	str	r3, [r7, #20]
 800efe6:	697b      	ldr	r3, [r7, #20]
 800efe8:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800efea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efec:	2b00      	cmp	r3, #0
 800efee:	d00a      	beq.n	800f006 <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800eff0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff2:	685b      	ldr	r3, [r3, #4]
 800eff4:	61bb      	str	r3, [r7, #24]
 800eff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eff8:	885b      	ldrh	r3, [r3, #2]
 800effa:	4618      	mov	r0, r3
 800effc:	f000 ff78 	bl	800fef0 <lwip_htons>
 800f000:	4603      	mov	r3, r0
 800f002:	86bb      	strh	r3, [r7, #52]	; 0x34
 800f004:	e003      	b.n	800f00e <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	86bb      	strh	r3, [r7, #52]	; 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800f00e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f010:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800f012:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f014:	f107 0310 	add.w	r3, r7, #16
 800f018:	68b9      	ldr	r1, [r7, #8]
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff fa8c 	bl	800e538 <netbuf_ref>
 800f020:	4603      	mov	r3, r0
 800f022:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800f026:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800f02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	f107 0210 	add.w	r2, r7, #16
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7fd fd7b 	bl	800cb34 <netconn_send>
 800f03e:	4603      	mov	r3, r0
 800f040:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800f044:	f107 0310 	add.w	r3, r7, #16
 800f048:	4618      	mov	r0, r3
 800f04a:	f7ff fa4d 	bl	800e4e8 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800f04e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff fa0a 	bl	800e46c <err_to_errno>
 800f058:	6278      	str	r0, [r7, #36]	; 0x24
 800f05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d002      	beq.n	800f066 <lwip_sendto+0x13a>
 800f060:	4a07      	ldr	r2, [pc, #28]	; (800f080 <lwip_sendto+0x154>)
 800f062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f064:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800f066:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d101      	bne.n	800f072 <lwip_sendto+0x146>
 800f06e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f070:	e001      	b.n	800f076 <lwip_sendto+0x14a>
 800f072:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f076:	4618      	mov	r0, r3
 800f078:	3738      	adds	r7, #56	; 0x38
 800f07a:	46bd      	mov	sp, r7
 800f07c:	bd80      	pop	{r7, pc}
 800f07e:	bf00      	nop
 800f080:	2000d7d8 	.word	0x2000d7d8
 800f084:	0801ed1c 	.word	0x0801ed1c
 800f088:	0801effc 	.word	0x0801effc
 800f08c:	0801ed70 	.word	0x0801ed70

0800f090 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b086      	sub	sp, #24
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800f09c:	68bb      	ldr	r3, [r7, #8]
 800f09e:	2b03      	cmp	r3, #3
 800f0a0:	d009      	beq.n	800f0b6 <lwip_socket+0x26>
 800f0a2:	68bb      	ldr	r3, [r7, #8]
 800f0a4:	2b03      	cmp	r3, #3
 800f0a6:	dc23      	bgt.n	800f0f0 <lwip_socket+0x60>
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d019      	beq.n	800f0e2 <lwip_socket+0x52>
 800f0ae:	68bb      	ldr	r3, [r7, #8]
 800f0b0:	2b02      	cmp	r3, #2
 800f0b2:	d009      	beq.n	800f0c8 <lwip_socket+0x38>
 800f0b4:	e01c      	b.n	800f0f0 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	4a22      	ldr	r2, [pc, #136]	; (800f144 <lwip_socket+0xb4>)
 800f0bc:	4619      	mov	r1, r3
 800f0be:	2040      	movs	r0, #64	; 0x40
 800f0c0:	f7fd f9f2 	bl	800c4a8 <netconn_new_with_proto_and_callback>
 800f0c4:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f0c6:	e019      	b.n	800f0fc <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2b88      	cmp	r3, #136	; 0x88
 800f0cc:	d101      	bne.n	800f0d2 <lwip_socket+0x42>
 800f0ce:	2321      	movs	r3, #33	; 0x21
 800f0d0:	e000      	b.n	800f0d4 <lwip_socket+0x44>
 800f0d2:	2320      	movs	r3, #32
 800f0d4:	4a1b      	ldr	r2, [pc, #108]	; (800f144 <lwip_socket+0xb4>)
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	4618      	mov	r0, r3
 800f0da:	f7fd f9e5 	bl	800c4a8 <netconn_new_with_proto_and_callback>
 800f0de:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800f0e0:	e00c      	b.n	800f0fc <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800f0e2:	4a18      	ldr	r2, [pc, #96]	; (800f144 <lwip_socket+0xb4>)
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	2010      	movs	r0, #16
 800f0e8:	f7fd f9de 	bl	800c4a8 <netconn_new_with_proto_and_callback>
 800f0ec:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800f0ee:	e005      	b.n	800f0fc <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800f0f0:	4b15      	ldr	r3, [pc, #84]	; (800f148 <lwip_socket+0xb8>)
 800f0f2:	2216      	movs	r2, #22
 800f0f4:	601a      	str	r2, [r3, #0]
      return -1;
 800f0f6:	f04f 33ff 	mov.w	r3, #4294967295
 800f0fa:	e01e      	b.n	800f13a <lwip_socket+0xaa>
  }

  if (!conn) {
 800f0fc:	697b      	ldr	r3, [r7, #20]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d105      	bne.n	800f10e <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800f102:	4b11      	ldr	r3, [pc, #68]	; (800f148 <lwip_socket+0xb8>)
 800f104:	2269      	movs	r2, #105	; 0x69
 800f106:	601a      	str	r2, [r3, #0]
    return -1;
 800f108:	f04f 33ff 	mov.w	r3, #4294967295
 800f10c:	e015      	b.n	800f13a <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800f10e:	2100      	movs	r1, #0
 800f110:	6978      	ldr	r0, [r7, #20]
 800f112:	f7ff fabd 	bl	800e690 <alloc_socket>
 800f116:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f11e:	d108      	bne.n	800f132 <lwip_socket+0xa2>
    netconn_delete(conn);
 800f120:	6978      	ldr	r0, [r7, #20]
 800f122:	f7fd fa5f 	bl	800c5e4 <netconn_delete>
    set_errno(ENFILE);
 800f126:	4b08      	ldr	r3, [pc, #32]	; (800f148 <lwip_socket+0xb8>)
 800f128:	2217      	movs	r2, #23
 800f12a:	601a      	str	r2, [r3, #0]
    return -1;
 800f12c:	f04f 33ff 	mov.w	r3, #4294967295
 800f130:	e003      	b.n	800f13a <lwip_socket+0xaa>
  }
  conn->socket = i;
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	693a      	ldr	r2, [r7, #16]
 800f136:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800f138:	693b      	ldr	r3, [r7, #16]
}
 800f13a:	4618      	mov	r0, r3
 800f13c:	3718      	adds	r7, #24
 800f13e:	46bd      	mov	sp, r7
 800f140:	bd80      	pop	{r7, pc}
 800f142:	bf00      	nop
 800f144:	0800f8fd 	.word	0x0800f8fd
 800f148:	2000d7d8 	.word	0x2000d7d8

0800f14c <lwip_link_select_cb>:

#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
/* Add select_cb to select_cb_list. */
static void
lwip_link_select_cb(struct lwip_select_cb *select_cb)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Protect the select_cb_list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f154:	480c      	ldr	r0, [pc, #48]	; (800f188 <lwip_link_select_cb+0x3c>)
 800f156:	f00c f8ef 	bl	801b338 <sys_mutex_lock>

  /* Put this select_cb on top of list */
  select_cb->next = select_cb_list;
 800f15a:	4b0c      	ldr	r3, [pc, #48]	; (800f18c <lwip_link_select_cb+0x40>)
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	601a      	str	r2, [r3, #0]
  if (select_cb_list != NULL) {
 800f162:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <lwip_link_select_cb+0x40>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d003      	beq.n	800f172 <lwip_link_select_cb+0x26>
    select_cb_list->prev = select_cb;
 800f16a:	4b08      	ldr	r3, [pc, #32]	; (800f18c <lwip_link_select_cb+0x40>)
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	687a      	ldr	r2, [r7, #4]
 800f170:	605a      	str	r2, [r3, #4]
  }
  select_cb_list = select_cb;
 800f172:	4a06      	ldr	r2, [pc, #24]	; (800f18c <lwip_link_select_cb+0x40>)
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	6013      	str	r3, [r2, #0]
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif

  /* Now we can safely unprotect */
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f178:	4803      	ldr	r0, [pc, #12]	; (800f188 <lwip_link_select_cb+0x3c>)
 800f17a:	f00c f8ec 	bl	801b356 <sys_mutex_unlock>
}
 800f17e:	bf00      	nop
 800f180:	3708      	adds	r7, #8
 800f182:	46bd      	mov	sp, r7
 800f184:	bd80      	pop	{r7, pc}
 800f186:	bf00      	nop
 800f188:	2000a0a4 	.word	0x2000a0a4
 800f18c:	2000479c 	.word	0x2000479c

0800f190 <lwip_unlink_select_cb>:

/* Remove select_cb from select_cb_list. */
static void
lwip_unlink_select_cb(struct lwip_select_cb *select_cb)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
  LWIP_SOCKET_SELECT_DECL_PROTECT(lev);

  /* Take us off the list */
  LWIP_SOCKET_SELECT_PROTECT(lev);
 800f198:	481b      	ldr	r0, [pc, #108]	; (800f208 <lwip_unlink_select_cb+0x78>)
 800f19a:	f00c f8cd 	bl	801b338 <sys_mutex_lock>
  if (select_cb->next != NULL) {
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d004      	beq.n	800f1b0 <lwip_unlink_select_cb+0x20>
    select_cb->next->prev = select_cb->prev;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	6852      	ldr	r2, [r2, #4]
 800f1ae:	605a      	str	r2, [r3, #4]
  }
  if (select_cb_list == select_cb) {
 800f1b0:	4b16      	ldr	r3, [pc, #88]	; (800f20c <lwip_unlink_select_cb+0x7c>)
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	687a      	ldr	r2, [r7, #4]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d10f      	bne.n	800f1da <lwip_unlink_select_cb+0x4a>
    LWIP_ASSERT("select_cb->prev == NULL", select_cb->prev == NULL);
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	685b      	ldr	r3, [r3, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d006      	beq.n	800f1d0 <lwip_unlink_select_cb+0x40>
 800f1c2:	4b13      	ldr	r3, [pc, #76]	; (800f210 <lwip_unlink_select_cb+0x80>)
 800f1c4:	f240 720d 	movw	r2, #1805	; 0x70d
 800f1c8:	4912      	ldr	r1, [pc, #72]	; (800f214 <lwip_unlink_select_cb+0x84>)
 800f1ca:	4813      	ldr	r0, [pc, #76]	; (800f218 <lwip_unlink_select_cb+0x88>)
 800f1cc:	f00c fd9e 	bl	801bd0c <iprintf>
    select_cb_list = select_cb->next;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	4a0d      	ldr	r2, [pc, #52]	; (800f20c <lwip_unlink_select_cb+0x7c>)
 800f1d6:	6013      	str	r3, [r2, #0]
 800f1d8:	e00f      	b.n	800f1fa <lwip_unlink_select_cb+0x6a>
  } else {
    LWIP_ASSERT("select_cb->prev != NULL", select_cb->prev != NULL);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	685b      	ldr	r3, [r3, #4]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d106      	bne.n	800f1f0 <lwip_unlink_select_cb+0x60>
 800f1e2:	4b0b      	ldr	r3, [pc, #44]	; (800f210 <lwip_unlink_select_cb+0x80>)
 800f1e4:	f44f 62e2 	mov.w	r2, #1808	; 0x710
 800f1e8:	490c      	ldr	r1, [pc, #48]	; (800f21c <lwip_unlink_select_cb+0x8c>)
 800f1ea:	480b      	ldr	r0, [pc, #44]	; (800f218 <lwip_unlink_select_cb+0x88>)
 800f1ec:	f00c fd8e 	bl	801bd0c <iprintf>
    select_cb->prev->next = select_cb->next;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	687a      	ldr	r2, [r7, #4]
 800f1f6:	6812      	ldr	r2, [r2, #0]
 800f1f8:	601a      	str	r2, [r3, #0]
  }
#if !LWIP_TCPIP_CORE_LOCKING
  /* Increasing this counter tells select_check_waiters that the list has changed. */
  select_cb_ctr++;
#endif
  LWIP_SOCKET_SELECT_UNPROTECT(lev);
 800f1fa:	4803      	ldr	r0, [pc, #12]	; (800f208 <lwip_unlink_select_cb+0x78>)
 800f1fc:	f00c f8ab 	bl	801b356 <sys_mutex_unlock>
}
 800f200:	bf00      	nop
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	2000a0a4 	.word	0x2000a0a4
 800f20c:	2000479c 	.word	0x2000479c
 800f210:	0801ed1c 	.word	0x0801ed1c
 800f214:	0801f01c 	.word	0x0801f01c
 800f218:	0801ed70 	.word	0x0801ed70
 800f21c:	0801f034 	.word	0x0801f034

0800f220 <lwip_selscan>:
 * @return number of sockets that had events (read/write/exception) (>= 0)
 */
static int
lwip_selscan(int maxfdp1, fd_set *readset_in, fd_set *writeset_in, fd_set *exceptset_in,
             fd_set *readset_out, fd_set *writeset_out, fd_set *exceptset_out)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b098      	sub	sp, #96	; 0x60
 800f224:	af00      	add	r7, sp, #0
 800f226:	60f8      	str	r0, [r7, #12]
 800f228:	60b9      	str	r1, [r7, #8]
 800f22a:	607a      	str	r2, [r7, #4]
 800f22c:	603b      	str	r3, [r7, #0]
  int i, nready = 0;
 800f22e:	2300      	movs	r3, #0
 800f230:	65bb      	str	r3, [r7, #88]	; 0x58
  fd_set lreadset, lwriteset, lexceptset;
  struct lwip_sock *sock;
  SYS_ARCH_DECL_PROTECT(lev);

  FD_ZERO(&lreadset);
 800f232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f236:	653b      	str	r3, [r7, #80]	; 0x50
 800f238:	2300      	movs	r3, #0
 800f23a:	657b      	str	r3, [r7, #84]	; 0x54
 800f23c:	e007      	b.n	800f24e <lwip_selscan+0x2e>
 800f23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f240:	1c5a      	adds	r2, r3, #1
 800f242:	653a      	str	r2, [r7, #80]	; 0x50
 800f244:	2200      	movs	r2, #0
 800f246:	701a      	strb	r2, [r3, #0]
 800f248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f24a:	3301      	adds	r3, #1
 800f24c:	657b      	str	r3, [r7, #84]	; 0x54
 800f24e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f250:	2b07      	cmp	r3, #7
 800f252:	d9f4      	bls.n	800f23e <lwip_selscan+0x1e>
  FD_ZERO(&lwriteset);
 800f254:	f107 031c 	add.w	r3, r7, #28
 800f258:	64bb      	str	r3, [r7, #72]	; 0x48
 800f25a:	2300      	movs	r3, #0
 800f25c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f25e:	e007      	b.n	800f270 <lwip_selscan+0x50>
 800f260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f262:	1c5a      	adds	r2, r3, #1
 800f264:	64ba      	str	r2, [r7, #72]	; 0x48
 800f266:	2200      	movs	r2, #0
 800f268:	701a      	strb	r2, [r3, #0]
 800f26a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f26c:	3301      	adds	r3, #1
 800f26e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f272:	2b07      	cmp	r3, #7
 800f274:	d9f4      	bls.n	800f260 <lwip_selscan+0x40>
  FD_ZERO(&lexceptset);
 800f276:	f107 0314 	add.w	r3, r7, #20
 800f27a:	643b      	str	r3, [r7, #64]	; 0x40
 800f27c:	2300      	movs	r3, #0
 800f27e:	647b      	str	r3, [r7, #68]	; 0x44
 800f280:	e007      	b.n	800f292 <lwip_selscan+0x72>
 800f282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f284:	1c5a      	adds	r2, r3, #1
 800f286:	643a      	str	r2, [r7, #64]	; 0x40
 800f288:	2200      	movs	r2, #0
 800f28a:	701a      	strb	r2, [r3, #0]
 800f28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f28e:	3301      	adds	r3, #1
 800f290:	647b      	str	r3, [r7, #68]	; 0x44
 800f292:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f294:	2b07      	cmp	r3, #7
 800f296:	d9f4      	bls.n	800f282 <lwip_selscan+0x62>

  /* Go through each socket in each list to count number of sockets which
     currently match */
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f298:	2300      	movs	r3, #0
 800f29a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f29c:	e0e1      	b.n	800f462 <lwip_selscan+0x242>
    /* if this FD is not in the set, continue */
    if (!(readset_in && FD_ISSET(i, readset_in)) &&
 800f29e:	68bb      	ldr	r3, [r7, #8]
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d00d      	beq.n	800f2c0 <lwip_selscan+0xa0>
 800f2a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2a6:	095a      	lsrs	r2, r3, #5
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2b0:	f002 021f 	and.w	r2, r2, #31
 800f2b4:	2101      	movs	r1, #1
 800f2b6:	fa01 f202 	lsl.w	r2, r1, r2
 800f2ba:	4013      	ands	r3, r2
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d123      	bne.n	800f308 <lwip_selscan+0xe8>
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d00d      	beq.n	800f2e2 <lwip_selscan+0xc2>
        !(writeset_in && FD_ISSET(i, writeset_in)) &&
 800f2c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2c8:	095a      	lsrs	r2, r3, #5
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2d2:	f002 021f 	and.w	r2, r2, #31
 800f2d6:	2101      	movs	r1, #1
 800f2d8:	fa01 f202 	lsl.w	r2, r1, r2
 800f2dc:	4013      	ands	r3, r2
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d112      	bne.n	800f308 <lwip_selscan+0xe8>
 800f2e2:	683b      	ldr	r3, [r7, #0]
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	f000 80b8 	beq.w	800f45a <lwip_selscan+0x23a>
        !(exceptset_in && FD_ISSET(i, exceptset_in))) {
 800f2ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f2ec:	095a      	lsrs	r2, r3, #5
 800f2ee:	683b      	ldr	r3, [r7, #0]
 800f2f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f2f6:	f002 021f 	and.w	r2, r2, #31
 800f2fa:	2101      	movs	r1, #1
 800f2fc:	fa01 f202 	lsl.w	r2, r1, r2
 800f300:	4013      	ands	r3, r2
 800f302:	2b00      	cmp	r3, #0
 800f304:	f000 80a9 	beq.w	800f45a <lwip_selscan+0x23a>
      continue;
    }
    /* First get the socket's status (protected)... */
    SYS_ARCH_PROTECT(lev);
 800f308:	f00c f858 	bl	801b3bc <sys_arch_protect>
 800f30c:	63f8      	str	r0, [r7, #60]	; 0x3c
    sock = tryget_socket_unconn_locked(i);
 800f30e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f310:	f7ff f983 	bl	800e61a <tryget_socket_unconn_locked>
 800f314:	63b8      	str	r0, [r7, #56]	; 0x38
    if (sock != NULL) {
 800f316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f318:	2b00      	cmp	r3, #0
 800f31a:	f000 8098 	beq.w	800f44e <lwip_selscan+0x22e>
      void *lastdata = sock->lastdata.pbuf;
 800f31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f320:	685b      	ldr	r3, [r3, #4]
 800f322:	637b      	str	r3, [r7, #52]	; 0x34
      s16_t rcvevent = sock->rcvevent;
 800f324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f326:	891b      	ldrh	r3, [r3, #8]
 800f328:	867b      	strh	r3, [r7, #50]	; 0x32
      u16_t sendevent = sock->sendevent;
 800f32a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f32c:	895b      	ldrh	r3, [r3, #10]
 800f32e:	863b      	strh	r3, [r7, #48]	; 0x30
      u16_t errevent = sock->errevent;
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	899b      	ldrh	r3, [r3, #12]
 800f334:	85fb      	strh	r3, [r7, #46]	; 0x2e
      SYS_ARCH_UNPROTECT(lev);
 800f336:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f338:	f00c f84e 	bl	801b3d8 <sys_arch_unprotect>

      /* ... then examine it: */
      /* See if netconn of this socket is ready for read */
      if (readset_in && FD_ISSET(i, readset_in) && ((lastdata != NULL) || (rcvevent > 0))) {
 800f33c:	68bb      	ldr	r3, [r7, #8]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d02c      	beq.n	800f39c <lwip_selscan+0x17c>
 800f342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f344:	095a      	lsrs	r2, r3, #5
 800f346:	68bb      	ldr	r3, [r7, #8]
 800f348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f34c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f34e:	f002 021f 	and.w	r2, r2, #31
 800f352:	2101      	movs	r1, #1
 800f354:	fa01 f202 	lsl.w	r2, r1, r2
 800f358:	4013      	ands	r3, r2
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d01e      	beq.n	800f39c <lwip_selscan+0x17c>
 800f35e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f360:	2b00      	cmp	r3, #0
 800f362:	d103      	bne.n	800f36c <lwip_selscan+0x14c>
 800f364:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800f368:	2b00      	cmp	r3, #0
 800f36a:	dd17      	ble.n	800f39c <lwip_selscan+0x17c>
        FD_SET(i, &lreadset);
 800f36c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f36e:	095a      	lsrs	r2, r3, #5
 800f370:	0093      	lsls	r3, r2, #2
 800f372:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f376:	440b      	add	r3, r1
 800f378:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800f37c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f37e:	f001 011f 	and.w	r1, r1, #31
 800f382:	2001      	movs	r0, #1
 800f384:	fa00 f101 	lsl.w	r1, r0, r1
 800f388:	4319      	orrs	r1, r3
 800f38a:	0093      	lsls	r3, r2, #2
 800f38c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f390:	4413      	add	r3, r2
 800f392:	f843 1c3c 	str.w	r1, [r3, #-60]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for reading\n", i));
        nready++;
 800f396:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f398:	3301      	adds	r3, #1
 800f39a:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket is ready for write */
      if (writeset_in && FD_ISSET(i, writeset_in) && (sendevent != 0)) {
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d028      	beq.n	800f3f4 <lwip_selscan+0x1d4>
 800f3a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3a4:	095a      	lsrs	r2, r3, #5
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f3ae:	f002 021f 	and.w	r2, r2, #31
 800f3b2:	2101      	movs	r1, #1
 800f3b4:	fa01 f202 	lsl.w	r2, r1, r2
 800f3b8:	4013      	ands	r3, r2
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d01a      	beq.n	800f3f4 <lwip_selscan+0x1d4>
 800f3be:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d017      	beq.n	800f3f4 <lwip_selscan+0x1d4>
        FD_SET(i, &lwriteset);
 800f3c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3c6:	095a      	lsrs	r2, r3, #5
 800f3c8:	0093      	lsls	r3, r2, #2
 800f3ca:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f3ce:	440b      	add	r3, r1
 800f3d0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f3d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f3d6:	f001 011f 	and.w	r1, r1, #31
 800f3da:	2001      	movs	r0, #1
 800f3dc:	fa00 f101 	lsl.w	r1, r0, r1
 800f3e0:	4319      	orrs	r1, r3
 800f3e2:	0093      	lsls	r3, r2, #2
 800f3e4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f3e8:	4413      	add	r3, r2
 800f3ea:	f843 1c44 	str.w	r1, [r3, #-68]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for writing\n", i));
        nready++;
 800f3ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f3f0:	3301      	adds	r3, #1
 800f3f2:	65bb      	str	r3, [r7, #88]	; 0x58
      }
      /* See if netconn of this socket had an error */
      if (exceptset_in && FD_ISSET(i, exceptset_in) && (errevent != 0)) {
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d030      	beq.n	800f45c <lwip_selscan+0x23c>
 800f3fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f3fc:	095a      	lsrs	r2, r3, #5
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f404:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f406:	f002 021f 	and.w	r2, r2, #31
 800f40a:	2101      	movs	r1, #1
 800f40c:	fa01 f202 	lsl.w	r2, r1, r2
 800f410:	4013      	ands	r3, r2
 800f412:	2b00      	cmp	r3, #0
 800f414:	d022      	beq.n	800f45c <lwip_selscan+0x23c>
 800f416:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d01f      	beq.n	800f45c <lwip_selscan+0x23c>
        FD_SET(i, &lexceptset);
 800f41c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f41e:	095a      	lsrs	r2, r3, #5
 800f420:	0093      	lsls	r3, r2, #2
 800f422:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800f426:	440b      	add	r3, r1
 800f428:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 800f42c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800f42e:	f001 011f 	and.w	r1, r1, #31
 800f432:	2001      	movs	r0, #1
 800f434:	fa00 f101 	lsl.w	r1, r0, r1
 800f438:	4319      	orrs	r1, r3
 800f43a:	0093      	lsls	r3, r2, #2
 800f43c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800f440:	4413      	add	r3, r2
 800f442:	f843 1c4c 	str.w	r1, [r3, #-76]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_selscan: fd=%d ready for exception\n", i));
        nready++;
 800f446:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f448:	3301      	adds	r3, #1
 800f44a:	65bb      	str	r3, [r7, #88]	; 0x58
 800f44c:	e006      	b.n	800f45c <lwip_selscan+0x23c>
      }
      done_socket(sock);
    } else {
      SYS_ARCH_UNPROTECT(lev);
 800f44e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800f450:	f00b ffc2 	bl	801b3d8 <sys_arch_unprotect>
      /* no a valid open socket */
      return -1;
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	e02b      	b.n	800f4b2 <lwip_selscan+0x292>
      continue;
 800f45a:	bf00      	nop
  for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f45e:	3301      	adds	r3, #1
 800f460:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f462:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	429a      	cmp	r2, r3
 800f468:	f6ff af19 	blt.w	800f29e <lwip_selscan+0x7e>
    }
  }
  /* copy local sets to the ones provided as arguments */
  *readset_out = lreadset;
 800f46c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f46e:	461a      	mov	r2, r3
 800f470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f474:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f478:	e882 0003 	stmia.w	r2, {r0, r1}
  *writeset_out = lwriteset;
 800f47c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f47e:	461a      	mov	r2, r3
 800f480:	f107 031c 	add.w	r3, r7, #28
 800f484:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f488:	e882 0003 	stmia.w	r2, {r0, r1}
  *exceptset_out = lexceptset;
 800f48c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f48e:	461a      	mov	r2, r3
 800f490:	f107 0314 	add.w	r3, r7, #20
 800f494:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f498:	e882 0003 	stmia.w	r2, {r0, r1}

  LWIP_ASSERT("nready >= 0", nready >= 0);
 800f49c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	da06      	bge.n	800f4b0 <lwip_selscan+0x290>
 800f4a2:	4b06      	ldr	r3, [pc, #24]	; (800f4bc <lwip_selscan+0x29c>)
 800f4a4:	f240 7269 	movw	r2, #1897	; 0x769
 800f4a8:	4905      	ldr	r1, [pc, #20]	; (800f4c0 <lwip_selscan+0x2a0>)
 800f4aa:	4806      	ldr	r0, [pc, #24]	; (800f4c4 <lwip_selscan+0x2a4>)
 800f4ac:	f00c fc2e 	bl	801bd0c <iprintf>
  return nready;
 800f4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
}
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	3760      	adds	r7, #96	; 0x60
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	bd80      	pop	{r7, pc}
 800f4ba:	bf00      	nop
 800f4bc:	0801ed1c 	.word	0x0801ed1c
 800f4c0:	0801f04c 	.word	0x0801f04c
 800f4c4:	0801ed70 	.word	0x0801ed70

0800f4c8 <lwip_select>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

int
lwip_select(int maxfdp1, fd_set *readset, fd_set *writeset, fd_set *exceptset,
            struct timeval *timeout)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b0a0      	sub	sp, #128	; 0x80
 800f4cc:	af04      	add	r7, sp, #16
 800f4ce:	60f8      	str	r0, [r7, #12]
 800f4d0:	60b9      	str	r1, [r7, #8]
 800f4d2:	607a      	str	r2, [r7, #4]
 800f4d4:	603b      	str	r3, [r7, #0]
  u32_t waitres = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select(%d, %p, %p, %p, tvsec=%"S32_F" tvusec=%"S32_F")\n",
                              maxfdp1, (void *)readset, (void *) writeset, (void *) exceptset,
                              timeout ? (s32_t)timeout->tv_sec : (s32_t) - 1,
                              timeout ? (s32_t)timeout->tv_usec : (s32_t) - 1));

  if ((maxfdp1 < 0) || (maxfdp1 > LWIP_SELECT_MAXNFDS)) {
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	db02      	blt.n	800f4e6 <lwip_select+0x1e>
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b40      	cmp	r3, #64	; 0x40
 800f4e4:	dd05      	ble.n	800f4f2 <lwip_select+0x2a>
    set_errno(EINVAL);
 800f4e6:	4b84      	ldr	r3, [pc, #528]	; (800f6f8 <lwip_select+0x230>)
 800f4e8:	2216      	movs	r2, #22
 800f4ea:	601a      	str	r2, [r3, #0]
    return -1;
 800f4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800f4f0:	e1b3      	b.n	800f85a <lwip_select+0x392>

  lwip_select_inc_sockets_used(maxfdp1, readset, writeset, exceptset, &used_sockets);

  /* Go through each socket in each list to count number of sockets which
     currently match */
  nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f4f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f4f6:	9302      	str	r3, [sp, #8]
 800f4f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f4fc:	9301      	str	r3, [sp, #4]
 800f4fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f502:	9300      	str	r3, [sp, #0]
 800f504:	683b      	ldr	r3, [r7, #0]
 800f506:	687a      	ldr	r2, [r7, #4]
 800f508:	68b9      	ldr	r1, [r7, #8]
 800f50a:	68f8      	ldr	r0, [r7, #12]
 800f50c:	f7ff fe88 	bl	800f220 <lwip_selscan>
 800f510:	66b8      	str	r0, [r7, #104]	; 0x68

  if (nready < 0) {
 800f512:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f514:	2b00      	cmp	r3, #0
 800f516:	da05      	bge.n	800f524 <lwip_select+0x5c>
    /* one of the sockets in one of the fd_sets was invalid */
    set_errno(EBADF);
 800f518:	4b77      	ldr	r3, [pc, #476]	; (800f6f8 <lwip_select+0x230>)
 800f51a:	2209      	movs	r2, #9
 800f51c:	601a      	str	r2, [r3, #0]
    lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
    return -1;
 800f51e:	f04f 33ff 	mov.w	r3, #4294967295
 800f522:	e19a      	b.n	800f85a <lwip_select+0x392>
  } else if (nready > 0) {
 800f524:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f526:	2b00      	cmp	r3, #0
 800f528:	f300 8175 	bgt.w	800f816 <lwip_select+0x34e>
    /* one or more sockets are set, no need to wait */
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: nready=%d\n", nready));
  } else {
    /* If we don't have any current events, then suspend if we are supposed to */
    if (timeout && timeout->tv_sec == 0 && timeout->tv_usec == 0) {
 800f52c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d009      	beq.n	800f546 <lwip_select+0x7e>
 800f532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f534:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f538:	4313      	orrs	r3, r2
 800f53a:	d104      	bne.n	800f546 <lwip_select+0x7e>
 800f53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f53e:	689b      	ldr	r3, [r3, #8]
 800f540:	2b00      	cmp	r3, #0
 800f542:	f000 8168 	beq.w	800f816 <lwip_select+0x34e>
         list is only valid while we are in this function, so it's ok
         to use local variables (unless we're running in MPU compatible
         mode). */
      API_SELECT_CB_VAR_DECLARE(select_cb);
      API_SELECT_CB_VAR_ALLOC(select_cb, set_errno(ENOMEM); lwip_select_dec_sockets_used(maxfdp1, &used_sockets); return -1);
      memset(&API_SELECT_CB_VAR_REF(select_cb), 0, sizeof(struct lwip_select_cb));
 800f546:	f107 0310 	add.w	r3, r7, #16
 800f54a:	2224      	movs	r2, #36	; 0x24
 800f54c:	2100      	movs	r1, #0
 800f54e:	4618      	mov	r0, r3
 800f550:	f00b ff92 	bl	801b478 <memset>

      API_SELECT_CB_VAR_REF(select_cb).readset = readset;
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	61bb      	str	r3, [r7, #24]
      API_SELECT_CB_VAR_REF(select_cb).writeset = writeset;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	61fb      	str	r3, [r7, #28]
      API_SELECT_CB_VAR_REF(select_cb).exceptset = exceptset;
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	623b      	str	r3, [r7, #32]
#if LWIP_NETCONN_SEM_PER_THREAD
      API_SELECT_CB_VAR_REF(select_cb).sem = LWIP_NETCONN_THREAD_SEM_GET();
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      if (sys_sem_new(&API_SELECT_CB_VAR_REF(select_cb).sem, 0) != ERR_OK) {
 800f560:	f107 0310 	add.w	r3, r7, #16
 800f564:	3320      	adds	r3, #32
 800f566:	2100      	movs	r1, #0
 800f568:	4618      	mov	r0, r3
 800f56a:	f00b fe2a 	bl	801b1c2 <sys_sem_new>
 800f56e:	4603      	mov	r3, r0
 800f570:	2b00      	cmp	r3, #0
 800f572:	d005      	beq.n	800f580 <lwip_select+0xb8>
        /* failed to create semaphore */
        set_errno(ENOMEM);
 800f574:	4b60      	ldr	r3, [pc, #384]	; (800f6f8 <lwip_select+0x230>)
 800f576:	220c      	movs	r2, #12
 800f578:	601a      	str	r2, [r3, #0]
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        API_SELECT_CB_VAR_FREE(select_cb);
        return -1;
 800f57a:	f04f 33ff 	mov.w	r3, #4294967295
 800f57e:	e16c      	b.n	800f85a <lwip_select+0x392>
      }
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

      lwip_link_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f580:	f107 0310 	add.w	r3, r7, #16
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fde1 	bl	800f14c <lwip_link_select_cb>

      /* Increase select_waiting for each socket we are interested in */
      maxfdp2 = maxfdp1;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	65fb      	str	r3, [r7, #92]	; 0x5c
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f58e:	2300      	movs	r3, #0
 800f590:	663b      	str	r3, [r7, #96]	; 0x60
 800f592:	e06b      	b.n	800f66c <lwip_select+0x1a4>
        if ((readset && FD_ISSET(i, readset)) ||
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d00d      	beq.n	800f5b6 <lwip_select+0xee>
 800f59a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f59c:	095a      	lsrs	r2, r3, #5
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5a6:	f002 021f 	and.w	r2, r2, #31
 800f5aa:	2101      	movs	r1, #1
 800f5ac:	fa01 f202 	lsl.w	r2, r1, r2
 800f5b0:	4013      	ands	r3, r2
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d121      	bne.n	800f5fa <lwip_select+0x132>
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d00d      	beq.n	800f5d8 <lwip_select+0x110>
            (writeset && FD_ISSET(i, writeset)) ||
 800f5bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5be:	095a      	lsrs	r2, r3, #5
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5c6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5c8:	f002 021f 	and.w	r2, r2, #31
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	fa01 f202 	lsl.w	r2, r1, r2
 800f5d2:	4013      	ands	r3, r2
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d110      	bne.n	800f5fa <lwip_select+0x132>
 800f5d8:	683b      	ldr	r3, [r7, #0]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d043      	beq.n	800f666 <lwip_select+0x19e>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f5de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f5e0:	095a      	lsrs	r2, r3, #5
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f5ea:	f002 021f 	and.w	r2, r2, #31
 800f5ee:	2101      	movs	r1, #1
 800f5f0:	fa01 f202 	lsl.w	r2, r1, r2
 800f5f4:	4013      	ands	r3, r2
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d035      	beq.n	800f666 <lwip_select+0x19e>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f5fa:	f00b fedf 	bl	801b3bc <sys_arch_protect>
 800f5fe:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f600:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f602:	f7ff f80a 	bl	800e61a <tryget_socket_unconn_locked>
 800f606:	6578      	str	r0, [r7, #84]	; 0x54
          if (sock != NULL) {
 800f608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d01f      	beq.n	800f64e <lwip_select+0x186>
            sock->select_waiting++;
 800f60e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f610:	7b9b      	ldrb	r3, [r3, #14]
 800f612:	3301      	adds	r3, #1
 800f614:	b2da      	uxtb	r2, r3
 800f616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f618:	739a      	strb	r2, [r3, #14]
            if (sock->select_waiting == 0) {
 800f61a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f61c:	7b9b      	ldrb	r3, [r3, #14]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d111      	bne.n	800f646 <lwip_select+0x17e>
              /* overflow - too many threads waiting */
              sock->select_waiting--;
 800f622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f624:	7b9b      	ldrb	r3, [r3, #14]
 800f626:	3b01      	subs	r3, #1
 800f628:	b2da      	uxtb	r2, r3
 800f62a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f62c:	739a      	strb	r2, [r3, #14]
              nready = -1;
 800f62e:	f04f 33ff 	mov.w	r3, #4294967295
 800f632:	66bb      	str	r3, [r7, #104]	; 0x68
              maxfdp2 = i;
 800f634:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f636:	65fb      	str	r3, [r7, #92]	; 0x5c
              SYS_ARCH_UNPROTECT(lev);
 800f638:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f63a:	f00b fecd 	bl	801b3d8 <sys_arch_unprotect>
              done_socket(sock);
              set_errno(EBUSY);
 800f63e:	4b2e      	ldr	r3, [pc, #184]	; (800f6f8 <lwip_select+0x230>)
 800f640:	2210      	movs	r2, #16
 800f642:	601a      	str	r2, [r3, #0]
              break;
 800f644:	e016      	b.n	800f674 <lwip_select+0x1ac>
            }
            SYS_ARCH_UNPROTECT(lev);
 800f646:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f648:	f00b fec6 	bl	801b3d8 <sys_arch_unprotect>
 800f64c:	e00b      	b.n	800f666 <lwip_select+0x19e>
            done_socket(sock);
          } else {
            /* Not a valid socket */
            nready = -1;
 800f64e:	f04f 33ff 	mov.w	r3, #4294967295
 800f652:	66bb      	str	r3, [r7, #104]	; 0x68
            maxfdp2 = i;
 800f654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f656:	65fb      	str	r3, [r7, #92]	; 0x5c
            SYS_ARCH_UNPROTECT(lev);
 800f658:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f65a:	f00b febd 	bl	801b3d8 <sys_arch_unprotect>
            set_errno(EBADF);
 800f65e:	4b26      	ldr	r3, [pc, #152]	; (800f6f8 <lwip_select+0x230>)
 800f660:	2209      	movs	r2, #9
 800f662:	601a      	str	r2, [r3, #0]
            break;
 800f664:	e006      	b.n	800f674 <lwip_select+0x1ac>
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp1; i++) {
 800f666:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f668:	3301      	adds	r3, #1
 800f66a:	663b      	str	r3, [r7, #96]	; 0x60
 800f66c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	429a      	cmp	r2, r3
 800f672:	db8f      	blt.n	800f594 <lwip_select+0xcc>
          }
        }
      }

      if (nready >= 0) {
 800f674:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f676:	2b00      	cmp	r3, #0
 800f678:	db3b      	blt.n	800f6f2 <lwip_select+0x22a>
        /* Call lwip_selscan again: there could have been events between
           the last scan (without us on the list) and putting us on the list! */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f67a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f67e:	9302      	str	r3, [sp, #8]
 800f680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f684:	9301      	str	r3, [sp, #4]
 800f686:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f68a:	9300      	str	r3, [sp, #0]
 800f68c:	683b      	ldr	r3, [r7, #0]
 800f68e:	687a      	ldr	r2, [r7, #4]
 800f690:	68b9      	ldr	r1, [r7, #8]
 800f692:	68f8      	ldr	r0, [r7, #12]
 800f694:	f7ff fdc4 	bl	800f220 <lwip_selscan>
 800f698:	66b8      	str	r0, [r7, #104]	; 0x68
        if (!nready) {
 800f69a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d128      	bne.n	800f6f2 <lwip_select+0x22a>
          /* Still none ready, just wait to be woken */
          if (timeout == 0) {
 800f6a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d102      	bne.n	800f6ac <lwip_select+0x1e4>
            /* Wait forever */
            msectimeout = 0;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	667b      	str	r3, [r7, #100]	; 0x64
 800f6aa:	e01a      	b.n	800f6e2 <lwip_select+0x21a>
          } else {
            long msecs_long = ((timeout->tv_sec * 1000) + ((timeout->tv_usec + 500) / 1000));
 800f6ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f6b6:	fb03 f202 	mul.w	r2, r3, r2
 800f6ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f6bc:	689b      	ldr	r3, [r3, #8]
 800f6be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f6c2:	490e      	ldr	r1, [pc, #56]	; (800f6fc <lwip_select+0x234>)
 800f6c4:	fb81 0103 	smull	r0, r1, r1, r3
 800f6c8:	1189      	asrs	r1, r1, #6
 800f6ca:	17db      	asrs	r3, r3, #31
 800f6cc:	1acb      	subs	r3, r1, r3
 800f6ce:	4413      	add	r3, r2
 800f6d0:	653b      	str	r3, [r7, #80]	; 0x50
            if (msecs_long <= 0) {
 800f6d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	dc02      	bgt.n	800f6de <lwip_select+0x216>
              /* Wait 1ms at least (0 means wait forever) */
              msectimeout = 1;
 800f6d8:	2301      	movs	r3, #1
 800f6da:	667b      	str	r3, [r7, #100]	; 0x64
 800f6dc:	e001      	b.n	800f6e2 <lwip_select+0x21a>
            } else {
              msectimeout = (u32_t)msecs_long;
 800f6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f6e0:	667b      	str	r3, [r7, #100]	; 0x64
            }
          }

          waitres = sys_arch_sem_wait(SELECT_SEM_PTR(API_SELECT_CB_VAR_REF(select_cb).sem), msectimeout);
 800f6e2:	f107 0310 	add.w	r3, r7, #16
 800f6e6:	3320      	adds	r3, #32
 800f6e8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f00b fd91 	bl	801b212 <sys_arch_sem_wait>
 800f6f0:	66f8      	str	r0, [r7, #108]	; 0x6c
#endif
        }
      }

      /* Decrease select_waiting for each socket we are interested in */
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	663b      	str	r3, [r7, #96]	; 0x60
 800f6f6:	e065      	b.n	800f7c4 <lwip_select+0x2fc>
 800f6f8:	2000d7d8 	.word	0x2000d7d8
 800f6fc:	10624dd3 	.word	0x10624dd3
        if ((readset && FD_ISSET(i, readset)) ||
 800f700:	68bb      	ldr	r3, [r7, #8]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00d      	beq.n	800f722 <lwip_select+0x25a>
 800f706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f708:	095a      	lsrs	r2, r3, #5
 800f70a:	68bb      	ldr	r3, [r7, #8]
 800f70c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f712:	f002 021f 	and.w	r2, r2, #31
 800f716:	2101      	movs	r1, #1
 800f718:	fa01 f202 	lsl.w	r2, r1, r2
 800f71c:	4013      	ands	r3, r2
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d121      	bne.n	800f766 <lwip_select+0x29e>
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d00d      	beq.n	800f744 <lwip_select+0x27c>
            (writeset && FD_ISSET(i, writeset)) ||
 800f728:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f72a:	095a      	lsrs	r2, r3, #5
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f732:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f734:	f002 021f 	and.w	r2, r2, #31
 800f738:	2101      	movs	r1, #1
 800f73a:	fa01 f202 	lsl.w	r2, r1, r2
 800f73e:	4013      	ands	r3, r2
 800f740:	2b00      	cmp	r3, #0
 800f742:	d110      	bne.n	800f766 <lwip_select+0x29e>
 800f744:	683b      	ldr	r3, [r7, #0]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d039      	beq.n	800f7be <lwip_select+0x2f6>
            (exceptset && FD_ISSET(i, exceptset))) {
 800f74a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f74c:	095a      	lsrs	r2, r3, #5
 800f74e:	683b      	ldr	r3, [r7, #0]
 800f750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f754:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f756:	f002 021f 	and.w	r2, r2, #31
 800f75a:	2101      	movs	r1, #1
 800f75c:	fa01 f202 	lsl.w	r2, r1, r2
 800f760:	4013      	ands	r3, r2
 800f762:	2b00      	cmp	r3, #0
 800f764:	d02b      	beq.n	800f7be <lwip_select+0x2f6>
          struct lwip_sock *sock;
          SYS_ARCH_PROTECT(lev);
 800f766:	f00b fe29 	bl	801b3bc <sys_arch_protect>
 800f76a:	65b8      	str	r0, [r7, #88]	; 0x58
          sock = tryget_socket_unconn_locked(i);
 800f76c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800f76e:	f7fe ff54 	bl	800e61a <tryget_socket_unconn_locked>
 800f772:	64f8      	str	r0, [r7, #76]	; 0x4c
          if (sock != NULL) {
 800f774:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f776:	2b00      	cmp	r3, #0
 800f778:	d018      	beq.n	800f7ac <lwip_select+0x2e4>
            /* for now, handle select_waiting==0... */
            LWIP_ASSERT("sock->select_waiting > 0", sock->select_waiting > 0);
 800f77a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f77c:	7b9b      	ldrb	r3, [r3, #14]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d106      	bne.n	800f790 <lwip_select+0x2c8>
 800f782:	4b38      	ldr	r3, [pc, #224]	; (800f864 <lwip_select+0x39c>)
 800f784:	f640 023c 	movw	r2, #2108	; 0x83c
 800f788:	4937      	ldr	r1, [pc, #220]	; (800f868 <lwip_select+0x3a0>)
 800f78a:	4838      	ldr	r0, [pc, #224]	; (800f86c <lwip_select+0x3a4>)
 800f78c:	f00c fabe 	bl	801bd0c <iprintf>
            if (sock->select_waiting > 0) {
 800f790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f792:	7b9b      	ldrb	r3, [r3, #14]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d005      	beq.n	800f7a4 <lwip_select+0x2dc>
              sock->select_waiting--;
 800f798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f79a:	7b9b      	ldrb	r3, [r3, #14]
 800f79c:	3b01      	subs	r3, #1
 800f79e:	b2da      	uxtb	r2, r3
 800f7a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7a2:	739a      	strb	r2, [r3, #14]
            }
            SYS_ARCH_UNPROTECT(lev);
 800f7a4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f7a6:	f00b fe17 	bl	801b3d8 <sys_arch_unprotect>
 800f7aa:	e008      	b.n	800f7be <lwip_select+0x2f6>
            done_socket(sock);
          } else {
            SYS_ARCH_UNPROTECT(lev);
 800f7ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f7ae:	f00b fe13 	bl	801b3d8 <sys_arch_unprotect>
            /* Not a valid socket */
            nready = -1;
 800f7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b6:	66bb      	str	r3, [r7, #104]	; 0x68
            set_errno(EBADF);
 800f7b8:	4b2d      	ldr	r3, [pc, #180]	; (800f870 <lwip_select+0x3a8>)
 800f7ba:	2209      	movs	r2, #9
 800f7bc:	601a      	str	r2, [r3, #0]
      for (i = LWIP_SOCKET_OFFSET; i < maxfdp2; i++) {
 800f7be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	663b      	str	r3, [r7, #96]	; 0x60
 800f7c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f7c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	db99      	blt.n	800f700 <lwip_select+0x238>
          }
        }
      }

      lwip_unlink_select_cb(&API_SELECT_CB_VAR_REF(select_cb));
 800f7cc:	f107 0310 	add.w	r3, r7, #16
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f7ff fcdd 	bl	800f190 <lwip_unlink_select_cb>
      if (API_SELECT_CB_VAR_REF(select_cb).sem_signalled && (!waited || (waitres == SYS_ARCH_TIMEOUT))) {
        /* don't leave the thread-local semaphore signalled */
        sys_arch_sem_wait(API_SELECT_CB_VAR_REF(select_cb).sem, 1);
      }
#else /* LWIP_NETCONN_SEM_PER_THREAD */
      sys_sem_free(&API_SELECT_CB_VAR_REF(select_cb).sem);
 800f7d6:	f107 0310 	add.w	r3, r7, #16
 800f7da:	3320      	adds	r3, #32
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f00b fd56 	bl	801b28e <sys_sem_free>
#endif /* LWIP_NETCONN_SEM_PER_THREAD */
      API_SELECT_CB_VAR_FREE(select_cb);

      if (nready < 0) {
 800f7e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	da02      	bge.n	800f7ee <lwip_select+0x326>
        /* This happens when a socket got closed while waiting */
        lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
        return -1;
 800f7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ec:	e035      	b.n	800f85a <lwip_select+0x392>
      }

      if (waitres == SYS_ARCH_TIMEOUT) {
 800f7ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7f4:	d00f      	beq.n	800f816 <lwip_select+0x34e>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_select: timeout expired\n"));
        /* This is OK as the local fdsets are empty and nready is zero,
           or we would have returned earlier. */
      } else {
        /* See what's set now after waiting */
        nready = lwip_selscan(maxfdp1, readset, writeset, exceptset, &lreadset, &lwriteset, &lexceptset);
 800f7f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f7fa:	9302      	str	r3, [sp, #8]
 800f7fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f800:	9301      	str	r3, [sp, #4]
 800f802:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f806:	9300      	str	r3, [sp, #0]
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	68b9      	ldr	r1, [r7, #8]
 800f80e:	68f8      	ldr	r0, [r7, #12]
 800f810:	f7ff fd06 	bl	800f220 <lwip_selscan>
 800f814:	66b8      	str	r0, [r7, #104]	; 0x68
    }
  }

  lwip_select_dec_sockets_used(maxfdp1, &used_sockets);
  set_errno(0);
  if (readset) {
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d007      	beq.n	800f82c <lwip_select+0x364>
    *readset = lreadset;
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	461a      	mov	r2, r3
 800f820:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800f824:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f828:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (writeset) {
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d007      	beq.n	800f842 <lwip_select+0x37a>
    *writeset = lwriteset;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	461a      	mov	r2, r3
 800f836:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800f83a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f83e:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  if (exceptset) {
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	2b00      	cmp	r3, #0
 800f846:	d007      	beq.n	800f858 <lwip_select+0x390>
    *exceptset = lexceptset;
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	461a      	mov	r2, r3
 800f84c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800f850:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f854:	e882 0003 	stmia.w	r2, {r0, r1}
  }
  return nready;
 800f858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3770      	adds	r7, #112	; 0x70
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	0801ed1c 	.word	0x0801ed1c
 800f868:	0801f058 	.word	0x0801f058
 800f86c:	0801ed70 	.word	0x0801ed70
 800f870:	2000d7d8 	.word	0x2000d7d8

0800f874 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	607a      	str	r2, [r7, #4]
 800f880:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f882:	2300      	movs	r3, #0
 800f884:	617b      	str	r3, [r7, #20]
 800f886:	e02c      	b.n	800f8e2 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	695a      	ldr	r2, [r3, #20]
 800f88c:	697b      	ldr	r3, [r7, #20]
 800f88e:	00db      	lsls	r3, r3, #3
 800f890:	4413      	add	r3, r2
 800f892:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	68ba      	ldr	r2, [r7, #8]
 800f89a:	429a      	cmp	r2, r3
 800f89c:	d11e      	bne.n	800f8dc <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d009      	beq.n	800f8b8 <lwip_poll_should_wake+0x44>
 800f8a4:	693b      	ldr	r3, [r7, #16]
 800f8a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f8aa:	b29b      	uxth	r3, r3
 800f8ac:	f003 0301 	and.w	r3, r3, #1
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d001      	beq.n	800f8b8 <lwip_poll_should_wake+0x44>
        return 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e01a      	b.n	800f8ee <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d009      	beq.n	800f8d2 <lwip_poll_should_wake+0x5e>
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800f8c4:	b29b      	uxth	r3, r3
 800f8c6:	f003 0302 	and.w	r3, r3, #2
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d001      	beq.n	800f8d2 <lwip_poll_should_wake+0x5e>
        return 1;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e00d      	b.n	800f8ee <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800f8d2:	6a3b      	ldr	r3, [r7, #32]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d001      	beq.n	800f8dc <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e008      	b.n	800f8ee <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	3301      	adds	r3, #1
 800f8e0:	617b      	str	r3, [r7, #20]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	699b      	ldr	r3, [r3, #24]
 800f8e6:	697a      	ldr	r2, [r7, #20]
 800f8e8:	429a      	cmp	r2, r3
 800f8ea:	d3cd      	bcc.n	800f888 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800f8ec:	2300      	movs	r3, #0
}
 800f8ee:	4618      	mov	r0, r3
 800f8f0:	371c      	adds	r7, #28
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f8:	4770      	bx	lr
	...

0800f8fc <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b08a      	sub	sp, #40	; 0x28
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
 800f904:	460b      	mov	r3, r1
 800f906:	70fb      	strb	r3, [r7, #3]
 800f908:	4613      	mov	r3, r2
 800f90a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 80a4 	beq.w	800fa5c <event_callback+0x160>
    s = conn->socket;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	699b      	ldr	r3, [r3, #24]
 800f918:	627b      	str	r3, [r7, #36]	; 0x24
    if (s < 0) {
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	da18      	bge.n	800f952 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800f920:	f00b fd4c 	bl	801b3bc <sys_arch_protect>
 800f924:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	699b      	ldr	r3, [r3, #24]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	da0b      	bge.n	800f946 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800f92e:	78fb      	ldrb	r3, [r7, #3]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d104      	bne.n	800f93e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	699b      	ldr	r3, [r3, #24]
 800f938:	1e5a      	subs	r2, r3, #1
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800f93e:	69f8      	ldr	r0, [r7, #28]
 800f940:	f00b fd4a 	bl	801b3d8 <sys_arch_unprotect>
        return;
 800f944:	e08d      	b.n	800fa62 <event_callback+0x166>
      }
      s = conn->socket;
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	699b      	ldr	r3, [r3, #24]
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24
      SYS_ARCH_UNPROTECT(lev);
 800f94c:	69f8      	ldr	r0, [r7, #28]
 800f94e:	f00b fd43 	bl	801b3d8 <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800f952:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f954:	f7fe fe84 	bl	800e660 <get_socket>
 800f958:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800f95a:	69bb      	ldr	r3, [r7, #24]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d07f      	beq.n	800fa60 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800f960:	2301      	movs	r3, #1
 800f962:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800f964:	f00b fd2a 	bl	801b3bc <sys_arch_protect>
 800f968:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800f96a:	78fb      	ldrb	r3, [r7, #3]
 800f96c:	2b04      	cmp	r3, #4
 800f96e:	d83e      	bhi.n	800f9ee <event_callback+0xf2>
 800f970:	a201      	add	r2, pc, #4	; (adr r2, 800f978 <event_callback+0x7c>)
 800f972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f976:	bf00      	nop
 800f978:	0800f98d 	.word	0x0800f98d
 800f97c:	0800f9af 	.word	0x0800f9af
 800f980:	0800f9c7 	.word	0x0800f9c7
 800f984:	0800f9db 	.word	0x0800f9db
 800f988:	0800f9e7 	.word	0x0800f9e7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f992:	b29b      	uxth	r3, r3
 800f994:	3301      	adds	r3, #1
 800f996:	b29b      	uxth	r3, r3
 800f998:	b21a      	sxth	r2, r3
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800f99e:	69bb      	ldr	r3, [r7, #24]
 800f9a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	dd2a      	ble.n	800f9fe <event_callback+0x102>
        check_waiters = 0;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	623b      	str	r3, [r7, #32]
      }
      break;
 800f9ac:	e027      	b.n	800f9fe <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	3b01      	subs	r3, #1
 800f9b8:	b29b      	uxth	r3, r3
 800f9ba:	b21a      	sxth	r2, r3
 800f9bc:	69bb      	ldr	r3, [r7, #24]
 800f9be:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	623b      	str	r3, [r7, #32]
      break;
 800f9c4:	e01c      	b.n	800fa00 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800f9c6:	69bb      	ldr	r3, [r7, #24]
 800f9c8:	895b      	ldrh	r3, [r3, #10]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d001      	beq.n	800f9d2 <event_callback+0xd6>
        check_waiters = 0;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800f9d2:	69bb      	ldr	r3, [r7, #24]
 800f9d4:	2201      	movs	r2, #1
 800f9d6:	815a      	strh	r2, [r3, #10]
      break;
 800f9d8:	e012      	b.n	800fa00 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800f9da:	69bb      	ldr	r3, [r7, #24]
 800f9dc:	2200      	movs	r2, #0
 800f9de:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	623b      	str	r3, [r7, #32]
      break;
 800f9e4:	e00c      	b.n	800fa00 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800f9e6:	69bb      	ldr	r3, [r7, #24]
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	819a      	strh	r2, [r3, #12]
      break;
 800f9ec:	e008      	b.n	800fa00 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800f9ee:	4b1e      	ldr	r3, [pc, #120]	; (800fa68 <event_callback+0x16c>)
 800f9f0:	f44f 621f 	mov.w	r2, #2544	; 0x9f0
 800f9f4:	491d      	ldr	r1, [pc, #116]	; (800fa6c <event_callback+0x170>)
 800f9f6:	481e      	ldr	r0, [pc, #120]	; (800fa70 <event_callback+0x174>)
 800f9f8:	f00c f988 	bl	801bd0c <iprintf>
      break;
 800f9fc:	e000      	b.n	800fa00 <event_callback+0x104>
      break;
 800f9fe:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800fa00:	69bb      	ldr	r3, [r7, #24]
 800fa02:	7b9b      	ldrb	r3, [r3, #14]
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d025      	beq.n	800fa54 <event_callback+0x158>
 800fa08:	6a3b      	ldr	r3, [r7, #32]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d022      	beq.n	800fa54 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800fa0e:	69bb      	ldr	r3, [r7, #24]
 800fa10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	bfcc      	ite	gt
 800fa18:	2301      	movgt	r3, #1
 800fa1a:	2300      	movle	r3, #0
 800fa1c:	b2db      	uxtb	r3, r3
 800fa1e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	895b      	ldrh	r3, [r3, #10]
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	bf14      	ite	ne
 800fa28:	2301      	movne	r3, #1
 800fa2a:	2300      	moveq	r3, #0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800fa30:	69bb      	ldr	r3, [r7, #24]
 800fa32:	899b      	ldrh	r3, [r3, #12]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	bf14      	ite	ne
 800fa38:	2301      	movne	r3, #1
 800fa3a:	2300      	moveq	r3, #0
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800fa40:	69f8      	ldr	r0, [r7, #28]
 800fa42:	f00b fcc9 	bl	801b3d8 <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800fa46:	68fb      	ldr	r3, [r7, #12]
 800fa48:	693a      	ldr	r2, [r7, #16]
 800fa4a:	6979      	ldr	r1, [r7, #20]
 800fa4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fa4e:	f000 f811 	bl	800fa74 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800fa52:	e006      	b.n	800fa62 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800fa54:	69f8      	ldr	r0, [r7, #28]
 800fa56:	f00b fcbf 	bl	801b3d8 <sys_arch_unprotect>
 800fa5a:	e002      	b.n	800fa62 <event_callback+0x166>
    return;
 800fa5c:	bf00      	nop
 800fa5e:	e000      	b.n	800fa62 <event_callback+0x166>
      return;
 800fa60:	bf00      	nop
  }
  done_socket(sock);
}
 800fa62:	3728      	adds	r7, #40	; 0x28
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}
 800fa68:	0801ed1c 	.word	0x0801ed1c
 800fa6c:	0801f098 	.word	0x0801f098
 800fa70:	0801ed70 	.word	0x0801ed70

0800fa74 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b088      	sub	sp, #32
 800fa78:	af02      	add	r7, sp, #8
 800fa7a:	60f8      	str	r0, [r7, #12]
 800fa7c:	60b9      	str	r1, [r7, #8]
 800fa7e:	607a      	str	r2, [r7, #4]
 800fa80:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800fa82:	4b3e      	ldr	r3, [pc, #248]	; (800fb7c <select_check_waiters+0x108>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e06f      	b.n	800fb6a <select_check_waiters+0xf6>
    if (scb->sem_signalled == 0) {
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	69db      	ldr	r3, [r3, #28]
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	d168      	bne.n	800fb64 <select_check_waiters+0xf0>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800fa92:	2300      	movs	r3, #0
 800fa94:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800fa96:	697b      	ldr	r3, [r7, #20]
 800fa98:	695b      	ldr	r3, [r3, #20]
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	d009      	beq.n	800fab2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	9300      	str	r3, [sp, #0]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	68ba      	ldr	r2, [r7, #8]
 800faa6:	68f9      	ldr	r1, [r7, #12]
 800faa8:	6978      	ldr	r0, [r7, #20]
 800faaa:	f7ff fee3 	bl	800f874 <lwip_poll_should_wake>
 800faae:	6138      	str	r0, [r7, #16]
 800fab0:	e04d      	b.n	800fb4e <select_check_waiters+0xda>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d014      	beq.n	800fae2 <select_check_waiters+0x6e>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	689b      	ldr	r3, [r3, #8]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d010      	beq.n	800fae2 <select_check_waiters+0x6e>
 800fac0:	697b      	ldr	r3, [r7, #20]
 800fac2:	689b      	ldr	r3, [r3, #8]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	0952      	lsrs	r2, r2, #5
 800fac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800facc:	68fa      	ldr	r2, [r7, #12]
 800face:	f002 021f 	and.w	r2, r2, #31
 800fad2:	2101      	movs	r1, #1
 800fad4:	fa01 f202 	lsl.w	r2, r1, r2
 800fad8:	4013      	ands	r3, r2
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d001      	beq.n	800fae2 <select_check_waiters+0x6e>
            do_signal = 1;
 800fade:	2301      	movs	r3, #1
 800fae0:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d017      	beq.n	800fb18 <select_check_waiters+0xa4>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800fae8:	693b      	ldr	r3, [r7, #16]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d114      	bne.n	800fb18 <select_check_waiters+0xa4>
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	68db      	ldr	r3, [r3, #12]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d010      	beq.n	800fb18 <select_check_waiters+0xa4>
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	68db      	ldr	r3, [r3, #12]
 800fafa:	68fa      	ldr	r2, [r7, #12]
 800fafc:	0952      	lsrs	r2, r2, #5
 800fafe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb02:	68fa      	ldr	r2, [r7, #12]
 800fb04:	f002 021f 	and.w	r2, r2, #31
 800fb08:	2101      	movs	r1, #1
 800fb0a:	fa01 f202 	lsl.w	r2, r1, r2
 800fb0e:	4013      	ands	r3, r2
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d001      	beq.n	800fb18 <select_check_waiters+0xa4>
            do_signal = 1;
 800fb14:	2301      	movs	r3, #1
 800fb16:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d017      	beq.n	800fb4e <select_check_waiters+0xda>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800fb1e:	693b      	ldr	r3, [r7, #16]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d114      	bne.n	800fb4e <select_check_waiters+0xda>
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	691b      	ldr	r3, [r3, #16]
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d010      	beq.n	800fb4e <select_check_waiters+0xda>
 800fb2c:	697b      	ldr	r3, [r7, #20]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	68fa      	ldr	r2, [r7, #12]
 800fb32:	0952      	lsrs	r2, r2, #5
 800fb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb38:	68fa      	ldr	r2, [r7, #12]
 800fb3a:	f002 021f 	and.w	r2, r2, #31
 800fb3e:	2101      	movs	r1, #1
 800fb40:	fa01 f202 	lsl.w	r2, r1, r2
 800fb44:	4013      	ands	r3, r2
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d001      	beq.n	800fb4e <select_check_waiters+0xda>
            do_signal = 1;
 800fb4a:	2301      	movs	r3, #1
 800fb4c:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800fb4e:	693b      	ldr	r3, [r7, #16]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d007      	beq.n	800fb64 <select_check_waiters+0xf0>
        scb->sem_signalled = 1;
 800fb54:	697b      	ldr	r3, [r7, #20]
 800fb56:	2201      	movs	r2, #1
 800fb58:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800fb5a:	697b      	ldr	r3, [r7, #20]
 800fb5c:	3320      	adds	r3, #32
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f00b fb88 	bl	801b274 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	681b      	ldr	r3, [r3, #0]
 800fb68:	617b      	str	r3, [r7, #20]
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d18c      	bne.n	800fa8a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800fb70:	bf00      	nop
 800fb72:	bf00      	nop
 800fb74:	3718      	adds	r7, #24
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd80      	pop	{r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	2000479c 	.word	0x2000479c

0800fb80 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b084      	sub	sp, #16
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800fb8a:	f008 f933 	bl	8017df4 <sys_timeouts_sleeptime>
 800fb8e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb96:	d10b      	bne.n	800fbb0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800fb98:	4813      	ldr	r0, [pc, #76]	; (800fbe8 <tcpip_timeouts_mbox_fetch+0x68>)
 800fb9a:	f00b fbdc 	bl	801b356 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800fb9e:	2200      	movs	r2, #0
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	6878      	ldr	r0, [r7, #4]
 800fba4:	f00b fa94 	bl	801b0d0 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800fba8:	480f      	ldr	r0, [pc, #60]	; (800fbe8 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbaa:	f00b fbc5 	bl	801b338 <sys_mutex_lock>
    return;
 800fbae:	e018      	b.n	800fbe2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d102      	bne.n	800fbbc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800fbb6:	f008 f8e3 	bl	8017d80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fbba:	e7e6      	b.n	800fb8a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800fbbc:	480a      	ldr	r0, [pc, #40]	; (800fbe8 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbbe:	f00b fbca 	bl	801b356 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	6839      	ldr	r1, [r7, #0]
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f00b fa82 	bl	801b0d0 <sys_arch_mbox_fetch>
 800fbcc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800fbce:	4806      	ldr	r0, [pc, #24]	; (800fbe8 <tcpip_timeouts_mbox_fetch+0x68>)
 800fbd0:	f00b fbb2 	bl	801b338 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbda:	d102      	bne.n	800fbe2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800fbdc:	f008 f8d0 	bl	8017d80 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800fbe0:	e7d3      	b.n	800fb8a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800fbe2:	3710      	adds	r7, #16
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}
 800fbe8:	2000a0a4 	.word	0x2000a0a4

0800fbec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b084      	sub	sp, #16
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800fbf4:	4810      	ldr	r0, [pc, #64]	; (800fc38 <tcpip_thread+0x4c>)
 800fbf6:	f00b fb9f 	bl	801b338 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800fbfa:	4b10      	ldr	r3, [pc, #64]	; (800fc3c <tcpip_thread+0x50>)
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d005      	beq.n	800fc0e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800fc02:	4b0e      	ldr	r3, [pc, #56]	; (800fc3c <tcpip_thread+0x50>)
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4a0e      	ldr	r2, [pc, #56]	; (800fc40 <tcpip_thread+0x54>)
 800fc08:	6812      	ldr	r2, [r2, #0]
 800fc0a:	4610      	mov	r0, r2
 800fc0c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fc0e:	f107 030c 	add.w	r3, r7, #12
 800fc12:	4619      	mov	r1, r3
 800fc14:	480b      	ldr	r0, [pc, #44]	; (800fc44 <tcpip_thread+0x58>)
 800fc16:	f7ff ffb3 	bl	800fb80 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d106      	bne.n	800fc2e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fc20:	4b09      	ldr	r3, [pc, #36]	; (800fc48 <tcpip_thread+0x5c>)
 800fc22:	2291      	movs	r2, #145	; 0x91
 800fc24:	4909      	ldr	r1, [pc, #36]	; (800fc4c <tcpip_thread+0x60>)
 800fc26:	480a      	ldr	r0, [pc, #40]	; (800fc50 <tcpip_thread+0x64>)
 800fc28:	f00c f870 	bl	801bd0c <iprintf>
      continue;
 800fc2c:	e003      	b.n	800fc36 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	4618      	mov	r0, r3
 800fc32:	f000 f80f 	bl	800fc54 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800fc36:	e7ea      	b.n	800fc0e <tcpip_thread+0x22>
 800fc38:	2000a0a4 	.word	0x2000a0a4
 800fc3c:	200047a0 	.word	0x200047a0
 800fc40:	200047a4 	.word	0x200047a4
 800fc44:	200047a8 	.word	0x200047a8
 800fc48:	0801f0ec 	.word	0x0801f0ec
 800fc4c:	0801f11c 	.word	0x0801f11c
 800fc50:	0801f13c 	.word	0x0801f13c

0800fc54 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	781b      	ldrb	r3, [r3, #0]
 800fc60:	2b02      	cmp	r3, #2
 800fc62:	d026      	beq.n	800fcb2 <tcpip_thread_handle_msg+0x5e>
 800fc64:	2b02      	cmp	r3, #2
 800fc66:	dc2b      	bgt.n	800fcc0 <tcpip_thread_handle_msg+0x6c>
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d002      	beq.n	800fc72 <tcpip_thread_handle_msg+0x1e>
 800fc6c:	2b01      	cmp	r3, #1
 800fc6e:	d015      	beq.n	800fc9c <tcpip_thread_handle_msg+0x48>
 800fc70:	e026      	b.n	800fcc0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	68db      	ldr	r3, [r3, #12]
 800fc76:	687a      	ldr	r2, [r7, #4]
 800fc78:	6850      	ldr	r0, [r2, #4]
 800fc7a:	687a      	ldr	r2, [r7, #4]
 800fc7c:	6892      	ldr	r2, [r2, #8]
 800fc7e:	4611      	mov	r1, r2
 800fc80:	4798      	blx	r3
 800fc82:	4603      	mov	r3, r0
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	d004      	beq.n	800fc92 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f001 fd0d 	bl	80116ac <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fc92:	6879      	ldr	r1, [r7, #4]
 800fc94:	2009      	movs	r0, #9
 800fc96:	f000 fe33 	bl	8010900 <memp_free>
      break;
 800fc9a:	e018      	b.n	800fcce <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	685b      	ldr	r3, [r3, #4]
 800fca0:	687a      	ldr	r2, [r7, #4]
 800fca2:	6892      	ldr	r2, [r2, #8]
 800fca4:	4610      	mov	r0, r2
 800fca6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800fca8:	6879      	ldr	r1, [r7, #4]
 800fcaa:	2008      	movs	r0, #8
 800fcac:	f000 fe28 	bl	8010900 <memp_free>
      break;
 800fcb0:	e00d      	b.n	800fcce <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	685b      	ldr	r3, [r3, #4]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	6892      	ldr	r2, [r2, #8]
 800fcba:	4610      	mov	r0, r2
 800fcbc:	4798      	blx	r3
      break;
 800fcbe:	e006      	b.n	800fcce <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800fcc0:	4b05      	ldr	r3, [pc, #20]	; (800fcd8 <tcpip_thread_handle_msg+0x84>)
 800fcc2:	22cf      	movs	r2, #207	; 0xcf
 800fcc4:	4905      	ldr	r1, [pc, #20]	; (800fcdc <tcpip_thread_handle_msg+0x88>)
 800fcc6:	4806      	ldr	r0, [pc, #24]	; (800fce0 <tcpip_thread_handle_msg+0x8c>)
 800fcc8:	f00c f820 	bl	801bd0c <iprintf>
      break;
 800fccc:	bf00      	nop
  }
}
 800fcce:	bf00      	nop
 800fcd0:	3708      	adds	r7, #8
 800fcd2:	46bd      	mov	sp, r7
 800fcd4:	bd80      	pop	{r7, pc}
 800fcd6:	bf00      	nop
 800fcd8:	0801f0ec 	.word	0x0801f0ec
 800fcdc:	0801f11c 	.word	0x0801f11c
 800fce0:	0801f13c 	.word	0x0801f13c

0800fce4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	b086      	sub	sp, #24
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	60f8      	str	r0, [r7, #12]
 800fcec:	60b9      	str	r1, [r7, #8]
 800fcee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fcf0:	481a      	ldr	r0, [pc, #104]	; (800fd5c <tcpip_inpkt+0x78>)
 800fcf2:	f00b fa48 	bl	801b186 <sys_mbox_valid>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d105      	bne.n	800fd08 <tcpip_inpkt+0x24>
 800fcfc:	4b18      	ldr	r3, [pc, #96]	; (800fd60 <tcpip_inpkt+0x7c>)
 800fcfe:	22fc      	movs	r2, #252	; 0xfc
 800fd00:	4918      	ldr	r1, [pc, #96]	; (800fd64 <tcpip_inpkt+0x80>)
 800fd02:	4819      	ldr	r0, [pc, #100]	; (800fd68 <tcpip_inpkt+0x84>)
 800fd04:	f00c f802 	bl	801bd0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fd08:	2009      	movs	r0, #9
 800fd0a:	f000 fda7 	bl	801085c <memp_malloc>
 800fd0e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d102      	bne.n	800fd1c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fd16:	f04f 33ff 	mov.w	r3, #4294967295
 800fd1a:	e01a      	b.n	800fd52 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	68fa      	ldr	r2, [r7, #12]
 800fd26:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	68ba      	ldr	r2, [r7, #8]
 800fd2c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fd34:	6979      	ldr	r1, [r7, #20]
 800fd36:	4809      	ldr	r0, [pc, #36]	; (800fd5c <tcpip_inpkt+0x78>)
 800fd38:	f00b f9b0 	bl	801b09c <sys_mbox_trypost>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d006      	beq.n	800fd50 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fd42:	6979      	ldr	r1, [r7, #20]
 800fd44:	2009      	movs	r0, #9
 800fd46:	f000 fddb 	bl	8010900 <memp_free>
    return ERR_MEM;
 800fd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800fd4e:	e000      	b.n	800fd52 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800fd50:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800fd52:	4618      	mov	r0, r3
 800fd54:	3718      	adds	r7, #24
 800fd56:	46bd      	mov	sp, r7
 800fd58:	bd80      	pop	{r7, pc}
 800fd5a:	bf00      	nop
 800fd5c:	200047a8 	.word	0x200047a8
 800fd60:	0801f0ec 	.word	0x0801f0ec
 800fd64:	0801f164 	.word	0x0801f164
 800fd68:	0801f13c 	.word	0x0801f13c

0800fd6c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800fd6c:	b580      	push	{r7, lr}
 800fd6e:	b082      	sub	sp, #8
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
 800fd74:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd7c:	f003 0318 	and.w	r3, r3, #24
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d006      	beq.n	800fd92 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800fd84:	4a08      	ldr	r2, [pc, #32]	; (800fda8 <tcpip_input+0x3c>)
 800fd86:	6839      	ldr	r1, [r7, #0]
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7ff ffab 	bl	800fce4 <tcpip_inpkt>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	e005      	b.n	800fd9e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800fd92:	4a06      	ldr	r2, [pc, #24]	; (800fdac <tcpip_input+0x40>)
 800fd94:	6839      	ldr	r1, [r7, #0]
 800fd96:	6878      	ldr	r0, [r7, #4]
 800fd98:	f7ff ffa4 	bl	800fce4 <tcpip_inpkt>
 800fd9c:	4603      	mov	r3, r0
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	0801ae89 	.word	0x0801ae89
 800fdac:	08019b21 	.word	0x08019b21

0800fdb0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fdba:	4819      	ldr	r0, [pc, #100]	; (800fe20 <tcpip_try_callback+0x70>)
 800fdbc:	f00b f9e3 	bl	801b186 <sys_mbox_valid>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d106      	bne.n	800fdd4 <tcpip_try_callback+0x24>
 800fdc6:	4b17      	ldr	r3, [pc, #92]	; (800fe24 <tcpip_try_callback+0x74>)
 800fdc8:	f240 125d 	movw	r2, #349	; 0x15d
 800fdcc:	4916      	ldr	r1, [pc, #88]	; (800fe28 <tcpip_try_callback+0x78>)
 800fdce:	4817      	ldr	r0, [pc, #92]	; (800fe2c <tcpip_try_callback+0x7c>)
 800fdd0:	f00b ff9c 	bl	801bd0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800fdd4:	2008      	movs	r0, #8
 800fdd6:	f000 fd41 	bl	801085c <memp_malloc>
 800fdda:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d102      	bne.n	800fde8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800fde2:	f04f 33ff 	mov.w	r3, #4294967295
 800fde6:	e017      	b.n	800fe18 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2201      	movs	r2, #1
 800fdec:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	683a      	ldr	r2, [r7, #0]
 800fdf8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fdfa:	68f9      	ldr	r1, [r7, #12]
 800fdfc:	4808      	ldr	r0, [pc, #32]	; (800fe20 <tcpip_try_callback+0x70>)
 800fdfe:	f00b f94d 	bl	801b09c <sys_mbox_trypost>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d006      	beq.n	800fe16 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fe08:	68f9      	ldr	r1, [r7, #12]
 800fe0a:	2008      	movs	r0, #8
 800fe0c:	f000 fd78 	bl	8010900 <memp_free>
    return ERR_MEM;
 800fe10:	f04f 33ff 	mov.w	r3, #4294967295
 800fe14:	e000      	b.n	800fe18 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fe16:	2300      	movs	r3, #0
}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3710      	adds	r7, #16
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	bd80      	pop	{r7, pc}
 800fe20:	200047a8 	.word	0x200047a8
 800fe24:	0801f0ec 	.word	0x0801f0ec
 800fe28:	0801f164 	.word	0x0801f164
 800fe2c:	0801f13c 	.word	0x0801f13c

0800fe30 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800fe3c:	4806      	ldr	r0, [pc, #24]	; (800fe58 <tcpip_send_msg_wait_sem+0x28>)
 800fe3e:	f00b fa7b 	bl	801b338 <sys_mutex_lock>
  fn(apimsg);
 800fe42:	68fb      	ldr	r3, [r7, #12]
 800fe44:	68b8      	ldr	r0, [r7, #8]
 800fe46:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800fe48:	4803      	ldr	r0, [pc, #12]	; (800fe58 <tcpip_send_msg_wait_sem+0x28>)
 800fe4a:	f00b fa84 	bl	801b356 <sys_mutex_unlock>
  return ERR_OK;
 800fe4e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3710      	adds	r7, #16
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	2000a0a4 	.word	0x2000a0a4

0800fe5c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af02      	add	r7, sp, #8
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  lwip_init();
 800fe66:	f000 f871 	bl	800ff4c <lwip_init>

  tcpip_init_done = initfunc;
 800fe6a:	4a17      	ldr	r2, [pc, #92]	; (800fec8 <tcpip_init+0x6c>)
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800fe70:	4a16      	ldr	r2, [pc, #88]	; (800fecc <tcpip_init+0x70>)
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800fe76:	2106      	movs	r1, #6
 800fe78:	4815      	ldr	r0, [pc, #84]	; (800fed0 <tcpip_init+0x74>)
 800fe7a:	f00b f8db 	bl	801b034 <sys_mbox_new>
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d006      	beq.n	800fe92 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800fe84:	4b13      	ldr	r3, [pc, #76]	; (800fed4 <tcpip_init+0x78>)
 800fe86:	f240 2261 	movw	r2, #609	; 0x261
 800fe8a:	4913      	ldr	r1, [pc, #76]	; (800fed8 <tcpip_init+0x7c>)
 800fe8c:	4813      	ldr	r0, [pc, #76]	; (800fedc <tcpip_init+0x80>)
 800fe8e:	f00b ff3d 	bl	801bd0c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800fe92:	4813      	ldr	r0, [pc, #76]	; (800fee0 <tcpip_init+0x84>)
 800fe94:	f00b fa34 	bl	801b300 <sys_mutex_new>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d006      	beq.n	800feac <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800fe9e:	4b0d      	ldr	r3, [pc, #52]	; (800fed4 <tcpip_init+0x78>)
 800fea0:	f240 2265 	movw	r2, #613	; 0x265
 800fea4:	490f      	ldr	r1, [pc, #60]	; (800fee4 <tcpip_init+0x88>)
 800fea6:	480d      	ldr	r0, [pc, #52]	; (800fedc <tcpip_init+0x80>)
 800fea8:	f00b ff30 	bl	801bd0c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800feac:	2300      	movs	r3, #0
 800feae:	9300      	str	r3, [sp, #0]
 800feb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feb4:	2200      	movs	r2, #0
 800feb6:	490c      	ldr	r1, [pc, #48]	; (800fee8 <tcpip_init+0x8c>)
 800feb8:	480c      	ldr	r0, [pc, #48]	; (800feec <tcpip_init+0x90>)
 800feba:	f00b fa59 	bl	801b370 <sys_thread_new>
}
 800febe:	bf00      	nop
 800fec0:	3708      	adds	r7, #8
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
 800fec6:	bf00      	nop
 800fec8:	200047a0 	.word	0x200047a0
 800fecc:	200047a4 	.word	0x200047a4
 800fed0:	200047a8 	.word	0x200047a8
 800fed4:	0801f0ec 	.word	0x0801f0ec
 800fed8:	0801f174 	.word	0x0801f174
 800fedc:	0801f13c 	.word	0x0801f13c
 800fee0:	2000a0a4 	.word	0x2000a0a4
 800fee4:	0801f198 	.word	0x0801f198
 800fee8:	0800fbed 	.word	0x0800fbed
 800feec:	0801f1bc 	.word	0x0801f1bc

0800fef0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fef0:	b480      	push	{r7}
 800fef2:	b083      	sub	sp, #12
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	4603      	mov	r3, r0
 800fef8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fefa:	88fb      	ldrh	r3, [r7, #6]
 800fefc:	021b      	lsls	r3, r3, #8
 800fefe:	b21a      	sxth	r2, r3
 800ff00:	88fb      	ldrh	r3, [r7, #6]
 800ff02:	0a1b      	lsrs	r3, r3, #8
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	b21b      	sxth	r3, r3
 800ff08:	4313      	orrs	r3, r2
 800ff0a:	b21b      	sxth	r3, r3
 800ff0c:	b29b      	uxth	r3, r3
}
 800ff0e:	4618      	mov	r0, r3
 800ff10:	370c      	adds	r7, #12
 800ff12:	46bd      	mov	sp, r7
 800ff14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff18:	4770      	bx	lr

0800ff1a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800ff1a:	b480      	push	{r7}
 800ff1c:	b083      	sub	sp, #12
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	061a      	lsls	r2, r3, #24
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	021b      	lsls	r3, r3, #8
 800ff2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ff2e:	431a      	orrs	r2, r3
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	0a1b      	lsrs	r3, r3, #8
 800ff34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ff38:	431a      	orrs	r2, r3
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	0e1b      	lsrs	r3, r3, #24
 800ff3e:	4313      	orrs	r3, r2
}
 800ff40:	4618      	mov	r0, r3
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ff52:	2300      	movs	r3, #0
 800ff54:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ff56:	f00b f9c5 	bl	801b2e4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ff5a:	f000 f8d5 	bl	8010108 <mem_init>
  memp_init();
 800ff5e:	f000 fc31 	bl	80107c4 <memp_init>
  pbuf_init();
  netif_init();
 800ff62:	f000 fcf7 	bl	8010954 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ff66:	f007 ff7d 	bl	8017e64 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ff6a:	f001 fe49 	bl	8011c00 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ff6e:	f007 febf 	bl	8017cf0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ff72:	bf00      	nop
 800ff74:	3708      	adds	r7, #8
 800ff76:	46bd      	mov	sp, r7
 800ff78:	bd80      	pop	{r7, pc}
	...

0800ff7c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b083      	sub	sp, #12
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	4603      	mov	r3, r0
 800ff84:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <ptr_to_mem+0x20>)
 800ff88:	681a      	ldr	r2, [r3, #0]
 800ff8a:	88fb      	ldrh	r3, [r7, #6]
 800ff8c:	4413      	add	r3, r2
}
 800ff8e:	4618      	mov	r0, r3
 800ff90:	370c      	adds	r7, #12
 800ff92:	46bd      	mov	sp, r7
 800ff94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff98:	4770      	bx	lr
 800ff9a:	bf00      	nop
 800ff9c:	200047ac 	.word	0x200047ac

0800ffa0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ffa0:	b480      	push	{r7}
 800ffa2:	b083      	sub	sp, #12
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ffa8:	4b05      	ldr	r3, [pc, #20]	; (800ffc0 <mem_to_ptr+0x20>)
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	687a      	ldr	r2, [r7, #4]
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	b29b      	uxth	r3, r3
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	370c      	adds	r7, #12
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop
 800ffc0:	200047ac 	.word	0x200047ac

0800ffc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ffc4:	b590      	push	{r4, r7, lr}
 800ffc6:	b085      	sub	sp, #20
 800ffc8:	af00      	add	r7, sp, #0
 800ffca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ffcc:	4b45      	ldr	r3, [pc, #276]	; (80100e4 <plug_holes+0x120>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d206      	bcs.n	800ffe4 <plug_holes+0x20>
 800ffd6:	4b44      	ldr	r3, [pc, #272]	; (80100e8 <plug_holes+0x124>)
 800ffd8:	f240 12df 	movw	r2, #479	; 0x1df
 800ffdc:	4943      	ldr	r1, [pc, #268]	; (80100ec <plug_holes+0x128>)
 800ffde:	4844      	ldr	r0, [pc, #272]	; (80100f0 <plug_holes+0x12c>)
 800ffe0:	f00b fe94 	bl	801bd0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ffe4:	4b43      	ldr	r3, [pc, #268]	; (80100f4 <plug_holes+0x130>)
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	429a      	cmp	r2, r3
 800ffec:	d306      	bcc.n	800fffc <plug_holes+0x38>
 800ffee:	4b3e      	ldr	r3, [pc, #248]	; (80100e8 <plug_holes+0x124>)
 800fff0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fff4:	4940      	ldr	r1, [pc, #256]	; (80100f8 <plug_holes+0x134>)
 800fff6:	483e      	ldr	r0, [pc, #248]	; (80100f0 <plug_holes+0x12c>)
 800fff8:	f00b fe88 	bl	801bd0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	791b      	ldrb	r3, [r3, #4]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d006      	beq.n	8010012 <plug_holes+0x4e>
 8010004:	4b38      	ldr	r3, [pc, #224]	; (80100e8 <plug_holes+0x124>)
 8010006:	f240 12e1 	movw	r2, #481	; 0x1e1
 801000a:	493c      	ldr	r1, [pc, #240]	; (80100fc <plug_holes+0x138>)
 801000c:	4838      	ldr	r0, [pc, #224]	; (80100f0 <plug_holes+0x12c>)
 801000e:	f00b fe7d 	bl	801bd0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	881b      	ldrh	r3, [r3, #0]
 8010016:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801001a:	d906      	bls.n	801002a <plug_holes+0x66>
 801001c:	4b32      	ldr	r3, [pc, #200]	; (80100e8 <plug_holes+0x124>)
 801001e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8010022:	4937      	ldr	r1, [pc, #220]	; (8010100 <plug_holes+0x13c>)
 8010024:	4832      	ldr	r0, [pc, #200]	; (80100f0 <plug_holes+0x12c>)
 8010026:	f00b fe71 	bl	801bd0c <iprintf>

  nmem = ptr_to_mem(mem->next);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	4618      	mov	r0, r3
 8010030:	f7ff ffa4 	bl	800ff7c <ptr_to_mem>
 8010034:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010036:	687a      	ldr	r2, [r7, #4]
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	429a      	cmp	r2, r3
 801003c:	d024      	beq.n	8010088 <plug_holes+0xc4>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	791b      	ldrb	r3, [r3, #4]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d120      	bne.n	8010088 <plug_holes+0xc4>
 8010046:	4b2b      	ldr	r3, [pc, #172]	; (80100f4 <plug_holes+0x130>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	68fa      	ldr	r2, [r7, #12]
 801004c:	429a      	cmp	r2, r3
 801004e:	d01b      	beq.n	8010088 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010050:	4b2c      	ldr	r3, [pc, #176]	; (8010104 <plug_holes+0x140>)
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	429a      	cmp	r2, r3
 8010058:	d102      	bne.n	8010060 <plug_holes+0x9c>
      lfree = mem;
 801005a:	4a2a      	ldr	r2, [pc, #168]	; (8010104 <plug_holes+0x140>)
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	881a      	ldrh	r2, [r3, #0]
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	881b      	ldrh	r3, [r3, #0]
 801006c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010070:	d00a      	beq.n	8010088 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff ff80 	bl	800ff7c <ptr_to_mem>
 801007c:	4604      	mov	r4, r0
 801007e:	6878      	ldr	r0, [r7, #4]
 8010080:	f7ff ff8e 	bl	800ffa0 <mem_to_ptr>
 8010084:	4603      	mov	r3, r0
 8010086:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	885b      	ldrh	r3, [r3, #2]
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff ff75 	bl	800ff7c <ptr_to_mem>
 8010092:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010094:	68ba      	ldr	r2, [r7, #8]
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	429a      	cmp	r2, r3
 801009a:	d01f      	beq.n	80100dc <plug_holes+0x118>
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	791b      	ldrb	r3, [r3, #4]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d11b      	bne.n	80100dc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80100a4:	4b17      	ldr	r3, [pc, #92]	; (8010104 <plug_holes+0x140>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	687a      	ldr	r2, [r7, #4]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d102      	bne.n	80100b4 <plug_holes+0xf0>
      lfree = pmem;
 80100ae:	4a15      	ldr	r2, [pc, #84]	; (8010104 <plug_holes+0x140>)
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	881a      	ldrh	r2, [r3, #0]
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	881b      	ldrh	r3, [r3, #0]
 80100c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80100c4:	d00a      	beq.n	80100dc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	881b      	ldrh	r3, [r3, #0]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f7ff ff56 	bl	800ff7c <ptr_to_mem>
 80100d0:	4604      	mov	r4, r0
 80100d2:	68b8      	ldr	r0, [r7, #8]
 80100d4:	f7ff ff64 	bl	800ffa0 <mem_to_ptr>
 80100d8:	4603      	mov	r3, r0
 80100da:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80100dc:	bf00      	nop
 80100de:	3714      	adds	r7, #20
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd90      	pop	{r4, r7, pc}
 80100e4:	200047ac 	.word	0x200047ac
 80100e8:	0801f1cc 	.word	0x0801f1cc
 80100ec:	0801f1fc 	.word	0x0801f1fc
 80100f0:	0801f214 	.word	0x0801f214
 80100f4:	200047b0 	.word	0x200047b0
 80100f8:	0801f23c 	.word	0x0801f23c
 80100fc:	0801f258 	.word	0x0801f258
 8010100:	0801f274 	.word	0x0801f274
 8010104:	200047b8 	.word	0x200047b8

08010108 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801010e:	4b1f      	ldr	r3, [pc, #124]	; (801018c <mem_init+0x84>)
 8010110:	3303      	adds	r3, #3
 8010112:	f023 0303 	bic.w	r3, r3, #3
 8010116:	461a      	mov	r2, r3
 8010118:	4b1d      	ldr	r3, [pc, #116]	; (8010190 <mem_init+0x88>)
 801011a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801011c:	4b1c      	ldr	r3, [pc, #112]	; (8010190 <mem_init+0x88>)
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010128:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	2200      	movs	r2, #0
 801012e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	2200      	movs	r2, #0
 8010134:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010136:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801013a:	f7ff ff1f 	bl	800ff7c <ptr_to_mem>
 801013e:	4603      	mov	r3, r0
 8010140:	4a14      	ldr	r2, [pc, #80]	; (8010194 <mem_init+0x8c>)
 8010142:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010144:	4b13      	ldr	r3, [pc, #76]	; (8010194 <mem_init+0x8c>)
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2201      	movs	r2, #1
 801014a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801014c:	4b11      	ldr	r3, [pc, #68]	; (8010194 <mem_init+0x8c>)
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8010154:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010156:	4b0f      	ldr	r3, [pc, #60]	; (8010194 <mem_init+0x8c>)
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801015e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010160:	4b0b      	ldr	r3, [pc, #44]	; (8010190 <mem_init+0x88>)
 8010162:	681b      	ldr	r3, [r3, #0]
 8010164:	4a0c      	ldr	r2, [pc, #48]	; (8010198 <mem_init+0x90>)
 8010166:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010168:	480c      	ldr	r0, [pc, #48]	; (801019c <mem_init+0x94>)
 801016a:	f00b f8c9 	bl	801b300 <sys_mutex_new>
 801016e:	4603      	mov	r3, r0
 8010170:	2b00      	cmp	r3, #0
 8010172:	d006      	beq.n	8010182 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010174:	4b0a      	ldr	r3, [pc, #40]	; (80101a0 <mem_init+0x98>)
 8010176:	f240 221f 	movw	r2, #543	; 0x21f
 801017a:	490a      	ldr	r1, [pc, #40]	; (80101a4 <mem_init+0x9c>)
 801017c:	480a      	ldr	r0, [pc, #40]	; (80101a8 <mem_init+0xa0>)
 801017e:	f00b fdc5 	bl	801bd0c <iprintf>
  }
}
 8010182:	bf00      	nop
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	2000a0c0 	.word	0x2000a0c0
 8010190:	200047ac 	.word	0x200047ac
 8010194:	200047b0 	.word	0x200047b0
 8010198:	200047b8 	.word	0x200047b8
 801019c:	200047b4 	.word	0x200047b4
 80101a0:	0801f1cc 	.word	0x0801f1cc
 80101a4:	0801f2a0 	.word	0x0801f2a0
 80101a8:	0801f214 	.word	0x0801f214

080101ac <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80101ac:	b580      	push	{r7, lr}
 80101ae:	b086      	sub	sp, #24
 80101b0:	af00      	add	r7, sp, #0
 80101b2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80101b4:	6878      	ldr	r0, [r7, #4]
 80101b6:	f7ff fef3 	bl	800ffa0 <mem_to_ptr>
 80101ba:	4603      	mov	r3, r0
 80101bc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	881b      	ldrh	r3, [r3, #0]
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7ff feda 	bl	800ff7c <ptr_to_mem>
 80101c8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	885b      	ldrh	r3, [r3, #2]
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7ff fed4 	bl	800ff7c <ptr_to_mem>
 80101d4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	881b      	ldrh	r3, [r3, #0]
 80101da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101de:	d818      	bhi.n	8010212 <mem_link_valid+0x66>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	885b      	ldrh	r3, [r3, #2]
 80101e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80101e8:	d813      	bhi.n	8010212 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80101ee:	8afa      	ldrh	r2, [r7, #22]
 80101f0:	429a      	cmp	r2, r3
 80101f2:	d004      	beq.n	80101fe <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	881b      	ldrh	r3, [r3, #0]
 80101f8:	8afa      	ldrh	r2, [r7, #22]
 80101fa:	429a      	cmp	r2, r3
 80101fc:	d109      	bne.n	8010212 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80101fe:	4b08      	ldr	r3, [pc, #32]	; (8010220 <mem_link_valid+0x74>)
 8010200:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010202:	693a      	ldr	r2, [r7, #16]
 8010204:	429a      	cmp	r2, r3
 8010206:	d006      	beq.n	8010216 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010208:	693b      	ldr	r3, [r7, #16]
 801020a:	885b      	ldrh	r3, [r3, #2]
 801020c:	8afa      	ldrh	r2, [r7, #22]
 801020e:	429a      	cmp	r2, r3
 8010210:	d001      	beq.n	8010216 <mem_link_valid+0x6a>
    return 0;
 8010212:	2300      	movs	r3, #0
 8010214:	e000      	b.n	8010218 <mem_link_valid+0x6c>
  }
  return 1;
 8010216:	2301      	movs	r3, #1
}
 8010218:	4618      	mov	r0, r3
 801021a:	3718      	adds	r7, #24
 801021c:	46bd      	mov	sp, r7
 801021e:	bd80      	pop	{r7, pc}
 8010220:	200047b0 	.word	0x200047b0

08010224 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b088      	sub	sp, #32
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d070      	beq.n	8010314 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	f003 0303 	and.w	r3, r3, #3
 8010238:	2b00      	cmp	r3, #0
 801023a:	d00d      	beq.n	8010258 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801023c:	4b37      	ldr	r3, [pc, #220]	; (801031c <mem_free+0xf8>)
 801023e:	f240 2273 	movw	r2, #627	; 0x273
 8010242:	4937      	ldr	r1, [pc, #220]	; (8010320 <mem_free+0xfc>)
 8010244:	4837      	ldr	r0, [pc, #220]	; (8010324 <mem_free+0x100>)
 8010246:	f00b fd61 	bl	801bd0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801024a:	f00b f8b7 	bl	801b3bc <sys_arch_protect>
 801024e:	60f8      	str	r0, [r7, #12]
 8010250:	68f8      	ldr	r0, [r7, #12]
 8010252:	f00b f8c1 	bl	801b3d8 <sys_arch_unprotect>
    return;
 8010256:	e05e      	b.n	8010316 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	3b08      	subs	r3, #8
 801025c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801025e:	4b32      	ldr	r3, [pc, #200]	; (8010328 <mem_free+0x104>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	69fa      	ldr	r2, [r7, #28]
 8010264:	429a      	cmp	r2, r3
 8010266:	d306      	bcc.n	8010276 <mem_free+0x52>
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	f103 020c 	add.w	r2, r3, #12
 801026e:	4b2f      	ldr	r3, [pc, #188]	; (801032c <mem_free+0x108>)
 8010270:	681b      	ldr	r3, [r3, #0]
 8010272:	429a      	cmp	r2, r3
 8010274:	d90d      	bls.n	8010292 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010276:	4b29      	ldr	r3, [pc, #164]	; (801031c <mem_free+0xf8>)
 8010278:	f240 227f 	movw	r2, #639	; 0x27f
 801027c:	492c      	ldr	r1, [pc, #176]	; (8010330 <mem_free+0x10c>)
 801027e:	4829      	ldr	r0, [pc, #164]	; (8010324 <mem_free+0x100>)
 8010280:	f00b fd44 	bl	801bd0c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010284:	f00b f89a 	bl	801b3bc <sys_arch_protect>
 8010288:	6138      	str	r0, [r7, #16]
 801028a:	6938      	ldr	r0, [r7, #16]
 801028c:	f00b f8a4 	bl	801b3d8 <sys_arch_unprotect>
    return;
 8010290:	e041      	b.n	8010316 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010292:	4828      	ldr	r0, [pc, #160]	; (8010334 <mem_free+0x110>)
 8010294:	f00b f850 	bl	801b338 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010298:	69fb      	ldr	r3, [r7, #28]
 801029a:	791b      	ldrb	r3, [r3, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d110      	bne.n	80102c2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80102a0:	4b1e      	ldr	r3, [pc, #120]	; (801031c <mem_free+0xf8>)
 80102a2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80102a6:	4924      	ldr	r1, [pc, #144]	; (8010338 <mem_free+0x114>)
 80102a8:	481e      	ldr	r0, [pc, #120]	; (8010324 <mem_free+0x100>)
 80102aa:	f00b fd2f 	bl	801bd0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80102ae:	4821      	ldr	r0, [pc, #132]	; (8010334 <mem_free+0x110>)
 80102b0:	f00b f851 	bl	801b356 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80102b4:	f00b f882 	bl	801b3bc <sys_arch_protect>
 80102b8:	6178      	str	r0, [r7, #20]
 80102ba:	6978      	ldr	r0, [r7, #20]
 80102bc:	f00b f88c 	bl	801b3d8 <sys_arch_unprotect>
    return;
 80102c0:	e029      	b.n	8010316 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80102c2:	69f8      	ldr	r0, [r7, #28]
 80102c4:	f7ff ff72 	bl	80101ac <mem_link_valid>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d110      	bne.n	80102f0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80102ce:	4b13      	ldr	r3, [pc, #76]	; (801031c <mem_free+0xf8>)
 80102d0:	f240 2295 	movw	r2, #661	; 0x295
 80102d4:	4919      	ldr	r1, [pc, #100]	; (801033c <mem_free+0x118>)
 80102d6:	4813      	ldr	r0, [pc, #76]	; (8010324 <mem_free+0x100>)
 80102d8:	f00b fd18 	bl	801bd0c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80102dc:	4815      	ldr	r0, [pc, #84]	; (8010334 <mem_free+0x110>)
 80102de:	f00b f83a 	bl	801b356 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80102e2:	f00b f86b 	bl	801b3bc <sys_arch_protect>
 80102e6:	61b8      	str	r0, [r7, #24]
 80102e8:	69b8      	ldr	r0, [r7, #24]
 80102ea:	f00b f875 	bl	801b3d8 <sys_arch_unprotect>
    return;
 80102ee:	e012      	b.n	8010316 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80102f0:	69fb      	ldr	r3, [r7, #28]
 80102f2:	2200      	movs	r2, #0
 80102f4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80102f6:	4b12      	ldr	r3, [pc, #72]	; (8010340 <mem_free+0x11c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	69fa      	ldr	r2, [r7, #28]
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d202      	bcs.n	8010306 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010300:	4a0f      	ldr	r2, [pc, #60]	; (8010340 <mem_free+0x11c>)
 8010302:	69fb      	ldr	r3, [r7, #28]
 8010304:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010306:	69f8      	ldr	r0, [r7, #28]
 8010308:	f7ff fe5c 	bl	800ffc4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801030c:	4809      	ldr	r0, [pc, #36]	; (8010334 <mem_free+0x110>)
 801030e:	f00b f822 	bl	801b356 <sys_mutex_unlock>
 8010312:	e000      	b.n	8010316 <mem_free+0xf2>
    return;
 8010314:	bf00      	nop
}
 8010316:	3720      	adds	r7, #32
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	0801f1cc 	.word	0x0801f1cc
 8010320:	0801f2bc 	.word	0x0801f2bc
 8010324:	0801f214 	.word	0x0801f214
 8010328:	200047ac 	.word	0x200047ac
 801032c:	200047b0 	.word	0x200047b0
 8010330:	0801f2e0 	.word	0x0801f2e0
 8010334:	200047b4 	.word	0x200047b4
 8010338:	0801f2fc 	.word	0x0801f2fc
 801033c:	0801f324 	.word	0x0801f324
 8010340:	200047b8 	.word	0x200047b8

08010344 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010344:	b580      	push	{r7, lr}
 8010346:	b088      	sub	sp, #32
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
 801034c:	460b      	mov	r3, r1
 801034e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010350:	887b      	ldrh	r3, [r7, #2]
 8010352:	3303      	adds	r3, #3
 8010354:	b29b      	uxth	r3, r3
 8010356:	f023 0303 	bic.w	r3, r3, #3
 801035a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801035c:	8bfb      	ldrh	r3, [r7, #30]
 801035e:	2b0b      	cmp	r3, #11
 8010360:	d801      	bhi.n	8010366 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010362:	230c      	movs	r3, #12
 8010364:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010366:	8bfb      	ldrh	r3, [r7, #30]
 8010368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801036c:	d803      	bhi.n	8010376 <mem_trim+0x32>
 801036e:	8bfa      	ldrh	r2, [r7, #30]
 8010370:	887b      	ldrh	r3, [r7, #2]
 8010372:	429a      	cmp	r2, r3
 8010374:	d201      	bcs.n	801037a <mem_trim+0x36>
    return NULL;
 8010376:	2300      	movs	r3, #0
 8010378:	e0d8      	b.n	801052c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801037a:	4b6e      	ldr	r3, [pc, #440]	; (8010534 <mem_trim+0x1f0>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	687a      	ldr	r2, [r7, #4]
 8010380:	429a      	cmp	r2, r3
 8010382:	d304      	bcc.n	801038e <mem_trim+0x4a>
 8010384:	4b6c      	ldr	r3, [pc, #432]	; (8010538 <mem_trim+0x1f4>)
 8010386:	681b      	ldr	r3, [r3, #0]
 8010388:	687a      	ldr	r2, [r7, #4]
 801038a:	429a      	cmp	r2, r3
 801038c:	d306      	bcc.n	801039c <mem_trim+0x58>
 801038e:	4b6b      	ldr	r3, [pc, #428]	; (801053c <mem_trim+0x1f8>)
 8010390:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010394:	496a      	ldr	r1, [pc, #424]	; (8010540 <mem_trim+0x1fc>)
 8010396:	486b      	ldr	r0, [pc, #428]	; (8010544 <mem_trim+0x200>)
 8010398:	f00b fcb8 	bl	801bd0c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801039c:	4b65      	ldr	r3, [pc, #404]	; (8010534 <mem_trim+0x1f0>)
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	687a      	ldr	r2, [r7, #4]
 80103a2:	429a      	cmp	r2, r3
 80103a4:	d304      	bcc.n	80103b0 <mem_trim+0x6c>
 80103a6:	4b64      	ldr	r3, [pc, #400]	; (8010538 <mem_trim+0x1f4>)
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	687a      	ldr	r2, [r7, #4]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d307      	bcc.n	80103c0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80103b0:	f00b f804 	bl	801b3bc <sys_arch_protect>
 80103b4:	60b8      	str	r0, [r7, #8]
 80103b6:	68b8      	ldr	r0, [r7, #8]
 80103b8:	f00b f80e 	bl	801b3d8 <sys_arch_unprotect>
    return rmem;
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	e0b5      	b.n	801052c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	3b08      	subs	r3, #8
 80103c4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80103c6:	69b8      	ldr	r0, [r7, #24]
 80103c8:	f7ff fdea 	bl	800ffa0 <mem_to_ptr>
 80103cc:	4603      	mov	r3, r0
 80103ce:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	881a      	ldrh	r2, [r3, #0]
 80103d4:	8afb      	ldrh	r3, [r7, #22]
 80103d6:	1ad3      	subs	r3, r2, r3
 80103d8:	b29b      	uxth	r3, r3
 80103da:	3b08      	subs	r3, #8
 80103dc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80103de:	8bfa      	ldrh	r2, [r7, #30]
 80103e0:	8abb      	ldrh	r3, [r7, #20]
 80103e2:	429a      	cmp	r2, r3
 80103e4:	d906      	bls.n	80103f4 <mem_trim+0xb0>
 80103e6:	4b55      	ldr	r3, [pc, #340]	; (801053c <mem_trim+0x1f8>)
 80103e8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80103ec:	4956      	ldr	r1, [pc, #344]	; (8010548 <mem_trim+0x204>)
 80103ee:	4855      	ldr	r0, [pc, #340]	; (8010544 <mem_trim+0x200>)
 80103f0:	f00b fc8c 	bl	801bd0c <iprintf>
  if (newsize > size) {
 80103f4:	8bfa      	ldrh	r2, [r7, #30]
 80103f6:	8abb      	ldrh	r3, [r7, #20]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d901      	bls.n	8010400 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 80103fc:	2300      	movs	r3, #0
 80103fe:	e095      	b.n	801052c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010400:	8bfa      	ldrh	r2, [r7, #30]
 8010402:	8abb      	ldrh	r3, [r7, #20]
 8010404:	429a      	cmp	r2, r3
 8010406:	d101      	bne.n	801040c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	e08f      	b.n	801052c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801040c:	484f      	ldr	r0, [pc, #316]	; (801054c <mem_trim+0x208>)
 801040e:	f00a ff93 	bl	801b338 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	881b      	ldrh	r3, [r3, #0]
 8010416:	4618      	mov	r0, r3
 8010418:	f7ff fdb0 	bl	800ff7c <ptr_to_mem>
 801041c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801041e:	693b      	ldr	r3, [r7, #16]
 8010420:	791b      	ldrb	r3, [r3, #4]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d13f      	bne.n	80104a6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	881b      	ldrh	r3, [r3, #0]
 801042a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801042e:	d106      	bne.n	801043e <mem_trim+0xfa>
 8010430:	4b42      	ldr	r3, [pc, #264]	; (801053c <mem_trim+0x1f8>)
 8010432:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010436:	4946      	ldr	r1, [pc, #280]	; (8010550 <mem_trim+0x20c>)
 8010438:	4842      	ldr	r0, [pc, #264]	; (8010544 <mem_trim+0x200>)
 801043a:	f00b fc67 	bl	801bd0c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	881b      	ldrh	r3, [r3, #0]
 8010442:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010444:	8afa      	ldrh	r2, [r7, #22]
 8010446:	8bfb      	ldrh	r3, [r7, #30]
 8010448:	4413      	add	r3, r2
 801044a:	b29b      	uxth	r3, r3
 801044c:	3308      	adds	r3, #8
 801044e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010450:	4b40      	ldr	r3, [pc, #256]	; (8010554 <mem_trim+0x210>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	693a      	ldr	r2, [r7, #16]
 8010456:	429a      	cmp	r2, r3
 8010458:	d106      	bne.n	8010468 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801045a:	89fb      	ldrh	r3, [r7, #14]
 801045c:	4618      	mov	r0, r3
 801045e:	f7ff fd8d 	bl	800ff7c <ptr_to_mem>
 8010462:	4603      	mov	r3, r0
 8010464:	4a3b      	ldr	r2, [pc, #236]	; (8010554 <mem_trim+0x210>)
 8010466:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010468:	89fb      	ldrh	r3, [r7, #14]
 801046a:	4618      	mov	r0, r3
 801046c:	f7ff fd86 	bl	800ff7c <ptr_to_mem>
 8010470:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010472:	693b      	ldr	r3, [r7, #16]
 8010474:	2200      	movs	r2, #0
 8010476:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	89ba      	ldrh	r2, [r7, #12]
 801047c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801047e:	693b      	ldr	r3, [r7, #16]
 8010480:	8afa      	ldrh	r2, [r7, #22]
 8010482:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	89fa      	ldrh	r2, [r7, #14]
 8010488:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	881b      	ldrh	r3, [r3, #0]
 801048e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010492:	d047      	beq.n	8010524 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	881b      	ldrh	r3, [r3, #0]
 8010498:	4618      	mov	r0, r3
 801049a:	f7ff fd6f 	bl	800ff7c <ptr_to_mem>
 801049e:	4602      	mov	r2, r0
 80104a0:	89fb      	ldrh	r3, [r7, #14]
 80104a2:	8053      	strh	r3, [r2, #2]
 80104a4:	e03e      	b.n	8010524 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80104a6:	8bfb      	ldrh	r3, [r7, #30]
 80104a8:	f103 0214 	add.w	r2, r3, #20
 80104ac:	8abb      	ldrh	r3, [r7, #20]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d838      	bhi.n	8010524 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80104b2:	8afa      	ldrh	r2, [r7, #22]
 80104b4:	8bfb      	ldrh	r3, [r7, #30]
 80104b6:	4413      	add	r3, r2
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	3308      	adds	r3, #8
 80104bc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	881b      	ldrh	r3, [r3, #0]
 80104c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80104c6:	d106      	bne.n	80104d6 <mem_trim+0x192>
 80104c8:	4b1c      	ldr	r3, [pc, #112]	; (801053c <mem_trim+0x1f8>)
 80104ca:	f240 3216 	movw	r2, #790	; 0x316
 80104ce:	4920      	ldr	r1, [pc, #128]	; (8010550 <mem_trim+0x20c>)
 80104d0:	481c      	ldr	r0, [pc, #112]	; (8010544 <mem_trim+0x200>)
 80104d2:	f00b fc1b 	bl	801bd0c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80104d6:	89fb      	ldrh	r3, [r7, #14]
 80104d8:	4618      	mov	r0, r3
 80104da:	f7ff fd4f 	bl	800ff7c <ptr_to_mem>
 80104de:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80104e0:	4b1c      	ldr	r3, [pc, #112]	; (8010554 <mem_trim+0x210>)
 80104e2:	681b      	ldr	r3, [r3, #0]
 80104e4:	693a      	ldr	r2, [r7, #16]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d202      	bcs.n	80104f0 <mem_trim+0x1ac>
      lfree = mem2;
 80104ea:	4a1a      	ldr	r2, [pc, #104]	; (8010554 <mem_trim+0x210>)
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80104f0:	693b      	ldr	r3, [r7, #16]
 80104f2:	2200      	movs	r2, #0
 80104f4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	881a      	ldrh	r2, [r3, #0]
 80104fa:	693b      	ldr	r3, [r7, #16]
 80104fc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80104fe:	693b      	ldr	r3, [r7, #16]
 8010500:	8afa      	ldrh	r2, [r7, #22]
 8010502:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	89fa      	ldrh	r2, [r7, #14]
 8010508:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801050a:	693b      	ldr	r3, [r7, #16]
 801050c:	881b      	ldrh	r3, [r3, #0]
 801050e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010512:	d007      	beq.n	8010524 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010514:	693b      	ldr	r3, [r7, #16]
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	4618      	mov	r0, r3
 801051a:	f7ff fd2f 	bl	800ff7c <ptr_to_mem>
 801051e:	4602      	mov	r2, r0
 8010520:	89fb      	ldrh	r3, [r7, #14]
 8010522:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010524:	4809      	ldr	r0, [pc, #36]	; (801054c <mem_trim+0x208>)
 8010526:	f00a ff16 	bl	801b356 <sys_mutex_unlock>
  return rmem;
 801052a:	687b      	ldr	r3, [r7, #4]
}
 801052c:	4618      	mov	r0, r3
 801052e:	3720      	adds	r7, #32
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	200047ac 	.word	0x200047ac
 8010538:	200047b0 	.word	0x200047b0
 801053c:	0801f1cc 	.word	0x0801f1cc
 8010540:	0801f358 	.word	0x0801f358
 8010544:	0801f214 	.word	0x0801f214
 8010548:	0801f370 	.word	0x0801f370
 801054c:	200047b4 	.word	0x200047b4
 8010550:	0801f390 	.word	0x0801f390
 8010554:	200047b8 	.word	0x200047b8

08010558 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b088      	sub	sp, #32
 801055c:	af00      	add	r7, sp, #0
 801055e:	4603      	mov	r3, r0
 8010560:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010562:	88fb      	ldrh	r3, [r7, #6]
 8010564:	2b00      	cmp	r3, #0
 8010566:	d101      	bne.n	801056c <mem_malloc+0x14>
    return NULL;
 8010568:	2300      	movs	r3, #0
 801056a:	e0e2      	b.n	8010732 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801056c:	88fb      	ldrh	r3, [r7, #6]
 801056e:	3303      	adds	r3, #3
 8010570:	b29b      	uxth	r3, r3
 8010572:	f023 0303 	bic.w	r3, r3, #3
 8010576:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010578:	8bbb      	ldrh	r3, [r7, #28]
 801057a:	2b0b      	cmp	r3, #11
 801057c:	d801      	bhi.n	8010582 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801057e:	230c      	movs	r3, #12
 8010580:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010582:	8bbb      	ldrh	r3, [r7, #28]
 8010584:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010588:	d803      	bhi.n	8010592 <mem_malloc+0x3a>
 801058a:	8bba      	ldrh	r2, [r7, #28]
 801058c:	88fb      	ldrh	r3, [r7, #6]
 801058e:	429a      	cmp	r2, r3
 8010590:	d201      	bcs.n	8010596 <mem_malloc+0x3e>
    return NULL;
 8010592:	2300      	movs	r3, #0
 8010594:	e0cd      	b.n	8010732 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010596:	4869      	ldr	r0, [pc, #420]	; (801073c <mem_malloc+0x1e4>)
 8010598:	f00a fece 	bl	801b338 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801059c:	4b68      	ldr	r3, [pc, #416]	; (8010740 <mem_malloc+0x1e8>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7ff fcfd 	bl	800ffa0 <mem_to_ptr>
 80105a6:	4603      	mov	r3, r0
 80105a8:	83fb      	strh	r3, [r7, #30]
 80105aa:	e0b7      	b.n	801071c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80105ac:	8bfb      	ldrh	r3, [r7, #30]
 80105ae:	4618      	mov	r0, r3
 80105b0:	f7ff fce4 	bl	800ff7c <ptr_to_mem>
 80105b4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	791b      	ldrb	r3, [r3, #4]
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	f040 80a7 	bne.w	801070e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80105c0:	697b      	ldr	r3, [r7, #20]
 80105c2:	881b      	ldrh	r3, [r3, #0]
 80105c4:	461a      	mov	r2, r3
 80105c6:	8bfb      	ldrh	r3, [r7, #30]
 80105c8:	1ad3      	subs	r3, r2, r3
 80105ca:	f1a3 0208 	sub.w	r2, r3, #8
 80105ce:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80105d0:	429a      	cmp	r2, r3
 80105d2:	f0c0 809c 	bcc.w	801070e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80105d6:	697b      	ldr	r3, [r7, #20]
 80105d8:	881b      	ldrh	r3, [r3, #0]
 80105da:	461a      	mov	r2, r3
 80105dc:	8bfb      	ldrh	r3, [r7, #30]
 80105de:	1ad3      	subs	r3, r2, r3
 80105e0:	f1a3 0208 	sub.w	r2, r3, #8
 80105e4:	8bbb      	ldrh	r3, [r7, #28]
 80105e6:	3314      	adds	r3, #20
 80105e8:	429a      	cmp	r2, r3
 80105ea:	d333      	bcc.n	8010654 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80105ec:	8bfa      	ldrh	r2, [r7, #30]
 80105ee:	8bbb      	ldrh	r3, [r7, #28]
 80105f0:	4413      	add	r3, r2
 80105f2:	b29b      	uxth	r3, r3
 80105f4:	3308      	adds	r3, #8
 80105f6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80105f8:	8a7b      	ldrh	r3, [r7, #18]
 80105fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80105fe:	d106      	bne.n	801060e <mem_malloc+0xb6>
 8010600:	4b50      	ldr	r3, [pc, #320]	; (8010744 <mem_malloc+0x1ec>)
 8010602:	f240 3287 	movw	r2, #903	; 0x387
 8010606:	4950      	ldr	r1, [pc, #320]	; (8010748 <mem_malloc+0x1f0>)
 8010608:	4850      	ldr	r0, [pc, #320]	; (801074c <mem_malloc+0x1f4>)
 801060a:	f00b fb7f 	bl	801bd0c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801060e:	8a7b      	ldrh	r3, [r7, #18]
 8010610:	4618      	mov	r0, r3
 8010612:	f7ff fcb3 	bl	800ff7c <ptr_to_mem>
 8010616:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010618:	68fb      	ldr	r3, [r7, #12]
 801061a:	2200      	movs	r2, #0
 801061c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801061e:	697b      	ldr	r3, [r7, #20]
 8010620:	881a      	ldrh	r2, [r3, #0]
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	8bfa      	ldrh	r2, [r7, #30]
 801062a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	8a7a      	ldrh	r2, [r7, #18]
 8010630:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2201      	movs	r2, #1
 8010636:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	881b      	ldrh	r3, [r3, #0]
 801063c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010640:	d00b      	beq.n	801065a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	881b      	ldrh	r3, [r3, #0]
 8010646:	4618      	mov	r0, r3
 8010648:	f7ff fc98 	bl	800ff7c <ptr_to_mem>
 801064c:	4602      	mov	r2, r0
 801064e:	8a7b      	ldrh	r3, [r7, #18]
 8010650:	8053      	strh	r3, [r2, #2]
 8010652:	e002      	b.n	801065a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010654:	697b      	ldr	r3, [r7, #20]
 8010656:	2201      	movs	r2, #1
 8010658:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801065a:	4b39      	ldr	r3, [pc, #228]	; (8010740 <mem_malloc+0x1e8>)
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	429a      	cmp	r2, r3
 8010662:	d127      	bne.n	80106b4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010664:	4b36      	ldr	r3, [pc, #216]	; (8010740 <mem_malloc+0x1e8>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801066a:	e005      	b.n	8010678 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801066c:	69bb      	ldr	r3, [r7, #24]
 801066e:	881b      	ldrh	r3, [r3, #0]
 8010670:	4618      	mov	r0, r3
 8010672:	f7ff fc83 	bl	800ff7c <ptr_to_mem>
 8010676:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010678:	69bb      	ldr	r3, [r7, #24]
 801067a:	791b      	ldrb	r3, [r3, #4]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d004      	beq.n	801068a <mem_malloc+0x132>
 8010680:	4b33      	ldr	r3, [pc, #204]	; (8010750 <mem_malloc+0x1f8>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	69ba      	ldr	r2, [r7, #24]
 8010686:	429a      	cmp	r2, r3
 8010688:	d1f0      	bne.n	801066c <mem_malloc+0x114>
          }
          lfree = cur;
 801068a:	4a2d      	ldr	r2, [pc, #180]	; (8010740 <mem_malloc+0x1e8>)
 801068c:	69bb      	ldr	r3, [r7, #24]
 801068e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010690:	4b2b      	ldr	r3, [pc, #172]	; (8010740 <mem_malloc+0x1e8>)
 8010692:	681a      	ldr	r2, [r3, #0]
 8010694:	4b2e      	ldr	r3, [pc, #184]	; (8010750 <mem_malloc+0x1f8>)
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	429a      	cmp	r2, r3
 801069a:	d00b      	beq.n	80106b4 <mem_malloc+0x15c>
 801069c:	4b28      	ldr	r3, [pc, #160]	; (8010740 <mem_malloc+0x1e8>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	791b      	ldrb	r3, [r3, #4]
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d006      	beq.n	80106b4 <mem_malloc+0x15c>
 80106a6:	4b27      	ldr	r3, [pc, #156]	; (8010744 <mem_malloc+0x1ec>)
 80106a8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80106ac:	4929      	ldr	r1, [pc, #164]	; (8010754 <mem_malloc+0x1fc>)
 80106ae:	4827      	ldr	r0, [pc, #156]	; (801074c <mem_malloc+0x1f4>)
 80106b0:	f00b fb2c 	bl	801bd0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80106b4:	4821      	ldr	r0, [pc, #132]	; (801073c <mem_malloc+0x1e4>)
 80106b6:	f00a fe4e 	bl	801b356 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80106ba:	8bba      	ldrh	r2, [r7, #28]
 80106bc:	697b      	ldr	r3, [r7, #20]
 80106be:	4413      	add	r3, r2
 80106c0:	3308      	adds	r3, #8
 80106c2:	4a23      	ldr	r2, [pc, #140]	; (8010750 <mem_malloc+0x1f8>)
 80106c4:	6812      	ldr	r2, [r2, #0]
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d906      	bls.n	80106d8 <mem_malloc+0x180>
 80106ca:	4b1e      	ldr	r3, [pc, #120]	; (8010744 <mem_malloc+0x1ec>)
 80106cc:	f240 32b9 	movw	r2, #953	; 0x3b9
 80106d0:	4921      	ldr	r1, [pc, #132]	; (8010758 <mem_malloc+0x200>)
 80106d2:	481e      	ldr	r0, [pc, #120]	; (801074c <mem_malloc+0x1f4>)
 80106d4:	f00b fb1a 	bl	801bd0c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	f003 0303 	and.w	r3, r3, #3
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d006      	beq.n	80106f0 <mem_malloc+0x198>
 80106e2:	4b18      	ldr	r3, [pc, #96]	; (8010744 <mem_malloc+0x1ec>)
 80106e4:	f240 32bb 	movw	r2, #955	; 0x3bb
 80106e8:	491c      	ldr	r1, [pc, #112]	; (801075c <mem_malloc+0x204>)
 80106ea:	4818      	ldr	r0, [pc, #96]	; (801074c <mem_malloc+0x1f4>)
 80106ec:	f00b fb0e 	bl	801bd0c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f003 0303 	and.w	r3, r3, #3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d006      	beq.n	8010708 <mem_malloc+0x1b0>
 80106fa:	4b12      	ldr	r3, [pc, #72]	; (8010744 <mem_malloc+0x1ec>)
 80106fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010700:	4917      	ldr	r1, [pc, #92]	; (8010760 <mem_malloc+0x208>)
 8010702:	4812      	ldr	r0, [pc, #72]	; (801074c <mem_malloc+0x1f4>)
 8010704:	f00b fb02 	bl	801bd0c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	3308      	adds	r3, #8
 801070c:	e011      	b.n	8010732 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801070e:	8bfb      	ldrh	r3, [r7, #30]
 8010710:	4618      	mov	r0, r3
 8010712:	f7ff fc33 	bl	800ff7c <ptr_to_mem>
 8010716:	4603      	mov	r3, r0
 8010718:	881b      	ldrh	r3, [r3, #0]
 801071a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801071c:	8bfa      	ldrh	r2, [r7, #30]
 801071e:	8bbb      	ldrh	r3, [r7, #28]
 8010720:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010724:	429a      	cmp	r2, r3
 8010726:	f4ff af41 	bcc.w	80105ac <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801072a:	4804      	ldr	r0, [pc, #16]	; (801073c <mem_malloc+0x1e4>)
 801072c:	f00a fe13 	bl	801b356 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3720      	adds	r7, #32
 8010736:	46bd      	mov	sp, r7
 8010738:	bd80      	pop	{r7, pc}
 801073a:	bf00      	nop
 801073c:	200047b4 	.word	0x200047b4
 8010740:	200047b8 	.word	0x200047b8
 8010744:	0801f1cc 	.word	0x0801f1cc
 8010748:	0801f390 	.word	0x0801f390
 801074c:	0801f214 	.word	0x0801f214
 8010750:	200047b0 	.word	0x200047b0
 8010754:	0801f3a4 	.word	0x0801f3a4
 8010758:	0801f3c0 	.word	0x0801f3c0
 801075c:	0801f3f0 	.word	0x0801f3f0
 8010760:	0801f420 	.word	0x0801f420

08010764 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010764:	b480      	push	{r7}
 8010766:	b085      	sub	sp, #20
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	689b      	ldr	r3, [r3, #8]
 8010770:	2200      	movs	r2, #0
 8010772:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	685b      	ldr	r3, [r3, #4]
 8010778:	3303      	adds	r3, #3
 801077a:	f023 0303 	bic.w	r3, r3, #3
 801077e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010780:	2300      	movs	r3, #0
 8010782:	60fb      	str	r3, [r7, #12]
 8010784:	e011      	b.n	80107aa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	689b      	ldr	r3, [r3, #8]
 801078a:	681a      	ldr	r2, [r3, #0]
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	68ba      	ldr	r2, [r7, #8]
 8010796:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	461a      	mov	r2, r3
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	4413      	add	r3, r2
 80107a2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	3301      	adds	r3, #1
 80107a8:	60fb      	str	r3, [r7, #12]
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	885b      	ldrh	r3, [r3, #2]
 80107ae:	461a      	mov	r2, r3
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	4293      	cmp	r3, r2
 80107b4:	dbe7      	blt.n	8010786 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80107b6:	bf00      	nop
 80107b8:	bf00      	nop
 80107ba:	3714      	adds	r7, #20
 80107bc:	46bd      	mov	sp, r7
 80107be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c2:	4770      	bx	lr

080107c4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80107c4:	b580      	push	{r7, lr}
 80107c6:	b082      	sub	sp, #8
 80107c8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80107ca:	2300      	movs	r3, #0
 80107cc:	80fb      	strh	r3, [r7, #6]
 80107ce:	e009      	b.n	80107e4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80107d0:	88fb      	ldrh	r3, [r7, #6]
 80107d2:	4a08      	ldr	r2, [pc, #32]	; (80107f4 <memp_init+0x30>)
 80107d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107d8:	4618      	mov	r0, r3
 80107da:	f7ff ffc3 	bl	8010764 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80107de:	88fb      	ldrh	r3, [r7, #6]
 80107e0:	3301      	adds	r3, #1
 80107e2:	80fb      	strh	r3, [r7, #6]
 80107e4:	88fb      	ldrh	r3, [r7, #6]
 80107e6:	2b0c      	cmp	r3, #12
 80107e8:	d9f2      	bls.n	80107d0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80107ea:	bf00      	nop
 80107ec:	bf00      	nop
 80107ee:	3708      	adds	r7, #8
 80107f0:	46bd      	mov	sp, r7
 80107f2:	bd80      	pop	{r7, pc}
 80107f4:	08021ce8 	.word	0x08021ce8

080107f8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80107f8:	b580      	push	{r7, lr}
 80107fa:	b084      	sub	sp, #16
 80107fc:	af00      	add	r7, sp, #0
 80107fe:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010800:	f00a fddc 	bl	801b3bc <sys_arch_protect>
 8010804:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	689b      	ldr	r3, [r3, #8]
 801080a:	681b      	ldr	r3, [r3, #0]
 801080c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d015      	beq.n	8010840 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	689b      	ldr	r3, [r3, #8]
 8010818:	68ba      	ldr	r2, [r7, #8]
 801081a:	6812      	ldr	r2, [r2, #0]
 801081c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801081e:	68bb      	ldr	r3, [r7, #8]
 8010820:	f003 0303 	and.w	r3, r3, #3
 8010824:	2b00      	cmp	r3, #0
 8010826:	d006      	beq.n	8010836 <do_memp_malloc_pool+0x3e>
 8010828:	4b09      	ldr	r3, [pc, #36]	; (8010850 <do_memp_malloc_pool+0x58>)
 801082a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801082e:	4909      	ldr	r1, [pc, #36]	; (8010854 <do_memp_malloc_pool+0x5c>)
 8010830:	4809      	ldr	r0, [pc, #36]	; (8010858 <do_memp_malloc_pool+0x60>)
 8010832:	f00b fa6b 	bl	801bd0c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f00a fdce 	bl	801b3d8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801083c:	68bb      	ldr	r3, [r7, #8]
 801083e:	e003      	b.n	8010848 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f00a fdc9 	bl	801b3d8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010846:	2300      	movs	r3, #0
}
 8010848:	4618      	mov	r0, r3
 801084a:	3710      	adds	r7, #16
 801084c:	46bd      	mov	sp, r7
 801084e:	bd80      	pop	{r7, pc}
 8010850:	0801f444 	.word	0x0801f444
 8010854:	0801f474 	.word	0x0801f474
 8010858:	0801f498 	.word	0x0801f498

0801085c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b084      	sub	sp, #16
 8010860:	af00      	add	r7, sp, #0
 8010862:	4603      	mov	r3, r0
 8010864:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	2b0c      	cmp	r3, #12
 801086a:	d908      	bls.n	801087e <memp_malloc+0x22>
 801086c:	4b0a      	ldr	r3, [pc, #40]	; (8010898 <memp_malloc+0x3c>)
 801086e:	f240 1257 	movw	r2, #343	; 0x157
 8010872:	490a      	ldr	r1, [pc, #40]	; (801089c <memp_malloc+0x40>)
 8010874:	480a      	ldr	r0, [pc, #40]	; (80108a0 <memp_malloc+0x44>)
 8010876:	f00b fa49 	bl	801bd0c <iprintf>
 801087a:	2300      	movs	r3, #0
 801087c:	e008      	b.n	8010890 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801087e:	79fb      	ldrb	r3, [r7, #7]
 8010880:	4a08      	ldr	r2, [pc, #32]	; (80108a4 <memp_malloc+0x48>)
 8010882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010886:	4618      	mov	r0, r3
 8010888:	f7ff ffb6 	bl	80107f8 <do_memp_malloc_pool>
 801088c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801088e:	68fb      	ldr	r3, [r7, #12]
}
 8010890:	4618      	mov	r0, r3
 8010892:	3710      	adds	r7, #16
 8010894:	46bd      	mov	sp, r7
 8010896:	bd80      	pop	{r7, pc}
 8010898:	0801f444 	.word	0x0801f444
 801089c:	0801f4d4 	.word	0x0801f4d4
 80108a0:	0801f498 	.word	0x0801f498
 80108a4:	08021ce8 	.word	0x08021ce8

080108a8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80108a8:	b580      	push	{r7, lr}
 80108aa:	b084      	sub	sp, #16
 80108ac:	af00      	add	r7, sp, #0
 80108ae:	6078      	str	r0, [r7, #4]
 80108b0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80108b2:	683b      	ldr	r3, [r7, #0]
 80108b4:	f003 0303 	and.w	r3, r3, #3
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d006      	beq.n	80108ca <do_memp_free_pool+0x22>
 80108bc:	4b0d      	ldr	r3, [pc, #52]	; (80108f4 <do_memp_free_pool+0x4c>)
 80108be:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80108c2:	490d      	ldr	r1, [pc, #52]	; (80108f8 <do_memp_free_pool+0x50>)
 80108c4:	480d      	ldr	r0, [pc, #52]	; (80108fc <do_memp_free_pool+0x54>)
 80108c6:	f00b fa21 	bl	801bd0c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80108ca:	683b      	ldr	r3, [r7, #0]
 80108cc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80108ce:	f00a fd75 	bl	801b3bc <sys_arch_protect>
 80108d2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	681a      	ldr	r2, [r3, #0]
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	689b      	ldr	r3, [r3, #8]
 80108e2:	68fa      	ldr	r2, [r7, #12]
 80108e4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80108e6:	68b8      	ldr	r0, [r7, #8]
 80108e8:	f00a fd76 	bl	801b3d8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80108ec:	bf00      	nop
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}
 80108f4:	0801f444 	.word	0x0801f444
 80108f8:	0801f4f4 	.word	0x0801f4f4
 80108fc:	0801f498 	.word	0x0801f498

08010900 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010900:	b580      	push	{r7, lr}
 8010902:	b082      	sub	sp, #8
 8010904:	af00      	add	r7, sp, #0
 8010906:	4603      	mov	r3, r0
 8010908:	6039      	str	r1, [r7, #0]
 801090a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801090c:	79fb      	ldrb	r3, [r7, #7]
 801090e:	2b0c      	cmp	r3, #12
 8010910:	d907      	bls.n	8010922 <memp_free+0x22>
 8010912:	4b0c      	ldr	r3, [pc, #48]	; (8010944 <memp_free+0x44>)
 8010914:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8010918:	490b      	ldr	r1, [pc, #44]	; (8010948 <memp_free+0x48>)
 801091a:	480c      	ldr	r0, [pc, #48]	; (801094c <memp_free+0x4c>)
 801091c:	f00b f9f6 	bl	801bd0c <iprintf>
 8010920:	e00c      	b.n	801093c <memp_free+0x3c>

  if (mem == NULL) {
 8010922:	683b      	ldr	r3, [r7, #0]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d008      	beq.n	801093a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010928:	79fb      	ldrb	r3, [r7, #7]
 801092a:	4a09      	ldr	r2, [pc, #36]	; (8010950 <memp_free+0x50>)
 801092c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010930:	6839      	ldr	r1, [r7, #0]
 8010932:	4618      	mov	r0, r3
 8010934:	f7ff ffb8 	bl	80108a8 <do_memp_free_pool>
 8010938:	e000      	b.n	801093c <memp_free+0x3c>
    return;
 801093a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801093c:	3708      	adds	r7, #8
 801093e:	46bd      	mov	sp, r7
 8010940:	bd80      	pop	{r7, pc}
 8010942:	bf00      	nop
 8010944:	0801f444 	.word	0x0801f444
 8010948:	0801f514 	.word	0x0801f514
 801094c:	0801f498 	.word	0x0801f498
 8010950:	08021ce8 	.word	0x08021ce8

08010954 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010954:	b480      	push	{r7}
 8010956:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010958:	bf00      	nop
 801095a:	46bd      	mov	sp, r7
 801095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010960:	4770      	bx	lr
	...

08010964 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
 8010970:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d108      	bne.n	801098a <netif_add+0x26>
 8010978:	4b57      	ldr	r3, [pc, #348]	; (8010ad8 <netif_add+0x174>)
 801097a:	f240 1227 	movw	r2, #295	; 0x127
 801097e:	4957      	ldr	r1, [pc, #348]	; (8010adc <netif_add+0x178>)
 8010980:	4857      	ldr	r0, [pc, #348]	; (8010ae0 <netif_add+0x17c>)
 8010982:	f00b f9c3 	bl	801bd0c <iprintf>
 8010986:	2300      	movs	r3, #0
 8010988:	e0a2      	b.n	8010ad0 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	2b00      	cmp	r3, #0
 801098e:	d108      	bne.n	80109a2 <netif_add+0x3e>
 8010990:	4b51      	ldr	r3, [pc, #324]	; (8010ad8 <netif_add+0x174>)
 8010992:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010996:	4953      	ldr	r1, [pc, #332]	; (8010ae4 <netif_add+0x180>)
 8010998:	4851      	ldr	r0, [pc, #324]	; (8010ae0 <netif_add+0x17c>)
 801099a:	f00b f9b7 	bl	801bd0c <iprintf>
 801099e:	2300      	movs	r3, #0
 80109a0:	e096      	b.n	8010ad0 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d101      	bne.n	80109ac <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80109a8:	4b4f      	ldr	r3, [pc, #316]	; (8010ae8 <netif_add+0x184>)
 80109aa:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d101      	bne.n	80109b6 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80109b2:	4b4d      	ldr	r3, [pc, #308]	; (8010ae8 <netif_add+0x184>)
 80109b4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80109b6:	683b      	ldr	r3, [r7, #0]
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d101      	bne.n	80109c0 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80109bc:	4b4a      	ldr	r3, [pc, #296]	; (8010ae8 <netif_add+0x184>)
 80109be:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	2200      	movs	r2, #0
 80109c4:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	2200      	movs	r2, #0
 80109ca:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	2200      	movs	r2, #0
 80109d0:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	4a45      	ldr	r2, [pc, #276]	; (8010aec <netif_add+0x188>)
 80109d6:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2200      	movs	r2, #0
 80109dc:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	2200      	movs	r2, #0
 80109e2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	2200      	movs	r2, #0
 80109ea:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	6a3a      	ldr	r2, [r7, #32]
 80109f0:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80109f2:	4b3f      	ldr	r3, [pc, #252]	; (8010af0 <netif_add+0x18c>)
 80109f4:	781a      	ldrb	r2, [r3, #0]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a00:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010a02:	683b      	ldr	r3, [r7, #0]
 8010a04:	687a      	ldr	r2, [r7, #4]
 8010a06:	68b9      	ldr	r1, [r7, #8]
 8010a08:	68f8      	ldr	r0, [r7, #12]
 8010a0a:	f000 f913 	bl	8010c34 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a10:	68f8      	ldr	r0, [r7, #12]
 8010a12:	4798      	blx	r3
 8010a14:	4603      	mov	r3, r0
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d001      	beq.n	8010a1e <netif_add+0xba>
    return NULL;
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	e058      	b.n	8010ad0 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a24:	2bff      	cmp	r3, #255	; 0xff
 8010a26:	d103      	bne.n	8010a30 <netif_add+0xcc>
        netif->num = 0;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8010a30:	2300      	movs	r3, #0
 8010a32:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a34:	4b2f      	ldr	r3, [pc, #188]	; (8010af4 <netif_add+0x190>)
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	617b      	str	r3, [r7, #20]
 8010a3a:	e02b      	b.n	8010a94 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010a3c:	697a      	ldr	r2, [r7, #20]
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d106      	bne.n	8010a52 <netif_add+0xee>
 8010a44:	4b24      	ldr	r3, [pc, #144]	; (8010ad8 <netif_add+0x174>)
 8010a46:	f240 128b 	movw	r2, #395	; 0x18b
 8010a4a:	492b      	ldr	r1, [pc, #172]	; (8010af8 <netif_add+0x194>)
 8010a4c:	4824      	ldr	r0, [pc, #144]	; (8010ae0 <netif_add+0x17c>)
 8010a4e:	f00b f95d 	bl	801bd0c <iprintf>
        num_netifs++;
 8010a52:	693b      	ldr	r3, [r7, #16]
 8010a54:	3301      	adds	r3, #1
 8010a56:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2bff      	cmp	r3, #255	; 0xff
 8010a5c:	dd06      	ble.n	8010a6c <netif_add+0x108>
 8010a5e:	4b1e      	ldr	r3, [pc, #120]	; (8010ad8 <netif_add+0x174>)
 8010a60:	f240 128d 	movw	r2, #397	; 0x18d
 8010a64:	4925      	ldr	r1, [pc, #148]	; (8010afc <netif_add+0x198>)
 8010a66:	481e      	ldr	r0, [pc, #120]	; (8010ae0 <netif_add+0x17c>)
 8010a68:	f00b f950 	bl	801bd0c <iprintf>
        if (netif2->num == netif->num) {
 8010a6c:	697b      	ldr	r3, [r7, #20]
 8010a6e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a78:	429a      	cmp	r2, r3
 8010a7a:	d108      	bne.n	8010a8e <netif_add+0x12a>
          netif->num++;
 8010a7c:	68fb      	ldr	r3, [r7, #12]
 8010a7e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a82:	3301      	adds	r3, #1
 8010a84:	b2da      	uxtb	r2, r3
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010a8c:	e005      	b.n	8010a9a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	617b      	str	r3, [r7, #20]
 8010a94:	697b      	ldr	r3, [r7, #20]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d1d0      	bne.n	8010a3c <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010a9a:	697b      	ldr	r3, [r7, #20]
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d1be      	bne.n	8010a1e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010aa6:	2bfe      	cmp	r3, #254	; 0xfe
 8010aa8:	d103      	bne.n	8010ab2 <netif_add+0x14e>
    netif_num = 0;
 8010aaa:	4b11      	ldr	r3, [pc, #68]	; (8010af0 <netif_add+0x18c>)
 8010aac:	2200      	movs	r2, #0
 8010aae:	701a      	strb	r2, [r3, #0]
 8010ab0:	e006      	b.n	8010ac0 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ab8:	3301      	adds	r3, #1
 8010aba:	b2da      	uxtb	r2, r3
 8010abc:	4b0c      	ldr	r3, [pc, #48]	; (8010af0 <netif_add+0x18c>)
 8010abe:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010ac0:	4b0c      	ldr	r3, [pc, #48]	; (8010af4 <netif_add+0x190>)
 8010ac2:	681a      	ldr	r2, [r3, #0]
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010ac8:	4a0a      	ldr	r2, [pc, #40]	; (8010af4 <netif_add+0x190>)
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010ace:	68fb      	ldr	r3, [r7, #12]
}
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	3718      	adds	r7, #24
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd80      	pop	{r7, pc}
 8010ad8:	0801f530 	.word	0x0801f530
 8010adc:	0801f5c4 	.word	0x0801f5c4
 8010ae0:	0801f580 	.word	0x0801f580
 8010ae4:	0801f5e0 	.word	0x0801f5e0
 8010ae8:	08021d5c 	.word	0x08021d5c
 8010aec:	08010f0f 	.word	0x08010f0f
 8010af0:	200047f0 	.word	0x200047f0
 8010af4:	2000d7ac 	.word	0x2000d7ac
 8010af8:	0801f604 	.word	0x0801f604
 8010afc:	0801f618 	.word	0x0801f618

08010b00 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b082      	sub	sp, #8
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010b0a:	6839      	ldr	r1, [r7, #0]
 8010b0c:	6878      	ldr	r0, [r7, #4]
 8010b0e:	f002 fdc7 	bl	80136a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010b12:	6839      	ldr	r1, [r7, #0]
 8010b14:	6878      	ldr	r0, [r7, #4]
 8010b16:	f007 fe5f 	bl	80187d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010b1a:	bf00      	nop
 8010b1c:	3708      	adds	r7, #8
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
	...

08010b24 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b086      	sub	sp, #24
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	60f8      	str	r0, [r7, #12]
 8010b2c:	60b9      	str	r1, [r7, #8]
 8010b2e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010b30:	68bb      	ldr	r3, [r7, #8]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <netif_do_set_ipaddr+0x20>
 8010b36:	4b1d      	ldr	r3, [pc, #116]	; (8010bac <netif_do_set_ipaddr+0x88>)
 8010b38:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010b3c:	491c      	ldr	r1, [pc, #112]	; (8010bb0 <netif_do_set_ipaddr+0x8c>)
 8010b3e:	481d      	ldr	r0, [pc, #116]	; (8010bb4 <netif_do_set_ipaddr+0x90>)
 8010b40:	f00b f8e4 	bl	801bd0c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d106      	bne.n	8010b58 <netif_do_set_ipaddr+0x34>
 8010b4a:	4b18      	ldr	r3, [pc, #96]	; (8010bac <netif_do_set_ipaddr+0x88>)
 8010b4c:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010b50:	4917      	ldr	r1, [pc, #92]	; (8010bb0 <netif_do_set_ipaddr+0x8c>)
 8010b52:	4818      	ldr	r0, [pc, #96]	; (8010bb4 <netif_do_set_ipaddr+0x90>)
 8010b54:	f00b f8da 	bl	801bd0c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	681a      	ldr	r2, [r3, #0]
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	3304      	adds	r3, #4
 8010b60:	681b      	ldr	r3, [r3, #0]
 8010b62:	429a      	cmp	r2, r3
 8010b64:	d01c      	beq.n	8010ba0 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	3304      	adds	r3, #4
 8010b70:	681a      	ldr	r2, [r3, #0]
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010b76:	f107 0314 	add.w	r3, r7, #20
 8010b7a:	4619      	mov	r1, r3
 8010b7c:	6878      	ldr	r0, [r7, #4]
 8010b7e:	f7ff ffbf 	bl	8010b00 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010b82:	68bb      	ldr	r3, [r7, #8]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	d002      	beq.n	8010b8e <netif_do_set_ipaddr+0x6a>
 8010b88:	68bb      	ldr	r3, [r7, #8]
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	e000      	b.n	8010b90 <netif_do_set_ipaddr+0x6c>
 8010b8e:	2300      	movs	r3, #0
 8010b90:	68fa      	ldr	r2, [r7, #12]
 8010b92:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010b94:	2101      	movs	r1, #1
 8010b96:	68f8      	ldr	r0, [r7, #12]
 8010b98:	f000 f8d2 	bl	8010d40 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e000      	b.n	8010ba2 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3718      	adds	r7, #24
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	0801f530 	.word	0x0801f530
 8010bb0:	0801f648 	.word	0x0801f648
 8010bb4:	0801f580 	.word	0x0801f580

08010bb8 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	b085      	sub	sp, #20
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	60f8      	str	r0, [r7, #12]
 8010bc0:	60b9      	str	r1, [r7, #8]
 8010bc2:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010bc4:	68bb      	ldr	r3, [r7, #8]
 8010bc6:	681a      	ldr	r2, [r3, #0]
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	3308      	adds	r3, #8
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	429a      	cmp	r2, r3
 8010bd0:	d00a      	beq.n	8010be8 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <netif_do_set_netmask+0x26>
 8010bd8:	68bb      	ldr	r3, [r7, #8]
 8010bda:	681b      	ldr	r3, [r3, #0]
 8010bdc:	e000      	b.n	8010be0 <netif_do_set_netmask+0x28>
 8010bde:	2300      	movs	r3, #0
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010be4:	2301      	movs	r3, #1
 8010be6:	e000      	b.n	8010bea <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010be8:	2300      	movs	r3, #0
}
 8010bea:	4618      	mov	r0, r3
 8010bec:	3714      	adds	r7, #20
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf4:	4770      	bx	lr

08010bf6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010bf6:	b480      	push	{r7}
 8010bf8:	b085      	sub	sp, #20
 8010bfa:	af00      	add	r7, sp, #0
 8010bfc:	60f8      	str	r0, [r7, #12]
 8010bfe:	60b9      	str	r1, [r7, #8]
 8010c00:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010c02:	68bb      	ldr	r3, [r7, #8]
 8010c04:	681a      	ldr	r2, [r3, #0]
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	330c      	adds	r3, #12
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d00a      	beq.n	8010c26 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d002      	beq.n	8010c1c <netif_do_set_gw+0x26>
 8010c16:	68bb      	ldr	r3, [r7, #8]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	e000      	b.n	8010c1e <netif_do_set_gw+0x28>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	68fa      	ldr	r2, [r7, #12]
 8010c20:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010c22:	2301      	movs	r3, #1
 8010c24:	e000      	b.n	8010c28 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010c26:	2300      	movs	r3, #0
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b088      	sub	sp, #32
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	60f8      	str	r0, [r7, #12]
 8010c3c:	60b9      	str	r1, [r7, #8]
 8010c3e:	607a      	str	r2, [r7, #4]
 8010c40:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010c42:	2300      	movs	r3, #0
 8010c44:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010c46:	2300      	movs	r3, #0
 8010c48:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010c4a:	68bb      	ldr	r3, [r7, #8]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d101      	bne.n	8010c54 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010c50:	4b1c      	ldr	r3, [pc, #112]	; (8010cc4 <netif_set_addr+0x90>)
 8010c52:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010c5a:	4b1a      	ldr	r3, [pc, #104]	; (8010cc4 <netif_set_addr+0x90>)
 8010c5c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d101      	bne.n	8010c68 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010c64:	4b17      	ldr	r3, [pc, #92]	; (8010cc4 <netif_set_addr+0x90>)
 8010c66:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d003      	beq.n	8010c76 <netif_set_addr+0x42>
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d101      	bne.n	8010c7a <netif_set_addr+0x46>
 8010c76:	2301      	movs	r3, #1
 8010c78:	e000      	b.n	8010c7c <netif_set_addr+0x48>
 8010c7a:	2300      	movs	r3, #0
 8010c7c:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d006      	beq.n	8010c92 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c84:	f107 0310 	add.w	r3, r7, #16
 8010c88:	461a      	mov	r2, r3
 8010c8a:	68b9      	ldr	r1, [r7, #8]
 8010c8c:	68f8      	ldr	r0, [r7, #12]
 8010c8e:	f7ff ff49 	bl	8010b24 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010c92:	69fa      	ldr	r2, [r7, #28]
 8010c94:	6879      	ldr	r1, [r7, #4]
 8010c96:	68f8      	ldr	r0, [r7, #12]
 8010c98:	f7ff ff8e 	bl	8010bb8 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010c9c:	69ba      	ldr	r2, [r7, #24]
 8010c9e:	6839      	ldr	r1, [r7, #0]
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f7ff ffa8 	bl	8010bf6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010ca6:	697b      	ldr	r3, [r7, #20]
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d106      	bne.n	8010cba <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010cac:	f107 0310 	add.w	r3, r7, #16
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	68b9      	ldr	r1, [r7, #8]
 8010cb4:	68f8      	ldr	r0, [r7, #12]
 8010cb6:	f7ff ff35 	bl	8010b24 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010cba:	bf00      	nop
 8010cbc:	3720      	adds	r7, #32
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	08021d5c 	.word	0x08021d5c

08010cc8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b083      	sub	sp, #12
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010cd0:	4a04      	ldr	r2, [pc, #16]	; (8010ce4 <netif_set_default+0x1c>)
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010cd6:	bf00      	nop
 8010cd8:	370c      	adds	r7, #12
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce0:	4770      	bx	lr
 8010ce2:	bf00      	nop
 8010ce4:	2000d7b0 	.word	0x2000d7b0

08010ce8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b082      	sub	sp, #8
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d107      	bne.n	8010d06 <netif_set_up+0x1e>
 8010cf6:	4b0f      	ldr	r3, [pc, #60]	; (8010d34 <netif_set_up+0x4c>)
 8010cf8:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010cfc:	490e      	ldr	r1, [pc, #56]	; (8010d38 <netif_set_up+0x50>)
 8010cfe:	480f      	ldr	r0, [pc, #60]	; (8010d3c <netif_set_up+0x54>)
 8010d00:	f00b f804 	bl	801bd0c <iprintf>
 8010d04:	e013      	b.n	8010d2e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d0c:	f003 0301 	and.w	r3, r3, #1
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d10c      	bne.n	8010d2e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d1a:	f043 0301 	orr.w	r3, r3, #1
 8010d1e:	b2da      	uxtb	r2, r3
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d26:	2103      	movs	r1, #3
 8010d28:	6878      	ldr	r0, [r7, #4]
 8010d2a:	f000 f809 	bl	8010d40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010d2e:	3708      	adds	r7, #8
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	0801f530 	.word	0x0801f530
 8010d38:	0801f6b8 	.word	0x0801f6b8
 8010d3c:	0801f580 	.word	0x0801f580

08010d40 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b082      	sub	sp, #8
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	460b      	mov	r3, r1
 8010d4a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d106      	bne.n	8010d60 <netif_issue_reports+0x20>
 8010d52:	4b18      	ldr	r3, [pc, #96]	; (8010db4 <netif_issue_reports+0x74>)
 8010d54:	f240 326d 	movw	r2, #877	; 0x36d
 8010d58:	4917      	ldr	r1, [pc, #92]	; (8010db8 <netif_issue_reports+0x78>)
 8010d5a:	4818      	ldr	r0, [pc, #96]	; (8010dbc <netif_issue_reports+0x7c>)
 8010d5c:	f00a ffd6 	bl	801bd0c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d66:	f003 0304 	and.w	r3, r3, #4
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d01e      	beq.n	8010dac <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d74:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d017      	beq.n	8010dac <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d7c:	78fb      	ldrb	r3, [r7, #3]
 8010d7e:	f003 0301 	and.w	r3, r3, #1
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d013      	beq.n	8010dae <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3304      	adds	r3, #4
 8010d8a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d00e      	beq.n	8010dae <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d96:	f003 0308 	and.w	r3, r3, #8
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d007      	beq.n	8010dae <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	3304      	adds	r3, #4
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f008 fc81 	bl	80196ac <etharp_request>
 8010daa:	e000      	b.n	8010dae <netif_issue_reports+0x6e>
    return;
 8010dac:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010dae:	3708      	adds	r7, #8
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	0801f530 	.word	0x0801f530
 8010db8:	0801f6d4 	.word	0x0801f6d4
 8010dbc:	0801f580 	.word	0x0801f580

08010dc0 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d107      	bne.n	8010dde <netif_set_down+0x1e>
 8010dce:	4b12      	ldr	r3, [pc, #72]	; (8010e18 <netif_set_down+0x58>)
 8010dd0:	f240 329b 	movw	r2, #923	; 0x39b
 8010dd4:	4911      	ldr	r1, [pc, #68]	; (8010e1c <netif_set_down+0x5c>)
 8010dd6:	4812      	ldr	r0, [pc, #72]	; (8010e20 <netif_set_down+0x60>)
 8010dd8:	f00a ff98 	bl	801bd0c <iprintf>
 8010ddc:	e019      	b.n	8010e12 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010de4:	f003 0301 	and.w	r3, r3, #1
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d012      	beq.n	8010e12 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010df2:	f023 0301 	bic.w	r3, r3, #1
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e04:	f003 0308 	and.w	r3, r3, #8
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d002      	beq.n	8010e12 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f008 f80b 	bl	8018e28 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010e12:	3708      	adds	r7, #8
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}
 8010e18:	0801f530 	.word	0x0801f530
 8010e1c:	0801f6f8 	.word	0x0801f6f8
 8010e20:	0801f580 	.word	0x0801f580

08010e24 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d107      	bne.n	8010e42 <netif_set_link_up+0x1e>
 8010e32:	4b13      	ldr	r3, [pc, #76]	; (8010e80 <netif_set_link_up+0x5c>)
 8010e34:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010e38:	4912      	ldr	r1, [pc, #72]	; (8010e84 <netif_set_link_up+0x60>)
 8010e3a:	4813      	ldr	r0, [pc, #76]	; (8010e88 <netif_set_link_up+0x64>)
 8010e3c:	f00a ff66 	bl	801bd0c <iprintf>
 8010e40:	e01b      	b.n	8010e7a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e48:	f003 0304 	and.w	r3, r3, #4
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d114      	bne.n	8010e7a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e56:	f043 0304 	orr.w	r3, r3, #4
 8010e5a:	b2da      	uxtb	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010e62:	2103      	movs	r1, #3
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff ff6b 	bl	8010d40 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	69db      	ldr	r3, [r3, #28]
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d003      	beq.n	8010e7a <netif_set_link_up+0x56>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	69db      	ldr	r3, [r3, #28]
 8010e76:	6878      	ldr	r0, [r7, #4]
 8010e78:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e7a:	3708      	adds	r7, #8
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	bd80      	pop	{r7, pc}
 8010e80:	0801f530 	.word	0x0801f530
 8010e84:	0801f718 	.word	0x0801f718
 8010e88:	0801f580 	.word	0x0801f580

08010e8c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010e8c:	b580      	push	{r7, lr}
 8010e8e:	b082      	sub	sp, #8
 8010e90:	af00      	add	r7, sp, #0
 8010e92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d107      	bne.n	8010eaa <netif_set_link_down+0x1e>
 8010e9a:	4b11      	ldr	r3, [pc, #68]	; (8010ee0 <netif_set_link_down+0x54>)
 8010e9c:	f240 4206 	movw	r2, #1030	; 0x406
 8010ea0:	4910      	ldr	r1, [pc, #64]	; (8010ee4 <netif_set_link_down+0x58>)
 8010ea2:	4811      	ldr	r0, [pc, #68]	; (8010ee8 <netif_set_link_down+0x5c>)
 8010ea4:	f00a ff32 	bl	801bd0c <iprintf>
 8010ea8:	e017      	b.n	8010eda <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010eb0:	f003 0304 	and.w	r3, r3, #4
 8010eb4:	2b00      	cmp	r3, #0
 8010eb6:	d010      	beq.n	8010eda <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ebe:	f023 0304 	bic.w	r3, r3, #4
 8010ec2:	b2da      	uxtb	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	69db      	ldr	r3, [r3, #28]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d003      	beq.n	8010eda <netif_set_link_down+0x4e>
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	69db      	ldr	r3, [r3, #28]
 8010ed6:	6878      	ldr	r0, [r7, #4]
 8010ed8:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010eda:	3708      	adds	r7, #8
 8010edc:	46bd      	mov	sp, r7
 8010ede:	bd80      	pop	{r7, pc}
 8010ee0:	0801f530 	.word	0x0801f530
 8010ee4:	0801f73c 	.word	0x0801f73c
 8010ee8:	0801f580 	.word	0x0801f580

08010eec <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	683a      	ldr	r2, [r7, #0]
 8010f00:	61da      	str	r2, [r3, #28]
  }
}
 8010f02:	bf00      	nop
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010f0e:	b480      	push	{r7}
 8010f10:	b085      	sub	sp, #20
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	60f8      	str	r0, [r7, #12]
 8010f16:	60b9      	str	r1, [r7, #8]
 8010f18:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010f1a:	f06f 030b 	mvn.w	r3, #11
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	3714      	adds	r7, #20
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
	...

08010f2c <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010f2c:	b480      	push	{r7}
 8010f2e:	b085      	sub	sp, #20
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	4603      	mov	r3, r0
 8010f34:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010f36:	79fb      	ldrb	r3, [r7, #7]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d013      	beq.n	8010f64 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010f3c:	4b0d      	ldr	r3, [pc, #52]	; (8010f74 <netif_get_by_index+0x48>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	e00c      	b.n	8010f5e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f4a:	3301      	adds	r3, #1
 8010f4c:	b2db      	uxtb	r3, r3
 8010f4e:	79fa      	ldrb	r2, [r7, #7]
 8010f50:	429a      	cmp	r2, r3
 8010f52:	d101      	bne.n	8010f58 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	e006      	b.n	8010f66 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010f58:	68fb      	ldr	r3, [r7, #12]
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	60fb      	str	r3, [r7, #12]
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d1ef      	bne.n	8010f44 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010f64:	2300      	movs	r3, #0
}
 8010f66:	4618      	mov	r0, r3
 8010f68:	3714      	adds	r7, #20
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f70:	4770      	bx	lr
 8010f72:	bf00      	nop
 8010f74:	2000d7ac 	.word	0x2000d7ac

08010f78 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010f7e:	f00a fa1d 	bl	801b3bc <sys_arch_protect>
 8010f82:	6038      	str	r0, [r7, #0]
 8010f84:	4b0d      	ldr	r3, [pc, #52]	; (8010fbc <pbuf_free_ooseq+0x44>)
 8010f86:	2200      	movs	r2, #0
 8010f88:	701a      	strb	r2, [r3, #0]
 8010f8a:	6838      	ldr	r0, [r7, #0]
 8010f8c:	f00a fa24 	bl	801b3d8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f90:	4b0b      	ldr	r3, [pc, #44]	; (8010fc0 <pbuf_free_ooseq+0x48>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	607b      	str	r3, [r7, #4]
 8010f96:	e00a      	b.n	8010fae <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010f98:	687b      	ldr	r3, [r7, #4]
 8010f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f9c:	2b00      	cmp	r3, #0
 8010f9e:	d003      	beq.n	8010fa8 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010fa0:	6878      	ldr	r0, [r7, #4]
 8010fa2:	f002 fbbb 	bl	801371c <tcp_free_ooseq>
      return;
 8010fa6:	e005      	b.n	8010fb4 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	68db      	ldr	r3, [r3, #12]
 8010fac:	607b      	str	r3, [r7, #4]
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d1f1      	bne.n	8010f98 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	2000d7b4 	.word	0x2000d7b4
 8010fc0:	2000d7bc 	.word	0x2000d7bc

08010fc4 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010fc4:	b580      	push	{r7, lr}
 8010fc6:	b082      	sub	sp, #8
 8010fc8:	af00      	add	r7, sp, #0
 8010fca:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010fcc:	f7ff ffd4 	bl	8010f78 <pbuf_free_ooseq>
}
 8010fd0:	bf00      	nop
 8010fd2:	3708      	adds	r7, #8
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	bd80      	pop	{r7, pc}

08010fd8 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b082      	sub	sp, #8
 8010fdc:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010fde:	f00a f9ed 	bl	801b3bc <sys_arch_protect>
 8010fe2:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010fe4:	4b0f      	ldr	r3, [pc, #60]	; (8011024 <pbuf_pool_is_empty+0x4c>)
 8010fe6:	781b      	ldrb	r3, [r3, #0]
 8010fe8:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010fea:	4b0e      	ldr	r3, [pc, #56]	; (8011024 <pbuf_pool_is_empty+0x4c>)
 8010fec:	2201      	movs	r2, #1
 8010fee:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010ff0:	6878      	ldr	r0, [r7, #4]
 8010ff2:	f00a f9f1 	bl	801b3d8 <sys_arch_unprotect>

  if (!queued) {
 8010ff6:	78fb      	ldrb	r3, [r7, #3]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d10f      	bne.n	801101c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010ffc:	2100      	movs	r1, #0
 8010ffe:	480a      	ldr	r0, [pc, #40]	; (8011028 <pbuf_pool_is_empty+0x50>)
 8011000:	f7fe fed6 	bl	800fdb0 <tcpip_try_callback>
 8011004:	4603      	mov	r3, r0
 8011006:	2b00      	cmp	r3, #0
 8011008:	d008      	beq.n	801101c <pbuf_pool_is_empty+0x44>
 801100a:	f00a f9d7 	bl	801b3bc <sys_arch_protect>
 801100e:	6078      	str	r0, [r7, #4]
 8011010:	4b04      	ldr	r3, [pc, #16]	; (8011024 <pbuf_pool_is_empty+0x4c>)
 8011012:	2200      	movs	r2, #0
 8011014:	701a      	strb	r2, [r3, #0]
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f00a f9de 	bl	801b3d8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 801101c:	bf00      	nop
 801101e:	3708      	adds	r7, #8
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}
 8011024:	2000d7b4 	.word	0x2000d7b4
 8011028:	08010fc5 	.word	0x08010fc5

0801102c <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801102c:	b480      	push	{r7}
 801102e:	b085      	sub	sp, #20
 8011030:	af00      	add	r7, sp, #0
 8011032:	60f8      	str	r0, [r7, #12]
 8011034:	60b9      	str	r1, [r7, #8]
 8011036:	4611      	mov	r1, r2
 8011038:	461a      	mov	r2, r3
 801103a:	460b      	mov	r3, r1
 801103c:	80fb      	strh	r3, [r7, #6]
 801103e:	4613      	mov	r3, r2
 8011040:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2200      	movs	r2, #0
 8011046:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	68ba      	ldr	r2, [r7, #8]
 801104c:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	88fa      	ldrh	r2, [r7, #6]
 8011052:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	88ba      	ldrh	r2, [r7, #4]
 8011058:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801105a:	8b3b      	ldrh	r3, [r7, #24]
 801105c:	b2da      	uxtb	r2, r3
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	7f3a      	ldrb	r2, [r7, #28]
 8011066:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011068:	68fb      	ldr	r3, [r7, #12]
 801106a:	2201      	movs	r2, #1
 801106c:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2200      	movs	r2, #0
 8011072:	73da      	strb	r2, [r3, #15]
}
 8011074:	bf00      	nop
 8011076:	3714      	adds	r7, #20
 8011078:	46bd      	mov	sp, r7
 801107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107e:	4770      	bx	lr

08011080 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b08c      	sub	sp, #48	; 0x30
 8011084:	af02      	add	r7, sp, #8
 8011086:	4603      	mov	r3, r0
 8011088:	71fb      	strb	r3, [r7, #7]
 801108a:	460b      	mov	r3, r1
 801108c:	80bb      	strh	r3, [r7, #4]
 801108e:	4613      	mov	r3, r2
 8011090:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8011092:	79fb      	ldrb	r3, [r7, #7]
 8011094:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8011096:	887b      	ldrh	r3, [r7, #2]
 8011098:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801109c:	d07f      	beq.n	801119e <pbuf_alloc+0x11e>
 801109e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80110a2:	f300 80c8 	bgt.w	8011236 <pbuf_alloc+0x1b6>
 80110a6:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80110aa:	d010      	beq.n	80110ce <pbuf_alloc+0x4e>
 80110ac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80110b0:	f300 80c1 	bgt.w	8011236 <pbuf_alloc+0x1b6>
 80110b4:	2b01      	cmp	r3, #1
 80110b6:	d002      	beq.n	80110be <pbuf_alloc+0x3e>
 80110b8:	2b41      	cmp	r3, #65	; 0x41
 80110ba:	f040 80bc 	bne.w	8011236 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80110be:	887a      	ldrh	r2, [r7, #2]
 80110c0:	88bb      	ldrh	r3, [r7, #4]
 80110c2:	4619      	mov	r1, r3
 80110c4:	2000      	movs	r0, #0
 80110c6:	f000 f8d1 	bl	801126c <pbuf_alloc_reference>
 80110ca:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80110cc:	e0bd      	b.n	801124a <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80110ce:	2300      	movs	r3, #0
 80110d0:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80110d2:	2300      	movs	r3, #0
 80110d4:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80110d6:	88bb      	ldrh	r3, [r7, #4]
 80110d8:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80110da:	200c      	movs	r0, #12
 80110dc:	f7ff fbbe 	bl	801085c <memp_malloc>
 80110e0:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80110e2:	693b      	ldr	r3, [r7, #16]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d109      	bne.n	80110fc <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80110e8:	f7ff ff76 	bl	8010fd8 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80110ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d002      	beq.n	80110f8 <pbuf_alloc+0x78>
            pbuf_free(p);
 80110f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110f4:	f000 fada 	bl	80116ac <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80110f8:	2300      	movs	r3, #0
 80110fa:	e0a7      	b.n	801124c <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80110fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110fe:	3303      	adds	r3, #3
 8011100:	b29b      	uxth	r3, r3
 8011102:	f023 0303 	bic.w	r3, r3, #3
 8011106:	b29b      	uxth	r3, r3
 8011108:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801110c:	b29b      	uxth	r3, r3
 801110e:	8b7a      	ldrh	r2, [r7, #26]
 8011110:	4293      	cmp	r3, r2
 8011112:	bf28      	it	cs
 8011114:	4613      	movcs	r3, r2
 8011116:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011118:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801111a:	3310      	adds	r3, #16
 801111c:	693a      	ldr	r2, [r7, #16]
 801111e:	4413      	add	r3, r2
 8011120:	3303      	adds	r3, #3
 8011122:	f023 0303 	bic.w	r3, r3, #3
 8011126:	4618      	mov	r0, r3
 8011128:	89f9      	ldrh	r1, [r7, #14]
 801112a:	8b7a      	ldrh	r2, [r7, #26]
 801112c:	2300      	movs	r3, #0
 801112e:	9301      	str	r3, [sp, #4]
 8011130:	887b      	ldrh	r3, [r7, #2]
 8011132:	9300      	str	r3, [sp, #0]
 8011134:	460b      	mov	r3, r1
 8011136:	4601      	mov	r1, r0
 8011138:	6938      	ldr	r0, [r7, #16]
 801113a:	f7ff ff77 	bl	801102c <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801113e:	693b      	ldr	r3, [r7, #16]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	f003 0303 	and.w	r3, r3, #3
 8011146:	2b00      	cmp	r3, #0
 8011148:	d006      	beq.n	8011158 <pbuf_alloc+0xd8>
 801114a:	4b42      	ldr	r3, [pc, #264]	; (8011254 <pbuf_alloc+0x1d4>)
 801114c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011150:	4941      	ldr	r1, [pc, #260]	; (8011258 <pbuf_alloc+0x1d8>)
 8011152:	4842      	ldr	r0, [pc, #264]	; (801125c <pbuf_alloc+0x1dc>)
 8011154:	f00a fdda 	bl	801bd0c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011158:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801115a:	3303      	adds	r3, #3
 801115c:	f023 0303 	bic.w	r3, r3, #3
 8011160:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011164:	d106      	bne.n	8011174 <pbuf_alloc+0xf4>
 8011166:	4b3b      	ldr	r3, [pc, #236]	; (8011254 <pbuf_alloc+0x1d4>)
 8011168:	f44f 7281 	mov.w	r2, #258	; 0x102
 801116c:	493c      	ldr	r1, [pc, #240]	; (8011260 <pbuf_alloc+0x1e0>)
 801116e:	483b      	ldr	r0, [pc, #236]	; (801125c <pbuf_alloc+0x1dc>)
 8011170:	f00a fdcc 	bl	801bd0c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011176:	2b00      	cmp	r3, #0
 8011178:	d102      	bne.n	8011180 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	627b      	str	r3, [r7, #36]	; 0x24
 801117e:	e002      	b.n	8011186 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	693a      	ldr	r2, [r7, #16]
 8011184:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801118a:	8b7a      	ldrh	r2, [r7, #26]
 801118c:	89fb      	ldrh	r3, [r7, #14]
 801118e:	1ad3      	subs	r3, r2, r3
 8011190:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8011192:	2300      	movs	r3, #0
 8011194:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011196:	8b7b      	ldrh	r3, [r7, #26]
 8011198:	2b00      	cmp	r3, #0
 801119a:	d19e      	bne.n	80110da <pbuf_alloc+0x5a>
      break;
 801119c:	e055      	b.n	801124a <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801119e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111a0:	3303      	adds	r3, #3
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	f023 0303 	bic.w	r3, r3, #3
 80111a8:	b29a      	uxth	r2, r3
 80111aa:	88bb      	ldrh	r3, [r7, #4]
 80111ac:	3303      	adds	r3, #3
 80111ae:	b29b      	uxth	r3, r3
 80111b0:	f023 0303 	bic.w	r3, r3, #3
 80111b4:	b29b      	uxth	r3, r3
 80111b6:	4413      	add	r3, r2
 80111b8:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80111ba:	8b3b      	ldrh	r3, [r7, #24]
 80111bc:	3310      	adds	r3, #16
 80111be:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80111c0:	8b3a      	ldrh	r2, [r7, #24]
 80111c2:	88bb      	ldrh	r3, [r7, #4]
 80111c4:	3303      	adds	r3, #3
 80111c6:	f023 0303 	bic.w	r3, r3, #3
 80111ca:	429a      	cmp	r2, r3
 80111cc:	d306      	bcc.n	80111dc <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80111ce:	8afa      	ldrh	r2, [r7, #22]
 80111d0:	88bb      	ldrh	r3, [r7, #4]
 80111d2:	3303      	adds	r3, #3
 80111d4:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80111d8:	429a      	cmp	r2, r3
 80111da:	d201      	bcs.n	80111e0 <pbuf_alloc+0x160>
        return NULL;
 80111dc:	2300      	movs	r3, #0
 80111de:	e035      	b.n	801124c <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80111e0:	8afb      	ldrh	r3, [r7, #22]
 80111e2:	4618      	mov	r0, r3
 80111e4:	f7ff f9b8 	bl	8010558 <mem_malloc>
 80111e8:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d101      	bne.n	80111f4 <pbuf_alloc+0x174>
        return NULL;
 80111f0:	2300      	movs	r3, #0
 80111f2:	e02b      	b.n	801124c <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80111f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80111f6:	3310      	adds	r3, #16
 80111f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80111fa:	4413      	add	r3, r2
 80111fc:	3303      	adds	r3, #3
 80111fe:	f023 0303 	bic.w	r3, r3, #3
 8011202:	4618      	mov	r0, r3
 8011204:	88b9      	ldrh	r1, [r7, #4]
 8011206:	88ba      	ldrh	r2, [r7, #4]
 8011208:	2300      	movs	r3, #0
 801120a:	9301      	str	r3, [sp, #4]
 801120c:	887b      	ldrh	r3, [r7, #2]
 801120e:	9300      	str	r3, [sp, #0]
 8011210:	460b      	mov	r3, r1
 8011212:	4601      	mov	r1, r0
 8011214:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011216:	f7ff ff09 	bl	801102c <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801121a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121c:	685b      	ldr	r3, [r3, #4]
 801121e:	f003 0303 	and.w	r3, r3, #3
 8011222:	2b00      	cmp	r3, #0
 8011224:	d010      	beq.n	8011248 <pbuf_alloc+0x1c8>
 8011226:	4b0b      	ldr	r3, [pc, #44]	; (8011254 <pbuf_alloc+0x1d4>)
 8011228:	f44f 7291 	mov.w	r2, #290	; 0x122
 801122c:	490d      	ldr	r1, [pc, #52]	; (8011264 <pbuf_alloc+0x1e4>)
 801122e:	480b      	ldr	r0, [pc, #44]	; (801125c <pbuf_alloc+0x1dc>)
 8011230:	f00a fd6c 	bl	801bd0c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011234:	e008      	b.n	8011248 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011236:	4b07      	ldr	r3, [pc, #28]	; (8011254 <pbuf_alloc+0x1d4>)
 8011238:	f240 1227 	movw	r2, #295	; 0x127
 801123c:	490a      	ldr	r1, [pc, #40]	; (8011268 <pbuf_alloc+0x1e8>)
 801123e:	4807      	ldr	r0, [pc, #28]	; (801125c <pbuf_alloc+0x1dc>)
 8011240:	f00a fd64 	bl	801bd0c <iprintf>
      return NULL;
 8011244:	2300      	movs	r3, #0
 8011246:	e001      	b.n	801124c <pbuf_alloc+0x1cc>
      break;
 8011248:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801124c:	4618      	mov	r0, r3
 801124e:	3728      	adds	r7, #40	; 0x28
 8011250:	46bd      	mov	sp, r7
 8011252:	bd80      	pop	{r7, pc}
 8011254:	0801f760 	.word	0x0801f760
 8011258:	0801f790 	.word	0x0801f790
 801125c:	0801f7c0 	.word	0x0801f7c0
 8011260:	0801f7e8 	.word	0x0801f7e8
 8011264:	0801f81c 	.word	0x0801f81c
 8011268:	0801f848 	.word	0x0801f848

0801126c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b086      	sub	sp, #24
 8011270:	af02      	add	r7, sp, #8
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	460b      	mov	r3, r1
 8011276:	807b      	strh	r3, [r7, #2]
 8011278:	4613      	mov	r3, r2
 801127a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801127c:	883b      	ldrh	r3, [r7, #0]
 801127e:	2b41      	cmp	r3, #65	; 0x41
 8011280:	d009      	beq.n	8011296 <pbuf_alloc_reference+0x2a>
 8011282:	883b      	ldrh	r3, [r7, #0]
 8011284:	2b01      	cmp	r3, #1
 8011286:	d006      	beq.n	8011296 <pbuf_alloc_reference+0x2a>
 8011288:	4b0f      	ldr	r3, [pc, #60]	; (80112c8 <pbuf_alloc_reference+0x5c>)
 801128a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801128e:	490f      	ldr	r1, [pc, #60]	; (80112cc <pbuf_alloc_reference+0x60>)
 8011290:	480f      	ldr	r0, [pc, #60]	; (80112d0 <pbuf_alloc_reference+0x64>)
 8011292:	f00a fd3b 	bl	801bd0c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011296:	200b      	movs	r0, #11
 8011298:	f7ff fae0 	bl	801085c <memp_malloc>
 801129c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d101      	bne.n	80112a8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80112a4:	2300      	movs	r3, #0
 80112a6:	e00b      	b.n	80112c0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80112a8:	8879      	ldrh	r1, [r7, #2]
 80112aa:	887a      	ldrh	r2, [r7, #2]
 80112ac:	2300      	movs	r3, #0
 80112ae:	9301      	str	r3, [sp, #4]
 80112b0:	883b      	ldrh	r3, [r7, #0]
 80112b2:	9300      	str	r3, [sp, #0]
 80112b4:	460b      	mov	r3, r1
 80112b6:	6879      	ldr	r1, [r7, #4]
 80112b8:	68f8      	ldr	r0, [r7, #12]
 80112ba:	f7ff feb7 	bl	801102c <pbuf_init_alloced_pbuf>
  return p;
 80112be:	68fb      	ldr	r3, [r7, #12]
}
 80112c0:	4618      	mov	r0, r3
 80112c2:	3710      	adds	r7, #16
 80112c4:	46bd      	mov	sp, r7
 80112c6:	bd80      	pop	{r7, pc}
 80112c8:	0801f760 	.word	0x0801f760
 80112cc:	0801f864 	.word	0x0801f864
 80112d0:	0801f7c0 	.word	0x0801f7c0

080112d4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b088      	sub	sp, #32
 80112d8:	af02      	add	r7, sp, #8
 80112da:	607b      	str	r3, [r7, #4]
 80112dc:	4603      	mov	r3, r0
 80112de:	73fb      	strb	r3, [r7, #15]
 80112e0:	460b      	mov	r3, r1
 80112e2:	81bb      	strh	r3, [r7, #12]
 80112e4:	4613      	mov	r3, r2
 80112e6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80112e8:	7bfb      	ldrb	r3, [r7, #15]
 80112ea:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80112ec:	8a7b      	ldrh	r3, [r7, #18]
 80112ee:	3303      	adds	r3, #3
 80112f0:	f023 0203 	bic.w	r2, r3, #3
 80112f4:	89bb      	ldrh	r3, [r7, #12]
 80112f6:	441a      	add	r2, r3
 80112f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d901      	bls.n	8011302 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80112fe:	2300      	movs	r3, #0
 8011300:	e018      	b.n	8011334 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011302:	6a3b      	ldr	r3, [r7, #32]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d007      	beq.n	8011318 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011308:	8a7b      	ldrh	r3, [r7, #18]
 801130a:	3303      	adds	r3, #3
 801130c:	f023 0303 	bic.w	r3, r3, #3
 8011310:	6a3a      	ldr	r2, [r7, #32]
 8011312:	4413      	add	r3, r2
 8011314:	617b      	str	r3, [r7, #20]
 8011316:	e001      	b.n	801131c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011318:	2300      	movs	r3, #0
 801131a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	89b9      	ldrh	r1, [r7, #12]
 8011320:	89ba      	ldrh	r2, [r7, #12]
 8011322:	2302      	movs	r3, #2
 8011324:	9301      	str	r3, [sp, #4]
 8011326:	897b      	ldrh	r3, [r7, #10]
 8011328:	9300      	str	r3, [sp, #0]
 801132a:	460b      	mov	r3, r1
 801132c:	6979      	ldr	r1, [r7, #20]
 801132e:	f7ff fe7d 	bl	801102c <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011332:	687b      	ldr	r3, [r7, #4]
}
 8011334:	4618      	mov	r0, r3
 8011336:	3718      	adds	r7, #24
 8011338:	46bd      	mov	sp, r7
 801133a:	bd80      	pop	{r7, pc}

0801133c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801133c:	b580      	push	{r7, lr}
 801133e:	b084      	sub	sp, #16
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
 8011344:	460b      	mov	r3, r1
 8011346:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d106      	bne.n	801135c <pbuf_realloc+0x20>
 801134e:	4b3a      	ldr	r3, [pc, #232]	; (8011438 <pbuf_realloc+0xfc>)
 8011350:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011354:	4939      	ldr	r1, [pc, #228]	; (801143c <pbuf_realloc+0x100>)
 8011356:	483a      	ldr	r0, [pc, #232]	; (8011440 <pbuf_realloc+0x104>)
 8011358:	f00a fcd8 	bl	801bd0c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	891b      	ldrh	r3, [r3, #8]
 8011360:	887a      	ldrh	r2, [r7, #2]
 8011362:	429a      	cmp	r2, r3
 8011364:	d263      	bcs.n	801142e <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	891a      	ldrh	r2, [r3, #8]
 801136a:	887b      	ldrh	r3, [r7, #2]
 801136c:	1ad3      	subs	r3, r2, r3
 801136e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011370:	887b      	ldrh	r3, [r7, #2]
 8011372:	817b      	strh	r3, [r7, #10]
  q = p;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011378:	e018      	b.n	80113ac <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	895b      	ldrh	r3, [r3, #10]
 801137e:	897a      	ldrh	r2, [r7, #10]
 8011380:	1ad3      	subs	r3, r2, r3
 8011382:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	891a      	ldrh	r2, [r3, #8]
 8011388:	893b      	ldrh	r3, [r7, #8]
 801138a:	1ad3      	subs	r3, r2, r3
 801138c:	b29a      	uxth	r2, r3
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d106      	bne.n	80113ac <pbuf_realloc+0x70>
 801139e:	4b26      	ldr	r3, [pc, #152]	; (8011438 <pbuf_realloc+0xfc>)
 80113a0:	f240 12af 	movw	r2, #431	; 0x1af
 80113a4:	4927      	ldr	r1, [pc, #156]	; (8011444 <pbuf_realloc+0x108>)
 80113a6:	4826      	ldr	r0, [pc, #152]	; (8011440 <pbuf_realloc+0x104>)
 80113a8:	f00a fcb0 	bl	801bd0c <iprintf>
  while (rem_len > q->len) {
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	895b      	ldrh	r3, [r3, #10]
 80113b0:	897a      	ldrh	r2, [r7, #10]
 80113b2:	429a      	cmp	r2, r3
 80113b4:	d8e1      	bhi.n	801137a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	7b1b      	ldrb	r3, [r3, #12]
 80113ba:	f003 030f 	and.w	r3, r3, #15
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d121      	bne.n	8011406 <pbuf_realloc+0xca>
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	895b      	ldrh	r3, [r3, #10]
 80113c6:	897a      	ldrh	r2, [r7, #10]
 80113c8:	429a      	cmp	r2, r3
 80113ca:	d01c      	beq.n	8011406 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	7b5b      	ldrb	r3, [r3, #13]
 80113d0:	f003 0302 	and.w	r3, r3, #2
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d116      	bne.n	8011406 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	b29a      	uxth	r2, r3
 80113e2:	897b      	ldrh	r3, [r7, #10]
 80113e4:	4413      	add	r3, r2
 80113e6:	b29b      	uxth	r3, r3
 80113e8:	4619      	mov	r1, r3
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f7fe ffaa 	bl	8010344 <mem_trim>
 80113f0:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d106      	bne.n	8011406 <pbuf_realloc+0xca>
 80113f8:	4b0f      	ldr	r3, [pc, #60]	; (8011438 <pbuf_realloc+0xfc>)
 80113fa:	f240 12bd 	movw	r2, #445	; 0x1bd
 80113fe:	4912      	ldr	r1, [pc, #72]	; (8011448 <pbuf_realloc+0x10c>)
 8011400:	480f      	ldr	r0, [pc, #60]	; (8011440 <pbuf_realloc+0x104>)
 8011402:	f00a fc83 	bl	801bd0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	897a      	ldrh	r2, [r7, #10]
 801140a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	895a      	ldrh	r2, [r3, #10]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d004      	beq.n	8011426 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801141c:	68fb      	ldr	r3, [r7, #12]
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	4618      	mov	r0, r3
 8011422:	f000 f943 	bl	80116ac <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2200      	movs	r2, #0
 801142a:	601a      	str	r2, [r3, #0]
 801142c:	e000      	b.n	8011430 <pbuf_realloc+0xf4>
    return;
 801142e:	bf00      	nop

}
 8011430:	3710      	adds	r7, #16
 8011432:	46bd      	mov	sp, r7
 8011434:	bd80      	pop	{r7, pc}
 8011436:	bf00      	nop
 8011438:	0801f760 	.word	0x0801f760
 801143c:	0801f878 	.word	0x0801f878
 8011440:	0801f7c0 	.word	0x0801f7c0
 8011444:	0801f890 	.word	0x0801f890
 8011448:	0801f8a8 	.word	0x0801f8a8

0801144c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b086      	sub	sp, #24
 8011450:	af00      	add	r7, sp, #0
 8011452:	60f8      	str	r0, [r7, #12]
 8011454:	60b9      	str	r1, [r7, #8]
 8011456:	4613      	mov	r3, r2
 8011458:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d106      	bne.n	801146e <pbuf_add_header_impl+0x22>
 8011460:	4b2b      	ldr	r3, [pc, #172]	; (8011510 <pbuf_add_header_impl+0xc4>)
 8011462:	f240 12df 	movw	r2, #479	; 0x1df
 8011466:	492b      	ldr	r1, [pc, #172]	; (8011514 <pbuf_add_header_impl+0xc8>)
 8011468:	482b      	ldr	r0, [pc, #172]	; (8011518 <pbuf_add_header_impl+0xcc>)
 801146a:	f00a fc4f 	bl	801bd0c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d003      	beq.n	801147c <pbuf_add_header_impl+0x30>
 8011474:	68bb      	ldr	r3, [r7, #8]
 8011476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801147a:	d301      	bcc.n	8011480 <pbuf_add_header_impl+0x34>
    return 1;
 801147c:	2301      	movs	r3, #1
 801147e:	e043      	b.n	8011508 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011480:	68bb      	ldr	r3, [r7, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <pbuf_add_header_impl+0x3e>
    return 0;
 8011486:	2300      	movs	r3, #0
 8011488:	e03e      	b.n	8011508 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801148a:	68bb      	ldr	r3, [r7, #8]
 801148c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801148e:	68fb      	ldr	r3, [r7, #12]
 8011490:	891a      	ldrh	r2, [r3, #8]
 8011492:	8a7b      	ldrh	r3, [r7, #18]
 8011494:	4413      	add	r3, r2
 8011496:	b29b      	uxth	r3, r3
 8011498:	8a7a      	ldrh	r2, [r7, #18]
 801149a:	429a      	cmp	r2, r3
 801149c:	d901      	bls.n	80114a2 <pbuf_add_header_impl+0x56>
    return 1;
 801149e:	2301      	movs	r3, #1
 80114a0:	e032      	b.n	8011508 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	7b1b      	ldrb	r3, [r3, #12]
 80114a6:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80114a8:	8a3b      	ldrh	r3, [r7, #16]
 80114aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d00c      	beq.n	80114cc <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	685a      	ldr	r2, [r3, #4]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	425b      	negs	r3, r3
 80114ba:	4413      	add	r3, r2
 80114bc:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80114be:	68fb      	ldr	r3, [r7, #12]
 80114c0:	3310      	adds	r3, #16
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d20d      	bcs.n	80114e4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80114c8:	2301      	movs	r3, #1
 80114ca:	e01d      	b.n	8011508 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80114cc:	79fb      	ldrb	r3, [r7, #7]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d006      	beq.n	80114e0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	685a      	ldr	r2, [r3, #4]
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	425b      	negs	r3, r3
 80114da:	4413      	add	r3, r2
 80114dc:	617b      	str	r3, [r7, #20]
 80114de:	e001      	b.n	80114e4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80114e0:	2301      	movs	r3, #1
 80114e2:	e011      	b.n	8011508 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	697a      	ldr	r2, [r7, #20]
 80114e8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	895a      	ldrh	r2, [r3, #10]
 80114ee:	8a7b      	ldrh	r3, [r7, #18]
 80114f0:	4413      	add	r3, r2
 80114f2:	b29a      	uxth	r2, r3
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	891a      	ldrh	r2, [r3, #8]
 80114fc:	8a7b      	ldrh	r3, [r7, #18]
 80114fe:	4413      	add	r3, r2
 8011500:	b29a      	uxth	r2, r3
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	811a      	strh	r2, [r3, #8]


  return 0;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3718      	adds	r7, #24
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	0801f760 	.word	0x0801f760
 8011514:	0801f8c4 	.word	0x0801f8c4
 8011518:	0801f7c0 	.word	0x0801f7c0

0801151c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801151c:	b580      	push	{r7, lr}
 801151e:	b082      	sub	sp, #8
 8011520:	af00      	add	r7, sp, #0
 8011522:	6078      	str	r0, [r7, #4]
 8011524:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011526:	2200      	movs	r2, #0
 8011528:	6839      	ldr	r1, [r7, #0]
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f7ff ff8e 	bl	801144c <pbuf_add_header_impl>
 8011530:	4603      	mov	r3, r0
}
 8011532:	4618      	mov	r0, r3
 8011534:	3708      	adds	r7, #8
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}
	...

0801153c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b084      	sub	sp, #16
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
 8011544:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	2b00      	cmp	r3, #0
 801154a:	d106      	bne.n	801155a <pbuf_remove_header+0x1e>
 801154c:	4b20      	ldr	r3, [pc, #128]	; (80115d0 <pbuf_remove_header+0x94>)
 801154e:	f240 224b 	movw	r2, #587	; 0x24b
 8011552:	4920      	ldr	r1, [pc, #128]	; (80115d4 <pbuf_remove_header+0x98>)
 8011554:	4820      	ldr	r0, [pc, #128]	; (80115d8 <pbuf_remove_header+0x9c>)
 8011556:	f00a fbd9 	bl	801bd0c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	2b00      	cmp	r3, #0
 801155e:	d003      	beq.n	8011568 <pbuf_remove_header+0x2c>
 8011560:	683b      	ldr	r3, [r7, #0]
 8011562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011566:	d301      	bcc.n	801156c <pbuf_remove_header+0x30>
    return 1;
 8011568:	2301      	movs	r3, #1
 801156a:	e02c      	b.n	80115c6 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d101      	bne.n	8011576 <pbuf_remove_header+0x3a>
    return 0;
 8011572:	2300      	movs	r3, #0
 8011574:	e027      	b.n	80115c6 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	895b      	ldrh	r3, [r3, #10]
 801157e:	89fa      	ldrh	r2, [r7, #14]
 8011580:	429a      	cmp	r2, r3
 8011582:	d908      	bls.n	8011596 <pbuf_remove_header+0x5a>
 8011584:	4b12      	ldr	r3, [pc, #72]	; (80115d0 <pbuf_remove_header+0x94>)
 8011586:	f240 2255 	movw	r2, #597	; 0x255
 801158a:	4914      	ldr	r1, [pc, #80]	; (80115dc <pbuf_remove_header+0xa0>)
 801158c:	4812      	ldr	r0, [pc, #72]	; (80115d8 <pbuf_remove_header+0x9c>)
 801158e:	f00a fbbd 	bl	801bd0c <iprintf>
 8011592:	2301      	movs	r3, #1
 8011594:	e017      	b.n	80115c6 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	685b      	ldr	r3, [r3, #4]
 801159a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	685a      	ldr	r2, [r3, #4]
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	441a      	add	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	895a      	ldrh	r2, [r3, #10]
 80115ac:	89fb      	ldrh	r3, [r7, #14]
 80115ae:	1ad3      	subs	r3, r2, r3
 80115b0:	b29a      	uxth	r2, r3
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	891a      	ldrh	r2, [r3, #8]
 80115ba:	89fb      	ldrh	r3, [r7, #14]
 80115bc:	1ad3      	subs	r3, r2, r3
 80115be:	b29a      	uxth	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80115c4:	2300      	movs	r3, #0
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	0801f760 	.word	0x0801f760
 80115d4:	0801f8c4 	.word	0x0801f8c4
 80115d8:	0801f7c0 	.word	0x0801f7c0
 80115dc:	0801f8d0 	.word	0x0801f8d0

080115e0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	460b      	mov	r3, r1
 80115ea:	807b      	strh	r3, [r7, #2]
 80115ec:	4613      	mov	r3, r2
 80115ee:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80115f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	da08      	bge.n	801160a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80115f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80115fc:	425b      	negs	r3, r3
 80115fe:	4619      	mov	r1, r3
 8011600:	6878      	ldr	r0, [r7, #4]
 8011602:	f7ff ff9b 	bl	801153c <pbuf_remove_header>
 8011606:	4603      	mov	r3, r0
 8011608:	e007      	b.n	801161a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801160a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801160e:	787a      	ldrb	r2, [r7, #1]
 8011610:	4619      	mov	r1, r3
 8011612:	6878      	ldr	r0, [r7, #4]
 8011614:	f7ff ff1a 	bl	801144c <pbuf_add_header_impl>
 8011618:	4603      	mov	r3, r0
  }
}
 801161a:	4618      	mov	r0, r3
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}

08011622 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011622:	b580      	push	{r7, lr}
 8011624:	b082      	sub	sp, #8
 8011626:	af00      	add	r7, sp, #0
 8011628:	6078      	str	r0, [r7, #4]
 801162a:	460b      	mov	r3, r1
 801162c:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801162e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011632:	2201      	movs	r2, #1
 8011634:	4619      	mov	r1, r3
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7ff ffd2 	bl	80115e0 <pbuf_header_impl>
 801163c:	4603      	mov	r3, r0
}
 801163e:	4618      	mov	r0, r3
 8011640:	3708      	adds	r7, #8
 8011642:	46bd      	mov	sp, r7
 8011644:	bd80      	pop	{r7, pc}

08011646 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8011646:	b580      	push	{r7, lr}
 8011648:	b086      	sub	sp, #24
 801164a:	af00      	add	r7, sp, #0
 801164c:	6078      	str	r0, [r7, #4]
 801164e:	460b      	mov	r3, r1
 8011650:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8011656:	887b      	ldrh	r3, [r7, #2]
 8011658:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 801165a:	e01c      	b.n	8011696 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 801165c:	697b      	ldr	r3, [r7, #20]
 801165e:	895b      	ldrh	r3, [r3, #10]
 8011660:	8a7a      	ldrh	r2, [r7, #18]
 8011662:	429a      	cmp	r2, r3
 8011664:	d310      	bcc.n	8011688 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8011666:	697b      	ldr	r3, [r7, #20]
 8011668:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 801166a:	697b      	ldr	r3, [r7, #20]
 801166c:	895b      	ldrh	r3, [r3, #10]
 801166e:	8a7a      	ldrh	r2, [r7, #18]
 8011670:	1ad3      	subs	r3, r2, r3
 8011672:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8011674:	697b      	ldr	r3, [r7, #20]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	617b      	str	r3, [r7, #20]
      f->next = 0;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2200      	movs	r2, #0
 801167e:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f000 f813 	bl	80116ac <pbuf_free>
 8011686:	e006      	b.n	8011696 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8011688:	8a7b      	ldrh	r3, [r7, #18]
 801168a:	4619      	mov	r1, r3
 801168c:	6978      	ldr	r0, [r7, #20]
 801168e:	f7ff ff55 	bl	801153c <pbuf_remove_header>
      free_left = 0;
 8011692:	2300      	movs	r3, #0
 8011694:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8011696:	8a7b      	ldrh	r3, [r7, #18]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d002      	beq.n	80116a2 <pbuf_free_header+0x5c>
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d1dc      	bne.n	801165c <pbuf_free_header+0x16>
    }
  }
  return p;
 80116a2:	697b      	ldr	r3, [r7, #20]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3718      	adds	r7, #24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}

080116ac <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80116ac:	b580      	push	{r7, lr}
 80116ae:	b088      	sub	sp, #32
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d10b      	bne.n	80116d2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d106      	bne.n	80116ce <pbuf_free+0x22>
 80116c0:	4b3b      	ldr	r3, [pc, #236]	; (80117b0 <pbuf_free+0x104>)
 80116c2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80116c6:	493b      	ldr	r1, [pc, #236]	; (80117b4 <pbuf_free+0x108>)
 80116c8:	483b      	ldr	r0, [pc, #236]	; (80117b8 <pbuf_free+0x10c>)
 80116ca:	f00a fb1f 	bl	801bd0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80116ce:	2300      	movs	r3, #0
 80116d0:	e069      	b.n	80117a6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80116d6:	e062      	b.n	801179e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80116d8:	f009 fe70 	bl	801b3bc <sys_arch_protect>
 80116dc:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	7b9b      	ldrb	r3, [r3, #14]
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d106      	bne.n	80116f4 <pbuf_free+0x48>
 80116e6:	4b32      	ldr	r3, [pc, #200]	; (80117b0 <pbuf_free+0x104>)
 80116e8:	f240 22f1 	movw	r2, #753	; 0x2f1
 80116ec:	4933      	ldr	r1, [pc, #204]	; (80117bc <pbuf_free+0x110>)
 80116ee:	4832      	ldr	r0, [pc, #200]	; (80117b8 <pbuf_free+0x10c>)
 80116f0:	f00a fb0c 	bl	801bd0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	7b9b      	ldrb	r3, [r3, #14]
 80116f8:	3b01      	subs	r3, #1
 80116fa:	b2da      	uxtb	r2, r3
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	739a      	strb	r2, [r3, #14]
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	7b9b      	ldrb	r3, [r3, #14]
 8011704:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011706:	69b8      	ldr	r0, [r7, #24]
 8011708:	f009 fe66 	bl	801b3d8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801170c:	7dfb      	ldrb	r3, [r7, #23]
 801170e:	2b00      	cmp	r3, #0
 8011710:	d143      	bne.n	801179a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	681b      	ldr	r3, [r3, #0]
 8011716:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	7b1b      	ldrb	r3, [r3, #12]
 801171c:	f003 030f 	and.w	r3, r3, #15
 8011720:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	7b5b      	ldrb	r3, [r3, #13]
 8011726:	f003 0302 	and.w	r3, r3, #2
 801172a:	2b00      	cmp	r3, #0
 801172c:	d011      	beq.n	8011752 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011732:	68bb      	ldr	r3, [r7, #8]
 8011734:	691b      	ldr	r3, [r3, #16]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d106      	bne.n	8011748 <pbuf_free+0x9c>
 801173a:	4b1d      	ldr	r3, [pc, #116]	; (80117b0 <pbuf_free+0x104>)
 801173c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011740:	491f      	ldr	r1, [pc, #124]	; (80117c0 <pbuf_free+0x114>)
 8011742:	481d      	ldr	r0, [pc, #116]	; (80117b8 <pbuf_free+0x10c>)
 8011744:	f00a fae2 	bl	801bd0c <iprintf>
        pc->custom_free_function(p);
 8011748:	68bb      	ldr	r3, [r7, #8]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	6878      	ldr	r0, [r7, #4]
 801174e:	4798      	blx	r3
 8011750:	e01d      	b.n	801178e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011752:	7bfb      	ldrb	r3, [r7, #15]
 8011754:	2b02      	cmp	r3, #2
 8011756:	d104      	bne.n	8011762 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011758:	6879      	ldr	r1, [r7, #4]
 801175a:	200c      	movs	r0, #12
 801175c:	f7ff f8d0 	bl	8010900 <memp_free>
 8011760:	e015      	b.n	801178e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011762:	7bfb      	ldrb	r3, [r7, #15]
 8011764:	2b01      	cmp	r3, #1
 8011766:	d104      	bne.n	8011772 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011768:	6879      	ldr	r1, [r7, #4]
 801176a:	200b      	movs	r0, #11
 801176c:	f7ff f8c8 	bl	8010900 <memp_free>
 8011770:	e00d      	b.n	801178e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011772:	7bfb      	ldrb	r3, [r7, #15]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d103      	bne.n	8011780 <pbuf_free+0xd4>
          mem_free(p);
 8011778:	6878      	ldr	r0, [r7, #4]
 801177a:	f7fe fd53 	bl	8010224 <mem_free>
 801177e:	e006      	b.n	801178e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011780:	4b0b      	ldr	r3, [pc, #44]	; (80117b0 <pbuf_free+0x104>)
 8011782:	f240 320f 	movw	r2, #783	; 0x30f
 8011786:	490f      	ldr	r1, [pc, #60]	; (80117c4 <pbuf_free+0x118>)
 8011788:	480b      	ldr	r0, [pc, #44]	; (80117b8 <pbuf_free+0x10c>)
 801178a:	f00a fabf 	bl	801bd0c <iprintf>
        }
      }
      count++;
 801178e:	7ffb      	ldrb	r3, [r7, #31]
 8011790:	3301      	adds	r3, #1
 8011792:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	607b      	str	r3, [r7, #4]
 8011798:	e001      	b.n	801179e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801179a:	2300      	movs	r3, #0
 801179c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d199      	bne.n	80116d8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80117a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3720      	adds	r7, #32
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	0801f760 	.word	0x0801f760
 80117b4:	0801f8c4 	.word	0x0801f8c4
 80117b8:	0801f7c0 	.word	0x0801f7c0
 80117bc:	0801f8f0 	.word	0x0801f8f0
 80117c0:	0801f908 	.word	0x0801f908
 80117c4:	0801f92c 	.word	0x0801f92c

080117c8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80117c8:	b480      	push	{r7}
 80117ca:	b085      	sub	sp, #20
 80117cc:	af00      	add	r7, sp, #0
 80117ce:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80117d0:	2300      	movs	r3, #0
 80117d2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80117d4:	e005      	b.n	80117e2 <pbuf_clen+0x1a>
    ++len;
 80117d6:	89fb      	ldrh	r3, [r7, #14]
 80117d8:	3301      	adds	r3, #1
 80117da:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d1f6      	bne.n	80117d6 <pbuf_clen+0xe>
  }
  return len;
 80117e8:	89fb      	ldrh	r3, [r7, #14]
}
 80117ea:	4618      	mov	r0, r3
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f4:	4770      	bx	lr
	...

080117f8 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b084      	sub	sp, #16
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d016      	beq.n	8011834 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011806:	f009 fdd9 	bl	801b3bc <sys_arch_protect>
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	7b9b      	ldrb	r3, [r3, #14]
 8011810:	3301      	adds	r3, #1
 8011812:	b2da      	uxtb	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	739a      	strb	r2, [r3, #14]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f009 fddd 	bl	801b3d8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	7b9b      	ldrb	r3, [r3, #14]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d106      	bne.n	8011834 <pbuf_ref+0x3c>
 8011826:	4b05      	ldr	r3, [pc, #20]	; (801183c <pbuf_ref+0x44>)
 8011828:	f240 3242 	movw	r2, #834	; 0x342
 801182c:	4904      	ldr	r1, [pc, #16]	; (8011840 <pbuf_ref+0x48>)
 801182e:	4805      	ldr	r0, [pc, #20]	; (8011844 <pbuf_ref+0x4c>)
 8011830:	f00a fa6c 	bl	801bd0c <iprintf>
  }
}
 8011834:	bf00      	nop
 8011836:	3710      	adds	r7, #16
 8011838:	46bd      	mov	sp, r7
 801183a:	bd80      	pop	{r7, pc}
 801183c:	0801f760 	.word	0x0801f760
 8011840:	0801f940 	.word	0x0801f940
 8011844:	0801f7c0 	.word	0x0801f7c0

08011848 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
 8011850:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	2b00      	cmp	r3, #0
 8011856:	d002      	beq.n	801185e <pbuf_cat+0x16>
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d107      	bne.n	801186e <pbuf_cat+0x26>
 801185e:	4b20      	ldr	r3, [pc, #128]	; (80118e0 <pbuf_cat+0x98>)
 8011860:	f240 3259 	movw	r2, #857	; 0x359
 8011864:	491f      	ldr	r1, [pc, #124]	; (80118e4 <pbuf_cat+0x9c>)
 8011866:	4820      	ldr	r0, [pc, #128]	; (80118e8 <pbuf_cat+0xa0>)
 8011868:	f00a fa50 	bl	801bd0c <iprintf>
 801186c:	e034      	b.n	80118d8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	60fb      	str	r3, [r7, #12]
 8011872:	e00a      	b.n	801188a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	891a      	ldrh	r2, [r3, #8]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	891b      	ldrh	r3, [r3, #8]
 801187c:	4413      	add	r3, r2
 801187e:	b29a      	uxth	r2, r3
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	60fb      	str	r3, [r7, #12]
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	681b      	ldr	r3, [r3, #0]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d1f0      	bne.n	8011874 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	891a      	ldrh	r2, [r3, #8]
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	895b      	ldrh	r3, [r3, #10]
 801189a:	429a      	cmp	r2, r3
 801189c:	d006      	beq.n	80118ac <pbuf_cat+0x64>
 801189e:	4b10      	ldr	r3, [pc, #64]	; (80118e0 <pbuf_cat+0x98>)
 80118a0:	f240 3262 	movw	r2, #866	; 0x362
 80118a4:	4911      	ldr	r1, [pc, #68]	; (80118ec <pbuf_cat+0xa4>)
 80118a6:	4810      	ldr	r0, [pc, #64]	; (80118e8 <pbuf_cat+0xa0>)
 80118a8:	f00a fa30 	bl	801bd0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d006      	beq.n	80118c2 <pbuf_cat+0x7a>
 80118b4:	4b0a      	ldr	r3, [pc, #40]	; (80118e0 <pbuf_cat+0x98>)
 80118b6:	f240 3263 	movw	r2, #867	; 0x363
 80118ba:	490d      	ldr	r1, [pc, #52]	; (80118f0 <pbuf_cat+0xa8>)
 80118bc:	480a      	ldr	r0, [pc, #40]	; (80118e8 <pbuf_cat+0xa0>)
 80118be:	f00a fa25 	bl	801bd0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	891a      	ldrh	r2, [r3, #8]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	891b      	ldrh	r3, [r3, #8]
 80118ca:	4413      	add	r3, r2
 80118cc:	b29a      	uxth	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	683a      	ldr	r2, [r7, #0]
 80118d6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80118d8:	3710      	adds	r7, #16
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	0801f760 	.word	0x0801f760
 80118e4:	0801f954 	.word	0x0801f954
 80118e8:	0801f7c0 	.word	0x0801f7c0
 80118ec:	0801f98c 	.word	0x0801f98c
 80118f0:	0801f9bc 	.word	0x0801f9bc

080118f4 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80118fe:	6839      	ldr	r1, [r7, #0]
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7ff ffa1 	bl	8011848 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011906:	6838      	ldr	r0, [r7, #0]
 8011908:	f7ff ff76 	bl	80117f8 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801190c:	bf00      	nop
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}

08011914 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b086      	sub	sp, #24
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
 801191c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801191e:	2300      	movs	r3, #0
 8011920:	617b      	str	r3, [r7, #20]
 8011922:	2300      	movs	r3, #0
 8011924:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d008      	beq.n	801193e <pbuf_copy+0x2a>
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d005      	beq.n	801193e <pbuf_copy+0x2a>
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	891a      	ldrh	r2, [r3, #8]
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	891b      	ldrh	r3, [r3, #8]
 801193a:	429a      	cmp	r2, r3
 801193c:	d209      	bcs.n	8011952 <pbuf_copy+0x3e>
 801193e:	4b57      	ldr	r3, [pc, #348]	; (8011a9c <pbuf_copy+0x188>)
 8011940:	f240 32c9 	movw	r2, #969	; 0x3c9
 8011944:	4956      	ldr	r1, [pc, #344]	; (8011aa0 <pbuf_copy+0x18c>)
 8011946:	4857      	ldr	r0, [pc, #348]	; (8011aa4 <pbuf_copy+0x190>)
 8011948:	f00a f9e0 	bl	801bd0c <iprintf>
 801194c:	f06f 030f 	mvn.w	r3, #15
 8011950:	e09f      	b.n	8011a92 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	895b      	ldrh	r3, [r3, #10]
 8011956:	461a      	mov	r2, r3
 8011958:	697b      	ldr	r3, [r7, #20]
 801195a:	1ad2      	subs	r2, r2, r3
 801195c:	683b      	ldr	r3, [r7, #0]
 801195e:	895b      	ldrh	r3, [r3, #10]
 8011960:	4619      	mov	r1, r3
 8011962:	693b      	ldr	r3, [r7, #16]
 8011964:	1acb      	subs	r3, r1, r3
 8011966:	429a      	cmp	r2, r3
 8011968:	d306      	bcc.n	8011978 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	895b      	ldrh	r3, [r3, #10]
 801196e:	461a      	mov	r2, r3
 8011970:	693b      	ldr	r3, [r7, #16]
 8011972:	1ad3      	subs	r3, r2, r3
 8011974:	60fb      	str	r3, [r7, #12]
 8011976:	e005      	b.n	8011984 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	895b      	ldrh	r3, [r3, #10]
 801197c:	461a      	mov	r2, r3
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	685a      	ldr	r2, [r3, #4]
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	18d0      	adds	r0, r2, r3
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	685a      	ldr	r2, [r3, #4]
 8011990:	693b      	ldr	r3, [r7, #16]
 8011992:	4413      	add	r3, r2
 8011994:	68fa      	ldr	r2, [r7, #12]
 8011996:	4619      	mov	r1, r3
 8011998:	f009 fd60 	bl	801b45c <memcpy>
    offset_to += len;
 801199c:	697a      	ldr	r2, [r7, #20]
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	4413      	add	r3, r2
 80119a2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80119a4:	693a      	ldr	r2, [r7, #16]
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	4413      	add	r3, r2
 80119aa:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	895b      	ldrh	r3, [r3, #10]
 80119b0:	461a      	mov	r2, r3
 80119b2:	697b      	ldr	r3, [r7, #20]
 80119b4:	4293      	cmp	r3, r2
 80119b6:	d906      	bls.n	80119c6 <pbuf_copy+0xb2>
 80119b8:	4b38      	ldr	r3, [pc, #224]	; (8011a9c <pbuf_copy+0x188>)
 80119ba:	f240 32d9 	movw	r2, #985	; 0x3d9
 80119be:	493a      	ldr	r1, [pc, #232]	; (8011aa8 <pbuf_copy+0x194>)
 80119c0:	4838      	ldr	r0, [pc, #224]	; (8011aa4 <pbuf_copy+0x190>)
 80119c2:	f00a f9a3 	bl	801bd0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	895b      	ldrh	r3, [r3, #10]
 80119ca:	461a      	mov	r2, r3
 80119cc:	693b      	ldr	r3, [r7, #16]
 80119ce:	4293      	cmp	r3, r2
 80119d0:	d906      	bls.n	80119e0 <pbuf_copy+0xcc>
 80119d2:	4b32      	ldr	r3, [pc, #200]	; (8011a9c <pbuf_copy+0x188>)
 80119d4:	f240 32da 	movw	r2, #986	; 0x3da
 80119d8:	4934      	ldr	r1, [pc, #208]	; (8011aac <pbuf_copy+0x198>)
 80119da:	4832      	ldr	r0, [pc, #200]	; (8011aa4 <pbuf_copy+0x190>)
 80119dc:	f00a f996 	bl	801bd0c <iprintf>
    if (offset_from >= p_from->len) {
 80119e0:	683b      	ldr	r3, [r7, #0]
 80119e2:	895b      	ldrh	r3, [r3, #10]
 80119e4:	461a      	mov	r2, r3
 80119e6:	693b      	ldr	r3, [r7, #16]
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d304      	bcc.n	80119f6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80119ec:	2300      	movs	r3, #0
 80119ee:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80119f0:	683b      	ldr	r3, [r7, #0]
 80119f2:	681b      	ldr	r3, [r3, #0]
 80119f4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	895b      	ldrh	r3, [r3, #10]
 80119fa:	461a      	mov	r2, r3
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d114      	bne.n	8011a2c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011a02:	2300      	movs	r3, #0
 8011a04:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d10c      	bne.n	8011a2c <pbuf_copy+0x118>
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d009      	beq.n	8011a2c <pbuf_copy+0x118>
 8011a18:	4b20      	ldr	r3, [pc, #128]	; (8011a9c <pbuf_copy+0x188>)
 8011a1a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011a1e:	4924      	ldr	r1, [pc, #144]	; (8011ab0 <pbuf_copy+0x19c>)
 8011a20:	4820      	ldr	r0, [pc, #128]	; (8011aa4 <pbuf_copy+0x190>)
 8011a22:	f00a f973 	bl	801bd0c <iprintf>
 8011a26:	f06f 030f 	mvn.w	r3, #15
 8011a2a:	e032      	b.n	8011a92 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011a2c:	683b      	ldr	r3, [r7, #0]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d013      	beq.n	8011a5a <pbuf_copy+0x146>
 8011a32:	683b      	ldr	r3, [r7, #0]
 8011a34:	895a      	ldrh	r2, [r3, #10]
 8011a36:	683b      	ldr	r3, [r7, #0]
 8011a38:	891b      	ldrh	r3, [r3, #8]
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d10d      	bne.n	8011a5a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d009      	beq.n	8011a5a <pbuf_copy+0x146>
 8011a46:	4b15      	ldr	r3, [pc, #84]	; (8011a9c <pbuf_copy+0x188>)
 8011a48:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8011a4c:	4919      	ldr	r1, [pc, #100]	; (8011ab4 <pbuf_copy+0x1a0>)
 8011a4e:	4815      	ldr	r0, [pc, #84]	; (8011aa4 <pbuf_copy+0x190>)
 8011a50:	f00a f95c 	bl	801bd0c <iprintf>
 8011a54:	f06f 0305 	mvn.w	r3, #5
 8011a58:	e01b      	b.n	8011a92 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d013      	beq.n	8011a88 <pbuf_copy+0x174>
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	895a      	ldrh	r2, [r3, #10]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	891b      	ldrh	r3, [r3, #8]
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	d10d      	bne.n	8011a88 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d009      	beq.n	8011a88 <pbuf_copy+0x174>
 8011a74:	4b09      	ldr	r3, [pc, #36]	; (8011a9c <pbuf_copy+0x188>)
 8011a76:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8011a7a:	490e      	ldr	r1, [pc, #56]	; (8011ab4 <pbuf_copy+0x1a0>)
 8011a7c:	4809      	ldr	r0, [pc, #36]	; (8011aa4 <pbuf_copy+0x190>)
 8011a7e:	f00a f945 	bl	801bd0c <iprintf>
 8011a82:	f06f 0305 	mvn.w	r3, #5
 8011a86:	e004      	b.n	8011a92 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011a88:	683b      	ldr	r3, [r7, #0]
 8011a8a:	2b00      	cmp	r3, #0
 8011a8c:	f47f af61 	bne.w	8011952 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	0801f760 	.word	0x0801f760
 8011aa0:	0801fa08 	.word	0x0801fa08
 8011aa4:	0801f7c0 	.word	0x0801f7c0
 8011aa8:	0801fa38 	.word	0x0801fa38
 8011aac:	0801fa50 	.word	0x0801fa50
 8011ab0:	0801fa6c 	.word	0x0801fa6c
 8011ab4:	0801fa7c 	.word	0x0801fa7c

08011ab8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b088      	sub	sp, #32
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	60f8      	str	r0, [r7, #12]
 8011ac0:	60b9      	str	r1, [r7, #8]
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	461a      	mov	r2, r3
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	80fb      	strh	r3, [r7, #6]
 8011aca:	4613      	mov	r3, r2
 8011acc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011ad2:	2300      	movs	r3, #0
 8011ad4:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d108      	bne.n	8011aee <pbuf_copy_partial+0x36>
 8011adc:	4b2b      	ldr	r3, [pc, #172]	; (8011b8c <pbuf_copy_partial+0xd4>)
 8011ade:	f240 420a 	movw	r2, #1034	; 0x40a
 8011ae2:	492b      	ldr	r1, [pc, #172]	; (8011b90 <pbuf_copy_partial+0xd8>)
 8011ae4:	482b      	ldr	r0, [pc, #172]	; (8011b94 <pbuf_copy_partial+0xdc>)
 8011ae6:	f00a f911 	bl	801bd0c <iprintf>
 8011aea:	2300      	movs	r3, #0
 8011aec:	e04a      	b.n	8011b84 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d108      	bne.n	8011b06 <pbuf_copy_partial+0x4e>
 8011af4:	4b25      	ldr	r3, [pc, #148]	; (8011b8c <pbuf_copy_partial+0xd4>)
 8011af6:	f240 420b 	movw	r2, #1035	; 0x40b
 8011afa:	4927      	ldr	r1, [pc, #156]	; (8011b98 <pbuf_copy_partial+0xe0>)
 8011afc:	4825      	ldr	r0, [pc, #148]	; (8011b94 <pbuf_copy_partial+0xdc>)
 8011afe:	f00a f905 	bl	801bd0c <iprintf>
 8011b02:	2300      	movs	r3, #0
 8011b04:	e03e      	b.n	8011b84 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	61fb      	str	r3, [r7, #28]
 8011b0a:	e034      	b.n	8011b76 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011b0c:	88bb      	ldrh	r3, [r7, #4]
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	d00a      	beq.n	8011b28 <pbuf_copy_partial+0x70>
 8011b12:	69fb      	ldr	r3, [r7, #28]
 8011b14:	895b      	ldrh	r3, [r3, #10]
 8011b16:	88ba      	ldrh	r2, [r7, #4]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d305      	bcc.n	8011b28 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	895b      	ldrh	r3, [r3, #10]
 8011b20:	88ba      	ldrh	r2, [r7, #4]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	80bb      	strh	r3, [r7, #4]
 8011b26:	e023      	b.n	8011b70 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	895a      	ldrh	r2, [r3, #10]
 8011b2c:	88bb      	ldrh	r3, [r7, #4]
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011b32:	8b3a      	ldrh	r2, [r7, #24]
 8011b34:	88fb      	ldrh	r3, [r7, #6]
 8011b36:	429a      	cmp	r2, r3
 8011b38:	d901      	bls.n	8011b3e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011b3a:	88fb      	ldrh	r3, [r7, #6]
 8011b3c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8011b3e:	8b7b      	ldrh	r3, [r7, #26]
 8011b40:	68ba      	ldr	r2, [r7, #8]
 8011b42:	18d0      	adds	r0, r2, r3
 8011b44:	69fb      	ldr	r3, [r7, #28]
 8011b46:	685a      	ldr	r2, [r3, #4]
 8011b48:	88bb      	ldrh	r3, [r7, #4]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	8b3a      	ldrh	r2, [r7, #24]
 8011b4e:	4619      	mov	r1, r3
 8011b50:	f009 fc84 	bl	801b45c <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011b54:	8afa      	ldrh	r2, [r7, #22]
 8011b56:	8b3b      	ldrh	r3, [r7, #24]
 8011b58:	4413      	add	r3, r2
 8011b5a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011b5c:	8b7a      	ldrh	r2, [r7, #26]
 8011b5e:	8b3b      	ldrh	r3, [r7, #24]
 8011b60:	4413      	add	r3, r2
 8011b62:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011b64:	88fa      	ldrh	r2, [r7, #6]
 8011b66:	8b3b      	ldrh	r3, [r7, #24]
 8011b68:	1ad3      	subs	r3, r2, r3
 8011b6a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011b70:	69fb      	ldr	r3, [r7, #28]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	61fb      	str	r3, [r7, #28]
 8011b76:	88fb      	ldrh	r3, [r7, #6]
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d002      	beq.n	8011b82 <pbuf_copy_partial+0xca>
 8011b7c:	69fb      	ldr	r3, [r7, #28]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d1c4      	bne.n	8011b0c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011b82:	8afb      	ldrh	r3, [r7, #22]
}
 8011b84:	4618      	mov	r0, r3
 8011b86:	3720      	adds	r7, #32
 8011b88:	46bd      	mov	sp, r7
 8011b8a:	bd80      	pop	{r7, pc}
 8011b8c:	0801f760 	.word	0x0801f760
 8011b90:	0801faa8 	.word	0x0801faa8
 8011b94:	0801f7c0 	.word	0x0801f7c0
 8011b98:	0801fac8 	.word	0x0801fac8

08011b9c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011b9c:	b580      	push	{r7, lr}
 8011b9e:	b084      	sub	sp, #16
 8011ba0:	af00      	add	r7, sp, #0
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	603a      	str	r2, [r7, #0]
 8011ba6:	71fb      	strb	r3, [r7, #7]
 8011ba8:	460b      	mov	r3, r1
 8011baa:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	8919      	ldrh	r1, [r3, #8]
 8011bb0:	88ba      	ldrh	r2, [r7, #4]
 8011bb2:	79fb      	ldrb	r3, [r7, #7]
 8011bb4:	4618      	mov	r0, r3
 8011bb6:	f7ff fa63 	bl	8011080 <pbuf_alloc>
 8011bba:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011bbc:	68fb      	ldr	r3, [r7, #12]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d101      	bne.n	8011bc6 <pbuf_clone+0x2a>
    return NULL;
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	e011      	b.n	8011bea <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011bc6:	6839      	ldr	r1, [r7, #0]
 8011bc8:	68f8      	ldr	r0, [r7, #12]
 8011bca:	f7ff fea3 	bl	8011914 <pbuf_copy>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011bd2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d006      	beq.n	8011be8 <pbuf_clone+0x4c>
 8011bda:	4b06      	ldr	r3, [pc, #24]	; (8011bf4 <pbuf_clone+0x58>)
 8011bdc:	f240 5224 	movw	r2, #1316	; 0x524
 8011be0:	4905      	ldr	r1, [pc, #20]	; (8011bf8 <pbuf_clone+0x5c>)
 8011be2:	4806      	ldr	r0, [pc, #24]	; (8011bfc <pbuf_clone+0x60>)
 8011be4:	f00a f892 	bl	801bd0c <iprintf>
  return q;
 8011be8:	68fb      	ldr	r3, [r7, #12]
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3710      	adds	r7, #16
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	bd80      	pop	{r7, pc}
 8011bf2:	bf00      	nop
 8011bf4:	0801f760 	.word	0x0801f760
 8011bf8:	0801fbd4 	.word	0x0801fbd4
 8011bfc:	0801f7c0 	.word	0x0801f7c0

08011c00 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011c04:	f00a f910 	bl	801be28 <rand>
 8011c08:	4603      	mov	r3, r0
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011c10:	b29b      	uxth	r3, r3
 8011c12:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011c16:	b29a      	uxth	r2, r3
 8011c18:	4b01      	ldr	r3, [pc, #4]	; (8011c20 <tcp_init+0x20>)
 8011c1a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011c1c:	bf00      	nop
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	20000010 	.word	0x20000010

08011c24 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	7d1b      	ldrb	r3, [r3, #20]
 8011c30:	2b01      	cmp	r3, #1
 8011c32:	d105      	bne.n	8011c40 <tcp_free+0x1c>
 8011c34:	4b06      	ldr	r3, [pc, #24]	; (8011c50 <tcp_free+0x2c>)
 8011c36:	22d4      	movs	r2, #212	; 0xd4
 8011c38:	4906      	ldr	r1, [pc, #24]	; (8011c54 <tcp_free+0x30>)
 8011c3a:	4807      	ldr	r0, [pc, #28]	; (8011c58 <tcp_free+0x34>)
 8011c3c:	f00a f866 	bl	801bd0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011c40:	6879      	ldr	r1, [r7, #4]
 8011c42:	2001      	movs	r0, #1
 8011c44:	f7fe fe5c 	bl	8010900 <memp_free>
}
 8011c48:	bf00      	nop
 8011c4a:	3708      	adds	r7, #8
 8011c4c:	46bd      	mov	sp, r7
 8011c4e:	bd80      	pop	{r7, pc}
 8011c50:	0801fc60 	.word	0x0801fc60
 8011c54:	0801fc90 	.word	0x0801fc90
 8011c58:	0801fca4 	.word	0x0801fca4

08011c5c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	7d1b      	ldrb	r3, [r3, #20]
 8011c68:	2b01      	cmp	r3, #1
 8011c6a:	d105      	bne.n	8011c78 <tcp_free_listen+0x1c>
 8011c6c:	4b06      	ldr	r3, [pc, #24]	; (8011c88 <tcp_free_listen+0x2c>)
 8011c6e:	22df      	movs	r2, #223	; 0xdf
 8011c70:	4906      	ldr	r1, [pc, #24]	; (8011c8c <tcp_free_listen+0x30>)
 8011c72:	4807      	ldr	r0, [pc, #28]	; (8011c90 <tcp_free_listen+0x34>)
 8011c74:	f00a f84a 	bl	801bd0c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011c78:	6879      	ldr	r1, [r7, #4]
 8011c7a:	2002      	movs	r0, #2
 8011c7c:	f7fe fe40 	bl	8010900 <memp_free>
}
 8011c80:	bf00      	nop
 8011c82:	3708      	adds	r7, #8
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}
 8011c88:	0801fc60 	.word	0x0801fc60
 8011c8c:	0801fccc 	.word	0x0801fccc
 8011c90:	0801fca4 	.word	0x0801fca4

08011c94 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011c94:	b580      	push	{r7, lr}
 8011c96:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011c98:	f000 ffdc 	bl	8012c54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011c9c:	4b07      	ldr	r3, [pc, #28]	; (8011cbc <tcp_tmr+0x28>)
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	3301      	adds	r3, #1
 8011ca2:	b2da      	uxtb	r2, r3
 8011ca4:	4b05      	ldr	r3, [pc, #20]	; (8011cbc <tcp_tmr+0x28>)
 8011ca6:	701a      	strb	r2, [r3, #0]
 8011ca8:	4b04      	ldr	r3, [pc, #16]	; (8011cbc <tcp_tmr+0x28>)
 8011caa:	781b      	ldrb	r3, [r3, #0]
 8011cac:	f003 0301 	and.w	r3, r3, #1
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d001      	beq.n	8011cb8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011cb4:	f000 fc8e 	bl	80125d4 <tcp_slowtmr>
  }
}
 8011cb8:	bf00      	nop
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	200047f1 	.word	0x200047f1

08011cc0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b084      	sub	sp, #16
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d105      	bne.n	8011cdc <tcp_remove_listener+0x1c>
 8011cd0:	4b0d      	ldr	r3, [pc, #52]	; (8011d08 <tcp_remove_listener+0x48>)
 8011cd2:	22ff      	movs	r2, #255	; 0xff
 8011cd4:	490d      	ldr	r1, [pc, #52]	; (8011d0c <tcp_remove_listener+0x4c>)
 8011cd6:	480e      	ldr	r0, [pc, #56]	; (8011d10 <tcp_remove_listener+0x50>)
 8011cd8:	f00a f818 	bl	801bd0c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	60fb      	str	r3, [r7, #12]
 8011ce0:	e00a      	b.n	8011cf8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011ce6:	683a      	ldr	r2, [r7, #0]
 8011ce8:	429a      	cmp	r2, r3
 8011cea:	d102      	bne.n	8011cf2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	2200      	movs	r2, #0
 8011cf0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	68db      	ldr	r3, [r3, #12]
 8011cf6:	60fb      	str	r3, [r7, #12]
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1f1      	bne.n	8011ce2 <tcp_remove_listener+0x22>
    }
  }
}
 8011cfe:	bf00      	nop
 8011d00:	bf00      	nop
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	0801fc60 	.word	0x0801fc60
 8011d0c:	0801fce8 	.word	0x0801fce8
 8011d10:	0801fca4 	.word	0x0801fca4

08011d14 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b084      	sub	sp, #16
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d106      	bne.n	8011d30 <tcp_listen_closed+0x1c>
 8011d22:	4b14      	ldr	r3, [pc, #80]	; (8011d74 <tcp_listen_closed+0x60>)
 8011d24:	f240 1211 	movw	r2, #273	; 0x111
 8011d28:	4913      	ldr	r1, [pc, #76]	; (8011d78 <tcp_listen_closed+0x64>)
 8011d2a:	4814      	ldr	r0, [pc, #80]	; (8011d7c <tcp_listen_closed+0x68>)
 8011d2c:	f009 ffee 	bl	801bd0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7d1b      	ldrb	r3, [r3, #20]
 8011d34:	2b01      	cmp	r3, #1
 8011d36:	d006      	beq.n	8011d46 <tcp_listen_closed+0x32>
 8011d38:	4b0e      	ldr	r3, [pc, #56]	; (8011d74 <tcp_listen_closed+0x60>)
 8011d3a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011d3e:	4910      	ldr	r1, [pc, #64]	; (8011d80 <tcp_listen_closed+0x6c>)
 8011d40:	480e      	ldr	r0, [pc, #56]	; (8011d7c <tcp_listen_closed+0x68>)
 8011d42:	f009 ffe3 	bl	801bd0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011d46:	2301      	movs	r3, #1
 8011d48:	60fb      	str	r3, [r7, #12]
 8011d4a:	e00b      	b.n	8011d64 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011d4c:	4a0d      	ldr	r2, [pc, #52]	; (8011d84 <tcp_listen_closed+0x70>)
 8011d4e:	68fb      	ldr	r3, [r7, #12]
 8011d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d54:	681b      	ldr	r3, [r3, #0]
 8011d56:	6879      	ldr	r1, [r7, #4]
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7ff ffb1 	bl	8011cc0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	3301      	adds	r3, #1
 8011d62:	60fb      	str	r3, [r7, #12]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b03      	cmp	r3, #3
 8011d68:	d9f0      	bls.n	8011d4c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011d6a:	bf00      	nop
 8011d6c:	bf00      	nop
 8011d6e:	3710      	adds	r7, #16
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	0801fc60 	.word	0x0801fc60
 8011d78:	0801fd10 	.word	0x0801fd10
 8011d7c:	0801fca4 	.word	0x0801fca4
 8011d80:	0801fd1c 	.word	0x0801fd1c
 8011d84:	08021d34 	.word	0x08021d34

08011d88 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011d88:	b5b0      	push	{r4, r5, r7, lr}
 8011d8a:	b088      	sub	sp, #32
 8011d8c:	af04      	add	r7, sp, #16
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	460b      	mov	r3, r1
 8011d92:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d106      	bne.n	8011da8 <tcp_close_shutdown+0x20>
 8011d9a:	4b63      	ldr	r3, [pc, #396]	; (8011f28 <tcp_close_shutdown+0x1a0>)
 8011d9c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011da0:	4962      	ldr	r1, [pc, #392]	; (8011f2c <tcp_close_shutdown+0x1a4>)
 8011da2:	4863      	ldr	r0, [pc, #396]	; (8011f30 <tcp_close_shutdown+0x1a8>)
 8011da4:	f009 ffb2 	bl	801bd0c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011da8:	78fb      	ldrb	r3, [r7, #3]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d066      	beq.n	8011e7c <tcp_close_shutdown+0xf4>
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	7d1b      	ldrb	r3, [r3, #20]
 8011db2:	2b04      	cmp	r3, #4
 8011db4:	d003      	beq.n	8011dbe <tcp_close_shutdown+0x36>
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	7d1b      	ldrb	r3, [r3, #20]
 8011dba:	2b07      	cmp	r3, #7
 8011dbc:	d15e      	bne.n	8011e7c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d104      	bne.n	8011dd0 <tcp_close_shutdown+0x48>
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011dca:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011dce:	d055      	beq.n	8011e7c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	8b5b      	ldrh	r3, [r3, #26]
 8011dd4:	f003 0310 	and.w	r3, r3, #16
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d106      	bne.n	8011dea <tcp_close_shutdown+0x62>
 8011ddc:	4b52      	ldr	r3, [pc, #328]	; (8011f28 <tcp_close_shutdown+0x1a0>)
 8011dde:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011de2:	4954      	ldr	r1, [pc, #336]	; (8011f34 <tcp_close_shutdown+0x1ac>)
 8011de4:	4852      	ldr	r0, [pc, #328]	; (8011f30 <tcp_close_shutdown+0x1a8>)
 8011de6:	f009 ff91 	bl	801bd0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011df2:	687d      	ldr	r5, [r7, #4]
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	3304      	adds	r3, #4
 8011df8:	687a      	ldr	r2, [r7, #4]
 8011dfa:	8ad2      	ldrh	r2, [r2, #22]
 8011dfc:	6879      	ldr	r1, [r7, #4]
 8011dfe:	8b09      	ldrh	r1, [r1, #24]
 8011e00:	9102      	str	r1, [sp, #8]
 8011e02:	9201      	str	r2, [sp, #4]
 8011e04:	9300      	str	r3, [sp, #0]
 8011e06:	462b      	mov	r3, r5
 8011e08:	4622      	mov	r2, r4
 8011e0a:	4601      	mov	r1, r0
 8011e0c:	6878      	ldr	r0, [r7, #4]
 8011e0e:	f005 fced 	bl	80177ec <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011e12:	6878      	ldr	r0, [r7, #4]
 8011e14:	f001 face 	bl	80133b4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011e18:	4b47      	ldr	r3, [pc, #284]	; (8011f38 <tcp_close_shutdown+0x1b0>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d105      	bne.n	8011e2e <tcp_close_shutdown+0xa6>
 8011e22:	4b45      	ldr	r3, [pc, #276]	; (8011f38 <tcp_close_shutdown+0x1b0>)
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	68db      	ldr	r3, [r3, #12]
 8011e28:	4a43      	ldr	r2, [pc, #268]	; (8011f38 <tcp_close_shutdown+0x1b0>)
 8011e2a:	6013      	str	r3, [r2, #0]
 8011e2c:	e013      	b.n	8011e56 <tcp_close_shutdown+0xce>
 8011e2e:	4b42      	ldr	r3, [pc, #264]	; (8011f38 <tcp_close_shutdown+0x1b0>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	60fb      	str	r3, [r7, #12]
 8011e34:	e00c      	b.n	8011e50 <tcp_close_shutdown+0xc8>
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	68db      	ldr	r3, [r3, #12]
 8011e3a:	687a      	ldr	r2, [r7, #4]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d104      	bne.n	8011e4a <tcp_close_shutdown+0xc2>
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	68da      	ldr	r2, [r3, #12]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	60da      	str	r2, [r3, #12]
 8011e48:	e005      	b.n	8011e56 <tcp_close_shutdown+0xce>
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	68db      	ldr	r3, [r3, #12]
 8011e4e:	60fb      	str	r3, [r7, #12]
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d1ef      	bne.n	8011e36 <tcp_close_shutdown+0xae>
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2200      	movs	r2, #0
 8011e5a:	60da      	str	r2, [r3, #12]
 8011e5c:	4b37      	ldr	r3, [pc, #220]	; (8011f3c <tcp_close_shutdown+0x1b4>)
 8011e5e:	2201      	movs	r2, #1
 8011e60:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011e62:	4b37      	ldr	r3, [pc, #220]	; (8011f40 <tcp_close_shutdown+0x1b8>)
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	687a      	ldr	r2, [r7, #4]
 8011e68:	429a      	cmp	r2, r3
 8011e6a:	d102      	bne.n	8011e72 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011e6c:	f003 ff62 	bl	8015d34 <tcp_trigger_input_pcb_close>
 8011e70:	e002      	b.n	8011e78 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011e72:	6878      	ldr	r0, [r7, #4]
 8011e74:	f7ff fed6 	bl	8011c24 <tcp_free>
      }
      return ERR_OK;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	e050      	b.n	8011f1e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	7d1b      	ldrb	r3, [r3, #20]
 8011e80:	2b02      	cmp	r3, #2
 8011e82:	d03b      	beq.n	8011efc <tcp_close_shutdown+0x174>
 8011e84:	2b02      	cmp	r3, #2
 8011e86:	dc44      	bgt.n	8011f12 <tcp_close_shutdown+0x18a>
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d002      	beq.n	8011e92 <tcp_close_shutdown+0x10a>
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d02a      	beq.n	8011ee6 <tcp_close_shutdown+0x15e>
 8011e90:	e03f      	b.n	8011f12 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	8adb      	ldrh	r3, [r3, #22]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d021      	beq.n	8011ede <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011e9a:	4b2a      	ldr	r3, [pc, #168]	; (8011f44 <tcp_close_shutdown+0x1bc>)
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	429a      	cmp	r2, r3
 8011ea2:	d105      	bne.n	8011eb0 <tcp_close_shutdown+0x128>
 8011ea4:	4b27      	ldr	r3, [pc, #156]	; (8011f44 <tcp_close_shutdown+0x1bc>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	68db      	ldr	r3, [r3, #12]
 8011eaa:	4a26      	ldr	r2, [pc, #152]	; (8011f44 <tcp_close_shutdown+0x1bc>)
 8011eac:	6013      	str	r3, [r2, #0]
 8011eae:	e013      	b.n	8011ed8 <tcp_close_shutdown+0x150>
 8011eb0:	4b24      	ldr	r3, [pc, #144]	; (8011f44 <tcp_close_shutdown+0x1bc>)
 8011eb2:	681b      	ldr	r3, [r3, #0]
 8011eb4:	60bb      	str	r3, [r7, #8]
 8011eb6:	e00c      	b.n	8011ed2 <tcp_close_shutdown+0x14a>
 8011eb8:	68bb      	ldr	r3, [r7, #8]
 8011eba:	68db      	ldr	r3, [r3, #12]
 8011ebc:	687a      	ldr	r2, [r7, #4]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d104      	bne.n	8011ecc <tcp_close_shutdown+0x144>
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	68da      	ldr	r2, [r3, #12]
 8011ec6:	68bb      	ldr	r3, [r7, #8]
 8011ec8:	60da      	str	r2, [r3, #12]
 8011eca:	e005      	b.n	8011ed8 <tcp_close_shutdown+0x150>
 8011ecc:	68bb      	ldr	r3, [r7, #8]
 8011ece:	68db      	ldr	r3, [r3, #12]
 8011ed0:	60bb      	str	r3, [r7, #8]
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d1ef      	bne.n	8011eb8 <tcp_close_shutdown+0x130>
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	2200      	movs	r2, #0
 8011edc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011ede:	6878      	ldr	r0, [r7, #4]
 8011ee0:	f7ff fea0 	bl	8011c24 <tcp_free>
      break;
 8011ee4:	e01a      	b.n	8011f1c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff ff14 	bl	8011d14 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011eec:	6879      	ldr	r1, [r7, #4]
 8011eee:	4816      	ldr	r0, [pc, #88]	; (8011f48 <tcp_close_shutdown+0x1c0>)
 8011ef0:	f001 fab0 	bl	8013454 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011ef4:	6878      	ldr	r0, [r7, #4]
 8011ef6:	f7ff feb1 	bl	8011c5c <tcp_free_listen>
      break;
 8011efa:	e00f      	b.n	8011f1c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	480e      	ldr	r0, [pc, #56]	; (8011f38 <tcp_close_shutdown+0x1b0>)
 8011f00:	f001 faa8 	bl	8013454 <tcp_pcb_remove>
 8011f04:	4b0d      	ldr	r3, [pc, #52]	; (8011f3c <tcp_close_shutdown+0x1b4>)
 8011f06:	2201      	movs	r2, #1
 8011f08:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f7ff fe8a 	bl	8011c24 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011f10:	e004      	b.n	8011f1c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f000 f81a 	bl	8011f4c <tcp_close_shutdown_fin>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	e000      	b.n	8011f1e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3710      	adds	r7, #16
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bdb0      	pop	{r4, r5, r7, pc}
 8011f26:	bf00      	nop
 8011f28:	0801fc60 	.word	0x0801fc60
 8011f2c:	0801fd34 	.word	0x0801fd34
 8011f30:	0801fca4 	.word	0x0801fca4
 8011f34:	0801fd54 	.word	0x0801fd54
 8011f38:	2000d7bc 	.word	0x2000d7bc
 8011f3c:	2000d7b8 	.word	0x2000d7b8
 8011f40:	2000d7d0 	.word	0x2000d7d0
 8011f44:	2000d7c8 	.word	0x2000d7c8
 8011f48:	2000d7c4 	.word	0x2000d7c4

08011f4c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d106      	bne.n	8011f68 <tcp_close_shutdown_fin+0x1c>
 8011f5a:	4b2e      	ldr	r3, [pc, #184]	; (8012014 <tcp_close_shutdown_fin+0xc8>)
 8011f5c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011f60:	492d      	ldr	r1, [pc, #180]	; (8012018 <tcp_close_shutdown_fin+0xcc>)
 8011f62:	482e      	ldr	r0, [pc, #184]	; (801201c <tcp_close_shutdown_fin+0xd0>)
 8011f64:	f009 fed2 	bl	801bd0c <iprintf>

  switch (pcb->state) {
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	7d1b      	ldrb	r3, [r3, #20]
 8011f6c:	2b07      	cmp	r3, #7
 8011f6e:	d020      	beq.n	8011fb2 <tcp_close_shutdown_fin+0x66>
 8011f70:	2b07      	cmp	r3, #7
 8011f72:	dc2b      	bgt.n	8011fcc <tcp_close_shutdown_fin+0x80>
 8011f74:	2b03      	cmp	r3, #3
 8011f76:	d002      	beq.n	8011f7e <tcp_close_shutdown_fin+0x32>
 8011f78:	2b04      	cmp	r3, #4
 8011f7a:	d00d      	beq.n	8011f98 <tcp_close_shutdown_fin+0x4c>
 8011f7c:	e026      	b.n	8011fcc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011f7e:	6878      	ldr	r0, [r7, #4]
 8011f80:	f004 fd42 	bl	8016a08 <tcp_send_fin>
 8011f84:	4603      	mov	r3, r0
 8011f86:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d11f      	bne.n	8011fd0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	2205      	movs	r2, #5
 8011f94:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f96:	e01b      	b.n	8011fd0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f004 fd35 	bl	8016a08 <tcp_send_fin>
 8011f9e:	4603      	mov	r3, r0
 8011fa0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d114      	bne.n	8011fd4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2205      	movs	r2, #5
 8011fae:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011fb0:	e010      	b.n	8011fd4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f004 fd28 	bl	8016a08 <tcp_send_fin>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011fbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d109      	bne.n	8011fd8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	2209      	movs	r2, #9
 8011fc8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011fca:	e005      	b.n	8011fd8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	e01c      	b.n	801200a <tcp_close_shutdown_fin+0xbe>
      break;
 8011fd0:	bf00      	nop
 8011fd2:	e002      	b.n	8011fda <tcp_close_shutdown_fin+0x8e>
      break;
 8011fd4:	bf00      	nop
 8011fd6:	e000      	b.n	8011fda <tcp_close_shutdown_fin+0x8e>
      break;
 8011fd8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011fda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d103      	bne.n	8011fea <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f004 fe4e 	bl	8016c84 <tcp_output>
 8011fe8:	e00d      	b.n	8012006 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011fea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff2:	d108      	bne.n	8012006 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	8b5b      	ldrh	r3, [r3, #26]
 8011ff8:	f043 0308 	orr.w	r3, r3, #8
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012002:	2300      	movs	r3, #0
 8012004:	e001      	b.n	801200a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8012006:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801200a:	4618      	mov	r0, r3
 801200c:	3710      	adds	r7, #16
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	0801fc60 	.word	0x0801fc60
 8012018:	0801fd10 	.word	0x0801fd10
 801201c:	0801fca4 	.word	0x0801fca4

08012020 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012020:	b580      	push	{r7, lr}
 8012022:	b082      	sub	sp, #8
 8012024:	af00      	add	r7, sp, #0
 8012026:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d109      	bne.n	8012042 <tcp_close+0x22>
 801202e:	4b0f      	ldr	r3, [pc, #60]	; (801206c <tcp_close+0x4c>)
 8012030:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8012034:	490e      	ldr	r1, [pc, #56]	; (8012070 <tcp_close+0x50>)
 8012036:	480f      	ldr	r0, [pc, #60]	; (8012074 <tcp_close+0x54>)
 8012038:	f009 fe68 	bl	801bd0c <iprintf>
 801203c:	f06f 030f 	mvn.w	r3, #15
 8012040:	e00f      	b.n	8012062 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	7d1b      	ldrb	r3, [r3, #20]
 8012046:	2b01      	cmp	r3, #1
 8012048:	d006      	beq.n	8012058 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	8b5b      	ldrh	r3, [r3, #26]
 801204e:	f043 0310 	orr.w	r3, r3, #16
 8012052:	b29a      	uxth	r2, r3
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012058:	2101      	movs	r1, #1
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f7ff fe94 	bl	8011d88 <tcp_close_shutdown>
 8012060:	4603      	mov	r3, r0
}
 8012062:	4618      	mov	r0, r3
 8012064:	3708      	adds	r7, #8
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	0801fc60 	.word	0x0801fc60
 8012070:	0801fd70 	.word	0x0801fd70
 8012074:	0801fca4 	.word	0x0801fca4

08012078 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b084      	sub	sp, #16
 801207c:	af00      	add	r7, sp, #0
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	60b9      	str	r1, [r7, #8]
 8012082:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8012084:	68fb      	ldr	r3, [r7, #12]
 8012086:	2b00      	cmp	r3, #0
 8012088:	d109      	bne.n	801209e <tcp_shutdown+0x26>
 801208a:	4b26      	ldr	r3, [pc, #152]	; (8012124 <tcp_shutdown+0xac>)
 801208c:	f240 2207 	movw	r2, #519	; 0x207
 8012090:	4925      	ldr	r1, [pc, #148]	; (8012128 <tcp_shutdown+0xb0>)
 8012092:	4826      	ldr	r0, [pc, #152]	; (801212c <tcp_shutdown+0xb4>)
 8012094:	f009 fe3a 	bl	801bd0c <iprintf>
 8012098:	f06f 030f 	mvn.w	r3, #15
 801209c:	e03d      	b.n	801211a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	7d1b      	ldrb	r3, [r3, #20]
 80120a2:	2b01      	cmp	r3, #1
 80120a4:	d102      	bne.n	80120ac <tcp_shutdown+0x34>
    return ERR_CONN;
 80120a6:	f06f 030a 	mvn.w	r3, #10
 80120aa:	e036      	b.n	801211a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80120ac:	68bb      	ldr	r3, [r7, #8]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d01b      	beq.n	80120ea <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80120b2:	68fb      	ldr	r3, [r7, #12]
 80120b4:	8b5b      	ldrh	r3, [r3, #26]
 80120b6:	f043 0310 	orr.w	r3, r3, #16
 80120ba:	b29a      	uxth	r2, r3
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d005      	beq.n	80120d2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80120c6:	2101      	movs	r1, #1
 80120c8:	68f8      	ldr	r0, [r7, #12]
 80120ca:	f7ff fe5d 	bl	8011d88 <tcp_close_shutdown>
 80120ce:	4603      	mov	r3, r0
 80120d0:	e023      	b.n	801211a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d007      	beq.n	80120ea <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80120de:	4618      	mov	r0, r3
 80120e0:	f7ff fae4 	bl	80116ac <pbuf_free>
      pcb->refused_data = NULL;
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	2200      	movs	r2, #0
 80120e8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d013      	beq.n	8012118 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	7d1b      	ldrb	r3, [r3, #20]
 80120f4:	2b04      	cmp	r3, #4
 80120f6:	dc02      	bgt.n	80120fe <tcp_shutdown+0x86>
 80120f8:	2b03      	cmp	r3, #3
 80120fa:	da02      	bge.n	8012102 <tcp_shutdown+0x8a>
 80120fc:	e009      	b.n	8012112 <tcp_shutdown+0x9a>
 80120fe:	2b07      	cmp	r3, #7
 8012100:	d107      	bne.n	8012112 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8012102:	68bb      	ldr	r3, [r7, #8]
 8012104:	b2db      	uxtb	r3, r3
 8012106:	4619      	mov	r1, r3
 8012108:	68f8      	ldr	r0, [r7, #12]
 801210a:	f7ff fe3d 	bl	8011d88 <tcp_close_shutdown>
 801210e:	4603      	mov	r3, r0
 8012110:	e003      	b.n	801211a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8012112:	f06f 030a 	mvn.w	r3, #10
 8012116:	e000      	b.n	801211a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8012118:	2300      	movs	r3, #0
}
 801211a:	4618      	mov	r0, r3
 801211c:	3710      	adds	r7, #16
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	0801fc60 	.word	0x0801fc60
 8012128:	0801fd88 	.word	0x0801fd88
 801212c:	0801fca4 	.word	0x0801fca4

08012130 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012130:	b580      	push	{r7, lr}
 8012132:	b08e      	sub	sp, #56	; 0x38
 8012134:	af04      	add	r7, sp, #16
 8012136:	6078      	str	r0, [r7, #4]
 8012138:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d107      	bne.n	8012150 <tcp_abandon+0x20>
 8012140:	4b52      	ldr	r3, [pc, #328]	; (801228c <tcp_abandon+0x15c>)
 8012142:	f240 223d 	movw	r2, #573	; 0x23d
 8012146:	4952      	ldr	r1, [pc, #328]	; (8012290 <tcp_abandon+0x160>)
 8012148:	4852      	ldr	r0, [pc, #328]	; (8012294 <tcp_abandon+0x164>)
 801214a:	f009 fddf 	bl	801bd0c <iprintf>
 801214e:	e099      	b.n	8012284 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	7d1b      	ldrb	r3, [r3, #20]
 8012154:	2b01      	cmp	r3, #1
 8012156:	d106      	bne.n	8012166 <tcp_abandon+0x36>
 8012158:	4b4c      	ldr	r3, [pc, #304]	; (801228c <tcp_abandon+0x15c>)
 801215a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801215e:	494e      	ldr	r1, [pc, #312]	; (8012298 <tcp_abandon+0x168>)
 8012160:	484c      	ldr	r0, [pc, #304]	; (8012294 <tcp_abandon+0x164>)
 8012162:	f009 fdd3 	bl	801bd0c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	7d1b      	ldrb	r3, [r3, #20]
 801216a:	2b0a      	cmp	r3, #10
 801216c:	d107      	bne.n	801217e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801216e:	6879      	ldr	r1, [r7, #4]
 8012170:	484a      	ldr	r0, [pc, #296]	; (801229c <tcp_abandon+0x16c>)
 8012172:	f001 f96f 	bl	8013454 <tcp_pcb_remove>
    tcp_free(pcb);
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff fd54 	bl	8011c24 <tcp_free>
 801217c:	e082      	b.n	8012284 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012182:	2300      	movs	r3, #0
 8012184:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801218a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012190:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012198:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	691b      	ldr	r3, [r3, #16]
 801219e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	7d1b      	ldrb	r3, [r3, #20]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d126      	bne.n	80121f6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	8adb      	ldrh	r3, [r3, #22]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d02e      	beq.n	801220e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80121b0:	4b3b      	ldr	r3, [pc, #236]	; (80122a0 <tcp_abandon+0x170>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	429a      	cmp	r2, r3
 80121b8:	d105      	bne.n	80121c6 <tcp_abandon+0x96>
 80121ba:	4b39      	ldr	r3, [pc, #228]	; (80122a0 <tcp_abandon+0x170>)
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	4a37      	ldr	r2, [pc, #220]	; (80122a0 <tcp_abandon+0x170>)
 80121c2:	6013      	str	r3, [r2, #0]
 80121c4:	e013      	b.n	80121ee <tcp_abandon+0xbe>
 80121c6:	4b36      	ldr	r3, [pc, #216]	; (80122a0 <tcp_abandon+0x170>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	61fb      	str	r3, [r7, #28]
 80121cc:	e00c      	b.n	80121e8 <tcp_abandon+0xb8>
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	68db      	ldr	r3, [r3, #12]
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	429a      	cmp	r2, r3
 80121d6:	d104      	bne.n	80121e2 <tcp_abandon+0xb2>
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	68da      	ldr	r2, [r3, #12]
 80121dc:	69fb      	ldr	r3, [r7, #28]
 80121de:	60da      	str	r2, [r3, #12]
 80121e0:	e005      	b.n	80121ee <tcp_abandon+0xbe>
 80121e2:	69fb      	ldr	r3, [r7, #28]
 80121e4:	68db      	ldr	r3, [r3, #12]
 80121e6:	61fb      	str	r3, [r7, #28]
 80121e8:	69fb      	ldr	r3, [r7, #28]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d1ef      	bne.n	80121ce <tcp_abandon+0x9e>
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	2200      	movs	r2, #0
 80121f2:	60da      	str	r2, [r3, #12]
 80121f4:	e00b      	b.n	801220e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	8adb      	ldrh	r3, [r3, #22]
 80121fe:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012200:	6879      	ldr	r1, [r7, #4]
 8012202:	4828      	ldr	r0, [pc, #160]	; (80122a4 <tcp_abandon+0x174>)
 8012204:	f001 f926 	bl	8013454 <tcp_pcb_remove>
 8012208:	4b27      	ldr	r3, [pc, #156]	; (80122a8 <tcp_abandon+0x178>)
 801220a:	2201      	movs	r2, #1
 801220c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012212:	2b00      	cmp	r3, #0
 8012214:	d004      	beq.n	8012220 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801221a:	4618      	mov	r0, r3
 801221c:	f000 fdfa 	bl	8012e14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012224:	2b00      	cmp	r3, #0
 8012226:	d004      	beq.n	8012232 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801222c:	4618      	mov	r0, r3
 801222e:	f000 fdf1 	bl	8012e14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012236:	2b00      	cmp	r3, #0
 8012238:	d004      	beq.n	8012244 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801223e:	4618      	mov	r0, r3
 8012240:	f000 fde8 	bl	8012e14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012246:	2b00      	cmp	r3, #0
 8012248:	d00e      	beq.n	8012268 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801224a:	6879      	ldr	r1, [r7, #4]
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	3304      	adds	r3, #4
 8012250:	687a      	ldr	r2, [r7, #4]
 8012252:	8b12      	ldrh	r2, [r2, #24]
 8012254:	9202      	str	r2, [sp, #8]
 8012256:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012258:	9201      	str	r2, [sp, #4]
 801225a:	9300      	str	r3, [sp, #0]
 801225c:	460b      	mov	r3, r1
 801225e:	697a      	ldr	r2, [r7, #20]
 8012260:	69b9      	ldr	r1, [r7, #24]
 8012262:	6878      	ldr	r0, [r7, #4]
 8012264:	f005 fac2 	bl	80177ec <tcp_rst>
    }
    last_state = pcb->state;
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	7d1b      	ldrb	r3, [r3, #20]
 801226c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff fcd8 	bl	8011c24 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012274:	693b      	ldr	r3, [r7, #16]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d004      	beq.n	8012284 <tcp_abandon+0x154>
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	f06f 010c 	mvn.w	r1, #12
 8012280:	68f8      	ldr	r0, [r7, #12]
 8012282:	4798      	blx	r3
  }
}
 8012284:	3728      	adds	r7, #40	; 0x28
 8012286:	46bd      	mov	sp, r7
 8012288:	bd80      	pop	{r7, pc}
 801228a:	bf00      	nop
 801228c:	0801fc60 	.word	0x0801fc60
 8012290:	0801fda4 	.word	0x0801fda4
 8012294:	0801fca4 	.word	0x0801fca4
 8012298:	0801fdc0 	.word	0x0801fdc0
 801229c:	2000d7cc 	.word	0x2000d7cc
 80122a0:	2000d7c8 	.word	0x2000d7c8
 80122a4:	2000d7bc 	.word	0x2000d7bc
 80122a8:	2000d7b8 	.word	0x2000d7b8

080122ac <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80122ac:	b580      	push	{r7, lr}
 80122ae:	b082      	sub	sp, #8
 80122b0:	af00      	add	r7, sp, #0
 80122b2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80122b4:	2101      	movs	r1, #1
 80122b6:	6878      	ldr	r0, [r7, #4]
 80122b8:	f7ff ff3a 	bl	8012130 <tcp_abandon>
}
 80122bc:	bf00      	nop
 80122be:	3708      	adds	r7, #8
 80122c0:	46bd      	mov	sp, r7
 80122c2:	bd80      	pop	{r7, pc}

080122c4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b088      	sub	sp, #32
 80122c8:	af00      	add	r7, sp, #0
 80122ca:	60f8      	str	r0, [r7, #12]
 80122cc:	60b9      	str	r1, [r7, #8]
 80122ce:	4613      	mov	r3, r2
 80122d0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80122d2:	2304      	movs	r3, #4
 80122d4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80122d6:	68bb      	ldr	r3, [r7, #8]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d101      	bne.n	80122e0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80122dc:	4b3e      	ldr	r3, [pc, #248]	; (80123d8 <tcp_bind+0x114>)
 80122de:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d109      	bne.n	80122fa <tcp_bind+0x36>
 80122e6:	4b3d      	ldr	r3, [pc, #244]	; (80123dc <tcp_bind+0x118>)
 80122e8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80122ec:	493c      	ldr	r1, [pc, #240]	; (80123e0 <tcp_bind+0x11c>)
 80122ee:	483d      	ldr	r0, [pc, #244]	; (80123e4 <tcp_bind+0x120>)
 80122f0:	f009 fd0c 	bl	801bd0c <iprintf>
 80122f4:	f06f 030f 	mvn.w	r3, #15
 80122f8:	e06a      	b.n	80123d0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	7d1b      	ldrb	r3, [r3, #20]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	d009      	beq.n	8012316 <tcp_bind+0x52>
 8012302:	4b36      	ldr	r3, [pc, #216]	; (80123dc <tcp_bind+0x118>)
 8012304:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012308:	4937      	ldr	r1, [pc, #220]	; (80123e8 <tcp_bind+0x124>)
 801230a:	4836      	ldr	r0, [pc, #216]	; (80123e4 <tcp_bind+0x120>)
 801230c:	f009 fcfe 	bl	801bd0c <iprintf>
 8012310:	f06f 0305 	mvn.w	r3, #5
 8012314:	e05c      	b.n	80123d0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012316:	88fb      	ldrh	r3, [r7, #6]
 8012318:	2b00      	cmp	r3, #0
 801231a:	d109      	bne.n	8012330 <tcp_bind+0x6c>
    port = tcp_new_port();
 801231c:	f000 f914 	bl	8012548 <tcp_new_port>
 8012320:	4603      	mov	r3, r0
 8012322:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012324:	88fb      	ldrh	r3, [r7, #6]
 8012326:	2b00      	cmp	r3, #0
 8012328:	d135      	bne.n	8012396 <tcp_bind+0xd2>
      return ERR_BUF;
 801232a:	f06f 0301 	mvn.w	r3, #1
 801232e:	e04f      	b.n	80123d0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012330:	2300      	movs	r3, #0
 8012332:	61fb      	str	r3, [r7, #28]
 8012334:	e02b      	b.n	801238e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012336:	4a2d      	ldr	r2, [pc, #180]	; (80123ec <tcp_bind+0x128>)
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	61bb      	str	r3, [r7, #24]
 8012342:	e01e      	b.n	8012382 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012344:	69bb      	ldr	r3, [r7, #24]
 8012346:	8adb      	ldrh	r3, [r3, #22]
 8012348:	88fa      	ldrh	r2, [r7, #6]
 801234a:	429a      	cmp	r2, r3
 801234c:	d116      	bne.n	801237c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801234e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012350:	2b00      	cmp	r3, #0
 8012352:	d010      	beq.n	8012376 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012354:	69bb      	ldr	r3, [r7, #24]
 8012356:	681b      	ldr	r3, [r3, #0]
 8012358:	2b00      	cmp	r3, #0
 801235a:	d00c      	beq.n	8012376 <tcp_bind+0xb2>
 801235c:	68bb      	ldr	r3, [r7, #8]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d009      	beq.n	8012376 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012362:	68bb      	ldr	r3, [r7, #8]
 8012364:	681b      	ldr	r3, [r3, #0]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d005      	beq.n	8012376 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801236a:	69bb      	ldr	r3, [r7, #24]
 801236c:	681a      	ldr	r2, [r3, #0]
 801236e:	68bb      	ldr	r3, [r7, #8]
 8012370:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012372:	429a      	cmp	r2, r3
 8012374:	d102      	bne.n	801237c <tcp_bind+0xb8>
              return ERR_USE;
 8012376:	f06f 0307 	mvn.w	r3, #7
 801237a:	e029      	b.n	80123d0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801237c:	69bb      	ldr	r3, [r7, #24]
 801237e:	68db      	ldr	r3, [r3, #12]
 8012380:	61bb      	str	r3, [r7, #24]
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d1dd      	bne.n	8012344 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012388:	69fb      	ldr	r3, [r7, #28]
 801238a:	3301      	adds	r3, #1
 801238c:	61fb      	str	r3, [r7, #28]
 801238e:	69fa      	ldr	r2, [r7, #28]
 8012390:	697b      	ldr	r3, [r7, #20]
 8012392:	429a      	cmp	r2, r3
 8012394:	dbcf      	blt.n	8012336 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012396:	68bb      	ldr	r3, [r7, #8]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d00c      	beq.n	80123b6 <tcp_bind+0xf2>
 801239c:	68bb      	ldr	r3, [r7, #8]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d008      	beq.n	80123b6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80123a4:	68bb      	ldr	r3, [r7, #8]
 80123a6:	2b00      	cmp	r3, #0
 80123a8:	d002      	beq.n	80123b0 <tcp_bind+0xec>
 80123aa:	68bb      	ldr	r3, [r7, #8]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	e000      	b.n	80123b2 <tcp_bind+0xee>
 80123b0:	2300      	movs	r3, #0
 80123b2:	68fa      	ldr	r2, [r7, #12]
 80123b4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	88fa      	ldrh	r2, [r7, #6]
 80123ba:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80123bc:	4b0c      	ldr	r3, [pc, #48]	; (80123f0 <tcp_bind+0x12c>)
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	60da      	str	r2, [r3, #12]
 80123c4:	4a0a      	ldr	r2, [pc, #40]	; (80123f0 <tcp_bind+0x12c>)
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	6013      	str	r3, [r2, #0]
 80123ca:	f005 fbd1 	bl	8017b70 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80123ce:	2300      	movs	r3, #0
}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3720      	adds	r7, #32
 80123d4:	46bd      	mov	sp, r7
 80123d6:	bd80      	pop	{r7, pc}
 80123d8:	08021d5c 	.word	0x08021d5c
 80123dc:	0801fc60 	.word	0x0801fc60
 80123e0:	0801fdf4 	.word	0x0801fdf4
 80123e4:	0801fca4 	.word	0x0801fca4
 80123e8:	0801fe0c 	.word	0x0801fe0c
 80123ec:	08021d34 	.word	0x08021d34
 80123f0:	2000d7c8 	.word	0x2000d7c8

080123f4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b084      	sub	sp, #16
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	2b00      	cmp	r3, #0
 8012400:	d106      	bne.n	8012410 <tcp_update_rcv_ann_wnd+0x1c>
 8012402:	4b25      	ldr	r3, [pc, #148]	; (8012498 <tcp_update_rcv_ann_wnd+0xa4>)
 8012404:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012408:	4924      	ldr	r1, [pc, #144]	; (801249c <tcp_update_rcv_ann_wnd+0xa8>)
 801240a:	4825      	ldr	r0, [pc, #148]	; (80124a0 <tcp_update_rcv_ann_wnd+0xac>)
 801240c:	f009 fc7e 	bl	801bd0c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012418:	4413      	add	r3, r2
 801241a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012420:	687a      	ldr	r2, [r7, #4]
 8012422:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012424:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012428:	bf28      	it	cs
 801242a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 801242e:	b292      	uxth	r2, r2
 8012430:	4413      	add	r3, r2
 8012432:	68fa      	ldr	r2, [r7, #12]
 8012434:	1ad3      	subs	r3, r2, r3
 8012436:	2b00      	cmp	r3, #0
 8012438:	db08      	blt.n	801244c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012446:	68fa      	ldr	r2, [r7, #12]
 8012448:	1ad3      	subs	r3, r2, r3
 801244a:	e020      	b.n	801248e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012454:	1ad3      	subs	r3, r2, r3
 8012456:	2b00      	cmp	r3, #0
 8012458:	dd03      	ble.n	8012462 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	2200      	movs	r2, #0
 801245e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012460:	e014      	b.n	801248c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801246a:	1ad3      	subs	r3, r2, r3
 801246c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012474:	d306      	bcc.n	8012484 <tcp_update_rcv_ann_wnd+0x90>
 8012476:	4b08      	ldr	r3, [pc, #32]	; (8012498 <tcp_update_rcv_ann_wnd+0xa4>)
 8012478:	f240 32b6 	movw	r2, #950	; 0x3b6
 801247c:	4909      	ldr	r1, [pc, #36]	; (80124a4 <tcp_update_rcv_ann_wnd+0xb0>)
 801247e:	4808      	ldr	r0, [pc, #32]	; (80124a0 <tcp_update_rcv_ann_wnd+0xac>)
 8012480:	f009 fc44 	bl	801bd0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012484:	68bb      	ldr	r3, [r7, #8]
 8012486:	b29a      	uxth	r2, r3
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 801248c:	2300      	movs	r3, #0
  }
}
 801248e:	4618      	mov	r0, r3
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	0801fc60 	.word	0x0801fc60
 801249c:	0801febc 	.word	0x0801febc
 80124a0:	0801fca4 	.word	0x0801fca4
 80124a4:	0801fee0 	.word	0x0801fee0

080124a8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80124a8:	b580      	push	{r7, lr}
 80124aa:	b084      	sub	sp, #16
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	6078      	str	r0, [r7, #4]
 80124b0:	460b      	mov	r3, r1
 80124b2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d107      	bne.n	80124ca <tcp_recved+0x22>
 80124ba:	4b1f      	ldr	r3, [pc, #124]	; (8012538 <tcp_recved+0x90>)
 80124bc:	f240 32cf 	movw	r2, #975	; 0x3cf
 80124c0:	491e      	ldr	r1, [pc, #120]	; (801253c <tcp_recved+0x94>)
 80124c2:	481f      	ldr	r0, [pc, #124]	; (8012540 <tcp_recved+0x98>)
 80124c4:	f009 fc22 	bl	801bd0c <iprintf>
 80124c8:	e032      	b.n	8012530 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	7d1b      	ldrb	r3, [r3, #20]
 80124ce:	2b01      	cmp	r3, #1
 80124d0:	d106      	bne.n	80124e0 <tcp_recved+0x38>
 80124d2:	4b19      	ldr	r3, [pc, #100]	; (8012538 <tcp_recved+0x90>)
 80124d4:	f240 32d2 	movw	r2, #978	; 0x3d2
 80124d8:	491a      	ldr	r1, [pc, #104]	; (8012544 <tcp_recved+0x9c>)
 80124da:	4819      	ldr	r0, [pc, #100]	; (8012540 <tcp_recved+0x98>)
 80124dc:	f009 fc16 	bl	801bd0c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80124e4:	887b      	ldrh	r3, [r7, #2]
 80124e6:	4413      	add	r3, r2
 80124e8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80124ea:	89fb      	ldrh	r3, [r7, #14]
 80124ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80124f0:	d804      	bhi.n	80124fc <tcp_recved+0x54>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80124f6:	89fa      	ldrh	r2, [r7, #14]
 80124f8:	429a      	cmp	r2, r3
 80124fa:	d204      	bcs.n	8012506 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012502:	851a      	strh	r2, [r3, #40]	; 0x28
 8012504:	e002      	b.n	801250c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	89fa      	ldrh	r2, [r7, #14]
 801250a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f7ff ff71 	bl	80123f4 <tcp_update_rcv_ann_wnd>
 8012512:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801251a:	d309      	bcc.n	8012530 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	8b5b      	ldrh	r3, [r3, #26]
 8012520:	f043 0302 	orr.w	r3, r3, #2
 8012524:	b29a      	uxth	r2, r3
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801252a:	6878      	ldr	r0, [r7, #4]
 801252c:	f004 fbaa 	bl	8016c84 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012530:	3710      	adds	r7, #16
 8012532:	46bd      	mov	sp, r7
 8012534:	bd80      	pop	{r7, pc}
 8012536:	bf00      	nop
 8012538:	0801fc60 	.word	0x0801fc60
 801253c:	0801fefc 	.word	0x0801fefc
 8012540:	0801fca4 	.word	0x0801fca4
 8012544:	0801ff14 	.word	0x0801ff14

08012548 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012548:	b480      	push	{r7}
 801254a:	b083      	sub	sp, #12
 801254c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012552:	4b1e      	ldr	r3, [pc, #120]	; (80125cc <tcp_new_port+0x84>)
 8012554:	881b      	ldrh	r3, [r3, #0]
 8012556:	3301      	adds	r3, #1
 8012558:	b29a      	uxth	r2, r3
 801255a:	4b1c      	ldr	r3, [pc, #112]	; (80125cc <tcp_new_port+0x84>)
 801255c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801255e:	4b1b      	ldr	r3, [pc, #108]	; (80125cc <tcp_new_port+0x84>)
 8012560:	881b      	ldrh	r3, [r3, #0]
 8012562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012566:	4293      	cmp	r3, r2
 8012568:	d103      	bne.n	8012572 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801256a:	4b18      	ldr	r3, [pc, #96]	; (80125cc <tcp_new_port+0x84>)
 801256c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012570:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012572:	2300      	movs	r3, #0
 8012574:	71fb      	strb	r3, [r7, #7]
 8012576:	e01e      	b.n	80125b6 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012578:	79fb      	ldrb	r3, [r7, #7]
 801257a:	4a15      	ldr	r2, [pc, #84]	; (80125d0 <tcp_new_port+0x88>)
 801257c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	603b      	str	r3, [r7, #0]
 8012584:	e011      	b.n	80125aa <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012586:	683b      	ldr	r3, [r7, #0]
 8012588:	8ada      	ldrh	r2, [r3, #22]
 801258a:	4b10      	ldr	r3, [pc, #64]	; (80125cc <tcp_new_port+0x84>)
 801258c:	881b      	ldrh	r3, [r3, #0]
 801258e:	429a      	cmp	r2, r3
 8012590:	d108      	bne.n	80125a4 <tcp_new_port+0x5c>
        n++;
 8012592:	88bb      	ldrh	r3, [r7, #4]
 8012594:	3301      	adds	r3, #1
 8012596:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012598:	88bb      	ldrh	r3, [r7, #4]
 801259a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801259e:	d3d8      	bcc.n	8012552 <tcp_new_port+0xa>
          return 0;
 80125a0:	2300      	movs	r3, #0
 80125a2:	e00d      	b.n	80125c0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	603b      	str	r3, [r7, #0]
 80125aa:	683b      	ldr	r3, [r7, #0]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d1ea      	bne.n	8012586 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80125b0:	79fb      	ldrb	r3, [r7, #7]
 80125b2:	3301      	adds	r3, #1
 80125b4:	71fb      	strb	r3, [r7, #7]
 80125b6:	79fb      	ldrb	r3, [r7, #7]
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d9dd      	bls.n	8012578 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80125bc:	4b03      	ldr	r3, [pc, #12]	; (80125cc <tcp_new_port+0x84>)
 80125be:	881b      	ldrh	r3, [r3, #0]
}
 80125c0:	4618      	mov	r0, r3
 80125c2:	370c      	adds	r7, #12
 80125c4:	46bd      	mov	sp, r7
 80125c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125ca:	4770      	bx	lr
 80125cc:	20000010 	.word	0x20000010
 80125d0:	08021d34 	.word	0x08021d34

080125d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80125d4:	b5b0      	push	{r4, r5, r7, lr}
 80125d6:	b090      	sub	sp, #64	; 0x40
 80125d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80125e0:	4b94      	ldr	r3, [pc, #592]	; (8012834 <tcp_slowtmr+0x260>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	3301      	adds	r3, #1
 80125e6:	4a93      	ldr	r2, [pc, #588]	; (8012834 <tcp_slowtmr+0x260>)
 80125e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80125ea:	4b93      	ldr	r3, [pc, #588]	; (8012838 <tcp_slowtmr+0x264>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	3301      	adds	r3, #1
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	4b91      	ldr	r3, [pc, #580]	; (8012838 <tcp_slowtmr+0x264>)
 80125f4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80125f6:	2300      	movs	r3, #0
 80125f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80125fa:	4b90      	ldr	r3, [pc, #576]	; (801283c <tcp_slowtmr+0x268>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012600:	e29d      	b.n	8012b3e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012604:	7d1b      	ldrb	r3, [r3, #20]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d106      	bne.n	8012618 <tcp_slowtmr+0x44>
 801260a:	4b8d      	ldr	r3, [pc, #564]	; (8012840 <tcp_slowtmr+0x26c>)
 801260c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012610:	498c      	ldr	r1, [pc, #560]	; (8012844 <tcp_slowtmr+0x270>)
 8012612:	488d      	ldr	r0, [pc, #564]	; (8012848 <tcp_slowtmr+0x274>)
 8012614:	f009 fb7a 	bl	801bd0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261a:	7d1b      	ldrb	r3, [r3, #20]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d106      	bne.n	801262e <tcp_slowtmr+0x5a>
 8012620:	4b87      	ldr	r3, [pc, #540]	; (8012840 <tcp_slowtmr+0x26c>)
 8012622:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012626:	4989      	ldr	r1, [pc, #548]	; (801284c <tcp_slowtmr+0x278>)
 8012628:	4887      	ldr	r0, [pc, #540]	; (8012848 <tcp_slowtmr+0x274>)
 801262a:	f009 fb6f 	bl	801bd0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	7d1b      	ldrb	r3, [r3, #20]
 8012632:	2b0a      	cmp	r3, #10
 8012634:	d106      	bne.n	8012644 <tcp_slowtmr+0x70>
 8012636:	4b82      	ldr	r3, [pc, #520]	; (8012840 <tcp_slowtmr+0x26c>)
 8012638:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801263c:	4984      	ldr	r1, [pc, #528]	; (8012850 <tcp_slowtmr+0x27c>)
 801263e:	4882      	ldr	r0, [pc, #520]	; (8012848 <tcp_slowtmr+0x274>)
 8012640:	f009 fb64 	bl	801bd0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	7f9a      	ldrb	r2, [r3, #30]
 8012648:	4b7b      	ldr	r3, [pc, #492]	; (8012838 <tcp_slowtmr+0x264>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	429a      	cmp	r2, r3
 801264e:	d105      	bne.n	801265c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801265a:	e270      	b.n	8012b3e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801265c:	4b76      	ldr	r3, [pc, #472]	; (8012838 <tcp_slowtmr+0x264>)
 801265e:	781a      	ldrb	r2, [r3, #0]
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	7d1b      	ldrb	r3, [r3, #20]
 8012674:	2b02      	cmp	r3, #2
 8012676:	d10a      	bne.n	801268e <tcp_slowtmr+0xba>
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801267e:	2b05      	cmp	r3, #5
 8012680:	d905      	bls.n	801268e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012686:	3301      	adds	r3, #1
 8012688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801268c:	e11e      	b.n	80128cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012694:	2b0b      	cmp	r3, #11
 8012696:	d905      	bls.n	80126a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801269c:	3301      	adds	r3, #1
 801269e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126a2:	e113      	b.n	80128cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80126a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d075      	beq.n	801279a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d006      	beq.n	80126c4 <tcp_slowtmr+0xf0>
 80126b6:	4b62      	ldr	r3, [pc, #392]	; (8012840 <tcp_slowtmr+0x26c>)
 80126b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80126bc:	4965      	ldr	r1, [pc, #404]	; (8012854 <tcp_slowtmr+0x280>)
 80126be:	4862      	ldr	r0, [pc, #392]	; (8012848 <tcp_slowtmr+0x274>)
 80126c0:	f009 fb24 	bl	801bd0c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d106      	bne.n	80126da <tcp_slowtmr+0x106>
 80126cc:	4b5c      	ldr	r3, [pc, #368]	; (8012840 <tcp_slowtmr+0x26c>)
 80126ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80126d2:	4961      	ldr	r1, [pc, #388]	; (8012858 <tcp_slowtmr+0x284>)
 80126d4:	485c      	ldr	r0, [pc, #368]	; (8012848 <tcp_slowtmr+0x274>)
 80126d6:	f009 fb19 	bl	801bd0c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80126da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126e0:	2b0b      	cmp	r3, #11
 80126e2:	d905      	bls.n	80126f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80126e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e8:	3301      	adds	r3, #1
 80126ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126ee:	e0ed      	b.n	80128cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126f6:	3b01      	subs	r3, #1
 80126f8:	4a58      	ldr	r2, [pc, #352]	; (801285c <tcp_slowtmr+0x288>)
 80126fa:	5cd3      	ldrb	r3, [r2, r3]
 80126fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012704:	7c7a      	ldrb	r2, [r7, #17]
 8012706:	429a      	cmp	r2, r3
 8012708:	d907      	bls.n	801271a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012710:	3301      	adds	r3, #1
 8012712:	b2da      	uxtb	r2, r3
 8012714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012720:	7c7a      	ldrb	r2, [r7, #17]
 8012722:	429a      	cmp	r2, r3
 8012724:	f200 80d2 	bhi.w	80128cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012728:	2301      	movs	r3, #1
 801272a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012732:	2b00      	cmp	r3, #0
 8012734:	d108      	bne.n	8012748 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012738:	f005 f94c 	bl	80179d4 <tcp_zero_window_probe>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d014      	beq.n	801276c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012742:	2300      	movs	r3, #0
 8012744:	623b      	str	r3, [r7, #32]
 8012746:	e011      	b.n	801276c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801274e:	4619      	mov	r1, r3
 8012750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012752:	f004 f811 	bl	8016778 <tcp_split_unsent_seg>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d107      	bne.n	801276c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801275c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801275e:	f004 fa91 	bl	8016c84 <tcp_output>
 8012762:	4603      	mov	r3, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	d101      	bne.n	801276c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 80ac 	beq.w	80128cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	2200      	movs	r2, #0
 8012778:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012782:	2b06      	cmp	r3, #6
 8012784:	f200 80a2 	bhi.w	80128cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801278e:	3301      	adds	r3, #1
 8012790:	b2da      	uxtb	r2, r3
 8012792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012794:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012798:	e098      	b.n	80128cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	db0f      	blt.n	80127c4 <tcp_slowtmr+0x1f0>
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d008      	beq.n	80127c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80127b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	3301      	adds	r3, #1
 80127bc:	b29b      	uxth	r3, r3
 80127be:	b21a      	sxth	r2, r3
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80127d0:	429a      	cmp	r2, r3
 80127d2:	db7b      	blt.n	80128cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80127d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127d6:	f004 fd47 	bl	8017268 <tcp_rexmit_rto_prepare>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d007      	beq.n	80127f0 <tcp_slowtmr+0x21c>
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d171      	bne.n	80128cc <tcp_slowtmr+0x2f8>
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d06d      	beq.n	80128cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d03a      	beq.n	801286e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127fe:	2b0c      	cmp	r3, #12
 8012800:	bf28      	it	cs
 8012802:	230c      	movcs	r3, #12
 8012804:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801280c:	10db      	asrs	r3, r3, #3
 801280e:	b21b      	sxth	r3, r3
 8012810:	461a      	mov	r2, r3
 8012812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012818:	4413      	add	r3, r2
 801281a:	7efa      	ldrb	r2, [r7, #27]
 801281c:	4910      	ldr	r1, [pc, #64]	; (8012860 <tcp_slowtmr+0x28c>)
 801281e:	5c8a      	ldrb	r2, [r1, r2]
 8012820:	4093      	lsls	r3, r2
 8012822:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801282a:	4293      	cmp	r3, r2
 801282c:	dc1a      	bgt.n	8012864 <tcp_slowtmr+0x290>
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	b21a      	sxth	r2, r3
 8012832:	e019      	b.n	8012868 <tcp_slowtmr+0x294>
 8012834:	2000d7c0 	.word	0x2000d7c0
 8012838:	200047f2 	.word	0x200047f2
 801283c:	2000d7bc 	.word	0x2000d7bc
 8012840:	0801fc60 	.word	0x0801fc60
 8012844:	0801ffa4 	.word	0x0801ffa4
 8012848:	0801fca4 	.word	0x0801fca4
 801284c:	0801ffd0 	.word	0x0801ffd0
 8012850:	0801fffc 	.word	0x0801fffc
 8012854:	0802002c 	.word	0x0802002c
 8012858:	08020060 	.word	0x08020060
 801285c:	08021d2c 	.word	0x08021d2c
 8012860:	08021d1c 	.word	0x08021d1c
 8012864:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	2200      	movs	r2, #0
 8012872:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012880:	4293      	cmp	r3, r2
 8012882:	bf28      	it	cs
 8012884:	4613      	movcs	r3, r2
 8012886:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012888:	8a7b      	ldrh	r3, [r7, #18]
 801288a:	085b      	lsrs	r3, r3, #1
 801288c:	b29a      	uxth	r2, r3
 801288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012890:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d206      	bcs.n	80128b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128aa:	005b      	lsls	r3, r3, #1
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80128b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80128be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c0:	2200      	movs	r2, #0
 80128c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80128c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128c8:	f004 fd3e 	bl	8017348 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80128cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b06      	cmp	r3, #6
 80128d2:	d111      	bne.n	80128f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f003 0310 	and.w	r3, r3, #16
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00b      	beq.n	80128f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128e0:	4b9c      	ldr	r3, [pc, #624]	; (8012b54 <tcp_slowtmr+0x580>)
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	6a1b      	ldr	r3, [r3, #32]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	2b28      	cmp	r3, #40	; 0x28
 80128ec:	d904      	bls.n	80128f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80128ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128f2:	3301      	adds	r3, #1
 80128f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80128f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fa:	7a5b      	ldrb	r3, [r3, #9]
 80128fc:	f003 0308 	and.w	r3, r3, #8
 8012900:	2b00      	cmp	r3, #0
 8012902:	d04a      	beq.n	801299a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012906:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012908:	2b04      	cmp	r3, #4
 801290a:	d003      	beq.n	8012914 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012910:	2b07      	cmp	r3, #7
 8012912:	d142      	bne.n	801299a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012914:	4b8f      	ldr	r3, [pc, #572]	; (8012b54 <tcp_slowtmr+0x580>)
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	6a1b      	ldr	r3, [r3, #32]
 801291c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012920:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012924:	4b8c      	ldr	r3, [pc, #560]	; (8012b58 <tcp_slowtmr+0x584>)
 8012926:	440b      	add	r3, r1
 8012928:	498c      	ldr	r1, [pc, #560]	; (8012b5c <tcp_slowtmr+0x588>)
 801292a:	fba1 1303 	umull	r1, r3, r1, r3
 801292e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012930:	429a      	cmp	r2, r3
 8012932:	d90a      	bls.n	801294a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012938:	3301      	adds	r3, #1
 801293a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801293e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012942:	3301      	adds	r3, #1
 8012944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012948:	e027      	b.n	801299a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801294a:	4b82      	ldr	r3, [pc, #520]	; (8012b54 <tcp_slowtmr+0x580>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012950:	6a1b      	ldr	r3, [r3, #32]
 8012952:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012960:	4618      	mov	r0, r3
 8012962:	4b7f      	ldr	r3, [pc, #508]	; (8012b60 <tcp_slowtmr+0x58c>)
 8012964:	fb03 f300 	mul.w	r3, r3, r0
 8012968:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801296a:	497c      	ldr	r1, [pc, #496]	; (8012b5c <tcp_slowtmr+0x588>)
 801296c:	fba1 1303 	umull	r1, r3, r1, r3
 8012970:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012972:	429a      	cmp	r2, r3
 8012974:	d911      	bls.n	801299a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012978:	f004 ffec 	bl	8017954 <tcp_keepalive>
 801297c:	4603      	mov	r3, r0
 801297e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012982:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012986:	2b00      	cmp	r3, #0
 8012988:	d107      	bne.n	801299a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012990:	3301      	adds	r3, #1
 8012992:	b2da      	uxtb	r2, r3
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d011      	beq.n	80129c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80129a2:	4b6c      	ldr	r3, [pc, #432]	; (8012b54 <tcp_slowtmr+0x580>)
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a8:	6a1b      	ldr	r3, [r3, #32]
 80129aa:	1ad2      	subs	r2, r2, r3
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80129b2:	4619      	mov	r1, r3
 80129b4:	460b      	mov	r3, r1
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	440b      	add	r3, r1
 80129ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80129bc:	429a      	cmp	r2, r3
 80129be:	d302      	bcc.n	80129c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80129c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129c2:	f000 feab 	bl	801371c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80129c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c8:	7d1b      	ldrb	r3, [r3, #20]
 80129ca:	2b03      	cmp	r3, #3
 80129cc:	d10b      	bne.n	80129e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129ce:	4b61      	ldr	r3, [pc, #388]	; (8012b54 <tcp_slowtmr+0x580>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	6a1b      	ldr	r3, [r3, #32]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	2b28      	cmp	r3, #40	; 0x28
 80129da:	d904      	bls.n	80129e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80129dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129e0:	3301      	adds	r3, #1
 80129e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80129e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e8:	7d1b      	ldrb	r3, [r3, #20]
 80129ea:	2b09      	cmp	r3, #9
 80129ec:	d10b      	bne.n	8012a06 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80129ee:	4b59      	ldr	r3, [pc, #356]	; (8012b54 <tcp_slowtmr+0x580>)
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f4:	6a1b      	ldr	r3, [r3, #32]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	2bf0      	cmp	r3, #240	; 0xf0
 80129fa:	d904      	bls.n	8012a06 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80129fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a00:	3301      	adds	r3, #1
 8012a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d060      	beq.n	8012ad0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a18:	f000 fccc 	bl	80133b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d010      	beq.n	8012a44 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012a22:	4b50      	ldr	r3, [pc, #320]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d106      	bne.n	8012a3a <tcp_slowtmr+0x466>
 8012a2c:	4b4e      	ldr	r3, [pc, #312]	; (8012b68 <tcp_slowtmr+0x594>)
 8012a2e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012a32:	494e      	ldr	r1, [pc, #312]	; (8012b6c <tcp_slowtmr+0x598>)
 8012a34:	484e      	ldr	r0, [pc, #312]	; (8012b70 <tcp_slowtmr+0x59c>)
 8012a36:	f009 f969 	bl	801bd0c <iprintf>
        prev->next = pcb->next;
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	68da      	ldr	r2, [r3, #12]
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	60da      	str	r2, [r3, #12]
 8012a42:	e00f      	b.n	8012a64 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012a44:	4b47      	ldr	r3, [pc, #284]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d006      	beq.n	8012a5c <tcp_slowtmr+0x488>
 8012a4e:	4b46      	ldr	r3, [pc, #280]	; (8012b68 <tcp_slowtmr+0x594>)
 8012a50:	f240 5271 	movw	r2, #1393	; 0x571
 8012a54:	4947      	ldr	r1, [pc, #284]	; (8012b74 <tcp_slowtmr+0x5a0>)
 8012a56:	4846      	ldr	r0, [pc, #280]	; (8012b70 <tcp_slowtmr+0x59c>)
 8012a58:	f009 f958 	bl	801bd0c <iprintf>
        tcp_active_pcbs = pcb->next;
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	4a40      	ldr	r2, [pc, #256]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012a64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d013      	beq.n	8012a94 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012a74:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	3304      	adds	r3, #4
 8012a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a7c:	8ad2      	ldrh	r2, [r2, #22]
 8012a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a80:	8b09      	ldrh	r1, [r1, #24]
 8012a82:	9102      	str	r1, [sp, #8]
 8012a84:	9201      	str	r2, [sp, #4]
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	462b      	mov	r3, r5
 8012a8a:	4622      	mov	r2, r4
 8012a8c:	4601      	mov	r1, r0
 8012a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a90:	f004 feac 	bl	80177ec <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a96:	691b      	ldr	r3, [r3, #16]
 8012a98:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9c:	7d1b      	ldrb	r3, [r3, #20]
 8012a9e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012aaa:	6838      	ldr	r0, [r7, #0]
 8012aac:	f7ff f8ba 	bl	8011c24 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012ab0:	4b31      	ldr	r3, [pc, #196]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d004      	beq.n	8012ac6 <tcp_slowtmr+0x4f2>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f06f 010c 	mvn.w	r1, #12
 8012ac2:	68b8      	ldr	r0, [r7, #8]
 8012ac4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012ac6:	4b2c      	ldr	r3, [pc, #176]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d037      	beq.n	8012b3e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012ace:	e592      	b.n	80125f6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012adc:	7f1b      	ldrb	r3, [r3, #28]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae8:	7f1a      	ldrb	r2, [r3, #28]
 8012aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aec:	7f5b      	ldrb	r3, [r3, #29]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d325      	bcc.n	8012b3e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af4:	2200      	movs	r2, #0
 8012af6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012af8:	4b1f      	ldr	r3, [pc, #124]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <tcp_slowtmr+0x54c>
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b10:	6912      	ldr	r2, [r2, #16]
 8012b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b14:	4610      	mov	r0, r2
 8012b16:	4798      	blx	r3
 8012b18:	4603      	mov	r3, r0
 8012b1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012b1e:	e002      	b.n	8012b26 <tcp_slowtmr+0x552>
 8012b20:	2300      	movs	r3, #0
 8012b22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012b26:	4b14      	ldr	r3, [pc, #80]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d000      	beq.n	8012b30 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012b2e:	e562      	b.n	80125f6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012b30:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b3a:	f004 f8a3 	bl	8016c84 <tcp_output>
  while (pcb != NULL) {
 8012b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f47f ad5e 	bne.w	8012602 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012b4a:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <tcp_slowtmr+0x5a8>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b50:	e069      	b.n	8012c26 <tcp_slowtmr+0x652>
 8012b52:	bf00      	nop
 8012b54:	2000d7c0 	.word	0x2000d7c0
 8012b58:	000a4cb8 	.word	0x000a4cb8
 8012b5c:	10624dd3 	.word	0x10624dd3
 8012b60:	000124f8 	.word	0x000124f8
 8012b64:	2000d7bc 	.word	0x2000d7bc
 8012b68:	0801fc60 	.word	0x0801fc60
 8012b6c:	08020098 	.word	0x08020098
 8012b70:	0801fca4 	.word	0x0801fca4
 8012b74:	080200c4 	.word	0x080200c4
 8012b78:	2000d7b8 	.word	0x2000d7b8
 8012b7c:	2000d7cc 	.word	0x2000d7cc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	7d1b      	ldrb	r3, [r3, #20]
 8012b84:	2b0a      	cmp	r3, #10
 8012b86:	d006      	beq.n	8012b96 <tcp_slowtmr+0x5c2>
 8012b88:	4b2b      	ldr	r3, [pc, #172]	; (8012c38 <tcp_slowtmr+0x664>)
 8012b8a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012b8e:	492b      	ldr	r1, [pc, #172]	; (8012c3c <tcp_slowtmr+0x668>)
 8012b90:	482b      	ldr	r0, [pc, #172]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012b92:	f009 f8bb 	bl	801bd0c <iprintf>
    pcb_remove = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b9c:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <tcp_slowtmr+0x670>)
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	6a1b      	ldr	r3, [r3, #32]
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	2bf0      	cmp	r3, #240	; 0xf0
 8012ba8:	d904      	bls.n	8012bb4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bae:	3301      	adds	r3, #1
 8012bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d02f      	beq.n	8012c1c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bbe:	f000 fbf9 	bl	80133b4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d010      	beq.n	8012bea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012bc8:	4b1f      	ldr	r3, [pc, #124]	; (8012c48 <tcp_slowtmr+0x674>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d106      	bne.n	8012be0 <tcp_slowtmr+0x60c>
 8012bd2:	4b19      	ldr	r3, [pc, #100]	; (8012c38 <tcp_slowtmr+0x664>)
 8012bd4:	f240 52af 	movw	r2, #1455	; 0x5af
 8012bd8:	491c      	ldr	r1, [pc, #112]	; (8012c4c <tcp_slowtmr+0x678>)
 8012bda:	4819      	ldr	r0, [pc, #100]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012bdc:	f009 f896 	bl	801bd0c <iprintf>
        prev->next = pcb->next;
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	68da      	ldr	r2, [r3, #12]
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	60da      	str	r2, [r3, #12]
 8012be8:	e00f      	b.n	8012c0a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012bea:	4b17      	ldr	r3, [pc, #92]	; (8012c48 <tcp_slowtmr+0x674>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d006      	beq.n	8012c02 <tcp_slowtmr+0x62e>
 8012bf4:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <tcp_slowtmr+0x664>)
 8012bf6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012bfa:	4915      	ldr	r1, [pc, #84]	; (8012c50 <tcp_slowtmr+0x67c>)
 8012bfc:	4810      	ldr	r0, [pc, #64]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012bfe:	f009 f885 	bl	801bd0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	4a10      	ldr	r2, [pc, #64]	; (8012c48 <tcp_slowtmr+0x674>)
 8012c08:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012c14:	69f8      	ldr	r0, [r7, #28]
 8012c16:	f7ff f805 	bl	8011c24 <tcp_free>
 8012c1a:	e004      	b.n	8012c26 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1a9      	bne.n	8012b80 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012c2c:	bf00      	nop
 8012c2e:	bf00      	nop
 8012c30:	3730      	adds	r7, #48	; 0x30
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bdb0      	pop	{r4, r5, r7, pc}
 8012c36:	bf00      	nop
 8012c38:	0801fc60 	.word	0x0801fc60
 8012c3c:	080200f0 	.word	0x080200f0
 8012c40:	0801fca4 	.word	0x0801fca4
 8012c44:	2000d7c0 	.word	0x2000d7c0
 8012c48:	2000d7cc 	.word	0x2000d7cc
 8012c4c:	08020120 	.word	0x08020120
 8012c50:	08020148 	.word	0x08020148

08012c54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012c5a:	4b2d      	ldr	r3, [pc, #180]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	b2da      	uxtb	r2, r3
 8012c62:	4b2b      	ldr	r3, [pc, #172]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012c66:	4b2b      	ldr	r3, [pc, #172]	; (8012d14 <tcp_fasttmr+0xc0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012c6c:	e048      	b.n	8012d00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7f9a      	ldrb	r2, [r3, #30]
 8012c72:	4b27      	ldr	r3, [pc, #156]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d03f      	beq.n	8012cfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012c7a:	4b25      	ldr	r3, [pc, #148]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c7c:	781a      	ldrb	r2, [r3, #0]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	8b5b      	ldrh	r3, [r3, #26]
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d010      	beq.n	8012cb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f043 0302 	orr.w	r3, r3, #2
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f003 fff1 	bl	8016c84 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	8b5b      	ldrh	r3, [r3, #26]
 8012ca6:	f023 0303 	bic.w	r3, r3, #3
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	8b5b      	ldrh	r3, [r3, #26]
 8012cb4:	f003 0308 	and.w	r3, r3, #8
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d009      	beq.n	8012cd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	8b5b      	ldrh	r3, [r3, #26]
 8012cc0:	f023 0308 	bic.w	r3, r3, #8
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7ff f93e 	bl	8011f4c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00a      	beq.n	8012cf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012cde:	4b0e      	ldr	r3, [pc, #56]	; (8012d18 <tcp_fasttmr+0xc4>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f000 f819 	bl	8012d1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012cea:	4b0b      	ldr	r3, [pc, #44]	; (8012d18 <tcp_fasttmr+0xc4>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d000      	beq.n	8012cf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012cf2:	e7b8      	b.n	8012c66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	607b      	str	r3, [r7, #4]
 8012cf8:	e002      	b.n	8012d00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d1b3      	bne.n	8012c6e <tcp_fasttmr+0x1a>
    }
  }
}
 8012d06:	bf00      	nop
 8012d08:	bf00      	nop
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	200047f2 	.word	0x200047f2
 8012d14:	2000d7bc 	.word	0x2000d7bc
 8012d18:	2000d7b8 	.word	0x2000d7b8

08012d1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012d1c:	b590      	push	{r4, r7, lr}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d109      	bne.n	8012d3e <tcp_process_refused_data+0x22>
 8012d2a:	4b37      	ldr	r3, [pc, #220]	; (8012e08 <tcp_process_refused_data+0xec>)
 8012d2c:	f240 6209 	movw	r2, #1545	; 0x609
 8012d30:	4936      	ldr	r1, [pc, #216]	; (8012e0c <tcp_process_refused_data+0xf0>)
 8012d32:	4837      	ldr	r0, [pc, #220]	; (8012e10 <tcp_process_refused_data+0xf4>)
 8012d34:	f008 ffea 	bl	801bd0c <iprintf>
 8012d38:	f06f 030f 	mvn.w	r3, #15
 8012d3c:	e060      	b.n	8012e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d42:	7b5b      	ldrb	r3, [r3, #13]
 8012d44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00b      	beq.n	8012d74 <tcp_process_refused_data+0x58>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6918      	ldr	r0, [r3, #16]
 8012d66:	2300      	movs	r3, #0
 8012d68:	68ba      	ldr	r2, [r7, #8]
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	47a0      	blx	r4
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73fb      	strb	r3, [r7, #15]
 8012d72:	e007      	b.n	8012d84 <tcp_process_refused_data+0x68>
 8012d74:	2300      	movs	r3, #0
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	6879      	ldr	r1, [r7, #4]
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	f000 f8a4 	bl	8012ec8 <tcp_recv_null>
 8012d80:	4603      	mov	r3, r0
 8012d82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d12a      	bne.n	8012de2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012d8c:	7bbb      	ldrb	r3, [r7, #14]
 8012d8e:	f003 0320 	and.w	r3, r3, #32
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d033      	beq.n	8012dfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012d9e:	d005      	beq.n	8012dac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012da4:	3301      	adds	r3, #1
 8012da6:	b29a      	uxth	r2, r3
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	d00b      	beq.n	8012dce <tcp_process_refused_data+0xb2>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	6918      	ldr	r0, [r3, #16]
 8012dc0:	2300      	movs	r3, #0
 8012dc2:	2200      	movs	r2, #0
 8012dc4:	6879      	ldr	r1, [r7, #4]
 8012dc6:	47a0      	blx	r4
 8012dc8:	4603      	mov	r3, r0
 8012dca:	73fb      	strb	r3, [r7, #15]
 8012dcc:	e001      	b.n	8012dd2 <tcp_process_refused_data+0xb6>
 8012dce:	2300      	movs	r3, #0
 8012dd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dd6:	f113 0f0d 	cmn.w	r3, #13
 8012dda:	d110      	bne.n	8012dfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012ddc:	f06f 030c 	mvn.w	r3, #12
 8012de0:	e00e      	b.n	8012e00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012de6:	f113 0f0d 	cmn.w	r3, #13
 8012dea:	d102      	bne.n	8012df2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012dec:	f06f 030c 	mvn.w	r3, #12
 8012df0:	e006      	b.n	8012e00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	68ba      	ldr	r2, [r7, #8]
 8012df6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012df8:	f06f 0304 	mvn.w	r3, #4
 8012dfc:	e000      	b.n	8012e00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012dfe:	2300      	movs	r3, #0
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3714      	adds	r7, #20
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd90      	pop	{r4, r7, pc}
 8012e08:	0801fc60 	.word	0x0801fc60
 8012e0c:	08020170 	.word	0x08020170
 8012e10:	0801fca4 	.word	0x0801fca4

08012e14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012e1c:	e007      	b.n	8012e2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012e24:	6878      	ldr	r0, [r7, #4]
 8012e26:	f000 f80a 	bl	8012e3e <tcp_seg_free>
    seg = next;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d1f4      	bne.n	8012e1e <tcp_segs_free+0xa>
  }
}
 8012e34:	bf00      	nop
 8012e36:	bf00      	nop
 8012e38:	3710      	adds	r7, #16
 8012e3a:	46bd      	mov	sp, r7
 8012e3c:	bd80      	pop	{r7, pc}

08012e3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012e3e:	b580      	push	{r7, lr}
 8012e40:	b082      	sub	sp, #8
 8012e42:	af00      	add	r7, sp, #0
 8012e44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d00c      	beq.n	8012e66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d004      	beq.n	8012e5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	685b      	ldr	r3, [r3, #4]
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f7fe fc27 	bl	80116ac <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012e5e:	6879      	ldr	r1, [r7, #4]
 8012e60:	2003      	movs	r0, #3
 8012e62:	f7fd fd4d 	bl	8010900 <memp_free>
  }
}
 8012e66:	bf00      	nop
 8012e68:	3708      	adds	r7, #8
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
	...

08012e70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012e70:	b580      	push	{r7, lr}
 8012e72:	b084      	sub	sp, #16
 8012e74:	af00      	add	r7, sp, #0
 8012e76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d106      	bne.n	8012e8c <tcp_seg_copy+0x1c>
 8012e7e:	4b0f      	ldr	r3, [pc, #60]	; (8012ebc <tcp_seg_copy+0x4c>)
 8012e80:	f240 6282 	movw	r2, #1666	; 0x682
 8012e84:	490e      	ldr	r1, [pc, #56]	; (8012ec0 <tcp_seg_copy+0x50>)
 8012e86:	480f      	ldr	r0, [pc, #60]	; (8012ec4 <tcp_seg_copy+0x54>)
 8012e88:	f008 ff40 	bl	801bd0c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e8c:	2003      	movs	r0, #3
 8012e8e:	f7fd fce5 	bl	801085c <memp_malloc>
 8012e92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d101      	bne.n	8012e9e <tcp_seg_copy+0x2e>
    return NULL;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	e00a      	b.n	8012eb4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012e9e:	2210      	movs	r2, #16
 8012ea0:	6879      	ldr	r1, [r7, #4]
 8012ea2:	68f8      	ldr	r0, [r7, #12]
 8012ea4:	f008 fada 	bl	801b45c <memcpy>
  pbuf_ref(cseg->p);
 8012ea8:	68fb      	ldr	r3, [r7, #12]
 8012eaa:	685b      	ldr	r3, [r3, #4]
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7fe fca3 	bl	80117f8 <pbuf_ref>
  return cseg;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	0801fc60 	.word	0x0801fc60
 8012ec0:	080201b4 	.word	0x080201b4
 8012ec4:	0801fca4 	.word	0x0801fca4

08012ec8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b084      	sub	sp, #16
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	60f8      	str	r0, [r7, #12]
 8012ed0:	60b9      	str	r1, [r7, #8]
 8012ed2:	607a      	str	r2, [r7, #4]
 8012ed4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012ed6:	68bb      	ldr	r3, [r7, #8]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d109      	bne.n	8012ef0 <tcp_recv_null+0x28>
 8012edc:	4b12      	ldr	r3, [pc, #72]	; (8012f28 <tcp_recv_null+0x60>)
 8012ede:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ee2:	4912      	ldr	r1, [pc, #72]	; (8012f2c <tcp_recv_null+0x64>)
 8012ee4:	4812      	ldr	r0, [pc, #72]	; (8012f30 <tcp_recv_null+0x68>)
 8012ee6:	f008 ff11 	bl	801bd0c <iprintf>
 8012eea:	f06f 030f 	mvn.w	r3, #15
 8012eee:	e016      	b.n	8012f1e <tcp_recv_null+0x56>

  if (p != NULL) {
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	2b00      	cmp	r3, #0
 8012ef4:	d009      	beq.n	8012f0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	891b      	ldrh	r3, [r3, #8]
 8012efa:	4619      	mov	r1, r3
 8012efc:	68b8      	ldr	r0, [r7, #8]
 8012efe:	f7ff fad3 	bl	80124a8 <tcp_recved>
    pbuf_free(p);
 8012f02:	6878      	ldr	r0, [r7, #4]
 8012f04:	f7fe fbd2 	bl	80116ac <pbuf_free>
 8012f08:	e008      	b.n	8012f1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d104      	bne.n	8012f1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012f12:	68b8      	ldr	r0, [r7, #8]
 8012f14:	f7ff f884 	bl	8012020 <tcp_close>
 8012f18:	4603      	mov	r3, r0
 8012f1a:	e000      	b.n	8012f1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012f1c:	2300      	movs	r3, #0
}
 8012f1e:	4618      	mov	r0, r3
 8012f20:	3710      	adds	r7, #16
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}
 8012f26:	bf00      	nop
 8012f28:	0801fc60 	.word	0x0801fc60
 8012f2c:	080201d0 	.word	0x080201d0
 8012f30:	0801fca4 	.word	0x0801fca4

08012f34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b086      	sub	sp, #24
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	db01      	blt.n	8012f4a <tcp_kill_prio+0x16>
 8012f46:	79fb      	ldrb	r3, [r7, #7]
 8012f48:	e000      	b.n	8012f4c <tcp_kill_prio+0x18>
 8012f4a:	237f      	movs	r3, #127	; 0x7f
 8012f4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012f4e:	7afb      	ldrb	r3, [r7, #11]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d034      	beq.n	8012fbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012f54:	7afb      	ldrb	r3, [r7, #11]
 8012f56:	3b01      	subs	r3, #1
 8012f58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012f5a:	2300      	movs	r3, #0
 8012f5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f62:	4b19      	ldr	r3, [pc, #100]	; (8012fc8 <tcp_kill_prio+0x94>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	617b      	str	r3, [r7, #20]
 8012f68:	e01f      	b.n	8012faa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	7d5b      	ldrb	r3, [r3, #21]
 8012f6e:	7afa      	ldrb	r2, [r7, #11]
 8012f70:	429a      	cmp	r2, r3
 8012f72:	d80c      	bhi.n	8012f8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012f78:	7afa      	ldrb	r2, [r7, #11]
 8012f7a:	429a      	cmp	r2, r3
 8012f7c:	d112      	bne.n	8012fa4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f7e:	4b13      	ldr	r3, [pc, #76]	; (8012fcc <tcp_kill_prio+0x98>)
 8012f80:	681a      	ldr	r2, [r3, #0]
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	6a1b      	ldr	r3, [r3, #32]
 8012f86:	1ad3      	subs	r3, r2, r3
 8012f88:	68fa      	ldr	r2, [r7, #12]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d80a      	bhi.n	8012fa4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f8e:	4b0f      	ldr	r3, [pc, #60]	; (8012fcc <tcp_kill_prio+0x98>)
 8012f90:	681a      	ldr	r2, [r3, #0]
 8012f92:	697b      	ldr	r3, [r7, #20]
 8012f94:	6a1b      	ldr	r3, [r3, #32]
 8012f96:	1ad3      	subs	r3, r2, r3
 8012f98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	7d5b      	ldrb	r3, [r3, #21]
 8012fa2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fa4:	697b      	ldr	r3, [r7, #20]
 8012fa6:	68db      	ldr	r3, [r3, #12]
 8012fa8:	617b      	str	r3, [r7, #20]
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d1dc      	bne.n	8012f6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d004      	beq.n	8012fc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012fb6:	6938      	ldr	r0, [r7, #16]
 8012fb8:	f7ff f978 	bl	80122ac <tcp_abort>
 8012fbc:	e000      	b.n	8012fc0 <tcp_kill_prio+0x8c>
    return;
 8012fbe:	bf00      	nop
  }
}
 8012fc0:	3718      	adds	r7, #24
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	2000d7bc 	.word	0x2000d7bc
 8012fcc:	2000d7c0 	.word	0x2000d7c0

08012fd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012fd0:	b580      	push	{r7, lr}
 8012fd2:	b086      	sub	sp, #24
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012fda:	79fb      	ldrb	r3, [r7, #7]
 8012fdc:	2b08      	cmp	r3, #8
 8012fde:	d009      	beq.n	8012ff4 <tcp_kill_state+0x24>
 8012fe0:	79fb      	ldrb	r3, [r7, #7]
 8012fe2:	2b09      	cmp	r3, #9
 8012fe4:	d006      	beq.n	8012ff4 <tcp_kill_state+0x24>
 8012fe6:	4b1a      	ldr	r3, [pc, #104]	; (8013050 <tcp_kill_state+0x80>)
 8012fe8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012fec:	4919      	ldr	r1, [pc, #100]	; (8013054 <tcp_kill_state+0x84>)
 8012fee:	481a      	ldr	r0, [pc, #104]	; (8013058 <tcp_kill_state+0x88>)
 8012ff0:	f008 fe8c 	bl	801bd0c <iprintf>

  inactivity = 0;
 8012ff4:	2300      	movs	r3, #0
 8012ff6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ffc:	4b17      	ldr	r3, [pc, #92]	; (801305c <tcp_kill_state+0x8c>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	617b      	str	r3, [r7, #20]
 8013002:	e017      	b.n	8013034 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013004:	697b      	ldr	r3, [r7, #20]
 8013006:	7d1b      	ldrb	r3, [r3, #20]
 8013008:	79fa      	ldrb	r2, [r7, #7]
 801300a:	429a      	cmp	r2, r3
 801300c:	d10f      	bne.n	801302e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801300e:	4b14      	ldr	r3, [pc, #80]	; (8013060 <tcp_kill_state+0x90>)
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	697b      	ldr	r3, [r7, #20]
 8013014:	6a1b      	ldr	r3, [r3, #32]
 8013016:	1ad3      	subs	r3, r2, r3
 8013018:	68fa      	ldr	r2, [r7, #12]
 801301a:	429a      	cmp	r2, r3
 801301c:	d807      	bhi.n	801302e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801301e:	4b10      	ldr	r3, [pc, #64]	; (8013060 <tcp_kill_state+0x90>)
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	6a1b      	ldr	r3, [r3, #32]
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801302a:	697b      	ldr	r3, [r7, #20]
 801302c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	68db      	ldr	r3, [r3, #12]
 8013032:	617b      	str	r3, [r7, #20]
 8013034:	697b      	ldr	r3, [r7, #20]
 8013036:	2b00      	cmp	r3, #0
 8013038:	d1e4      	bne.n	8013004 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801303a:	693b      	ldr	r3, [r7, #16]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d003      	beq.n	8013048 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013040:	2100      	movs	r1, #0
 8013042:	6938      	ldr	r0, [r7, #16]
 8013044:	f7ff f874 	bl	8012130 <tcp_abandon>
  }
}
 8013048:	bf00      	nop
 801304a:	3718      	adds	r7, #24
 801304c:	46bd      	mov	sp, r7
 801304e:	bd80      	pop	{r7, pc}
 8013050:	0801fc60 	.word	0x0801fc60
 8013054:	080201ec 	.word	0x080201ec
 8013058:	0801fca4 	.word	0x0801fca4
 801305c:	2000d7bc 	.word	0x2000d7bc
 8013060:	2000d7c0 	.word	0x2000d7c0

08013064 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b084      	sub	sp, #16
 8013068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801306a:	2300      	movs	r3, #0
 801306c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801306e:	2300      	movs	r3, #0
 8013070:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013072:	4b12      	ldr	r3, [pc, #72]	; (80130bc <tcp_kill_timewait+0x58>)
 8013074:	681b      	ldr	r3, [r3, #0]
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	e012      	b.n	80130a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801307a:	4b11      	ldr	r3, [pc, #68]	; (80130c0 <tcp_kill_timewait+0x5c>)
 801307c:	681a      	ldr	r2, [r3, #0]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	6a1b      	ldr	r3, [r3, #32]
 8013082:	1ad3      	subs	r3, r2, r3
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	429a      	cmp	r2, r3
 8013088:	d807      	bhi.n	801309a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801308a:	4b0d      	ldr	r3, [pc, #52]	; (80130c0 <tcp_kill_timewait+0x5c>)
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	6a1b      	ldr	r3, [r3, #32]
 8013092:	1ad3      	subs	r3, r2, r3
 8013094:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	68db      	ldr	r3, [r3, #12]
 801309e:	60fb      	str	r3, [r7, #12]
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1e9      	bne.n	801307a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d002      	beq.n	80130b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80130ac:	68b8      	ldr	r0, [r7, #8]
 80130ae:	f7ff f8fd 	bl	80122ac <tcp_abort>
  }
}
 80130b2:	bf00      	nop
 80130b4:	3710      	adds	r7, #16
 80130b6:	46bd      	mov	sp, r7
 80130b8:	bd80      	pop	{r7, pc}
 80130ba:	bf00      	nop
 80130bc:	2000d7cc 	.word	0x2000d7cc
 80130c0:	2000d7c0 	.word	0x2000d7c0

080130c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80130c4:	b580      	push	{r7, lr}
 80130c6:	b082      	sub	sp, #8
 80130c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80130ca:	4b10      	ldr	r3, [pc, #64]	; (801310c <tcp_handle_closepend+0x48>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80130d0:	e014      	b.n	80130fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	8b5b      	ldrh	r3, [r3, #26]
 80130dc:	f003 0308 	and.w	r3, r3, #8
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d009      	beq.n	80130f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	8b5b      	ldrh	r3, [r3, #26]
 80130e8:	f023 0308 	bic.w	r3, r3, #8
 80130ec:	b29a      	uxth	r2, r3
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f7fe ff2a 	bl	8011f4c <tcp_close_shutdown_fin>
    }
    pcb = next;
 80130f8:	683b      	ldr	r3, [r7, #0]
 80130fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d1e7      	bne.n	80130d2 <tcp_handle_closepend+0xe>
  }
}
 8013102:	bf00      	nop
 8013104:	bf00      	nop
 8013106:	3708      	adds	r7, #8
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	2000d7bc 	.word	0x2000d7bc

08013110 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
 8013116:	4603      	mov	r3, r0
 8013118:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801311a:	2001      	movs	r0, #1
 801311c:	f7fd fb9e 	bl	801085c <memp_malloc>
 8013120:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d126      	bne.n	8013176 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013128:	f7ff ffcc 	bl	80130c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801312c:	f7ff ff9a 	bl	8013064 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013130:	2001      	movs	r0, #1
 8013132:	f7fd fb93 	bl	801085c <memp_malloc>
 8013136:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d11b      	bne.n	8013176 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801313e:	2009      	movs	r0, #9
 8013140:	f7ff ff46 	bl	8012fd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013144:	2001      	movs	r0, #1
 8013146:	f7fd fb89 	bl	801085c <memp_malloc>
 801314a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d111      	bne.n	8013176 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013152:	2008      	movs	r0, #8
 8013154:	f7ff ff3c 	bl	8012fd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013158:	2001      	movs	r0, #1
 801315a:	f7fd fb7f 	bl	801085c <memp_malloc>
 801315e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2b00      	cmp	r3, #0
 8013164:	d107      	bne.n	8013176 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013166:	79fb      	ldrb	r3, [r7, #7]
 8013168:	4618      	mov	r0, r3
 801316a:	f7ff fee3 	bl	8012f34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801316e:	2001      	movs	r0, #1
 8013170:	f7fd fb74 	bl	801085c <memp_malloc>
 8013174:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b00      	cmp	r3, #0
 801317a:	d03f      	beq.n	80131fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801317c:	229c      	movs	r2, #156	; 0x9c
 801317e:	2100      	movs	r1, #0
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f008 f979 	bl	801b478 <memset>
    pcb->prio = prio;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	79fa      	ldrb	r2, [r7, #7]
 801318a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801318c:	68fb      	ldr	r3, [r7, #12]
 801318e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013192:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801319c:	855a      	strh	r2, [r3, #42]	; 0x2a
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	22ff      	movs	r2, #255	; 0xff
 80131aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 80131b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	2206      	movs	r2, #6
 80131b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2206      	movs	r2, #6
 80131c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	2201      	movs	r2, #1
 80131ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80131d2:	4b0d      	ldr	r3, [pc, #52]	; (8013208 <tcp_alloc+0xf8>)
 80131d4:	681a      	ldr	r2, [r3, #0]
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80131da:	4b0c      	ldr	r3, [pc, #48]	; (801320c <tcp_alloc+0xfc>)
 80131dc:	781a      	ldrb	r2, [r3, #0]
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80131e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	4a08      	ldr	r2, [pc, #32]	; (8013210 <tcp_alloc+0x100>)
 80131f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80131f4:	68fb      	ldr	r3, [r7, #12]
 80131f6:	4a07      	ldr	r2, [pc, #28]	; (8013214 <tcp_alloc+0x104>)
 80131f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80131fc:	68fb      	ldr	r3, [r7, #12]
}
 80131fe:	4618      	mov	r0, r3
 8013200:	3710      	adds	r7, #16
 8013202:	46bd      	mov	sp, r7
 8013204:	bd80      	pop	{r7, pc}
 8013206:	bf00      	nop
 8013208:	2000d7c0 	.word	0x2000d7c0
 801320c:	200047f2 	.word	0x200047f2
 8013210:	08012ec9 	.word	0x08012ec9
 8013214:	006ddd00 	.word	0x006ddd00

08013218 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013218:	b580      	push	{r7, lr}
 801321a:	b084      	sub	sp, #16
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013222:	2040      	movs	r0, #64	; 0x40
 8013224:	f7ff ff74 	bl	8013110 <tcp_alloc>
 8013228:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801322a:	68fb      	ldr	r3, [r7, #12]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3710      	adds	r7, #16
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}

08013234 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013234:	b480      	push	{r7}
 8013236:	b083      	sub	sp, #12
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d002      	beq.n	801324a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	683a      	ldr	r2, [r7, #0]
 8013248:	611a      	str	r2, [r3, #16]
  }
}
 801324a:	bf00      	nop
 801324c:	370c      	adds	r7, #12
 801324e:	46bd      	mov	sp, r7
 8013250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013254:	4770      	bx	lr
	...

08013258 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d00e      	beq.n	8013286 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	7d1b      	ldrb	r3, [r3, #20]
 801326c:	2b01      	cmp	r3, #1
 801326e:	d106      	bne.n	801327e <tcp_recv+0x26>
 8013270:	4b07      	ldr	r3, [pc, #28]	; (8013290 <tcp_recv+0x38>)
 8013272:	f240 72df 	movw	r2, #2015	; 0x7df
 8013276:	4907      	ldr	r1, [pc, #28]	; (8013294 <tcp_recv+0x3c>)
 8013278:	4807      	ldr	r0, [pc, #28]	; (8013298 <tcp_recv+0x40>)
 801327a:	f008 fd47 	bl	801bd0c <iprintf>
    pcb->recv = recv;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	683a      	ldr	r2, [r7, #0]
 8013282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013286:	bf00      	nop
 8013288:	3708      	adds	r7, #8
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	0801fc60 	.word	0x0801fc60
 8013294:	080201fc 	.word	0x080201fc
 8013298:	0801fca4 	.word	0x0801fca4

0801329c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
 80132a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d00e      	beq.n	80132ca <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7d1b      	ldrb	r3, [r3, #20]
 80132b0:	2b01      	cmp	r3, #1
 80132b2:	d106      	bne.n	80132c2 <tcp_sent+0x26>
 80132b4:	4b07      	ldr	r3, [pc, #28]	; (80132d4 <tcp_sent+0x38>)
 80132b6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80132ba:	4907      	ldr	r1, [pc, #28]	; (80132d8 <tcp_sent+0x3c>)
 80132bc:	4807      	ldr	r0, [pc, #28]	; (80132dc <tcp_sent+0x40>)
 80132be:	f008 fd25 	bl	801bd0c <iprintf>
    pcb->sent = sent;
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	683a      	ldr	r2, [r7, #0]
 80132c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80132ca:	bf00      	nop
 80132cc:	3708      	adds	r7, #8
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}
 80132d2:	bf00      	nop
 80132d4:	0801fc60 	.word	0x0801fc60
 80132d8:	08020224 	.word	0x08020224
 80132dc:	0801fca4 	.word	0x0801fca4

080132e0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80132e0:	b580      	push	{r7, lr}
 80132e2:	b082      	sub	sp, #8
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d00e      	beq.n	801330e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	7d1b      	ldrb	r3, [r3, #20]
 80132f4:	2b01      	cmp	r3, #1
 80132f6:	d106      	bne.n	8013306 <tcp_err+0x26>
 80132f8:	4b07      	ldr	r3, [pc, #28]	; (8013318 <tcp_err+0x38>)
 80132fa:	f640 020d 	movw	r2, #2061	; 0x80d
 80132fe:	4907      	ldr	r1, [pc, #28]	; (801331c <tcp_err+0x3c>)
 8013300:	4807      	ldr	r0, [pc, #28]	; (8013320 <tcp_err+0x40>)
 8013302:	f008 fd03 	bl	801bd0c <iprintf>
    pcb->errf = err;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	683a      	ldr	r2, [r7, #0]
 801330a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}
 8013316:	bf00      	nop
 8013318:	0801fc60 	.word	0x0801fc60
 801331c:	0802024c 	.word	0x0802024c
 8013320:	0801fca4 	.word	0x0801fca4

08013324 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013324:	b480      	push	{r7}
 8013326:	b085      	sub	sp, #20
 8013328:	af00      	add	r7, sp, #0
 801332a:	6078      	str	r0, [r7, #4]
 801332c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d008      	beq.n	8013346 <tcp_accept+0x22>
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7d1b      	ldrb	r3, [r3, #20]
 8013338:	2b01      	cmp	r3, #1
 801333a:	d104      	bne.n	8013346 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	683a      	ldr	r2, [r7, #0]
 8013344:	619a      	str	r2, [r3, #24]
  }
}
 8013346:	bf00      	nop
 8013348:	3714      	adds	r7, #20
 801334a:	46bd      	mov	sp, r7
 801334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013350:	4770      	bx	lr
	...

08013354 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b084      	sub	sp, #16
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	4613      	mov	r3, r2
 8013360:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d107      	bne.n	8013378 <tcp_poll+0x24>
 8013368:	4b0e      	ldr	r3, [pc, #56]	; (80133a4 <tcp_poll+0x50>)
 801336a:	f640 023d 	movw	r2, #2109	; 0x83d
 801336e:	490e      	ldr	r1, [pc, #56]	; (80133a8 <tcp_poll+0x54>)
 8013370:	480e      	ldr	r0, [pc, #56]	; (80133ac <tcp_poll+0x58>)
 8013372:	f008 fccb 	bl	801bd0c <iprintf>
 8013376:	e011      	b.n	801339c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	7d1b      	ldrb	r3, [r3, #20]
 801337c:	2b01      	cmp	r3, #1
 801337e:	d106      	bne.n	801338e <tcp_poll+0x3a>
 8013380:	4b08      	ldr	r3, [pc, #32]	; (80133a4 <tcp_poll+0x50>)
 8013382:	f640 023e 	movw	r2, #2110	; 0x83e
 8013386:	490a      	ldr	r1, [pc, #40]	; (80133b0 <tcp_poll+0x5c>)
 8013388:	4808      	ldr	r0, [pc, #32]	; (80133ac <tcp_poll+0x58>)
 801338a:	f008 fcbf 	bl	801bd0c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	68ba      	ldr	r2, [r7, #8]
 8013392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	79fa      	ldrb	r2, [r7, #7]
 801339a:	775a      	strb	r2, [r3, #29]
}
 801339c:	3710      	adds	r7, #16
 801339e:	46bd      	mov	sp, r7
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	0801fc60 	.word	0x0801fc60
 80133a8:	08020274 	.word	0x08020274
 80133ac:	0801fca4 	.word	0x0801fca4
 80133b0:	0802028c 	.word	0x0802028c

080133b4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b082      	sub	sp, #8
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d107      	bne.n	80133d2 <tcp_pcb_purge+0x1e>
 80133c2:	4b21      	ldr	r3, [pc, #132]	; (8013448 <tcp_pcb_purge+0x94>)
 80133c4:	f640 0251 	movw	r2, #2129	; 0x851
 80133c8:	4920      	ldr	r1, [pc, #128]	; (801344c <tcp_pcb_purge+0x98>)
 80133ca:	4821      	ldr	r0, [pc, #132]	; (8013450 <tcp_pcb_purge+0x9c>)
 80133cc:	f008 fc9e 	bl	801bd0c <iprintf>
 80133d0:	e037      	b.n	8013442 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	7d1b      	ldrb	r3, [r3, #20]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d033      	beq.n	8013442 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80133de:	2b0a      	cmp	r3, #10
 80133e0:	d02f      	beq.n	8013442 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80133e6:	2b01      	cmp	r3, #1
 80133e8:	d02b      	beq.n	8013442 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d007      	beq.n	8013402 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133f6:	4618      	mov	r0, r3
 80133f8:	f7fe f958 	bl	80116ac <pbuf_free>
      pcb->refused_data = NULL;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	2200      	movs	r2, #0
 8013400:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013406:	2b00      	cmp	r3, #0
 8013408:	d002      	beq.n	8013410 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f986 	bl	801371c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013416:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801341c:	4618      	mov	r0, r3
 801341e:	f7ff fcf9 	bl	8012e14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013426:	4618      	mov	r0, r3
 8013428:	f7ff fcf4 	bl	8012e14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2200      	movs	r2, #0
 8013430:	66da      	str	r2, [r3, #108]	; 0x6c
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2200      	movs	r2, #0
 801343e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013442:	3708      	adds	r7, #8
 8013444:	46bd      	mov	sp, r7
 8013446:	bd80      	pop	{r7, pc}
 8013448:	0801fc60 	.word	0x0801fc60
 801344c:	080202ac 	.word	0x080202ac
 8013450:	0801fca4 	.word	0x0801fca4

08013454 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801345e:	683b      	ldr	r3, [r7, #0]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d106      	bne.n	8013472 <tcp_pcb_remove+0x1e>
 8013464:	4b3e      	ldr	r3, [pc, #248]	; (8013560 <tcp_pcb_remove+0x10c>)
 8013466:	f640 0283 	movw	r2, #2179	; 0x883
 801346a:	493e      	ldr	r1, [pc, #248]	; (8013564 <tcp_pcb_remove+0x110>)
 801346c:	483e      	ldr	r0, [pc, #248]	; (8013568 <tcp_pcb_remove+0x114>)
 801346e:	f008 fc4d 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	2b00      	cmp	r3, #0
 8013476:	d106      	bne.n	8013486 <tcp_pcb_remove+0x32>
 8013478:	4b39      	ldr	r3, [pc, #228]	; (8013560 <tcp_pcb_remove+0x10c>)
 801347a:	f640 0284 	movw	r2, #2180	; 0x884
 801347e:	493b      	ldr	r1, [pc, #236]	; (801356c <tcp_pcb_remove+0x118>)
 8013480:	4839      	ldr	r0, [pc, #228]	; (8013568 <tcp_pcb_remove+0x114>)
 8013482:	f008 fc43 	bl	801bd0c <iprintf>

  TCP_RMV(pcblist, pcb);
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	681b      	ldr	r3, [r3, #0]
 801348a:	683a      	ldr	r2, [r7, #0]
 801348c:	429a      	cmp	r2, r3
 801348e:	d105      	bne.n	801349c <tcp_pcb_remove+0x48>
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	68da      	ldr	r2, [r3, #12]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	601a      	str	r2, [r3, #0]
 801349a:	e013      	b.n	80134c4 <tcp_pcb_remove+0x70>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	60fb      	str	r3, [r7, #12]
 80134a2:	e00c      	b.n	80134be <tcp_pcb_remove+0x6a>
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	68db      	ldr	r3, [r3, #12]
 80134a8:	683a      	ldr	r2, [r7, #0]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d104      	bne.n	80134b8 <tcp_pcb_remove+0x64>
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	68da      	ldr	r2, [r3, #12]
 80134b2:	68fb      	ldr	r3, [r7, #12]
 80134b4:	60da      	str	r2, [r3, #12]
 80134b6:	e005      	b.n	80134c4 <tcp_pcb_remove+0x70>
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	60fb      	str	r3, [r7, #12]
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d1ef      	bne.n	80134a4 <tcp_pcb_remove+0x50>
 80134c4:	683b      	ldr	r3, [r7, #0]
 80134c6:	2200      	movs	r2, #0
 80134c8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80134ca:	6838      	ldr	r0, [r7, #0]
 80134cc:	f7ff ff72 	bl	80133b4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	7d1b      	ldrb	r3, [r3, #20]
 80134d4:	2b0a      	cmp	r3, #10
 80134d6:	d013      	beq.n	8013500 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80134d8:	683b      	ldr	r3, [r7, #0]
 80134da:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d00f      	beq.n	8013500 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80134e0:	683b      	ldr	r3, [r7, #0]
 80134e2:	8b5b      	ldrh	r3, [r3, #26]
 80134e4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d009      	beq.n	8013500 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	8b5b      	ldrh	r3, [r3, #26]
 80134f0:	f043 0302 	orr.w	r3, r3, #2
 80134f4:	b29a      	uxth	r2, r3
 80134f6:	683b      	ldr	r3, [r7, #0]
 80134f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80134fa:	6838      	ldr	r0, [r7, #0]
 80134fc:	f003 fbc2 	bl	8016c84 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013500:	683b      	ldr	r3, [r7, #0]
 8013502:	7d1b      	ldrb	r3, [r3, #20]
 8013504:	2b01      	cmp	r3, #1
 8013506:	d020      	beq.n	801354a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013508:	683b      	ldr	r3, [r7, #0]
 801350a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350c:	2b00      	cmp	r3, #0
 801350e:	d006      	beq.n	801351e <tcp_pcb_remove+0xca>
 8013510:	4b13      	ldr	r3, [pc, #76]	; (8013560 <tcp_pcb_remove+0x10c>)
 8013512:	f640 0293 	movw	r2, #2195	; 0x893
 8013516:	4916      	ldr	r1, [pc, #88]	; (8013570 <tcp_pcb_remove+0x11c>)
 8013518:	4813      	ldr	r0, [pc, #76]	; (8013568 <tcp_pcb_remove+0x114>)
 801351a:	f008 fbf7 	bl	801bd0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801351e:	683b      	ldr	r3, [r7, #0]
 8013520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013522:	2b00      	cmp	r3, #0
 8013524:	d006      	beq.n	8013534 <tcp_pcb_remove+0xe0>
 8013526:	4b0e      	ldr	r3, [pc, #56]	; (8013560 <tcp_pcb_remove+0x10c>)
 8013528:	f640 0294 	movw	r2, #2196	; 0x894
 801352c:	4911      	ldr	r1, [pc, #68]	; (8013574 <tcp_pcb_remove+0x120>)
 801352e:	480e      	ldr	r0, [pc, #56]	; (8013568 <tcp_pcb_remove+0x114>)
 8013530:	f008 fbec 	bl	801bd0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013538:	2b00      	cmp	r3, #0
 801353a:	d006      	beq.n	801354a <tcp_pcb_remove+0xf6>
 801353c:	4b08      	ldr	r3, [pc, #32]	; (8013560 <tcp_pcb_remove+0x10c>)
 801353e:	f640 0296 	movw	r2, #2198	; 0x896
 8013542:	490d      	ldr	r1, [pc, #52]	; (8013578 <tcp_pcb_remove+0x124>)
 8013544:	4808      	ldr	r0, [pc, #32]	; (8013568 <tcp_pcb_remove+0x114>)
 8013546:	f008 fbe1 	bl	801bd0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801354a:	683b      	ldr	r3, [r7, #0]
 801354c:	2200      	movs	r2, #0
 801354e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013550:	683b      	ldr	r3, [r7, #0]
 8013552:	2200      	movs	r2, #0
 8013554:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013556:	bf00      	nop
 8013558:	3710      	adds	r7, #16
 801355a:	46bd      	mov	sp, r7
 801355c:	bd80      	pop	{r7, pc}
 801355e:	bf00      	nop
 8013560:	0801fc60 	.word	0x0801fc60
 8013564:	080202c8 	.word	0x080202c8
 8013568:	0801fca4 	.word	0x0801fca4
 801356c:	080202e4 	.word	0x080202e4
 8013570:	08020304 	.word	0x08020304
 8013574:	0802031c 	.word	0x0802031c
 8013578:	08020338 	.word	0x08020338

0801357c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	2b00      	cmp	r3, #0
 8013588:	d106      	bne.n	8013598 <tcp_next_iss+0x1c>
 801358a:	4b0a      	ldr	r3, [pc, #40]	; (80135b4 <tcp_next_iss+0x38>)
 801358c:	f640 02af 	movw	r2, #2223	; 0x8af
 8013590:	4909      	ldr	r1, [pc, #36]	; (80135b8 <tcp_next_iss+0x3c>)
 8013592:	480a      	ldr	r0, [pc, #40]	; (80135bc <tcp_next_iss+0x40>)
 8013594:	f008 fbba 	bl	801bd0c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013598:	4b09      	ldr	r3, [pc, #36]	; (80135c0 <tcp_next_iss+0x44>)
 801359a:	681a      	ldr	r2, [r3, #0]
 801359c:	4b09      	ldr	r3, [pc, #36]	; (80135c4 <tcp_next_iss+0x48>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4413      	add	r3, r2
 80135a2:	4a07      	ldr	r2, [pc, #28]	; (80135c0 <tcp_next_iss+0x44>)
 80135a4:	6013      	str	r3, [r2, #0]
  return iss;
 80135a6:	4b06      	ldr	r3, [pc, #24]	; (80135c0 <tcp_next_iss+0x44>)
 80135a8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80135aa:	4618      	mov	r0, r3
 80135ac:	3708      	adds	r7, #8
 80135ae:	46bd      	mov	sp, r7
 80135b0:	bd80      	pop	{r7, pc}
 80135b2:	bf00      	nop
 80135b4:	0801fc60 	.word	0x0801fc60
 80135b8:	08020350 	.word	0x08020350
 80135bc:	0801fca4 	.word	0x0801fca4
 80135c0:	20000014 	.word	0x20000014
 80135c4:	2000d7c0 	.word	0x2000d7c0

080135c8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b086      	sub	sp, #24
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	4603      	mov	r3, r0
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
 80135d4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d106      	bne.n	80135ea <tcp_eff_send_mss_netif+0x22>
 80135dc:	4b14      	ldr	r3, [pc, #80]	; (8013630 <tcp_eff_send_mss_netif+0x68>)
 80135de:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80135e2:	4914      	ldr	r1, [pc, #80]	; (8013634 <tcp_eff_send_mss_netif+0x6c>)
 80135e4:	4814      	ldr	r0, [pc, #80]	; (8013638 <tcp_eff_send_mss_netif+0x70>)
 80135e6:	f008 fb91 	bl	801bd0c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80135ea:	68bb      	ldr	r3, [r7, #8]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d101      	bne.n	80135f4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80135f0:	89fb      	ldrh	r3, [r7, #14]
 80135f2:	e019      	b.n	8013628 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135f8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80135fa:	8afb      	ldrh	r3, [r7, #22]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d012      	beq.n	8013626 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013600:	2328      	movs	r3, #40	; 0x28
 8013602:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013604:	8afa      	ldrh	r2, [r7, #22]
 8013606:	8abb      	ldrh	r3, [r7, #20]
 8013608:	429a      	cmp	r2, r3
 801360a:	d904      	bls.n	8013616 <tcp_eff_send_mss_netif+0x4e>
 801360c:	8afa      	ldrh	r2, [r7, #22]
 801360e:	8abb      	ldrh	r3, [r7, #20]
 8013610:	1ad3      	subs	r3, r2, r3
 8013612:	b29b      	uxth	r3, r3
 8013614:	e000      	b.n	8013618 <tcp_eff_send_mss_netif+0x50>
 8013616:	2300      	movs	r3, #0
 8013618:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801361a:	8a7a      	ldrh	r2, [r7, #18]
 801361c:	89fb      	ldrh	r3, [r7, #14]
 801361e:	4293      	cmp	r3, r2
 8013620:	bf28      	it	cs
 8013622:	4613      	movcs	r3, r2
 8013624:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013626:	89fb      	ldrh	r3, [r7, #14]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3718      	adds	r7, #24
 801362c:	46bd      	mov	sp, r7
 801362e:	bd80      	pop	{r7, pc}
 8013630:	0801fc60 	.word	0x0801fc60
 8013634:	0802036c 	.word	0x0802036c
 8013638:	0801fca4 	.word	0x0801fca4

0801363c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013646:	683b      	ldr	r3, [r7, #0]
 8013648:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d119      	bne.n	8013684 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013650:	4b10      	ldr	r3, [pc, #64]	; (8013694 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013652:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013656:	4910      	ldr	r1, [pc, #64]	; (8013698 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013658:	4810      	ldr	r0, [pc, #64]	; (801369c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801365a:	f008 fb57 	bl	801bd0c <iprintf>

  while (pcb != NULL) {
 801365e:	e011      	b.n	8013684 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	681a      	ldr	r2, [r3, #0]
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	429a      	cmp	r2, r3
 801366a:	d108      	bne.n	801367e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013672:	68f8      	ldr	r0, [r7, #12]
 8013674:	f7fe fe1a 	bl	80122ac <tcp_abort>
      pcb = next;
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	60fb      	str	r3, [r7, #12]
 801367c:	e002      	b.n	8013684 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	68db      	ldr	r3, [r3, #12]
 8013682:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013684:	68fb      	ldr	r3, [r7, #12]
 8013686:	2b00      	cmp	r3, #0
 8013688:	d1ea      	bne.n	8013660 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801368a:	bf00      	nop
 801368c:	bf00      	nop
 801368e:	3710      	adds	r7, #16
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}
 8013694:	0801fc60 	.word	0x0801fc60
 8013698:	08020394 	.word	0x08020394
 801369c:	0801fca4 	.word	0x0801fca4

080136a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	b084      	sub	sp, #16
 80136a4:	af00      	add	r7, sp, #0
 80136a6:	6078      	str	r0, [r7, #4]
 80136a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	2b00      	cmp	r3, #0
 80136ae:	d02a      	beq.n	8013706 <tcp_netif_ip_addr_changed+0x66>
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	681b      	ldr	r3, [r3, #0]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d026      	beq.n	8013706 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80136b8:	4b15      	ldr	r3, [pc, #84]	; (8013710 <tcp_netif_ip_addr_changed+0x70>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4619      	mov	r1, r3
 80136be:	6878      	ldr	r0, [r7, #4]
 80136c0:	f7ff ffbc 	bl	801363c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80136c4:	4b13      	ldr	r3, [pc, #76]	; (8013714 <tcp_netif_ip_addr_changed+0x74>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	4619      	mov	r1, r3
 80136ca:	6878      	ldr	r0, [r7, #4]
 80136cc:	f7ff ffb6 	bl	801363c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80136d0:	683b      	ldr	r3, [r7, #0]
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d017      	beq.n	8013706 <tcp_netif_ip_addr_changed+0x66>
 80136d6:	683b      	ldr	r3, [r7, #0]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	d013      	beq.n	8013706 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136de:	4b0e      	ldr	r3, [pc, #56]	; (8013718 <tcp_netif_ip_addr_changed+0x78>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	60fb      	str	r3, [r7, #12]
 80136e4:	e00c      	b.n	8013700 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	681b      	ldr	r3, [r3, #0]
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d103      	bne.n	80136fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	681a      	ldr	r2, [r3, #0]
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	68db      	ldr	r3, [r3, #12]
 80136fe:	60fb      	str	r3, [r7, #12]
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	2b00      	cmp	r3, #0
 8013704:	d1ef      	bne.n	80136e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013706:	bf00      	nop
 8013708:	3710      	adds	r7, #16
 801370a:	46bd      	mov	sp, r7
 801370c:	bd80      	pop	{r7, pc}
 801370e:	bf00      	nop
 8013710:	2000d7bc 	.word	0x2000d7bc
 8013714:	2000d7c8 	.word	0x2000d7c8
 8013718:	2000d7c4 	.word	0x2000d7c4

0801371c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801371c:	b580      	push	{r7, lr}
 801371e:	b082      	sub	sp, #8
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013728:	2b00      	cmp	r3, #0
 801372a:	d007      	beq.n	801373c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013730:	4618      	mov	r0, r3
 8013732:	f7ff fb6f 	bl	8012e14 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	2200      	movs	r2, #0
 801373a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801373c:	bf00      	nop
 801373e:	3708      	adds	r7, #8
 8013740:	46bd      	mov	sp, r7
 8013742:	bd80      	pop	{r7, pc}

08013744 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013744:	b590      	push	{r4, r7, lr}
 8013746:	b08d      	sub	sp, #52	; 0x34
 8013748:	af04      	add	r7, sp, #16
 801374a:	6078      	str	r0, [r7, #4]
 801374c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2b00      	cmp	r3, #0
 8013752:	d105      	bne.n	8013760 <tcp_input+0x1c>
 8013754:	4b9b      	ldr	r3, [pc, #620]	; (80139c4 <tcp_input+0x280>)
 8013756:	2283      	movs	r2, #131	; 0x83
 8013758:	499b      	ldr	r1, [pc, #620]	; (80139c8 <tcp_input+0x284>)
 801375a:	489c      	ldr	r0, [pc, #624]	; (80139cc <tcp_input+0x288>)
 801375c:	f008 fad6 	bl	801bd0c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	4a9a      	ldr	r2, [pc, #616]	; (80139d0 <tcp_input+0x28c>)
 8013766:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	895b      	ldrh	r3, [r3, #10]
 801376c:	2b13      	cmp	r3, #19
 801376e:	f240 83c4 	bls.w	8013efa <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013772:	4b98      	ldr	r3, [pc, #608]	; (80139d4 <tcp_input+0x290>)
 8013774:	695b      	ldr	r3, [r3, #20]
 8013776:	4a97      	ldr	r2, [pc, #604]	; (80139d4 <tcp_input+0x290>)
 8013778:	6812      	ldr	r2, [r2, #0]
 801377a:	4611      	mov	r1, r2
 801377c:	4618      	mov	r0, r3
 801377e:	f006 fbcb 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8013782:	4603      	mov	r3, r0
 8013784:	2b00      	cmp	r3, #0
 8013786:	f040 83ba 	bne.w	8013efe <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801378a:	4b92      	ldr	r3, [pc, #584]	; (80139d4 <tcp_input+0x290>)
 801378c:	695b      	ldr	r3, [r3, #20]
 801378e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013792:	2be0      	cmp	r3, #224	; 0xe0
 8013794:	f000 83b3 	beq.w	8013efe <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013798:	4b8d      	ldr	r3, [pc, #564]	; (80139d0 <tcp_input+0x28c>)
 801379a:	681b      	ldr	r3, [r3, #0]
 801379c:	899b      	ldrh	r3, [r3, #12]
 801379e:	b29b      	uxth	r3, r3
 80137a0:	4618      	mov	r0, r3
 80137a2:	f7fc fba5 	bl	800fef0 <lwip_htons>
 80137a6:	4603      	mov	r3, r0
 80137a8:	0b1b      	lsrs	r3, r3, #12
 80137aa:	b29b      	uxth	r3, r3
 80137ac:	b2db      	uxtb	r3, r3
 80137ae:	009b      	lsls	r3, r3, #2
 80137b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80137b2:	7cbb      	ldrb	r3, [r7, #18]
 80137b4:	2b13      	cmp	r3, #19
 80137b6:	f240 83a4 	bls.w	8013f02 <tcp_input+0x7be>
 80137ba:	7cbb      	ldrb	r3, [r7, #18]
 80137bc:	b29a      	uxth	r2, r3
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	891b      	ldrh	r3, [r3, #8]
 80137c2:	429a      	cmp	r2, r3
 80137c4:	f200 839d 	bhi.w	8013f02 <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80137c8:	7cbb      	ldrb	r3, [r7, #18]
 80137ca:	b29b      	uxth	r3, r3
 80137cc:	3b14      	subs	r3, #20
 80137ce:	b29a      	uxth	r2, r3
 80137d0:	4b81      	ldr	r3, [pc, #516]	; (80139d8 <tcp_input+0x294>)
 80137d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80137d4:	4b81      	ldr	r3, [pc, #516]	; (80139dc <tcp_input+0x298>)
 80137d6:	2200      	movs	r2, #0
 80137d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	895a      	ldrh	r2, [r3, #10]
 80137de:	7cbb      	ldrb	r3, [r7, #18]
 80137e0:	b29b      	uxth	r3, r3
 80137e2:	429a      	cmp	r2, r3
 80137e4:	d309      	bcc.n	80137fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80137e6:	4b7c      	ldr	r3, [pc, #496]	; (80139d8 <tcp_input+0x294>)
 80137e8:	881a      	ldrh	r2, [r3, #0]
 80137ea:	4b7d      	ldr	r3, [pc, #500]	; (80139e0 <tcp_input+0x29c>)
 80137ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80137ee:	7cbb      	ldrb	r3, [r7, #18]
 80137f0:	4619      	mov	r1, r3
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7fd fea2 	bl	801153c <pbuf_remove_header>
 80137f8:	e04e      	b.n	8013898 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d105      	bne.n	801380e <tcp_input+0xca>
 8013802:	4b70      	ldr	r3, [pc, #448]	; (80139c4 <tcp_input+0x280>)
 8013804:	22c2      	movs	r2, #194	; 0xc2
 8013806:	4977      	ldr	r1, [pc, #476]	; (80139e4 <tcp_input+0x2a0>)
 8013808:	4870      	ldr	r0, [pc, #448]	; (80139cc <tcp_input+0x288>)
 801380a:	f008 fa7f 	bl	801bd0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801380e:	2114      	movs	r1, #20
 8013810:	6878      	ldr	r0, [r7, #4]
 8013812:	f7fd fe93 	bl	801153c <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	895a      	ldrh	r2, [r3, #10]
 801381a:	4b71      	ldr	r3, [pc, #452]	; (80139e0 <tcp_input+0x29c>)
 801381c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801381e:	4b6e      	ldr	r3, [pc, #440]	; (80139d8 <tcp_input+0x294>)
 8013820:	881a      	ldrh	r2, [r3, #0]
 8013822:	4b6f      	ldr	r3, [pc, #444]	; (80139e0 <tcp_input+0x29c>)
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	1ad3      	subs	r3, r2, r3
 8013828:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801382a:	4b6d      	ldr	r3, [pc, #436]	; (80139e0 <tcp_input+0x29c>)
 801382c:	881b      	ldrh	r3, [r3, #0]
 801382e:	4619      	mov	r1, r3
 8013830:	6878      	ldr	r0, [r7, #4]
 8013832:	f7fd fe83 	bl	801153c <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	895b      	ldrh	r3, [r3, #10]
 801383c:	8a3a      	ldrh	r2, [r7, #16]
 801383e:	429a      	cmp	r2, r3
 8013840:	f200 8361 	bhi.w	8013f06 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	681b      	ldr	r3, [r3, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	4a64      	ldr	r2, [pc, #400]	; (80139dc <tcp_input+0x298>)
 801384c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	8a3a      	ldrh	r2, [r7, #16]
 8013854:	4611      	mov	r1, r2
 8013856:	4618      	mov	r0, r3
 8013858:	f7fd fe70 	bl	801153c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	891a      	ldrh	r2, [r3, #8]
 8013860:	8a3b      	ldrh	r3, [r7, #16]
 8013862:	1ad3      	subs	r3, r2, r3
 8013864:	b29a      	uxth	r2, r3
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	895b      	ldrh	r3, [r3, #10]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d005      	beq.n	801387e <tcp_input+0x13a>
 8013872:	4b54      	ldr	r3, [pc, #336]	; (80139c4 <tcp_input+0x280>)
 8013874:	22df      	movs	r2, #223	; 0xdf
 8013876:	495c      	ldr	r1, [pc, #368]	; (80139e8 <tcp_input+0x2a4>)
 8013878:	4854      	ldr	r0, [pc, #336]	; (80139cc <tcp_input+0x288>)
 801387a:	f008 fa47 	bl	801bd0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	891a      	ldrh	r2, [r3, #8]
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	681b      	ldr	r3, [r3, #0]
 8013886:	891b      	ldrh	r3, [r3, #8]
 8013888:	429a      	cmp	r2, r3
 801388a:	d005      	beq.n	8013898 <tcp_input+0x154>
 801388c:	4b4d      	ldr	r3, [pc, #308]	; (80139c4 <tcp_input+0x280>)
 801388e:	22e0      	movs	r2, #224	; 0xe0
 8013890:	4956      	ldr	r1, [pc, #344]	; (80139ec <tcp_input+0x2a8>)
 8013892:	484e      	ldr	r0, [pc, #312]	; (80139cc <tcp_input+0x288>)
 8013894:	f008 fa3a 	bl	801bd0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013898:	4b4d      	ldr	r3, [pc, #308]	; (80139d0 <tcp_input+0x28c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	881b      	ldrh	r3, [r3, #0]
 801389e:	b29b      	uxth	r3, r3
 80138a0:	4a4b      	ldr	r2, [pc, #300]	; (80139d0 <tcp_input+0x28c>)
 80138a2:	6814      	ldr	r4, [r2, #0]
 80138a4:	4618      	mov	r0, r3
 80138a6:	f7fc fb23 	bl	800fef0 <lwip_htons>
 80138aa:	4603      	mov	r3, r0
 80138ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80138ae:	4b48      	ldr	r3, [pc, #288]	; (80139d0 <tcp_input+0x28c>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	885b      	ldrh	r3, [r3, #2]
 80138b4:	b29b      	uxth	r3, r3
 80138b6:	4a46      	ldr	r2, [pc, #280]	; (80139d0 <tcp_input+0x28c>)
 80138b8:	6814      	ldr	r4, [r2, #0]
 80138ba:	4618      	mov	r0, r3
 80138bc:	f7fc fb18 	bl	800fef0 <lwip_htons>
 80138c0:	4603      	mov	r3, r0
 80138c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80138c4:	4b42      	ldr	r3, [pc, #264]	; (80139d0 <tcp_input+0x28c>)
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	685b      	ldr	r3, [r3, #4]
 80138ca:	4a41      	ldr	r2, [pc, #260]	; (80139d0 <tcp_input+0x28c>)
 80138cc:	6814      	ldr	r4, [r2, #0]
 80138ce:	4618      	mov	r0, r3
 80138d0:	f7fc fb23 	bl	800ff1a <lwip_htonl>
 80138d4:	4603      	mov	r3, r0
 80138d6:	6063      	str	r3, [r4, #4]
 80138d8:	6863      	ldr	r3, [r4, #4]
 80138da:	4a45      	ldr	r2, [pc, #276]	; (80139f0 <tcp_input+0x2ac>)
 80138dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80138de:	4b3c      	ldr	r3, [pc, #240]	; (80139d0 <tcp_input+0x28c>)
 80138e0:	681b      	ldr	r3, [r3, #0]
 80138e2:	689b      	ldr	r3, [r3, #8]
 80138e4:	4a3a      	ldr	r2, [pc, #232]	; (80139d0 <tcp_input+0x28c>)
 80138e6:	6814      	ldr	r4, [r2, #0]
 80138e8:	4618      	mov	r0, r3
 80138ea:	f7fc fb16 	bl	800ff1a <lwip_htonl>
 80138ee:	4603      	mov	r3, r0
 80138f0:	60a3      	str	r3, [r4, #8]
 80138f2:	68a3      	ldr	r3, [r4, #8]
 80138f4:	4a3f      	ldr	r2, [pc, #252]	; (80139f4 <tcp_input+0x2b0>)
 80138f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80138f8:	4b35      	ldr	r3, [pc, #212]	; (80139d0 <tcp_input+0x28c>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	89db      	ldrh	r3, [r3, #14]
 80138fe:	b29b      	uxth	r3, r3
 8013900:	4a33      	ldr	r2, [pc, #204]	; (80139d0 <tcp_input+0x28c>)
 8013902:	6814      	ldr	r4, [r2, #0]
 8013904:	4618      	mov	r0, r3
 8013906:	f7fc faf3 	bl	800fef0 <lwip_htons>
 801390a:	4603      	mov	r3, r0
 801390c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801390e:	4b30      	ldr	r3, [pc, #192]	; (80139d0 <tcp_input+0x28c>)
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	899b      	ldrh	r3, [r3, #12]
 8013914:	b29b      	uxth	r3, r3
 8013916:	4618      	mov	r0, r3
 8013918:	f7fc faea 	bl	800fef0 <lwip_htons>
 801391c:	4603      	mov	r3, r0
 801391e:	b2db      	uxtb	r3, r3
 8013920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013924:	b2da      	uxtb	r2, r3
 8013926:	4b34      	ldr	r3, [pc, #208]	; (80139f8 <tcp_input+0x2b4>)
 8013928:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	891a      	ldrh	r2, [r3, #8]
 801392e:	4b33      	ldr	r3, [pc, #204]	; (80139fc <tcp_input+0x2b8>)
 8013930:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013932:	4b31      	ldr	r3, [pc, #196]	; (80139f8 <tcp_input+0x2b4>)
 8013934:	781b      	ldrb	r3, [r3, #0]
 8013936:	f003 0303 	and.w	r3, r3, #3
 801393a:	2b00      	cmp	r3, #0
 801393c:	d00c      	beq.n	8013958 <tcp_input+0x214>
    tcplen++;
 801393e:	4b2f      	ldr	r3, [pc, #188]	; (80139fc <tcp_input+0x2b8>)
 8013940:	881b      	ldrh	r3, [r3, #0]
 8013942:	3301      	adds	r3, #1
 8013944:	b29a      	uxth	r2, r3
 8013946:	4b2d      	ldr	r3, [pc, #180]	; (80139fc <tcp_input+0x2b8>)
 8013948:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	891a      	ldrh	r2, [r3, #8]
 801394e:	4b2b      	ldr	r3, [pc, #172]	; (80139fc <tcp_input+0x2b8>)
 8013950:	881b      	ldrh	r3, [r3, #0]
 8013952:	429a      	cmp	r2, r3
 8013954:	f200 82d9 	bhi.w	8013f0a <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013958:	2300      	movs	r3, #0
 801395a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801395c:	4b28      	ldr	r3, [pc, #160]	; (8013a00 <tcp_input+0x2bc>)
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	61fb      	str	r3, [r7, #28]
 8013962:	e09d      	b.n	8013aa0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	7d1b      	ldrb	r3, [r3, #20]
 8013968:	2b00      	cmp	r3, #0
 801396a:	d105      	bne.n	8013978 <tcp_input+0x234>
 801396c:	4b15      	ldr	r3, [pc, #84]	; (80139c4 <tcp_input+0x280>)
 801396e:	22fb      	movs	r2, #251	; 0xfb
 8013970:	4924      	ldr	r1, [pc, #144]	; (8013a04 <tcp_input+0x2c0>)
 8013972:	4816      	ldr	r0, [pc, #88]	; (80139cc <tcp_input+0x288>)
 8013974:	f008 f9ca 	bl	801bd0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013978:	69fb      	ldr	r3, [r7, #28]
 801397a:	7d1b      	ldrb	r3, [r3, #20]
 801397c:	2b0a      	cmp	r3, #10
 801397e:	d105      	bne.n	801398c <tcp_input+0x248>
 8013980:	4b10      	ldr	r3, [pc, #64]	; (80139c4 <tcp_input+0x280>)
 8013982:	22fc      	movs	r2, #252	; 0xfc
 8013984:	4920      	ldr	r1, [pc, #128]	; (8013a08 <tcp_input+0x2c4>)
 8013986:	4811      	ldr	r0, [pc, #68]	; (80139cc <tcp_input+0x288>)
 8013988:	f008 f9c0 	bl	801bd0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	7d1b      	ldrb	r3, [r3, #20]
 8013990:	2b01      	cmp	r3, #1
 8013992:	d105      	bne.n	80139a0 <tcp_input+0x25c>
 8013994:	4b0b      	ldr	r3, [pc, #44]	; (80139c4 <tcp_input+0x280>)
 8013996:	22fd      	movs	r2, #253	; 0xfd
 8013998:	491c      	ldr	r1, [pc, #112]	; (8013a0c <tcp_input+0x2c8>)
 801399a:	480c      	ldr	r0, [pc, #48]	; (80139cc <tcp_input+0x288>)
 801399c:	f008 f9b6 	bl	801bd0c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	7a1b      	ldrb	r3, [r3, #8]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d033      	beq.n	8013a10 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	7a1a      	ldrb	r2, [r3, #8]
 80139ac:	4b09      	ldr	r3, [pc, #36]	; (80139d4 <tcp_input+0x290>)
 80139ae:	685b      	ldr	r3, [r3, #4]
 80139b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80139b4:	3301      	adds	r3, #1
 80139b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139b8:	429a      	cmp	r2, r3
 80139ba:	d029      	beq.n	8013a10 <tcp_input+0x2cc>
      prev = pcb;
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	61bb      	str	r3, [r7, #24]
      continue;
 80139c0:	e06b      	b.n	8013a9a <tcp_input+0x356>
 80139c2:	bf00      	nop
 80139c4:	080203c8 	.word	0x080203c8
 80139c8:	080203fc 	.word	0x080203fc
 80139cc:	08020414 	.word	0x08020414
 80139d0:	20004804 	.word	0x20004804
 80139d4:	2000a0a8 	.word	0x2000a0a8
 80139d8:	20004808 	.word	0x20004808
 80139dc:	2000480c 	.word	0x2000480c
 80139e0:	2000480a 	.word	0x2000480a
 80139e4:	0802043c 	.word	0x0802043c
 80139e8:	0802044c 	.word	0x0802044c
 80139ec:	08020458 	.word	0x08020458
 80139f0:	20004814 	.word	0x20004814
 80139f4:	20004818 	.word	0x20004818
 80139f8:	20004820 	.word	0x20004820
 80139fc:	2000481e 	.word	0x2000481e
 8013a00:	2000d7bc 	.word	0x2000d7bc
 8013a04:	08020478 	.word	0x08020478
 8013a08:	080204a0 	.word	0x080204a0
 8013a0c:	080204cc 	.word	0x080204cc
    }

    if (pcb->remote_port == tcphdr->src &&
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	8b1a      	ldrh	r2, [r3, #24]
 8013a14:	4b94      	ldr	r3, [pc, #592]	; (8013c68 <tcp_input+0x524>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	881b      	ldrh	r3, [r3, #0]
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d13a      	bne.n	8013a96 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	8ada      	ldrh	r2, [r3, #22]
 8013a24:	4b90      	ldr	r3, [pc, #576]	; (8013c68 <tcp_input+0x524>)
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	885b      	ldrh	r3, [r3, #2]
 8013a2a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013a2c:	429a      	cmp	r2, r3
 8013a2e:	d132      	bne.n	8013a96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a30:	69fb      	ldr	r3, [r7, #28]
 8013a32:	685a      	ldr	r2, [r3, #4]
 8013a34:	4b8d      	ldr	r3, [pc, #564]	; (8013c6c <tcp_input+0x528>)
 8013a36:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d12c      	bne.n	8013a96 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	681a      	ldr	r2, [r3, #0]
 8013a40:	4b8a      	ldr	r3, [pc, #552]	; (8013c6c <tcp_input+0x528>)
 8013a42:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d126      	bne.n	8013a96 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013a48:	69fb      	ldr	r3, [r7, #28]
 8013a4a:	68db      	ldr	r3, [r3, #12]
 8013a4c:	69fa      	ldr	r2, [r7, #28]
 8013a4e:	429a      	cmp	r2, r3
 8013a50:	d106      	bne.n	8013a60 <tcp_input+0x31c>
 8013a52:	4b87      	ldr	r3, [pc, #540]	; (8013c70 <tcp_input+0x52c>)
 8013a54:	f240 120d 	movw	r2, #269	; 0x10d
 8013a58:	4986      	ldr	r1, [pc, #536]	; (8013c74 <tcp_input+0x530>)
 8013a5a:	4887      	ldr	r0, [pc, #540]	; (8013c78 <tcp_input+0x534>)
 8013a5c:	f008 f956 	bl	801bd0c <iprintf>
      if (prev != NULL) {
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00a      	beq.n	8013a7c <tcp_input+0x338>
        prev->next = pcb->next;
 8013a66:	69fb      	ldr	r3, [r7, #28]
 8013a68:	68da      	ldr	r2, [r3, #12]
 8013a6a:	69bb      	ldr	r3, [r7, #24]
 8013a6c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013a6e:	4b83      	ldr	r3, [pc, #524]	; (8013c7c <tcp_input+0x538>)
 8013a70:	681a      	ldr	r2, [r3, #0]
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013a76:	4a81      	ldr	r2, [pc, #516]	; (8013c7c <tcp_input+0x538>)
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013a7c:	69fb      	ldr	r3, [r7, #28]
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	69fa      	ldr	r2, [r7, #28]
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d111      	bne.n	8013aaa <tcp_input+0x366>
 8013a86:	4b7a      	ldr	r3, [pc, #488]	; (8013c70 <tcp_input+0x52c>)
 8013a88:	f240 1215 	movw	r2, #277	; 0x115
 8013a8c:	497c      	ldr	r1, [pc, #496]	; (8013c80 <tcp_input+0x53c>)
 8013a8e:	487a      	ldr	r0, [pc, #488]	; (8013c78 <tcp_input+0x534>)
 8013a90:	f008 f93c 	bl	801bd0c <iprintf>
      break;
 8013a94:	e009      	b.n	8013aaa <tcp_input+0x366>
    }
    prev = pcb;
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	68db      	ldr	r3, [r3, #12]
 8013a9e:	61fb      	str	r3, [r7, #28]
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	f47f af5e 	bne.w	8013964 <tcp_input+0x220>
 8013aa8:	e000      	b.n	8013aac <tcp_input+0x368>
      break;
 8013aaa:	bf00      	nop
  }

  if (pcb == NULL) {
 8013aac:	69fb      	ldr	r3, [r7, #28]
 8013aae:	2b00      	cmp	r3, #0
 8013ab0:	f040 8095 	bne.w	8013bde <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ab4:	4b73      	ldr	r3, [pc, #460]	; (8013c84 <tcp_input+0x540>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	61fb      	str	r3, [r7, #28]
 8013aba:	e03f      	b.n	8013b3c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013abc:	69fb      	ldr	r3, [r7, #28]
 8013abe:	7d1b      	ldrb	r3, [r3, #20]
 8013ac0:	2b0a      	cmp	r3, #10
 8013ac2:	d006      	beq.n	8013ad2 <tcp_input+0x38e>
 8013ac4:	4b6a      	ldr	r3, [pc, #424]	; (8013c70 <tcp_input+0x52c>)
 8013ac6:	f240 121f 	movw	r2, #287	; 0x11f
 8013aca:	496f      	ldr	r1, [pc, #444]	; (8013c88 <tcp_input+0x544>)
 8013acc:	486a      	ldr	r0, [pc, #424]	; (8013c78 <tcp_input+0x534>)
 8013ace:	f008 f91d 	bl	801bd0c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ad2:	69fb      	ldr	r3, [r7, #28]
 8013ad4:	7a1b      	ldrb	r3, [r3, #8]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d009      	beq.n	8013aee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	7a1a      	ldrb	r2, [r3, #8]
 8013ade:	4b63      	ldr	r3, [pc, #396]	; (8013c6c <tcp_input+0x528>)
 8013ae0:	685b      	ldr	r3, [r3, #4]
 8013ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ae6:	3301      	adds	r3, #1
 8013ae8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d122      	bne.n	8013b34 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	8b1a      	ldrh	r2, [r3, #24]
 8013af2:	4b5d      	ldr	r3, [pc, #372]	; (8013c68 <tcp_input+0x524>)
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	881b      	ldrh	r3, [r3, #0]
 8013af8:	b29b      	uxth	r3, r3
 8013afa:	429a      	cmp	r2, r3
 8013afc:	d11b      	bne.n	8013b36 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	8ada      	ldrh	r2, [r3, #22]
 8013b02:	4b59      	ldr	r3, [pc, #356]	; (8013c68 <tcp_input+0x524>)
 8013b04:	681b      	ldr	r3, [r3, #0]
 8013b06:	885b      	ldrh	r3, [r3, #2]
 8013b08:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013b0a:	429a      	cmp	r2, r3
 8013b0c:	d113      	bne.n	8013b36 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b0e:	69fb      	ldr	r3, [r7, #28]
 8013b10:	685a      	ldr	r2, [r3, #4]
 8013b12:	4b56      	ldr	r3, [pc, #344]	; (8013c6c <tcp_input+0x528>)
 8013b14:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013b16:	429a      	cmp	r2, r3
 8013b18:	d10d      	bne.n	8013b36 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	681a      	ldr	r2, [r3, #0]
 8013b1e:	4b53      	ldr	r3, [pc, #332]	; (8013c6c <tcp_input+0x528>)
 8013b20:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013b22:	429a      	cmp	r2, r3
 8013b24:	d107      	bne.n	8013b36 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013b26:	69f8      	ldr	r0, [r7, #28]
 8013b28:	f000 fb54 	bl	80141d4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013b2c:	6878      	ldr	r0, [r7, #4]
 8013b2e:	f7fd fdbd 	bl	80116ac <pbuf_free>
        return;
 8013b32:	e1f0      	b.n	8013f16 <tcp_input+0x7d2>
        continue;
 8013b34:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	61fb      	str	r3, [r7, #28]
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1bc      	bne.n	8013abc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013b42:	2300      	movs	r3, #0
 8013b44:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b46:	4b51      	ldr	r3, [pc, #324]	; (8013c8c <tcp_input+0x548>)
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	617b      	str	r3, [r7, #20]
 8013b4c:	e02a      	b.n	8013ba4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013b4e:	697b      	ldr	r3, [r7, #20]
 8013b50:	7a1b      	ldrb	r3, [r3, #8]
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d00c      	beq.n	8013b70 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013b56:	697b      	ldr	r3, [r7, #20]
 8013b58:	7a1a      	ldrb	r2, [r3, #8]
 8013b5a:	4b44      	ldr	r3, [pc, #272]	; (8013c6c <tcp_input+0x528>)
 8013b5c:	685b      	ldr	r3, [r3, #4]
 8013b5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b62:	3301      	adds	r3, #1
 8013b64:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d002      	beq.n	8013b70 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	61bb      	str	r3, [r7, #24]
        continue;
 8013b6e:	e016      	b.n	8013b9e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013b70:	697b      	ldr	r3, [r7, #20]
 8013b72:	8ada      	ldrh	r2, [r3, #22]
 8013b74:	4b3c      	ldr	r3, [pc, #240]	; (8013c68 <tcp_input+0x524>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	885b      	ldrh	r3, [r3, #2]
 8013b7a:	b29b      	uxth	r3, r3
 8013b7c:	429a      	cmp	r2, r3
 8013b7e:	d10c      	bne.n	8013b9a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	681a      	ldr	r2, [r3, #0]
 8013b84:	4b39      	ldr	r3, [pc, #228]	; (8013c6c <tcp_input+0x528>)
 8013b86:	695b      	ldr	r3, [r3, #20]
 8013b88:	429a      	cmp	r2, r3
 8013b8a:	d00f      	beq.n	8013bac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b8c:	697b      	ldr	r3, [r7, #20]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00d      	beq.n	8013bae <tcp_input+0x46a>
 8013b92:	697b      	ldr	r3, [r7, #20]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d009      	beq.n	8013bae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b9a:	697b      	ldr	r3, [r7, #20]
 8013b9c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b9e:	697b      	ldr	r3, [r7, #20]
 8013ba0:	68db      	ldr	r3, [r3, #12]
 8013ba2:	617b      	str	r3, [r7, #20]
 8013ba4:	697b      	ldr	r3, [r7, #20]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d1d1      	bne.n	8013b4e <tcp_input+0x40a>
 8013baa:	e000      	b.n	8013bae <tcp_input+0x46a>
            break;
 8013bac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013bae:	697b      	ldr	r3, [r7, #20]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	d014      	beq.n	8013bde <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013bb4:	69bb      	ldr	r3, [r7, #24]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d00a      	beq.n	8013bd0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013bba:	697b      	ldr	r3, [r7, #20]
 8013bbc:	68da      	ldr	r2, [r3, #12]
 8013bbe:	69bb      	ldr	r3, [r7, #24]
 8013bc0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013bc2:	4b32      	ldr	r3, [pc, #200]	; (8013c8c <tcp_input+0x548>)
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	697b      	ldr	r3, [r7, #20]
 8013bc8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013bca:	4a30      	ldr	r2, [pc, #192]	; (8013c8c <tcp_input+0x548>)
 8013bcc:	697b      	ldr	r3, [r7, #20]
 8013bce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013bd0:	6978      	ldr	r0, [r7, #20]
 8013bd2:	f000 fa01 	bl	8013fd8 <tcp_listen_input>
      }
      pbuf_free(p);
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f7fd fd68 	bl	80116ac <pbuf_free>
      return;
 8013bdc:	e19b      	b.n	8013f16 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f000 8160 	beq.w	8013ea6 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013be6:	4b2a      	ldr	r3, [pc, #168]	; (8013c90 <tcp_input+0x54c>)
 8013be8:	2200      	movs	r2, #0
 8013bea:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	891a      	ldrh	r2, [r3, #8]
 8013bf0:	4b27      	ldr	r3, [pc, #156]	; (8013c90 <tcp_input+0x54c>)
 8013bf2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013bf4:	4a26      	ldr	r2, [pc, #152]	; (8013c90 <tcp_input+0x54c>)
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013bfa:	4b1b      	ldr	r3, [pc, #108]	; (8013c68 <tcp_input+0x524>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	4a24      	ldr	r2, [pc, #144]	; (8013c90 <tcp_input+0x54c>)
 8013c00:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013c02:	4b24      	ldr	r3, [pc, #144]	; (8013c94 <tcp_input+0x550>)
 8013c04:	2200      	movs	r2, #0
 8013c06:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013c08:	4b23      	ldr	r3, [pc, #140]	; (8013c98 <tcp_input+0x554>)
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013c0e:	4b23      	ldr	r3, [pc, #140]	; (8013c9c <tcp_input+0x558>)
 8013c10:	2200      	movs	r2, #0
 8013c12:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013c14:	4b22      	ldr	r3, [pc, #136]	; (8013ca0 <tcp_input+0x55c>)
 8013c16:	781b      	ldrb	r3, [r3, #0]
 8013c18:	f003 0308 	and.w	r3, r3, #8
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d006      	beq.n	8013c2e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7b5b      	ldrb	r3, [r3, #13]
 8013c24:	f043 0301 	orr.w	r3, r3, #1
 8013c28:	b2da      	uxtb	r2, r3
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013c2e:	69fb      	ldr	r3, [r7, #28]
 8013c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d038      	beq.n	8013ca8 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013c36:	69f8      	ldr	r0, [r7, #28]
 8013c38:	f7ff f870 	bl	8012d1c <tcp_process_refused_data>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	f113 0f0d 	cmn.w	r3, #13
 8013c42:	d007      	beq.n	8013c54 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d02d      	beq.n	8013ca8 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013c4c:	4b15      	ldr	r3, [pc, #84]	; (8013ca4 <tcp_input+0x560>)
 8013c4e:	881b      	ldrh	r3, [r3, #0]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d029      	beq.n	8013ca8 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013c54:	69fb      	ldr	r3, [r7, #28]
 8013c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	f040 8104 	bne.w	8013e66 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013c5e:	69f8      	ldr	r0, [r7, #28]
 8013c60:	f003 fe16 	bl	8017890 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013c64:	e0ff      	b.n	8013e66 <tcp_input+0x722>
 8013c66:	bf00      	nop
 8013c68:	20004804 	.word	0x20004804
 8013c6c:	2000a0a8 	.word	0x2000a0a8
 8013c70:	080203c8 	.word	0x080203c8
 8013c74:	080204f4 	.word	0x080204f4
 8013c78:	08020414 	.word	0x08020414
 8013c7c:	2000d7bc 	.word	0x2000d7bc
 8013c80:	08020520 	.word	0x08020520
 8013c84:	2000d7cc 	.word	0x2000d7cc
 8013c88:	0802054c 	.word	0x0802054c
 8013c8c:	2000d7c4 	.word	0x2000d7c4
 8013c90:	200047f4 	.word	0x200047f4
 8013c94:	20004824 	.word	0x20004824
 8013c98:	20004821 	.word	0x20004821
 8013c9c:	2000481c 	.word	0x2000481c
 8013ca0:	20004820 	.word	0x20004820
 8013ca4:	2000481e 	.word	0x2000481e
      }
    }
    tcp_input_pcb = pcb;
 8013ca8:	4a9c      	ldr	r2, [pc, #624]	; (8013f1c <tcp_input+0x7d8>)
 8013caa:	69fb      	ldr	r3, [r7, #28]
 8013cac:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013cae:	69f8      	ldr	r0, [r7, #28]
 8013cb0:	f000 fb0a 	bl	80142c8 <tcp_process>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013cb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cbc:	f113 0f0d 	cmn.w	r3, #13
 8013cc0:	f000 80d3 	beq.w	8013e6a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013cc4:	4b96      	ldr	r3, [pc, #600]	; (8013f20 <tcp_input+0x7dc>)
 8013cc6:	781b      	ldrb	r3, [r3, #0]
 8013cc8:	f003 0308 	and.w	r3, r3, #8
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d015      	beq.n	8013cfc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013cd0:	69fb      	ldr	r3, [r7, #28]
 8013cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d008      	beq.n	8013cec <tcp_input+0x5a8>
 8013cda:	69fb      	ldr	r3, [r7, #28]
 8013cdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013ce0:	69fa      	ldr	r2, [r7, #28]
 8013ce2:	6912      	ldr	r2, [r2, #16]
 8013ce4:	f06f 010d 	mvn.w	r1, #13
 8013ce8:	4610      	mov	r0, r2
 8013cea:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013cec:	69f9      	ldr	r1, [r7, #28]
 8013cee:	488d      	ldr	r0, [pc, #564]	; (8013f24 <tcp_input+0x7e0>)
 8013cf0:	f7ff fbb0 	bl	8013454 <tcp_pcb_remove>
        tcp_free(pcb);
 8013cf4:	69f8      	ldr	r0, [r7, #28]
 8013cf6:	f7fd ff95 	bl	8011c24 <tcp_free>
 8013cfa:	e0c1      	b.n	8013e80 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013d00:	4b89      	ldr	r3, [pc, #548]	; (8013f28 <tcp_input+0x7e4>)
 8013d02:	881b      	ldrh	r3, [r3, #0]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d01d      	beq.n	8013d44 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013d08:	4b87      	ldr	r3, [pc, #540]	; (8013f28 <tcp_input+0x7e4>)
 8013d0a:	881b      	ldrh	r3, [r3, #0]
 8013d0c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013d0e:	69fb      	ldr	r3, [r7, #28]
 8013d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d00a      	beq.n	8013d2e <tcp_input+0x5ea>
 8013d18:	69fb      	ldr	r3, [r7, #28]
 8013d1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d1e:	69fa      	ldr	r2, [r7, #28]
 8013d20:	6910      	ldr	r0, [r2, #16]
 8013d22:	89fa      	ldrh	r2, [r7, #14]
 8013d24:	69f9      	ldr	r1, [r7, #28]
 8013d26:	4798      	blx	r3
 8013d28:	4603      	mov	r3, r0
 8013d2a:	74fb      	strb	r3, [r7, #19]
 8013d2c:	e001      	b.n	8013d32 <tcp_input+0x5ee>
 8013d2e:	2300      	movs	r3, #0
 8013d30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d36:	f113 0f0d 	cmn.w	r3, #13
 8013d3a:	f000 8098 	beq.w	8013e6e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013d3e:	4b7a      	ldr	r3, [pc, #488]	; (8013f28 <tcp_input+0x7e4>)
 8013d40:	2200      	movs	r2, #0
 8013d42:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013d44:	69f8      	ldr	r0, [r7, #28]
 8013d46:	f000 f907 	bl	8013f58 <tcp_input_delayed_close>
 8013d4a:	4603      	mov	r3, r0
 8013d4c:	2b00      	cmp	r3, #0
 8013d4e:	f040 8090 	bne.w	8013e72 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013d52:	4b76      	ldr	r3, [pc, #472]	; (8013f2c <tcp_input+0x7e8>)
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d041      	beq.n	8013dde <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013d5a:	69fb      	ldr	r3, [r7, #28]
 8013d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d006      	beq.n	8013d70 <tcp_input+0x62c>
 8013d62:	4b73      	ldr	r3, [pc, #460]	; (8013f30 <tcp_input+0x7ec>)
 8013d64:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013d68:	4972      	ldr	r1, [pc, #456]	; (8013f34 <tcp_input+0x7f0>)
 8013d6a:	4873      	ldr	r0, [pc, #460]	; (8013f38 <tcp_input+0x7f4>)
 8013d6c:	f007 ffce 	bl	801bd0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013d70:	69fb      	ldr	r3, [r7, #28]
 8013d72:	8b5b      	ldrh	r3, [r3, #26]
 8013d74:	f003 0310 	and.w	r3, r3, #16
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d008      	beq.n	8013d8e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013d7c:	4b6b      	ldr	r3, [pc, #428]	; (8013f2c <tcp_input+0x7e8>)
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4618      	mov	r0, r3
 8013d82:	f7fd fc93 	bl	80116ac <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013d86:	69f8      	ldr	r0, [r7, #28]
 8013d88:	f7fe fa90 	bl	80122ac <tcp_abort>
            goto aborted;
 8013d8c:	e078      	b.n	8013e80 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013d8e:	69fb      	ldr	r3, [r7, #28]
 8013d90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d00c      	beq.n	8013db2 <tcp_input+0x66e>
 8013d98:	69fb      	ldr	r3, [r7, #28]
 8013d9a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	6918      	ldr	r0, [r3, #16]
 8013da2:	4b62      	ldr	r3, [pc, #392]	; (8013f2c <tcp_input+0x7e8>)
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	2300      	movs	r3, #0
 8013da8:	69f9      	ldr	r1, [r7, #28]
 8013daa:	47a0      	blx	r4
 8013dac:	4603      	mov	r3, r0
 8013dae:	74fb      	strb	r3, [r7, #19]
 8013db0:	e008      	b.n	8013dc4 <tcp_input+0x680>
 8013db2:	4b5e      	ldr	r3, [pc, #376]	; (8013f2c <tcp_input+0x7e8>)
 8013db4:	681a      	ldr	r2, [r3, #0]
 8013db6:	2300      	movs	r3, #0
 8013db8:	69f9      	ldr	r1, [r7, #28]
 8013dba:	2000      	movs	r0, #0
 8013dbc:	f7ff f884 	bl	8012ec8 <tcp_recv_null>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013dc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dc8:	f113 0f0d 	cmn.w	r3, #13
 8013dcc:	d053      	beq.n	8013e76 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013dce:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d003      	beq.n	8013dde <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013dd6:	4b55      	ldr	r3, [pc, #340]	; (8013f2c <tcp_input+0x7e8>)
 8013dd8:	681a      	ldr	r2, [r3, #0]
 8013dda:	69fb      	ldr	r3, [r7, #28]
 8013ddc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013dde:	4b50      	ldr	r3, [pc, #320]	; (8013f20 <tcp_input+0x7dc>)
 8013de0:	781b      	ldrb	r3, [r3, #0]
 8013de2:	f003 0320 	and.w	r3, r3, #32
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d030      	beq.n	8013e4c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013dea:	69fb      	ldr	r3, [r7, #28]
 8013dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d009      	beq.n	8013e06 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013df2:	69fb      	ldr	r3, [r7, #28]
 8013df4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013df6:	7b5a      	ldrb	r2, [r3, #13]
 8013df8:	69fb      	ldr	r3, [r7, #28]
 8013dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dfc:	f042 0220 	orr.w	r2, r2, #32
 8013e00:	b2d2      	uxtb	r2, r2
 8013e02:	735a      	strb	r2, [r3, #13]
 8013e04:	e022      	b.n	8013e4c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013e06:	69fb      	ldr	r3, [r7, #28]
 8013e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e0a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013e0e:	d005      	beq.n	8013e1c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013e10:	69fb      	ldr	r3, [r7, #28]
 8013e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e14:	3301      	adds	r3, #1
 8013e16:	b29a      	uxth	r2, r3
 8013e18:	69fb      	ldr	r3, [r7, #28]
 8013e1a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013e1c:	69fb      	ldr	r3, [r7, #28]
 8013e1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d00b      	beq.n	8013e3e <tcp_input+0x6fa>
 8013e26:	69fb      	ldr	r3, [r7, #28]
 8013e28:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	6918      	ldr	r0, [r3, #16]
 8013e30:	2300      	movs	r3, #0
 8013e32:	2200      	movs	r2, #0
 8013e34:	69f9      	ldr	r1, [r7, #28]
 8013e36:	47a0      	blx	r4
 8013e38:	4603      	mov	r3, r0
 8013e3a:	74fb      	strb	r3, [r7, #19]
 8013e3c:	e001      	b.n	8013e42 <tcp_input+0x6fe>
 8013e3e:	2300      	movs	r3, #0
 8013e40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013e42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013e46:	f113 0f0d 	cmn.w	r3, #13
 8013e4a:	d016      	beq.n	8013e7a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013e4c:	4b33      	ldr	r3, [pc, #204]	; (8013f1c <tcp_input+0x7d8>)
 8013e4e:	2200      	movs	r2, #0
 8013e50:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013e52:	69f8      	ldr	r0, [r7, #28]
 8013e54:	f000 f880 	bl	8013f58 <tcp_input_delayed_close>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d10f      	bne.n	8013e7e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013e5e:	69f8      	ldr	r0, [r7, #28]
 8013e60:	f002 ff10 	bl	8016c84 <tcp_output>
 8013e64:	e00c      	b.n	8013e80 <tcp_input+0x73c>
        goto aborted;
 8013e66:	bf00      	nop
 8013e68:	e00a      	b.n	8013e80 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013e6a:	bf00      	nop
 8013e6c:	e008      	b.n	8013e80 <tcp_input+0x73c>
              goto aborted;
 8013e6e:	bf00      	nop
 8013e70:	e006      	b.n	8013e80 <tcp_input+0x73c>
          goto aborted;
 8013e72:	bf00      	nop
 8013e74:	e004      	b.n	8013e80 <tcp_input+0x73c>
            goto aborted;
 8013e76:	bf00      	nop
 8013e78:	e002      	b.n	8013e80 <tcp_input+0x73c>
              goto aborted;
 8013e7a:	bf00      	nop
 8013e7c:	e000      	b.n	8013e80 <tcp_input+0x73c>
          goto aborted;
 8013e7e:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e80:	4b26      	ldr	r3, [pc, #152]	; (8013f1c <tcp_input+0x7d8>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e86:	4b29      	ldr	r3, [pc, #164]	; (8013f2c <tcp_input+0x7e8>)
 8013e88:	2200      	movs	r2, #0
 8013e8a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e8c:	4b2b      	ldr	r3, [pc, #172]	; (8013f3c <tcp_input+0x7f8>)
 8013e8e:	685b      	ldr	r3, [r3, #4]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d03f      	beq.n	8013f14 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013e94:	4b29      	ldr	r3, [pc, #164]	; (8013f3c <tcp_input+0x7f8>)
 8013e96:	685b      	ldr	r3, [r3, #4]
 8013e98:	4618      	mov	r0, r3
 8013e9a:	f7fd fc07 	bl	80116ac <pbuf_free>
      inseg.p = NULL;
 8013e9e:	4b27      	ldr	r3, [pc, #156]	; (8013f3c <tcp_input+0x7f8>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013ea4:	e036      	b.n	8013f14 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013ea6:	4b26      	ldr	r3, [pc, #152]	; (8013f40 <tcp_input+0x7fc>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	899b      	ldrh	r3, [r3, #12]
 8013eac:	b29b      	uxth	r3, r3
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7fc f81e 	bl	800fef0 <lwip_htons>
 8013eb4:	4603      	mov	r3, r0
 8013eb6:	b2db      	uxtb	r3, r3
 8013eb8:	f003 0304 	and.w	r3, r3, #4
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d118      	bne.n	8013ef2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ec0:	4b20      	ldr	r3, [pc, #128]	; (8013f44 <tcp_input+0x800>)
 8013ec2:	6819      	ldr	r1, [r3, #0]
 8013ec4:	4b20      	ldr	r3, [pc, #128]	; (8013f48 <tcp_input+0x804>)
 8013ec6:	881b      	ldrh	r3, [r3, #0]
 8013ec8:	461a      	mov	r2, r3
 8013eca:	4b20      	ldr	r3, [pc, #128]	; (8013f4c <tcp_input+0x808>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ed0:	4b1b      	ldr	r3, [pc, #108]	; (8013f40 <tcp_input+0x7fc>)
 8013ed2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ed4:	885b      	ldrh	r3, [r3, #2]
 8013ed6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ed8:	4a19      	ldr	r2, [pc, #100]	; (8013f40 <tcp_input+0x7fc>)
 8013eda:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013edc:	8812      	ldrh	r2, [r2, #0]
 8013ede:	b292      	uxth	r2, r2
 8013ee0:	9202      	str	r2, [sp, #8]
 8013ee2:	9301      	str	r3, [sp, #4]
 8013ee4:	4b1a      	ldr	r3, [pc, #104]	; (8013f50 <tcp_input+0x80c>)
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	4b1a      	ldr	r3, [pc, #104]	; (8013f54 <tcp_input+0x810>)
 8013eea:	4602      	mov	r2, r0
 8013eec:	2000      	movs	r0, #0
 8013eee:	f003 fc7d 	bl	80177ec <tcp_rst>
    pbuf_free(p);
 8013ef2:	6878      	ldr	r0, [r7, #4]
 8013ef4:	f7fd fbda 	bl	80116ac <pbuf_free>
  return;
 8013ef8:	e00c      	b.n	8013f14 <tcp_input+0x7d0>
    goto dropped;
 8013efa:	bf00      	nop
 8013efc:	e006      	b.n	8013f0c <tcp_input+0x7c8>
    goto dropped;
 8013efe:	bf00      	nop
 8013f00:	e004      	b.n	8013f0c <tcp_input+0x7c8>
    goto dropped;
 8013f02:	bf00      	nop
 8013f04:	e002      	b.n	8013f0c <tcp_input+0x7c8>
      goto dropped;
 8013f06:	bf00      	nop
 8013f08:	e000      	b.n	8013f0c <tcp_input+0x7c8>
      goto dropped;
 8013f0a:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013f0c:	6878      	ldr	r0, [r7, #4]
 8013f0e:	f7fd fbcd 	bl	80116ac <pbuf_free>
 8013f12:	e000      	b.n	8013f16 <tcp_input+0x7d2>
  return;
 8013f14:	bf00      	nop
}
 8013f16:	3724      	adds	r7, #36	; 0x24
 8013f18:	46bd      	mov	sp, r7
 8013f1a:	bd90      	pop	{r4, r7, pc}
 8013f1c:	2000d7d0 	.word	0x2000d7d0
 8013f20:	20004821 	.word	0x20004821
 8013f24:	2000d7bc 	.word	0x2000d7bc
 8013f28:	2000481c 	.word	0x2000481c
 8013f2c:	20004824 	.word	0x20004824
 8013f30:	080203c8 	.word	0x080203c8
 8013f34:	0802057c 	.word	0x0802057c
 8013f38:	08020414 	.word	0x08020414
 8013f3c:	200047f4 	.word	0x200047f4
 8013f40:	20004804 	.word	0x20004804
 8013f44:	20004818 	.word	0x20004818
 8013f48:	2000481e 	.word	0x2000481e
 8013f4c:	20004814 	.word	0x20004814
 8013f50:	2000a0b8 	.word	0x2000a0b8
 8013f54:	2000a0bc 	.word	0x2000a0bc

08013f58 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d106      	bne.n	8013f74 <tcp_input_delayed_close+0x1c>
 8013f66:	4b17      	ldr	r3, [pc, #92]	; (8013fc4 <tcp_input_delayed_close+0x6c>)
 8013f68:	f240 225a 	movw	r2, #602	; 0x25a
 8013f6c:	4916      	ldr	r1, [pc, #88]	; (8013fc8 <tcp_input_delayed_close+0x70>)
 8013f6e:	4817      	ldr	r0, [pc, #92]	; (8013fcc <tcp_input_delayed_close+0x74>)
 8013f70:	f007 fecc 	bl	801bd0c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013f74:	4b16      	ldr	r3, [pc, #88]	; (8013fd0 <tcp_input_delayed_close+0x78>)
 8013f76:	781b      	ldrb	r3, [r3, #0]
 8013f78:	f003 0310 	and.w	r3, r3, #16
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d01c      	beq.n	8013fba <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	8b5b      	ldrh	r3, [r3, #26]
 8013f84:	f003 0310 	and.w	r3, r3, #16
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d10d      	bne.n	8013fa8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d008      	beq.n	8013fa8 <tcp_input_delayed_close+0x50>
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	6912      	ldr	r2, [r2, #16]
 8013fa0:	f06f 010e 	mvn.w	r1, #14
 8013fa4:	4610      	mov	r0, r2
 8013fa6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013fa8:	6879      	ldr	r1, [r7, #4]
 8013faa:	480a      	ldr	r0, [pc, #40]	; (8013fd4 <tcp_input_delayed_close+0x7c>)
 8013fac:	f7ff fa52 	bl	8013454 <tcp_pcb_remove>
    tcp_free(pcb);
 8013fb0:	6878      	ldr	r0, [r7, #4]
 8013fb2:	f7fd fe37 	bl	8011c24 <tcp_free>
    return 1;
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	e000      	b.n	8013fbc <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013fba:	2300      	movs	r3, #0
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}
 8013fc4:	080203c8 	.word	0x080203c8
 8013fc8:	08020598 	.word	0x08020598
 8013fcc:	08020414 	.word	0x08020414
 8013fd0:	20004821 	.word	0x20004821
 8013fd4:	2000d7bc 	.word	0x2000d7bc

08013fd8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013fd8:	b590      	push	{r4, r7, lr}
 8013fda:	b08b      	sub	sp, #44	; 0x2c
 8013fdc:	af04      	add	r7, sp, #16
 8013fde:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013fe0:	4b6f      	ldr	r3, [pc, #444]	; (80141a0 <tcp_listen_input+0x1c8>)
 8013fe2:	781b      	ldrb	r3, [r3, #0]
 8013fe4:	f003 0304 	and.w	r3, r3, #4
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	f040 80d2 	bne.w	8014192 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	d106      	bne.n	8014002 <tcp_listen_input+0x2a>
 8013ff4:	4b6b      	ldr	r3, [pc, #428]	; (80141a4 <tcp_listen_input+0x1cc>)
 8013ff6:	f240 2281 	movw	r2, #641	; 0x281
 8013ffa:	496b      	ldr	r1, [pc, #428]	; (80141a8 <tcp_listen_input+0x1d0>)
 8013ffc:	486b      	ldr	r0, [pc, #428]	; (80141ac <tcp_listen_input+0x1d4>)
 8013ffe:	f007 fe85 	bl	801bd0c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014002:	4b67      	ldr	r3, [pc, #412]	; (80141a0 <tcp_listen_input+0x1c8>)
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	f003 0310 	and.w	r3, r3, #16
 801400a:	2b00      	cmp	r3, #0
 801400c:	d019      	beq.n	8014042 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801400e:	4b68      	ldr	r3, [pc, #416]	; (80141b0 <tcp_listen_input+0x1d8>)
 8014010:	6819      	ldr	r1, [r3, #0]
 8014012:	4b68      	ldr	r3, [pc, #416]	; (80141b4 <tcp_listen_input+0x1dc>)
 8014014:	881b      	ldrh	r3, [r3, #0]
 8014016:	461a      	mov	r2, r3
 8014018:	4b67      	ldr	r3, [pc, #412]	; (80141b8 <tcp_listen_input+0x1e0>)
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801401e:	4b67      	ldr	r3, [pc, #412]	; (80141bc <tcp_listen_input+0x1e4>)
 8014020:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014022:	885b      	ldrh	r3, [r3, #2]
 8014024:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014026:	4a65      	ldr	r2, [pc, #404]	; (80141bc <tcp_listen_input+0x1e4>)
 8014028:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801402a:	8812      	ldrh	r2, [r2, #0]
 801402c:	b292      	uxth	r2, r2
 801402e:	9202      	str	r2, [sp, #8]
 8014030:	9301      	str	r3, [sp, #4]
 8014032:	4b63      	ldr	r3, [pc, #396]	; (80141c0 <tcp_listen_input+0x1e8>)
 8014034:	9300      	str	r3, [sp, #0]
 8014036:	4b63      	ldr	r3, [pc, #396]	; (80141c4 <tcp_listen_input+0x1ec>)
 8014038:	4602      	mov	r2, r0
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	f003 fbd6 	bl	80177ec <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014040:	e0a9      	b.n	8014196 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014042:	4b57      	ldr	r3, [pc, #348]	; (80141a0 <tcp_listen_input+0x1c8>)
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	f003 0302 	and.w	r3, r3, #2
 801404a:	2b00      	cmp	r3, #0
 801404c:	f000 80a3 	beq.w	8014196 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	7d5b      	ldrb	r3, [r3, #21]
 8014054:	4618      	mov	r0, r3
 8014056:	f7ff f85b 	bl	8013110 <tcp_alloc>
 801405a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801405c:	697b      	ldr	r3, [r7, #20]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d111      	bne.n	8014086 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	699b      	ldr	r3, [r3, #24]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d00a      	beq.n	8014080 <tcp_listen_input+0xa8>
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	699b      	ldr	r3, [r3, #24]
 801406e:	687a      	ldr	r2, [r7, #4]
 8014070:	6910      	ldr	r0, [r2, #16]
 8014072:	f04f 32ff 	mov.w	r2, #4294967295
 8014076:	2100      	movs	r1, #0
 8014078:	4798      	blx	r3
 801407a:	4603      	mov	r3, r0
 801407c:	73bb      	strb	r3, [r7, #14]
      return;
 801407e:	e08b      	b.n	8014198 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014080:	23f0      	movs	r3, #240	; 0xf0
 8014082:	73bb      	strb	r3, [r7, #14]
      return;
 8014084:	e088      	b.n	8014198 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014086:	4b50      	ldr	r3, [pc, #320]	; (80141c8 <tcp_listen_input+0x1f0>)
 8014088:	695a      	ldr	r2, [r3, #20]
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801408e:	4b4e      	ldr	r3, [pc, #312]	; (80141c8 <tcp_listen_input+0x1f0>)
 8014090:	691a      	ldr	r2, [r3, #16]
 8014092:	697b      	ldr	r3, [r7, #20]
 8014094:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	8ada      	ldrh	r2, [r3, #22]
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801409e:	4b47      	ldr	r3, [pc, #284]	; (80141bc <tcp_listen_input+0x1e4>)
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	881b      	ldrh	r3, [r3, #0]
 80140a4:	b29a      	uxth	r2, r3
 80140a6:	697b      	ldr	r3, [r7, #20]
 80140a8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80140aa:	697b      	ldr	r3, [r7, #20]
 80140ac:	2203      	movs	r2, #3
 80140ae:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80140b0:	4b41      	ldr	r3, [pc, #260]	; (80141b8 <tcp_listen_input+0x1e0>)
 80140b2:	681b      	ldr	r3, [r3, #0]
 80140b4:	1c5a      	adds	r2, r3, #1
 80140b6:	697b      	ldr	r3, [r7, #20]
 80140b8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80140ba:	697b      	ldr	r3, [r7, #20]
 80140bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80140c2:	6978      	ldr	r0, [r7, #20]
 80140c4:	f7ff fa5a 	bl	801357c <tcp_next_iss>
 80140c8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80140ca:	697b      	ldr	r3, [r7, #20]
 80140cc:	693a      	ldr	r2, [r7, #16]
 80140ce:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	693a      	ldr	r2, [r7, #16]
 80140d4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	693a      	ldr	r2, [r7, #16]
 80140da:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80140dc:	697b      	ldr	r3, [r7, #20]
 80140de:	693a      	ldr	r2, [r7, #16]
 80140e0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80140e2:	4b35      	ldr	r3, [pc, #212]	; (80141b8 <tcp_listen_input+0x1e0>)
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	1e5a      	subs	r2, r3, #1
 80140e8:	697b      	ldr	r3, [r7, #20]
 80140ea:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	691a      	ldr	r2, [r3, #16]
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80140f4:	697b      	ldr	r3, [r7, #20]
 80140f6:	687a      	ldr	r2, [r7, #4]
 80140f8:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	7a5b      	ldrb	r3, [r3, #9]
 80140fe:	f003 030c 	and.w	r3, r3, #12
 8014102:	b2da      	uxtb	r2, r3
 8014104:	697b      	ldr	r3, [r7, #20]
 8014106:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	7a1a      	ldrb	r2, [r3, #8]
 801410c:	697b      	ldr	r3, [r7, #20]
 801410e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014110:	4b2e      	ldr	r3, [pc, #184]	; (80141cc <tcp_listen_input+0x1f4>)
 8014112:	681a      	ldr	r2, [r3, #0]
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	60da      	str	r2, [r3, #12]
 8014118:	4a2c      	ldr	r2, [pc, #176]	; (80141cc <tcp_listen_input+0x1f4>)
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	6013      	str	r3, [r2, #0]
 801411e:	f003 fd27 	bl	8017b70 <tcp_timer_needed>
 8014122:	4b2b      	ldr	r3, [pc, #172]	; (80141d0 <tcp_listen_input+0x1f8>)
 8014124:	2201      	movs	r2, #1
 8014126:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014128:	6978      	ldr	r0, [r7, #20]
 801412a:	f001 fd8d 	bl	8015c48 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801412e:	4b23      	ldr	r3, [pc, #140]	; (80141bc <tcp_listen_input+0x1e4>)
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	89db      	ldrh	r3, [r3, #14]
 8014134:	b29a      	uxth	r2, r3
 8014136:	697b      	ldr	r3, [r7, #20]
 8014138:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801413c:	697b      	ldr	r3, [r7, #20]
 801413e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	3304      	adds	r3, #4
 8014150:	4618      	mov	r0, r3
 8014152:	f005 fc4b 	bl	80199ec <ip4_route>
 8014156:	4601      	mov	r1, r0
 8014158:	697b      	ldr	r3, [r7, #20]
 801415a:	3304      	adds	r3, #4
 801415c:	461a      	mov	r2, r3
 801415e:	4620      	mov	r0, r4
 8014160:	f7ff fa32 	bl	80135c8 <tcp_eff_send_mss_netif>
 8014164:	4603      	mov	r3, r0
 8014166:	461a      	mov	r2, r3
 8014168:	697b      	ldr	r3, [r7, #20]
 801416a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801416c:	2112      	movs	r1, #18
 801416e:	6978      	ldr	r0, [r7, #20]
 8014170:	f002 fc9a 	bl	8016aa8 <tcp_enqueue_flags>
 8014174:	4603      	mov	r3, r0
 8014176:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014178:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801417c:	2b00      	cmp	r3, #0
 801417e:	d004      	beq.n	801418a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014180:	2100      	movs	r1, #0
 8014182:	6978      	ldr	r0, [r7, #20]
 8014184:	f7fd ffd4 	bl	8012130 <tcp_abandon>
      return;
 8014188:	e006      	b.n	8014198 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801418a:	6978      	ldr	r0, [r7, #20]
 801418c:	f002 fd7a 	bl	8016c84 <tcp_output>
  return;
 8014190:	e001      	b.n	8014196 <tcp_listen_input+0x1be>
    return;
 8014192:	bf00      	nop
 8014194:	e000      	b.n	8014198 <tcp_listen_input+0x1c0>
  return;
 8014196:	bf00      	nop
}
 8014198:	371c      	adds	r7, #28
 801419a:	46bd      	mov	sp, r7
 801419c:	bd90      	pop	{r4, r7, pc}
 801419e:	bf00      	nop
 80141a0:	20004820 	.word	0x20004820
 80141a4:	080203c8 	.word	0x080203c8
 80141a8:	080205c0 	.word	0x080205c0
 80141ac:	08020414 	.word	0x08020414
 80141b0:	20004818 	.word	0x20004818
 80141b4:	2000481e 	.word	0x2000481e
 80141b8:	20004814 	.word	0x20004814
 80141bc:	20004804 	.word	0x20004804
 80141c0:	2000a0b8 	.word	0x2000a0b8
 80141c4:	2000a0bc 	.word	0x2000a0bc
 80141c8:	2000a0a8 	.word	0x2000a0a8
 80141cc:	2000d7bc 	.word	0x2000d7bc
 80141d0:	2000d7b8 	.word	0x2000d7b8

080141d4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af04      	add	r7, sp, #16
 80141da:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80141dc:	4b2f      	ldr	r3, [pc, #188]	; (801429c <tcp_timewait_input+0xc8>)
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	f003 0304 	and.w	r3, r3, #4
 80141e4:	2b00      	cmp	r3, #0
 80141e6:	d153      	bne.n	8014290 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d106      	bne.n	80141fc <tcp_timewait_input+0x28>
 80141ee:	4b2c      	ldr	r3, [pc, #176]	; (80142a0 <tcp_timewait_input+0xcc>)
 80141f0:	f240 22ee 	movw	r2, #750	; 0x2ee
 80141f4:	492b      	ldr	r1, [pc, #172]	; (80142a4 <tcp_timewait_input+0xd0>)
 80141f6:	482c      	ldr	r0, [pc, #176]	; (80142a8 <tcp_timewait_input+0xd4>)
 80141f8:	f007 fd88 	bl	801bd0c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80141fc:	4b27      	ldr	r3, [pc, #156]	; (801429c <tcp_timewait_input+0xc8>)
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	f003 0302 	and.w	r3, r3, #2
 8014204:	2b00      	cmp	r3, #0
 8014206:	d02a      	beq.n	801425e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014208:	4b28      	ldr	r3, [pc, #160]	; (80142ac <tcp_timewait_input+0xd8>)
 801420a:	681a      	ldr	r2, [r3, #0]
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014210:	1ad3      	subs	r3, r2, r3
 8014212:	2b00      	cmp	r3, #0
 8014214:	db2d      	blt.n	8014272 <tcp_timewait_input+0x9e>
 8014216:	4b25      	ldr	r3, [pc, #148]	; (80142ac <tcp_timewait_input+0xd8>)
 8014218:	681a      	ldr	r2, [r3, #0]
 801421a:	687b      	ldr	r3, [r7, #4]
 801421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801421e:	6879      	ldr	r1, [r7, #4]
 8014220:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014222:	440b      	add	r3, r1
 8014224:	1ad3      	subs	r3, r2, r3
 8014226:	2b00      	cmp	r3, #0
 8014228:	dc23      	bgt.n	8014272 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801422a:	4b21      	ldr	r3, [pc, #132]	; (80142b0 <tcp_timewait_input+0xdc>)
 801422c:	6819      	ldr	r1, [r3, #0]
 801422e:	4b21      	ldr	r3, [pc, #132]	; (80142b4 <tcp_timewait_input+0xe0>)
 8014230:	881b      	ldrh	r3, [r3, #0]
 8014232:	461a      	mov	r2, r3
 8014234:	4b1d      	ldr	r3, [pc, #116]	; (80142ac <tcp_timewait_input+0xd8>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801423a:	4b1f      	ldr	r3, [pc, #124]	; (80142b8 <tcp_timewait_input+0xe4>)
 801423c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801423e:	885b      	ldrh	r3, [r3, #2]
 8014240:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014242:	4a1d      	ldr	r2, [pc, #116]	; (80142b8 <tcp_timewait_input+0xe4>)
 8014244:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014246:	8812      	ldrh	r2, [r2, #0]
 8014248:	b292      	uxth	r2, r2
 801424a:	9202      	str	r2, [sp, #8]
 801424c:	9301      	str	r3, [sp, #4]
 801424e:	4b1b      	ldr	r3, [pc, #108]	; (80142bc <tcp_timewait_input+0xe8>)
 8014250:	9300      	str	r3, [sp, #0]
 8014252:	4b1b      	ldr	r3, [pc, #108]	; (80142c0 <tcp_timewait_input+0xec>)
 8014254:	4602      	mov	r2, r0
 8014256:	6878      	ldr	r0, [r7, #4]
 8014258:	f003 fac8 	bl	80177ec <tcp_rst>
      return;
 801425c:	e01b      	b.n	8014296 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801425e:	4b0f      	ldr	r3, [pc, #60]	; (801429c <tcp_timewait_input+0xc8>)
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	f003 0301 	and.w	r3, r3, #1
 8014266:	2b00      	cmp	r3, #0
 8014268:	d003      	beq.n	8014272 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801426a:	4b16      	ldr	r3, [pc, #88]	; (80142c4 <tcp_timewait_input+0xf0>)
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014272:	4b10      	ldr	r3, [pc, #64]	; (80142b4 <tcp_timewait_input+0xe0>)
 8014274:	881b      	ldrh	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d00c      	beq.n	8014294 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	8b5b      	ldrh	r3, [r3, #26]
 801427e:	f043 0302 	orr.w	r3, r3, #2
 8014282:	b29a      	uxth	r2, r3
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014288:	6878      	ldr	r0, [r7, #4]
 801428a:	f002 fcfb 	bl	8016c84 <tcp_output>
  }
  return;
 801428e:	e001      	b.n	8014294 <tcp_timewait_input+0xc0>
    return;
 8014290:	bf00      	nop
 8014292:	e000      	b.n	8014296 <tcp_timewait_input+0xc2>
  return;
 8014294:	bf00      	nop
}
 8014296:	3708      	adds	r7, #8
 8014298:	46bd      	mov	sp, r7
 801429a:	bd80      	pop	{r7, pc}
 801429c:	20004820 	.word	0x20004820
 80142a0:	080203c8 	.word	0x080203c8
 80142a4:	080205e0 	.word	0x080205e0
 80142a8:	08020414 	.word	0x08020414
 80142ac:	20004814 	.word	0x20004814
 80142b0:	20004818 	.word	0x20004818
 80142b4:	2000481e 	.word	0x2000481e
 80142b8:	20004804 	.word	0x20004804
 80142bc:	2000a0b8 	.word	0x2000a0b8
 80142c0:	2000a0bc 	.word	0x2000a0bc
 80142c4:	2000d7c0 	.word	0x2000d7c0

080142c8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80142c8:	b590      	push	{r4, r7, lr}
 80142ca:	b08d      	sub	sp, #52	; 0x34
 80142cc:	af04      	add	r7, sp, #16
 80142ce:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80142d0:	2300      	movs	r3, #0
 80142d2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80142d4:	2300      	movs	r3, #0
 80142d6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d106      	bne.n	80142ec <tcp_process+0x24>
 80142de:	4ba5      	ldr	r3, [pc, #660]	; (8014574 <tcp_process+0x2ac>)
 80142e0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80142e4:	49a4      	ldr	r1, [pc, #656]	; (8014578 <tcp_process+0x2b0>)
 80142e6:	48a5      	ldr	r0, [pc, #660]	; (801457c <tcp_process+0x2b4>)
 80142e8:	f007 fd10 	bl	801bd0c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80142ec:	4ba4      	ldr	r3, [pc, #656]	; (8014580 <tcp_process+0x2b8>)
 80142ee:	781b      	ldrb	r3, [r3, #0]
 80142f0:	f003 0304 	and.w	r3, r3, #4
 80142f4:	2b00      	cmp	r3, #0
 80142f6:	d04e      	beq.n	8014396 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80142f8:	687b      	ldr	r3, [r7, #4]
 80142fa:	7d1b      	ldrb	r3, [r3, #20]
 80142fc:	2b02      	cmp	r3, #2
 80142fe:	d108      	bne.n	8014312 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014304:	4b9f      	ldr	r3, [pc, #636]	; (8014584 <tcp_process+0x2bc>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	429a      	cmp	r2, r3
 801430a:	d123      	bne.n	8014354 <tcp_process+0x8c>
        acceptable = 1;
 801430c:	2301      	movs	r3, #1
 801430e:	76fb      	strb	r3, [r7, #27]
 8014310:	e020      	b.n	8014354 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014316:	4b9c      	ldr	r3, [pc, #624]	; (8014588 <tcp_process+0x2c0>)
 8014318:	681b      	ldr	r3, [r3, #0]
 801431a:	429a      	cmp	r2, r3
 801431c:	d102      	bne.n	8014324 <tcp_process+0x5c>
        acceptable = 1;
 801431e:	2301      	movs	r3, #1
 8014320:	76fb      	strb	r3, [r7, #27]
 8014322:	e017      	b.n	8014354 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014324:	4b98      	ldr	r3, [pc, #608]	; (8014588 <tcp_process+0x2c0>)
 8014326:	681a      	ldr	r2, [r3, #0]
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801432c:	1ad3      	subs	r3, r2, r3
 801432e:	2b00      	cmp	r3, #0
 8014330:	db10      	blt.n	8014354 <tcp_process+0x8c>
 8014332:	4b95      	ldr	r3, [pc, #596]	; (8014588 <tcp_process+0x2c0>)
 8014334:	681a      	ldr	r2, [r3, #0]
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801433a:	6879      	ldr	r1, [r7, #4]
 801433c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801433e:	440b      	add	r3, r1
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	2b00      	cmp	r3, #0
 8014344:	dc06      	bgt.n	8014354 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	8b5b      	ldrh	r3, [r3, #26]
 801434a:	f043 0302 	orr.w	r3, r3, #2
 801434e:	b29a      	uxth	r2, r3
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014354:	7efb      	ldrb	r3, [r7, #27]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d01b      	beq.n	8014392 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	7d1b      	ldrb	r3, [r3, #20]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d106      	bne.n	8014370 <tcp_process+0xa8>
 8014362:	4b84      	ldr	r3, [pc, #528]	; (8014574 <tcp_process+0x2ac>)
 8014364:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014368:	4988      	ldr	r1, [pc, #544]	; (801458c <tcp_process+0x2c4>)
 801436a:	4884      	ldr	r0, [pc, #528]	; (801457c <tcp_process+0x2b4>)
 801436c:	f007 fcce 	bl	801bd0c <iprintf>
      recv_flags |= TF_RESET;
 8014370:	4b87      	ldr	r3, [pc, #540]	; (8014590 <tcp_process+0x2c8>)
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	f043 0308 	orr.w	r3, r3, #8
 8014378:	b2da      	uxtb	r2, r3
 801437a:	4b85      	ldr	r3, [pc, #532]	; (8014590 <tcp_process+0x2c8>)
 801437c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	8b5b      	ldrh	r3, [r3, #26]
 8014382:	f023 0301 	bic.w	r3, r3, #1
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801438c:	f06f 030d 	mvn.w	r3, #13
 8014390:	e37a      	b.n	8014a88 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014392:	2300      	movs	r3, #0
 8014394:	e378      	b.n	8014a88 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014396:	4b7a      	ldr	r3, [pc, #488]	; (8014580 <tcp_process+0x2b8>)
 8014398:	781b      	ldrb	r3, [r3, #0]
 801439a:	f003 0302 	and.w	r3, r3, #2
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d010      	beq.n	80143c4 <tcp_process+0xfc>
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	7d1b      	ldrb	r3, [r3, #20]
 80143a6:	2b02      	cmp	r3, #2
 80143a8:	d00c      	beq.n	80143c4 <tcp_process+0xfc>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	7d1b      	ldrb	r3, [r3, #20]
 80143ae:	2b03      	cmp	r3, #3
 80143b0:	d008      	beq.n	80143c4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80143b2:	687b      	ldr	r3, [r7, #4]
 80143b4:	8b5b      	ldrh	r3, [r3, #26]
 80143b6:	f043 0302 	orr.w	r3, r3, #2
 80143ba:	b29a      	uxth	r2, r3
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80143c0:	2300      	movs	r3, #0
 80143c2:	e361      	b.n	8014a88 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	8b5b      	ldrh	r3, [r3, #26]
 80143c8:	f003 0310 	and.w	r3, r3, #16
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d103      	bne.n	80143d8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80143d0:	4b70      	ldr	r3, [pc, #448]	; (8014594 <tcp_process+0x2cc>)
 80143d2:	681a      	ldr	r2, [r3, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f001 fc2d 	bl	8015c48 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	7d1b      	ldrb	r3, [r3, #20]
 80143f2:	3b02      	subs	r3, #2
 80143f4:	2b07      	cmp	r3, #7
 80143f6:	f200 8337 	bhi.w	8014a68 <tcp_process+0x7a0>
 80143fa:	a201      	add	r2, pc, #4	; (adr r2, 8014400 <tcp_process+0x138>)
 80143fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014400:	08014421 	.word	0x08014421
 8014404:	08014651 	.word	0x08014651
 8014408:	080147c9 	.word	0x080147c9
 801440c:	080147f3 	.word	0x080147f3
 8014410:	08014917 	.word	0x08014917
 8014414:	080147c9 	.word	0x080147c9
 8014418:	080149a3 	.word	0x080149a3
 801441c:	08014a33 	.word	0x08014a33
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014420:	4b57      	ldr	r3, [pc, #348]	; (8014580 <tcp_process+0x2b8>)
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	f003 0310 	and.w	r3, r3, #16
 8014428:	2b00      	cmp	r3, #0
 801442a:	f000 80e4 	beq.w	80145f6 <tcp_process+0x32e>
 801442e:	4b54      	ldr	r3, [pc, #336]	; (8014580 <tcp_process+0x2b8>)
 8014430:	781b      	ldrb	r3, [r3, #0]
 8014432:	f003 0302 	and.w	r3, r3, #2
 8014436:	2b00      	cmp	r3, #0
 8014438:	f000 80dd 	beq.w	80145f6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014440:	1c5a      	adds	r2, r3, #1
 8014442:	4b50      	ldr	r3, [pc, #320]	; (8014584 <tcp_process+0x2bc>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	429a      	cmp	r2, r3
 8014448:	f040 80d5 	bne.w	80145f6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801444c:	4b4e      	ldr	r3, [pc, #312]	; (8014588 <tcp_process+0x2c0>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	1c5a      	adds	r2, r3, #1
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801445a:	687b      	ldr	r3, [r7, #4]
 801445c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801445e:	4b49      	ldr	r3, [pc, #292]	; (8014584 <tcp_process+0x2bc>)
 8014460:	681a      	ldr	r2, [r3, #0]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014466:	4b4c      	ldr	r3, [pc, #304]	; (8014598 <tcp_process+0x2d0>)
 8014468:	681b      	ldr	r3, [r3, #0]
 801446a:	89db      	ldrh	r3, [r3, #14]
 801446c:	b29a      	uxth	r2, r3
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014480:	4b41      	ldr	r3, [pc, #260]	; (8014588 <tcp_process+0x2c0>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	1e5a      	subs	r2, r3, #1
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801448a:	687b      	ldr	r3, [r7, #4]
 801448c:	2204      	movs	r2, #4
 801448e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	3304      	adds	r3, #4
 8014498:	4618      	mov	r0, r3
 801449a:	f005 faa7 	bl	80199ec <ip4_route>
 801449e:	4601      	mov	r1, r0
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	3304      	adds	r3, #4
 80144a4:	461a      	mov	r2, r3
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff f88e 	bl	80135c8 <tcp_eff_send_mss_netif>
 80144ac:	4603      	mov	r3, r0
 80144ae:	461a      	mov	r2, r3
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b8:	009a      	lsls	r2, r3, #2
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144be:	005b      	lsls	r3, r3, #1
 80144c0:	f241 111c 	movw	r1, #4380	; 0x111c
 80144c4:	428b      	cmp	r3, r1
 80144c6:	bf38      	it	cc
 80144c8:	460b      	movcc	r3, r1
 80144ca:	429a      	cmp	r2, r3
 80144cc:	d204      	bcs.n	80144d8 <tcp_process+0x210>
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144d2:	009b      	lsls	r3, r3, #2
 80144d4:	b29b      	uxth	r3, r3
 80144d6:	e00d      	b.n	80144f4 <tcp_process+0x22c>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144dc:	005b      	lsls	r3, r3, #1
 80144de:	f241 121c 	movw	r2, #4380	; 0x111c
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d904      	bls.n	80144f0 <tcp_process+0x228>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144ea:	005b      	lsls	r3, r3, #1
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	e001      	b.n	80144f4 <tcp_process+0x22c>
 80144f0:	f241 131c 	movw	r3, #4380	; 0x111c
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014500:	2b00      	cmp	r3, #0
 8014502:	d106      	bne.n	8014512 <tcp_process+0x24a>
 8014504:	4b1b      	ldr	r3, [pc, #108]	; (8014574 <tcp_process+0x2ac>)
 8014506:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801450a:	4924      	ldr	r1, [pc, #144]	; (801459c <tcp_process+0x2d4>)
 801450c:	481b      	ldr	r0, [pc, #108]	; (801457c <tcp_process+0x2b4>)
 801450e:	f007 fbfd 	bl	801bd0c <iprintf>
        --pcb->snd_queuelen;
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014518:	3b01      	subs	r3, #1
 801451a:	b29a      	uxth	r2, r3
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014526:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d111      	bne.n	8014552 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801452e:	687b      	ldr	r3, [r7, #4]
 8014530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014532:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014534:	69fb      	ldr	r3, [r7, #28]
 8014536:	2b00      	cmp	r3, #0
 8014538:	d106      	bne.n	8014548 <tcp_process+0x280>
 801453a:	4b0e      	ldr	r3, [pc, #56]	; (8014574 <tcp_process+0x2ac>)
 801453c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014540:	4917      	ldr	r1, [pc, #92]	; (80145a0 <tcp_process+0x2d8>)
 8014542:	480e      	ldr	r0, [pc, #56]	; (801457c <tcp_process+0x2b4>)
 8014544:	f007 fbe2 	bl	801bd0c <iprintf>
          pcb->unsent = rseg->next;
 8014548:	69fb      	ldr	r3, [r7, #28]
 801454a:	681a      	ldr	r2, [r3, #0]
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	66da      	str	r2, [r3, #108]	; 0x6c
 8014550:	e003      	b.n	801455a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014552:	69fb      	ldr	r3, [r7, #28]
 8014554:	681a      	ldr	r2, [r3, #0]
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801455a:	69f8      	ldr	r0, [r7, #28]
 801455c:	f7fe fc6f 	bl	8012e3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014564:	2b00      	cmp	r3, #0
 8014566:	d11d      	bne.n	80145a4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801456e:	861a      	strh	r2, [r3, #48]	; 0x30
 8014570:	e01f      	b.n	80145b2 <tcp_process+0x2ea>
 8014572:	bf00      	nop
 8014574:	080203c8 	.word	0x080203c8
 8014578:	08020600 	.word	0x08020600
 801457c:	08020414 	.word	0x08020414
 8014580:	20004820 	.word	0x20004820
 8014584:	20004818 	.word	0x20004818
 8014588:	20004814 	.word	0x20004814
 801458c:	0802061c 	.word	0x0802061c
 8014590:	20004821 	.word	0x20004821
 8014594:	2000d7c0 	.word	0x2000d7c0
 8014598:	20004804 	.word	0x20004804
 801459c:	0802063c 	.word	0x0802063c
 80145a0:	08020654 	.word	0x08020654
        } else {
          pcb->rtime = 0;
 80145a4:	687b      	ldr	r3, [r7, #4]
 80145a6:	2200      	movs	r2, #0
 80145a8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	2200      	movs	r2, #0
 80145ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d00a      	beq.n	80145d2 <tcp_process+0x30a>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	6910      	ldr	r0, [r2, #16]
 80145c6:	2200      	movs	r2, #0
 80145c8:	6879      	ldr	r1, [r7, #4]
 80145ca:	4798      	blx	r3
 80145cc:	4603      	mov	r3, r0
 80145ce:	76bb      	strb	r3, [r7, #26]
 80145d0:	e001      	b.n	80145d6 <tcp_process+0x30e>
 80145d2:	2300      	movs	r3, #0
 80145d4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80145d6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145da:	f113 0f0d 	cmn.w	r3, #13
 80145de:	d102      	bne.n	80145e6 <tcp_process+0x31e>
          return ERR_ABRT;
 80145e0:	f06f 030c 	mvn.w	r3, #12
 80145e4:	e250      	b.n	8014a88 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	8b5b      	ldrh	r3, [r3, #26]
 80145ea:	f043 0302 	orr.w	r3, r3, #2
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80145f4:	e23a      	b.n	8014a6c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80145f6:	4b9d      	ldr	r3, [pc, #628]	; (801486c <tcp_process+0x5a4>)
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	f003 0310 	and.w	r3, r3, #16
 80145fe:	2b00      	cmp	r3, #0
 8014600:	f000 8234 	beq.w	8014a6c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014604:	4b9a      	ldr	r3, [pc, #616]	; (8014870 <tcp_process+0x5a8>)
 8014606:	6819      	ldr	r1, [r3, #0]
 8014608:	4b9a      	ldr	r3, [pc, #616]	; (8014874 <tcp_process+0x5ac>)
 801460a:	881b      	ldrh	r3, [r3, #0]
 801460c:	461a      	mov	r2, r3
 801460e:	4b9a      	ldr	r3, [pc, #616]	; (8014878 <tcp_process+0x5b0>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014614:	4b99      	ldr	r3, [pc, #612]	; (801487c <tcp_process+0x5b4>)
 8014616:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014618:	885b      	ldrh	r3, [r3, #2]
 801461a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801461c:	4a97      	ldr	r2, [pc, #604]	; (801487c <tcp_process+0x5b4>)
 801461e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014620:	8812      	ldrh	r2, [r2, #0]
 8014622:	b292      	uxth	r2, r2
 8014624:	9202      	str	r2, [sp, #8]
 8014626:	9301      	str	r3, [sp, #4]
 8014628:	4b95      	ldr	r3, [pc, #596]	; (8014880 <tcp_process+0x5b8>)
 801462a:	9300      	str	r3, [sp, #0]
 801462c:	4b95      	ldr	r3, [pc, #596]	; (8014884 <tcp_process+0x5bc>)
 801462e:	4602      	mov	r2, r0
 8014630:	6878      	ldr	r0, [r7, #4]
 8014632:	f003 f8db 	bl	80177ec <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801463c:	2b05      	cmp	r3, #5
 801463e:	f200 8215 	bhi.w	8014a6c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014642:	687b      	ldr	r3, [r7, #4]
 8014644:	2200      	movs	r2, #0
 8014646:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f002 fea5 	bl	8017398 <tcp_rexmit_rto>
      break;
 801464e:	e20d      	b.n	8014a6c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014650:	4b86      	ldr	r3, [pc, #536]	; (801486c <tcp_process+0x5a4>)
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	f003 0310 	and.w	r3, r3, #16
 8014658:	2b00      	cmp	r3, #0
 801465a:	f000 80a1 	beq.w	80147a0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801465e:	4b84      	ldr	r3, [pc, #528]	; (8014870 <tcp_process+0x5a8>)
 8014660:	681a      	ldr	r2, [r3, #0]
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	3b01      	subs	r3, #1
 801466a:	2b00      	cmp	r3, #0
 801466c:	db7e      	blt.n	801476c <tcp_process+0x4a4>
 801466e:	4b80      	ldr	r3, [pc, #512]	; (8014870 <tcp_process+0x5a8>)
 8014670:	681a      	ldr	r2, [r3, #0]
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014676:	1ad3      	subs	r3, r2, r3
 8014678:	2b00      	cmp	r3, #0
 801467a:	dc77      	bgt.n	801476c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	2204      	movs	r2, #4
 8014680:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014686:	2b00      	cmp	r3, #0
 8014688:	d102      	bne.n	8014690 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801468a:	23fa      	movs	r3, #250	; 0xfa
 801468c:	76bb      	strb	r3, [r7, #26]
 801468e:	e01d      	b.n	80146cc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014694:	699b      	ldr	r3, [r3, #24]
 8014696:	2b00      	cmp	r3, #0
 8014698:	d106      	bne.n	80146a8 <tcp_process+0x3e0>
 801469a:	4b7b      	ldr	r3, [pc, #492]	; (8014888 <tcp_process+0x5c0>)
 801469c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80146a0:	497a      	ldr	r1, [pc, #488]	; (801488c <tcp_process+0x5c4>)
 80146a2:	487b      	ldr	r0, [pc, #492]	; (8014890 <tcp_process+0x5c8>)
 80146a4:	f007 fb32 	bl	801bd0c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80146a8:	687b      	ldr	r3, [r7, #4]
 80146aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80146ac:	699b      	ldr	r3, [r3, #24]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d00a      	beq.n	80146c8 <tcp_process+0x400>
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80146b6:	699b      	ldr	r3, [r3, #24]
 80146b8:	687a      	ldr	r2, [r7, #4]
 80146ba:	6910      	ldr	r0, [r2, #16]
 80146bc:	2200      	movs	r2, #0
 80146be:	6879      	ldr	r1, [r7, #4]
 80146c0:	4798      	blx	r3
 80146c2:	4603      	mov	r3, r0
 80146c4:	76bb      	strb	r3, [r7, #26]
 80146c6:	e001      	b.n	80146cc <tcp_process+0x404>
 80146c8:	23f0      	movs	r3, #240	; 0xf0
 80146ca:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80146cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d00a      	beq.n	80146ea <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80146d4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80146d8:	f113 0f0d 	cmn.w	r3, #13
 80146dc:	d002      	beq.n	80146e4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80146de:	6878      	ldr	r0, [r7, #4]
 80146e0:	f7fd fde4 	bl	80122ac <tcp_abort>
            }
            return ERR_ABRT;
 80146e4:	f06f 030c 	mvn.w	r3, #12
 80146e8:	e1ce      	b.n	8014a88 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f000 fae0 	bl	8014cb0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80146f0:	4b68      	ldr	r3, [pc, #416]	; (8014894 <tcp_process+0x5cc>)
 80146f2:	881b      	ldrh	r3, [r3, #0]
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d005      	beq.n	8014704 <tcp_process+0x43c>
            recv_acked--;
 80146f8:	4b66      	ldr	r3, [pc, #408]	; (8014894 <tcp_process+0x5cc>)
 80146fa:	881b      	ldrh	r3, [r3, #0]
 80146fc:	3b01      	subs	r3, #1
 80146fe:	b29a      	uxth	r2, r3
 8014700:	4b64      	ldr	r3, [pc, #400]	; (8014894 <tcp_process+0x5cc>)
 8014702:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014708:	009a      	lsls	r2, r3, #2
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801470e:	005b      	lsls	r3, r3, #1
 8014710:	f241 111c 	movw	r1, #4380	; 0x111c
 8014714:	428b      	cmp	r3, r1
 8014716:	bf38      	it	cc
 8014718:	460b      	movcc	r3, r1
 801471a:	429a      	cmp	r2, r3
 801471c:	d204      	bcs.n	8014728 <tcp_process+0x460>
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	b29b      	uxth	r3, r3
 8014726:	e00d      	b.n	8014744 <tcp_process+0x47c>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801472c:	005b      	lsls	r3, r3, #1
 801472e:	f241 121c 	movw	r2, #4380	; 0x111c
 8014732:	4293      	cmp	r3, r2
 8014734:	d904      	bls.n	8014740 <tcp_process+0x478>
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801473a:	005b      	lsls	r3, r3, #1
 801473c:	b29b      	uxth	r3, r3
 801473e:	e001      	b.n	8014744 <tcp_process+0x47c>
 8014740:	f241 131c 	movw	r3, #4380	; 0x111c
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801474a:	4b53      	ldr	r3, [pc, #332]	; (8014898 <tcp_process+0x5d0>)
 801474c:	781b      	ldrb	r3, [r3, #0]
 801474e:	f003 0320 	and.w	r3, r3, #32
 8014752:	2b00      	cmp	r3, #0
 8014754:	d037      	beq.n	80147c6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014756:	687b      	ldr	r3, [r7, #4]
 8014758:	8b5b      	ldrh	r3, [r3, #26]
 801475a:	f043 0302 	orr.w	r3, r3, #2
 801475e:	b29a      	uxth	r2, r3
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	2207      	movs	r2, #7
 8014768:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801476a:	e02c      	b.n	80147c6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801476c:	4b40      	ldr	r3, [pc, #256]	; (8014870 <tcp_process+0x5a8>)
 801476e:	6819      	ldr	r1, [r3, #0]
 8014770:	4b40      	ldr	r3, [pc, #256]	; (8014874 <tcp_process+0x5ac>)
 8014772:	881b      	ldrh	r3, [r3, #0]
 8014774:	461a      	mov	r2, r3
 8014776:	4b40      	ldr	r3, [pc, #256]	; (8014878 <tcp_process+0x5b0>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801477c:	4b3f      	ldr	r3, [pc, #252]	; (801487c <tcp_process+0x5b4>)
 801477e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014780:	885b      	ldrh	r3, [r3, #2]
 8014782:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014784:	4a3d      	ldr	r2, [pc, #244]	; (801487c <tcp_process+0x5b4>)
 8014786:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014788:	8812      	ldrh	r2, [r2, #0]
 801478a:	b292      	uxth	r2, r2
 801478c:	9202      	str	r2, [sp, #8]
 801478e:	9301      	str	r3, [sp, #4]
 8014790:	4b3b      	ldr	r3, [pc, #236]	; (8014880 <tcp_process+0x5b8>)
 8014792:	9300      	str	r3, [sp, #0]
 8014794:	4b3b      	ldr	r3, [pc, #236]	; (8014884 <tcp_process+0x5bc>)
 8014796:	4602      	mov	r2, r0
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f003 f827 	bl	80177ec <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801479e:	e167      	b.n	8014a70 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80147a0:	4b32      	ldr	r3, [pc, #200]	; (801486c <tcp_process+0x5a4>)
 80147a2:	781b      	ldrb	r3, [r3, #0]
 80147a4:	f003 0302 	and.w	r3, r3, #2
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	f000 8161 	beq.w	8014a70 <tcp_process+0x7a8>
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147b2:	1e5a      	subs	r2, r3, #1
 80147b4:	4b30      	ldr	r3, [pc, #192]	; (8014878 <tcp_process+0x5b0>)
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	429a      	cmp	r2, r3
 80147ba:	f040 8159 	bne.w	8014a70 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f002 fe0c 	bl	80173dc <tcp_rexmit>
      break;
 80147c4:	e154      	b.n	8014a70 <tcp_process+0x7a8>
 80147c6:	e153      	b.n	8014a70 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f000 fa71 	bl	8014cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80147ce:	4b32      	ldr	r3, [pc, #200]	; (8014898 <tcp_process+0x5d0>)
 80147d0:	781b      	ldrb	r3, [r3, #0]
 80147d2:	f003 0320 	and.w	r3, r3, #32
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	f000 814c 	beq.w	8014a74 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	8b5b      	ldrh	r3, [r3, #26]
 80147e0:	f043 0302 	orr.w	r3, r3, #2
 80147e4:	b29a      	uxth	r2, r3
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	2207      	movs	r2, #7
 80147ee:	751a      	strb	r2, [r3, #20]
      }
      break;
 80147f0:	e140      	b.n	8014a74 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	f000 fa5c 	bl	8014cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80147f8:	4b27      	ldr	r3, [pc, #156]	; (8014898 <tcp_process+0x5d0>)
 80147fa:	781b      	ldrb	r3, [r3, #0]
 80147fc:	f003 0320 	and.w	r3, r3, #32
 8014800:	2b00      	cmp	r3, #0
 8014802:	d071      	beq.n	80148e8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014804:	4b19      	ldr	r3, [pc, #100]	; (801486c <tcp_process+0x5a4>)
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	f003 0310 	and.w	r3, r3, #16
 801480c:	2b00      	cmp	r3, #0
 801480e:	d060      	beq.n	80148d2 <tcp_process+0x60a>
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014814:	4b16      	ldr	r3, [pc, #88]	; (8014870 <tcp_process+0x5a8>)
 8014816:	681b      	ldr	r3, [r3, #0]
 8014818:	429a      	cmp	r2, r3
 801481a:	d15a      	bne.n	80148d2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014820:	2b00      	cmp	r3, #0
 8014822:	d156      	bne.n	80148d2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	8b5b      	ldrh	r3, [r3, #26]
 8014828:	f043 0302 	orr.w	r3, r3, #2
 801482c:	b29a      	uxth	r2, r3
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	f7fe fdbe 	bl	80133b4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014838:	4b18      	ldr	r3, [pc, #96]	; (801489c <tcp_process+0x5d4>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	429a      	cmp	r2, r3
 8014840:	d105      	bne.n	801484e <tcp_process+0x586>
 8014842:	4b16      	ldr	r3, [pc, #88]	; (801489c <tcp_process+0x5d4>)
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	4a14      	ldr	r2, [pc, #80]	; (801489c <tcp_process+0x5d4>)
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	e02e      	b.n	80148ac <tcp_process+0x5e4>
 801484e:	4b13      	ldr	r3, [pc, #76]	; (801489c <tcp_process+0x5d4>)
 8014850:	681b      	ldr	r3, [r3, #0]
 8014852:	617b      	str	r3, [r7, #20]
 8014854:	e027      	b.n	80148a6 <tcp_process+0x5de>
 8014856:	697b      	ldr	r3, [r7, #20]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	687a      	ldr	r2, [r7, #4]
 801485c:	429a      	cmp	r2, r3
 801485e:	d11f      	bne.n	80148a0 <tcp_process+0x5d8>
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	68da      	ldr	r2, [r3, #12]
 8014864:	697b      	ldr	r3, [r7, #20]
 8014866:	60da      	str	r2, [r3, #12]
 8014868:	e020      	b.n	80148ac <tcp_process+0x5e4>
 801486a:	bf00      	nop
 801486c:	20004820 	.word	0x20004820
 8014870:	20004818 	.word	0x20004818
 8014874:	2000481e 	.word	0x2000481e
 8014878:	20004814 	.word	0x20004814
 801487c:	20004804 	.word	0x20004804
 8014880:	2000a0b8 	.word	0x2000a0b8
 8014884:	2000a0bc 	.word	0x2000a0bc
 8014888:	080203c8 	.word	0x080203c8
 801488c:	08020668 	.word	0x08020668
 8014890:	08020414 	.word	0x08020414
 8014894:	2000481c 	.word	0x2000481c
 8014898:	20004821 	.word	0x20004821
 801489c:	2000d7bc 	.word	0x2000d7bc
 80148a0:	697b      	ldr	r3, [r7, #20]
 80148a2:	68db      	ldr	r3, [r3, #12]
 80148a4:	617b      	str	r3, [r7, #20]
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d1d4      	bne.n	8014856 <tcp_process+0x58e>
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2200      	movs	r2, #0
 80148b0:	60da      	str	r2, [r3, #12]
 80148b2:	4b77      	ldr	r3, [pc, #476]	; (8014a90 <tcp_process+0x7c8>)
 80148b4:	2201      	movs	r2, #1
 80148b6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	220a      	movs	r2, #10
 80148bc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80148be:	4b75      	ldr	r3, [pc, #468]	; (8014a94 <tcp_process+0x7cc>)
 80148c0:	681a      	ldr	r2, [r3, #0]
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	60da      	str	r2, [r3, #12]
 80148c6:	4a73      	ldr	r2, [pc, #460]	; (8014a94 <tcp_process+0x7cc>)
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	6013      	str	r3, [r2, #0]
 80148cc:	f003 f950 	bl	8017b70 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80148d0:	e0d2      	b.n	8014a78 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	8b5b      	ldrh	r3, [r3, #26]
 80148d6:	f043 0302 	orr.w	r3, r3, #2
 80148da:	b29a      	uxth	r2, r3
 80148dc:	687b      	ldr	r3, [r7, #4]
 80148de:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	2208      	movs	r2, #8
 80148e4:	751a      	strb	r2, [r3, #20]
      break;
 80148e6:	e0c7      	b.n	8014a78 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148e8:	4b6b      	ldr	r3, [pc, #428]	; (8014a98 <tcp_process+0x7d0>)
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	f003 0310 	and.w	r3, r3, #16
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f000 80c1 	beq.w	8014a78 <tcp_process+0x7b0>
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148fa:	4b68      	ldr	r3, [pc, #416]	; (8014a9c <tcp_process+0x7d4>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	429a      	cmp	r2, r3
 8014900:	f040 80ba 	bne.w	8014a78 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014908:	2b00      	cmp	r3, #0
 801490a:	f040 80b5 	bne.w	8014a78 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	2206      	movs	r2, #6
 8014912:	751a      	strb	r2, [r3, #20]
      break;
 8014914:	e0b0      	b.n	8014a78 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8014916:	6878      	ldr	r0, [r7, #4]
 8014918:	f000 f9ca 	bl	8014cb0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801491c:	4b60      	ldr	r3, [pc, #384]	; (8014aa0 <tcp_process+0x7d8>)
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	f003 0320 	and.w	r3, r3, #32
 8014924:	2b00      	cmp	r3, #0
 8014926:	f000 80a9 	beq.w	8014a7c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	8b5b      	ldrh	r3, [r3, #26]
 801492e:	f043 0302 	orr.w	r3, r3, #2
 8014932:	b29a      	uxth	r2, r3
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014938:	6878      	ldr	r0, [r7, #4]
 801493a:	f7fe fd3b 	bl	80133b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801493e:	4b59      	ldr	r3, [pc, #356]	; (8014aa4 <tcp_process+0x7dc>)
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	687a      	ldr	r2, [r7, #4]
 8014944:	429a      	cmp	r2, r3
 8014946:	d105      	bne.n	8014954 <tcp_process+0x68c>
 8014948:	4b56      	ldr	r3, [pc, #344]	; (8014aa4 <tcp_process+0x7dc>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	68db      	ldr	r3, [r3, #12]
 801494e:	4a55      	ldr	r2, [pc, #340]	; (8014aa4 <tcp_process+0x7dc>)
 8014950:	6013      	str	r3, [r2, #0]
 8014952:	e013      	b.n	801497c <tcp_process+0x6b4>
 8014954:	4b53      	ldr	r3, [pc, #332]	; (8014aa4 <tcp_process+0x7dc>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	613b      	str	r3, [r7, #16]
 801495a:	e00c      	b.n	8014976 <tcp_process+0x6ae>
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	68db      	ldr	r3, [r3, #12]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	429a      	cmp	r2, r3
 8014964:	d104      	bne.n	8014970 <tcp_process+0x6a8>
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	68da      	ldr	r2, [r3, #12]
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	60da      	str	r2, [r3, #12]
 801496e:	e005      	b.n	801497c <tcp_process+0x6b4>
 8014970:	693b      	ldr	r3, [r7, #16]
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	613b      	str	r3, [r7, #16]
 8014976:	693b      	ldr	r3, [r7, #16]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d1ef      	bne.n	801495c <tcp_process+0x694>
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2200      	movs	r2, #0
 8014980:	60da      	str	r2, [r3, #12]
 8014982:	4b43      	ldr	r3, [pc, #268]	; (8014a90 <tcp_process+0x7c8>)
 8014984:	2201      	movs	r2, #1
 8014986:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	220a      	movs	r2, #10
 801498c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801498e:	4b41      	ldr	r3, [pc, #260]	; (8014a94 <tcp_process+0x7cc>)
 8014990:	681a      	ldr	r2, [r3, #0]
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	4a3f      	ldr	r2, [pc, #252]	; (8014a94 <tcp_process+0x7cc>)
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	6013      	str	r3, [r2, #0]
 801499c:	f003 f8e8 	bl	8017b70 <tcp_timer_needed>
      }
      break;
 80149a0:	e06c      	b.n	8014a7c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f000 f984 	bl	8014cb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80149a8:	4b3b      	ldr	r3, [pc, #236]	; (8014a98 <tcp_process+0x7d0>)
 80149aa:	781b      	ldrb	r3, [r3, #0]
 80149ac:	f003 0310 	and.w	r3, r3, #16
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d065      	beq.n	8014a80 <tcp_process+0x7b8>
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149b8:	4b38      	ldr	r3, [pc, #224]	; (8014a9c <tcp_process+0x7d4>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	429a      	cmp	r2, r3
 80149be:	d15f      	bne.n	8014a80 <tcp_process+0x7b8>
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d15b      	bne.n	8014a80 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80149c8:	6878      	ldr	r0, [r7, #4]
 80149ca:	f7fe fcf3 	bl	80133b4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80149ce:	4b35      	ldr	r3, [pc, #212]	; (8014aa4 <tcp_process+0x7dc>)
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	687a      	ldr	r2, [r7, #4]
 80149d4:	429a      	cmp	r2, r3
 80149d6:	d105      	bne.n	80149e4 <tcp_process+0x71c>
 80149d8:	4b32      	ldr	r3, [pc, #200]	; (8014aa4 <tcp_process+0x7dc>)
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	68db      	ldr	r3, [r3, #12]
 80149de:	4a31      	ldr	r2, [pc, #196]	; (8014aa4 <tcp_process+0x7dc>)
 80149e0:	6013      	str	r3, [r2, #0]
 80149e2:	e013      	b.n	8014a0c <tcp_process+0x744>
 80149e4:	4b2f      	ldr	r3, [pc, #188]	; (8014aa4 <tcp_process+0x7dc>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	60fb      	str	r3, [r7, #12]
 80149ea:	e00c      	b.n	8014a06 <tcp_process+0x73e>
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	68db      	ldr	r3, [r3, #12]
 80149f0:	687a      	ldr	r2, [r7, #4]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	d104      	bne.n	8014a00 <tcp_process+0x738>
 80149f6:	687b      	ldr	r3, [r7, #4]
 80149f8:	68da      	ldr	r2, [r3, #12]
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	60da      	str	r2, [r3, #12]
 80149fe:	e005      	b.n	8014a0c <tcp_process+0x744>
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	60fb      	str	r3, [r7, #12]
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1ef      	bne.n	80149ec <tcp_process+0x724>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	2200      	movs	r2, #0
 8014a10:	60da      	str	r2, [r3, #12]
 8014a12:	4b1f      	ldr	r3, [pc, #124]	; (8014a90 <tcp_process+0x7c8>)
 8014a14:	2201      	movs	r2, #1
 8014a16:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	220a      	movs	r2, #10
 8014a1c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014a1e:	4b1d      	ldr	r3, [pc, #116]	; (8014a94 <tcp_process+0x7cc>)
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	60da      	str	r2, [r3, #12]
 8014a26:	4a1b      	ldr	r2, [pc, #108]	; (8014a94 <tcp_process+0x7cc>)
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6013      	str	r3, [r2, #0]
 8014a2c:	f003 f8a0 	bl	8017b70 <tcp_timer_needed>
      }
      break;
 8014a30:	e026      	b.n	8014a80 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014a32:	6878      	ldr	r0, [r7, #4]
 8014a34:	f000 f93c 	bl	8014cb0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014a38:	4b17      	ldr	r3, [pc, #92]	; (8014a98 <tcp_process+0x7d0>)
 8014a3a:	781b      	ldrb	r3, [r3, #0]
 8014a3c:	f003 0310 	and.w	r3, r3, #16
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d01f      	beq.n	8014a84 <tcp_process+0x7bc>
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a48:	4b14      	ldr	r3, [pc, #80]	; (8014a9c <tcp_process+0x7d4>)
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d119      	bne.n	8014a84 <tcp_process+0x7bc>
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a54:	2b00      	cmp	r3, #0
 8014a56:	d115      	bne.n	8014a84 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014a58:	4b11      	ldr	r3, [pc, #68]	; (8014aa0 <tcp_process+0x7d8>)
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	f043 0310 	orr.w	r3, r3, #16
 8014a60:	b2da      	uxtb	r2, r3
 8014a62:	4b0f      	ldr	r3, [pc, #60]	; (8014aa0 <tcp_process+0x7d8>)
 8014a64:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014a66:	e00d      	b.n	8014a84 <tcp_process+0x7bc>
    default:
      break;
 8014a68:	bf00      	nop
 8014a6a:	e00c      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a6c:	bf00      	nop
 8014a6e:	e00a      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a70:	bf00      	nop
 8014a72:	e008      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a74:	bf00      	nop
 8014a76:	e006      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a78:	bf00      	nop
 8014a7a:	e004      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a7c:	bf00      	nop
 8014a7e:	e002      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a80:	bf00      	nop
 8014a82:	e000      	b.n	8014a86 <tcp_process+0x7be>
      break;
 8014a84:	bf00      	nop
  }
  return ERR_OK;
 8014a86:	2300      	movs	r3, #0
}
 8014a88:	4618      	mov	r0, r3
 8014a8a:	3724      	adds	r7, #36	; 0x24
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd90      	pop	{r4, r7, pc}
 8014a90:	2000d7b8 	.word	0x2000d7b8
 8014a94:	2000d7cc 	.word	0x2000d7cc
 8014a98:	20004820 	.word	0x20004820
 8014a9c:	20004818 	.word	0x20004818
 8014aa0:	20004821 	.word	0x20004821
 8014aa4:	2000d7bc 	.word	0x2000d7bc

08014aa8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014aa8:	b590      	push	{r4, r7, lr}
 8014aaa:	b085      	sub	sp, #20
 8014aac:	af00      	add	r7, sp, #0
 8014aae:	6078      	str	r0, [r7, #4]
 8014ab0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d106      	bne.n	8014ac6 <tcp_oos_insert_segment+0x1e>
 8014ab8:	4b3b      	ldr	r3, [pc, #236]	; (8014ba8 <tcp_oos_insert_segment+0x100>)
 8014aba:	f240 421f 	movw	r2, #1055	; 0x41f
 8014abe:	493b      	ldr	r1, [pc, #236]	; (8014bac <tcp_oos_insert_segment+0x104>)
 8014ac0:	483b      	ldr	r0, [pc, #236]	; (8014bb0 <tcp_oos_insert_segment+0x108>)
 8014ac2:	f007 f923 	bl	801bd0c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	899b      	ldrh	r3, [r3, #12]
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f7fb fa0e 	bl	800fef0 <lwip_htons>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	b2db      	uxtb	r3, r3
 8014ad8:	f003 0301 	and.w	r3, r3, #1
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d028      	beq.n	8014b32 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014ae0:	6838      	ldr	r0, [r7, #0]
 8014ae2:	f7fe f997 	bl	8012e14 <tcp_segs_free>
    next = NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	603b      	str	r3, [r7, #0]
 8014aea:	e056      	b.n	8014b9a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014aec:	683b      	ldr	r3, [r7, #0]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	899b      	ldrh	r3, [r3, #12]
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	4618      	mov	r0, r3
 8014af6:	f7fb f9fb 	bl	800fef0 <lwip_htons>
 8014afa:	4603      	mov	r3, r0
 8014afc:	b2db      	uxtb	r3, r3
 8014afe:	f003 0301 	and.w	r3, r3, #1
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d00d      	beq.n	8014b22 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	899b      	ldrh	r3, [r3, #12]
 8014b0c:	b29c      	uxth	r4, r3
 8014b0e:	2001      	movs	r0, #1
 8014b10:	f7fb f9ee 	bl	800fef0 <lwip_htons>
 8014b14:	4603      	mov	r3, r0
 8014b16:	461a      	mov	r2, r3
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	68db      	ldr	r3, [r3, #12]
 8014b1c:	4322      	orrs	r2, r4
 8014b1e:	b292      	uxth	r2, r2
 8014b20:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014b2c:	68f8      	ldr	r0, [r7, #12]
 8014b2e:	f7fe f986 	bl	8012e3e <tcp_seg_free>
    while (next &&
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d00e      	beq.n	8014b56 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	891b      	ldrh	r3, [r3, #8]
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	4b1d      	ldr	r3, [pc, #116]	; (8014bb4 <tcp_oos_insert_segment+0x10c>)
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	441a      	add	r2, r3
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	68db      	ldr	r3, [r3, #12]
 8014b48:	685b      	ldr	r3, [r3, #4]
 8014b4a:	6839      	ldr	r1, [r7, #0]
 8014b4c:	8909      	ldrh	r1, [r1, #8]
 8014b4e:	440b      	add	r3, r1
 8014b50:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	daca      	bge.n	8014aec <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d01e      	beq.n	8014b9a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	891b      	ldrh	r3, [r3, #8]
 8014b60:	461a      	mov	r2, r3
 8014b62:	4b14      	ldr	r3, [pc, #80]	; (8014bb4 <tcp_oos_insert_segment+0x10c>)
 8014b64:	681b      	ldr	r3, [r3, #0]
 8014b66:	441a      	add	r2, r3
 8014b68:	683b      	ldr	r3, [r7, #0]
 8014b6a:	68db      	ldr	r3, [r3, #12]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	dd12      	ble.n	8014b9a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014b74:	683b      	ldr	r3, [r7, #0]
 8014b76:	68db      	ldr	r3, [r3, #12]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	4b0d      	ldr	r3, [pc, #52]	; (8014bb4 <tcp_oos_insert_segment+0x10c>)
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	b29b      	uxth	r3, r3
 8014b82:	1ad3      	subs	r3, r2, r3
 8014b84:	b29a      	uxth	r2, r3
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	685a      	ldr	r2, [r3, #4]
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	891b      	ldrh	r3, [r3, #8]
 8014b92:	4619      	mov	r1, r3
 8014b94:	4610      	mov	r0, r2
 8014b96:	f7fc fbd1 	bl	801133c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	683a      	ldr	r2, [r7, #0]
 8014b9e:	601a      	str	r2, [r3, #0]
}
 8014ba0:	bf00      	nop
 8014ba2:	3714      	adds	r7, #20
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	bd90      	pop	{r4, r7, pc}
 8014ba8:	080203c8 	.word	0x080203c8
 8014bac:	08020688 	.word	0x08020688
 8014bb0:	08020414 	.word	0x08020414
 8014bb4:	20004814 	.word	0x20004814

08014bb8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014bb8:	b5b0      	push	{r4, r5, r7, lr}
 8014bba:	b086      	sub	sp, #24
 8014bbc:	af00      	add	r7, sp, #0
 8014bbe:	60f8      	str	r0, [r7, #12]
 8014bc0:	60b9      	str	r1, [r7, #8]
 8014bc2:	607a      	str	r2, [r7, #4]
 8014bc4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014bc6:	e03e      	b.n	8014c46 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014bc8:	68bb      	ldr	r3, [r7, #8]
 8014bca:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014bcc:	68bb      	ldr	r3, [r7, #8]
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	685b      	ldr	r3, [r3, #4]
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7fc fdf6 	bl	80117c8 <pbuf_clen>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014be6:	8a7a      	ldrh	r2, [r7, #18]
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d906      	bls.n	8014bfa <tcp_free_acked_segments+0x42>
 8014bec:	4b2a      	ldr	r3, [pc, #168]	; (8014c98 <tcp_free_acked_segments+0xe0>)
 8014bee:	f240 4257 	movw	r2, #1111	; 0x457
 8014bf2:	492a      	ldr	r1, [pc, #168]	; (8014c9c <tcp_free_acked_segments+0xe4>)
 8014bf4:	482a      	ldr	r0, [pc, #168]	; (8014ca0 <tcp_free_acked_segments+0xe8>)
 8014bf6:	f007 f889 	bl	801bd0c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014bfa:	68fb      	ldr	r3, [r7, #12]
 8014bfc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014c00:	8a7b      	ldrh	r3, [r7, #18]
 8014c02:	1ad3      	subs	r3, r2, r3
 8014c04:	b29a      	uxth	r2, r3
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	891a      	ldrh	r2, [r3, #8]
 8014c10:	4b24      	ldr	r3, [pc, #144]	; (8014ca4 <tcp_free_acked_segments+0xec>)
 8014c12:	881b      	ldrh	r3, [r3, #0]
 8014c14:	4413      	add	r3, r2
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	4b22      	ldr	r3, [pc, #136]	; (8014ca4 <tcp_free_acked_segments+0xec>)
 8014c1a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014c1c:	6978      	ldr	r0, [r7, #20]
 8014c1e:	f7fe f90e 	bl	8012e3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	d00c      	beq.n	8014c46 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	2b00      	cmp	r3, #0
 8014c30:	d109      	bne.n	8014c46 <tcp_free_acked_segments+0x8e>
 8014c32:	683b      	ldr	r3, [r7, #0]
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d106      	bne.n	8014c46 <tcp_free_acked_segments+0x8e>
 8014c38:	4b17      	ldr	r3, [pc, #92]	; (8014c98 <tcp_free_acked_segments+0xe0>)
 8014c3a:	f240 4261 	movw	r2, #1121	; 0x461
 8014c3e:	491a      	ldr	r1, [pc, #104]	; (8014ca8 <tcp_free_acked_segments+0xf0>)
 8014c40:	4817      	ldr	r0, [pc, #92]	; (8014ca0 <tcp_free_acked_segments+0xe8>)
 8014c42:	f007 f863 	bl	801bd0c <iprintf>
  while (seg_list != NULL &&
 8014c46:	68bb      	ldr	r3, [r7, #8]
 8014c48:	2b00      	cmp	r3, #0
 8014c4a:	d020      	beq.n	8014c8e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014c4c:	68bb      	ldr	r3, [r7, #8]
 8014c4e:	68db      	ldr	r3, [r3, #12]
 8014c50:	685b      	ldr	r3, [r3, #4]
 8014c52:	4618      	mov	r0, r3
 8014c54:	f7fb f961 	bl	800ff1a <lwip_htonl>
 8014c58:	4604      	mov	r4, r0
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	891b      	ldrh	r3, [r3, #8]
 8014c5e:	461d      	mov	r5, r3
 8014c60:	68bb      	ldr	r3, [r7, #8]
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	899b      	ldrh	r3, [r3, #12]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fb f941 	bl	800fef0 <lwip_htons>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	f003 0303 	and.w	r3, r3, #3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <tcp_free_acked_segments+0xc6>
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e000      	b.n	8014c80 <tcp_free_acked_segments+0xc8>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	442b      	add	r3, r5
 8014c82:	18e2      	adds	r2, r4, r3
 8014c84:	4b09      	ldr	r3, [pc, #36]	; (8014cac <tcp_free_acked_segments+0xf4>)
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	dd9c      	ble.n	8014bc8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c8e:	68bb      	ldr	r3, [r7, #8]
}
 8014c90:	4618      	mov	r0, r3
 8014c92:	3718      	adds	r7, #24
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bdb0      	pop	{r4, r5, r7, pc}
 8014c98:	080203c8 	.word	0x080203c8
 8014c9c:	080206b0 	.word	0x080206b0
 8014ca0:	08020414 	.word	0x08020414
 8014ca4:	2000481c 	.word	0x2000481c
 8014ca8:	080206d8 	.word	0x080206d8
 8014cac:	20004818 	.word	0x20004818

08014cb0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014cb0:	b5b0      	push	{r4, r5, r7, lr}
 8014cb2:	b094      	sub	sp, #80	; 0x50
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d106      	bne.n	8014cd0 <tcp_receive+0x20>
 8014cc2:	4ba6      	ldr	r3, [pc, #664]	; (8014f5c <tcp_receive+0x2ac>)
 8014cc4:	f240 427b 	movw	r2, #1147	; 0x47b
 8014cc8:	49a5      	ldr	r1, [pc, #660]	; (8014f60 <tcp_receive+0x2b0>)
 8014cca:	48a6      	ldr	r0, [pc, #664]	; (8014f64 <tcp_receive+0x2b4>)
 8014ccc:	f007 f81e 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	7d1b      	ldrb	r3, [r3, #20]
 8014cd4:	2b03      	cmp	r3, #3
 8014cd6:	d806      	bhi.n	8014ce6 <tcp_receive+0x36>
 8014cd8:	4ba0      	ldr	r3, [pc, #640]	; (8014f5c <tcp_receive+0x2ac>)
 8014cda:	f240 427c 	movw	r2, #1148	; 0x47c
 8014cde:	49a2      	ldr	r1, [pc, #648]	; (8014f68 <tcp_receive+0x2b8>)
 8014ce0:	48a0      	ldr	r0, [pc, #640]	; (8014f64 <tcp_receive+0x2b4>)
 8014ce2:	f007 f813 	bl	801bd0c <iprintf>

  if (flags & TCP_ACK) {
 8014ce6:	4ba1      	ldr	r3, [pc, #644]	; (8014f6c <tcp_receive+0x2bc>)
 8014ce8:	781b      	ldrb	r3, [r3, #0]
 8014cea:	f003 0310 	and.w	r3, r3, #16
 8014cee:	2b00      	cmp	r3, #0
 8014cf0:	f000 8263 	beq.w	80151ba <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cfa:	461a      	mov	r2, r3
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d00:	4413      	add	r3, r2
 8014d02:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d08:	4b99      	ldr	r3, [pc, #612]	; (8014f70 <tcp_receive+0x2c0>)
 8014d0a:	681b      	ldr	r3, [r3, #0]
 8014d0c:	1ad3      	subs	r3, r2, r3
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	db1b      	blt.n	8014d4a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d16:	4b96      	ldr	r3, [pc, #600]	; (8014f70 <tcp_receive+0x2c0>)
 8014d18:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014d1a:	429a      	cmp	r2, r3
 8014d1c:	d106      	bne.n	8014d2c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014d22:	4b94      	ldr	r3, [pc, #592]	; (8014f74 <tcp_receive+0x2c4>)
 8014d24:	681b      	ldr	r3, [r3, #0]
 8014d26:	1ad3      	subs	r3, r2, r3
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	db0e      	blt.n	8014d4a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014d30:	4b90      	ldr	r3, [pc, #576]	; (8014f74 <tcp_receive+0x2c4>)
 8014d32:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d125      	bne.n	8014d84 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014d38:	4b8f      	ldr	r3, [pc, #572]	; (8014f78 <tcp_receive+0x2c8>)
 8014d3a:	681b      	ldr	r3, [r3, #0]
 8014d3c:	89db      	ldrh	r3, [r3, #14]
 8014d3e:	b29a      	uxth	r2, r3
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d91c      	bls.n	8014d84 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014d4a:	4b8b      	ldr	r3, [pc, #556]	; (8014f78 <tcp_receive+0x2c8>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	89db      	ldrh	r3, [r3, #14]
 8014d50:	b29a      	uxth	r2, r3
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d205      	bcs.n	8014d74 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014d74:	4b7e      	ldr	r3, [pc, #504]	; (8014f70 <tcp_receive+0x2c0>)
 8014d76:	681a      	ldr	r2, [r3, #0]
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014d7c:	4b7d      	ldr	r3, [pc, #500]	; (8014f74 <tcp_receive+0x2c4>)
 8014d7e:	681a      	ldr	r2, [r3, #0]
 8014d80:	687b      	ldr	r3, [r7, #4]
 8014d82:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d84:	4b7b      	ldr	r3, [pc, #492]	; (8014f74 <tcp_receive+0x2c4>)
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d8c:	1ad3      	subs	r3, r2, r3
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	dc58      	bgt.n	8014e44 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d92:	4b7a      	ldr	r3, [pc, #488]	; (8014f7c <tcp_receive+0x2cc>)
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	2b00      	cmp	r3, #0
 8014d98:	d14b      	bne.n	8014e32 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d9e:	687a      	ldr	r2, [r7, #4]
 8014da0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014da4:	4413      	add	r3, r2
 8014da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014da8:	429a      	cmp	r2, r3
 8014daa:	d142      	bne.n	8014e32 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	db3d      	blt.n	8014e32 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014dba:	4b6e      	ldr	r3, [pc, #440]	; (8014f74 <tcp_receive+0x2c4>)
 8014dbc:	681b      	ldr	r3, [r3, #0]
 8014dbe:	429a      	cmp	r2, r3
 8014dc0:	d137      	bne.n	8014e32 <tcp_receive+0x182>
              found_dupack = 1;
 8014dc2:	2301      	movs	r3, #1
 8014dc4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014dcc:	2bff      	cmp	r3, #255	; 0xff
 8014dce:	d007      	beq.n	8014de0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	b2da      	uxtb	r2, r3
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014de6:	2b03      	cmp	r3, #3
 8014de8:	d91b      	bls.n	8014e22 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014df4:	4413      	add	r3, r2
 8014df6:	b29a      	uxth	r2, r3
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d30a      	bcc.n	8014e18 <tcp_receive+0x168>
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e0c:	4413      	add	r3, r2
 8014e0e:	b29a      	uxth	r2, r3
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014e16:	e004      	b.n	8014e22 <tcp_receive+0x172>
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014e28:	2b02      	cmp	r3, #2
 8014e2a:	d902      	bls.n	8014e32 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f002 fb41 	bl	80174b4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	f040 8160 	bne.w	80150fa <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014e42:	e15a      	b.n	80150fa <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e44:	4b4b      	ldr	r3, [pc, #300]	; (8014f74 <tcp_receive+0x2c4>)
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e4c:	1ad3      	subs	r3, r2, r3
 8014e4e:	3b01      	subs	r3, #1
 8014e50:	2b00      	cmp	r3, #0
 8014e52:	f2c0 814d 	blt.w	80150f0 <tcp_receive+0x440>
 8014e56:	4b47      	ldr	r3, [pc, #284]	; (8014f74 <tcp_receive+0x2c4>)
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e5e:	1ad3      	subs	r3, r2, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	f300 8145 	bgt.w	80150f0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	8b5b      	ldrh	r3, [r3, #26]
 8014e6a:	f003 0304 	and.w	r3, r3, #4
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d010      	beq.n	8014e94 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	8b5b      	ldrh	r3, [r3, #26]
 8014e76:	f023 0304 	bic.w	r3, r3, #4
 8014e7a:	b29a      	uxth	r2, r3
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	2200      	movs	r2, #0
 8014e90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	2200      	movs	r2, #0
 8014e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ea2:	10db      	asrs	r3, r3, #3
 8014ea4:	b21b      	sxth	r3, r3
 8014ea6:	b29a      	uxth	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014eae:	b29b      	uxth	r3, r3
 8014eb0:	4413      	add	r3, r2
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	b21a      	sxth	r2, r3
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014ebc:	4b2d      	ldr	r3, [pc, #180]	; (8014f74 <tcp_receive+0x2c4>)
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014ec6:	b29b      	uxth	r3, r3
 8014ec8:	1ad3      	subs	r3, r2, r3
 8014eca:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2200      	movs	r2, #0
 8014ed0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014ed4:	4b27      	ldr	r3, [pc, #156]	; (8014f74 <tcp_receive+0x2c4>)
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	7d1b      	ldrb	r3, [r3, #20]
 8014ee0:	2b03      	cmp	r3, #3
 8014ee2:	f240 8096 	bls.w	8015012 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d244      	bcs.n	8014f80 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	8b5b      	ldrh	r3, [r3, #26]
 8014efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d001      	beq.n	8014f06 <tcp_receive+0x256>
 8014f02:	2301      	movs	r3, #1
 8014f04:	e000      	b.n	8014f08 <tcp_receive+0x258>
 8014f06:	2302      	movs	r3, #2
 8014f08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014f0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014f10:	b29a      	uxth	r2, r3
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f16:	fb12 f303 	smulbb	r3, r2, r3
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014f1e:	4293      	cmp	r3, r2
 8014f20:	bf28      	it	cs
 8014f22:	4613      	movcs	r3, r2
 8014f24:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f2c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f2e:	4413      	add	r3, r2
 8014f30:	b29a      	uxth	r2, r3
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f38:	429a      	cmp	r2, r3
 8014f3a:	d309      	bcc.n	8014f50 <tcp_receive+0x2a0>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f42:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f44:	4413      	add	r3, r2
 8014f46:	b29a      	uxth	r2, r3
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f4e:	e060      	b.n	8015012 <tcp_receive+0x362>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f5a:	e05a      	b.n	8015012 <tcp_receive+0x362>
 8014f5c:	080203c8 	.word	0x080203c8
 8014f60:	080206f8 	.word	0x080206f8
 8014f64:	08020414 	.word	0x08020414
 8014f68:	08020714 	.word	0x08020714
 8014f6c:	20004820 	.word	0x20004820
 8014f70:	20004814 	.word	0x20004814
 8014f74:	20004818 	.word	0x20004818
 8014f78:	20004804 	.word	0x20004804
 8014f7c:	2000481e 	.word	0x2000481e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f86:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f88:	4413      	add	r3, r2
 8014f8a:	b29a      	uxth	r2, r3
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f92:	429a      	cmp	r2, r3
 8014f94:	d309      	bcc.n	8014faa <tcp_receive+0x2fa>
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f9e:	4413      	add	r3, r2
 8014fa0:	b29a      	uxth	r2, r3
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014fa8:	e004      	b.n	8014fb4 <tcp_receive+0x304>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014fc0:	429a      	cmp	r2, r3
 8014fc2:	d326      	bcc.n	8015012 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	b29a      	uxth	r2, r3
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fe4:	4413      	add	r3, r2
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d30a      	bcc.n	8015008 <tcp_receive+0x358>
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ff8:	687b      	ldr	r3, [r7, #4]
 8014ffa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014ffc:	4413      	add	r3, r2
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015006:	e004      	b.n	8015012 <tcp_receive+0x362>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801500e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801501a:	4a98      	ldr	r2, [pc, #608]	; (801527c <tcp_receive+0x5cc>)
 801501c:	6878      	ldr	r0, [r7, #4]
 801501e:	f7ff fdcb 	bl	8014bb8 <tcp_free_acked_segments>
 8015022:	4602      	mov	r2, r0
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015030:	4a93      	ldr	r2, [pc, #588]	; (8015280 <tcp_receive+0x5d0>)
 8015032:	6878      	ldr	r0, [r7, #4]
 8015034:	f7ff fdc0 	bl	8014bb8 <tcp_free_acked_segments>
 8015038:	4602      	mov	r2, r0
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801503e:	687b      	ldr	r3, [r7, #4]
 8015040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015042:	2b00      	cmp	r3, #0
 8015044:	d104      	bne.n	8015050 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801504c:	861a      	strh	r2, [r3, #48]	; 0x30
 801504e:	e002      	b.n	8015056 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	2200      	movs	r2, #0
 8015054:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2200      	movs	r2, #0
 801505a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015060:	2b00      	cmp	r3, #0
 8015062:	d103      	bne.n	801506c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	2200      	movs	r2, #0
 8015068:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015072:	4b84      	ldr	r3, [pc, #528]	; (8015284 <tcp_receive+0x5d4>)
 8015074:	881b      	ldrh	r3, [r3, #0]
 8015076:	4413      	add	r3, r2
 8015078:	b29a      	uxth	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	8b5b      	ldrh	r3, [r3, #26]
 8015084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015088:	2b00      	cmp	r3, #0
 801508a:	d035      	beq.n	80150f8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015090:	2b00      	cmp	r3, #0
 8015092:	d118      	bne.n	80150c6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015098:	2b00      	cmp	r3, #0
 801509a:	d00c      	beq.n	80150b6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150a4:	68db      	ldr	r3, [r3, #12]
 80150a6:	685b      	ldr	r3, [r3, #4]
 80150a8:	4618      	mov	r0, r3
 80150aa:	f7fa ff36 	bl	800ff1a <lwip_htonl>
 80150ae:	4603      	mov	r3, r0
 80150b0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	dc20      	bgt.n	80150f8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	8b5b      	ldrh	r3, [r3, #26]
 80150ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80150be:	b29a      	uxth	r2, r3
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150c4:	e018      	b.n	80150f8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80150ce:	68db      	ldr	r3, [r3, #12]
 80150d0:	685b      	ldr	r3, [r3, #4]
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fa ff21 	bl	800ff1a <lwip_htonl>
 80150d8:	4603      	mov	r3, r0
 80150da:	1ae3      	subs	r3, r4, r3
 80150dc:	2b00      	cmp	r3, #0
 80150de:	dc0b      	bgt.n	80150f8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	8b5b      	ldrh	r3, [r3, #26]
 80150e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80150e8:	b29a      	uxth	r2, r3
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150ee:	e003      	b.n	80150f8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80150f0:	6878      	ldr	r0, [r7, #4]
 80150f2:	f002 fbcd 	bl	8017890 <tcp_send_empty_ack>
 80150f6:	e000      	b.n	80150fa <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150f8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d05b      	beq.n	80151ba <tcp_receive+0x50a>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015106:	4b60      	ldr	r3, [pc, #384]	; (8015288 <tcp_receive+0x5d8>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	2b00      	cmp	r3, #0
 801510e:	da54      	bge.n	80151ba <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015110:	4b5e      	ldr	r3, [pc, #376]	; (801528c <tcp_receive+0x5dc>)
 8015112:	681b      	ldr	r3, [r3, #0]
 8015114:	b29a      	uxth	r2, r3
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801511a:	b29b      	uxth	r3, r3
 801511c:	1ad3      	subs	r3, r2, r3
 801511e:	b29b      	uxth	r3, r3
 8015120:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015124:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801512e:	10db      	asrs	r3, r3, #3
 8015130:	b21b      	sxth	r3, r3
 8015132:	b29b      	uxth	r3, r3
 8015134:	1ad3      	subs	r3, r2, r3
 8015136:	b29b      	uxth	r3, r3
 8015138:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801513c:	687b      	ldr	r3, [r7, #4]
 801513e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015142:	b29a      	uxth	r2, r3
 8015144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015148:	4413      	add	r3, r2
 801514a:	b29b      	uxth	r3, r3
 801514c:	b21a      	sxth	r2, r3
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015152:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015156:	2b00      	cmp	r3, #0
 8015158:	da05      	bge.n	8015166 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 801515a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801515e:	425b      	negs	r3, r3
 8015160:	b29b      	uxth	r3, r3
 8015162:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015166:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015170:	109b      	asrs	r3, r3, #2
 8015172:	b21b      	sxth	r3, r3
 8015174:	b29b      	uxth	r3, r3
 8015176:	1ad3      	subs	r3, r2, r3
 8015178:	b29b      	uxth	r3, r3
 801517a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801517e:	687b      	ldr	r3, [r7, #4]
 8015180:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015184:	b29a      	uxth	r2, r3
 8015186:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801518a:	4413      	add	r3, r2
 801518c:	b29b      	uxth	r3, r3
 801518e:	b21a      	sxth	r2, r3
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801519a:	10db      	asrs	r3, r3, #3
 801519c:	b21b      	sxth	r3, r3
 801519e:	b29a      	uxth	r2, r3
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80151a6:	b29b      	uxth	r3, r3
 80151a8:	4413      	add	r3, r2
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	b21a      	sxth	r2, r3
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	2200      	movs	r2, #0
 80151b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80151ba:	4b35      	ldr	r3, [pc, #212]	; (8015290 <tcp_receive+0x5e0>)
 80151bc:	881b      	ldrh	r3, [r3, #0]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	f000 84e1 	beq.w	8015b86 <tcp_receive+0xed6>
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	7d1b      	ldrb	r3, [r3, #20]
 80151c8:	2b06      	cmp	r3, #6
 80151ca:	f200 84dc 	bhi.w	8015b86 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151d2:	4b30      	ldr	r3, [pc, #192]	; (8015294 <tcp_receive+0x5e4>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	1ad3      	subs	r3, r2, r3
 80151d8:	3b01      	subs	r3, #1
 80151da:	2b00      	cmp	r3, #0
 80151dc:	f2c0 808e 	blt.w	80152fc <tcp_receive+0x64c>
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151e4:	4b2a      	ldr	r3, [pc, #168]	; (8015290 <tcp_receive+0x5e0>)
 80151e6:	881b      	ldrh	r3, [r3, #0]
 80151e8:	4619      	mov	r1, r3
 80151ea:	4b2a      	ldr	r3, [pc, #168]	; (8015294 <tcp_receive+0x5e4>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	440b      	add	r3, r1
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	3301      	adds	r3, #1
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f300 8081 	bgt.w	80152fc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80151fa:	4b27      	ldr	r3, [pc, #156]	; (8015298 <tcp_receive+0x5e8>)
 80151fc:	685b      	ldr	r3, [r3, #4]
 80151fe:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015204:	4b23      	ldr	r3, [pc, #140]	; (8015294 <tcp_receive+0x5e4>)
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	1ad3      	subs	r3, r2, r3
 801520a:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801520c:	4b22      	ldr	r3, [pc, #136]	; (8015298 <tcp_receive+0x5e8>)
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d106      	bne.n	8015222 <tcp_receive+0x572>
 8015214:	4b21      	ldr	r3, [pc, #132]	; (801529c <tcp_receive+0x5ec>)
 8015216:	f240 5294 	movw	r2, #1428	; 0x594
 801521a:	4921      	ldr	r1, [pc, #132]	; (80152a0 <tcp_receive+0x5f0>)
 801521c:	4821      	ldr	r0, [pc, #132]	; (80152a4 <tcp_receive+0x5f4>)
 801521e:	f006 fd75 	bl	801bd0c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015224:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015228:	4293      	cmp	r3, r2
 801522a:	d906      	bls.n	801523a <tcp_receive+0x58a>
 801522c:	4b1b      	ldr	r3, [pc, #108]	; (801529c <tcp_receive+0x5ec>)
 801522e:	f240 5295 	movw	r2, #1429	; 0x595
 8015232:	491d      	ldr	r1, [pc, #116]	; (80152a8 <tcp_receive+0x5f8>)
 8015234:	481b      	ldr	r0, [pc, #108]	; (80152a4 <tcp_receive+0x5f4>)
 8015236:	f006 fd69 	bl	801bd0c <iprintf>
      off = (u16_t)off32;
 801523a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801523c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015240:	4b15      	ldr	r3, [pc, #84]	; (8015298 <tcp_receive+0x5e8>)
 8015242:	685b      	ldr	r3, [r3, #4]
 8015244:	891b      	ldrh	r3, [r3, #8]
 8015246:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801524a:	429a      	cmp	r2, r3
 801524c:	d906      	bls.n	801525c <tcp_receive+0x5ac>
 801524e:	4b13      	ldr	r3, [pc, #76]	; (801529c <tcp_receive+0x5ec>)
 8015250:	f240 5297 	movw	r2, #1431	; 0x597
 8015254:	4915      	ldr	r1, [pc, #84]	; (80152ac <tcp_receive+0x5fc>)
 8015256:	4813      	ldr	r0, [pc, #76]	; (80152a4 <tcp_receive+0x5f4>)
 8015258:	f006 fd58 	bl	801bd0c <iprintf>
      inseg.len -= off;
 801525c:	4b0e      	ldr	r3, [pc, #56]	; (8015298 <tcp_receive+0x5e8>)
 801525e:	891a      	ldrh	r2, [r3, #8]
 8015260:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015264:	1ad3      	subs	r3, r2, r3
 8015266:	b29a      	uxth	r2, r3
 8015268:	4b0b      	ldr	r3, [pc, #44]	; (8015298 <tcp_receive+0x5e8>)
 801526a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801526c:	4b0a      	ldr	r3, [pc, #40]	; (8015298 <tcp_receive+0x5e8>)
 801526e:	685b      	ldr	r3, [r3, #4]
 8015270:	891a      	ldrh	r2, [r3, #8]
 8015272:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015276:	1ad3      	subs	r3, r2, r3
 8015278:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801527a:	e029      	b.n	80152d0 <tcp_receive+0x620>
 801527c:	08020730 	.word	0x08020730
 8015280:	08020738 	.word	0x08020738
 8015284:	2000481c 	.word	0x2000481c
 8015288:	20004818 	.word	0x20004818
 801528c:	2000d7c0 	.word	0x2000d7c0
 8015290:	2000481e 	.word	0x2000481e
 8015294:	20004814 	.word	0x20004814
 8015298:	200047f4 	.word	0x200047f4
 801529c:	080203c8 	.word	0x080203c8
 80152a0:	08020740 	.word	0x08020740
 80152a4:	08020414 	.word	0x08020414
 80152a8:	08020750 	.word	0x08020750
 80152ac:	08020760 	.word	0x08020760
        off -= p->len;
 80152b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152b2:	895b      	ldrh	r3, [r3, #10]
 80152b4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152b8:	1ad3      	subs	r3, r2, r3
 80152ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80152be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80152c2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80152c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152c6:	2200      	movs	r2, #0
 80152c8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80152ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80152d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152d2:	895b      	ldrh	r3, [r3, #10]
 80152d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152d8:	429a      	cmp	r2, r3
 80152da:	d8e9      	bhi.n	80152b0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80152dc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152e0:	4619      	mov	r1, r3
 80152e2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80152e4:	f7fc f92a 	bl	801153c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152ec:	4a91      	ldr	r2, [pc, #580]	; (8015534 <tcp_receive+0x884>)
 80152ee:	6013      	str	r3, [r2, #0]
 80152f0:	4b91      	ldr	r3, [pc, #580]	; (8015538 <tcp_receive+0x888>)
 80152f2:	68db      	ldr	r3, [r3, #12]
 80152f4:	4a8f      	ldr	r2, [pc, #572]	; (8015534 <tcp_receive+0x884>)
 80152f6:	6812      	ldr	r2, [r2, #0]
 80152f8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80152fa:	e00d      	b.n	8015318 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80152fc:	4b8d      	ldr	r3, [pc, #564]	; (8015534 <tcp_receive+0x884>)
 80152fe:	681a      	ldr	r2, [r3, #0]
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015304:	1ad3      	subs	r3, r2, r3
 8015306:	2b00      	cmp	r3, #0
 8015308:	da06      	bge.n	8015318 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	8b5b      	ldrh	r3, [r3, #26]
 801530e:	f043 0302 	orr.w	r3, r3, #2
 8015312:	b29a      	uxth	r2, r3
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015318:	4b86      	ldr	r3, [pc, #536]	; (8015534 <tcp_receive+0x884>)
 801531a:	681a      	ldr	r2, [r3, #0]
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015320:	1ad3      	subs	r3, r2, r3
 8015322:	2b00      	cmp	r3, #0
 8015324:	f2c0 842a 	blt.w	8015b7c <tcp_receive+0xecc>
 8015328:	4b82      	ldr	r3, [pc, #520]	; (8015534 <tcp_receive+0x884>)
 801532a:	681a      	ldr	r2, [r3, #0]
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015330:	6879      	ldr	r1, [r7, #4]
 8015332:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015334:	440b      	add	r3, r1
 8015336:	1ad3      	subs	r3, r2, r3
 8015338:	3301      	adds	r3, #1
 801533a:	2b00      	cmp	r3, #0
 801533c:	f300 841e 	bgt.w	8015b7c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015344:	4b7b      	ldr	r3, [pc, #492]	; (8015534 <tcp_receive+0x884>)
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	429a      	cmp	r2, r3
 801534a:	f040 829a 	bne.w	8015882 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801534e:	4b7a      	ldr	r3, [pc, #488]	; (8015538 <tcp_receive+0x888>)
 8015350:	891c      	ldrh	r4, [r3, #8]
 8015352:	4b79      	ldr	r3, [pc, #484]	; (8015538 <tcp_receive+0x888>)
 8015354:	68db      	ldr	r3, [r3, #12]
 8015356:	899b      	ldrh	r3, [r3, #12]
 8015358:	b29b      	uxth	r3, r3
 801535a:	4618      	mov	r0, r3
 801535c:	f7fa fdc8 	bl	800fef0 <lwip_htons>
 8015360:	4603      	mov	r3, r0
 8015362:	b2db      	uxtb	r3, r3
 8015364:	f003 0303 	and.w	r3, r3, #3
 8015368:	2b00      	cmp	r3, #0
 801536a:	d001      	beq.n	8015370 <tcp_receive+0x6c0>
 801536c:	2301      	movs	r3, #1
 801536e:	e000      	b.n	8015372 <tcp_receive+0x6c2>
 8015370:	2300      	movs	r3, #0
 8015372:	4423      	add	r3, r4
 8015374:	b29a      	uxth	r2, r3
 8015376:	4b71      	ldr	r3, [pc, #452]	; (801553c <tcp_receive+0x88c>)
 8015378:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801537e:	4b6f      	ldr	r3, [pc, #444]	; (801553c <tcp_receive+0x88c>)
 8015380:	881b      	ldrh	r3, [r3, #0]
 8015382:	429a      	cmp	r2, r3
 8015384:	d275      	bcs.n	8015472 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015386:	4b6c      	ldr	r3, [pc, #432]	; (8015538 <tcp_receive+0x888>)
 8015388:	68db      	ldr	r3, [r3, #12]
 801538a:	899b      	ldrh	r3, [r3, #12]
 801538c:	b29b      	uxth	r3, r3
 801538e:	4618      	mov	r0, r3
 8015390:	f7fa fdae 	bl	800fef0 <lwip_htons>
 8015394:	4603      	mov	r3, r0
 8015396:	b2db      	uxtb	r3, r3
 8015398:	f003 0301 	and.w	r3, r3, #1
 801539c:	2b00      	cmp	r3, #0
 801539e:	d01f      	beq.n	80153e0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80153a0:	4b65      	ldr	r3, [pc, #404]	; (8015538 <tcp_receive+0x888>)
 80153a2:	68db      	ldr	r3, [r3, #12]
 80153a4:	899b      	ldrh	r3, [r3, #12]
 80153a6:	b29b      	uxth	r3, r3
 80153a8:	b21b      	sxth	r3, r3
 80153aa:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80153ae:	b21c      	sxth	r4, r3
 80153b0:	4b61      	ldr	r3, [pc, #388]	; (8015538 <tcp_receive+0x888>)
 80153b2:	68db      	ldr	r3, [r3, #12]
 80153b4:	899b      	ldrh	r3, [r3, #12]
 80153b6:	b29b      	uxth	r3, r3
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fa fd99 	bl	800fef0 <lwip_htons>
 80153be:	4603      	mov	r3, r0
 80153c0:	b2db      	uxtb	r3, r3
 80153c2:	b29b      	uxth	r3, r3
 80153c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80153c8:	b29b      	uxth	r3, r3
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7fa fd90 	bl	800fef0 <lwip_htons>
 80153d0:	4603      	mov	r3, r0
 80153d2:	b21b      	sxth	r3, r3
 80153d4:	4323      	orrs	r3, r4
 80153d6:	b21a      	sxth	r2, r3
 80153d8:	4b57      	ldr	r3, [pc, #348]	; (8015538 <tcp_receive+0x888>)
 80153da:	68db      	ldr	r3, [r3, #12]
 80153dc:	b292      	uxth	r2, r2
 80153de:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153e4:	4b54      	ldr	r3, [pc, #336]	; (8015538 <tcp_receive+0x888>)
 80153e6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80153e8:	4b53      	ldr	r3, [pc, #332]	; (8015538 <tcp_receive+0x888>)
 80153ea:	68db      	ldr	r3, [r3, #12]
 80153ec:	899b      	ldrh	r3, [r3, #12]
 80153ee:	b29b      	uxth	r3, r3
 80153f0:	4618      	mov	r0, r3
 80153f2:	f7fa fd7d 	bl	800fef0 <lwip_htons>
 80153f6:	4603      	mov	r3, r0
 80153f8:	b2db      	uxtb	r3, r3
 80153fa:	f003 0302 	and.w	r3, r3, #2
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d005      	beq.n	801540e <tcp_receive+0x75e>
            inseg.len -= 1;
 8015402:	4b4d      	ldr	r3, [pc, #308]	; (8015538 <tcp_receive+0x888>)
 8015404:	891b      	ldrh	r3, [r3, #8]
 8015406:	3b01      	subs	r3, #1
 8015408:	b29a      	uxth	r2, r3
 801540a:	4b4b      	ldr	r3, [pc, #300]	; (8015538 <tcp_receive+0x888>)
 801540c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801540e:	4b4a      	ldr	r3, [pc, #296]	; (8015538 <tcp_receive+0x888>)
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	4a49      	ldr	r2, [pc, #292]	; (8015538 <tcp_receive+0x888>)
 8015414:	8912      	ldrh	r2, [r2, #8]
 8015416:	4611      	mov	r1, r2
 8015418:	4618      	mov	r0, r3
 801541a:	f7fb ff8f 	bl	801133c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801541e:	4b46      	ldr	r3, [pc, #280]	; (8015538 <tcp_receive+0x888>)
 8015420:	891c      	ldrh	r4, [r3, #8]
 8015422:	4b45      	ldr	r3, [pc, #276]	; (8015538 <tcp_receive+0x888>)
 8015424:	68db      	ldr	r3, [r3, #12]
 8015426:	899b      	ldrh	r3, [r3, #12]
 8015428:	b29b      	uxth	r3, r3
 801542a:	4618      	mov	r0, r3
 801542c:	f7fa fd60 	bl	800fef0 <lwip_htons>
 8015430:	4603      	mov	r3, r0
 8015432:	b2db      	uxtb	r3, r3
 8015434:	f003 0303 	and.w	r3, r3, #3
 8015438:	2b00      	cmp	r3, #0
 801543a:	d001      	beq.n	8015440 <tcp_receive+0x790>
 801543c:	2301      	movs	r3, #1
 801543e:	e000      	b.n	8015442 <tcp_receive+0x792>
 8015440:	2300      	movs	r3, #0
 8015442:	4423      	add	r3, r4
 8015444:	b29a      	uxth	r2, r3
 8015446:	4b3d      	ldr	r3, [pc, #244]	; (801553c <tcp_receive+0x88c>)
 8015448:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801544a:	4b3c      	ldr	r3, [pc, #240]	; (801553c <tcp_receive+0x88c>)
 801544c:	881b      	ldrh	r3, [r3, #0]
 801544e:	461a      	mov	r2, r3
 8015450:	4b38      	ldr	r3, [pc, #224]	; (8015534 <tcp_receive+0x884>)
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	441a      	add	r2, r3
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801545a:	6879      	ldr	r1, [r7, #4]
 801545c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801545e:	440b      	add	r3, r1
 8015460:	429a      	cmp	r2, r3
 8015462:	d006      	beq.n	8015472 <tcp_receive+0x7c2>
 8015464:	4b36      	ldr	r3, [pc, #216]	; (8015540 <tcp_receive+0x890>)
 8015466:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801546a:	4936      	ldr	r1, [pc, #216]	; (8015544 <tcp_receive+0x894>)
 801546c:	4836      	ldr	r0, [pc, #216]	; (8015548 <tcp_receive+0x898>)
 801546e:	f006 fc4d 	bl	801bd0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015476:	2b00      	cmp	r3, #0
 8015478:	f000 80e7 	beq.w	801564a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801547c:	4b2e      	ldr	r3, [pc, #184]	; (8015538 <tcp_receive+0x888>)
 801547e:	68db      	ldr	r3, [r3, #12]
 8015480:	899b      	ldrh	r3, [r3, #12]
 8015482:	b29b      	uxth	r3, r3
 8015484:	4618      	mov	r0, r3
 8015486:	f7fa fd33 	bl	800fef0 <lwip_htons>
 801548a:	4603      	mov	r3, r0
 801548c:	b2db      	uxtb	r3, r3
 801548e:	f003 0301 	and.w	r3, r3, #1
 8015492:	2b00      	cmp	r3, #0
 8015494:	d010      	beq.n	80154b8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015496:	e00a      	b.n	80154ae <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801549c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154a2:	681a      	ldr	r2, [r3, #0]
 80154a4:	687b      	ldr	r3, [r7, #4]
 80154a6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80154a8:	68f8      	ldr	r0, [r7, #12]
 80154aa:	f7fd fcc8 	bl	8012e3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d1f0      	bne.n	8015498 <tcp_receive+0x7e8>
 80154b6:	e0c8      	b.n	801564a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80154bc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80154be:	e052      	b.n	8015566 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80154c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154c2:	68db      	ldr	r3, [r3, #12]
 80154c4:	899b      	ldrh	r3, [r3, #12]
 80154c6:	b29b      	uxth	r3, r3
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fa fd11 	bl	800fef0 <lwip_htons>
 80154ce:	4603      	mov	r3, r0
 80154d0:	b2db      	uxtb	r3, r3
 80154d2:	f003 0301 	and.w	r3, r3, #1
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d03d      	beq.n	8015556 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80154da:	4b17      	ldr	r3, [pc, #92]	; (8015538 <tcp_receive+0x888>)
 80154dc:	68db      	ldr	r3, [r3, #12]
 80154de:	899b      	ldrh	r3, [r3, #12]
 80154e0:	b29b      	uxth	r3, r3
 80154e2:	4618      	mov	r0, r3
 80154e4:	f7fa fd04 	bl	800fef0 <lwip_htons>
 80154e8:	4603      	mov	r3, r0
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d130      	bne.n	8015556 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80154f4:	4b10      	ldr	r3, [pc, #64]	; (8015538 <tcp_receive+0x888>)
 80154f6:	68db      	ldr	r3, [r3, #12]
 80154f8:	899b      	ldrh	r3, [r3, #12]
 80154fa:	b29c      	uxth	r4, r3
 80154fc:	2001      	movs	r0, #1
 80154fe:	f7fa fcf7 	bl	800fef0 <lwip_htons>
 8015502:	4603      	mov	r3, r0
 8015504:	461a      	mov	r2, r3
 8015506:	4b0c      	ldr	r3, [pc, #48]	; (8015538 <tcp_receive+0x888>)
 8015508:	68db      	ldr	r3, [r3, #12]
 801550a:	4322      	orrs	r2, r4
 801550c:	b292      	uxth	r2, r2
 801550e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015510:	4b09      	ldr	r3, [pc, #36]	; (8015538 <tcp_receive+0x888>)
 8015512:	891c      	ldrh	r4, [r3, #8]
 8015514:	4b08      	ldr	r3, [pc, #32]	; (8015538 <tcp_receive+0x888>)
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	899b      	ldrh	r3, [r3, #12]
 801551a:	b29b      	uxth	r3, r3
 801551c:	4618      	mov	r0, r3
 801551e:	f7fa fce7 	bl	800fef0 <lwip_htons>
 8015522:	4603      	mov	r3, r0
 8015524:	b2db      	uxtb	r3, r3
 8015526:	f003 0303 	and.w	r3, r3, #3
 801552a:	2b00      	cmp	r3, #0
 801552c:	d00e      	beq.n	801554c <tcp_receive+0x89c>
 801552e:	2301      	movs	r3, #1
 8015530:	e00d      	b.n	801554e <tcp_receive+0x89e>
 8015532:	bf00      	nop
 8015534:	20004814 	.word	0x20004814
 8015538:	200047f4 	.word	0x200047f4
 801553c:	2000481e 	.word	0x2000481e
 8015540:	080203c8 	.word	0x080203c8
 8015544:	08020770 	.word	0x08020770
 8015548:	08020414 	.word	0x08020414
 801554c:	2300      	movs	r3, #0
 801554e:	4423      	add	r3, r4
 8015550:	b29a      	uxth	r2, r3
 8015552:	4b98      	ldr	r3, [pc, #608]	; (80157b4 <tcp_receive+0xb04>)
 8015554:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015558:	613b      	str	r3, [r7, #16]
              next = next->next;
 801555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015560:	6938      	ldr	r0, [r7, #16]
 8015562:	f7fd fc6c 	bl	8012e3e <tcp_seg_free>
            while (next &&
 8015566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015568:	2b00      	cmp	r3, #0
 801556a:	d00e      	beq.n	801558a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801556c:	4b91      	ldr	r3, [pc, #580]	; (80157b4 <tcp_receive+0xb04>)
 801556e:	881b      	ldrh	r3, [r3, #0]
 8015570:	461a      	mov	r2, r3
 8015572:	4b91      	ldr	r3, [pc, #580]	; (80157b8 <tcp_receive+0xb08>)
 8015574:	681b      	ldr	r3, [r3, #0]
 8015576:	441a      	add	r2, r3
 8015578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015580:	8909      	ldrh	r1, [r1, #8]
 8015582:	440b      	add	r3, r1
 8015584:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015586:	2b00      	cmp	r3, #0
 8015588:	da9a      	bge.n	80154c0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801558c:	2b00      	cmp	r3, #0
 801558e:	d059      	beq.n	8015644 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015590:	4b88      	ldr	r3, [pc, #544]	; (80157b4 <tcp_receive+0xb04>)
 8015592:	881b      	ldrh	r3, [r3, #0]
 8015594:	461a      	mov	r2, r3
 8015596:	4b88      	ldr	r3, [pc, #544]	; (80157b8 <tcp_receive+0xb08>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	441a      	add	r2, r3
 801559c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801559e:	68db      	ldr	r3, [r3, #12]
 80155a0:	685b      	ldr	r3, [r3, #4]
 80155a2:	1ad3      	subs	r3, r2, r3
            if (next &&
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	dd4d      	ble.n	8015644 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80155a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	685b      	ldr	r3, [r3, #4]
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	4b81      	ldr	r3, [pc, #516]	; (80157b8 <tcp_receive+0xb08>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	b29b      	uxth	r3, r3
 80155b6:	1ad3      	subs	r3, r2, r3
 80155b8:	b29a      	uxth	r2, r3
 80155ba:	4b80      	ldr	r3, [pc, #512]	; (80157bc <tcp_receive+0xb0c>)
 80155bc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80155be:	4b7f      	ldr	r3, [pc, #508]	; (80157bc <tcp_receive+0xb0c>)
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	899b      	ldrh	r3, [r3, #12]
 80155c4:	b29b      	uxth	r3, r3
 80155c6:	4618      	mov	r0, r3
 80155c8:	f7fa fc92 	bl	800fef0 <lwip_htons>
 80155cc:	4603      	mov	r3, r0
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	f003 0302 	and.w	r3, r3, #2
 80155d4:	2b00      	cmp	r3, #0
 80155d6:	d005      	beq.n	80155e4 <tcp_receive+0x934>
                inseg.len -= 1;
 80155d8:	4b78      	ldr	r3, [pc, #480]	; (80157bc <tcp_receive+0xb0c>)
 80155da:	891b      	ldrh	r3, [r3, #8]
 80155dc:	3b01      	subs	r3, #1
 80155de:	b29a      	uxth	r2, r3
 80155e0:	4b76      	ldr	r3, [pc, #472]	; (80157bc <tcp_receive+0xb0c>)
 80155e2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80155e4:	4b75      	ldr	r3, [pc, #468]	; (80157bc <tcp_receive+0xb0c>)
 80155e6:	685b      	ldr	r3, [r3, #4]
 80155e8:	4a74      	ldr	r2, [pc, #464]	; (80157bc <tcp_receive+0xb0c>)
 80155ea:	8912      	ldrh	r2, [r2, #8]
 80155ec:	4611      	mov	r1, r2
 80155ee:	4618      	mov	r0, r3
 80155f0:	f7fb fea4 	bl	801133c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80155f4:	4b71      	ldr	r3, [pc, #452]	; (80157bc <tcp_receive+0xb0c>)
 80155f6:	891c      	ldrh	r4, [r3, #8]
 80155f8:	4b70      	ldr	r3, [pc, #448]	; (80157bc <tcp_receive+0xb0c>)
 80155fa:	68db      	ldr	r3, [r3, #12]
 80155fc:	899b      	ldrh	r3, [r3, #12]
 80155fe:	b29b      	uxth	r3, r3
 8015600:	4618      	mov	r0, r3
 8015602:	f7fa fc75 	bl	800fef0 <lwip_htons>
 8015606:	4603      	mov	r3, r0
 8015608:	b2db      	uxtb	r3, r3
 801560a:	f003 0303 	and.w	r3, r3, #3
 801560e:	2b00      	cmp	r3, #0
 8015610:	d001      	beq.n	8015616 <tcp_receive+0x966>
 8015612:	2301      	movs	r3, #1
 8015614:	e000      	b.n	8015618 <tcp_receive+0x968>
 8015616:	2300      	movs	r3, #0
 8015618:	4423      	add	r3, r4
 801561a:	b29a      	uxth	r2, r3
 801561c:	4b65      	ldr	r3, [pc, #404]	; (80157b4 <tcp_receive+0xb04>)
 801561e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015620:	4b64      	ldr	r3, [pc, #400]	; (80157b4 <tcp_receive+0xb04>)
 8015622:	881b      	ldrh	r3, [r3, #0]
 8015624:	461a      	mov	r2, r3
 8015626:	4b64      	ldr	r3, [pc, #400]	; (80157b8 <tcp_receive+0xb08>)
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	441a      	add	r2, r3
 801562c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801562e:	68db      	ldr	r3, [r3, #12]
 8015630:	685b      	ldr	r3, [r3, #4]
 8015632:	429a      	cmp	r2, r3
 8015634:	d006      	beq.n	8015644 <tcp_receive+0x994>
 8015636:	4b62      	ldr	r3, [pc, #392]	; (80157c0 <tcp_receive+0xb10>)
 8015638:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801563c:	4961      	ldr	r1, [pc, #388]	; (80157c4 <tcp_receive+0xb14>)
 801563e:	4862      	ldr	r0, [pc, #392]	; (80157c8 <tcp_receive+0xb18>)
 8015640:	f006 fb64 	bl	801bd0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015648:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801564a:	4b5a      	ldr	r3, [pc, #360]	; (80157b4 <tcp_receive+0xb04>)
 801564c:	881b      	ldrh	r3, [r3, #0]
 801564e:	461a      	mov	r2, r3
 8015650:	4b59      	ldr	r3, [pc, #356]	; (80157b8 <tcp_receive+0xb08>)
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	441a      	add	r2, r3
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801565e:	4b55      	ldr	r3, [pc, #340]	; (80157b4 <tcp_receive+0xb04>)
 8015660:	881b      	ldrh	r3, [r3, #0]
 8015662:	429a      	cmp	r2, r3
 8015664:	d206      	bcs.n	8015674 <tcp_receive+0x9c4>
 8015666:	4b56      	ldr	r3, [pc, #344]	; (80157c0 <tcp_receive+0xb10>)
 8015668:	f240 6207 	movw	r2, #1543	; 0x607
 801566c:	4957      	ldr	r1, [pc, #348]	; (80157cc <tcp_receive+0xb1c>)
 801566e:	4856      	ldr	r0, [pc, #344]	; (80157c8 <tcp_receive+0xb18>)
 8015670:	f006 fb4c 	bl	801bd0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015678:	4b4e      	ldr	r3, [pc, #312]	; (80157b4 <tcp_receive+0xb04>)
 801567a:	881b      	ldrh	r3, [r3, #0]
 801567c:	1ad3      	subs	r3, r2, r3
 801567e:	b29a      	uxth	r2, r3
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015684:	6878      	ldr	r0, [r7, #4]
 8015686:	f7fc feb5 	bl	80123f4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801568a:	4b4c      	ldr	r3, [pc, #304]	; (80157bc <tcp_receive+0xb0c>)
 801568c:	685b      	ldr	r3, [r3, #4]
 801568e:	891b      	ldrh	r3, [r3, #8]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d006      	beq.n	80156a2 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015694:	4b49      	ldr	r3, [pc, #292]	; (80157bc <tcp_receive+0xb0c>)
 8015696:	685b      	ldr	r3, [r3, #4]
 8015698:	4a4d      	ldr	r2, [pc, #308]	; (80157d0 <tcp_receive+0xb20>)
 801569a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801569c:	4b47      	ldr	r3, [pc, #284]	; (80157bc <tcp_receive+0xb0c>)
 801569e:	2200      	movs	r2, #0
 80156a0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80156a2:	4b46      	ldr	r3, [pc, #280]	; (80157bc <tcp_receive+0xb0c>)
 80156a4:	68db      	ldr	r3, [r3, #12]
 80156a6:	899b      	ldrh	r3, [r3, #12]
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	4618      	mov	r0, r3
 80156ac:	f7fa fc20 	bl	800fef0 <lwip_htons>
 80156b0:	4603      	mov	r3, r0
 80156b2:	b2db      	uxtb	r3, r3
 80156b4:	f003 0301 	and.w	r3, r3, #1
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	f000 80b8 	beq.w	801582e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80156be:	4b45      	ldr	r3, [pc, #276]	; (80157d4 <tcp_receive+0xb24>)
 80156c0:	781b      	ldrb	r3, [r3, #0]
 80156c2:	f043 0320 	orr.w	r3, r3, #32
 80156c6:	b2da      	uxtb	r2, r3
 80156c8:	4b42      	ldr	r3, [pc, #264]	; (80157d4 <tcp_receive+0xb24>)
 80156ca:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80156cc:	e0af      	b.n	801582e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156d2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156d8:	68db      	ldr	r3, [r3, #12]
 80156da:	685b      	ldr	r3, [r3, #4]
 80156dc:	4a36      	ldr	r2, [pc, #216]	; (80157b8 <tcp_receive+0xb08>)
 80156de:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	891b      	ldrh	r3, [r3, #8]
 80156e4:	461c      	mov	r4, r3
 80156e6:	68bb      	ldr	r3, [r7, #8]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	899b      	ldrh	r3, [r3, #12]
 80156ec:	b29b      	uxth	r3, r3
 80156ee:	4618      	mov	r0, r3
 80156f0:	f7fa fbfe 	bl	800fef0 <lwip_htons>
 80156f4:	4603      	mov	r3, r0
 80156f6:	b2db      	uxtb	r3, r3
 80156f8:	f003 0303 	and.w	r3, r3, #3
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d001      	beq.n	8015704 <tcp_receive+0xa54>
 8015700:	2301      	movs	r3, #1
 8015702:	e000      	b.n	8015706 <tcp_receive+0xa56>
 8015704:	2300      	movs	r3, #0
 8015706:	191a      	adds	r2, r3, r4
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801570c:	441a      	add	r2, r3
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015716:	461c      	mov	r4, r3
 8015718:	68bb      	ldr	r3, [r7, #8]
 801571a:	891b      	ldrh	r3, [r3, #8]
 801571c:	461d      	mov	r5, r3
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	68db      	ldr	r3, [r3, #12]
 8015722:	899b      	ldrh	r3, [r3, #12]
 8015724:	b29b      	uxth	r3, r3
 8015726:	4618      	mov	r0, r3
 8015728:	f7fa fbe2 	bl	800fef0 <lwip_htons>
 801572c:	4603      	mov	r3, r0
 801572e:	b2db      	uxtb	r3, r3
 8015730:	f003 0303 	and.w	r3, r3, #3
 8015734:	2b00      	cmp	r3, #0
 8015736:	d001      	beq.n	801573c <tcp_receive+0xa8c>
 8015738:	2301      	movs	r3, #1
 801573a:	e000      	b.n	801573e <tcp_receive+0xa8e>
 801573c:	2300      	movs	r3, #0
 801573e:	442b      	add	r3, r5
 8015740:	429c      	cmp	r4, r3
 8015742:	d206      	bcs.n	8015752 <tcp_receive+0xaa2>
 8015744:	4b1e      	ldr	r3, [pc, #120]	; (80157c0 <tcp_receive+0xb10>)
 8015746:	f240 622b 	movw	r2, #1579	; 0x62b
 801574a:	4923      	ldr	r1, [pc, #140]	; (80157d8 <tcp_receive+0xb28>)
 801574c:	481e      	ldr	r0, [pc, #120]	; (80157c8 <tcp_receive+0xb18>)
 801574e:	f006 fadd 	bl	801bd0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015752:	68bb      	ldr	r3, [r7, #8]
 8015754:	891b      	ldrh	r3, [r3, #8]
 8015756:	461c      	mov	r4, r3
 8015758:	68bb      	ldr	r3, [r7, #8]
 801575a:	68db      	ldr	r3, [r3, #12]
 801575c:	899b      	ldrh	r3, [r3, #12]
 801575e:	b29b      	uxth	r3, r3
 8015760:	4618      	mov	r0, r3
 8015762:	f7fa fbc5 	bl	800fef0 <lwip_htons>
 8015766:	4603      	mov	r3, r0
 8015768:	b2db      	uxtb	r3, r3
 801576a:	f003 0303 	and.w	r3, r3, #3
 801576e:	2b00      	cmp	r3, #0
 8015770:	d001      	beq.n	8015776 <tcp_receive+0xac6>
 8015772:	2301      	movs	r3, #1
 8015774:	e000      	b.n	8015778 <tcp_receive+0xac8>
 8015776:	2300      	movs	r3, #0
 8015778:	1919      	adds	r1, r3, r4
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801577e:	b28b      	uxth	r3, r1
 8015780:	1ad3      	subs	r3, r2, r3
 8015782:	b29a      	uxth	r2, r3
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015788:	6878      	ldr	r0, [r7, #4]
 801578a:	f7fc fe33 	bl	80123f4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	685b      	ldr	r3, [r3, #4]
 8015792:	891b      	ldrh	r3, [r3, #8]
 8015794:	2b00      	cmp	r3, #0
 8015796:	d028      	beq.n	80157ea <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015798:	4b0d      	ldr	r3, [pc, #52]	; (80157d0 <tcp_receive+0xb20>)
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d01d      	beq.n	80157dc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80157a0:	4b0b      	ldr	r3, [pc, #44]	; (80157d0 <tcp_receive+0xb20>)
 80157a2:	681a      	ldr	r2, [r3, #0]
 80157a4:	68bb      	ldr	r3, [r7, #8]
 80157a6:	685b      	ldr	r3, [r3, #4]
 80157a8:	4619      	mov	r1, r3
 80157aa:	4610      	mov	r0, r2
 80157ac:	f7fc f84c 	bl	8011848 <pbuf_cat>
 80157b0:	e018      	b.n	80157e4 <tcp_receive+0xb34>
 80157b2:	bf00      	nop
 80157b4:	2000481e 	.word	0x2000481e
 80157b8:	20004814 	.word	0x20004814
 80157bc:	200047f4 	.word	0x200047f4
 80157c0:	080203c8 	.word	0x080203c8
 80157c4:	080207a8 	.word	0x080207a8
 80157c8:	08020414 	.word	0x08020414
 80157cc:	080207e4 	.word	0x080207e4
 80157d0:	20004824 	.word	0x20004824
 80157d4:	20004821 	.word	0x20004821
 80157d8:	08020804 	.word	0x08020804
            } else {
              recv_data = cseg->p;
 80157dc:	68bb      	ldr	r3, [r7, #8]
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	4a70      	ldr	r2, [pc, #448]	; (80159a4 <tcp_receive+0xcf4>)
 80157e2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80157e4:	68bb      	ldr	r3, [r7, #8]
 80157e6:	2200      	movs	r2, #0
 80157e8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80157ea:	68bb      	ldr	r3, [r7, #8]
 80157ec:	68db      	ldr	r3, [r3, #12]
 80157ee:	899b      	ldrh	r3, [r3, #12]
 80157f0:	b29b      	uxth	r3, r3
 80157f2:	4618      	mov	r0, r3
 80157f4:	f7fa fb7c 	bl	800fef0 <lwip_htons>
 80157f8:	4603      	mov	r3, r0
 80157fa:	b2db      	uxtb	r3, r3
 80157fc:	f003 0301 	and.w	r3, r3, #1
 8015800:	2b00      	cmp	r3, #0
 8015802:	d00d      	beq.n	8015820 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8015804:	4b68      	ldr	r3, [pc, #416]	; (80159a8 <tcp_receive+0xcf8>)
 8015806:	781b      	ldrb	r3, [r3, #0]
 8015808:	f043 0320 	orr.w	r3, r3, #32
 801580c:	b2da      	uxtb	r2, r3
 801580e:	4b66      	ldr	r3, [pc, #408]	; (80159a8 <tcp_receive+0xcf8>)
 8015810:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	7d1b      	ldrb	r3, [r3, #20]
 8015816:	2b04      	cmp	r3, #4
 8015818:	d102      	bne.n	8015820 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	2207      	movs	r2, #7
 801581e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015820:	68bb      	ldr	r3, [r7, #8]
 8015822:	681a      	ldr	r2, [r3, #0]
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8015828:	68b8      	ldr	r0, [r7, #8]
 801582a:	f7fd fb08 	bl	8012e3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015832:	2b00      	cmp	r3, #0
 8015834:	d008      	beq.n	8015848 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015836:	687b      	ldr	r3, [r7, #4]
 8015838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801583a:	68db      	ldr	r3, [r3, #12]
 801583c:	685a      	ldr	r2, [r3, #4]
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015842:	429a      	cmp	r2, r3
 8015844:	f43f af43 	beq.w	80156ce <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	8b5b      	ldrh	r3, [r3, #26]
 801584c:	f003 0301 	and.w	r3, r3, #1
 8015850:	2b00      	cmp	r3, #0
 8015852:	d00e      	beq.n	8015872 <tcp_receive+0xbc2>
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	8b5b      	ldrh	r3, [r3, #26]
 8015858:	f023 0301 	bic.w	r3, r3, #1
 801585c:	b29a      	uxth	r2, r3
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	835a      	strh	r2, [r3, #26]
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	8b5b      	ldrh	r3, [r3, #26]
 8015866:	f043 0302 	orr.w	r3, r3, #2
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015870:	e188      	b.n	8015b84 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	8b5b      	ldrh	r3, [r3, #26]
 8015876:	f043 0301 	orr.w	r3, r3, #1
 801587a:	b29a      	uxth	r2, r3
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015880:	e180      	b.n	8015b84 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015886:	2b00      	cmp	r3, #0
 8015888:	d106      	bne.n	8015898 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801588a:	4848      	ldr	r0, [pc, #288]	; (80159ac <tcp_receive+0xcfc>)
 801588c:	f7fd faf0 	bl	8012e70 <tcp_seg_copy>
 8015890:	4602      	mov	r2, r0
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	675a      	str	r2, [r3, #116]	; 0x74
 8015896:	e16d      	b.n	8015b74 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015898:	2300      	movs	r3, #0
 801589a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80158a2:	e157      	b.n	8015b54 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80158a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158a6:	68db      	ldr	r3, [r3, #12]
 80158a8:	685a      	ldr	r2, [r3, #4]
 80158aa:	4b41      	ldr	r3, [pc, #260]	; (80159b0 <tcp_receive+0xd00>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d11d      	bne.n	80158ee <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80158b2:	4b3e      	ldr	r3, [pc, #248]	; (80159ac <tcp_receive+0xcfc>)
 80158b4:	891a      	ldrh	r2, [r3, #8]
 80158b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158b8:	891b      	ldrh	r3, [r3, #8]
 80158ba:	429a      	cmp	r2, r3
 80158bc:	f240 814f 	bls.w	8015b5e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158c0:	483a      	ldr	r0, [pc, #232]	; (80159ac <tcp_receive+0xcfc>)
 80158c2:	f7fd fad5 	bl	8012e70 <tcp_seg_copy>
 80158c6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	f000 8149 	beq.w	8015b62 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80158d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d003      	beq.n	80158de <tcp_receive+0xc2e>
                    prev->next = cseg;
 80158d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158d8:	697a      	ldr	r2, [r7, #20]
 80158da:	601a      	str	r2, [r3, #0]
 80158dc:	e002      	b.n	80158e4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	697a      	ldr	r2, [r7, #20]
 80158e2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80158e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158e6:	6978      	ldr	r0, [r7, #20]
 80158e8:	f7ff f8de 	bl	8014aa8 <tcp_oos_insert_segment>
                }
                break;
 80158ec:	e139      	b.n	8015b62 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80158ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d117      	bne.n	8015924 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80158f4:	4b2e      	ldr	r3, [pc, #184]	; (80159b0 <tcp_receive+0xd00>)
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	1ad3      	subs	r3, r2, r3
 8015900:	2b00      	cmp	r3, #0
 8015902:	da57      	bge.n	80159b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015904:	4829      	ldr	r0, [pc, #164]	; (80159ac <tcp_receive+0xcfc>)
 8015906:	f7fd fab3 	bl	8012e70 <tcp_seg_copy>
 801590a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801590c:	69bb      	ldr	r3, [r7, #24]
 801590e:	2b00      	cmp	r3, #0
 8015910:	f000 8129 	beq.w	8015b66 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8015914:	687b      	ldr	r3, [r7, #4]
 8015916:	69ba      	ldr	r2, [r7, #24]
 8015918:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801591a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801591c:	69b8      	ldr	r0, [r7, #24]
 801591e:	f7ff f8c3 	bl	8014aa8 <tcp_oos_insert_segment>
                  }
                  break;
 8015922:	e120      	b.n	8015b66 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8015924:	4b22      	ldr	r3, [pc, #136]	; (80159b0 <tcp_receive+0xd00>)
 8015926:	681a      	ldr	r2, [r3, #0]
 8015928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	3b01      	subs	r3, #1
 8015932:	2b00      	cmp	r3, #0
 8015934:	db3e      	blt.n	80159b4 <tcp_receive+0xd04>
 8015936:	4b1e      	ldr	r3, [pc, #120]	; (80159b0 <tcp_receive+0xd00>)
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	685b      	ldr	r3, [r3, #4]
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	3301      	adds	r3, #1
 8015944:	2b00      	cmp	r3, #0
 8015946:	dc35      	bgt.n	80159b4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015948:	4818      	ldr	r0, [pc, #96]	; (80159ac <tcp_receive+0xcfc>)
 801594a:	f7fd fa91 	bl	8012e70 <tcp_seg_copy>
 801594e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015950:	69fb      	ldr	r3, [r7, #28]
 8015952:	2b00      	cmp	r3, #0
 8015954:	f000 8109 	beq.w	8015b6a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801595a:	68db      	ldr	r3, [r3, #12]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015960:	8912      	ldrh	r2, [r2, #8]
 8015962:	441a      	add	r2, r3
 8015964:	4b12      	ldr	r3, [pc, #72]	; (80159b0 <tcp_receive+0xd00>)
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	1ad3      	subs	r3, r2, r3
 801596a:	2b00      	cmp	r3, #0
 801596c:	dd12      	ble.n	8015994 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801596e:	4b10      	ldr	r3, [pc, #64]	; (80159b0 <tcp_receive+0xd00>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	b29a      	uxth	r2, r3
 8015974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015976:	68db      	ldr	r3, [r3, #12]
 8015978:	685b      	ldr	r3, [r3, #4]
 801597a:	b29b      	uxth	r3, r3
 801597c:	1ad3      	subs	r3, r2, r3
 801597e:	b29a      	uxth	r2, r3
 8015980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015982:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015986:	685a      	ldr	r2, [r3, #4]
 8015988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801598a:	891b      	ldrh	r3, [r3, #8]
 801598c:	4619      	mov	r1, r3
 801598e:	4610      	mov	r0, r2
 8015990:	f7fb fcd4 	bl	801133c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015996:	69fa      	ldr	r2, [r7, #28]
 8015998:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801599a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801599c:	69f8      	ldr	r0, [r7, #28]
 801599e:	f7ff f883 	bl	8014aa8 <tcp_oos_insert_segment>
                  }
                  break;
 80159a2:	e0e2      	b.n	8015b6a <tcp_receive+0xeba>
 80159a4:	20004824 	.word	0x20004824
 80159a8:	20004821 	.word	0x20004821
 80159ac:	200047f4 	.word	0x200047f4
 80159b0:	20004814 	.word	0x20004814
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80159b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159b6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80159b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f040 80c6 	bne.w	8015b4e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80159c2:	4b80      	ldr	r3, [pc, #512]	; (8015bc4 <tcp_receive+0xf14>)
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	68db      	ldr	r3, [r3, #12]
 80159ca:	685b      	ldr	r3, [r3, #4]
 80159cc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	f340 80bd 	ble.w	8015b4e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80159d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d6:	68db      	ldr	r3, [r3, #12]
 80159d8:	899b      	ldrh	r3, [r3, #12]
 80159da:	b29b      	uxth	r3, r3
 80159dc:	4618      	mov	r0, r3
 80159de:	f7fa fa87 	bl	800fef0 <lwip_htons>
 80159e2:	4603      	mov	r3, r0
 80159e4:	b2db      	uxtb	r3, r3
 80159e6:	f003 0301 	and.w	r3, r3, #1
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	f040 80bf 	bne.w	8015b6e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80159f0:	4875      	ldr	r0, [pc, #468]	; (8015bc8 <tcp_receive+0xf18>)
 80159f2:	f7fd fa3d 	bl	8012e70 <tcp_seg_copy>
 80159f6:	4602      	mov	r2, r0
 80159f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fa:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80159fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	f000 80b6 	beq.w	8015b72 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8015a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a08:	68db      	ldr	r3, [r3, #12]
 8015a0a:	685b      	ldr	r3, [r3, #4]
 8015a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015a0e:	8912      	ldrh	r2, [r2, #8]
 8015a10:	441a      	add	r2, r3
 8015a12:	4b6c      	ldr	r3, [pc, #432]	; (8015bc4 <tcp_receive+0xf14>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	1ad3      	subs	r3, r2, r3
 8015a18:	2b00      	cmp	r3, #0
 8015a1a:	dd12      	ble.n	8015a42 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015a1c:	4b69      	ldr	r3, [pc, #420]	; (8015bc4 <tcp_receive+0xf14>)
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	b29a      	uxth	r2, r3
 8015a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a24:	68db      	ldr	r3, [r3, #12]
 8015a26:	685b      	ldr	r3, [r3, #4]
 8015a28:	b29b      	uxth	r3, r3
 8015a2a:	1ad3      	subs	r3, r2, r3
 8015a2c:	b29a      	uxth	r2, r3
 8015a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a30:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a34:	685a      	ldr	r2, [r3, #4]
 8015a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a38:	891b      	ldrh	r3, [r3, #8]
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	4610      	mov	r0, r2
 8015a3e:	f7fb fc7d 	bl	801133c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015a42:	4b62      	ldr	r3, [pc, #392]	; (8015bcc <tcp_receive+0xf1c>)
 8015a44:	881b      	ldrh	r3, [r3, #0]
 8015a46:	461a      	mov	r2, r3
 8015a48:	4b5e      	ldr	r3, [pc, #376]	; (8015bc4 <tcp_receive+0xf14>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	441a      	add	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a52:	6879      	ldr	r1, [r7, #4]
 8015a54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a56:	440b      	add	r3, r1
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f340 8089 	ble.w	8015b72 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	68db      	ldr	r3, [r3, #12]
 8015a66:	899b      	ldrh	r3, [r3, #12]
 8015a68:	b29b      	uxth	r3, r3
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fa fa40 	bl	800fef0 <lwip_htons>
 8015a70:	4603      	mov	r3, r0
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 0301 	and.w	r3, r3, #1
 8015a78:	2b00      	cmp	r3, #0
 8015a7a:	d022      	beq.n	8015ac2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	68db      	ldr	r3, [r3, #12]
 8015a82:	899b      	ldrh	r3, [r3, #12]
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	b21b      	sxth	r3, r3
 8015a88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a8c:	b21c      	sxth	r4, r3
 8015a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a90:	681b      	ldr	r3, [r3, #0]
 8015a92:	68db      	ldr	r3, [r3, #12]
 8015a94:	899b      	ldrh	r3, [r3, #12]
 8015a96:	b29b      	uxth	r3, r3
 8015a98:	4618      	mov	r0, r3
 8015a9a:	f7fa fa29 	bl	800fef0 <lwip_htons>
 8015a9e:	4603      	mov	r3, r0
 8015aa0:	b2db      	uxtb	r3, r3
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015aa8:	b29b      	uxth	r3, r3
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7fa fa20 	bl	800fef0 <lwip_htons>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	b21b      	sxth	r3, r3
 8015ab4:	4323      	orrs	r3, r4
 8015ab6:	b21a      	sxth	r2, r3
 8015ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	b292      	uxth	r2, r2
 8015ac0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac6:	b29a      	uxth	r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015acc:	4413      	add	r3, r2
 8015ace:	b299      	uxth	r1, r3
 8015ad0:	4b3c      	ldr	r3, [pc, #240]	; (8015bc4 <tcp_receive+0xf14>)
 8015ad2:	681b      	ldr	r3, [r3, #0]
 8015ad4:	b29a      	uxth	r2, r3
 8015ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	1a8a      	subs	r2, r1, r2
 8015adc:	b292      	uxth	r2, r2
 8015ade:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	685a      	ldr	r2, [r3, #4]
 8015ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	891b      	ldrh	r3, [r3, #8]
 8015aec:	4619      	mov	r1, r3
 8015aee:	4610      	mov	r0, r2
 8015af0:	f7fb fc24 	bl	801133c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	891c      	ldrh	r4, [r3, #8]
 8015afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	68db      	ldr	r3, [r3, #12]
 8015b00:	899b      	ldrh	r3, [r3, #12]
 8015b02:	b29b      	uxth	r3, r3
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7fa f9f3 	bl	800fef0 <lwip_htons>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	b2db      	uxtb	r3, r3
 8015b0e:	f003 0303 	and.w	r3, r3, #3
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d001      	beq.n	8015b1a <tcp_receive+0xe6a>
 8015b16:	2301      	movs	r3, #1
 8015b18:	e000      	b.n	8015b1c <tcp_receive+0xe6c>
 8015b1a:	2300      	movs	r3, #0
 8015b1c:	4423      	add	r3, r4
 8015b1e:	b29a      	uxth	r2, r3
 8015b20:	4b2a      	ldr	r3, [pc, #168]	; (8015bcc <tcp_receive+0xf1c>)
 8015b22:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015b24:	4b29      	ldr	r3, [pc, #164]	; (8015bcc <tcp_receive+0xf1c>)
 8015b26:	881b      	ldrh	r3, [r3, #0]
 8015b28:	461a      	mov	r2, r3
 8015b2a:	4b26      	ldr	r3, [pc, #152]	; (8015bc4 <tcp_receive+0xf14>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	441a      	add	r2, r3
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b38:	440b      	add	r3, r1
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d019      	beq.n	8015b72 <tcp_receive+0xec2>
 8015b3e:	4b24      	ldr	r3, [pc, #144]	; (8015bd0 <tcp_receive+0xf20>)
 8015b40:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015b44:	4923      	ldr	r1, [pc, #140]	; (8015bd4 <tcp_receive+0xf24>)
 8015b46:	4824      	ldr	r0, [pc, #144]	; (8015bd8 <tcp_receive+0xf28>)
 8015b48:	f006 f8e0 	bl	801bd0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015b4c:	e011      	b.n	8015b72 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	f47f aea4 	bne.w	80158a4 <tcp_receive+0xbf4>
 8015b5c:	e00a      	b.n	8015b74 <tcp_receive+0xec4>
                break;
 8015b5e:	bf00      	nop
 8015b60:	e008      	b.n	8015b74 <tcp_receive+0xec4>
                break;
 8015b62:	bf00      	nop
 8015b64:	e006      	b.n	8015b74 <tcp_receive+0xec4>
                  break;
 8015b66:	bf00      	nop
 8015b68:	e004      	b.n	8015b74 <tcp_receive+0xec4>
                  break;
 8015b6a:	bf00      	nop
 8015b6c:	e002      	b.n	8015b74 <tcp_receive+0xec4>
                  break;
 8015b6e:	bf00      	nop
 8015b70:	e000      	b.n	8015b74 <tcp_receive+0xec4>
                break;
 8015b72:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015b74:	6878      	ldr	r0, [r7, #4]
 8015b76:	f001 fe8b 	bl	8017890 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015b7a:	e003      	b.n	8015b84 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f001 fe87 	bl	8017890 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b82:	e01a      	b.n	8015bba <tcp_receive+0xf0a>
 8015b84:	e019      	b.n	8015bba <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b86:	4b0f      	ldr	r3, [pc, #60]	; (8015bc4 <tcp_receive+0xf14>)
 8015b88:	681a      	ldr	r2, [r3, #0]
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b8e:	1ad3      	subs	r3, r2, r3
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	db0a      	blt.n	8015baa <tcp_receive+0xefa>
 8015b94:	4b0b      	ldr	r3, [pc, #44]	; (8015bc4 <tcp_receive+0xf14>)
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b9c:	6879      	ldr	r1, [r7, #4]
 8015b9e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ba0:	440b      	add	r3, r1
 8015ba2:	1ad3      	subs	r3, r2, r3
 8015ba4:	3301      	adds	r3, #1
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	dd07      	ble.n	8015bba <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	8b5b      	ldrh	r3, [r3, #26]
 8015bae:	f043 0302 	orr.w	r3, r3, #2
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015bb8:	e7ff      	b.n	8015bba <tcp_receive+0xf0a>
 8015bba:	bf00      	nop
 8015bbc:	3750      	adds	r7, #80	; 0x50
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8015bc2:	bf00      	nop
 8015bc4:	20004814 	.word	0x20004814
 8015bc8:	200047f4 	.word	0x200047f4
 8015bcc:	2000481e 	.word	0x2000481e
 8015bd0:	080203c8 	.word	0x080203c8
 8015bd4:	08020770 	.word	0x08020770
 8015bd8:	08020414 	.word	0x08020414

08015bdc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015bdc:	b480      	push	{r7}
 8015bde:	b083      	sub	sp, #12
 8015be0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015be2:	4b15      	ldr	r3, [pc, #84]	; (8015c38 <tcp_get_next_optbyte+0x5c>)
 8015be4:	881b      	ldrh	r3, [r3, #0]
 8015be6:	1c5a      	adds	r2, r3, #1
 8015be8:	b291      	uxth	r1, r2
 8015bea:	4a13      	ldr	r2, [pc, #76]	; (8015c38 <tcp_get_next_optbyte+0x5c>)
 8015bec:	8011      	strh	r1, [r2, #0]
 8015bee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015bf0:	4b12      	ldr	r3, [pc, #72]	; (8015c3c <tcp_get_next_optbyte+0x60>)
 8015bf2:	681b      	ldr	r3, [r3, #0]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d004      	beq.n	8015c02 <tcp_get_next_optbyte+0x26>
 8015bf8:	4b11      	ldr	r3, [pc, #68]	; (8015c40 <tcp_get_next_optbyte+0x64>)
 8015bfa:	881b      	ldrh	r3, [r3, #0]
 8015bfc:	88fa      	ldrh	r2, [r7, #6]
 8015bfe:	429a      	cmp	r2, r3
 8015c00:	d208      	bcs.n	8015c14 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015c02:	4b10      	ldr	r3, [pc, #64]	; (8015c44 <tcp_get_next_optbyte+0x68>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	3314      	adds	r3, #20
 8015c08:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015c0a:	88fb      	ldrh	r3, [r7, #6]
 8015c0c:	683a      	ldr	r2, [r7, #0]
 8015c0e:	4413      	add	r3, r2
 8015c10:	781b      	ldrb	r3, [r3, #0]
 8015c12:	e00b      	b.n	8015c2c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015c14:	88fb      	ldrh	r3, [r7, #6]
 8015c16:	b2da      	uxtb	r2, r3
 8015c18:	4b09      	ldr	r3, [pc, #36]	; (8015c40 <tcp_get_next_optbyte+0x64>)
 8015c1a:	881b      	ldrh	r3, [r3, #0]
 8015c1c:	b2db      	uxtb	r3, r3
 8015c1e:	1ad3      	subs	r3, r2, r3
 8015c20:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015c22:	4b06      	ldr	r3, [pc, #24]	; (8015c3c <tcp_get_next_optbyte+0x60>)
 8015c24:	681a      	ldr	r2, [r3, #0]
 8015c26:	797b      	ldrb	r3, [r7, #5]
 8015c28:	4413      	add	r3, r2
 8015c2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015c2c:	4618      	mov	r0, r3
 8015c2e:	370c      	adds	r7, #12
 8015c30:	46bd      	mov	sp, r7
 8015c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c36:	4770      	bx	lr
 8015c38:	20004810 	.word	0x20004810
 8015c3c:	2000480c 	.word	0x2000480c
 8015c40:	2000480a 	.word	0x2000480a
 8015c44:	20004804 	.word	0x20004804

08015c48 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b084      	sub	sp, #16
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d106      	bne.n	8015c64 <tcp_parseopt+0x1c>
 8015c56:	4b32      	ldr	r3, [pc, #200]	; (8015d20 <tcp_parseopt+0xd8>)
 8015c58:	f240 727d 	movw	r2, #1917	; 0x77d
 8015c5c:	4931      	ldr	r1, [pc, #196]	; (8015d24 <tcp_parseopt+0xdc>)
 8015c5e:	4832      	ldr	r0, [pc, #200]	; (8015d28 <tcp_parseopt+0xe0>)
 8015c60:	f006 f854 	bl	801bd0c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015c64:	4b31      	ldr	r3, [pc, #196]	; (8015d2c <tcp_parseopt+0xe4>)
 8015c66:	881b      	ldrh	r3, [r3, #0]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d055      	beq.n	8015d18 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c6c:	4b30      	ldr	r3, [pc, #192]	; (8015d30 <tcp_parseopt+0xe8>)
 8015c6e:	2200      	movs	r2, #0
 8015c70:	801a      	strh	r2, [r3, #0]
 8015c72:	e045      	b.n	8015d00 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015c74:	f7ff ffb2 	bl	8015bdc <tcp_get_next_optbyte>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015c7c:	7bfb      	ldrb	r3, [r7, #15]
 8015c7e:	2b02      	cmp	r3, #2
 8015c80:	d006      	beq.n	8015c90 <tcp_parseopt+0x48>
 8015c82:	2b02      	cmp	r3, #2
 8015c84:	dc2b      	bgt.n	8015cde <tcp_parseopt+0x96>
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d041      	beq.n	8015d0e <tcp_parseopt+0xc6>
 8015c8a:	2b01      	cmp	r3, #1
 8015c8c:	d127      	bne.n	8015cde <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015c8e:	e037      	b.n	8015d00 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c90:	f7ff ffa4 	bl	8015bdc <tcp_get_next_optbyte>
 8015c94:	4603      	mov	r3, r0
 8015c96:	2b04      	cmp	r3, #4
 8015c98:	d13b      	bne.n	8015d12 <tcp_parseopt+0xca>
 8015c9a:	4b25      	ldr	r3, [pc, #148]	; (8015d30 <tcp_parseopt+0xe8>)
 8015c9c:	881b      	ldrh	r3, [r3, #0]
 8015c9e:	3301      	adds	r3, #1
 8015ca0:	4a22      	ldr	r2, [pc, #136]	; (8015d2c <tcp_parseopt+0xe4>)
 8015ca2:	8812      	ldrh	r2, [r2, #0]
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	da34      	bge.n	8015d12 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015ca8:	f7ff ff98 	bl	8015bdc <tcp_get_next_optbyte>
 8015cac:	4603      	mov	r3, r0
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	021b      	lsls	r3, r3, #8
 8015cb2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015cb4:	f7ff ff92 	bl	8015bdc <tcp_get_next_optbyte>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	b29a      	uxth	r2, r3
 8015cbc:	89bb      	ldrh	r3, [r7, #12]
 8015cbe:	4313      	orrs	r3, r2
 8015cc0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015cc2:	89bb      	ldrh	r3, [r7, #12]
 8015cc4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015cc8:	d804      	bhi.n	8015cd4 <tcp_parseopt+0x8c>
 8015cca:	89bb      	ldrh	r3, [r7, #12]
 8015ccc:	2b00      	cmp	r3, #0
 8015cce:	d001      	beq.n	8015cd4 <tcp_parseopt+0x8c>
 8015cd0:	89ba      	ldrh	r2, [r7, #12]
 8015cd2:	e001      	b.n	8015cd8 <tcp_parseopt+0x90>
 8015cd4:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015cdc:	e010      	b.n	8015d00 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015cde:	f7ff ff7d 	bl	8015bdc <tcp_get_next_optbyte>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015ce6:	7afb      	ldrb	r3, [r7, #11]
 8015ce8:	2b01      	cmp	r3, #1
 8015cea:	d914      	bls.n	8015d16 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015cec:	7afb      	ldrb	r3, [r7, #11]
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	4b0f      	ldr	r3, [pc, #60]	; (8015d30 <tcp_parseopt+0xe8>)
 8015cf2:	881b      	ldrh	r3, [r3, #0]
 8015cf4:	4413      	add	r3, r2
 8015cf6:	b29b      	uxth	r3, r3
 8015cf8:	3b02      	subs	r3, #2
 8015cfa:	b29a      	uxth	r2, r3
 8015cfc:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <tcp_parseopt+0xe8>)
 8015cfe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015d00:	4b0b      	ldr	r3, [pc, #44]	; (8015d30 <tcp_parseopt+0xe8>)
 8015d02:	881a      	ldrh	r2, [r3, #0]
 8015d04:	4b09      	ldr	r3, [pc, #36]	; (8015d2c <tcp_parseopt+0xe4>)
 8015d06:	881b      	ldrh	r3, [r3, #0]
 8015d08:	429a      	cmp	r2, r3
 8015d0a:	d3b3      	bcc.n	8015c74 <tcp_parseopt+0x2c>
 8015d0c:	e004      	b.n	8015d18 <tcp_parseopt+0xd0>
          return;
 8015d0e:	bf00      	nop
 8015d10:	e002      	b.n	8015d18 <tcp_parseopt+0xd0>
            return;
 8015d12:	bf00      	nop
 8015d14:	e000      	b.n	8015d18 <tcp_parseopt+0xd0>
            return;
 8015d16:	bf00      	nop
      }
    }
  }
}
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	080203c8 	.word	0x080203c8
 8015d24:	0802082c 	.word	0x0802082c
 8015d28:	08020414 	.word	0x08020414
 8015d2c:	20004808 	.word	0x20004808
 8015d30:	20004810 	.word	0x20004810

08015d34 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015d34:	b480      	push	{r7}
 8015d36:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015d38:	4b05      	ldr	r3, [pc, #20]	; (8015d50 <tcp_trigger_input_pcb_close+0x1c>)
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	f043 0310 	orr.w	r3, r3, #16
 8015d40:	b2da      	uxtb	r2, r3
 8015d42:	4b03      	ldr	r3, [pc, #12]	; (8015d50 <tcp_trigger_input_pcb_close+0x1c>)
 8015d44:	701a      	strb	r2, [r3, #0]
}
 8015d46:	bf00      	nop
 8015d48:	46bd      	mov	sp, r7
 8015d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d4e:	4770      	bx	lr
 8015d50:	20004821 	.word	0x20004821

08015d54 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b084      	sub	sp, #16
 8015d58:	af00      	add	r7, sp, #0
 8015d5a:	60f8      	str	r0, [r7, #12]
 8015d5c:	60b9      	str	r1, [r7, #8]
 8015d5e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	2b00      	cmp	r3, #0
 8015d64:	d00a      	beq.n	8015d7c <tcp_route+0x28>
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	7a1b      	ldrb	r3, [r3, #8]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d006      	beq.n	8015d7c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	7a1b      	ldrb	r3, [r3, #8]
 8015d72:	4618      	mov	r0, r3
 8015d74:	f7fb f8da 	bl	8010f2c <netif_get_by_index>
 8015d78:	4603      	mov	r3, r0
 8015d7a:	e003      	b.n	8015d84 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015d7c:	6878      	ldr	r0, [r7, #4]
 8015d7e:	f003 fe35 	bl	80199ec <ip4_route>
 8015d82:	4603      	mov	r3, r0
  }
}
 8015d84:	4618      	mov	r0, r3
 8015d86:	3710      	adds	r7, #16
 8015d88:	46bd      	mov	sp, r7
 8015d8a:	bd80      	pop	{r7, pc}

08015d8c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d8c:	b590      	push	{r4, r7, lr}
 8015d8e:	b087      	sub	sp, #28
 8015d90:	af00      	add	r7, sp, #0
 8015d92:	60f8      	str	r0, [r7, #12]
 8015d94:	60b9      	str	r1, [r7, #8]
 8015d96:	603b      	str	r3, [r7, #0]
 8015d98:	4613      	mov	r3, r2
 8015d9a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d105      	bne.n	8015dae <tcp_create_segment+0x22>
 8015da2:	4b44      	ldr	r3, [pc, #272]	; (8015eb4 <tcp_create_segment+0x128>)
 8015da4:	22a3      	movs	r2, #163	; 0xa3
 8015da6:	4944      	ldr	r1, [pc, #272]	; (8015eb8 <tcp_create_segment+0x12c>)
 8015da8:	4844      	ldr	r0, [pc, #272]	; (8015ebc <tcp_create_segment+0x130>)
 8015daa:	f005 ffaf 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015dae:	68bb      	ldr	r3, [r7, #8]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d105      	bne.n	8015dc0 <tcp_create_segment+0x34>
 8015db4:	4b3f      	ldr	r3, [pc, #252]	; (8015eb4 <tcp_create_segment+0x128>)
 8015db6:	22a4      	movs	r2, #164	; 0xa4
 8015db8:	4941      	ldr	r1, [pc, #260]	; (8015ec0 <tcp_create_segment+0x134>)
 8015dba:	4840      	ldr	r0, [pc, #256]	; (8015ebc <tcp_create_segment+0x130>)
 8015dbc:	f005 ffa6 	bl	801bd0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015dc0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	f003 0304 	and.w	r3, r3, #4
 8015dcc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015dce:	2003      	movs	r0, #3
 8015dd0:	f7fa fd44 	bl	801085c <memp_malloc>
 8015dd4:	6138      	str	r0, [r7, #16]
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d104      	bne.n	8015de6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015ddc:	68b8      	ldr	r0, [r7, #8]
 8015dde:	f7fb fc65 	bl	80116ac <pbuf_free>
    return NULL;
 8015de2:	2300      	movs	r3, #0
 8015de4:	e061      	b.n	8015eaa <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015de6:	693b      	ldr	r3, [r7, #16]
 8015de8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015dec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	2200      	movs	r2, #0
 8015df2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015df4:	693b      	ldr	r3, [r7, #16]
 8015df6:	68ba      	ldr	r2, [r7, #8]
 8015df8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	891a      	ldrh	r2, [r3, #8]
 8015dfe:	7dfb      	ldrb	r3, [r7, #23]
 8015e00:	b29b      	uxth	r3, r3
 8015e02:	429a      	cmp	r2, r3
 8015e04:	d205      	bcs.n	8015e12 <tcp_create_segment+0x86>
 8015e06:	4b2b      	ldr	r3, [pc, #172]	; (8015eb4 <tcp_create_segment+0x128>)
 8015e08:	22b0      	movs	r2, #176	; 0xb0
 8015e0a:	492e      	ldr	r1, [pc, #184]	; (8015ec4 <tcp_create_segment+0x138>)
 8015e0c:	482b      	ldr	r0, [pc, #172]	; (8015ebc <tcp_create_segment+0x130>)
 8015e0e:	f005 ff7d 	bl	801bd0c <iprintf>
  seg->len = p->tot_len - optlen;
 8015e12:	68bb      	ldr	r3, [r7, #8]
 8015e14:	891a      	ldrh	r2, [r3, #8]
 8015e16:	7dfb      	ldrb	r3, [r7, #23]
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	1ad3      	subs	r3, r2, r3
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	693b      	ldr	r3, [r7, #16]
 8015e20:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015e22:	2114      	movs	r1, #20
 8015e24:	68b8      	ldr	r0, [r7, #8]
 8015e26:	f7fb fb79 	bl	801151c <pbuf_add_header>
 8015e2a:	4603      	mov	r3, r0
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d004      	beq.n	8015e3a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015e30:	6938      	ldr	r0, [r7, #16]
 8015e32:	f7fd f804 	bl	8012e3e <tcp_seg_free>
    return NULL;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e037      	b.n	8015eaa <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	685b      	ldr	r3, [r3, #4]
 8015e3e:	685a      	ldr	r2, [r3, #4]
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	8ada      	ldrh	r2, [r3, #22]
 8015e48:	693b      	ldr	r3, [r7, #16]
 8015e4a:	68dc      	ldr	r4, [r3, #12]
 8015e4c:	4610      	mov	r0, r2
 8015e4e:	f7fa f84f 	bl	800fef0 <lwip_htons>
 8015e52:	4603      	mov	r3, r0
 8015e54:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015e56:	68fb      	ldr	r3, [r7, #12]
 8015e58:	8b1a      	ldrh	r2, [r3, #24]
 8015e5a:	693b      	ldr	r3, [r7, #16]
 8015e5c:	68dc      	ldr	r4, [r3, #12]
 8015e5e:	4610      	mov	r0, r2
 8015e60:	f7fa f846 	bl	800fef0 <lwip_htons>
 8015e64:	4603      	mov	r3, r0
 8015e66:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015e68:	693b      	ldr	r3, [r7, #16]
 8015e6a:	68dc      	ldr	r4, [r3, #12]
 8015e6c:	6838      	ldr	r0, [r7, #0]
 8015e6e:	f7fa f854 	bl	800ff1a <lwip_htonl>
 8015e72:	4603      	mov	r3, r0
 8015e74:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015e76:	7dfb      	ldrb	r3, [r7, #23]
 8015e78:	089b      	lsrs	r3, r3, #2
 8015e7a:	b2db      	uxtb	r3, r3
 8015e7c:	b29b      	uxth	r3, r3
 8015e7e:	3305      	adds	r3, #5
 8015e80:	b29b      	uxth	r3, r3
 8015e82:	031b      	lsls	r3, r3, #12
 8015e84:	b29a      	uxth	r2, r3
 8015e86:	79fb      	ldrb	r3, [r7, #7]
 8015e88:	b29b      	uxth	r3, r3
 8015e8a:	4313      	orrs	r3, r2
 8015e8c:	b29a      	uxth	r2, r3
 8015e8e:	693b      	ldr	r3, [r7, #16]
 8015e90:	68dc      	ldr	r4, [r3, #12]
 8015e92:	4610      	mov	r0, r2
 8015e94:	f7fa f82c 	bl	800fef0 <lwip_htons>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e9c:	693b      	ldr	r3, [r7, #16]
 8015e9e:	68db      	ldr	r3, [r3, #12]
 8015ea0:	2200      	movs	r2, #0
 8015ea2:	749a      	strb	r2, [r3, #18]
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	74da      	strb	r2, [r3, #19]
  return seg;
 8015ea8:	693b      	ldr	r3, [r7, #16]
}
 8015eaa:	4618      	mov	r0, r3
 8015eac:	371c      	adds	r7, #28
 8015eae:	46bd      	mov	sp, r7
 8015eb0:	bd90      	pop	{r4, r7, pc}
 8015eb2:	bf00      	nop
 8015eb4:	08020848 	.word	0x08020848
 8015eb8:	0802087c 	.word	0x0802087c
 8015ebc:	0802089c 	.word	0x0802089c
 8015ec0:	080208c4 	.word	0x080208c4
 8015ec4:	080208e8 	.word	0x080208e8

08015ec8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b086      	sub	sp, #24
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	607b      	str	r3, [r7, #4]
 8015ed0:	4603      	mov	r3, r0
 8015ed2:	73fb      	strb	r3, [r7, #15]
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	81bb      	strh	r3, [r7, #12]
 8015ed8:	4613      	mov	r3, r2
 8015eda:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015edc:	89bb      	ldrh	r3, [r7, #12]
 8015ede:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d105      	bne.n	8015ef2 <tcp_pbuf_prealloc+0x2a>
 8015ee6:	4b30      	ldr	r3, [pc, #192]	; (8015fa8 <tcp_pbuf_prealloc+0xe0>)
 8015ee8:	22e8      	movs	r2, #232	; 0xe8
 8015eea:	4930      	ldr	r1, [pc, #192]	; (8015fac <tcp_pbuf_prealloc+0xe4>)
 8015eec:	4830      	ldr	r0, [pc, #192]	; (8015fb0 <tcp_pbuf_prealloc+0xe8>)
 8015eee:	f005 ff0d 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015ef2:	6a3b      	ldr	r3, [r7, #32]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d105      	bne.n	8015f04 <tcp_pbuf_prealloc+0x3c>
 8015ef8:	4b2b      	ldr	r3, [pc, #172]	; (8015fa8 <tcp_pbuf_prealloc+0xe0>)
 8015efa:	22e9      	movs	r2, #233	; 0xe9
 8015efc:	492d      	ldr	r1, [pc, #180]	; (8015fb4 <tcp_pbuf_prealloc+0xec>)
 8015efe:	482c      	ldr	r0, [pc, #176]	; (8015fb0 <tcp_pbuf_prealloc+0xe8>)
 8015f00:	f005 ff04 	bl	801bd0c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015f04:	89ba      	ldrh	r2, [r7, #12]
 8015f06:	897b      	ldrh	r3, [r7, #10]
 8015f08:	429a      	cmp	r2, r3
 8015f0a:	d221      	bcs.n	8015f50 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015f10:	f003 0302 	and.w	r3, r3, #2
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d111      	bne.n	8015f3c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015f18:	6a3b      	ldr	r3, [r7, #32]
 8015f1a:	8b5b      	ldrh	r3, [r3, #26]
 8015f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d115      	bne.n	8015f50 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d007      	beq.n	8015f3c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015f2c:	6a3b      	ldr	r3, [r7, #32]
 8015f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d103      	bne.n	8015f3c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015f34:	6a3b      	ldr	r3, [r7, #32]
 8015f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d009      	beq.n	8015f50 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015f3c:	89bb      	ldrh	r3, [r7, #12]
 8015f3e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015f42:	f023 0203 	bic.w	r2, r3, #3
 8015f46:	897b      	ldrh	r3, [r7, #10]
 8015f48:	4293      	cmp	r3, r2
 8015f4a:	bf28      	it	cs
 8015f4c:	4613      	movcs	r3, r2
 8015f4e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015f50:	8af9      	ldrh	r1, [r7, #22]
 8015f52:	7bfb      	ldrb	r3, [r7, #15]
 8015f54:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7fb f891 	bl	8011080 <pbuf_alloc>
 8015f5e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f60:	693b      	ldr	r3, [r7, #16]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d101      	bne.n	8015f6a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015f66:	2300      	movs	r3, #0
 8015f68:	e019      	b.n	8015f9e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015f6a:	693b      	ldr	r3, [r7, #16]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d006      	beq.n	8015f80 <tcp_pbuf_prealloc+0xb8>
 8015f72:	4b0d      	ldr	r3, [pc, #52]	; (8015fa8 <tcp_pbuf_prealloc+0xe0>)
 8015f74:	f240 120b 	movw	r2, #267	; 0x10b
 8015f78:	490f      	ldr	r1, [pc, #60]	; (8015fb8 <tcp_pbuf_prealloc+0xf0>)
 8015f7a:	480d      	ldr	r0, [pc, #52]	; (8015fb0 <tcp_pbuf_prealloc+0xe8>)
 8015f7c:	f005 fec6 	bl	801bd0c <iprintf>
  *oversize = p->len - length;
 8015f80:	693b      	ldr	r3, [r7, #16]
 8015f82:	895a      	ldrh	r2, [r3, #10]
 8015f84:	89bb      	ldrh	r3, [r7, #12]
 8015f86:	1ad3      	subs	r3, r2, r3
 8015f88:	b29a      	uxth	r2, r3
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015f8e:	693b      	ldr	r3, [r7, #16]
 8015f90:	89ba      	ldrh	r2, [r7, #12]
 8015f92:	811a      	strh	r2, [r3, #8]
 8015f94:	693b      	ldr	r3, [r7, #16]
 8015f96:	891a      	ldrh	r2, [r3, #8]
 8015f98:	693b      	ldr	r3, [r7, #16]
 8015f9a:	815a      	strh	r2, [r3, #10]
  return p;
 8015f9c:	693b      	ldr	r3, [r7, #16]
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3718      	adds	r7, #24
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}
 8015fa6:	bf00      	nop
 8015fa8:	08020848 	.word	0x08020848
 8015fac:	08020900 	.word	0x08020900
 8015fb0:	0802089c 	.word	0x0802089c
 8015fb4:	08020924 	.word	0x08020924
 8015fb8:	08020944 	.word	0x08020944

08015fbc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015fbc:	b580      	push	{r7, lr}
 8015fbe:	b082      	sub	sp, #8
 8015fc0:	af00      	add	r7, sp, #0
 8015fc2:	6078      	str	r0, [r7, #4]
 8015fc4:	460b      	mov	r3, r1
 8015fc6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d106      	bne.n	8015fdc <tcp_write_checks+0x20>
 8015fce:	4b33      	ldr	r3, [pc, #204]	; (801609c <tcp_write_checks+0xe0>)
 8015fd0:	f240 1233 	movw	r2, #307	; 0x133
 8015fd4:	4932      	ldr	r1, [pc, #200]	; (80160a0 <tcp_write_checks+0xe4>)
 8015fd6:	4833      	ldr	r0, [pc, #204]	; (80160a4 <tcp_write_checks+0xe8>)
 8015fd8:	f005 fe98 	bl	801bd0c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	7d1b      	ldrb	r3, [r3, #20]
 8015fe0:	2b04      	cmp	r3, #4
 8015fe2:	d00e      	beq.n	8016002 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015fe4:	687b      	ldr	r3, [r7, #4]
 8015fe6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015fe8:	2b07      	cmp	r3, #7
 8015fea:	d00a      	beq.n	8016002 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015ff0:	2b02      	cmp	r3, #2
 8015ff2:	d006      	beq.n	8016002 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015ff8:	2b03      	cmp	r3, #3
 8015ffa:	d002      	beq.n	8016002 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015ffc:	f06f 030a 	mvn.w	r3, #10
 8016000:	e048      	b.n	8016094 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8016002:	887b      	ldrh	r3, [r7, #2]
 8016004:	2b00      	cmp	r3, #0
 8016006:	d101      	bne.n	801600c <tcp_write_checks+0x50>
    return ERR_OK;
 8016008:	2300      	movs	r3, #0
 801600a:	e043      	b.n	8016094 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016012:	887a      	ldrh	r2, [r7, #2]
 8016014:	429a      	cmp	r2, r3
 8016016:	d909      	bls.n	801602c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	8b5b      	ldrh	r3, [r3, #26]
 801601c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016020:	b29a      	uxth	r2, r3
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016026:	f04f 33ff 	mov.w	r3, #4294967295
 801602a:	e033      	b.n	8016094 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016032:	2b08      	cmp	r3, #8
 8016034:	d909      	bls.n	801604a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	8b5b      	ldrh	r3, [r3, #26]
 801603a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801603e:	b29a      	uxth	r2, r3
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016044:	f04f 33ff 	mov.w	r3, #4294967295
 8016048:	e024      	b.n	8016094 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801604a:	687b      	ldr	r3, [r7, #4]
 801604c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016050:	2b00      	cmp	r3, #0
 8016052:	d00f      	beq.n	8016074 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016058:	2b00      	cmp	r3, #0
 801605a:	d11a      	bne.n	8016092 <tcp_write_checks+0xd6>
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016060:	2b00      	cmp	r3, #0
 8016062:	d116      	bne.n	8016092 <tcp_write_checks+0xd6>
 8016064:	4b0d      	ldr	r3, [pc, #52]	; (801609c <tcp_write_checks+0xe0>)
 8016066:	f240 1255 	movw	r2, #341	; 0x155
 801606a:	490f      	ldr	r1, [pc, #60]	; (80160a8 <tcp_write_checks+0xec>)
 801606c:	480d      	ldr	r0, [pc, #52]	; (80160a4 <tcp_write_checks+0xe8>)
 801606e:	f005 fe4d 	bl	801bd0c <iprintf>
 8016072:	e00e      	b.n	8016092 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016078:	2b00      	cmp	r3, #0
 801607a:	d103      	bne.n	8016084 <tcp_write_checks+0xc8>
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016080:	2b00      	cmp	r3, #0
 8016082:	d006      	beq.n	8016092 <tcp_write_checks+0xd6>
 8016084:	4b05      	ldr	r3, [pc, #20]	; (801609c <tcp_write_checks+0xe0>)
 8016086:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801608a:	4908      	ldr	r1, [pc, #32]	; (80160ac <tcp_write_checks+0xf0>)
 801608c:	4805      	ldr	r0, [pc, #20]	; (80160a4 <tcp_write_checks+0xe8>)
 801608e:	f005 fe3d 	bl	801bd0c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016092:	2300      	movs	r3, #0
}
 8016094:	4618      	mov	r0, r3
 8016096:	3708      	adds	r7, #8
 8016098:	46bd      	mov	sp, r7
 801609a:	bd80      	pop	{r7, pc}
 801609c:	08020848 	.word	0x08020848
 80160a0:	08020958 	.word	0x08020958
 80160a4:	0802089c 	.word	0x0802089c
 80160a8:	08020978 	.word	0x08020978
 80160ac:	080209b4 	.word	0x080209b4

080160b0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80160b0:	b590      	push	{r4, r7, lr}
 80160b2:	b09b      	sub	sp, #108	; 0x6c
 80160b4:	af04      	add	r7, sp, #16
 80160b6:	60f8      	str	r0, [r7, #12]
 80160b8:	60b9      	str	r1, [r7, #8]
 80160ba:	4611      	mov	r1, r2
 80160bc:	461a      	mov	r2, r3
 80160be:	460b      	mov	r3, r1
 80160c0:	80fb      	strh	r3, [r7, #6]
 80160c2:	4613      	mov	r3, r2
 80160c4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80160c6:	2300      	movs	r3, #0
 80160c8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80160ca:	2300      	movs	r3, #0
 80160cc:	653b      	str	r3, [r7, #80]	; 0x50
 80160ce:	2300      	movs	r3, #0
 80160d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80160d2:	2300      	movs	r3, #0
 80160d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80160d6:	2300      	movs	r3, #0
 80160d8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80160da:	2300      	movs	r3, #0
 80160dc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80160e0:	2300      	movs	r3, #0
 80160e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80160e6:	2300      	movs	r3, #0
 80160e8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80160ea:	2300      	movs	r3, #0
 80160ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80160ee:	2300      	movs	r3, #0
 80160f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d109      	bne.n	801610c <tcp_write+0x5c>
 80160f8:	4ba4      	ldr	r3, [pc, #656]	; (801638c <tcp_write+0x2dc>)
 80160fa:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80160fe:	49a4      	ldr	r1, [pc, #656]	; (8016390 <tcp_write+0x2e0>)
 8016100:	48a4      	ldr	r0, [pc, #656]	; (8016394 <tcp_write+0x2e4>)
 8016102:	f005 fe03 	bl	801bd0c <iprintf>
 8016106:	f06f 030f 	mvn.w	r3, #15
 801610a:	e32a      	b.n	8016762 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016112:	085b      	lsrs	r3, r3, #1
 8016114:	b29a      	uxth	r2, r3
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801611a:	4293      	cmp	r3, r2
 801611c:	bf28      	it	cs
 801611e:	4613      	movcs	r3, r2
 8016120:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016122:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016124:	2b00      	cmp	r3, #0
 8016126:	d102      	bne.n	801612e <tcp_write+0x7e>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801612c:	e000      	b.n	8016130 <tcp_write+0x80>
 801612e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016130:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016132:	68bb      	ldr	r3, [r7, #8]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d109      	bne.n	801614c <tcp_write+0x9c>
 8016138:	4b94      	ldr	r3, [pc, #592]	; (801638c <tcp_write+0x2dc>)
 801613a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801613e:	4996      	ldr	r1, [pc, #600]	; (8016398 <tcp_write+0x2e8>)
 8016140:	4894      	ldr	r0, [pc, #592]	; (8016394 <tcp_write+0x2e4>)
 8016142:	f005 fde3 	bl	801bd0c <iprintf>
 8016146:	f06f 030f 	mvn.w	r3, #15
 801614a:	e30a      	b.n	8016762 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801614c:	88fb      	ldrh	r3, [r7, #6]
 801614e:	4619      	mov	r1, r3
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f7ff ff33 	bl	8015fbc <tcp_write_checks>
 8016156:	4603      	mov	r3, r0
 8016158:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801615c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016160:	2b00      	cmp	r3, #0
 8016162:	d002      	beq.n	801616a <tcp_write+0xba>
    return err;
 8016164:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016168:	e2fb      	b.n	8016762 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016170:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016174:	2300      	movs	r3, #0
 8016176:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801617e:	2b00      	cmp	r3, #0
 8016180:	f000 80f6 	beq.w	8016370 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016188:	653b      	str	r3, [r7, #80]	; 0x50
 801618a:	e002      	b.n	8016192 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801618c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d1f8      	bne.n	801618c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801619a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801619c:	7a9b      	ldrb	r3, [r3, #10]
 801619e:	009b      	lsls	r3, r3, #2
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	f003 0304 	and.w	r3, r3, #4
 80161a6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80161a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161ac:	891b      	ldrh	r3, [r3, #8]
 80161ae:	4619      	mov	r1, r3
 80161b0:	8c3b      	ldrh	r3, [r7, #32]
 80161b2:	440b      	add	r3, r1
 80161b4:	429a      	cmp	r2, r3
 80161b6:	da06      	bge.n	80161c6 <tcp_write+0x116>
 80161b8:	4b74      	ldr	r3, [pc, #464]	; (801638c <tcp_write+0x2dc>)
 80161ba:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80161be:	4977      	ldr	r1, [pc, #476]	; (801639c <tcp_write+0x2ec>)
 80161c0:	4874      	ldr	r0, [pc, #464]	; (8016394 <tcp_write+0x2e4>)
 80161c2:	f005 fda3 	bl	801bd0c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80161c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161c8:	891a      	ldrh	r2, [r3, #8]
 80161ca:	8c3b      	ldrh	r3, [r7, #32]
 80161cc:	4413      	add	r3, r2
 80161ce:	b29b      	uxth	r3, r3
 80161d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161d2:	1ad3      	subs	r3, r2, r3
 80161d4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161dc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80161de:	8a7b      	ldrh	r3, [r7, #18]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d026      	beq.n	8016232 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80161e4:	8a7b      	ldrh	r3, [r7, #18]
 80161e6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161e8:	429a      	cmp	r2, r3
 80161ea:	d206      	bcs.n	80161fa <tcp_write+0x14a>
 80161ec:	4b67      	ldr	r3, [pc, #412]	; (801638c <tcp_write+0x2dc>)
 80161ee:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80161f2:	496b      	ldr	r1, [pc, #428]	; (80163a0 <tcp_write+0x2f0>)
 80161f4:	4867      	ldr	r0, [pc, #412]	; (8016394 <tcp_write+0x2e4>)
 80161f6:	f005 fd89 	bl	801bd0c <iprintf>
      seg = last_unsent;
 80161fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161fc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80161fe:	8a7b      	ldrh	r3, [r7, #18]
 8016200:	88fa      	ldrh	r2, [r7, #6]
 8016202:	4293      	cmp	r3, r2
 8016204:	bf28      	it	cs
 8016206:	4613      	movcs	r3, r2
 8016208:	b29b      	uxth	r3, r3
 801620a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801620c:	4293      	cmp	r3, r2
 801620e:	bf28      	it	cs
 8016210:	4613      	movcs	r3, r2
 8016212:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016218:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801621a:	4413      	add	r3, r2
 801621c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016220:	8a7a      	ldrh	r2, [r7, #18]
 8016222:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016224:	1ad3      	subs	r3, r2, r3
 8016226:	b29b      	uxth	r3, r3
 8016228:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801622a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801622c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016232:	8a7b      	ldrh	r3, [r7, #18]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d00b      	beq.n	8016250 <tcp_write+0x1a0>
 8016238:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801623c:	88fb      	ldrh	r3, [r7, #6]
 801623e:	429a      	cmp	r2, r3
 8016240:	d006      	beq.n	8016250 <tcp_write+0x1a0>
 8016242:	4b52      	ldr	r3, [pc, #328]	; (801638c <tcp_write+0x2dc>)
 8016244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016248:	4956      	ldr	r1, [pc, #344]	; (80163a4 <tcp_write+0x2f4>)
 801624a:	4852      	ldr	r0, [pc, #328]	; (8016394 <tcp_write+0x2e4>)
 801624c:	f005 fd5e 	bl	801bd0c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016250:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016254:	88fb      	ldrh	r3, [r7, #6]
 8016256:	429a      	cmp	r2, r3
 8016258:	f080 8167 	bcs.w	801652a <tcp_write+0x47a>
 801625c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801625e:	2b00      	cmp	r3, #0
 8016260:	f000 8163 	beq.w	801652a <tcp_write+0x47a>
 8016264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016266:	891b      	ldrh	r3, [r3, #8]
 8016268:	2b00      	cmp	r3, #0
 801626a:	f000 815e 	beq.w	801652a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801626e:	88fa      	ldrh	r2, [r7, #6]
 8016270:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016274:	1ad2      	subs	r2, r2, r3
 8016276:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016278:	4293      	cmp	r3, r2
 801627a:	bfa8      	it	ge
 801627c:	4613      	movge	r3, r2
 801627e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016280:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016282:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016284:	797b      	ldrb	r3, [r7, #5]
 8016286:	f003 0301 	and.w	r3, r3, #1
 801628a:	2b00      	cmp	r3, #0
 801628c:	d027      	beq.n	80162de <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801628e:	f107 0012 	add.w	r0, r7, #18
 8016292:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016294:	8bf9      	ldrh	r1, [r7, #30]
 8016296:	2301      	movs	r3, #1
 8016298:	9302      	str	r3, [sp, #8]
 801629a:	797b      	ldrb	r3, [r7, #5]
 801629c:	9301      	str	r3, [sp, #4]
 801629e:	68fb      	ldr	r3, [r7, #12]
 80162a0:	9300      	str	r3, [sp, #0]
 80162a2:	4603      	mov	r3, r0
 80162a4:	2000      	movs	r0, #0
 80162a6:	f7ff fe0f 	bl	8015ec8 <tcp_pbuf_prealloc>
 80162aa:	6578      	str	r0, [r7, #84]	; 0x54
 80162ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	f000 8225 	beq.w	80166fe <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80162b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162b6:	6858      	ldr	r0, [r3, #4]
 80162b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	4413      	add	r3, r2
 80162c0:	8bfa      	ldrh	r2, [r7, #30]
 80162c2:	4619      	mov	r1, r3
 80162c4:	f005 f8ca 	bl	801b45c <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80162c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80162ca:	f7fb fa7d 	bl	80117c8 <pbuf_clen>
 80162ce:	4603      	mov	r3, r0
 80162d0:	461a      	mov	r2, r3
 80162d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162d6:	4413      	add	r3, r2
 80162d8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80162dc:	e041      	b.n	8016362 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80162de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162e0:	685b      	ldr	r3, [r3, #4]
 80162e2:	637b      	str	r3, [r7, #52]	; 0x34
 80162e4:	e002      	b.n	80162ec <tcp_write+0x23c>
 80162e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	637b      	str	r3, [r7, #52]	; 0x34
 80162ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d1f8      	bne.n	80162e6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80162f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162f6:	7b1b      	ldrb	r3, [r3, #12]
 80162f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d115      	bne.n	801632c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016306:	8952      	ldrh	r2, [r2, #10]
 8016308:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801630a:	68ba      	ldr	r2, [r7, #8]
 801630c:	429a      	cmp	r2, r3
 801630e:	d10d      	bne.n	801632c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016310:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016314:	2b00      	cmp	r3, #0
 8016316:	d006      	beq.n	8016326 <tcp_write+0x276>
 8016318:	4b1c      	ldr	r3, [pc, #112]	; (801638c <tcp_write+0x2dc>)
 801631a:	f240 2231 	movw	r2, #561	; 0x231
 801631e:	4922      	ldr	r1, [pc, #136]	; (80163a8 <tcp_write+0x2f8>)
 8016320:	481c      	ldr	r0, [pc, #112]	; (8016394 <tcp_write+0x2e4>)
 8016322:	f005 fcf3 	bl	801bd0c <iprintf>
          extendlen = seglen;
 8016326:	8bfb      	ldrh	r3, [r7, #30]
 8016328:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801632a:	e01a      	b.n	8016362 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801632c:	8bfb      	ldrh	r3, [r7, #30]
 801632e:	2201      	movs	r2, #1
 8016330:	4619      	mov	r1, r3
 8016332:	2000      	movs	r0, #0
 8016334:	f7fa fea4 	bl	8011080 <pbuf_alloc>
 8016338:	6578      	str	r0, [r7, #84]	; 0x54
 801633a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 81e0 	beq.w	8016702 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016342:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	441a      	add	r2, r3
 801634a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801634c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801634e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016350:	f7fb fa3a 	bl	80117c8 <pbuf_clen>
 8016354:	4603      	mov	r3, r0
 8016356:	461a      	mov	r2, r3
 8016358:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801635c:	4413      	add	r3, r2
 801635e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016362:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016366:	8bfb      	ldrh	r3, [r7, #30]
 8016368:	4413      	add	r3, r2
 801636a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801636e:	e0dc      	b.n	801652a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016376:	2b00      	cmp	r3, #0
 8016378:	f000 80d7 	beq.w	801652a <tcp_write+0x47a>
 801637c:	4b03      	ldr	r3, [pc, #12]	; (801638c <tcp_write+0x2dc>)
 801637e:	f240 224a 	movw	r2, #586	; 0x24a
 8016382:	490a      	ldr	r1, [pc, #40]	; (80163ac <tcp_write+0x2fc>)
 8016384:	4803      	ldr	r0, [pc, #12]	; (8016394 <tcp_write+0x2e4>)
 8016386:	f005 fcc1 	bl	801bd0c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801638a:	e0ce      	b.n	801652a <tcp_write+0x47a>
 801638c:	08020848 	.word	0x08020848
 8016390:	080209e8 	.word	0x080209e8
 8016394:	0802089c 	.word	0x0802089c
 8016398:	08020a00 	.word	0x08020a00
 801639c:	08020a34 	.word	0x08020a34
 80163a0:	08020a4c 	.word	0x08020a4c
 80163a4:	08020a6c 	.word	0x08020a6c
 80163a8:	08020a8c 	.word	0x08020a8c
 80163ac:	08020ab8 	.word	0x08020ab8
    struct pbuf *p;
    u16_t left = len - pos;
 80163b0:	88fa      	ldrh	r2, [r7, #6]
 80163b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163b6:	1ad3      	subs	r3, r2, r3
 80163b8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80163ba:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163be:	b29b      	uxth	r3, r3
 80163c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163c2:	1ad3      	subs	r3, r2, r3
 80163c4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80163c6:	8b7a      	ldrh	r2, [r7, #26]
 80163c8:	8bbb      	ldrh	r3, [r7, #28]
 80163ca:	4293      	cmp	r3, r2
 80163cc:	bf28      	it	cs
 80163ce:	4613      	movcs	r3, r2
 80163d0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80163d2:	797b      	ldrb	r3, [r7, #5]
 80163d4:	f003 0301 	and.w	r3, r3, #1
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d036      	beq.n	801644a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80163dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163e0:	b29a      	uxth	r2, r3
 80163e2:	8b3b      	ldrh	r3, [r7, #24]
 80163e4:	4413      	add	r3, r2
 80163e6:	b299      	uxth	r1, r3
 80163e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	bf0c      	ite	eq
 80163ee:	2301      	moveq	r3, #1
 80163f0:	2300      	movne	r3, #0
 80163f2:	b2db      	uxtb	r3, r3
 80163f4:	f107 0012 	add.w	r0, r7, #18
 80163f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163fa:	9302      	str	r3, [sp, #8]
 80163fc:	797b      	ldrb	r3, [r7, #5]
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	9300      	str	r3, [sp, #0]
 8016404:	4603      	mov	r3, r0
 8016406:	2036      	movs	r0, #54	; 0x36
 8016408:	f7ff fd5e 	bl	8015ec8 <tcp_pbuf_prealloc>
 801640c:	6338      	str	r0, [r7, #48]	; 0x30
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	2b00      	cmp	r3, #0
 8016412:	f000 8178 	beq.w	8016706 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016418:	895b      	ldrh	r3, [r3, #10]
 801641a:	8b3a      	ldrh	r2, [r7, #24]
 801641c:	429a      	cmp	r2, r3
 801641e:	d906      	bls.n	801642e <tcp_write+0x37e>
 8016420:	4b8c      	ldr	r3, [pc, #560]	; (8016654 <tcp_write+0x5a4>)
 8016422:	f240 2266 	movw	r2, #614	; 0x266
 8016426:	498c      	ldr	r1, [pc, #560]	; (8016658 <tcp_write+0x5a8>)
 8016428:	488c      	ldr	r0, [pc, #560]	; (801665c <tcp_write+0x5ac>)
 801642a:	f005 fc6f 	bl	801bd0c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016430:	685a      	ldr	r2, [r3, #4]
 8016432:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016436:	18d0      	adds	r0, r2, r3
 8016438:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801643c:	68ba      	ldr	r2, [r7, #8]
 801643e:	4413      	add	r3, r2
 8016440:	8b3a      	ldrh	r2, [r7, #24]
 8016442:	4619      	mov	r1, r3
 8016444:	f005 f80a 	bl	801b45c <memcpy>
 8016448:	e02f      	b.n	80164aa <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801644a:	8a7b      	ldrh	r3, [r7, #18]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d006      	beq.n	801645e <tcp_write+0x3ae>
 8016450:	4b80      	ldr	r3, [pc, #512]	; (8016654 <tcp_write+0x5a4>)
 8016452:	f240 2271 	movw	r2, #625	; 0x271
 8016456:	4982      	ldr	r1, [pc, #520]	; (8016660 <tcp_write+0x5b0>)
 8016458:	4880      	ldr	r0, [pc, #512]	; (801665c <tcp_write+0x5ac>)
 801645a:	f005 fc57 	bl	801bd0c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801645e:	8b3b      	ldrh	r3, [r7, #24]
 8016460:	2201      	movs	r2, #1
 8016462:	4619      	mov	r1, r3
 8016464:	2036      	movs	r0, #54	; 0x36
 8016466:	f7fa fe0b 	bl	8011080 <pbuf_alloc>
 801646a:	6178      	str	r0, [r7, #20]
 801646c:	697b      	ldr	r3, [r7, #20]
 801646e:	2b00      	cmp	r3, #0
 8016470:	f000 814b 	beq.w	801670a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016474:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016478:	68ba      	ldr	r2, [r7, #8]
 801647a:	441a      	add	r2, r3
 801647c:	697b      	ldr	r3, [r7, #20]
 801647e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016480:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016484:	b29b      	uxth	r3, r3
 8016486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801648a:	4619      	mov	r1, r3
 801648c:	2036      	movs	r0, #54	; 0x36
 801648e:	f7fa fdf7 	bl	8011080 <pbuf_alloc>
 8016492:	6338      	str	r0, [r7, #48]	; 0x30
 8016494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016496:	2b00      	cmp	r3, #0
 8016498:	d103      	bne.n	80164a2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801649a:	6978      	ldr	r0, [r7, #20]
 801649c:	f7fb f906 	bl	80116ac <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80164a0:	e136      	b.n	8016710 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80164a2:	6979      	ldr	r1, [r7, #20]
 80164a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164a6:	f7fb f9cf 	bl	8011848 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80164aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164ac:	f7fb f98c 	bl	80117c8 <pbuf_clen>
 80164b0:	4603      	mov	r3, r0
 80164b2:	461a      	mov	r2, r3
 80164b4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80164b8:	4413      	add	r3, r2
 80164ba:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80164be:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80164c2:	2b09      	cmp	r3, #9
 80164c4:	d903      	bls.n	80164ce <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80164c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164c8:	f7fb f8f0 	bl	80116ac <pbuf_free>
      goto memerr;
 80164cc:	e120      	b.n	8016710 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80164d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80164d6:	441a      	add	r2, r3
 80164d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164dc:	9300      	str	r3, [sp, #0]
 80164de:	4613      	mov	r3, r2
 80164e0:	2200      	movs	r2, #0
 80164e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80164e4:	68f8      	ldr	r0, [r7, #12]
 80164e6:	f7ff fc51 	bl	8015d8c <tcp_create_segment>
 80164ea:	64f8      	str	r0, [r7, #76]	; 0x4c
 80164ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	f000 810d 	beq.w	801670e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80164f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d102      	bne.n	8016500 <tcp_write+0x450>
      queue = seg;
 80164fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164fc:	647b      	str	r3, [r7, #68]	; 0x44
 80164fe:	e00c      	b.n	801651a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016502:	2b00      	cmp	r3, #0
 8016504:	d106      	bne.n	8016514 <tcp_write+0x464>
 8016506:	4b53      	ldr	r3, [pc, #332]	; (8016654 <tcp_write+0x5a4>)
 8016508:	f240 22ab 	movw	r2, #683	; 0x2ab
 801650c:	4955      	ldr	r1, [pc, #340]	; (8016664 <tcp_write+0x5b4>)
 801650e:	4853      	ldr	r0, [pc, #332]	; (801665c <tcp_write+0x5ac>)
 8016510:	f005 fbfc 	bl	801bd0c <iprintf>
      prev_seg->next = seg;
 8016514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016516:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016518:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801651a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801651c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801651e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016522:	8b3b      	ldrh	r3, [r7, #24]
 8016524:	4413      	add	r3, r2
 8016526:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801652a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801652e:	88fb      	ldrh	r3, [r7, #6]
 8016530:	429a      	cmp	r2, r3
 8016532:	f4ff af3d 	bcc.w	80163b0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016536:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016538:	2b00      	cmp	r3, #0
 801653a:	d02c      	beq.n	8016596 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016542:	e01e      	b.n	8016582 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016546:	891a      	ldrh	r2, [r3, #8]
 8016548:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801654a:	4413      	add	r3, r2
 801654c:	b29a      	uxth	r2, r3
 801654e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016550:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d110      	bne.n	801657c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801655a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016560:	8952      	ldrh	r2, [r2, #10]
 8016562:	4413      	add	r3, r2
 8016564:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016566:	68b9      	ldr	r1, [r7, #8]
 8016568:	4618      	mov	r0, r3
 801656a:	f004 ff77 	bl	801b45c <memcpy>
        p->len += oversize_used;
 801656e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016570:	895a      	ldrh	r2, [r3, #10]
 8016572:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016574:	4413      	add	r3, r2
 8016576:	b29a      	uxth	r2, r3
 8016578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801657c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016584:	2b00      	cmp	r3, #0
 8016586:	d1dd      	bne.n	8016544 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801658a:	891a      	ldrh	r2, [r3, #8]
 801658c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801658e:	4413      	add	r3, r2
 8016590:	b29a      	uxth	r2, r3
 8016592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016594:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016596:	8a7a      	ldrh	r2, [r7, #18]
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801659e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d018      	beq.n	80165d6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80165a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d106      	bne.n	80165b8 <tcp_write+0x508>
 80165aa:	4b2a      	ldr	r3, [pc, #168]	; (8016654 <tcp_write+0x5a4>)
 80165ac:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80165b0:	492d      	ldr	r1, [pc, #180]	; (8016668 <tcp_write+0x5b8>)
 80165b2:	482a      	ldr	r0, [pc, #168]	; (801665c <tcp_write+0x5ac>)
 80165b4:	f005 fbaa 	bl	801bd0c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80165b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80165be:	4618      	mov	r0, r3
 80165c0:	f7fb f942 	bl	8011848 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80165c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165c6:	891a      	ldrh	r2, [r3, #8]
 80165c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80165ca:	891b      	ldrh	r3, [r3, #8]
 80165cc:	4413      	add	r3, r2
 80165ce:	b29a      	uxth	r2, r3
 80165d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165d2:	811a      	strh	r2, [r3, #8]
 80165d4:	e037      	b.n	8016646 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80165d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d034      	beq.n	8016646 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80165dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d003      	beq.n	80165ea <tcp_write+0x53a>
 80165e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <tcp_write+0x548>
 80165ea:	4b1a      	ldr	r3, [pc, #104]	; (8016654 <tcp_write+0x5a4>)
 80165ec:	f240 22e6 	movw	r2, #742	; 0x2e6
 80165f0:	491e      	ldr	r1, [pc, #120]	; (801666c <tcp_write+0x5bc>)
 80165f2:	481a      	ldr	r0, [pc, #104]	; (801665c <tcp_write+0x5ac>)
 80165f4:	f005 fb8a 	bl	801bd0c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80165f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165fa:	685b      	ldr	r3, [r3, #4]
 80165fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80165fe:	e009      	b.n	8016614 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016602:	891a      	ldrh	r2, [r3, #8]
 8016604:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016606:	4413      	add	r3, r2
 8016608:	b29a      	uxth	r2, r3
 801660a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801660c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	62bb      	str	r3, [r7, #40]	; 0x28
 8016614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	2b00      	cmp	r3, #0
 801661a:	d1f1      	bne.n	8016600 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801661e:	891a      	ldrh	r2, [r3, #8]
 8016620:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016622:	4413      	add	r3, r2
 8016624:	b29a      	uxth	r2, r3
 8016626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016628:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801662a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801662c:	895a      	ldrh	r2, [r3, #10]
 801662e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016630:	4413      	add	r3, r2
 8016632:	b29a      	uxth	r2, r3
 8016634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016636:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801663a:	891a      	ldrh	r2, [r3, #8]
 801663c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801663e:	4413      	add	r3, r2
 8016640:	b29a      	uxth	r2, r3
 8016642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016644:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016648:	2b00      	cmp	r3, #0
 801664a:	d111      	bne.n	8016670 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801664c:	68fb      	ldr	r3, [r7, #12]
 801664e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016650:	66da      	str	r2, [r3, #108]	; 0x6c
 8016652:	e010      	b.n	8016676 <tcp_write+0x5c6>
 8016654:	08020848 	.word	0x08020848
 8016658:	08020ae8 	.word	0x08020ae8
 801665c:	0802089c 	.word	0x0802089c
 8016660:	08020b28 	.word	0x08020b28
 8016664:	08020b38 	.word	0x08020b38
 8016668:	08020b4c 	.word	0x08020b4c
 801666c:	08020b84 	.word	0x08020b84
  } else {
    last_unsent->next = queue;
 8016670:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016672:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016674:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016676:	68fb      	ldr	r3, [r7, #12]
 8016678:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801667a:	88fb      	ldrh	r3, [r7, #6]
 801667c:	441a      	add	r2, r3
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016682:	68fb      	ldr	r3, [r7, #12]
 8016684:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016688:	88fb      	ldrh	r3, [r7, #6]
 801668a:	1ad3      	subs	r3, r2, r3
 801668c:	b29a      	uxth	r2, r3
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801669a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166a4:	2b00      	cmp	r3, #0
 80166a6:	d00e      	beq.n	80166c6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d10a      	bne.n	80166c6 <tcp_write+0x616>
 80166b0:	68fb      	ldr	r3, [r7, #12]
 80166b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166b4:	2b00      	cmp	r3, #0
 80166b6:	d106      	bne.n	80166c6 <tcp_write+0x616>
 80166b8:	4b2c      	ldr	r3, [pc, #176]	; (801676c <tcp_write+0x6bc>)
 80166ba:	f240 3212 	movw	r2, #786	; 0x312
 80166be:	492c      	ldr	r1, [pc, #176]	; (8016770 <tcp_write+0x6c0>)
 80166c0:	482c      	ldr	r0, [pc, #176]	; (8016774 <tcp_write+0x6c4>)
 80166c2:	f005 fb23 	bl	801bd0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80166c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166c8:	2b00      	cmp	r3, #0
 80166ca:	d016      	beq.n	80166fa <tcp_write+0x64a>
 80166cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166ce:	68db      	ldr	r3, [r3, #12]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d012      	beq.n	80166fa <tcp_write+0x64a>
 80166d4:	797b      	ldrb	r3, [r7, #5]
 80166d6:	f003 0302 	and.w	r3, r3, #2
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d10d      	bne.n	80166fa <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80166de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166e0:	68db      	ldr	r3, [r3, #12]
 80166e2:	899b      	ldrh	r3, [r3, #12]
 80166e4:	b29c      	uxth	r4, r3
 80166e6:	2008      	movs	r0, #8
 80166e8:	f7f9 fc02 	bl	800fef0 <lwip_htons>
 80166ec:	4603      	mov	r3, r0
 80166ee:	461a      	mov	r2, r3
 80166f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166f2:	68db      	ldr	r3, [r3, #12]
 80166f4:	4322      	orrs	r2, r4
 80166f6:	b292      	uxth	r2, r2
 80166f8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80166fa:	2300      	movs	r3, #0
 80166fc:	e031      	b.n	8016762 <tcp_write+0x6b2>
          goto memerr;
 80166fe:	bf00      	nop
 8016700:	e006      	b.n	8016710 <tcp_write+0x660>
            goto memerr;
 8016702:	bf00      	nop
 8016704:	e004      	b.n	8016710 <tcp_write+0x660>
        goto memerr;
 8016706:	bf00      	nop
 8016708:	e002      	b.n	8016710 <tcp_write+0x660>
        goto memerr;
 801670a:	bf00      	nop
 801670c:	e000      	b.n	8016710 <tcp_write+0x660>
      goto memerr;
 801670e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	8b5b      	ldrh	r3, [r3, #26]
 8016714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016718:	b29a      	uxth	r2, r3
 801671a:	68fb      	ldr	r3, [r7, #12]
 801671c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016720:	2b00      	cmp	r3, #0
 8016722:	d002      	beq.n	801672a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016724:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016726:	f7fa ffc1 	bl	80116ac <pbuf_free>
  }
  if (queue != NULL) {
 801672a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801672c:	2b00      	cmp	r3, #0
 801672e:	d002      	beq.n	8016736 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016730:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016732:	f7fc fb6f 	bl	8012e14 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016736:	68fb      	ldr	r3, [r7, #12]
 8016738:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801673c:	2b00      	cmp	r3, #0
 801673e:	d00e      	beq.n	801675e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016744:	2b00      	cmp	r3, #0
 8016746:	d10a      	bne.n	801675e <tcp_write+0x6ae>
 8016748:	68fb      	ldr	r3, [r7, #12]
 801674a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801674c:	2b00      	cmp	r3, #0
 801674e:	d106      	bne.n	801675e <tcp_write+0x6ae>
 8016750:	4b06      	ldr	r3, [pc, #24]	; (801676c <tcp_write+0x6bc>)
 8016752:	f240 3227 	movw	r2, #807	; 0x327
 8016756:	4906      	ldr	r1, [pc, #24]	; (8016770 <tcp_write+0x6c0>)
 8016758:	4806      	ldr	r0, [pc, #24]	; (8016774 <tcp_write+0x6c4>)
 801675a:	f005 fad7 	bl	801bd0c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801675e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016762:	4618      	mov	r0, r3
 8016764:	375c      	adds	r7, #92	; 0x5c
 8016766:	46bd      	mov	sp, r7
 8016768:	bd90      	pop	{r4, r7, pc}
 801676a:	bf00      	nop
 801676c:	08020848 	.word	0x08020848
 8016770:	08020bbc 	.word	0x08020bbc
 8016774:	0802089c 	.word	0x0802089c

08016778 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016778:	b590      	push	{r4, r7, lr}
 801677a:	b08b      	sub	sp, #44	; 0x2c
 801677c:	af02      	add	r7, sp, #8
 801677e:	6078      	str	r0, [r7, #4]
 8016780:	460b      	mov	r3, r1
 8016782:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016784:	2300      	movs	r3, #0
 8016786:	61fb      	str	r3, [r7, #28]
 8016788:	2300      	movs	r3, #0
 801678a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801678c:	2300      	movs	r3, #0
 801678e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d106      	bne.n	80167a4 <tcp_split_unsent_seg+0x2c>
 8016796:	4b95      	ldr	r3, [pc, #596]	; (80169ec <tcp_split_unsent_seg+0x274>)
 8016798:	f240 324b 	movw	r2, #843	; 0x34b
 801679c:	4994      	ldr	r1, [pc, #592]	; (80169f0 <tcp_split_unsent_seg+0x278>)
 801679e:	4895      	ldr	r0, [pc, #596]	; (80169f4 <tcp_split_unsent_seg+0x27c>)
 80167a0:	f005 fab4 	bl	801bd0c <iprintf>

  useg = pcb->unsent;
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167a8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80167aa:	697b      	ldr	r3, [r7, #20]
 80167ac:	2b00      	cmp	r3, #0
 80167ae:	d102      	bne.n	80167b6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80167b0:	f04f 33ff 	mov.w	r3, #4294967295
 80167b4:	e116      	b.n	80169e4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80167b6:	887b      	ldrh	r3, [r7, #2]
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	d109      	bne.n	80167d0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80167bc:	4b8b      	ldr	r3, [pc, #556]	; (80169ec <tcp_split_unsent_seg+0x274>)
 80167be:	f240 3253 	movw	r2, #851	; 0x353
 80167c2:	498d      	ldr	r1, [pc, #564]	; (80169f8 <tcp_split_unsent_seg+0x280>)
 80167c4:	488b      	ldr	r0, [pc, #556]	; (80169f4 <tcp_split_unsent_seg+0x27c>)
 80167c6:	f005 faa1 	bl	801bd0c <iprintf>
    return ERR_VAL;
 80167ca:	f06f 0305 	mvn.w	r3, #5
 80167ce:	e109      	b.n	80169e4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80167d0:	697b      	ldr	r3, [r7, #20]
 80167d2:	891b      	ldrh	r3, [r3, #8]
 80167d4:	887a      	ldrh	r2, [r7, #2]
 80167d6:	429a      	cmp	r2, r3
 80167d8:	d301      	bcc.n	80167de <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80167da:	2300      	movs	r3, #0
 80167dc:	e102      	b.n	80169e4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167e2:	887a      	ldrh	r2, [r7, #2]
 80167e4:	429a      	cmp	r2, r3
 80167e6:	d906      	bls.n	80167f6 <tcp_split_unsent_seg+0x7e>
 80167e8:	4b80      	ldr	r3, [pc, #512]	; (80169ec <tcp_split_unsent_seg+0x274>)
 80167ea:	f240 325b 	movw	r2, #859	; 0x35b
 80167ee:	4983      	ldr	r1, [pc, #524]	; (80169fc <tcp_split_unsent_seg+0x284>)
 80167f0:	4880      	ldr	r0, [pc, #512]	; (80169f4 <tcp_split_unsent_seg+0x27c>)
 80167f2:	f005 fa8b 	bl	801bd0c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80167f6:	697b      	ldr	r3, [r7, #20]
 80167f8:	891b      	ldrh	r3, [r3, #8]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d106      	bne.n	801680c <tcp_split_unsent_seg+0x94>
 80167fe:	4b7b      	ldr	r3, [pc, #492]	; (80169ec <tcp_split_unsent_seg+0x274>)
 8016800:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8016804:	497e      	ldr	r1, [pc, #504]	; (8016a00 <tcp_split_unsent_seg+0x288>)
 8016806:	487b      	ldr	r0, [pc, #492]	; (80169f4 <tcp_split_unsent_seg+0x27c>)
 8016808:	f005 fa80 	bl	801bd0c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801680c:	697b      	ldr	r3, [r7, #20]
 801680e:	7a9b      	ldrb	r3, [r3, #10]
 8016810:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016812:	7bfb      	ldrb	r3, [r7, #15]
 8016814:	009b      	lsls	r3, r3, #2
 8016816:	b2db      	uxtb	r3, r3
 8016818:	f003 0304 	and.w	r3, r3, #4
 801681c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	891a      	ldrh	r2, [r3, #8]
 8016822:	887b      	ldrh	r3, [r7, #2]
 8016824:	1ad3      	subs	r3, r2, r3
 8016826:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016828:	7bbb      	ldrb	r3, [r7, #14]
 801682a:	b29a      	uxth	r2, r3
 801682c:	89bb      	ldrh	r3, [r7, #12]
 801682e:	4413      	add	r3, r2
 8016830:	b29b      	uxth	r3, r3
 8016832:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016836:	4619      	mov	r1, r3
 8016838:	2036      	movs	r0, #54	; 0x36
 801683a:	f7fa fc21 	bl	8011080 <pbuf_alloc>
 801683e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016840:	693b      	ldr	r3, [r7, #16]
 8016842:	2b00      	cmp	r3, #0
 8016844:	f000 80b7 	beq.w	80169b6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016848:	697b      	ldr	r3, [r7, #20]
 801684a:	685b      	ldr	r3, [r3, #4]
 801684c:	891a      	ldrh	r2, [r3, #8]
 801684e:	697b      	ldr	r3, [r7, #20]
 8016850:	891b      	ldrh	r3, [r3, #8]
 8016852:	1ad3      	subs	r3, r2, r3
 8016854:	b29a      	uxth	r2, r3
 8016856:	887b      	ldrh	r3, [r7, #2]
 8016858:	4413      	add	r3, r2
 801685a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	6858      	ldr	r0, [r3, #4]
 8016860:	693b      	ldr	r3, [r7, #16]
 8016862:	685a      	ldr	r2, [r3, #4]
 8016864:	7bbb      	ldrb	r3, [r7, #14]
 8016866:	18d1      	adds	r1, r2, r3
 8016868:	897b      	ldrh	r3, [r7, #10]
 801686a:	89ba      	ldrh	r2, [r7, #12]
 801686c:	f7fb f924 	bl	8011ab8 <pbuf_copy_partial>
 8016870:	4603      	mov	r3, r0
 8016872:	461a      	mov	r2, r3
 8016874:	89bb      	ldrh	r3, [r7, #12]
 8016876:	4293      	cmp	r3, r2
 8016878:	f040 809f 	bne.w	80169ba <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	68db      	ldr	r3, [r3, #12]
 8016880:	899b      	ldrh	r3, [r3, #12]
 8016882:	b29b      	uxth	r3, r3
 8016884:	4618      	mov	r0, r3
 8016886:	f7f9 fb33 	bl	800fef0 <lwip_htons>
 801688a:	4603      	mov	r3, r0
 801688c:	b2db      	uxtb	r3, r3
 801688e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016892:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016894:	2300      	movs	r3, #0
 8016896:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016898:	7efb      	ldrb	r3, [r7, #27]
 801689a:	f003 0308 	and.w	r3, r3, #8
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d007      	beq.n	80168b2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80168a2:	7efb      	ldrb	r3, [r7, #27]
 80168a4:	f023 0308 	bic.w	r3, r3, #8
 80168a8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80168aa:	7ebb      	ldrb	r3, [r7, #26]
 80168ac:	f043 0308 	orr.w	r3, r3, #8
 80168b0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80168b2:	7efb      	ldrb	r3, [r7, #27]
 80168b4:	f003 0301 	and.w	r3, r3, #1
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d007      	beq.n	80168cc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80168bc:	7efb      	ldrb	r3, [r7, #27]
 80168be:	f023 0301 	bic.w	r3, r3, #1
 80168c2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80168c4:	7ebb      	ldrb	r3, [r7, #26]
 80168c6:	f043 0301 	orr.w	r3, r3, #1
 80168ca:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	68db      	ldr	r3, [r3, #12]
 80168d0:	685b      	ldr	r3, [r3, #4]
 80168d2:	4618      	mov	r0, r3
 80168d4:	f7f9 fb21 	bl	800ff1a <lwip_htonl>
 80168d8:	4602      	mov	r2, r0
 80168da:	887b      	ldrh	r3, [r7, #2]
 80168dc:	18d1      	adds	r1, r2, r3
 80168de:	7eba      	ldrb	r2, [r7, #26]
 80168e0:	7bfb      	ldrb	r3, [r7, #15]
 80168e2:	9300      	str	r3, [sp, #0]
 80168e4:	460b      	mov	r3, r1
 80168e6:	6939      	ldr	r1, [r7, #16]
 80168e8:	6878      	ldr	r0, [r7, #4]
 80168ea:	f7ff fa4f 	bl	8015d8c <tcp_create_segment>
 80168ee:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80168f0:	69fb      	ldr	r3, [r7, #28]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d063      	beq.n	80169be <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80168f6:	697b      	ldr	r3, [r7, #20]
 80168f8:	685b      	ldr	r3, [r3, #4]
 80168fa:	4618      	mov	r0, r3
 80168fc:	f7fa ff64 	bl	80117c8 <pbuf_clen>
 8016900:	4603      	mov	r3, r0
 8016902:	461a      	mov	r2, r3
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801690a:	1a9b      	subs	r3, r3, r2
 801690c:	b29a      	uxth	r2, r3
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016914:	697b      	ldr	r3, [r7, #20]
 8016916:	6858      	ldr	r0, [r3, #4]
 8016918:	697b      	ldr	r3, [r7, #20]
 801691a:	685b      	ldr	r3, [r3, #4]
 801691c:	891a      	ldrh	r2, [r3, #8]
 801691e:	89bb      	ldrh	r3, [r7, #12]
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	b29b      	uxth	r3, r3
 8016924:	4619      	mov	r1, r3
 8016926:	f7fa fd09 	bl	801133c <pbuf_realloc>
  useg->len -= remainder;
 801692a:	697b      	ldr	r3, [r7, #20]
 801692c:	891a      	ldrh	r2, [r3, #8]
 801692e:	89bb      	ldrh	r3, [r7, #12]
 8016930:	1ad3      	subs	r3, r2, r3
 8016932:	b29a      	uxth	r2, r3
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016938:	697b      	ldr	r3, [r7, #20]
 801693a:	68db      	ldr	r3, [r3, #12]
 801693c:	899b      	ldrh	r3, [r3, #12]
 801693e:	b29c      	uxth	r4, r3
 8016940:	7efb      	ldrb	r3, [r7, #27]
 8016942:	b29b      	uxth	r3, r3
 8016944:	4618      	mov	r0, r3
 8016946:	f7f9 fad3 	bl	800fef0 <lwip_htons>
 801694a:	4603      	mov	r3, r0
 801694c:	461a      	mov	r2, r3
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	4322      	orrs	r2, r4
 8016954:	b292      	uxth	r2, r2
 8016956:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016958:	697b      	ldr	r3, [r7, #20]
 801695a:	685b      	ldr	r3, [r3, #4]
 801695c:	4618      	mov	r0, r3
 801695e:	f7fa ff33 	bl	80117c8 <pbuf_clen>
 8016962:	4603      	mov	r3, r0
 8016964:	461a      	mov	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801696c:	4413      	add	r3, r2
 801696e:	b29a      	uxth	r2, r3
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016976:	69fb      	ldr	r3, [r7, #28]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	4618      	mov	r0, r3
 801697c:	f7fa ff24 	bl	80117c8 <pbuf_clen>
 8016980:	4603      	mov	r3, r0
 8016982:	461a      	mov	r2, r3
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801698a:	4413      	add	r3, r2
 801698c:	b29a      	uxth	r2, r3
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016994:	697b      	ldr	r3, [r7, #20]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	69fa      	ldr	r2, [r7, #28]
 80169a0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d103      	bne.n	80169b2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	2200      	movs	r2, #0
 80169ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80169b2:	2300      	movs	r3, #0
 80169b4:	e016      	b.n	80169e4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80169b6:	bf00      	nop
 80169b8:	e002      	b.n	80169c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80169ba:	bf00      	nop
 80169bc:	e000      	b.n	80169c0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80169be:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80169c0:	69fb      	ldr	r3, [r7, #28]
 80169c2:	2b00      	cmp	r3, #0
 80169c4:	d006      	beq.n	80169d4 <tcp_split_unsent_seg+0x25c>
 80169c6:	4b09      	ldr	r3, [pc, #36]	; (80169ec <tcp_split_unsent_seg+0x274>)
 80169c8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80169cc:	490d      	ldr	r1, [pc, #52]	; (8016a04 <tcp_split_unsent_seg+0x28c>)
 80169ce:	4809      	ldr	r0, [pc, #36]	; (80169f4 <tcp_split_unsent_seg+0x27c>)
 80169d0:	f005 f99c 	bl	801bd0c <iprintf>
  if (p != NULL) {
 80169d4:	693b      	ldr	r3, [r7, #16]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d002      	beq.n	80169e0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80169da:	6938      	ldr	r0, [r7, #16]
 80169dc:	f7fa fe66 	bl	80116ac <pbuf_free>
  }

  return ERR_MEM;
 80169e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169e4:	4618      	mov	r0, r3
 80169e6:	3724      	adds	r7, #36	; 0x24
 80169e8:	46bd      	mov	sp, r7
 80169ea:	bd90      	pop	{r4, r7, pc}
 80169ec:	08020848 	.word	0x08020848
 80169f0:	08020bdc 	.word	0x08020bdc
 80169f4:	0802089c 	.word	0x0802089c
 80169f8:	08020c00 	.word	0x08020c00
 80169fc:	08020c24 	.word	0x08020c24
 8016a00:	08020c34 	.word	0x08020c34
 8016a04:	08020c44 	.word	0x08020c44

08016a08 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016a08:	b590      	push	{r4, r7, lr}
 8016a0a:	b085      	sub	sp, #20
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d106      	bne.n	8016a24 <tcp_send_fin+0x1c>
 8016a16:	4b21      	ldr	r3, [pc, #132]	; (8016a9c <tcp_send_fin+0x94>)
 8016a18:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8016a1c:	4920      	ldr	r1, [pc, #128]	; (8016aa0 <tcp_send_fin+0x98>)
 8016a1e:	4821      	ldr	r0, [pc, #132]	; (8016aa4 <tcp_send_fin+0x9c>)
 8016a20:	f005 f974 	bl	801bd0c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d02e      	beq.n	8016a8a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a30:	60fb      	str	r3, [r7, #12]
 8016a32:	e002      	b.n	8016a3a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1f8      	bne.n	8016a34 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016a42:	68fb      	ldr	r3, [r7, #12]
 8016a44:	68db      	ldr	r3, [r3, #12]
 8016a46:	899b      	ldrh	r3, [r3, #12]
 8016a48:	b29b      	uxth	r3, r3
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7f9 fa50 	bl	800fef0 <lwip_htons>
 8016a50:	4603      	mov	r3, r0
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	f003 0307 	and.w	r3, r3, #7
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d116      	bne.n	8016a8a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	68db      	ldr	r3, [r3, #12]
 8016a60:	899b      	ldrh	r3, [r3, #12]
 8016a62:	b29c      	uxth	r4, r3
 8016a64:	2001      	movs	r0, #1
 8016a66:	f7f9 fa43 	bl	800fef0 <lwip_htons>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	68db      	ldr	r3, [r3, #12]
 8016a72:	4322      	orrs	r2, r4
 8016a74:	b292      	uxth	r2, r2
 8016a76:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	8b5b      	ldrh	r3, [r3, #26]
 8016a7c:	f043 0320 	orr.w	r3, r3, #32
 8016a80:	b29a      	uxth	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a86:	2300      	movs	r3, #0
 8016a88:	e004      	b.n	8016a94 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a8a:	2101      	movs	r1, #1
 8016a8c:	6878      	ldr	r0, [r7, #4]
 8016a8e:	f000 f80b 	bl	8016aa8 <tcp_enqueue_flags>
 8016a92:	4603      	mov	r3, r0
}
 8016a94:	4618      	mov	r0, r3
 8016a96:	3714      	adds	r7, #20
 8016a98:	46bd      	mov	sp, r7
 8016a9a:	bd90      	pop	{r4, r7, pc}
 8016a9c:	08020848 	.word	0x08020848
 8016aa0:	08020c50 	.word	0x08020c50
 8016aa4:	0802089c 	.word	0x0802089c

08016aa8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b08a      	sub	sp, #40	; 0x28
 8016aac:	af02      	add	r7, sp, #8
 8016aae:	6078      	str	r0, [r7, #4]
 8016ab0:	460b      	mov	r3, r1
 8016ab2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016ab4:	2300      	movs	r3, #0
 8016ab6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016ab8:	2300      	movs	r3, #0
 8016aba:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016abc:	78fb      	ldrb	r3, [r7, #3]
 8016abe:	f003 0303 	and.w	r3, r3, #3
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <tcp_enqueue_flags+0x2c>
 8016ac6:	4b67      	ldr	r3, [pc, #412]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016ac8:	f240 4211 	movw	r2, #1041	; 0x411
 8016acc:	4966      	ldr	r1, [pc, #408]	; (8016c68 <tcp_enqueue_flags+0x1c0>)
 8016ace:	4867      	ldr	r0, [pc, #412]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016ad0:	f005 f91c 	bl	801bd0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d106      	bne.n	8016ae8 <tcp_enqueue_flags+0x40>
 8016ada:	4b62      	ldr	r3, [pc, #392]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016adc:	f240 4213 	movw	r2, #1043	; 0x413
 8016ae0:	4963      	ldr	r1, [pc, #396]	; (8016c70 <tcp_enqueue_flags+0x1c8>)
 8016ae2:	4862      	ldr	r0, [pc, #392]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016ae4:	f005 f912 	bl	801bd0c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016ae8:	78fb      	ldrb	r3, [r7, #3]
 8016aea:	f003 0302 	and.w	r3, r3, #2
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	d001      	beq.n	8016af6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016af2:	2301      	movs	r3, #1
 8016af4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016af6:	7ffb      	ldrb	r3, [r7, #31]
 8016af8:	009b      	lsls	r3, r3, #2
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	f003 0304 	and.w	r3, r3, #4
 8016b00:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016b02:	7dfb      	ldrb	r3, [r7, #23]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b0a:	4619      	mov	r1, r3
 8016b0c:	2036      	movs	r0, #54	; 0x36
 8016b0e:	f7fa fab7 	bl	8011080 <pbuf_alloc>
 8016b12:	6138      	str	r0, [r7, #16]
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d109      	bne.n	8016b2e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	8b5b      	ldrh	r3, [r3, #26]
 8016b1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b22:	b29a      	uxth	r2, r3
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016b28:	f04f 33ff 	mov.w	r3, #4294967295
 8016b2c:	e095      	b.n	8016c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	895a      	ldrh	r2, [r3, #10]
 8016b32:	7dfb      	ldrb	r3, [r7, #23]
 8016b34:	b29b      	uxth	r3, r3
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d206      	bcs.n	8016b48 <tcp_enqueue_flags+0xa0>
 8016b3a:	4b4a      	ldr	r3, [pc, #296]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016b3c:	f240 4239 	movw	r2, #1081	; 0x439
 8016b40:	494c      	ldr	r1, [pc, #304]	; (8016c74 <tcp_enqueue_flags+0x1cc>)
 8016b42:	484a      	ldr	r0, [pc, #296]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016b44:	f005 f8e2 	bl	801bd0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016b4c:	78fa      	ldrb	r2, [r7, #3]
 8016b4e:	7ffb      	ldrb	r3, [r7, #31]
 8016b50:	9300      	str	r3, [sp, #0]
 8016b52:	460b      	mov	r3, r1
 8016b54:	6939      	ldr	r1, [r7, #16]
 8016b56:	6878      	ldr	r0, [r7, #4]
 8016b58:	f7ff f918 	bl	8015d8c <tcp_create_segment>
 8016b5c:	60f8      	str	r0, [r7, #12]
 8016b5e:	68fb      	ldr	r3, [r7, #12]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d109      	bne.n	8016b78 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	8b5b      	ldrh	r3, [r3, #26]
 8016b68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b6c:	b29a      	uxth	r2, r3
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016b72:	f04f 33ff 	mov.w	r3, #4294967295
 8016b76:	e070      	b.n	8016c5a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	f003 0303 	and.w	r3, r3, #3
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d006      	beq.n	8016b92 <tcp_enqueue_flags+0xea>
 8016b84:	4b37      	ldr	r3, [pc, #220]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016b86:	f240 4242 	movw	r2, #1090	; 0x442
 8016b8a:	493b      	ldr	r1, [pc, #236]	; (8016c78 <tcp_enqueue_flags+0x1d0>)
 8016b8c:	4837      	ldr	r0, [pc, #220]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016b8e:	f005 f8bd 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	891b      	ldrh	r3, [r3, #8]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d006      	beq.n	8016ba8 <tcp_enqueue_flags+0x100>
 8016b9a:	4b32      	ldr	r3, [pc, #200]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016b9c:	f240 4243 	movw	r2, #1091	; 0x443
 8016ba0:	4936      	ldr	r1, [pc, #216]	; (8016c7c <tcp_enqueue_flags+0x1d4>)
 8016ba2:	4832      	ldr	r0, [pc, #200]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016ba4:	f005 f8b2 	bl	801bd0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d103      	bne.n	8016bb8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	68fa      	ldr	r2, [r7, #12]
 8016bb4:	66da      	str	r2, [r3, #108]	; 0x6c
 8016bb6:	e00d      	b.n	8016bd4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bbc:	61bb      	str	r3, [r7, #24]
 8016bbe:	e002      	b.n	8016bc6 <tcp_enqueue_flags+0x11e>
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	61bb      	str	r3, [r7, #24]
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d1f8      	bne.n	8016bc0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016bce:	69bb      	ldr	r3, [r7, #24]
 8016bd0:	68fa      	ldr	r2, [r7, #12]
 8016bd2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	2200      	movs	r2, #0
 8016bd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016bdc:	78fb      	ldrb	r3, [r7, #3]
 8016bde:	f003 0302 	and.w	r3, r3, #2
 8016be2:	2b00      	cmp	r3, #0
 8016be4:	d104      	bne.n	8016bf0 <tcp_enqueue_flags+0x148>
 8016be6:	78fb      	ldrb	r3, [r7, #3]
 8016be8:	f003 0301 	and.w	r3, r3, #1
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	d004      	beq.n	8016bfa <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bf4:	1c5a      	adds	r2, r3, #1
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016bfa:	78fb      	ldrb	r3, [r7, #3]
 8016bfc:	f003 0301 	and.w	r3, r3, #1
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d006      	beq.n	8016c12 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	8b5b      	ldrh	r3, [r3, #26]
 8016c08:	f043 0320 	orr.w	r3, r3, #32
 8016c0c:	b29a      	uxth	r2, r3
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016c12:	68fb      	ldr	r3, [r7, #12]
 8016c14:	685b      	ldr	r3, [r3, #4]
 8016c16:	4618      	mov	r0, r3
 8016c18:	f7fa fdd6 	bl	80117c8 <pbuf_clen>
 8016c1c:	4603      	mov	r3, r0
 8016c1e:	461a      	mov	r2, r3
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c26:	4413      	add	r3, r2
 8016c28:	b29a      	uxth	r2, r3
 8016c2a:	687b      	ldr	r3, [r7, #4]
 8016c2c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c36:	2b00      	cmp	r3, #0
 8016c38:	d00e      	beq.n	8016c58 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	d10a      	bne.n	8016c58 <tcp_enqueue_flags+0x1b0>
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d106      	bne.n	8016c58 <tcp_enqueue_flags+0x1b0>
 8016c4a:	4b06      	ldr	r3, [pc, #24]	; (8016c64 <tcp_enqueue_flags+0x1bc>)
 8016c4c:	f240 4265 	movw	r2, #1125	; 0x465
 8016c50:	490b      	ldr	r1, [pc, #44]	; (8016c80 <tcp_enqueue_flags+0x1d8>)
 8016c52:	4806      	ldr	r0, [pc, #24]	; (8016c6c <tcp_enqueue_flags+0x1c4>)
 8016c54:	f005 f85a 	bl	801bd0c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016c58:	2300      	movs	r3, #0
}
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	3720      	adds	r7, #32
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	08020848 	.word	0x08020848
 8016c68:	08020c6c 	.word	0x08020c6c
 8016c6c:	0802089c 	.word	0x0802089c
 8016c70:	08020cc4 	.word	0x08020cc4
 8016c74:	08020ce4 	.word	0x08020ce4
 8016c78:	08020d20 	.word	0x08020d20
 8016c7c:	08020d38 	.word	0x08020d38
 8016c80:	08020d64 	.word	0x08020d64

08016c84 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c84:	b5b0      	push	{r4, r5, r7, lr}
 8016c86:	b08a      	sub	sp, #40	; 0x28
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d106      	bne.n	8016ca0 <tcp_output+0x1c>
 8016c92:	4b9e      	ldr	r3, [pc, #632]	; (8016f0c <tcp_output+0x288>)
 8016c94:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c98:	499d      	ldr	r1, [pc, #628]	; (8016f10 <tcp_output+0x28c>)
 8016c9a:	489e      	ldr	r0, [pc, #632]	; (8016f14 <tcp_output+0x290>)
 8016c9c:	f005 f836 	bl	801bd0c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	7d1b      	ldrb	r3, [r3, #20]
 8016ca4:	2b01      	cmp	r3, #1
 8016ca6:	d106      	bne.n	8016cb6 <tcp_output+0x32>
 8016ca8:	4b98      	ldr	r3, [pc, #608]	; (8016f0c <tcp_output+0x288>)
 8016caa:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016cae:	499a      	ldr	r1, [pc, #616]	; (8016f18 <tcp_output+0x294>)
 8016cb0:	4898      	ldr	r0, [pc, #608]	; (8016f14 <tcp_output+0x290>)
 8016cb2:	f005 f82b 	bl	801bd0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016cb6:	4b99      	ldr	r3, [pc, #612]	; (8016f1c <tcp_output+0x298>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	687a      	ldr	r2, [r7, #4]
 8016cbc:	429a      	cmp	r2, r3
 8016cbe:	d101      	bne.n	8016cc4 <tcp_output+0x40>
    return ERR_OK;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	e1ce      	b.n	8017062 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016cc4:	687b      	ldr	r3, [r7, #4]
 8016cc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016cd0:	4293      	cmp	r3, r2
 8016cd2:	bf28      	it	cs
 8016cd4:	4613      	movcs	r3, r2
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016cda:	687b      	ldr	r3, [r7, #4]
 8016cdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cde:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	d10b      	bne.n	8016cfe <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	8b5b      	ldrh	r3, [r3, #26]
 8016cea:	f003 0302 	and.w	r3, r3, #2
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	f000 81aa 	beq.w	8017048 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016cf4:	6878      	ldr	r0, [r7, #4]
 8016cf6:	f000 fdcb 	bl	8017890 <tcp_send_empty_ack>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	e1b1      	b.n	8017062 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016cfe:	6879      	ldr	r1, [r7, #4]
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	3304      	adds	r3, #4
 8016d04:	461a      	mov	r2, r3
 8016d06:	6878      	ldr	r0, [r7, #4]
 8016d08:	f7ff f824 	bl	8015d54 <tcp_route>
 8016d0c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	d102      	bne.n	8016d1a <tcp_output+0x96>
    return ERR_RTE;
 8016d14:	f06f 0303 	mvn.w	r3, #3
 8016d18:	e1a3      	b.n	8017062 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d003      	beq.n	8016d28 <tcp_output+0xa4>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	2b00      	cmp	r3, #0
 8016d26:	d111      	bne.n	8016d4c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016d28:	697b      	ldr	r3, [r7, #20]
 8016d2a:	2b00      	cmp	r3, #0
 8016d2c:	d002      	beq.n	8016d34 <tcp_output+0xb0>
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	3304      	adds	r3, #4
 8016d32:	e000      	b.n	8016d36 <tcp_output+0xb2>
 8016d34:	2300      	movs	r3, #0
 8016d36:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d102      	bne.n	8016d44 <tcp_output+0xc0>
      return ERR_RTE;
 8016d3e:	f06f 0303 	mvn.w	r3, #3
 8016d42:	e18e      	b.n	8017062 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016d44:	693b      	ldr	r3, [r7, #16]
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4e:	68db      	ldr	r3, [r3, #12]
 8016d50:	685b      	ldr	r3, [r3, #4]
 8016d52:	4618      	mov	r0, r3
 8016d54:	f7f9 f8e1 	bl	800ff1a <lwip_htonl>
 8016d58:	4602      	mov	r2, r0
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d5e:	1ad3      	subs	r3, r2, r3
 8016d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d62:	8912      	ldrh	r2, [r2, #8]
 8016d64:	4413      	add	r3, r2
 8016d66:	69ba      	ldr	r2, [r7, #24]
 8016d68:	429a      	cmp	r2, r3
 8016d6a:	d227      	bcs.n	8016dbc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d72:	461a      	mov	r2, r3
 8016d74:	69bb      	ldr	r3, [r7, #24]
 8016d76:	4293      	cmp	r3, r2
 8016d78:	d114      	bne.n	8016da4 <tcp_output+0x120>
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d110      	bne.n	8016da4 <tcp_output+0x120>
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d10b      	bne.n	8016da4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	2201      	movs	r2, #1
 8016d98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	2200      	movs	r2, #0
 8016da0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	8b5b      	ldrh	r3, [r3, #26]
 8016da8:	f003 0302 	and.w	r3, r3, #2
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	f000 814d 	beq.w	801704c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016db2:	6878      	ldr	r0, [r7, #4]
 8016db4:	f000 fd6c 	bl	8017890 <tcp_send_empty_ack>
 8016db8:	4603      	mov	r3, r0
 8016dba:	e152      	b.n	8017062 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	2200      	movs	r2, #0
 8016dc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016dc8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016dca:	6a3b      	ldr	r3, [r7, #32]
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	f000 811c 	beq.w	801700a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016dd2:	e002      	b.n	8016dda <tcp_output+0x156>
 8016dd4:	6a3b      	ldr	r3, [r7, #32]
 8016dd6:	681b      	ldr	r3, [r3, #0]
 8016dd8:	623b      	str	r3, [r7, #32]
 8016dda:	6a3b      	ldr	r3, [r7, #32]
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d1f8      	bne.n	8016dd4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016de2:	e112      	b.n	801700a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016de6:	68db      	ldr	r3, [r3, #12]
 8016de8:	899b      	ldrh	r3, [r3, #12]
 8016dea:	b29b      	uxth	r3, r3
 8016dec:	4618      	mov	r0, r3
 8016dee:	f7f9 f87f 	bl	800fef0 <lwip_htons>
 8016df2:	4603      	mov	r3, r0
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	f003 0304 	and.w	r3, r3, #4
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d006      	beq.n	8016e0c <tcp_output+0x188>
 8016dfe:	4b43      	ldr	r3, [pc, #268]	; (8016f0c <tcp_output+0x288>)
 8016e00:	f240 5236 	movw	r2, #1334	; 0x536
 8016e04:	4946      	ldr	r1, [pc, #280]	; (8016f20 <tcp_output+0x29c>)
 8016e06:	4843      	ldr	r0, [pc, #268]	; (8016f14 <tcp_output+0x290>)
 8016e08:	f004 ff80 	bl	801bd0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d01f      	beq.n	8016e54 <tcp_output+0x1d0>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	8b5b      	ldrh	r3, [r3, #26]
 8016e18:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d119      	bne.n	8016e54 <tcp_output+0x1d0>
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d00b      	beq.n	8016e40 <tcp_output+0x1bc>
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d110      	bne.n	8016e54 <tcp_output+0x1d0>
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e36:	891a      	ldrh	r2, [r3, #8]
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016e3c:	429a      	cmp	r2, r3
 8016e3e:	d209      	bcs.n	8016e54 <tcp_output+0x1d0>
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d004      	beq.n	8016e54 <tcp_output+0x1d0>
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e50:	2b08      	cmp	r3, #8
 8016e52:	d901      	bls.n	8016e58 <tcp_output+0x1d4>
 8016e54:	2301      	movs	r3, #1
 8016e56:	e000      	b.n	8016e5a <tcp_output+0x1d6>
 8016e58:	2300      	movs	r3, #0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d106      	bne.n	8016e6c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	8b5b      	ldrh	r3, [r3, #26]
 8016e62:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	f000 80e4 	beq.w	8017034 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	7d1b      	ldrb	r3, [r3, #20]
 8016e70:	2b02      	cmp	r3, #2
 8016e72:	d00d      	beq.n	8016e90 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e76:	68db      	ldr	r3, [r3, #12]
 8016e78:	899b      	ldrh	r3, [r3, #12]
 8016e7a:	b29c      	uxth	r4, r3
 8016e7c:	2010      	movs	r0, #16
 8016e7e:	f7f9 f837 	bl	800fef0 <lwip_htons>
 8016e82:	4603      	mov	r3, r0
 8016e84:	461a      	mov	r2, r3
 8016e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e88:	68db      	ldr	r3, [r3, #12]
 8016e8a:	4322      	orrs	r2, r4
 8016e8c:	b292      	uxth	r2, r2
 8016e8e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e90:	697a      	ldr	r2, [r7, #20]
 8016e92:	6879      	ldr	r1, [r7, #4]
 8016e94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e96:	f000 f909 	bl	80170ac <tcp_output_segment>
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d009      	beq.n	8016eba <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	8b5b      	ldrh	r3, [r3, #26]
 8016eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016eae:	b29a      	uxth	r2, r3
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	835a      	strh	r2, [r3, #26]
      return err;
 8016eb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016eb8:	e0d3      	b.n	8017062 <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ebc:	681a      	ldr	r2, [r3, #0]
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	7d1b      	ldrb	r3, [r3, #20]
 8016ec6:	2b02      	cmp	r3, #2
 8016ec8:	d006      	beq.n	8016ed8 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	8b5b      	ldrh	r3, [r3, #26]
 8016ece:	f023 0303 	bic.w	r3, r3, #3
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eda:	68db      	ldr	r3, [r3, #12]
 8016edc:	685b      	ldr	r3, [r3, #4]
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f9 f81b 	bl	800ff1a <lwip_htonl>
 8016ee4:	4604      	mov	r4, r0
 8016ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ee8:	891b      	ldrh	r3, [r3, #8]
 8016eea:	461d      	mov	r5, r3
 8016eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eee:	68db      	ldr	r3, [r3, #12]
 8016ef0:	899b      	ldrh	r3, [r3, #12]
 8016ef2:	b29b      	uxth	r3, r3
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f7f8 fffb 	bl	800fef0 <lwip_htons>
 8016efa:	4603      	mov	r3, r0
 8016efc:	b2db      	uxtb	r3, r3
 8016efe:	f003 0303 	and.w	r3, r3, #3
 8016f02:	2b00      	cmp	r3, #0
 8016f04:	d00e      	beq.n	8016f24 <tcp_output+0x2a0>
 8016f06:	2301      	movs	r3, #1
 8016f08:	e00d      	b.n	8016f26 <tcp_output+0x2a2>
 8016f0a:	bf00      	nop
 8016f0c:	08020848 	.word	0x08020848
 8016f10:	08020d8c 	.word	0x08020d8c
 8016f14:	0802089c 	.word	0x0802089c
 8016f18:	08020da4 	.word	0x08020da4
 8016f1c:	2000d7d0 	.word	0x2000d7d0
 8016f20:	08020dcc 	.word	0x08020dcc
 8016f24:	2300      	movs	r3, #0
 8016f26:	442b      	add	r3, r5
 8016f28:	4423      	add	r3, r4
 8016f2a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f30:	68bb      	ldr	r3, [r7, #8]
 8016f32:	1ad3      	subs	r3, r2, r3
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	da02      	bge.n	8016f3e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	68ba      	ldr	r2, [r7, #8]
 8016f3c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f40:	891b      	ldrh	r3, [r3, #8]
 8016f42:	461c      	mov	r4, r3
 8016f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f46:	68db      	ldr	r3, [r3, #12]
 8016f48:	899b      	ldrh	r3, [r3, #12]
 8016f4a:	b29b      	uxth	r3, r3
 8016f4c:	4618      	mov	r0, r3
 8016f4e:	f7f8 ffcf 	bl	800fef0 <lwip_htons>
 8016f52:	4603      	mov	r3, r0
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	f003 0303 	and.w	r3, r3, #3
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d001      	beq.n	8016f62 <tcp_output+0x2de>
 8016f5e:	2301      	movs	r3, #1
 8016f60:	e000      	b.n	8016f64 <tcp_output+0x2e0>
 8016f62:	2300      	movs	r3, #0
 8016f64:	4423      	add	r3, r4
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d049      	beq.n	8016ffe <tcp_output+0x37a>
      seg->next = NULL;
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	2200      	movs	r2, #0
 8016f6e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	d105      	bne.n	8016f84 <tcp_output+0x300>
        pcb->unacked = seg;
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f7c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f80:	623b      	str	r3, [r7, #32]
 8016f82:	e03f      	b.n	8017004 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f86:	68db      	ldr	r3, [r3, #12]
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7f8 ffc5 	bl	800ff1a <lwip_htonl>
 8016f90:	4604      	mov	r4, r0
 8016f92:	6a3b      	ldr	r3, [r7, #32]
 8016f94:	68db      	ldr	r3, [r3, #12]
 8016f96:	685b      	ldr	r3, [r3, #4]
 8016f98:	4618      	mov	r0, r3
 8016f9a:	f7f8 ffbe 	bl	800ff1a <lwip_htonl>
 8016f9e:	4603      	mov	r3, r0
 8016fa0:	1ae3      	subs	r3, r4, r3
 8016fa2:	2b00      	cmp	r3, #0
 8016fa4:	da24      	bge.n	8016ff0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	3370      	adds	r3, #112	; 0x70
 8016faa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016fac:	e002      	b.n	8016fb4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016fae:	69fb      	ldr	r3, [r7, #28]
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016fb4:	69fb      	ldr	r3, [r7, #28]
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d011      	beq.n	8016fe0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016fbc:	69fb      	ldr	r3, [r7, #28]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	68db      	ldr	r3, [r3, #12]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7f8 ffa8 	bl	800ff1a <lwip_htonl>
 8016fca:	4604      	mov	r4, r0
 8016fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fce:	68db      	ldr	r3, [r3, #12]
 8016fd0:	685b      	ldr	r3, [r3, #4]
 8016fd2:	4618      	mov	r0, r3
 8016fd4:	f7f8 ffa1 	bl	800ff1a <lwip_htonl>
 8016fd8:	4603      	mov	r3, r0
 8016fda:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	dbe6      	blt.n	8016fae <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016fe0:	69fb      	ldr	r3, [r7, #28]
 8016fe2:	681a      	ldr	r2, [r3, #0]
 8016fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016fe8:	69fb      	ldr	r3, [r7, #28]
 8016fea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fec:	601a      	str	r2, [r3, #0]
 8016fee:	e009      	b.n	8017004 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016ff0:	6a3b      	ldr	r3, [r7, #32]
 8016ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ff4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016ff6:	6a3b      	ldr	r3, [r7, #32]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	623b      	str	r3, [r7, #32]
 8016ffc:	e002      	b.n	8017004 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016ffe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017000:	f7fb ff1d 	bl	8012e3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017008:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801700c:	2b00      	cmp	r3, #0
 801700e:	d012      	beq.n	8017036 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017012:	68db      	ldr	r3, [r3, #12]
 8017014:	685b      	ldr	r3, [r3, #4]
 8017016:	4618      	mov	r0, r3
 8017018:	f7f8 ff7f 	bl	800ff1a <lwip_htonl>
 801701c:	4602      	mov	r2, r0
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017022:	1ad3      	subs	r3, r2, r3
 8017024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017026:	8912      	ldrh	r2, [r2, #8]
 8017028:	4413      	add	r3, r2
  while (seg != NULL &&
 801702a:	69ba      	ldr	r2, [r7, #24]
 801702c:	429a      	cmp	r2, r3
 801702e:	f4bf aed9 	bcs.w	8016de4 <tcp_output+0x160>
 8017032:	e000      	b.n	8017036 <tcp_output+0x3b2>
      break;
 8017034:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801703a:	2b00      	cmp	r3, #0
 801703c:	d108      	bne.n	8017050 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	2200      	movs	r2, #0
 8017042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017046:	e004      	b.n	8017052 <tcp_output+0x3ce>
    goto output_done;
 8017048:	bf00      	nop
 801704a:	e002      	b.n	8017052 <tcp_output+0x3ce>
    goto output_done;
 801704c:	bf00      	nop
 801704e:	e000      	b.n	8017052 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017050:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017052:	687b      	ldr	r3, [r7, #4]
 8017054:	8b5b      	ldrh	r3, [r3, #26]
 8017056:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801705a:	b29a      	uxth	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017060:	2300      	movs	r3, #0
}
 8017062:	4618      	mov	r0, r3
 8017064:	3728      	adds	r7, #40	; 0x28
 8017066:	46bd      	mov	sp, r7
 8017068:	bdb0      	pop	{r4, r5, r7, pc}
 801706a:	bf00      	nop

0801706c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801706c:	b580      	push	{r7, lr}
 801706e:	b082      	sub	sp, #8
 8017070:	af00      	add	r7, sp, #0
 8017072:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2b00      	cmp	r3, #0
 8017078:	d106      	bne.n	8017088 <tcp_output_segment_busy+0x1c>
 801707a:	4b09      	ldr	r3, [pc, #36]	; (80170a0 <tcp_output_segment_busy+0x34>)
 801707c:	f240 529a 	movw	r2, #1434	; 0x59a
 8017080:	4908      	ldr	r1, [pc, #32]	; (80170a4 <tcp_output_segment_busy+0x38>)
 8017082:	4809      	ldr	r0, [pc, #36]	; (80170a8 <tcp_output_segment_busy+0x3c>)
 8017084:	f004 fe42 	bl	801bd0c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	685b      	ldr	r3, [r3, #4]
 801708c:	7b9b      	ldrb	r3, [r3, #14]
 801708e:	2b01      	cmp	r3, #1
 8017090:	d001      	beq.n	8017096 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017092:	2301      	movs	r3, #1
 8017094:	e000      	b.n	8017098 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017096:	2300      	movs	r3, #0
}
 8017098:	4618      	mov	r0, r3
 801709a:	3708      	adds	r7, #8
 801709c:	46bd      	mov	sp, r7
 801709e:	bd80      	pop	{r7, pc}
 80170a0:	08020848 	.word	0x08020848
 80170a4:	08020de4 	.word	0x08020de4
 80170a8:	0802089c 	.word	0x0802089c

080170ac <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80170ac:	b5b0      	push	{r4, r5, r7, lr}
 80170ae:	b08c      	sub	sp, #48	; 0x30
 80170b0:	af04      	add	r7, sp, #16
 80170b2:	60f8      	str	r0, [r7, #12]
 80170b4:	60b9      	str	r1, [r7, #8]
 80170b6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d106      	bne.n	80170cc <tcp_output_segment+0x20>
 80170be:	4b63      	ldr	r3, [pc, #396]	; (801724c <tcp_output_segment+0x1a0>)
 80170c0:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80170c4:	4962      	ldr	r1, [pc, #392]	; (8017250 <tcp_output_segment+0x1a4>)
 80170c6:	4863      	ldr	r0, [pc, #396]	; (8017254 <tcp_output_segment+0x1a8>)
 80170c8:	f004 fe20 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80170cc:	68bb      	ldr	r3, [r7, #8]
 80170ce:	2b00      	cmp	r3, #0
 80170d0:	d106      	bne.n	80170e0 <tcp_output_segment+0x34>
 80170d2:	4b5e      	ldr	r3, [pc, #376]	; (801724c <tcp_output_segment+0x1a0>)
 80170d4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80170d8:	495f      	ldr	r1, [pc, #380]	; (8017258 <tcp_output_segment+0x1ac>)
 80170da:	485e      	ldr	r0, [pc, #376]	; (8017254 <tcp_output_segment+0x1a8>)
 80170dc:	f004 fe16 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d106      	bne.n	80170f4 <tcp_output_segment+0x48>
 80170e6:	4b59      	ldr	r3, [pc, #356]	; (801724c <tcp_output_segment+0x1a0>)
 80170e8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80170ec:	495b      	ldr	r1, [pc, #364]	; (801725c <tcp_output_segment+0x1b0>)
 80170ee:	4859      	ldr	r0, [pc, #356]	; (8017254 <tcp_output_segment+0x1a8>)
 80170f0:	f004 fe0c 	bl	801bd0c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80170f4:	68f8      	ldr	r0, [r7, #12]
 80170f6:	f7ff ffb9 	bl	801706c <tcp_output_segment_busy>
 80170fa:	4603      	mov	r3, r0
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d001      	beq.n	8017104 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017100:	2300      	movs	r3, #0
 8017102:	e09f      	b.n	8017244 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8017104:	68bb      	ldr	r3, [r7, #8]
 8017106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	68dc      	ldr	r4, [r3, #12]
 801710c:	4610      	mov	r0, r2
 801710e:	f7f8 ff04 	bl	800ff1a <lwip_htonl>
 8017112:	4603      	mov	r3, r0
 8017114:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017116:	68bb      	ldr	r3, [r7, #8]
 8017118:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	68dc      	ldr	r4, [r3, #12]
 801711e:	4610      	mov	r0, r2
 8017120:	f7f8 fee6 	bl	800fef0 <lwip_htons>
 8017124:	4603      	mov	r3, r0
 8017126:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801712c:	68ba      	ldr	r2, [r7, #8]
 801712e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017130:	441a      	add	r2, r3
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017136:	68fb      	ldr	r3, [r7, #12]
 8017138:	68db      	ldr	r3, [r3, #12]
 801713a:	3314      	adds	r3, #20
 801713c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	7a9b      	ldrb	r3, [r3, #10]
 8017142:	f003 0301 	and.w	r3, r3, #1
 8017146:	2b00      	cmp	r3, #0
 8017148:	d015      	beq.n	8017176 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801714a:	68bb      	ldr	r3, [r7, #8]
 801714c:	3304      	adds	r3, #4
 801714e:	461a      	mov	r2, r3
 8017150:	6879      	ldr	r1, [r7, #4]
 8017152:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017156:	f7fc fa37 	bl	80135c8 <tcp_eff_send_mss_netif>
 801715a:	4603      	mov	r3, r0
 801715c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801715e:	8b7b      	ldrh	r3, [r7, #26]
 8017160:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017164:	4618      	mov	r0, r3
 8017166:	f7f8 fed8 	bl	800ff1a <lwip_htonl>
 801716a:	4602      	mov	r2, r0
 801716c:	69fb      	ldr	r3, [r7, #28]
 801716e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017170:	69fb      	ldr	r3, [r7, #28]
 8017172:	3304      	adds	r3, #4
 8017174:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017176:	68bb      	ldr	r3, [r7, #8]
 8017178:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801717c:	2b00      	cmp	r3, #0
 801717e:	da02      	bge.n	8017186 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017180:	68bb      	ldr	r3, [r7, #8]
 8017182:	2200      	movs	r2, #0
 8017184:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801718a:	2b00      	cmp	r3, #0
 801718c:	d10c      	bne.n	80171a8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801718e:	4b34      	ldr	r3, [pc, #208]	; (8017260 <tcp_output_segment+0x1b4>)
 8017190:	681a      	ldr	r2, [r3, #0]
 8017192:	68bb      	ldr	r3, [r7, #8]
 8017194:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	68db      	ldr	r3, [r3, #12]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	4618      	mov	r0, r3
 801719e:	f7f8 febc 	bl	800ff1a <lwip_htonl>
 80171a2:	4602      	mov	r2, r0
 80171a4:	68bb      	ldr	r3, [r7, #8]
 80171a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	68da      	ldr	r2, [r3, #12]
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	685b      	ldr	r3, [r3, #4]
 80171b0:	685b      	ldr	r3, [r3, #4]
 80171b2:	1ad3      	subs	r3, r2, r3
 80171b4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80171b6:	68fb      	ldr	r3, [r7, #12]
 80171b8:	685b      	ldr	r3, [r3, #4]
 80171ba:	8959      	ldrh	r1, [r3, #10]
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	685b      	ldr	r3, [r3, #4]
 80171c0:	8b3a      	ldrh	r2, [r7, #24]
 80171c2:	1a8a      	subs	r2, r1, r2
 80171c4:	b292      	uxth	r2, r2
 80171c6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	685b      	ldr	r3, [r3, #4]
 80171cc:	8919      	ldrh	r1, [r3, #8]
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	8b3a      	ldrh	r2, [r7, #24]
 80171d4:	1a8a      	subs	r2, r1, r2
 80171d6:	b292      	uxth	r2, r2
 80171d8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	685b      	ldr	r3, [r3, #4]
 80171de:	68fa      	ldr	r2, [r7, #12]
 80171e0:	68d2      	ldr	r2, [r2, #12]
 80171e2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	2200      	movs	r2, #0
 80171ea:	741a      	strb	r2, [r3, #16]
 80171ec:	2200      	movs	r2, #0
 80171ee:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	68db      	ldr	r3, [r3, #12]
 80171f4:	f103 0214 	add.w	r2, r3, #20
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	7a9b      	ldrb	r3, [r3, #10]
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	f003 0304 	and.w	r3, r3, #4
 8017202:	4413      	add	r3, r2
 8017204:	69fa      	ldr	r2, [r7, #28]
 8017206:	429a      	cmp	r2, r3
 8017208:	d006      	beq.n	8017218 <tcp_output_segment+0x16c>
 801720a:	4b10      	ldr	r3, [pc, #64]	; (801724c <tcp_output_segment+0x1a0>)
 801720c:	f240 621c 	movw	r2, #1564	; 0x61c
 8017210:	4914      	ldr	r1, [pc, #80]	; (8017264 <tcp_output_segment+0x1b8>)
 8017212:	4810      	ldr	r0, [pc, #64]	; (8017254 <tcp_output_segment+0x1a8>)
 8017214:	f004 fd7a 	bl	801bd0c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	6858      	ldr	r0, [r3, #4]
 801721c:	68b9      	ldr	r1, [r7, #8]
 801721e:	68bb      	ldr	r3, [r7, #8]
 8017220:	1d1c      	adds	r4, r3, #4
 8017222:	68bb      	ldr	r3, [r7, #8]
 8017224:	7add      	ldrb	r5, [r3, #11]
 8017226:	68bb      	ldr	r3, [r7, #8]
 8017228:	7a9b      	ldrb	r3, [r3, #10]
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	9202      	str	r2, [sp, #8]
 801722e:	2206      	movs	r2, #6
 8017230:	9201      	str	r2, [sp, #4]
 8017232:	9300      	str	r3, [sp, #0]
 8017234:	462b      	mov	r3, r5
 8017236:	4622      	mov	r2, r4
 8017238:	f002 fd96 	bl	8019d68 <ip4_output_if>
 801723c:	4603      	mov	r3, r0
 801723e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017240:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017244:	4618      	mov	r0, r3
 8017246:	3720      	adds	r7, #32
 8017248:	46bd      	mov	sp, r7
 801724a:	bdb0      	pop	{r4, r5, r7, pc}
 801724c:	08020848 	.word	0x08020848
 8017250:	08020e0c 	.word	0x08020e0c
 8017254:	0802089c 	.word	0x0802089c
 8017258:	08020e2c 	.word	0x08020e2c
 801725c:	08020e4c 	.word	0x08020e4c
 8017260:	2000d7c0 	.word	0x2000d7c0
 8017264:	08020e70 	.word	0x08020e70

08017268 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017268:	b5b0      	push	{r4, r5, r7, lr}
 801726a:	b084      	sub	sp, #16
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	2b00      	cmp	r3, #0
 8017274:	d106      	bne.n	8017284 <tcp_rexmit_rto_prepare+0x1c>
 8017276:	4b31      	ldr	r3, [pc, #196]	; (801733c <tcp_rexmit_rto_prepare+0xd4>)
 8017278:	f240 6263 	movw	r2, #1635	; 0x663
 801727c:	4930      	ldr	r1, [pc, #192]	; (8017340 <tcp_rexmit_rto_prepare+0xd8>)
 801727e:	4831      	ldr	r0, [pc, #196]	; (8017344 <tcp_rexmit_rto_prepare+0xdc>)
 8017280:	f004 fd44 	bl	801bd0c <iprintf>

  if (pcb->unacked == NULL) {
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017288:	2b00      	cmp	r3, #0
 801728a:	d102      	bne.n	8017292 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801728c:	f06f 0305 	mvn.w	r3, #5
 8017290:	e050      	b.n	8017334 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017292:	687b      	ldr	r3, [r7, #4]
 8017294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017296:	60fb      	str	r3, [r7, #12]
 8017298:	e00b      	b.n	80172b2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801729a:	68f8      	ldr	r0, [r7, #12]
 801729c:	f7ff fee6 	bl	801706c <tcp_output_segment_busy>
 80172a0:	4603      	mov	r3, r0
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d002      	beq.n	80172ac <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80172a6:	f06f 0305 	mvn.w	r3, #5
 80172aa:	e043      	b.n	8017334 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	681b      	ldr	r3, [r3, #0]
 80172b0:	60fb      	str	r3, [r7, #12]
 80172b2:	68fb      	ldr	r3, [r7, #12]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	2b00      	cmp	r3, #0
 80172b8:	d1ef      	bne.n	801729a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80172ba:	68f8      	ldr	r0, [r7, #12]
 80172bc:	f7ff fed6 	bl	801706c <tcp_output_segment_busy>
 80172c0:	4603      	mov	r3, r0
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d002      	beq.n	80172cc <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80172c6:	f06f 0305 	mvn.w	r3, #5
 80172ca:	e033      	b.n	8017334 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80172d0:	68fb      	ldr	r3, [r7, #12]
 80172d2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	2200      	movs	r2, #0
 80172e0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	8b5b      	ldrh	r3, [r3, #26]
 80172e6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80172ea:	b29a      	uxth	r2, r3
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80172f0:	68fb      	ldr	r3, [r7, #12]
 80172f2:	68db      	ldr	r3, [r3, #12]
 80172f4:	685b      	ldr	r3, [r3, #4]
 80172f6:	4618      	mov	r0, r3
 80172f8:	f7f8 fe0f 	bl	800ff1a <lwip_htonl>
 80172fc:	4604      	mov	r4, r0
 80172fe:	68fb      	ldr	r3, [r7, #12]
 8017300:	891b      	ldrh	r3, [r3, #8]
 8017302:	461d      	mov	r5, r3
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	68db      	ldr	r3, [r3, #12]
 8017308:	899b      	ldrh	r3, [r3, #12]
 801730a:	b29b      	uxth	r3, r3
 801730c:	4618      	mov	r0, r3
 801730e:	f7f8 fdef 	bl	800fef0 <lwip_htons>
 8017312:	4603      	mov	r3, r0
 8017314:	b2db      	uxtb	r3, r3
 8017316:	f003 0303 	and.w	r3, r3, #3
 801731a:	2b00      	cmp	r3, #0
 801731c:	d001      	beq.n	8017322 <tcp_rexmit_rto_prepare+0xba>
 801731e:	2301      	movs	r3, #1
 8017320:	e000      	b.n	8017324 <tcp_rexmit_rto_prepare+0xbc>
 8017322:	2300      	movs	r3, #0
 8017324:	442b      	add	r3, r5
 8017326:	18e2      	adds	r2, r4, r3
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2200      	movs	r2, #0
 8017330:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017332:	2300      	movs	r3, #0
}
 8017334:	4618      	mov	r0, r3
 8017336:	3710      	adds	r7, #16
 8017338:	46bd      	mov	sp, r7
 801733a:	bdb0      	pop	{r4, r5, r7, pc}
 801733c:	08020848 	.word	0x08020848
 8017340:	08020e84 	.word	0x08020e84
 8017344:	0802089c 	.word	0x0802089c

08017348 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2b00      	cmp	r3, #0
 8017354:	d106      	bne.n	8017364 <tcp_rexmit_rto_commit+0x1c>
 8017356:	4b0d      	ldr	r3, [pc, #52]	; (801738c <tcp_rexmit_rto_commit+0x44>)
 8017358:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801735c:	490c      	ldr	r1, [pc, #48]	; (8017390 <tcp_rexmit_rto_commit+0x48>)
 801735e:	480d      	ldr	r0, [pc, #52]	; (8017394 <tcp_rexmit_rto_commit+0x4c>)
 8017360:	f004 fcd4 	bl	801bd0c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801736a:	2bff      	cmp	r3, #255	; 0xff
 801736c:	d007      	beq.n	801737e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801736e:	687b      	ldr	r3, [r7, #4]
 8017370:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017374:	3301      	adds	r3, #1
 8017376:	b2da      	uxtb	r2, r3
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801737e:	6878      	ldr	r0, [r7, #4]
 8017380:	f7ff fc80 	bl	8016c84 <tcp_output>
}
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}
 801738c:	08020848 	.word	0x08020848
 8017390:	08020ea8 	.word	0x08020ea8
 8017394:	0802089c 	.word	0x0802089c

08017398 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d106      	bne.n	80173b4 <tcp_rexmit_rto+0x1c>
 80173a6:	4b0a      	ldr	r3, [pc, #40]	; (80173d0 <tcp_rexmit_rto+0x38>)
 80173a8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80173ac:	4909      	ldr	r1, [pc, #36]	; (80173d4 <tcp_rexmit_rto+0x3c>)
 80173ae:	480a      	ldr	r0, [pc, #40]	; (80173d8 <tcp_rexmit_rto+0x40>)
 80173b0:	f004 fcac 	bl	801bd0c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f7ff ff57 	bl	8017268 <tcp_rexmit_rto_prepare>
 80173ba:	4603      	mov	r3, r0
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d102      	bne.n	80173c6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80173c0:	6878      	ldr	r0, [r7, #4]
 80173c2:	f7ff ffc1 	bl	8017348 <tcp_rexmit_rto_commit>
  }
}
 80173c6:	bf00      	nop
 80173c8:	3708      	adds	r7, #8
 80173ca:	46bd      	mov	sp, r7
 80173cc:	bd80      	pop	{r7, pc}
 80173ce:	bf00      	nop
 80173d0:	08020848 	.word	0x08020848
 80173d4:	08020ecc 	.word	0x08020ecc
 80173d8:	0802089c 	.word	0x0802089c

080173dc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80173dc:	b590      	push	{r4, r7, lr}
 80173de:	b085      	sub	sp, #20
 80173e0:	af00      	add	r7, sp, #0
 80173e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d106      	bne.n	80173f8 <tcp_rexmit+0x1c>
 80173ea:	4b2f      	ldr	r3, [pc, #188]	; (80174a8 <tcp_rexmit+0xcc>)
 80173ec:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80173f0:	492e      	ldr	r1, [pc, #184]	; (80174ac <tcp_rexmit+0xd0>)
 80173f2:	482f      	ldr	r0, [pc, #188]	; (80174b0 <tcp_rexmit+0xd4>)
 80173f4:	f004 fc8a 	bl	801bd0c <iprintf>

  if (pcb->unacked == NULL) {
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	d102      	bne.n	8017406 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017400:	f06f 0305 	mvn.w	r3, #5
 8017404:	e04c      	b.n	80174a0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801740a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801740c:	68b8      	ldr	r0, [r7, #8]
 801740e:	f7ff fe2d 	bl	801706c <tcp_output_segment_busy>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	d002      	beq.n	801741e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017418:	f06f 0305 	mvn.w	r3, #5
 801741c:	e040      	b.n	80174a0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801741e:	68bb      	ldr	r3, [r7, #8]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	336c      	adds	r3, #108	; 0x6c
 801742a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801742c:	e002      	b.n	8017434 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801742e:	68fb      	ldr	r3, [r7, #12]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d011      	beq.n	8017460 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	681b      	ldr	r3, [r3, #0]
 8017440:	68db      	ldr	r3, [r3, #12]
 8017442:	685b      	ldr	r3, [r3, #4]
 8017444:	4618      	mov	r0, r3
 8017446:	f7f8 fd68 	bl	800ff1a <lwip_htonl>
 801744a:	4604      	mov	r4, r0
 801744c:	68bb      	ldr	r3, [r7, #8]
 801744e:	68db      	ldr	r3, [r3, #12]
 8017450:	685b      	ldr	r3, [r3, #4]
 8017452:	4618      	mov	r0, r3
 8017454:	f7f8 fd61 	bl	800ff1a <lwip_htonl>
 8017458:	4603      	mov	r3, r0
 801745a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801745c:	2b00      	cmp	r3, #0
 801745e:	dbe6      	blt.n	801742e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017460:	68fb      	ldr	r3, [r7, #12]
 8017462:	681a      	ldr	r2, [r3, #0]
 8017464:	68bb      	ldr	r3, [r7, #8]
 8017466:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801746e:	68bb      	ldr	r3, [r7, #8]
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d103      	bne.n	801747e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	2200      	movs	r2, #0
 801747a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017484:	2bff      	cmp	r3, #255	; 0xff
 8017486:	d007      	beq.n	8017498 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801748e:	3301      	adds	r3, #1
 8017490:	b2da      	uxtb	r2, r3
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	2200      	movs	r2, #0
 801749c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801749e:	2300      	movs	r3, #0
}
 80174a0:	4618      	mov	r0, r3
 80174a2:	3714      	adds	r7, #20
 80174a4:	46bd      	mov	sp, r7
 80174a6:	bd90      	pop	{r4, r7, pc}
 80174a8:	08020848 	.word	0x08020848
 80174ac:	08020ee8 	.word	0x08020ee8
 80174b0:	0802089c 	.word	0x0802089c

080174b4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80174b4:	b580      	push	{r7, lr}
 80174b6:	b082      	sub	sp, #8
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d106      	bne.n	80174d0 <tcp_rexmit_fast+0x1c>
 80174c2:	4b2a      	ldr	r3, [pc, #168]	; (801756c <tcp_rexmit_fast+0xb8>)
 80174c4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80174c8:	4929      	ldr	r1, [pc, #164]	; (8017570 <tcp_rexmit_fast+0xbc>)
 80174ca:	482a      	ldr	r0, [pc, #168]	; (8017574 <tcp_rexmit_fast+0xc0>)
 80174cc:	f004 fc1e 	bl	801bd0c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d045      	beq.n	8017564 <tcp_rexmit_fast+0xb0>
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	8b5b      	ldrh	r3, [r3, #26]
 80174dc:	f003 0304 	and.w	r3, r3, #4
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d13f      	bne.n	8017564 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f7ff ff79 	bl	80173dc <tcp_rexmit>
 80174ea:	4603      	mov	r3, r0
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d139      	bne.n	8017564 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174fc:	4293      	cmp	r3, r2
 80174fe:	bf28      	it	cs
 8017500:	4613      	movcs	r3, r2
 8017502:	b29b      	uxth	r3, r3
 8017504:	2b00      	cmp	r3, #0
 8017506:	da00      	bge.n	801750a <tcp_rexmit_fast+0x56>
 8017508:	3301      	adds	r3, #1
 801750a:	105b      	asrs	r3, r3, #1
 801750c:	b29a      	uxth	r2, r3
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801751a:	461a      	mov	r2, r3
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017520:	005b      	lsls	r3, r3, #1
 8017522:	429a      	cmp	r2, r3
 8017524:	d206      	bcs.n	8017534 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801752a:	005b      	lsls	r3, r3, #1
 801752c:	b29a      	uxth	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801753e:	4619      	mov	r1, r3
 8017540:	0049      	lsls	r1, r1, #1
 8017542:	440b      	add	r3, r1
 8017544:	b29b      	uxth	r3, r3
 8017546:	4413      	add	r3, r2
 8017548:	b29a      	uxth	r2, r3
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	8b5b      	ldrh	r3, [r3, #26]
 8017554:	f043 0304 	orr.w	r3, r3, #4
 8017558:	b29a      	uxth	r2, r3
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	2200      	movs	r2, #0
 8017562:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017564:	bf00      	nop
 8017566:	3708      	adds	r7, #8
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}
 801756c:	08020848 	.word	0x08020848
 8017570:	08020f00 	.word	0x08020f00
 8017574:	0802089c 	.word	0x0802089c

08017578 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b086      	sub	sp, #24
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	607b      	str	r3, [r7, #4]
 8017582:	460b      	mov	r3, r1
 8017584:	817b      	strh	r3, [r7, #10]
 8017586:	4613      	mov	r3, r2
 8017588:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801758a:	897a      	ldrh	r2, [r7, #10]
 801758c:	893b      	ldrh	r3, [r7, #8]
 801758e:	4413      	add	r3, r2
 8017590:	b29b      	uxth	r3, r3
 8017592:	3314      	adds	r3, #20
 8017594:	b29b      	uxth	r3, r3
 8017596:	f44f 7220 	mov.w	r2, #640	; 0x280
 801759a:	4619      	mov	r1, r3
 801759c:	2022      	movs	r0, #34	; 0x22
 801759e:	f7f9 fd6f 	bl	8011080 <pbuf_alloc>
 80175a2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80175a4:	697b      	ldr	r3, [r7, #20]
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	d04d      	beq.n	8017646 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80175aa:	897b      	ldrh	r3, [r7, #10]
 80175ac:	3313      	adds	r3, #19
 80175ae:	697a      	ldr	r2, [r7, #20]
 80175b0:	8952      	ldrh	r2, [r2, #10]
 80175b2:	4293      	cmp	r3, r2
 80175b4:	db06      	blt.n	80175c4 <tcp_output_alloc_header_common+0x4c>
 80175b6:	4b26      	ldr	r3, [pc, #152]	; (8017650 <tcp_output_alloc_header_common+0xd8>)
 80175b8:	f240 7223 	movw	r2, #1827	; 0x723
 80175bc:	4925      	ldr	r1, [pc, #148]	; (8017654 <tcp_output_alloc_header_common+0xdc>)
 80175be:	4826      	ldr	r0, [pc, #152]	; (8017658 <tcp_output_alloc_header_common+0xe0>)
 80175c0:	f004 fba4 	bl	801bd0c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80175c4:	697b      	ldr	r3, [r7, #20]
 80175c6:	685b      	ldr	r3, [r3, #4]
 80175c8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80175ca:	8c3b      	ldrh	r3, [r7, #32]
 80175cc:	4618      	mov	r0, r3
 80175ce:	f7f8 fc8f 	bl	800fef0 <lwip_htons>
 80175d2:	4603      	mov	r3, r0
 80175d4:	461a      	mov	r2, r3
 80175d6:	693b      	ldr	r3, [r7, #16]
 80175d8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80175da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175dc:	4618      	mov	r0, r3
 80175de:	f7f8 fc87 	bl	800fef0 <lwip_htons>
 80175e2:	4603      	mov	r3, r0
 80175e4:	461a      	mov	r2, r3
 80175e6:	693b      	ldr	r3, [r7, #16]
 80175e8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80175ea:	693b      	ldr	r3, [r7, #16]
 80175ec:	687a      	ldr	r2, [r7, #4]
 80175ee:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80175f0:	68f8      	ldr	r0, [r7, #12]
 80175f2:	f7f8 fc92 	bl	800ff1a <lwip_htonl>
 80175f6:	4602      	mov	r2, r0
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80175fc:	897b      	ldrh	r3, [r7, #10]
 80175fe:	089b      	lsrs	r3, r3, #2
 8017600:	b29b      	uxth	r3, r3
 8017602:	3305      	adds	r3, #5
 8017604:	b29b      	uxth	r3, r3
 8017606:	031b      	lsls	r3, r3, #12
 8017608:	b29a      	uxth	r2, r3
 801760a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801760e:	b29b      	uxth	r3, r3
 8017610:	4313      	orrs	r3, r2
 8017612:	b29b      	uxth	r3, r3
 8017614:	4618      	mov	r0, r3
 8017616:	f7f8 fc6b 	bl	800fef0 <lwip_htons>
 801761a:	4603      	mov	r3, r0
 801761c:	461a      	mov	r2, r3
 801761e:	693b      	ldr	r3, [r7, #16]
 8017620:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017622:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017624:	4618      	mov	r0, r3
 8017626:	f7f8 fc63 	bl	800fef0 <lwip_htons>
 801762a:	4603      	mov	r3, r0
 801762c:	461a      	mov	r2, r3
 801762e:	693b      	ldr	r3, [r7, #16]
 8017630:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017632:	693b      	ldr	r3, [r7, #16]
 8017634:	2200      	movs	r2, #0
 8017636:	741a      	strb	r2, [r3, #16]
 8017638:	2200      	movs	r2, #0
 801763a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	2200      	movs	r2, #0
 8017640:	749a      	strb	r2, [r3, #18]
 8017642:	2200      	movs	r2, #0
 8017644:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017646:	697b      	ldr	r3, [r7, #20]
}
 8017648:	4618      	mov	r0, r3
 801764a:	3718      	adds	r7, #24
 801764c:	46bd      	mov	sp, r7
 801764e:	bd80      	pop	{r7, pc}
 8017650:	08020848 	.word	0x08020848
 8017654:	08020f20 	.word	0x08020f20
 8017658:	0802089c 	.word	0x0802089c

0801765c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801765c:	b5b0      	push	{r4, r5, r7, lr}
 801765e:	b08a      	sub	sp, #40	; 0x28
 8017660:	af04      	add	r7, sp, #16
 8017662:	60f8      	str	r0, [r7, #12]
 8017664:	607b      	str	r3, [r7, #4]
 8017666:	460b      	mov	r3, r1
 8017668:	817b      	strh	r3, [r7, #10]
 801766a:	4613      	mov	r3, r2
 801766c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	2b00      	cmp	r3, #0
 8017672:	d106      	bne.n	8017682 <tcp_output_alloc_header+0x26>
 8017674:	4b15      	ldr	r3, [pc, #84]	; (80176cc <tcp_output_alloc_header+0x70>)
 8017676:	f240 7242 	movw	r2, #1858	; 0x742
 801767a:	4915      	ldr	r1, [pc, #84]	; (80176d0 <tcp_output_alloc_header+0x74>)
 801767c:	4815      	ldr	r0, [pc, #84]	; (80176d4 <tcp_output_alloc_header+0x78>)
 801767e:	f004 fb45 	bl	801bd0c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	8adb      	ldrh	r3, [r3, #22]
 801768a:	68fa      	ldr	r2, [r7, #12]
 801768c:	8b12      	ldrh	r2, [r2, #24]
 801768e:	68f9      	ldr	r1, [r7, #12]
 8017690:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017692:	893d      	ldrh	r5, [r7, #8]
 8017694:	897c      	ldrh	r4, [r7, #10]
 8017696:	9103      	str	r1, [sp, #12]
 8017698:	2110      	movs	r1, #16
 801769a:	9102      	str	r1, [sp, #8]
 801769c:	9201      	str	r2, [sp, #4]
 801769e:	9300      	str	r3, [sp, #0]
 80176a0:	687b      	ldr	r3, [r7, #4]
 80176a2:	462a      	mov	r2, r5
 80176a4:	4621      	mov	r1, r4
 80176a6:	f7ff ff67 	bl	8017578 <tcp_output_alloc_header_common>
 80176aa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d006      	beq.n	80176c0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80176b2:	68fb      	ldr	r3, [r7, #12]
 80176b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176b6:	68fa      	ldr	r2, [r7, #12]
 80176b8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80176ba:	441a      	add	r2, r3
 80176bc:	68fb      	ldr	r3, [r7, #12]
 80176be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80176c0:	697b      	ldr	r3, [r7, #20]
}
 80176c2:	4618      	mov	r0, r3
 80176c4:	3718      	adds	r7, #24
 80176c6:	46bd      	mov	sp, r7
 80176c8:	bdb0      	pop	{r4, r5, r7, pc}
 80176ca:	bf00      	nop
 80176cc:	08020848 	.word	0x08020848
 80176d0:	08020f50 	.word	0x08020f50
 80176d4:	0802089c 	.word	0x0802089c

080176d8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80176d8:	b580      	push	{r7, lr}
 80176da:	b088      	sub	sp, #32
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	4611      	mov	r1, r2
 80176e4:	461a      	mov	r2, r3
 80176e6:	460b      	mov	r3, r1
 80176e8:	71fb      	strb	r3, [r7, #7]
 80176ea:	4613      	mov	r3, r2
 80176ec:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80176ee:	2300      	movs	r3, #0
 80176f0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d106      	bne.n	8017706 <tcp_output_fill_options+0x2e>
 80176f8:	4b13      	ldr	r3, [pc, #76]	; (8017748 <tcp_output_fill_options+0x70>)
 80176fa:	f240 7256 	movw	r2, #1878	; 0x756
 80176fe:	4913      	ldr	r1, [pc, #76]	; (801774c <tcp_output_fill_options+0x74>)
 8017700:	4813      	ldr	r0, [pc, #76]	; (8017750 <tcp_output_fill_options+0x78>)
 8017702:	f004 fb03 	bl	801bd0c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	685b      	ldr	r3, [r3, #4]
 801770a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801770c:	69bb      	ldr	r3, [r7, #24]
 801770e:	3314      	adds	r3, #20
 8017710:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017712:	69bb      	ldr	r3, [r7, #24]
 8017714:	f103 0214 	add.w	r2, r3, #20
 8017718:	8bfb      	ldrh	r3, [r7, #30]
 801771a:	009b      	lsls	r3, r3, #2
 801771c:	4619      	mov	r1, r3
 801771e:	79fb      	ldrb	r3, [r7, #7]
 8017720:	009b      	lsls	r3, r3, #2
 8017722:	f003 0304 	and.w	r3, r3, #4
 8017726:	440b      	add	r3, r1
 8017728:	4413      	add	r3, r2
 801772a:	697a      	ldr	r2, [r7, #20]
 801772c:	429a      	cmp	r2, r3
 801772e:	d006      	beq.n	801773e <tcp_output_fill_options+0x66>
 8017730:	4b05      	ldr	r3, [pc, #20]	; (8017748 <tcp_output_fill_options+0x70>)
 8017732:	f240 7275 	movw	r2, #1909	; 0x775
 8017736:	4907      	ldr	r1, [pc, #28]	; (8017754 <tcp_output_fill_options+0x7c>)
 8017738:	4805      	ldr	r0, [pc, #20]	; (8017750 <tcp_output_fill_options+0x78>)
 801773a:	f004 fae7 	bl	801bd0c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801773e:	bf00      	nop
 8017740:	3720      	adds	r7, #32
 8017742:	46bd      	mov	sp, r7
 8017744:	bd80      	pop	{r7, pc}
 8017746:	bf00      	nop
 8017748:	08020848 	.word	0x08020848
 801774c:	08020f78 	.word	0x08020f78
 8017750:	0802089c 	.word	0x0802089c
 8017754:	08020e70 	.word	0x08020e70

08017758 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017758:	b580      	push	{r7, lr}
 801775a:	b08a      	sub	sp, #40	; 0x28
 801775c:	af04      	add	r7, sp, #16
 801775e:	60f8      	str	r0, [r7, #12]
 8017760:	60b9      	str	r1, [r7, #8]
 8017762:	607a      	str	r2, [r7, #4]
 8017764:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017766:	68bb      	ldr	r3, [r7, #8]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d106      	bne.n	801777a <tcp_output_control_segment+0x22>
 801776c:	4b1c      	ldr	r3, [pc, #112]	; (80177e0 <tcp_output_control_segment+0x88>)
 801776e:	f240 7287 	movw	r2, #1927	; 0x787
 8017772:	491c      	ldr	r1, [pc, #112]	; (80177e4 <tcp_output_control_segment+0x8c>)
 8017774:	481c      	ldr	r0, [pc, #112]	; (80177e8 <tcp_output_control_segment+0x90>)
 8017776:	f004 fac9 	bl	801bd0c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801777a:	683a      	ldr	r2, [r7, #0]
 801777c:	6879      	ldr	r1, [r7, #4]
 801777e:	68f8      	ldr	r0, [r7, #12]
 8017780:	f7fe fae8 	bl	8015d54 <tcp_route>
 8017784:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	2b00      	cmp	r3, #0
 801778a:	d102      	bne.n	8017792 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801778c:	23fc      	movs	r3, #252	; 0xfc
 801778e:	75fb      	strb	r3, [r7, #23]
 8017790:	e01c      	b.n	80177cc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017792:	68fb      	ldr	r3, [r7, #12]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d006      	beq.n	80177a6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017798:	68fb      	ldr	r3, [r7, #12]
 801779a:	7adb      	ldrb	r3, [r3, #11]
 801779c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	7a9b      	ldrb	r3, [r3, #10]
 80177a2:	757b      	strb	r3, [r7, #21]
 80177a4:	e003      	b.n	80177ae <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80177a6:	23ff      	movs	r3, #255	; 0xff
 80177a8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80177aa:	2300      	movs	r3, #0
 80177ac:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80177ae:	7dba      	ldrb	r2, [r7, #22]
 80177b0:	693b      	ldr	r3, [r7, #16]
 80177b2:	9302      	str	r3, [sp, #8]
 80177b4:	2306      	movs	r3, #6
 80177b6:	9301      	str	r3, [sp, #4]
 80177b8:	7d7b      	ldrb	r3, [r7, #21]
 80177ba:	9300      	str	r3, [sp, #0]
 80177bc:	4613      	mov	r3, r2
 80177be:	683a      	ldr	r2, [r7, #0]
 80177c0:	6879      	ldr	r1, [r7, #4]
 80177c2:	68b8      	ldr	r0, [r7, #8]
 80177c4:	f002 fad0 	bl	8019d68 <ip4_output_if>
 80177c8:	4603      	mov	r3, r0
 80177ca:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80177cc:	68b8      	ldr	r0, [r7, #8]
 80177ce:	f7f9 ff6d 	bl	80116ac <pbuf_free>
  return err;
 80177d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80177d6:	4618      	mov	r0, r3
 80177d8:	3718      	adds	r7, #24
 80177da:	46bd      	mov	sp, r7
 80177dc:	bd80      	pop	{r7, pc}
 80177de:	bf00      	nop
 80177e0:	08020848 	.word	0x08020848
 80177e4:	08020fa0 	.word	0x08020fa0
 80177e8:	0802089c 	.word	0x0802089c

080177ec <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80177ec:	b590      	push	{r4, r7, lr}
 80177ee:	b08b      	sub	sp, #44	; 0x2c
 80177f0:	af04      	add	r7, sp, #16
 80177f2:	60f8      	str	r0, [r7, #12]
 80177f4:	60b9      	str	r1, [r7, #8]
 80177f6:	607a      	str	r2, [r7, #4]
 80177f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80177fa:	683b      	ldr	r3, [r7, #0]
 80177fc:	2b00      	cmp	r3, #0
 80177fe:	d106      	bne.n	801780e <tcp_rst+0x22>
 8017800:	4b1f      	ldr	r3, [pc, #124]	; (8017880 <tcp_rst+0x94>)
 8017802:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8017806:	491f      	ldr	r1, [pc, #124]	; (8017884 <tcp_rst+0x98>)
 8017808:	481f      	ldr	r0, [pc, #124]	; (8017888 <tcp_rst+0x9c>)
 801780a:	f004 fa7f 	bl	801bd0c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017810:	2b00      	cmp	r3, #0
 8017812:	d106      	bne.n	8017822 <tcp_rst+0x36>
 8017814:	4b1a      	ldr	r3, [pc, #104]	; (8017880 <tcp_rst+0x94>)
 8017816:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801781a:	491c      	ldr	r1, [pc, #112]	; (801788c <tcp_rst+0xa0>)
 801781c:	481a      	ldr	r0, [pc, #104]	; (8017888 <tcp_rst+0x9c>)
 801781e:	f004 fa75 	bl	801bd0c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017822:	2300      	movs	r3, #0
 8017824:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017826:	f246 0308 	movw	r3, #24584	; 0x6008
 801782a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801782c:	7dfb      	ldrb	r3, [r7, #23]
 801782e:	b29c      	uxth	r4, r3
 8017830:	68b8      	ldr	r0, [r7, #8]
 8017832:	f7f8 fb72 	bl	800ff1a <lwip_htonl>
 8017836:	4602      	mov	r2, r0
 8017838:	8abb      	ldrh	r3, [r7, #20]
 801783a:	9303      	str	r3, [sp, #12]
 801783c:	2314      	movs	r3, #20
 801783e:	9302      	str	r3, [sp, #8]
 8017840:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017842:	9301      	str	r3, [sp, #4]
 8017844:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017846:	9300      	str	r3, [sp, #0]
 8017848:	4613      	mov	r3, r2
 801784a:	2200      	movs	r2, #0
 801784c:	4621      	mov	r1, r4
 801784e:	6878      	ldr	r0, [r7, #4]
 8017850:	f7ff fe92 	bl	8017578 <tcp_output_alloc_header_common>
 8017854:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017856:	693b      	ldr	r3, [r7, #16]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d00c      	beq.n	8017876 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801785c:	7dfb      	ldrb	r3, [r7, #23]
 801785e:	2200      	movs	r2, #0
 8017860:	6939      	ldr	r1, [r7, #16]
 8017862:	68f8      	ldr	r0, [r7, #12]
 8017864:	f7ff ff38 	bl	80176d8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801786a:	683a      	ldr	r2, [r7, #0]
 801786c:	6939      	ldr	r1, [r7, #16]
 801786e:	68f8      	ldr	r0, [r7, #12]
 8017870:	f7ff ff72 	bl	8017758 <tcp_output_control_segment>
 8017874:	e000      	b.n	8017878 <tcp_rst+0x8c>
    return;
 8017876:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017878:	371c      	adds	r7, #28
 801787a:	46bd      	mov	sp, r7
 801787c:	bd90      	pop	{r4, r7, pc}
 801787e:	bf00      	nop
 8017880:	08020848 	.word	0x08020848
 8017884:	08020fcc 	.word	0x08020fcc
 8017888:	0802089c 	.word	0x0802089c
 801788c:	08020fe8 	.word	0x08020fe8

08017890 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017890:	b590      	push	{r4, r7, lr}
 8017892:	b087      	sub	sp, #28
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017898:	2300      	movs	r3, #0
 801789a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801789c:	2300      	movs	r3, #0
 801789e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d106      	bne.n	80178b4 <tcp_send_empty_ack+0x24>
 80178a6:	4b28      	ldr	r3, [pc, #160]	; (8017948 <tcp_send_empty_ack+0xb8>)
 80178a8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80178ac:	4927      	ldr	r1, [pc, #156]	; (801794c <tcp_send_empty_ack+0xbc>)
 80178ae:	4828      	ldr	r0, [pc, #160]	; (8017950 <tcp_send_empty_ack+0xc0>)
 80178b0:	f004 fa2c 	bl	801bd0c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80178b4:	7dfb      	ldrb	r3, [r7, #23]
 80178b6:	009b      	lsls	r3, r3, #2
 80178b8:	b2db      	uxtb	r3, r3
 80178ba:	f003 0304 	and.w	r3, r3, #4
 80178be:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80178c0:	7d7b      	ldrb	r3, [r7, #21]
 80178c2:	b29c      	uxth	r4, r3
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80178c8:	4618      	mov	r0, r3
 80178ca:	f7f8 fb26 	bl	800ff1a <lwip_htonl>
 80178ce:	4603      	mov	r3, r0
 80178d0:	2200      	movs	r2, #0
 80178d2:	4621      	mov	r1, r4
 80178d4:	6878      	ldr	r0, [r7, #4]
 80178d6:	f7ff fec1 	bl	801765c <tcp_output_alloc_header>
 80178da:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178dc:	693b      	ldr	r3, [r7, #16]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d109      	bne.n	80178f6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	8b5b      	ldrh	r3, [r3, #26]
 80178e6:	f043 0303 	orr.w	r3, r3, #3
 80178ea:	b29a      	uxth	r2, r3
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80178f0:	f06f 0301 	mvn.w	r3, #1
 80178f4:	e023      	b.n	801793e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80178f6:	7dbb      	ldrb	r3, [r7, #22]
 80178f8:	7dfa      	ldrb	r2, [r7, #23]
 80178fa:	6939      	ldr	r1, [r7, #16]
 80178fc:	6878      	ldr	r0, [r7, #4]
 80178fe:	f7ff feeb 	bl	80176d8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017902:	687a      	ldr	r2, [r7, #4]
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	3304      	adds	r3, #4
 8017908:	6939      	ldr	r1, [r7, #16]
 801790a:	6878      	ldr	r0, [r7, #4]
 801790c:	f7ff ff24 	bl	8017758 <tcp_output_control_segment>
 8017910:	4603      	mov	r3, r0
 8017912:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017918:	2b00      	cmp	r3, #0
 801791a:	d007      	beq.n	801792c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	8b5b      	ldrh	r3, [r3, #26]
 8017920:	f043 0303 	orr.w	r3, r3, #3
 8017924:	b29a      	uxth	r2, r3
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	835a      	strh	r2, [r3, #26]
 801792a:	e006      	b.n	801793a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	8b5b      	ldrh	r3, [r3, #26]
 8017930:	f023 0303 	bic.w	r3, r3, #3
 8017934:	b29a      	uxth	r2, r3
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801793a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801793e:	4618      	mov	r0, r3
 8017940:	371c      	adds	r7, #28
 8017942:	46bd      	mov	sp, r7
 8017944:	bd90      	pop	{r4, r7, pc}
 8017946:	bf00      	nop
 8017948:	08020848 	.word	0x08020848
 801794c:	08021004 	.word	0x08021004
 8017950:	0802089c 	.word	0x0802089c

08017954 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017954:	b590      	push	{r4, r7, lr}
 8017956:	b087      	sub	sp, #28
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801795c:	2300      	movs	r3, #0
 801795e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d106      	bne.n	8017974 <tcp_keepalive+0x20>
 8017966:	4b18      	ldr	r3, [pc, #96]	; (80179c8 <tcp_keepalive+0x74>)
 8017968:	f640 0224 	movw	r2, #2084	; 0x824
 801796c:	4917      	ldr	r1, [pc, #92]	; (80179cc <tcp_keepalive+0x78>)
 801796e:	4818      	ldr	r0, [pc, #96]	; (80179d0 <tcp_keepalive+0x7c>)
 8017970:	f004 f9cc 	bl	801bd0c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017974:	7dfb      	ldrb	r3, [r7, #23]
 8017976:	b29c      	uxth	r4, r3
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801797c:	3b01      	subs	r3, #1
 801797e:	4618      	mov	r0, r3
 8017980:	f7f8 facb 	bl	800ff1a <lwip_htonl>
 8017984:	4603      	mov	r3, r0
 8017986:	2200      	movs	r2, #0
 8017988:	4621      	mov	r1, r4
 801798a:	6878      	ldr	r0, [r7, #4]
 801798c:	f7ff fe66 	bl	801765c <tcp_output_alloc_header>
 8017990:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017992:	693b      	ldr	r3, [r7, #16]
 8017994:	2b00      	cmp	r3, #0
 8017996:	d102      	bne.n	801799e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017998:	f04f 33ff 	mov.w	r3, #4294967295
 801799c:	e010      	b.n	80179c0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801799e:	7dfb      	ldrb	r3, [r7, #23]
 80179a0:	2200      	movs	r2, #0
 80179a2:	6939      	ldr	r1, [r7, #16]
 80179a4:	6878      	ldr	r0, [r7, #4]
 80179a6:	f7ff fe97 	bl	80176d8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179aa:	687a      	ldr	r2, [r7, #4]
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	3304      	adds	r3, #4
 80179b0:	6939      	ldr	r1, [r7, #16]
 80179b2:	6878      	ldr	r0, [r7, #4]
 80179b4:	f7ff fed0 	bl	8017758 <tcp_output_control_segment>
 80179b8:	4603      	mov	r3, r0
 80179ba:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80179bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80179c0:	4618      	mov	r0, r3
 80179c2:	371c      	adds	r7, #28
 80179c4:	46bd      	mov	sp, r7
 80179c6:	bd90      	pop	{r4, r7, pc}
 80179c8:	08020848 	.word	0x08020848
 80179cc:	08021024 	.word	0x08021024
 80179d0:	0802089c 	.word	0x0802089c

080179d4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80179d4:	b590      	push	{r4, r7, lr}
 80179d6:	b08b      	sub	sp, #44	; 0x2c
 80179d8:	af00      	add	r7, sp, #0
 80179da:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80179dc:	2300      	movs	r3, #0
 80179de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	d106      	bne.n	80179f6 <tcp_zero_window_probe+0x22>
 80179e8:	4b4c      	ldr	r3, [pc, #304]	; (8017b1c <tcp_zero_window_probe+0x148>)
 80179ea:	f640 024f 	movw	r2, #2127	; 0x84f
 80179ee:	494c      	ldr	r1, [pc, #304]	; (8017b20 <tcp_zero_window_probe+0x14c>)
 80179f0:	484c      	ldr	r0, [pc, #304]	; (8017b24 <tcp_zero_window_probe+0x150>)
 80179f2:	f004 f98b 	bl	801bd0c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179fa:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80179fc:	6a3b      	ldr	r3, [r7, #32]
 80179fe:	2b00      	cmp	r3, #0
 8017a00:	d101      	bne.n	8017a06 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017a02:	2300      	movs	r3, #0
 8017a04:	e086      	b.n	8017b14 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017a0c:	2bff      	cmp	r3, #255	; 0xff
 8017a0e:	d007      	beq.n	8017a20 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8017a16:	3301      	adds	r3, #1
 8017a18:	b2da      	uxtb	r2, r3
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017a20:	6a3b      	ldr	r3, [r7, #32]
 8017a22:	68db      	ldr	r3, [r3, #12]
 8017a24:	899b      	ldrh	r3, [r3, #12]
 8017a26:	b29b      	uxth	r3, r3
 8017a28:	4618      	mov	r0, r3
 8017a2a:	f7f8 fa61 	bl	800fef0 <lwip_htons>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	b2db      	uxtb	r3, r3
 8017a32:	f003 0301 	and.w	r3, r3, #1
 8017a36:	2b00      	cmp	r3, #0
 8017a38:	d005      	beq.n	8017a46 <tcp_zero_window_probe+0x72>
 8017a3a:	6a3b      	ldr	r3, [r7, #32]
 8017a3c:	891b      	ldrh	r3, [r3, #8]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d101      	bne.n	8017a46 <tcp_zero_window_probe+0x72>
 8017a42:	2301      	movs	r3, #1
 8017a44:	e000      	b.n	8017a48 <tcp_zero_window_probe+0x74>
 8017a46:	2300      	movs	r3, #0
 8017a48:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017a4a:	7ffb      	ldrb	r3, [r7, #31]
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	bf0c      	ite	eq
 8017a50:	2301      	moveq	r3, #1
 8017a52:	2300      	movne	r3, #0
 8017a54:	b2db      	uxtb	r3, r3
 8017a56:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017a58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a5c:	b299      	uxth	r1, r3
 8017a5e:	6a3b      	ldr	r3, [r7, #32]
 8017a60:	68db      	ldr	r3, [r3, #12]
 8017a62:	685b      	ldr	r3, [r3, #4]
 8017a64:	8bba      	ldrh	r2, [r7, #28]
 8017a66:	6878      	ldr	r0, [r7, #4]
 8017a68:	f7ff fdf8 	bl	801765c <tcp_output_alloc_header>
 8017a6c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017a6e:	69bb      	ldr	r3, [r7, #24]
 8017a70:	2b00      	cmp	r3, #0
 8017a72:	d102      	bne.n	8017a7a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017a74:	f04f 33ff 	mov.w	r3, #4294967295
 8017a78:	e04c      	b.n	8017b14 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a80:	7ffb      	ldrb	r3, [r7, #31]
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d011      	beq.n	8017aaa <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a86:	697b      	ldr	r3, [r7, #20]
 8017a88:	899b      	ldrh	r3, [r3, #12]
 8017a8a:	b29b      	uxth	r3, r3
 8017a8c:	b21b      	sxth	r3, r3
 8017a8e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a92:	b21c      	sxth	r4, r3
 8017a94:	2011      	movs	r0, #17
 8017a96:	f7f8 fa2b 	bl	800fef0 <lwip_htons>
 8017a9a:	4603      	mov	r3, r0
 8017a9c:	b21b      	sxth	r3, r3
 8017a9e:	4323      	orrs	r3, r4
 8017aa0:	b21b      	sxth	r3, r3
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	697b      	ldr	r3, [r7, #20]
 8017aa6:	819a      	strh	r2, [r3, #12]
 8017aa8:	e010      	b.n	8017acc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017aaa:	69bb      	ldr	r3, [r7, #24]
 8017aac:	685b      	ldr	r3, [r3, #4]
 8017aae:	3314      	adds	r3, #20
 8017ab0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017ab2:	6a3b      	ldr	r3, [r7, #32]
 8017ab4:	6858      	ldr	r0, [r3, #4]
 8017ab6:	6a3b      	ldr	r3, [r7, #32]
 8017ab8:	685b      	ldr	r3, [r3, #4]
 8017aba:	891a      	ldrh	r2, [r3, #8]
 8017abc:	6a3b      	ldr	r3, [r7, #32]
 8017abe:	891b      	ldrh	r3, [r3, #8]
 8017ac0:	1ad3      	subs	r3, r2, r3
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	2201      	movs	r2, #1
 8017ac6:	6939      	ldr	r1, [r7, #16]
 8017ac8:	f7f9 fff6 	bl	8011ab8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017acc:	6a3b      	ldr	r3, [r7, #32]
 8017ace:	68db      	ldr	r3, [r3, #12]
 8017ad0:	685b      	ldr	r3, [r3, #4]
 8017ad2:	4618      	mov	r0, r3
 8017ad4:	f7f8 fa21 	bl	800ff1a <lwip_htonl>
 8017ad8:	4603      	mov	r3, r0
 8017ada:	3301      	adds	r3, #1
 8017adc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ae2:	68fb      	ldr	r3, [r7, #12]
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	2b00      	cmp	r3, #0
 8017ae8:	da02      	bge.n	8017af0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	68fa      	ldr	r2, [r7, #12]
 8017aee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017af4:	2200      	movs	r2, #0
 8017af6:	69b9      	ldr	r1, [r7, #24]
 8017af8:	6878      	ldr	r0, [r7, #4]
 8017afa:	f7ff fded 	bl	80176d8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017afe:	687a      	ldr	r2, [r7, #4]
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	3304      	adds	r3, #4
 8017b04:	69b9      	ldr	r1, [r7, #24]
 8017b06:	6878      	ldr	r0, [r7, #4]
 8017b08:	f7ff fe26 	bl	8017758 <tcp_output_control_segment>
 8017b0c:	4603      	mov	r3, r0
 8017b0e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017b10:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017b14:	4618      	mov	r0, r3
 8017b16:	372c      	adds	r7, #44	; 0x2c
 8017b18:	46bd      	mov	sp, r7
 8017b1a:	bd90      	pop	{r4, r7, pc}
 8017b1c:	08020848 	.word	0x08020848
 8017b20:	08021040 	.word	0x08021040
 8017b24:	0802089c 	.word	0x0802089c

08017b28 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017b30:	f7fa f8b0 	bl	8011c94 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017b34:	4b0a      	ldr	r3, [pc, #40]	; (8017b60 <tcpip_tcp_timer+0x38>)
 8017b36:	681b      	ldr	r3, [r3, #0]
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d103      	bne.n	8017b44 <tcpip_tcp_timer+0x1c>
 8017b3c:	4b09      	ldr	r3, [pc, #36]	; (8017b64 <tcpip_tcp_timer+0x3c>)
 8017b3e:	681b      	ldr	r3, [r3, #0]
 8017b40:	2b00      	cmp	r3, #0
 8017b42:	d005      	beq.n	8017b50 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b44:	2200      	movs	r2, #0
 8017b46:	4908      	ldr	r1, [pc, #32]	; (8017b68 <tcpip_tcp_timer+0x40>)
 8017b48:	20fa      	movs	r0, #250	; 0xfa
 8017b4a:	f000 f8f3 	bl	8017d34 <sys_timeout>
 8017b4e:	e003      	b.n	8017b58 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017b50:	4b06      	ldr	r3, [pc, #24]	; (8017b6c <tcpip_tcp_timer+0x44>)
 8017b52:	2200      	movs	r2, #0
 8017b54:	601a      	str	r2, [r3, #0]
  }
}
 8017b56:	bf00      	nop
 8017b58:	bf00      	nop
 8017b5a:	3708      	adds	r7, #8
 8017b5c:	46bd      	mov	sp, r7
 8017b5e:	bd80      	pop	{r7, pc}
 8017b60:	2000d7bc 	.word	0x2000d7bc
 8017b64:	2000d7cc 	.word	0x2000d7cc
 8017b68:	08017b29 	.word	0x08017b29
 8017b6c:	20004830 	.word	0x20004830

08017b70 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017b70:	b580      	push	{r7, lr}
 8017b72:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017b74:	4b0a      	ldr	r3, [pc, #40]	; (8017ba0 <tcp_timer_needed+0x30>)
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d10f      	bne.n	8017b9c <tcp_timer_needed+0x2c>
 8017b7c:	4b09      	ldr	r3, [pc, #36]	; (8017ba4 <tcp_timer_needed+0x34>)
 8017b7e:	681b      	ldr	r3, [r3, #0]
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d103      	bne.n	8017b8c <tcp_timer_needed+0x1c>
 8017b84:	4b08      	ldr	r3, [pc, #32]	; (8017ba8 <tcp_timer_needed+0x38>)
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d007      	beq.n	8017b9c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b8c:	4b04      	ldr	r3, [pc, #16]	; (8017ba0 <tcp_timer_needed+0x30>)
 8017b8e:	2201      	movs	r2, #1
 8017b90:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b92:	2200      	movs	r2, #0
 8017b94:	4905      	ldr	r1, [pc, #20]	; (8017bac <tcp_timer_needed+0x3c>)
 8017b96:	20fa      	movs	r0, #250	; 0xfa
 8017b98:	f000 f8cc 	bl	8017d34 <sys_timeout>
  }
}
 8017b9c:	bf00      	nop
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	20004830 	.word	0x20004830
 8017ba4:	2000d7bc 	.word	0x2000d7bc
 8017ba8:	2000d7cc 	.word	0x2000d7cc
 8017bac:	08017b29 	.word	0x08017b29

08017bb0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017bb0:	b580      	push	{r7, lr}
 8017bb2:	b086      	sub	sp, #24
 8017bb4:	af00      	add	r7, sp, #0
 8017bb6:	60f8      	str	r0, [r7, #12]
 8017bb8:	60b9      	str	r1, [r7, #8]
 8017bba:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017bbc:	200a      	movs	r0, #10
 8017bbe:	f7f8 fe4d 	bl	801085c <memp_malloc>
 8017bc2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	d109      	bne.n	8017bde <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d151      	bne.n	8017c74 <sys_timeout_abs+0xc4>
 8017bd0:	4b2a      	ldr	r3, [pc, #168]	; (8017c7c <sys_timeout_abs+0xcc>)
 8017bd2:	22be      	movs	r2, #190	; 0xbe
 8017bd4:	492a      	ldr	r1, [pc, #168]	; (8017c80 <sys_timeout_abs+0xd0>)
 8017bd6:	482b      	ldr	r0, [pc, #172]	; (8017c84 <sys_timeout_abs+0xd4>)
 8017bd8:	f004 f898 	bl	801bd0c <iprintf>
    return;
 8017bdc:	e04a      	b.n	8017c74 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	2200      	movs	r2, #0
 8017be2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017be4:	693b      	ldr	r3, [r7, #16]
 8017be6:	68ba      	ldr	r2, [r7, #8]
 8017be8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	687a      	ldr	r2, [r7, #4]
 8017bee:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017bf0:	693b      	ldr	r3, [r7, #16]
 8017bf2:	68fa      	ldr	r2, [r7, #12]
 8017bf4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017bf6:	4b24      	ldr	r3, [pc, #144]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d103      	bne.n	8017c06 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017bfe:	4a22      	ldr	r2, [pc, #136]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	6013      	str	r3, [r2, #0]
    return;
 8017c04:	e037      	b.n	8017c76 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017c06:	693b      	ldr	r3, [r7, #16]
 8017c08:	685a      	ldr	r2, [r3, #4]
 8017c0a:	4b1f      	ldr	r3, [pc, #124]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	685b      	ldr	r3, [r3, #4]
 8017c10:	1ad3      	subs	r3, r2, r3
 8017c12:	0fdb      	lsrs	r3, r3, #31
 8017c14:	f003 0301 	and.w	r3, r3, #1
 8017c18:	b2db      	uxtb	r3, r3
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d007      	beq.n	8017c2e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017c1e:	4b1a      	ldr	r3, [pc, #104]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017c20:	681a      	ldr	r2, [r3, #0]
 8017c22:	693b      	ldr	r3, [r7, #16]
 8017c24:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017c26:	4a18      	ldr	r2, [pc, #96]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017c28:	693b      	ldr	r3, [r7, #16]
 8017c2a:	6013      	str	r3, [r2, #0]
 8017c2c:	e023      	b.n	8017c76 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017c2e:	4b16      	ldr	r3, [pc, #88]	; (8017c88 <sys_timeout_abs+0xd8>)
 8017c30:	681b      	ldr	r3, [r3, #0]
 8017c32:	617b      	str	r3, [r7, #20]
 8017c34:	e01a      	b.n	8017c6c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d00b      	beq.n	8017c56 <sys_timeout_abs+0xa6>
 8017c3e:	693b      	ldr	r3, [r7, #16]
 8017c40:	685a      	ldr	r2, [r3, #4]
 8017c42:	697b      	ldr	r3, [r7, #20]
 8017c44:	681b      	ldr	r3, [r3, #0]
 8017c46:	685b      	ldr	r3, [r3, #4]
 8017c48:	1ad3      	subs	r3, r2, r3
 8017c4a:	0fdb      	lsrs	r3, r3, #31
 8017c4c:	f003 0301 	and.w	r3, r3, #1
 8017c50:	b2db      	uxtb	r3, r3
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d007      	beq.n	8017c66 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	681a      	ldr	r2, [r3, #0]
 8017c5a:	693b      	ldr	r3, [r7, #16]
 8017c5c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017c5e:	697b      	ldr	r3, [r7, #20]
 8017c60:	693a      	ldr	r2, [r7, #16]
 8017c62:	601a      	str	r2, [r3, #0]
        break;
 8017c64:	e007      	b.n	8017c76 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017c66:	697b      	ldr	r3, [r7, #20]
 8017c68:	681b      	ldr	r3, [r3, #0]
 8017c6a:	617b      	str	r3, [r7, #20]
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d1e1      	bne.n	8017c36 <sys_timeout_abs+0x86>
 8017c72:	e000      	b.n	8017c76 <sys_timeout_abs+0xc6>
    return;
 8017c74:	bf00      	nop
      }
    }
  }
}
 8017c76:	3718      	adds	r7, #24
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	bd80      	pop	{r7, pc}
 8017c7c:	08021064 	.word	0x08021064
 8017c80:	08021098 	.word	0x08021098
 8017c84:	080210d8 	.word	0x080210d8
 8017c88:	20004828 	.word	0x20004828

08017c8c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c8c:	b580      	push	{r7, lr}
 8017c8e:	b086      	sub	sp, #24
 8017c90:	af00      	add	r7, sp, #0
 8017c92:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c94:	687b      	ldr	r3, [r7, #4]
 8017c96:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c98:	697b      	ldr	r3, [r7, #20]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	4798      	blx	r3

  now = sys_now();
 8017c9e:	f7f0 ff19 	bl	8008ad4 <sys_now>
 8017ca2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017ca4:	697b      	ldr	r3, [r7, #20]
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	4b0f      	ldr	r3, [pc, #60]	; (8017ce8 <lwip_cyclic_timer+0x5c>)
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	4413      	add	r3, r2
 8017cae:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017cb0:	68fa      	ldr	r2, [r7, #12]
 8017cb2:	693b      	ldr	r3, [r7, #16]
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	0fdb      	lsrs	r3, r3, #31
 8017cb8:	f003 0301 	and.w	r3, r3, #1
 8017cbc:	b2db      	uxtb	r3, r3
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d009      	beq.n	8017cd6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017cc2:	697b      	ldr	r3, [r7, #20]
 8017cc4:	681a      	ldr	r2, [r3, #0]
 8017cc6:	693b      	ldr	r3, [r7, #16]
 8017cc8:	4413      	add	r3, r2
 8017cca:	687a      	ldr	r2, [r7, #4]
 8017ccc:	4907      	ldr	r1, [pc, #28]	; (8017cec <lwip_cyclic_timer+0x60>)
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7ff ff6e 	bl	8017bb0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017cd4:	e004      	b.n	8017ce0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017cd6:	687a      	ldr	r2, [r7, #4]
 8017cd8:	4904      	ldr	r1, [pc, #16]	; (8017cec <lwip_cyclic_timer+0x60>)
 8017cda:	68f8      	ldr	r0, [r7, #12]
 8017cdc:	f7ff ff68 	bl	8017bb0 <sys_timeout_abs>
}
 8017ce0:	bf00      	nop
 8017ce2:	3718      	adds	r7, #24
 8017ce4:	46bd      	mov	sp, r7
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	2000482c 	.word	0x2000482c
 8017cec:	08017c8d 	.word	0x08017c8d

08017cf0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b082      	sub	sp, #8
 8017cf4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	607b      	str	r3, [r7, #4]
 8017cfa:	e00e      	b.n	8017d1a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017cfc:	4a0b      	ldr	r2, [pc, #44]	; (8017d2c <sys_timeouts_init+0x3c>)
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	00db      	lsls	r3, r3, #3
 8017d08:	4a08      	ldr	r2, [pc, #32]	; (8017d2c <sys_timeouts_init+0x3c>)
 8017d0a:	4413      	add	r3, r2
 8017d0c:	461a      	mov	r2, r3
 8017d0e:	4908      	ldr	r1, [pc, #32]	; (8017d30 <sys_timeouts_init+0x40>)
 8017d10:	f000 f810 	bl	8017d34 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	3301      	adds	r3, #1
 8017d18:	607b      	str	r3, [r7, #4]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	2b02      	cmp	r3, #2
 8017d1e:	d9ed      	bls.n	8017cfc <sys_timeouts_init+0xc>
  }
}
 8017d20:	bf00      	nop
 8017d22:	bf00      	nop
 8017d24:	3708      	adds	r7, #8
 8017d26:	46bd      	mov	sp, r7
 8017d28:	bd80      	pop	{r7, pc}
 8017d2a:	bf00      	nop
 8017d2c:	08021d44 	.word	0x08021d44
 8017d30:	08017c8d 	.word	0x08017c8d

08017d34 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	b086      	sub	sp, #24
 8017d38:	af00      	add	r7, sp, #0
 8017d3a:	60f8      	str	r0, [r7, #12]
 8017d3c:	60b9      	str	r1, [r7, #8]
 8017d3e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017d46:	d306      	bcc.n	8017d56 <sys_timeout+0x22>
 8017d48:	4b0a      	ldr	r3, [pc, #40]	; (8017d74 <sys_timeout+0x40>)
 8017d4a:	f240 1229 	movw	r2, #297	; 0x129
 8017d4e:	490a      	ldr	r1, [pc, #40]	; (8017d78 <sys_timeout+0x44>)
 8017d50:	480a      	ldr	r0, [pc, #40]	; (8017d7c <sys_timeout+0x48>)
 8017d52:	f003 ffdb 	bl	801bd0c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017d56:	f7f0 febd 	bl	8008ad4 <sys_now>
 8017d5a:	4602      	mov	r2, r0
 8017d5c:	68fb      	ldr	r3, [r7, #12]
 8017d5e:	4413      	add	r3, r2
 8017d60:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017d62:	687a      	ldr	r2, [r7, #4]
 8017d64:	68b9      	ldr	r1, [r7, #8]
 8017d66:	6978      	ldr	r0, [r7, #20]
 8017d68:	f7ff ff22 	bl	8017bb0 <sys_timeout_abs>
#endif
}
 8017d6c:	bf00      	nop
 8017d6e:	3718      	adds	r7, #24
 8017d70:	46bd      	mov	sp, r7
 8017d72:	bd80      	pop	{r7, pc}
 8017d74:	08021064 	.word	0x08021064
 8017d78:	08021100 	.word	0x08021100
 8017d7c:	080210d8 	.word	0x080210d8

08017d80 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b084      	sub	sp, #16
 8017d84:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017d86:	f7f0 fea5 	bl	8008ad4 <sys_now>
 8017d8a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017d8c:	4b17      	ldr	r3, [pc, #92]	; (8017dec <sys_check_timeouts+0x6c>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	2b00      	cmp	r3, #0
 8017d96:	d022      	beq.n	8017dde <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	685b      	ldr	r3, [r3, #4]
 8017d9c:	68fa      	ldr	r2, [r7, #12]
 8017d9e:	1ad3      	subs	r3, r2, r3
 8017da0:	0fdb      	lsrs	r3, r3, #31
 8017da2:	f003 0301 	and.w	r3, r3, #1
 8017da6:	b2db      	uxtb	r3, r3
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d11a      	bne.n	8017de2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017dac:	68bb      	ldr	r3, [r7, #8]
 8017dae:	681b      	ldr	r3, [r3, #0]
 8017db0:	4a0e      	ldr	r2, [pc, #56]	; (8017dec <sys_check_timeouts+0x6c>)
 8017db2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017db4:	68bb      	ldr	r3, [r7, #8]
 8017db6:	689b      	ldr	r3, [r3, #8]
 8017db8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017dba:	68bb      	ldr	r3, [r7, #8]
 8017dbc:	68db      	ldr	r3, [r3, #12]
 8017dbe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017dc0:	68bb      	ldr	r3, [r7, #8]
 8017dc2:	685b      	ldr	r3, [r3, #4]
 8017dc4:	4a0a      	ldr	r2, [pc, #40]	; (8017df0 <sys_check_timeouts+0x70>)
 8017dc6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017dc8:	68b9      	ldr	r1, [r7, #8]
 8017dca:	200a      	movs	r0, #10
 8017dcc:	f7f8 fd98 	bl	8010900 <memp_free>
    if (handler != NULL) {
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d0da      	beq.n	8017d8c <sys_check_timeouts+0xc>
      handler(arg);
 8017dd6:	687b      	ldr	r3, [r7, #4]
 8017dd8:	6838      	ldr	r0, [r7, #0]
 8017dda:	4798      	blx	r3
  do {
 8017ddc:	e7d6      	b.n	8017d8c <sys_check_timeouts+0xc>
      return;
 8017dde:	bf00      	nop
 8017de0:	e000      	b.n	8017de4 <sys_check_timeouts+0x64>
      return;
 8017de2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017de4:	3710      	adds	r7, #16
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
 8017dea:	bf00      	nop
 8017dec:	20004828 	.word	0x20004828
 8017df0:	2000482c 	.word	0x2000482c

08017df4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017df4:	b580      	push	{r7, lr}
 8017df6:	b082      	sub	sp, #8
 8017df8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017dfa:	4b16      	ldr	r3, [pc, #88]	; (8017e54 <sys_timeouts_sleeptime+0x60>)
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d102      	bne.n	8017e08 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017e02:	f04f 33ff 	mov.w	r3, #4294967295
 8017e06:	e020      	b.n	8017e4a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017e08:	f7f0 fe64 	bl	8008ad4 <sys_now>
 8017e0c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017e0e:	4b11      	ldr	r3, [pc, #68]	; (8017e54 <sys_timeouts_sleeptime+0x60>)
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	685a      	ldr	r2, [r3, #4]
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	1ad3      	subs	r3, r2, r3
 8017e18:	0fdb      	lsrs	r3, r3, #31
 8017e1a:	f003 0301 	and.w	r3, r3, #1
 8017e1e:	b2db      	uxtb	r3, r3
 8017e20:	2b00      	cmp	r3, #0
 8017e22:	d001      	beq.n	8017e28 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017e24:	2300      	movs	r3, #0
 8017e26:	e010      	b.n	8017e4a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017e28:	4b0a      	ldr	r3, [pc, #40]	; (8017e54 <sys_timeouts_sleeptime+0x60>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	685a      	ldr	r2, [r3, #4]
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	1ad3      	subs	r3, r2, r3
 8017e32:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017e34:	683b      	ldr	r3, [r7, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	da06      	bge.n	8017e48 <sys_timeouts_sleeptime+0x54>
 8017e3a:	4b07      	ldr	r3, [pc, #28]	; (8017e58 <sys_timeouts_sleeptime+0x64>)
 8017e3c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017e40:	4906      	ldr	r1, [pc, #24]	; (8017e5c <sys_timeouts_sleeptime+0x68>)
 8017e42:	4807      	ldr	r0, [pc, #28]	; (8017e60 <sys_timeouts_sleeptime+0x6c>)
 8017e44:	f003 ff62 	bl	801bd0c <iprintf>
    return ret;
 8017e48:	683b      	ldr	r3, [r7, #0]
  }
}
 8017e4a:	4618      	mov	r0, r3
 8017e4c:	3708      	adds	r7, #8
 8017e4e:	46bd      	mov	sp, r7
 8017e50:	bd80      	pop	{r7, pc}
 8017e52:	bf00      	nop
 8017e54:	20004828 	.word	0x20004828
 8017e58:	08021064 	.word	0x08021064
 8017e5c:	08021138 	.word	0x08021138
 8017e60:	080210d8 	.word	0x080210d8

08017e64 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017e68:	f003 ffde 	bl	801be28 <rand>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	b29b      	uxth	r3, r3
 8017e70:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017e74:	b29b      	uxth	r3, r3
 8017e76:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017e7a:	b29a      	uxth	r2, r3
 8017e7c:	4b01      	ldr	r3, [pc, #4]	; (8017e84 <udp_init+0x20>)
 8017e7e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017e80:	bf00      	nop
 8017e82:	bd80      	pop	{r7, pc}
 8017e84:	20000018 	.word	0x20000018

08017e88 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017e88:	b480      	push	{r7}
 8017e8a:	b083      	sub	sp, #12
 8017e8c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017e8e:	2300      	movs	r3, #0
 8017e90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017e92:	4b17      	ldr	r3, [pc, #92]	; (8017ef0 <udp_new_port+0x68>)
 8017e94:	881b      	ldrh	r3, [r3, #0]
 8017e96:	1c5a      	adds	r2, r3, #1
 8017e98:	b291      	uxth	r1, r2
 8017e9a:	4a15      	ldr	r2, [pc, #84]	; (8017ef0 <udp_new_port+0x68>)
 8017e9c:	8011      	strh	r1, [r2, #0]
 8017e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	d103      	bne.n	8017eae <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017ea6:	4b12      	ldr	r3, [pc, #72]	; (8017ef0 <udp_new_port+0x68>)
 8017ea8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8017eac:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017eae:	4b11      	ldr	r3, [pc, #68]	; (8017ef4 <udp_new_port+0x6c>)
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	603b      	str	r3, [r7, #0]
 8017eb4:	e011      	b.n	8017eda <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017eb6:	683b      	ldr	r3, [r7, #0]
 8017eb8:	8a5a      	ldrh	r2, [r3, #18]
 8017eba:	4b0d      	ldr	r3, [pc, #52]	; (8017ef0 <udp_new_port+0x68>)
 8017ebc:	881b      	ldrh	r3, [r3, #0]
 8017ebe:	429a      	cmp	r2, r3
 8017ec0:	d108      	bne.n	8017ed4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017ec2:	88fb      	ldrh	r3, [r7, #6]
 8017ec4:	3301      	adds	r3, #1
 8017ec6:	80fb      	strh	r3, [r7, #6]
 8017ec8:	88fb      	ldrh	r3, [r7, #6]
 8017eca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017ece:	d3e0      	bcc.n	8017e92 <udp_new_port+0xa>
        return 0;
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	e007      	b.n	8017ee4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ed4:	683b      	ldr	r3, [r7, #0]
 8017ed6:	68db      	ldr	r3, [r3, #12]
 8017ed8:	603b      	str	r3, [r7, #0]
 8017eda:	683b      	ldr	r3, [r7, #0]
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d1ea      	bne.n	8017eb6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017ee0:	4b03      	ldr	r3, [pc, #12]	; (8017ef0 <udp_new_port+0x68>)
 8017ee2:	881b      	ldrh	r3, [r3, #0]
}
 8017ee4:	4618      	mov	r0, r3
 8017ee6:	370c      	adds	r7, #12
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr
 8017ef0:	20000018 	.word	0x20000018
 8017ef4:	2000d7d4 	.word	0x2000d7d4

08017ef8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	60f8      	str	r0, [r7, #12]
 8017f00:	60b9      	str	r1, [r7, #8]
 8017f02:	4613      	mov	r3, r2
 8017f04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2b00      	cmp	r3, #0
 8017f0a:	d105      	bne.n	8017f18 <udp_input_local_match+0x20>
 8017f0c:	4b27      	ldr	r3, [pc, #156]	; (8017fac <udp_input_local_match+0xb4>)
 8017f0e:	2287      	movs	r2, #135	; 0x87
 8017f10:	4927      	ldr	r1, [pc, #156]	; (8017fb0 <udp_input_local_match+0xb8>)
 8017f12:	4828      	ldr	r0, [pc, #160]	; (8017fb4 <udp_input_local_match+0xbc>)
 8017f14:	f003 fefa 	bl	801bd0c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017f18:	68bb      	ldr	r3, [r7, #8]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d105      	bne.n	8017f2a <udp_input_local_match+0x32>
 8017f1e:	4b23      	ldr	r3, [pc, #140]	; (8017fac <udp_input_local_match+0xb4>)
 8017f20:	2288      	movs	r2, #136	; 0x88
 8017f22:	4925      	ldr	r1, [pc, #148]	; (8017fb8 <udp_input_local_match+0xc0>)
 8017f24:	4823      	ldr	r0, [pc, #140]	; (8017fb4 <udp_input_local_match+0xbc>)
 8017f26:	f003 fef1 	bl	801bd0c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	7a1b      	ldrb	r3, [r3, #8]
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d00b      	beq.n	8017f4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	7a1a      	ldrb	r2, [r3, #8]
 8017f36:	4b21      	ldr	r3, [pc, #132]	; (8017fbc <udp_input_local_match+0xc4>)
 8017f38:	685b      	ldr	r3, [r3, #4]
 8017f3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017f3e:	3301      	adds	r3, #1
 8017f40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d001      	beq.n	8017f4a <udp_input_local_match+0x52>
    return 0;
 8017f46:	2300      	movs	r3, #0
 8017f48:	e02b      	b.n	8017fa2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017f4a:	79fb      	ldrb	r3, [r7, #7]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d018      	beq.n	8017f82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	2b00      	cmp	r3, #0
 8017f54:	d013      	beq.n	8017f7e <udp_input_local_match+0x86>
 8017f56:	68fb      	ldr	r3, [r7, #12]
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d00f      	beq.n	8017f7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017f5e:	4b17      	ldr	r3, [pc, #92]	; (8017fbc <udp_input_local_match+0xc4>)
 8017f60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f66:	d00a      	beq.n	8017f7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	681a      	ldr	r2, [r3, #0]
 8017f6c:	4b13      	ldr	r3, [pc, #76]	; (8017fbc <udp_input_local_match+0xc4>)
 8017f6e:	695b      	ldr	r3, [r3, #20]
 8017f70:	405a      	eors	r2, r3
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	3308      	adds	r3, #8
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d110      	bne.n	8017fa0 <udp_input_local_match+0xa8>
          return 1;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	e00f      	b.n	8017fa2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d009      	beq.n	8017f9c <udp_input_local_match+0xa4>
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	2b00      	cmp	r3, #0
 8017f8e:	d005      	beq.n	8017f9c <udp_input_local_match+0xa4>
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	681a      	ldr	r2, [r3, #0]
 8017f94:	4b09      	ldr	r3, [pc, #36]	; (8017fbc <udp_input_local_match+0xc4>)
 8017f96:	695b      	ldr	r3, [r3, #20]
 8017f98:	429a      	cmp	r2, r3
 8017f9a:	d101      	bne.n	8017fa0 <udp_input_local_match+0xa8>
        return 1;
 8017f9c:	2301      	movs	r3, #1
 8017f9e:	e000      	b.n	8017fa2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017fa0:	2300      	movs	r3, #0
}
 8017fa2:	4618      	mov	r0, r3
 8017fa4:	3710      	adds	r7, #16
 8017fa6:	46bd      	mov	sp, r7
 8017fa8:	bd80      	pop	{r7, pc}
 8017faa:	bf00      	nop
 8017fac:	0802114c 	.word	0x0802114c
 8017fb0:	0802117c 	.word	0x0802117c
 8017fb4:	080211a0 	.word	0x080211a0
 8017fb8:	080211c8 	.word	0x080211c8
 8017fbc:	2000a0a8 	.word	0x2000a0a8

08017fc0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017fc0:	b590      	push	{r4, r7, lr}
 8017fc2:	b08d      	sub	sp, #52	; 0x34
 8017fc4:	af02      	add	r7, sp, #8
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	d105      	bne.n	8017fe0 <udp_input+0x20>
 8017fd4:	4b7c      	ldr	r3, [pc, #496]	; (80181c8 <udp_input+0x208>)
 8017fd6:	22cf      	movs	r2, #207	; 0xcf
 8017fd8:	497c      	ldr	r1, [pc, #496]	; (80181cc <udp_input+0x20c>)
 8017fda:	487d      	ldr	r0, [pc, #500]	; (80181d0 <udp_input+0x210>)
 8017fdc:	f003 fe96 	bl	801bd0c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017fe0:	683b      	ldr	r3, [r7, #0]
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d105      	bne.n	8017ff2 <udp_input+0x32>
 8017fe6:	4b78      	ldr	r3, [pc, #480]	; (80181c8 <udp_input+0x208>)
 8017fe8:	22d0      	movs	r2, #208	; 0xd0
 8017fea:	497a      	ldr	r1, [pc, #488]	; (80181d4 <udp_input+0x214>)
 8017fec:	4878      	ldr	r0, [pc, #480]	; (80181d0 <udp_input+0x210>)
 8017fee:	f003 fe8d 	bl	801bd0c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	895b      	ldrh	r3, [r3, #10]
 8017ff6:	2b07      	cmp	r3, #7
 8017ff8:	d803      	bhi.n	8018002 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017ffa:	6878      	ldr	r0, [r7, #4]
 8017ffc:	f7f9 fb56 	bl	80116ac <pbuf_free>
    goto end;
 8018000:	e0de      	b.n	80181c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018008:	4b73      	ldr	r3, [pc, #460]	; (80181d8 <udp_input+0x218>)
 801800a:	695b      	ldr	r3, [r3, #20]
 801800c:	4a72      	ldr	r2, [pc, #456]	; (80181d8 <udp_input+0x218>)
 801800e:	6812      	ldr	r2, [r2, #0]
 8018010:	4611      	mov	r1, r2
 8018012:	4618      	mov	r0, r3
 8018014:	f001 ff80 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8018018:	4603      	mov	r3, r0
 801801a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801801c:	697b      	ldr	r3, [r7, #20]
 801801e:	881b      	ldrh	r3, [r3, #0]
 8018020:	b29b      	uxth	r3, r3
 8018022:	4618      	mov	r0, r3
 8018024:	f7f7 ff64 	bl	800fef0 <lwip_htons>
 8018028:	4603      	mov	r3, r0
 801802a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801802c:	697b      	ldr	r3, [r7, #20]
 801802e:	885b      	ldrh	r3, [r3, #2]
 8018030:	b29b      	uxth	r3, r3
 8018032:	4618      	mov	r0, r3
 8018034:	f7f7 ff5c 	bl	800fef0 <lwip_htons>
 8018038:	4603      	mov	r3, r0
 801803a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801803c:	2300      	movs	r3, #0
 801803e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8018040:	2300      	movs	r3, #0
 8018042:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018044:	2300      	movs	r3, #0
 8018046:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018048:	4b64      	ldr	r3, [pc, #400]	; (80181dc <udp_input+0x21c>)
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	627b      	str	r3, [r7, #36]	; 0x24
 801804e:	e054      	b.n	80180fa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8018050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018052:	8a5b      	ldrh	r3, [r3, #18]
 8018054:	89fa      	ldrh	r2, [r7, #14]
 8018056:	429a      	cmp	r2, r3
 8018058:	d14a      	bne.n	80180f0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801805a:	7cfb      	ldrb	r3, [r7, #19]
 801805c:	461a      	mov	r2, r3
 801805e:	6839      	ldr	r1, [r7, #0]
 8018060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018062:	f7ff ff49 	bl	8017ef8 <udp_input_local_match>
 8018066:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018068:	2b00      	cmp	r3, #0
 801806a:	d041      	beq.n	80180f0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806e:	7c1b      	ldrb	r3, [r3, #16]
 8018070:	f003 0304 	and.w	r3, r3, #4
 8018074:	2b00      	cmp	r3, #0
 8018076:	d11d      	bne.n	80180b4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018078:	69fb      	ldr	r3, [r7, #28]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d102      	bne.n	8018084 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018080:	61fb      	str	r3, [r7, #28]
 8018082:	e017      	b.n	80180b4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018084:	7cfb      	ldrb	r3, [r7, #19]
 8018086:	2b00      	cmp	r3, #0
 8018088:	d014      	beq.n	80180b4 <udp_input+0xf4>
 801808a:	4b53      	ldr	r3, [pc, #332]	; (80181d8 <udp_input+0x218>)
 801808c:	695b      	ldr	r3, [r3, #20]
 801808e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018092:	d10f      	bne.n	80180b4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018094:	69fb      	ldr	r3, [r7, #28]
 8018096:	681a      	ldr	r2, [r3, #0]
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	3304      	adds	r3, #4
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	429a      	cmp	r2, r3
 80180a0:	d008      	beq.n	80180b4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	681a      	ldr	r2, [r3, #0]
 80180a6:	683b      	ldr	r3, [r7, #0]
 80180a8:	3304      	adds	r3, #4
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	429a      	cmp	r2, r3
 80180ae:	d101      	bne.n	80180b4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80180b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80180b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180b6:	8a9b      	ldrh	r3, [r3, #20]
 80180b8:	8a3a      	ldrh	r2, [r7, #16]
 80180ba:	429a      	cmp	r2, r3
 80180bc:	d118      	bne.n	80180f0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80180be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d005      	beq.n	80180d2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80180c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180c8:	685a      	ldr	r2, [r3, #4]
 80180ca:	4b43      	ldr	r3, [pc, #268]	; (80181d8 <udp_input+0x218>)
 80180cc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80180ce:	429a      	cmp	r2, r3
 80180d0:	d10e      	bne.n	80180f0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80180d2:	6a3b      	ldr	r3, [r7, #32]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d014      	beq.n	8018102 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80180d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180da:	68da      	ldr	r2, [r3, #12]
 80180dc:	6a3b      	ldr	r3, [r7, #32]
 80180de:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80180e0:	4b3e      	ldr	r3, [pc, #248]	; (80181dc <udp_input+0x21c>)
 80180e2:	681a      	ldr	r2, [r3, #0]
 80180e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80180e8:	4a3c      	ldr	r2, [pc, #240]	; (80181dc <udp_input+0x21c>)
 80180ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80180ee:	e008      	b.n	8018102 <udp_input+0x142>
      }
    }

    prev = pcb;
 80180f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80180f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180f6:	68db      	ldr	r3, [r3, #12]
 80180f8:	627b      	str	r3, [r7, #36]	; 0x24
 80180fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d1a7      	bne.n	8018050 <udp_input+0x90>
 8018100:	e000      	b.n	8018104 <udp_input+0x144>
        break;
 8018102:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018106:	2b00      	cmp	r3, #0
 8018108:	d101      	bne.n	801810e <udp_input+0x14e>
    pcb = uncon_pcb;
 801810a:	69fb      	ldr	r3, [r7, #28]
 801810c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801810e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018110:	2b00      	cmp	r3, #0
 8018112:	d002      	beq.n	801811a <udp_input+0x15a>
    for_us = 1;
 8018114:	2301      	movs	r3, #1
 8018116:	76fb      	strb	r3, [r7, #27]
 8018118:	e00a      	b.n	8018130 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801811a:	683b      	ldr	r3, [r7, #0]
 801811c:	3304      	adds	r3, #4
 801811e:	681a      	ldr	r2, [r3, #0]
 8018120:	4b2d      	ldr	r3, [pc, #180]	; (80181d8 <udp_input+0x218>)
 8018122:	695b      	ldr	r3, [r3, #20]
 8018124:	429a      	cmp	r2, r3
 8018126:	bf0c      	ite	eq
 8018128:	2301      	moveq	r3, #1
 801812a:	2300      	movne	r3, #0
 801812c:	b2db      	uxtb	r3, r3
 801812e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018130:	7efb      	ldrb	r3, [r7, #27]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d041      	beq.n	80181ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018136:	2108      	movs	r1, #8
 8018138:	6878      	ldr	r0, [r7, #4]
 801813a:	f7f9 f9ff 	bl	801153c <pbuf_remove_header>
 801813e:	4603      	mov	r3, r0
 8018140:	2b00      	cmp	r3, #0
 8018142:	d00a      	beq.n	801815a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018144:	4b20      	ldr	r3, [pc, #128]	; (80181c8 <udp_input+0x208>)
 8018146:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801814a:	4925      	ldr	r1, [pc, #148]	; (80181e0 <udp_input+0x220>)
 801814c:	4820      	ldr	r0, [pc, #128]	; (80181d0 <udp_input+0x210>)
 801814e:	f003 fddd 	bl	801bd0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018152:	6878      	ldr	r0, [r7, #4]
 8018154:	f7f9 faaa 	bl	80116ac <pbuf_free>
      goto end;
 8018158:	e032      	b.n	80181c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801815a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801815c:	2b00      	cmp	r3, #0
 801815e:	d012      	beq.n	8018186 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018162:	699b      	ldr	r3, [r3, #24]
 8018164:	2b00      	cmp	r3, #0
 8018166:	d00a      	beq.n	801817e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816a:	699c      	ldr	r4, [r3, #24]
 801816c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801816e:	69d8      	ldr	r0, [r3, #28]
 8018170:	8a3b      	ldrh	r3, [r7, #16]
 8018172:	9300      	str	r3, [sp, #0]
 8018174:	4b1b      	ldr	r3, [pc, #108]	; (80181e4 <udp_input+0x224>)
 8018176:	687a      	ldr	r2, [r7, #4]
 8018178:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801817a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801817c:	e021      	b.n	80181c2 <udp_input+0x202>
        pbuf_free(p);
 801817e:	6878      	ldr	r0, [r7, #4]
 8018180:	f7f9 fa94 	bl	80116ac <pbuf_free>
        goto end;
 8018184:	e01c      	b.n	80181c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018186:	7cfb      	ldrb	r3, [r7, #19]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d112      	bne.n	80181b2 <udp_input+0x1f2>
 801818c:	4b12      	ldr	r3, [pc, #72]	; (80181d8 <udp_input+0x218>)
 801818e:	695b      	ldr	r3, [r3, #20]
 8018190:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018194:	2be0      	cmp	r3, #224	; 0xe0
 8018196:	d00c      	beq.n	80181b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018198:	4b0f      	ldr	r3, [pc, #60]	; (80181d8 <udp_input+0x218>)
 801819a:	899b      	ldrh	r3, [r3, #12]
 801819c:	3308      	adds	r3, #8
 801819e:	b29b      	uxth	r3, r3
 80181a0:	b21b      	sxth	r3, r3
 80181a2:	4619      	mov	r1, r3
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f7f9 fa3c 	bl	8011622 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80181aa:	2103      	movs	r1, #3
 80181ac:	6878      	ldr	r0, [r7, #4]
 80181ae:	f001 fb93 	bl	80198d8 <icmp_dest_unreach>
      pbuf_free(p);
 80181b2:	6878      	ldr	r0, [r7, #4]
 80181b4:	f7f9 fa7a 	bl	80116ac <pbuf_free>
  return;
 80181b8:	e003      	b.n	80181c2 <udp_input+0x202>
    pbuf_free(p);
 80181ba:	6878      	ldr	r0, [r7, #4]
 80181bc:	f7f9 fa76 	bl	80116ac <pbuf_free>
  return;
 80181c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80181c2:	372c      	adds	r7, #44	; 0x2c
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd90      	pop	{r4, r7, pc}
 80181c8:	0802114c 	.word	0x0802114c
 80181cc:	080211f0 	.word	0x080211f0
 80181d0:	080211a0 	.word	0x080211a0
 80181d4:	08021208 	.word	0x08021208
 80181d8:	2000a0a8 	.word	0x2000a0a8
 80181dc:	2000d7d4 	.word	0x2000d7d4
 80181e0:	08021224 	.word	0x08021224
 80181e4:	2000a0b8 	.word	0x2000a0b8

080181e8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b082      	sub	sp, #8
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d109      	bne.n	801820c <udp_send+0x24>
 80181f8:	4b11      	ldr	r3, [pc, #68]	; (8018240 <udp_send+0x58>)
 80181fa:	f240 12d5 	movw	r2, #469	; 0x1d5
 80181fe:	4911      	ldr	r1, [pc, #68]	; (8018244 <udp_send+0x5c>)
 8018200:	4811      	ldr	r0, [pc, #68]	; (8018248 <udp_send+0x60>)
 8018202:	f003 fd83 	bl	801bd0c <iprintf>
 8018206:	f06f 030f 	mvn.w	r3, #15
 801820a:	e015      	b.n	8018238 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801820c:	683b      	ldr	r3, [r7, #0]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d109      	bne.n	8018226 <udp_send+0x3e>
 8018212:	4b0b      	ldr	r3, [pc, #44]	; (8018240 <udp_send+0x58>)
 8018214:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8018218:	490c      	ldr	r1, [pc, #48]	; (801824c <udp_send+0x64>)
 801821a:	480b      	ldr	r0, [pc, #44]	; (8018248 <udp_send+0x60>)
 801821c:	f003 fd76 	bl	801bd0c <iprintf>
 8018220:	f06f 030f 	mvn.w	r3, #15
 8018224:	e008      	b.n	8018238 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	1d1a      	adds	r2, r3, #4
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	8a9b      	ldrh	r3, [r3, #20]
 801822e:	6839      	ldr	r1, [r7, #0]
 8018230:	6878      	ldr	r0, [r7, #4]
 8018232:	f000 f80d 	bl	8018250 <udp_sendto>
 8018236:	4603      	mov	r3, r0
}
 8018238:	4618      	mov	r0, r3
 801823a:	3708      	adds	r7, #8
 801823c:	46bd      	mov	sp, r7
 801823e:	bd80      	pop	{r7, pc}
 8018240:	0802114c 	.word	0x0802114c
 8018244:	08021240 	.word	0x08021240
 8018248:	080211a0 	.word	0x080211a0
 801824c:	08021258 	.word	0x08021258

08018250 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b088      	sub	sp, #32
 8018254:	af02      	add	r7, sp, #8
 8018256:	60f8      	str	r0, [r7, #12]
 8018258:	60b9      	str	r1, [r7, #8]
 801825a:	607a      	str	r2, [r7, #4]
 801825c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d109      	bne.n	8018278 <udp_sendto+0x28>
 8018264:	4b23      	ldr	r3, [pc, #140]	; (80182f4 <udp_sendto+0xa4>)
 8018266:	f44f 7206 	mov.w	r2, #536	; 0x218
 801826a:	4923      	ldr	r1, [pc, #140]	; (80182f8 <udp_sendto+0xa8>)
 801826c:	4823      	ldr	r0, [pc, #140]	; (80182fc <udp_sendto+0xac>)
 801826e:	f003 fd4d 	bl	801bd0c <iprintf>
 8018272:	f06f 030f 	mvn.w	r3, #15
 8018276:	e038      	b.n	80182ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018278:	68bb      	ldr	r3, [r7, #8]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d109      	bne.n	8018292 <udp_sendto+0x42>
 801827e:	4b1d      	ldr	r3, [pc, #116]	; (80182f4 <udp_sendto+0xa4>)
 8018280:	f240 2219 	movw	r2, #537	; 0x219
 8018284:	491e      	ldr	r1, [pc, #120]	; (8018300 <udp_sendto+0xb0>)
 8018286:	481d      	ldr	r0, [pc, #116]	; (80182fc <udp_sendto+0xac>)
 8018288:	f003 fd40 	bl	801bd0c <iprintf>
 801828c:	f06f 030f 	mvn.w	r3, #15
 8018290:	e02b      	b.n	80182ea <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2b00      	cmp	r3, #0
 8018296:	d109      	bne.n	80182ac <udp_sendto+0x5c>
 8018298:	4b16      	ldr	r3, [pc, #88]	; (80182f4 <udp_sendto+0xa4>)
 801829a:	f240 221a 	movw	r2, #538	; 0x21a
 801829e:	4919      	ldr	r1, [pc, #100]	; (8018304 <udp_sendto+0xb4>)
 80182a0:	4816      	ldr	r0, [pc, #88]	; (80182fc <udp_sendto+0xac>)
 80182a2:	f003 fd33 	bl	801bd0c <iprintf>
 80182a6:	f06f 030f 	mvn.w	r3, #15
 80182aa:	e01e      	b.n	80182ea <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80182ac:	68fb      	ldr	r3, [r7, #12]
 80182ae:	7a1b      	ldrb	r3, [r3, #8]
 80182b0:	2b00      	cmp	r3, #0
 80182b2:	d006      	beq.n	80182c2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	7a1b      	ldrb	r3, [r3, #8]
 80182b8:	4618      	mov	r0, r3
 80182ba:	f7f8 fe37 	bl	8010f2c <netif_get_by_index>
 80182be:	6178      	str	r0, [r7, #20]
 80182c0:	e003      	b.n	80182ca <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80182c2:	6878      	ldr	r0, [r7, #4]
 80182c4:	f001 fb92 	bl	80199ec <ip4_route>
 80182c8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80182ca:	697b      	ldr	r3, [r7, #20]
 80182cc:	2b00      	cmp	r3, #0
 80182ce:	d102      	bne.n	80182d6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80182d0:	f06f 0303 	mvn.w	r3, #3
 80182d4:	e009      	b.n	80182ea <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80182d6:	887a      	ldrh	r2, [r7, #2]
 80182d8:	697b      	ldr	r3, [r7, #20]
 80182da:	9300      	str	r3, [sp, #0]
 80182dc:	4613      	mov	r3, r2
 80182de:	687a      	ldr	r2, [r7, #4]
 80182e0:	68b9      	ldr	r1, [r7, #8]
 80182e2:	68f8      	ldr	r0, [r7, #12]
 80182e4:	f000 f810 	bl	8018308 <udp_sendto_if>
 80182e8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80182ea:	4618      	mov	r0, r3
 80182ec:	3718      	adds	r7, #24
 80182ee:	46bd      	mov	sp, r7
 80182f0:	bd80      	pop	{r7, pc}
 80182f2:	bf00      	nop
 80182f4:	0802114c 	.word	0x0802114c
 80182f8:	08021270 	.word	0x08021270
 80182fc:	080211a0 	.word	0x080211a0
 8018300:	08021288 	.word	0x08021288
 8018304:	080212a4 	.word	0x080212a4

08018308 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b088      	sub	sp, #32
 801830c:	af02      	add	r7, sp, #8
 801830e:	60f8      	str	r0, [r7, #12]
 8018310:	60b9      	str	r1, [r7, #8]
 8018312:	607a      	str	r2, [r7, #4]
 8018314:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d109      	bne.n	8018330 <udp_sendto_if+0x28>
 801831c:	4b2e      	ldr	r3, [pc, #184]	; (80183d8 <udp_sendto_if+0xd0>)
 801831e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018322:	492e      	ldr	r1, [pc, #184]	; (80183dc <udp_sendto_if+0xd4>)
 8018324:	482e      	ldr	r0, [pc, #184]	; (80183e0 <udp_sendto_if+0xd8>)
 8018326:	f003 fcf1 	bl	801bd0c <iprintf>
 801832a:	f06f 030f 	mvn.w	r3, #15
 801832e:	e04f      	b.n	80183d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	2b00      	cmp	r3, #0
 8018334:	d109      	bne.n	801834a <udp_sendto_if+0x42>
 8018336:	4b28      	ldr	r3, [pc, #160]	; (80183d8 <udp_sendto_if+0xd0>)
 8018338:	f240 2281 	movw	r2, #641	; 0x281
 801833c:	4929      	ldr	r1, [pc, #164]	; (80183e4 <udp_sendto_if+0xdc>)
 801833e:	4828      	ldr	r0, [pc, #160]	; (80183e0 <udp_sendto_if+0xd8>)
 8018340:	f003 fce4 	bl	801bd0c <iprintf>
 8018344:	f06f 030f 	mvn.w	r3, #15
 8018348:	e042      	b.n	80183d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	2b00      	cmp	r3, #0
 801834e:	d109      	bne.n	8018364 <udp_sendto_if+0x5c>
 8018350:	4b21      	ldr	r3, [pc, #132]	; (80183d8 <udp_sendto_if+0xd0>)
 8018352:	f240 2282 	movw	r2, #642	; 0x282
 8018356:	4924      	ldr	r1, [pc, #144]	; (80183e8 <udp_sendto_if+0xe0>)
 8018358:	4821      	ldr	r0, [pc, #132]	; (80183e0 <udp_sendto_if+0xd8>)
 801835a:	f003 fcd7 	bl	801bd0c <iprintf>
 801835e:	f06f 030f 	mvn.w	r3, #15
 8018362:	e035      	b.n	80183d0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018364:	6a3b      	ldr	r3, [r7, #32]
 8018366:	2b00      	cmp	r3, #0
 8018368:	d109      	bne.n	801837e <udp_sendto_if+0x76>
 801836a:	4b1b      	ldr	r3, [pc, #108]	; (80183d8 <udp_sendto_if+0xd0>)
 801836c:	f240 2283 	movw	r2, #643	; 0x283
 8018370:	491e      	ldr	r1, [pc, #120]	; (80183ec <udp_sendto_if+0xe4>)
 8018372:	481b      	ldr	r0, [pc, #108]	; (80183e0 <udp_sendto_if+0xd8>)
 8018374:	f003 fcca 	bl	801bd0c <iprintf>
 8018378:	f06f 030f 	mvn.w	r3, #15
 801837c:	e028      	b.n	80183d0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801837e:	68fb      	ldr	r3, [r7, #12]
 8018380:	2b00      	cmp	r3, #0
 8018382:	d009      	beq.n	8018398 <udp_sendto_if+0x90>
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d005      	beq.n	8018398 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018394:	2be0      	cmp	r3, #224	; 0xe0
 8018396:	d103      	bne.n	80183a0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018398:	6a3b      	ldr	r3, [r7, #32]
 801839a:	3304      	adds	r3, #4
 801839c:	617b      	str	r3, [r7, #20]
 801839e:	e00b      	b.n	80183b8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	681a      	ldr	r2, [r3, #0]
 80183a4:	6a3b      	ldr	r3, [r7, #32]
 80183a6:	3304      	adds	r3, #4
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d002      	beq.n	80183b4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80183ae:	f06f 0303 	mvn.w	r3, #3
 80183b2:	e00d      	b.n	80183d0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80183b4:	68fb      	ldr	r3, [r7, #12]
 80183b6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80183b8:	887a      	ldrh	r2, [r7, #2]
 80183ba:	697b      	ldr	r3, [r7, #20]
 80183bc:	9301      	str	r3, [sp, #4]
 80183be:	6a3b      	ldr	r3, [r7, #32]
 80183c0:	9300      	str	r3, [sp, #0]
 80183c2:	4613      	mov	r3, r2
 80183c4:	687a      	ldr	r2, [r7, #4]
 80183c6:	68b9      	ldr	r1, [r7, #8]
 80183c8:	68f8      	ldr	r0, [r7, #12]
 80183ca:	f000 f811 	bl	80183f0 <udp_sendto_if_src>
 80183ce:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80183d0:	4618      	mov	r0, r3
 80183d2:	3718      	adds	r7, #24
 80183d4:	46bd      	mov	sp, r7
 80183d6:	bd80      	pop	{r7, pc}
 80183d8:	0802114c 	.word	0x0802114c
 80183dc:	080212c0 	.word	0x080212c0
 80183e0:	080211a0 	.word	0x080211a0
 80183e4:	080212dc 	.word	0x080212dc
 80183e8:	080212f8 	.word	0x080212f8
 80183ec:	08021318 	.word	0x08021318

080183f0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b08c      	sub	sp, #48	; 0x30
 80183f4:	af04      	add	r7, sp, #16
 80183f6:	60f8      	str	r0, [r7, #12]
 80183f8:	60b9      	str	r1, [r7, #8]
 80183fa:	607a      	str	r2, [r7, #4]
 80183fc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80183fe:	68fb      	ldr	r3, [r7, #12]
 8018400:	2b00      	cmp	r3, #0
 8018402:	d109      	bne.n	8018418 <udp_sendto_if_src+0x28>
 8018404:	4b65      	ldr	r3, [pc, #404]	; (801859c <udp_sendto_if_src+0x1ac>)
 8018406:	f240 22d1 	movw	r2, #721	; 0x2d1
 801840a:	4965      	ldr	r1, [pc, #404]	; (80185a0 <udp_sendto_if_src+0x1b0>)
 801840c:	4865      	ldr	r0, [pc, #404]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 801840e:	f003 fc7d 	bl	801bd0c <iprintf>
 8018412:	f06f 030f 	mvn.w	r3, #15
 8018416:	e0bc      	b.n	8018592 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	2b00      	cmp	r3, #0
 801841c:	d109      	bne.n	8018432 <udp_sendto_if_src+0x42>
 801841e:	4b5f      	ldr	r3, [pc, #380]	; (801859c <udp_sendto_if_src+0x1ac>)
 8018420:	f240 22d2 	movw	r2, #722	; 0x2d2
 8018424:	4960      	ldr	r1, [pc, #384]	; (80185a8 <udp_sendto_if_src+0x1b8>)
 8018426:	485f      	ldr	r0, [pc, #380]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 8018428:	f003 fc70 	bl	801bd0c <iprintf>
 801842c:	f06f 030f 	mvn.w	r3, #15
 8018430:	e0af      	b.n	8018592 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	2b00      	cmp	r3, #0
 8018436:	d109      	bne.n	801844c <udp_sendto_if_src+0x5c>
 8018438:	4b58      	ldr	r3, [pc, #352]	; (801859c <udp_sendto_if_src+0x1ac>)
 801843a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801843e:	495b      	ldr	r1, [pc, #364]	; (80185ac <udp_sendto_if_src+0x1bc>)
 8018440:	4858      	ldr	r0, [pc, #352]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 8018442:	f003 fc63 	bl	801bd0c <iprintf>
 8018446:	f06f 030f 	mvn.w	r3, #15
 801844a:	e0a2      	b.n	8018592 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801844c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801844e:	2b00      	cmp	r3, #0
 8018450:	d109      	bne.n	8018466 <udp_sendto_if_src+0x76>
 8018452:	4b52      	ldr	r3, [pc, #328]	; (801859c <udp_sendto_if_src+0x1ac>)
 8018454:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8018458:	4955      	ldr	r1, [pc, #340]	; (80185b0 <udp_sendto_if_src+0x1c0>)
 801845a:	4852      	ldr	r0, [pc, #328]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 801845c:	f003 fc56 	bl	801bd0c <iprintf>
 8018460:	f06f 030f 	mvn.w	r3, #15
 8018464:	e095      	b.n	8018592 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018468:	2b00      	cmp	r3, #0
 801846a:	d109      	bne.n	8018480 <udp_sendto_if_src+0x90>
 801846c:	4b4b      	ldr	r3, [pc, #300]	; (801859c <udp_sendto_if_src+0x1ac>)
 801846e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8018472:	4950      	ldr	r1, [pc, #320]	; (80185b4 <udp_sendto_if_src+0x1c4>)
 8018474:	484b      	ldr	r0, [pc, #300]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 8018476:	f003 fc49 	bl	801bd0c <iprintf>
 801847a:	f06f 030f 	mvn.w	r3, #15
 801847e:	e088      	b.n	8018592 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018480:	68fb      	ldr	r3, [r7, #12]
 8018482:	8a5b      	ldrh	r3, [r3, #18]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d10f      	bne.n	80184a8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018488:	68f9      	ldr	r1, [r7, #12]
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	8a5b      	ldrh	r3, [r3, #18]
 801848e:	461a      	mov	r2, r3
 8018490:	68f8      	ldr	r0, [r7, #12]
 8018492:	f000 f893 	bl	80185bc <udp_bind>
 8018496:	4603      	mov	r3, r0
 8018498:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801849a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d002      	beq.n	80184a8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80184a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80184a6:	e074      	b.n	8018592 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80184a8:	68bb      	ldr	r3, [r7, #8]
 80184aa:	891b      	ldrh	r3, [r3, #8]
 80184ac:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d902      	bls.n	80184ba <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80184b4:	f04f 33ff 	mov.w	r3, #4294967295
 80184b8:	e06b      	b.n	8018592 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80184ba:	2108      	movs	r1, #8
 80184bc:	68b8      	ldr	r0, [r7, #8]
 80184be:	f7f9 f82d 	bl	801151c <pbuf_add_header>
 80184c2:	4603      	mov	r3, r0
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d015      	beq.n	80184f4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80184c8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80184cc:	2108      	movs	r1, #8
 80184ce:	2022      	movs	r0, #34	; 0x22
 80184d0:	f7f8 fdd6 	bl	8011080 <pbuf_alloc>
 80184d4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80184d6:	69fb      	ldr	r3, [r7, #28]
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d102      	bne.n	80184e2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80184dc:	f04f 33ff 	mov.w	r3, #4294967295
 80184e0:	e057      	b.n	8018592 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80184e2:	68bb      	ldr	r3, [r7, #8]
 80184e4:	891b      	ldrh	r3, [r3, #8]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d006      	beq.n	80184f8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80184ea:	68b9      	ldr	r1, [r7, #8]
 80184ec:	69f8      	ldr	r0, [r7, #28]
 80184ee:	f7f9 fa01 	bl	80118f4 <pbuf_chain>
 80184f2:	e001      	b.n	80184f8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80184f4:	68bb      	ldr	r3, [r7, #8]
 80184f6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80184f8:	69fb      	ldr	r3, [r7, #28]
 80184fa:	895b      	ldrh	r3, [r3, #10]
 80184fc:	2b07      	cmp	r3, #7
 80184fe:	d806      	bhi.n	801850e <udp_sendto_if_src+0x11e>
 8018500:	4b26      	ldr	r3, [pc, #152]	; (801859c <udp_sendto_if_src+0x1ac>)
 8018502:	f240 320d 	movw	r2, #781	; 0x30d
 8018506:	492c      	ldr	r1, [pc, #176]	; (80185b8 <udp_sendto_if_src+0x1c8>)
 8018508:	4826      	ldr	r0, [pc, #152]	; (80185a4 <udp_sendto_if_src+0x1b4>)
 801850a:	f003 fbff 	bl	801bd0c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801850e:	69fb      	ldr	r3, [r7, #28]
 8018510:	685b      	ldr	r3, [r3, #4]
 8018512:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	8a5b      	ldrh	r3, [r3, #18]
 8018518:	4618      	mov	r0, r3
 801851a:	f7f7 fce9 	bl	800fef0 <lwip_htons>
 801851e:	4603      	mov	r3, r0
 8018520:	461a      	mov	r2, r3
 8018522:	697b      	ldr	r3, [r7, #20]
 8018524:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018526:	887b      	ldrh	r3, [r7, #2]
 8018528:	4618      	mov	r0, r3
 801852a:	f7f7 fce1 	bl	800fef0 <lwip_htons>
 801852e:	4603      	mov	r3, r0
 8018530:	461a      	mov	r2, r3
 8018532:	697b      	ldr	r3, [r7, #20]
 8018534:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018536:	697b      	ldr	r3, [r7, #20]
 8018538:	2200      	movs	r2, #0
 801853a:	719a      	strb	r2, [r3, #6]
 801853c:	2200      	movs	r2, #0
 801853e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018540:	69fb      	ldr	r3, [r7, #28]
 8018542:	891b      	ldrh	r3, [r3, #8]
 8018544:	4618      	mov	r0, r3
 8018546:	f7f7 fcd3 	bl	800fef0 <lwip_htons>
 801854a:	4603      	mov	r3, r0
 801854c:	461a      	mov	r2, r3
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018552:	2311      	movs	r3, #17
 8018554:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018556:	68fb      	ldr	r3, [r7, #12]
 8018558:	7adb      	ldrb	r3, [r3, #11]
 801855a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	7a9b      	ldrb	r3, [r3, #10]
 8018560:	7cb9      	ldrb	r1, [r7, #18]
 8018562:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018564:	9202      	str	r2, [sp, #8]
 8018566:	7cfa      	ldrb	r2, [r7, #19]
 8018568:	9201      	str	r2, [sp, #4]
 801856a:	9300      	str	r3, [sp, #0]
 801856c:	460b      	mov	r3, r1
 801856e:	687a      	ldr	r2, [r7, #4]
 8018570:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018572:	69f8      	ldr	r0, [r7, #28]
 8018574:	f001 fc22 	bl	8019dbc <ip4_output_if_src>
 8018578:	4603      	mov	r3, r0
 801857a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801857c:	69fa      	ldr	r2, [r7, #28]
 801857e:	68bb      	ldr	r3, [r7, #8]
 8018580:	429a      	cmp	r2, r3
 8018582:	d004      	beq.n	801858e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018584:	69f8      	ldr	r0, [r7, #28]
 8018586:	f7f9 f891 	bl	80116ac <pbuf_free>
    q = NULL;
 801858a:	2300      	movs	r3, #0
 801858c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801858e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018592:	4618      	mov	r0, r3
 8018594:	3720      	adds	r7, #32
 8018596:	46bd      	mov	sp, r7
 8018598:	bd80      	pop	{r7, pc}
 801859a:	bf00      	nop
 801859c:	0802114c 	.word	0x0802114c
 80185a0:	08021338 	.word	0x08021338
 80185a4:	080211a0 	.word	0x080211a0
 80185a8:	08021358 	.word	0x08021358
 80185ac:	08021378 	.word	0x08021378
 80185b0:	0802139c 	.word	0x0802139c
 80185b4:	080213c0 	.word	0x080213c0
 80185b8:	080213e4 	.word	0x080213e4

080185bc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b086      	sub	sp, #24
 80185c0:	af00      	add	r7, sp, #0
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	60b9      	str	r1, [r7, #8]
 80185c6:	4613      	mov	r3, r2
 80185c8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80185ca:	68bb      	ldr	r3, [r7, #8]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d101      	bne.n	80185d4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80185d0:	4b39      	ldr	r3, [pc, #228]	; (80186b8 <udp_bind+0xfc>)
 80185d2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d109      	bne.n	80185ee <udp_bind+0x32>
 80185da:	4b38      	ldr	r3, [pc, #224]	; (80186bc <udp_bind+0x100>)
 80185dc:	f240 32b7 	movw	r2, #951	; 0x3b7
 80185e0:	4937      	ldr	r1, [pc, #220]	; (80186c0 <udp_bind+0x104>)
 80185e2:	4838      	ldr	r0, [pc, #224]	; (80186c4 <udp_bind+0x108>)
 80185e4:	f003 fb92 	bl	801bd0c <iprintf>
 80185e8:	f06f 030f 	mvn.w	r3, #15
 80185ec:	e060      	b.n	80186b0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80185ee:	2300      	movs	r3, #0
 80185f0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80185f2:	4b35      	ldr	r3, [pc, #212]	; (80186c8 <udp_bind+0x10c>)
 80185f4:	681b      	ldr	r3, [r3, #0]
 80185f6:	617b      	str	r3, [r7, #20]
 80185f8:	e009      	b.n	801860e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80185fa:	68fa      	ldr	r2, [r7, #12]
 80185fc:	697b      	ldr	r3, [r7, #20]
 80185fe:	429a      	cmp	r2, r3
 8018600:	d102      	bne.n	8018608 <udp_bind+0x4c>
      rebind = 1;
 8018602:	2301      	movs	r3, #1
 8018604:	74fb      	strb	r3, [r7, #19]
      break;
 8018606:	e005      	b.n	8018614 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018608:	697b      	ldr	r3, [r7, #20]
 801860a:	68db      	ldr	r3, [r3, #12]
 801860c:	617b      	str	r3, [r7, #20]
 801860e:	697b      	ldr	r3, [r7, #20]
 8018610:	2b00      	cmp	r3, #0
 8018612:	d1f2      	bne.n	80185fa <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018614:	88fb      	ldrh	r3, [r7, #6]
 8018616:	2b00      	cmp	r3, #0
 8018618:	d109      	bne.n	801862e <udp_bind+0x72>
    port = udp_new_port();
 801861a:	f7ff fc35 	bl	8017e88 <udp_new_port>
 801861e:	4603      	mov	r3, r0
 8018620:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018622:	88fb      	ldrh	r3, [r7, #6]
 8018624:	2b00      	cmp	r3, #0
 8018626:	d12c      	bne.n	8018682 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018628:	f06f 0307 	mvn.w	r3, #7
 801862c:	e040      	b.n	80186b0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801862e:	4b26      	ldr	r3, [pc, #152]	; (80186c8 <udp_bind+0x10c>)
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	617b      	str	r3, [r7, #20]
 8018634:	e022      	b.n	801867c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018636:	68fa      	ldr	r2, [r7, #12]
 8018638:	697b      	ldr	r3, [r7, #20]
 801863a:	429a      	cmp	r2, r3
 801863c:	d01b      	beq.n	8018676 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801863e:	697b      	ldr	r3, [r7, #20]
 8018640:	8a5b      	ldrh	r3, [r3, #18]
 8018642:	88fa      	ldrh	r2, [r7, #6]
 8018644:	429a      	cmp	r2, r3
 8018646:	d116      	bne.n	8018676 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018648:	697b      	ldr	r3, [r7, #20]
 801864a:	681a      	ldr	r2, [r3, #0]
 801864c:	68bb      	ldr	r3, [r7, #8]
 801864e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018650:	429a      	cmp	r2, r3
 8018652:	d00d      	beq.n	8018670 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018654:	68bb      	ldr	r3, [r7, #8]
 8018656:	2b00      	cmp	r3, #0
 8018658:	d00a      	beq.n	8018670 <udp_bind+0xb4>
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d006      	beq.n	8018670 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018662:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018664:	2b00      	cmp	r3, #0
 8018666:	d003      	beq.n	8018670 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018668:	697b      	ldr	r3, [r7, #20]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d102      	bne.n	8018676 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018670:	f06f 0307 	mvn.w	r3, #7
 8018674:	e01c      	b.n	80186b0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018676:	697b      	ldr	r3, [r7, #20]
 8018678:	68db      	ldr	r3, [r3, #12]
 801867a:	617b      	str	r3, [r7, #20]
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d1d9      	bne.n	8018636 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018682:	68bb      	ldr	r3, [r7, #8]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d002      	beq.n	801868e <udp_bind+0xd2>
 8018688:	68bb      	ldr	r3, [r7, #8]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	e000      	b.n	8018690 <udp_bind+0xd4>
 801868e:	2300      	movs	r3, #0
 8018690:	68fa      	ldr	r2, [r7, #12]
 8018692:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	88fa      	ldrh	r2, [r7, #6]
 8018698:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801869a:	7cfb      	ldrb	r3, [r7, #19]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d106      	bne.n	80186ae <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80186a0:	4b09      	ldr	r3, [pc, #36]	; (80186c8 <udp_bind+0x10c>)
 80186a2:	681a      	ldr	r2, [r3, #0]
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80186a8:	4a07      	ldr	r2, [pc, #28]	; (80186c8 <udp_bind+0x10c>)
 80186aa:	68fb      	ldr	r3, [r7, #12]
 80186ac:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80186ae:	2300      	movs	r3, #0
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3718      	adds	r7, #24
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	08021d5c 	.word	0x08021d5c
 80186bc:	0802114c 	.word	0x0802114c
 80186c0:	08021414 	.word	0x08021414
 80186c4:	080211a0 	.word	0x080211a0
 80186c8:	2000d7d4 	.word	0x2000d7d4

080186cc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	60f8      	str	r0, [r7, #12]
 80186d4:	60b9      	str	r1, [r7, #8]
 80186d6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80186d8:	68fb      	ldr	r3, [r7, #12]
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d107      	bne.n	80186ee <udp_recv+0x22>
 80186de:	4b08      	ldr	r3, [pc, #32]	; (8018700 <udp_recv+0x34>)
 80186e0:	f240 428a 	movw	r2, #1162	; 0x48a
 80186e4:	4907      	ldr	r1, [pc, #28]	; (8018704 <udp_recv+0x38>)
 80186e6:	4808      	ldr	r0, [pc, #32]	; (8018708 <udp_recv+0x3c>)
 80186e8:	f003 fb10 	bl	801bd0c <iprintf>
 80186ec:	e005      	b.n	80186fa <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	68ba      	ldr	r2, [r7, #8]
 80186f2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	687a      	ldr	r2, [r7, #4]
 80186f8:	61da      	str	r2, [r3, #28]
}
 80186fa:	3710      	adds	r7, #16
 80186fc:	46bd      	mov	sp, r7
 80186fe:	bd80      	pop	{r7, pc}
 8018700:	0802114c 	.word	0x0802114c
 8018704:	08021480 	.word	0x08021480
 8018708:	080211a0 	.word	0x080211a0

0801870c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801870c:	b580      	push	{r7, lr}
 801870e:	b084      	sub	sp, #16
 8018710:	af00      	add	r7, sp, #0
 8018712:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018714:	687b      	ldr	r3, [r7, #4]
 8018716:	2b00      	cmp	r3, #0
 8018718:	d107      	bne.n	801872a <udp_remove+0x1e>
 801871a:	4b19      	ldr	r3, [pc, #100]	; (8018780 <udp_remove+0x74>)
 801871c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8018720:	4918      	ldr	r1, [pc, #96]	; (8018784 <udp_remove+0x78>)
 8018722:	4819      	ldr	r0, [pc, #100]	; (8018788 <udp_remove+0x7c>)
 8018724:	f003 faf2 	bl	801bd0c <iprintf>
 8018728:	e026      	b.n	8018778 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801872a:	4b18      	ldr	r3, [pc, #96]	; (801878c <udp_remove+0x80>)
 801872c:	681b      	ldr	r3, [r3, #0]
 801872e:	687a      	ldr	r2, [r7, #4]
 8018730:	429a      	cmp	r2, r3
 8018732:	d105      	bne.n	8018740 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018734:	4b15      	ldr	r3, [pc, #84]	; (801878c <udp_remove+0x80>)
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	68db      	ldr	r3, [r3, #12]
 801873a:	4a14      	ldr	r2, [pc, #80]	; (801878c <udp_remove+0x80>)
 801873c:	6013      	str	r3, [r2, #0]
 801873e:	e017      	b.n	8018770 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018740:	4b12      	ldr	r3, [pc, #72]	; (801878c <udp_remove+0x80>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	60fb      	str	r3, [r7, #12]
 8018746:	e010      	b.n	801876a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018748:	68fb      	ldr	r3, [r7, #12]
 801874a:	68db      	ldr	r3, [r3, #12]
 801874c:	2b00      	cmp	r3, #0
 801874e:	d009      	beq.n	8018764 <udp_remove+0x58>
 8018750:	68fb      	ldr	r3, [r7, #12]
 8018752:	68db      	ldr	r3, [r3, #12]
 8018754:	687a      	ldr	r2, [r7, #4]
 8018756:	429a      	cmp	r2, r3
 8018758:	d104      	bne.n	8018764 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	68da      	ldr	r2, [r3, #12]
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	60da      	str	r2, [r3, #12]
        break;
 8018762:	e005      	b.n	8018770 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	68db      	ldr	r3, [r3, #12]
 8018768:	60fb      	str	r3, [r7, #12]
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2b00      	cmp	r3, #0
 801876e:	d1eb      	bne.n	8018748 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018770:	6879      	ldr	r1, [r7, #4]
 8018772:	2000      	movs	r0, #0
 8018774:	f7f8 f8c4 	bl	8010900 <memp_free>
}
 8018778:	3710      	adds	r7, #16
 801877a:	46bd      	mov	sp, r7
 801877c:	bd80      	pop	{r7, pc}
 801877e:	bf00      	nop
 8018780:	0802114c 	.word	0x0802114c
 8018784:	08021498 	.word	0x08021498
 8018788:	080211a0 	.word	0x080211a0
 801878c:	2000d7d4 	.word	0x2000d7d4

08018790 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018796:	2000      	movs	r0, #0
 8018798:	f7f8 f860 	bl	801085c <memp_malloc>
 801879c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d007      	beq.n	80187b4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80187a4:	2220      	movs	r2, #32
 80187a6:	2100      	movs	r1, #0
 80187a8:	6878      	ldr	r0, [r7, #4]
 80187aa:	f002 fe65 	bl	801b478 <memset>
    pcb->ttl = UDP_TTL;
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	22ff      	movs	r2, #255	; 0xff
 80187b2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80187b4:	687b      	ldr	r3, [r7, #4]
}
 80187b6:	4618      	mov	r0, r3
 80187b8:	3708      	adds	r7, #8
 80187ba:	46bd      	mov	sp, r7
 80187bc:	bd80      	pop	{r7, pc}

080187be <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80187be:	b580      	push	{r7, lr}
 80187c0:	b084      	sub	sp, #16
 80187c2:	af00      	add	r7, sp, #0
 80187c4:	4603      	mov	r3, r0
 80187c6:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80187c8:	f7ff ffe2 	bl	8018790 <udp_new>
 80187cc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80187ce:	68fb      	ldr	r3, [r7, #12]
}
 80187d0:	4618      	mov	r0, r3
 80187d2:	3710      	adds	r7, #16
 80187d4:	46bd      	mov	sp, r7
 80187d6:	bd80      	pop	{r7, pc}

080187d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80187d8:	b480      	push	{r7}
 80187da:	b085      	sub	sp, #20
 80187dc:	af00      	add	r7, sp, #0
 80187de:	6078      	str	r0, [r7, #4]
 80187e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d01e      	beq.n	8018826 <udp_netif_ip_addr_changed+0x4e>
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d01a      	beq.n	8018826 <udp_netif_ip_addr_changed+0x4e>
 80187f0:	683b      	ldr	r3, [r7, #0]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d017      	beq.n	8018826 <udp_netif_ip_addr_changed+0x4e>
 80187f6:	683b      	ldr	r3, [r7, #0]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d013      	beq.n	8018826 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80187fe:	4b0d      	ldr	r3, [pc, #52]	; (8018834 <udp_netif_ip_addr_changed+0x5c>)
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	60fb      	str	r3, [r7, #12]
 8018804:	e00c      	b.n	8018820 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018806:	68fb      	ldr	r3, [r7, #12]
 8018808:	681a      	ldr	r2, [r3, #0]
 801880a:	687b      	ldr	r3, [r7, #4]
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	429a      	cmp	r2, r3
 8018810:	d103      	bne.n	801881a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018812:	683b      	ldr	r3, [r7, #0]
 8018814:	681a      	ldr	r2, [r3, #0]
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	68db      	ldr	r3, [r3, #12]
 801881e:	60fb      	str	r3, [r7, #12]
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	2b00      	cmp	r3, #0
 8018824:	d1ef      	bne.n	8018806 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018826:	bf00      	nop
 8018828:	3714      	adds	r7, #20
 801882a:	46bd      	mov	sp, r7
 801882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018830:	4770      	bx	lr
 8018832:	bf00      	nop
 8018834:	2000d7d4 	.word	0x2000d7d4

08018838 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018838:	b580      	push	{r7, lr}
 801883a:	b082      	sub	sp, #8
 801883c:	af00      	add	r7, sp, #0
 801883e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018840:	4915      	ldr	r1, [pc, #84]	; (8018898 <etharp_free_entry+0x60>)
 8018842:	687a      	ldr	r2, [r7, #4]
 8018844:	4613      	mov	r3, r2
 8018846:	005b      	lsls	r3, r3, #1
 8018848:	4413      	add	r3, r2
 801884a:	00db      	lsls	r3, r3, #3
 801884c:	440b      	add	r3, r1
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d013      	beq.n	801887c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018854:	4910      	ldr	r1, [pc, #64]	; (8018898 <etharp_free_entry+0x60>)
 8018856:	687a      	ldr	r2, [r7, #4]
 8018858:	4613      	mov	r3, r2
 801885a:	005b      	lsls	r3, r3, #1
 801885c:	4413      	add	r3, r2
 801885e:	00db      	lsls	r3, r3, #3
 8018860:	440b      	add	r3, r1
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	4618      	mov	r0, r3
 8018866:	f7f8 ff21 	bl	80116ac <pbuf_free>
    arp_table[i].q = NULL;
 801886a:	490b      	ldr	r1, [pc, #44]	; (8018898 <etharp_free_entry+0x60>)
 801886c:	687a      	ldr	r2, [r7, #4]
 801886e:	4613      	mov	r3, r2
 8018870:	005b      	lsls	r3, r3, #1
 8018872:	4413      	add	r3, r2
 8018874:	00db      	lsls	r3, r3, #3
 8018876:	440b      	add	r3, r1
 8018878:	2200      	movs	r2, #0
 801887a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801887c:	4906      	ldr	r1, [pc, #24]	; (8018898 <etharp_free_entry+0x60>)
 801887e:	687a      	ldr	r2, [r7, #4]
 8018880:	4613      	mov	r3, r2
 8018882:	005b      	lsls	r3, r3, #1
 8018884:	4413      	add	r3, r2
 8018886:	00db      	lsls	r3, r3, #3
 8018888:	440b      	add	r3, r1
 801888a:	3314      	adds	r3, #20
 801888c:	2200      	movs	r2, #0
 801888e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018890:	bf00      	nop
 8018892:	3708      	adds	r7, #8
 8018894:	46bd      	mov	sp, r7
 8018896:	bd80      	pop	{r7, pc}
 8018898:	20004834 	.word	0x20004834

0801889c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801889c:	b580      	push	{r7, lr}
 801889e:	b082      	sub	sp, #8
 80188a0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80188a2:	2300      	movs	r3, #0
 80188a4:	607b      	str	r3, [r7, #4]
 80188a6:	e096      	b.n	80189d6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80188a8:	494f      	ldr	r1, [pc, #316]	; (80189e8 <etharp_tmr+0x14c>)
 80188aa:	687a      	ldr	r2, [r7, #4]
 80188ac:	4613      	mov	r3, r2
 80188ae:	005b      	lsls	r3, r3, #1
 80188b0:	4413      	add	r3, r2
 80188b2:	00db      	lsls	r3, r3, #3
 80188b4:	440b      	add	r3, r1
 80188b6:	3314      	adds	r3, #20
 80188b8:	781b      	ldrb	r3, [r3, #0]
 80188ba:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80188bc:	78fb      	ldrb	r3, [r7, #3]
 80188be:	2b00      	cmp	r3, #0
 80188c0:	f000 8086 	beq.w	80189d0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80188c4:	4948      	ldr	r1, [pc, #288]	; (80189e8 <etharp_tmr+0x14c>)
 80188c6:	687a      	ldr	r2, [r7, #4]
 80188c8:	4613      	mov	r3, r2
 80188ca:	005b      	lsls	r3, r3, #1
 80188cc:	4413      	add	r3, r2
 80188ce:	00db      	lsls	r3, r3, #3
 80188d0:	440b      	add	r3, r1
 80188d2:	3312      	adds	r3, #18
 80188d4:	881b      	ldrh	r3, [r3, #0]
 80188d6:	3301      	adds	r3, #1
 80188d8:	b298      	uxth	r0, r3
 80188da:	4943      	ldr	r1, [pc, #268]	; (80189e8 <etharp_tmr+0x14c>)
 80188dc:	687a      	ldr	r2, [r7, #4]
 80188de:	4613      	mov	r3, r2
 80188e0:	005b      	lsls	r3, r3, #1
 80188e2:	4413      	add	r3, r2
 80188e4:	00db      	lsls	r3, r3, #3
 80188e6:	440b      	add	r3, r1
 80188e8:	3312      	adds	r3, #18
 80188ea:	4602      	mov	r2, r0
 80188ec:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80188ee:	493e      	ldr	r1, [pc, #248]	; (80189e8 <etharp_tmr+0x14c>)
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	4613      	mov	r3, r2
 80188f4:	005b      	lsls	r3, r3, #1
 80188f6:	4413      	add	r3, r2
 80188f8:	00db      	lsls	r3, r3, #3
 80188fa:	440b      	add	r3, r1
 80188fc:	3312      	adds	r3, #18
 80188fe:	881b      	ldrh	r3, [r3, #0]
 8018900:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018904:	d215      	bcs.n	8018932 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018906:	4938      	ldr	r1, [pc, #224]	; (80189e8 <etharp_tmr+0x14c>)
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	4613      	mov	r3, r2
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4413      	add	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	440b      	add	r3, r1
 8018914:	3314      	adds	r3, #20
 8018916:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018918:	2b01      	cmp	r3, #1
 801891a:	d10e      	bne.n	801893a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801891c:	4932      	ldr	r1, [pc, #200]	; (80189e8 <etharp_tmr+0x14c>)
 801891e:	687a      	ldr	r2, [r7, #4]
 8018920:	4613      	mov	r3, r2
 8018922:	005b      	lsls	r3, r3, #1
 8018924:	4413      	add	r3, r2
 8018926:	00db      	lsls	r3, r3, #3
 8018928:	440b      	add	r3, r1
 801892a:	3312      	adds	r3, #18
 801892c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801892e:	2b04      	cmp	r3, #4
 8018930:	d903      	bls.n	801893a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018932:	6878      	ldr	r0, [r7, #4]
 8018934:	f7ff ff80 	bl	8018838 <etharp_free_entry>
 8018938:	e04a      	b.n	80189d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801893a:	492b      	ldr	r1, [pc, #172]	; (80189e8 <etharp_tmr+0x14c>)
 801893c:	687a      	ldr	r2, [r7, #4]
 801893e:	4613      	mov	r3, r2
 8018940:	005b      	lsls	r3, r3, #1
 8018942:	4413      	add	r3, r2
 8018944:	00db      	lsls	r3, r3, #3
 8018946:	440b      	add	r3, r1
 8018948:	3314      	adds	r3, #20
 801894a:	781b      	ldrb	r3, [r3, #0]
 801894c:	2b03      	cmp	r3, #3
 801894e:	d10a      	bne.n	8018966 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018950:	4925      	ldr	r1, [pc, #148]	; (80189e8 <etharp_tmr+0x14c>)
 8018952:	687a      	ldr	r2, [r7, #4]
 8018954:	4613      	mov	r3, r2
 8018956:	005b      	lsls	r3, r3, #1
 8018958:	4413      	add	r3, r2
 801895a:	00db      	lsls	r3, r3, #3
 801895c:	440b      	add	r3, r1
 801895e:	3314      	adds	r3, #20
 8018960:	2204      	movs	r2, #4
 8018962:	701a      	strb	r2, [r3, #0]
 8018964:	e034      	b.n	80189d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018966:	4920      	ldr	r1, [pc, #128]	; (80189e8 <etharp_tmr+0x14c>)
 8018968:	687a      	ldr	r2, [r7, #4]
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	440b      	add	r3, r1
 8018974:	3314      	adds	r3, #20
 8018976:	781b      	ldrb	r3, [r3, #0]
 8018978:	2b04      	cmp	r3, #4
 801897a:	d10a      	bne.n	8018992 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801897c:	491a      	ldr	r1, [pc, #104]	; (80189e8 <etharp_tmr+0x14c>)
 801897e:	687a      	ldr	r2, [r7, #4]
 8018980:	4613      	mov	r3, r2
 8018982:	005b      	lsls	r3, r3, #1
 8018984:	4413      	add	r3, r2
 8018986:	00db      	lsls	r3, r3, #3
 8018988:	440b      	add	r3, r1
 801898a:	3314      	adds	r3, #20
 801898c:	2202      	movs	r2, #2
 801898e:	701a      	strb	r2, [r3, #0]
 8018990:	e01e      	b.n	80189d0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018992:	4915      	ldr	r1, [pc, #84]	; (80189e8 <etharp_tmr+0x14c>)
 8018994:	687a      	ldr	r2, [r7, #4]
 8018996:	4613      	mov	r3, r2
 8018998:	005b      	lsls	r3, r3, #1
 801899a:	4413      	add	r3, r2
 801899c:	00db      	lsls	r3, r3, #3
 801899e:	440b      	add	r3, r1
 80189a0:	3314      	adds	r3, #20
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	2b01      	cmp	r3, #1
 80189a6:	d113      	bne.n	80189d0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80189a8:	490f      	ldr	r1, [pc, #60]	; (80189e8 <etharp_tmr+0x14c>)
 80189aa:	687a      	ldr	r2, [r7, #4]
 80189ac:	4613      	mov	r3, r2
 80189ae:	005b      	lsls	r3, r3, #1
 80189b0:	4413      	add	r3, r2
 80189b2:	00db      	lsls	r3, r3, #3
 80189b4:	440b      	add	r3, r1
 80189b6:	3308      	adds	r3, #8
 80189b8:	6818      	ldr	r0, [r3, #0]
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	4613      	mov	r3, r2
 80189be:	005b      	lsls	r3, r3, #1
 80189c0:	4413      	add	r3, r2
 80189c2:	00db      	lsls	r3, r3, #3
 80189c4:	4a08      	ldr	r2, [pc, #32]	; (80189e8 <etharp_tmr+0x14c>)
 80189c6:	4413      	add	r3, r2
 80189c8:	3304      	adds	r3, #4
 80189ca:	4619      	mov	r1, r3
 80189cc:	f000 fe6e 	bl	80196ac <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	3301      	adds	r3, #1
 80189d4:	607b      	str	r3, [r7, #4]
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	2b09      	cmp	r3, #9
 80189da:	f77f af65 	ble.w	80188a8 <etharp_tmr+0xc>
      }
    }
  }
}
 80189de:	bf00      	nop
 80189e0:	bf00      	nop
 80189e2:	3708      	adds	r7, #8
 80189e4:	46bd      	mov	sp, r7
 80189e6:	bd80      	pop	{r7, pc}
 80189e8:	20004834 	.word	0x20004834

080189ec <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80189ec:	b580      	push	{r7, lr}
 80189ee:	b08a      	sub	sp, #40	; 0x28
 80189f0:	af00      	add	r7, sp, #0
 80189f2:	60f8      	str	r0, [r7, #12]
 80189f4:	460b      	mov	r3, r1
 80189f6:	607a      	str	r2, [r7, #4]
 80189f8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80189fa:	230a      	movs	r3, #10
 80189fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80189fe:	230a      	movs	r3, #10
 8018a00:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018a02:	230a      	movs	r3, #10
 8018a04:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018a06:	2300      	movs	r3, #0
 8018a08:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018a0a:	230a      	movs	r3, #10
 8018a0c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018a0e:	2300      	movs	r3, #0
 8018a10:	83bb      	strh	r3, [r7, #28]
 8018a12:	2300      	movs	r3, #0
 8018a14:	837b      	strh	r3, [r7, #26]
 8018a16:	2300      	movs	r3, #0
 8018a18:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018a1a:	2300      	movs	r3, #0
 8018a1c:	843b      	strh	r3, [r7, #32]
 8018a1e:	e0ae      	b.n	8018b7e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018a20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a24:	49a6      	ldr	r1, [pc, #664]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018a26:	4613      	mov	r3, r2
 8018a28:	005b      	lsls	r3, r3, #1
 8018a2a:	4413      	add	r3, r2
 8018a2c:	00db      	lsls	r3, r3, #3
 8018a2e:	440b      	add	r3, r1
 8018a30:	3314      	adds	r3, #20
 8018a32:	781b      	ldrb	r3, [r3, #0]
 8018a34:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018a36:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018a3a:	2b0a      	cmp	r3, #10
 8018a3c:	d105      	bne.n	8018a4a <etharp_find_entry+0x5e>
 8018a3e:	7dfb      	ldrb	r3, [r7, #23]
 8018a40:	2b00      	cmp	r3, #0
 8018a42:	d102      	bne.n	8018a4a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018a44:	8c3b      	ldrh	r3, [r7, #32]
 8018a46:	847b      	strh	r3, [r7, #34]	; 0x22
 8018a48:	e095      	b.n	8018b76 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018a4a:	7dfb      	ldrb	r3, [r7, #23]
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	f000 8092 	beq.w	8018b76 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018a52:	7dfb      	ldrb	r3, [r7, #23]
 8018a54:	2b01      	cmp	r3, #1
 8018a56:	d009      	beq.n	8018a6c <etharp_find_entry+0x80>
 8018a58:	7dfb      	ldrb	r3, [r7, #23]
 8018a5a:	2b01      	cmp	r3, #1
 8018a5c:	d806      	bhi.n	8018a6c <etharp_find_entry+0x80>
 8018a5e:	4b99      	ldr	r3, [pc, #612]	; (8018cc4 <etharp_find_entry+0x2d8>)
 8018a60:	f240 1223 	movw	r2, #291	; 0x123
 8018a64:	4998      	ldr	r1, [pc, #608]	; (8018cc8 <etharp_find_entry+0x2dc>)
 8018a66:	4899      	ldr	r0, [pc, #612]	; (8018ccc <etharp_find_entry+0x2e0>)
 8018a68:	f003 f950 	bl	801bd0c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	2b00      	cmp	r3, #0
 8018a70:	d020      	beq.n	8018ab4 <etharp_find_entry+0xc8>
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	6819      	ldr	r1, [r3, #0]
 8018a76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a7a:	4891      	ldr	r0, [pc, #580]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018a7c:	4613      	mov	r3, r2
 8018a7e:	005b      	lsls	r3, r3, #1
 8018a80:	4413      	add	r3, r2
 8018a82:	00db      	lsls	r3, r3, #3
 8018a84:	4403      	add	r3, r0
 8018a86:	3304      	adds	r3, #4
 8018a88:	681b      	ldr	r3, [r3, #0]
 8018a8a:	4299      	cmp	r1, r3
 8018a8c:	d112      	bne.n	8018ab4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	2b00      	cmp	r3, #0
 8018a92:	d00c      	beq.n	8018aae <etharp_find_entry+0xc2>
 8018a94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018a98:	4989      	ldr	r1, [pc, #548]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018a9a:	4613      	mov	r3, r2
 8018a9c:	005b      	lsls	r3, r3, #1
 8018a9e:	4413      	add	r3, r2
 8018aa0:	00db      	lsls	r3, r3, #3
 8018aa2:	440b      	add	r3, r1
 8018aa4:	3308      	adds	r3, #8
 8018aa6:	681b      	ldr	r3, [r3, #0]
 8018aa8:	687a      	ldr	r2, [r7, #4]
 8018aaa:	429a      	cmp	r2, r3
 8018aac:	d102      	bne.n	8018ab4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018aae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ab2:	e100      	b.n	8018cb6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018ab4:	7dfb      	ldrb	r3, [r7, #23]
 8018ab6:	2b01      	cmp	r3, #1
 8018ab8:	d140      	bne.n	8018b3c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018aba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018abe:	4980      	ldr	r1, [pc, #512]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018ac0:	4613      	mov	r3, r2
 8018ac2:	005b      	lsls	r3, r3, #1
 8018ac4:	4413      	add	r3, r2
 8018ac6:	00db      	lsls	r3, r3, #3
 8018ac8:	440b      	add	r3, r1
 8018aca:	681b      	ldr	r3, [r3, #0]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d01a      	beq.n	8018b06 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018ad0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ad4:	497a      	ldr	r1, [pc, #488]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018ad6:	4613      	mov	r3, r2
 8018ad8:	005b      	lsls	r3, r3, #1
 8018ada:	4413      	add	r3, r2
 8018adc:	00db      	lsls	r3, r3, #3
 8018ade:	440b      	add	r3, r1
 8018ae0:	3312      	adds	r3, #18
 8018ae2:	881b      	ldrh	r3, [r3, #0]
 8018ae4:	8bba      	ldrh	r2, [r7, #28]
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d845      	bhi.n	8018b76 <etharp_find_entry+0x18a>
            old_queue = i;
 8018aea:	8c3b      	ldrh	r3, [r7, #32]
 8018aec:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018aee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018af2:	4973      	ldr	r1, [pc, #460]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018af4:	4613      	mov	r3, r2
 8018af6:	005b      	lsls	r3, r3, #1
 8018af8:	4413      	add	r3, r2
 8018afa:	00db      	lsls	r3, r3, #3
 8018afc:	440b      	add	r3, r1
 8018afe:	3312      	adds	r3, #18
 8018b00:	881b      	ldrh	r3, [r3, #0]
 8018b02:	83bb      	strh	r3, [r7, #28]
 8018b04:	e037      	b.n	8018b76 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018b06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b0a:	496d      	ldr	r1, [pc, #436]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018b0c:	4613      	mov	r3, r2
 8018b0e:	005b      	lsls	r3, r3, #1
 8018b10:	4413      	add	r3, r2
 8018b12:	00db      	lsls	r3, r3, #3
 8018b14:	440b      	add	r3, r1
 8018b16:	3312      	adds	r3, #18
 8018b18:	881b      	ldrh	r3, [r3, #0]
 8018b1a:	8b7a      	ldrh	r2, [r7, #26]
 8018b1c:	429a      	cmp	r2, r3
 8018b1e:	d82a      	bhi.n	8018b76 <etharp_find_entry+0x18a>
            old_pending = i;
 8018b20:	8c3b      	ldrh	r3, [r7, #32]
 8018b22:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018b24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b28:	4965      	ldr	r1, [pc, #404]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018b2a:	4613      	mov	r3, r2
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4413      	add	r3, r2
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	440b      	add	r3, r1
 8018b34:	3312      	adds	r3, #18
 8018b36:	881b      	ldrh	r3, [r3, #0]
 8018b38:	837b      	strh	r3, [r7, #26]
 8018b3a:	e01c      	b.n	8018b76 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018b3c:	7dfb      	ldrb	r3, [r7, #23]
 8018b3e:	2b01      	cmp	r3, #1
 8018b40:	d919      	bls.n	8018b76 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018b42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b46:	495e      	ldr	r1, [pc, #376]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018b48:	4613      	mov	r3, r2
 8018b4a:	005b      	lsls	r3, r3, #1
 8018b4c:	4413      	add	r3, r2
 8018b4e:	00db      	lsls	r3, r3, #3
 8018b50:	440b      	add	r3, r1
 8018b52:	3312      	adds	r3, #18
 8018b54:	881b      	ldrh	r3, [r3, #0]
 8018b56:	8b3a      	ldrh	r2, [r7, #24]
 8018b58:	429a      	cmp	r2, r3
 8018b5a:	d80c      	bhi.n	8018b76 <etharp_find_entry+0x18a>
            old_stable = i;
 8018b5c:	8c3b      	ldrh	r3, [r7, #32]
 8018b5e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018b60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018b64:	4956      	ldr	r1, [pc, #344]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018b66:	4613      	mov	r3, r2
 8018b68:	005b      	lsls	r3, r3, #1
 8018b6a:	4413      	add	r3, r2
 8018b6c:	00db      	lsls	r3, r3, #3
 8018b6e:	440b      	add	r3, r1
 8018b70:	3312      	adds	r3, #18
 8018b72:	881b      	ldrh	r3, [r3, #0]
 8018b74:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b76:	8c3b      	ldrh	r3, [r7, #32]
 8018b78:	3301      	adds	r3, #1
 8018b7a:	b29b      	uxth	r3, r3
 8018b7c:	843b      	strh	r3, [r7, #32]
 8018b7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018b82:	2b09      	cmp	r3, #9
 8018b84:	f77f af4c 	ble.w	8018a20 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018b88:	7afb      	ldrb	r3, [r7, #11]
 8018b8a:	f003 0302 	and.w	r3, r3, #2
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	d108      	bne.n	8018ba4 <etharp_find_entry+0x1b8>
 8018b92:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018b96:	2b0a      	cmp	r3, #10
 8018b98:	d107      	bne.n	8018baa <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018b9a:	7afb      	ldrb	r3, [r7, #11]
 8018b9c:	f003 0301 	and.w	r3, r3, #1
 8018ba0:	2b00      	cmp	r3, #0
 8018ba2:	d102      	bne.n	8018baa <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8018ba8:	e085      	b.n	8018cb6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018baa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018bae:	2b09      	cmp	r3, #9
 8018bb0:	dc02      	bgt.n	8018bb8 <etharp_find_entry+0x1cc>
    i = empty;
 8018bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018bb4:	843b      	strh	r3, [r7, #32]
 8018bb6:	e039      	b.n	8018c2c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018bb8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018bbc:	2b09      	cmp	r3, #9
 8018bbe:	dc14      	bgt.n	8018bea <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018bc2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018bc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018bc8:	493d      	ldr	r1, [pc, #244]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018bca:	4613      	mov	r3, r2
 8018bcc:	005b      	lsls	r3, r3, #1
 8018bce:	4413      	add	r3, r2
 8018bd0:	00db      	lsls	r3, r3, #3
 8018bd2:	440b      	add	r3, r1
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	2b00      	cmp	r3, #0
 8018bd8:	d018      	beq.n	8018c0c <etharp_find_entry+0x220>
 8018bda:	4b3a      	ldr	r3, [pc, #232]	; (8018cc4 <etharp_find_entry+0x2d8>)
 8018bdc:	f240 126d 	movw	r2, #365	; 0x16d
 8018be0:	493b      	ldr	r1, [pc, #236]	; (8018cd0 <etharp_find_entry+0x2e4>)
 8018be2:	483a      	ldr	r0, [pc, #232]	; (8018ccc <etharp_find_entry+0x2e0>)
 8018be4:	f003 f892 	bl	801bd0c <iprintf>
 8018be8:	e010      	b.n	8018c0c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018bea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018bee:	2b09      	cmp	r3, #9
 8018bf0:	dc02      	bgt.n	8018bf8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018bf2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018bf4:	843b      	strh	r3, [r7, #32]
 8018bf6:	e009      	b.n	8018c0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018bf8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018bfc:	2b09      	cmp	r3, #9
 8018bfe:	dc02      	bgt.n	8018c06 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018c00:	8bfb      	ldrh	r3, [r7, #30]
 8018c02:	843b      	strh	r3, [r7, #32]
 8018c04:	e002      	b.n	8018c0c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018c06:	f04f 33ff 	mov.w	r3, #4294967295
 8018c0a:	e054      	b.n	8018cb6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018c0c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c10:	2b09      	cmp	r3, #9
 8018c12:	dd06      	ble.n	8018c22 <etharp_find_entry+0x236>
 8018c14:	4b2b      	ldr	r3, [pc, #172]	; (8018cc4 <etharp_find_entry+0x2d8>)
 8018c16:	f240 127f 	movw	r2, #383	; 0x17f
 8018c1a:	492e      	ldr	r1, [pc, #184]	; (8018cd4 <etharp_find_entry+0x2e8>)
 8018c1c:	482b      	ldr	r0, [pc, #172]	; (8018ccc <etharp_find_entry+0x2e0>)
 8018c1e:	f003 f875 	bl	801bd0c <iprintf>
    etharp_free_entry(i);
 8018c22:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c26:	4618      	mov	r0, r3
 8018c28:	f7ff fe06 	bl	8018838 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018c2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018c30:	2b09      	cmp	r3, #9
 8018c32:	dd06      	ble.n	8018c42 <etharp_find_entry+0x256>
 8018c34:	4b23      	ldr	r3, [pc, #140]	; (8018cc4 <etharp_find_entry+0x2d8>)
 8018c36:	f240 1283 	movw	r2, #387	; 0x183
 8018c3a:	4926      	ldr	r1, [pc, #152]	; (8018cd4 <etharp_find_entry+0x2e8>)
 8018c3c:	4823      	ldr	r0, [pc, #140]	; (8018ccc <etharp_find_entry+0x2e0>)
 8018c3e:	f003 f865 	bl	801bd0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018c42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c46:	491e      	ldr	r1, [pc, #120]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018c48:	4613      	mov	r3, r2
 8018c4a:	005b      	lsls	r3, r3, #1
 8018c4c:	4413      	add	r3, r2
 8018c4e:	00db      	lsls	r3, r3, #3
 8018c50:	440b      	add	r3, r1
 8018c52:	3314      	adds	r3, #20
 8018c54:	781b      	ldrb	r3, [r3, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d006      	beq.n	8018c68 <etharp_find_entry+0x27c>
 8018c5a:	4b1a      	ldr	r3, [pc, #104]	; (8018cc4 <etharp_find_entry+0x2d8>)
 8018c5c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018c60:	491d      	ldr	r1, [pc, #116]	; (8018cd8 <etharp_find_entry+0x2ec>)
 8018c62:	481a      	ldr	r0, [pc, #104]	; (8018ccc <etharp_find_entry+0x2e0>)
 8018c64:	f003 f852 	bl	801bd0c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	2b00      	cmp	r3, #0
 8018c6c:	d00b      	beq.n	8018c86 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018c6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c72:	68fb      	ldr	r3, [r7, #12]
 8018c74:	6819      	ldr	r1, [r3, #0]
 8018c76:	4812      	ldr	r0, [pc, #72]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018c78:	4613      	mov	r3, r2
 8018c7a:	005b      	lsls	r3, r3, #1
 8018c7c:	4413      	add	r3, r2
 8018c7e:	00db      	lsls	r3, r3, #3
 8018c80:	4403      	add	r3, r0
 8018c82:	3304      	adds	r3, #4
 8018c84:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018c86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018c8a:	490d      	ldr	r1, [pc, #52]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018c8c:	4613      	mov	r3, r2
 8018c8e:	005b      	lsls	r3, r3, #1
 8018c90:	4413      	add	r3, r2
 8018c92:	00db      	lsls	r3, r3, #3
 8018c94:	440b      	add	r3, r1
 8018c96:	3312      	adds	r3, #18
 8018c98:	2200      	movs	r2, #0
 8018c9a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018c9c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ca0:	4907      	ldr	r1, [pc, #28]	; (8018cc0 <etharp_find_entry+0x2d4>)
 8018ca2:	4613      	mov	r3, r2
 8018ca4:	005b      	lsls	r3, r3, #1
 8018ca6:	4413      	add	r3, r2
 8018ca8:	00db      	lsls	r3, r3, #3
 8018caa:	440b      	add	r3, r1
 8018cac:	3308      	adds	r3, #8
 8018cae:	687a      	ldr	r2, [r7, #4]
 8018cb0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018cb2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	3728      	adds	r7, #40	; 0x28
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	bd80      	pop	{r7, pc}
 8018cbe:	bf00      	nop
 8018cc0:	20004834 	.word	0x20004834
 8018cc4:	080214b0 	.word	0x080214b0
 8018cc8:	080214e8 	.word	0x080214e8
 8018ccc:	08021528 	.word	0x08021528
 8018cd0:	08021550 	.word	0x08021550
 8018cd4:	08021568 	.word	0x08021568
 8018cd8:	0802157c 	.word	0x0802157c

08018cdc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018cdc:	b580      	push	{r7, lr}
 8018cde:	b088      	sub	sp, #32
 8018ce0:	af02      	add	r7, sp, #8
 8018ce2:	60f8      	str	r0, [r7, #12]
 8018ce4:	60b9      	str	r1, [r7, #8]
 8018ce6:	607a      	str	r2, [r7, #4]
 8018ce8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018cea:	68fb      	ldr	r3, [r7, #12]
 8018cec:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018cf0:	2b06      	cmp	r3, #6
 8018cf2:	d006      	beq.n	8018d02 <etharp_update_arp_entry+0x26>
 8018cf4:	4b48      	ldr	r3, [pc, #288]	; (8018e18 <etharp_update_arp_entry+0x13c>)
 8018cf6:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018cfa:	4948      	ldr	r1, [pc, #288]	; (8018e1c <etharp_update_arp_entry+0x140>)
 8018cfc:	4848      	ldr	r0, [pc, #288]	; (8018e20 <etharp_update_arp_entry+0x144>)
 8018cfe:	f003 f805 	bl	801bd0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d012      	beq.n	8018d2e <etharp_update_arp_entry+0x52>
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d00e      	beq.n	8018d2e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d10:	68bb      	ldr	r3, [r7, #8]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	68f9      	ldr	r1, [r7, #12]
 8018d16:	4618      	mov	r0, r3
 8018d18:	f001 f8fe 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8018d1c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	d105      	bne.n	8018d2e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	681b      	ldr	r3, [r3, #0]
 8018d26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018d2a:	2be0      	cmp	r3, #224	; 0xe0
 8018d2c:	d102      	bne.n	8018d34 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018d2e:	f06f 030f 	mvn.w	r3, #15
 8018d32:	e06c      	b.n	8018e0e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018d34:	78fb      	ldrb	r3, [r7, #3]
 8018d36:	68fa      	ldr	r2, [r7, #12]
 8018d38:	4619      	mov	r1, r3
 8018d3a:	68b8      	ldr	r0, [r7, #8]
 8018d3c:	f7ff fe56 	bl	80189ec <etharp_find_entry>
 8018d40:	4603      	mov	r3, r0
 8018d42:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018d44:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	da02      	bge.n	8018d52 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018d4c:	8afb      	ldrh	r3, [r7, #22]
 8018d4e:	b25b      	sxtb	r3, r3
 8018d50:	e05d      	b.n	8018e0e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018d52:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d56:	4933      	ldr	r1, [pc, #204]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018d58:	4613      	mov	r3, r2
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	4413      	add	r3, r2
 8018d5e:	00db      	lsls	r3, r3, #3
 8018d60:	440b      	add	r3, r1
 8018d62:	3314      	adds	r3, #20
 8018d64:	2202      	movs	r2, #2
 8018d66:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018d68:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d6c:	492d      	ldr	r1, [pc, #180]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018d6e:	4613      	mov	r3, r2
 8018d70:	005b      	lsls	r3, r3, #1
 8018d72:	4413      	add	r3, r2
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	440b      	add	r3, r1
 8018d78:	3308      	adds	r3, #8
 8018d7a:	68fa      	ldr	r2, [r7, #12]
 8018d7c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8018d7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018d82:	4613      	mov	r3, r2
 8018d84:	005b      	lsls	r3, r3, #1
 8018d86:	4413      	add	r3, r2
 8018d88:	00db      	lsls	r3, r3, #3
 8018d8a:	3308      	adds	r3, #8
 8018d8c:	4a25      	ldr	r2, [pc, #148]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018d8e:	4413      	add	r3, r2
 8018d90:	3304      	adds	r3, #4
 8018d92:	2206      	movs	r2, #6
 8018d94:	6879      	ldr	r1, [r7, #4]
 8018d96:	4618      	mov	r0, r3
 8018d98:	f002 fb60 	bl	801b45c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8018d9c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018da0:	4920      	ldr	r1, [pc, #128]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018da2:	4613      	mov	r3, r2
 8018da4:	005b      	lsls	r3, r3, #1
 8018da6:	4413      	add	r3, r2
 8018da8:	00db      	lsls	r3, r3, #3
 8018daa:	440b      	add	r3, r1
 8018dac:	3312      	adds	r3, #18
 8018dae:	2200      	movs	r2, #0
 8018db0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8018db2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018db6:	491b      	ldr	r1, [pc, #108]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018db8:	4613      	mov	r3, r2
 8018dba:	005b      	lsls	r3, r3, #1
 8018dbc:	4413      	add	r3, r2
 8018dbe:	00db      	lsls	r3, r3, #3
 8018dc0:	440b      	add	r3, r1
 8018dc2:	681b      	ldr	r3, [r3, #0]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d021      	beq.n	8018e0c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018dc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018dcc:	4915      	ldr	r1, [pc, #84]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018dce:	4613      	mov	r3, r2
 8018dd0:	005b      	lsls	r3, r3, #1
 8018dd2:	4413      	add	r3, r2
 8018dd4:	00db      	lsls	r3, r3, #3
 8018dd6:	440b      	add	r3, r1
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018ddc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018de0:	4910      	ldr	r1, [pc, #64]	; (8018e24 <etharp_update_arp_entry+0x148>)
 8018de2:	4613      	mov	r3, r2
 8018de4:	005b      	lsls	r3, r3, #1
 8018de6:	4413      	add	r3, r2
 8018de8:	00db      	lsls	r3, r3, #3
 8018dea:	440b      	add	r3, r1
 8018dec:	2200      	movs	r2, #0
 8018dee:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018dfa:	9300      	str	r3, [sp, #0]
 8018dfc:	687b      	ldr	r3, [r7, #4]
 8018dfe:	6939      	ldr	r1, [r7, #16]
 8018e00:	68f8      	ldr	r0, [r7, #12]
 8018e02:	f002 f8cf 	bl	801afa4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018e06:	6938      	ldr	r0, [r7, #16]
 8018e08:	f7f8 fc50 	bl	80116ac <pbuf_free>
  }
  return ERR_OK;
 8018e0c:	2300      	movs	r3, #0
}
 8018e0e:	4618      	mov	r0, r3
 8018e10:	3718      	adds	r7, #24
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}
 8018e16:	bf00      	nop
 8018e18:	080214b0 	.word	0x080214b0
 8018e1c:	080215a8 	.word	0x080215a8
 8018e20:	08021528 	.word	0x08021528
 8018e24:	20004834 	.word	0x20004834

08018e28 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b084      	sub	sp, #16
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e30:	2300      	movs	r3, #0
 8018e32:	60fb      	str	r3, [r7, #12]
 8018e34:	e01e      	b.n	8018e74 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018e36:	4913      	ldr	r1, [pc, #76]	; (8018e84 <etharp_cleanup_netif+0x5c>)
 8018e38:	68fa      	ldr	r2, [r7, #12]
 8018e3a:	4613      	mov	r3, r2
 8018e3c:	005b      	lsls	r3, r3, #1
 8018e3e:	4413      	add	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	440b      	add	r3, r1
 8018e44:	3314      	adds	r3, #20
 8018e46:	781b      	ldrb	r3, [r3, #0]
 8018e48:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018e4a:	7afb      	ldrb	r3, [r7, #11]
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d00e      	beq.n	8018e6e <etharp_cleanup_netif+0x46>
 8018e50:	490c      	ldr	r1, [pc, #48]	; (8018e84 <etharp_cleanup_netif+0x5c>)
 8018e52:	68fa      	ldr	r2, [r7, #12]
 8018e54:	4613      	mov	r3, r2
 8018e56:	005b      	lsls	r3, r3, #1
 8018e58:	4413      	add	r3, r2
 8018e5a:	00db      	lsls	r3, r3, #3
 8018e5c:	440b      	add	r3, r1
 8018e5e:	3308      	adds	r3, #8
 8018e60:	681b      	ldr	r3, [r3, #0]
 8018e62:	687a      	ldr	r2, [r7, #4]
 8018e64:	429a      	cmp	r2, r3
 8018e66:	d102      	bne.n	8018e6e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018e68:	68f8      	ldr	r0, [r7, #12]
 8018e6a:	f7ff fce5 	bl	8018838 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	3301      	adds	r3, #1
 8018e72:	60fb      	str	r3, [r7, #12]
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2b09      	cmp	r3, #9
 8018e78:	dddd      	ble.n	8018e36 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018e7a:	bf00      	nop
 8018e7c:	bf00      	nop
 8018e7e:	3710      	adds	r7, #16
 8018e80:	46bd      	mov	sp, r7
 8018e82:	bd80      	pop	{r7, pc}
 8018e84:	20004834 	.word	0x20004834

08018e88 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018e88:	b5b0      	push	{r4, r5, r7, lr}
 8018e8a:	b08a      	sub	sp, #40	; 0x28
 8018e8c:	af04      	add	r7, sp, #16
 8018e8e:	6078      	str	r0, [r7, #4]
 8018e90:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018e92:	683b      	ldr	r3, [r7, #0]
 8018e94:	2b00      	cmp	r3, #0
 8018e96:	d107      	bne.n	8018ea8 <etharp_input+0x20>
 8018e98:	4b3d      	ldr	r3, [pc, #244]	; (8018f90 <etharp_input+0x108>)
 8018e9a:	f240 228a 	movw	r2, #650	; 0x28a
 8018e9e:	493d      	ldr	r1, [pc, #244]	; (8018f94 <etharp_input+0x10c>)
 8018ea0:	483d      	ldr	r0, [pc, #244]	; (8018f98 <etharp_input+0x110>)
 8018ea2:	f002 ff33 	bl	801bd0c <iprintf>
 8018ea6:	e06f      	b.n	8018f88 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	685b      	ldr	r3, [r3, #4]
 8018eac:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018eae:	693b      	ldr	r3, [r7, #16]
 8018eb0:	881b      	ldrh	r3, [r3, #0]
 8018eb2:	b29b      	uxth	r3, r3
 8018eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018eb8:	d10c      	bne.n	8018ed4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8018ebe:	2b06      	cmp	r3, #6
 8018ec0:	d108      	bne.n	8018ed4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ec2:	693b      	ldr	r3, [r7, #16]
 8018ec4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018ec6:	2b04      	cmp	r3, #4
 8018ec8:	d104      	bne.n	8018ed4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018eca:	693b      	ldr	r3, [r7, #16]
 8018ecc:	885b      	ldrh	r3, [r3, #2]
 8018ece:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018ed0:	2b08      	cmp	r3, #8
 8018ed2:	d003      	beq.n	8018edc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018ed4:	6878      	ldr	r0, [r7, #4]
 8018ed6:	f7f8 fbe9 	bl	80116ac <pbuf_free>
    return;
 8018eda:	e055      	b.n	8018f88 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018edc:	693b      	ldr	r3, [r7, #16]
 8018ede:	330e      	adds	r3, #14
 8018ee0:	681b      	ldr	r3, [r3, #0]
 8018ee2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8018ee4:	693b      	ldr	r3, [r7, #16]
 8018ee6:	3318      	adds	r3, #24
 8018ee8:	681b      	ldr	r3, [r3, #0]
 8018eea:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018eec:	683b      	ldr	r3, [r7, #0]
 8018eee:	3304      	adds	r3, #4
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d102      	bne.n	8018efc <etharp_input+0x74>
    for_us = 0;
 8018ef6:	2300      	movs	r3, #0
 8018ef8:	75fb      	strb	r3, [r7, #23]
 8018efa:	e009      	b.n	8018f10 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018efc:	68ba      	ldr	r2, [r7, #8]
 8018efe:	683b      	ldr	r3, [r7, #0]
 8018f00:	3304      	adds	r3, #4
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	429a      	cmp	r2, r3
 8018f06:	bf0c      	ite	eq
 8018f08:	2301      	moveq	r3, #1
 8018f0a:	2300      	movne	r3, #0
 8018f0c:	b2db      	uxtb	r3, r3
 8018f0e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018f10:	693b      	ldr	r3, [r7, #16]
 8018f12:	f103 0208 	add.w	r2, r3, #8
 8018f16:	7dfb      	ldrb	r3, [r7, #23]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d001      	beq.n	8018f20 <etharp_input+0x98>
 8018f1c:	2301      	movs	r3, #1
 8018f1e:	e000      	b.n	8018f22 <etharp_input+0x9a>
 8018f20:	2302      	movs	r3, #2
 8018f22:	f107 010c 	add.w	r1, r7, #12
 8018f26:	6838      	ldr	r0, [r7, #0]
 8018f28:	f7ff fed8 	bl	8018cdc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018f2c:	693b      	ldr	r3, [r7, #16]
 8018f2e:	88db      	ldrh	r3, [r3, #6]
 8018f30:	b29b      	uxth	r3, r3
 8018f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018f36:	d003      	beq.n	8018f40 <etharp_input+0xb8>
 8018f38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018f3c:	d01e      	beq.n	8018f7c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018f3e:	e020      	b.n	8018f82 <etharp_input+0xfa>
      if (for_us) {
 8018f40:	7dfb      	ldrb	r3, [r7, #23]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d01c      	beq.n	8018f80 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018f46:	683b      	ldr	r3, [r7, #0]
 8018f48:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018f4c:	693b      	ldr	r3, [r7, #16]
 8018f4e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018f52:	683b      	ldr	r3, [r7, #0]
 8018f54:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018f5c:	693a      	ldr	r2, [r7, #16]
 8018f5e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018f60:	2102      	movs	r1, #2
 8018f62:	9103      	str	r1, [sp, #12]
 8018f64:	f107 010c 	add.w	r1, r7, #12
 8018f68:	9102      	str	r1, [sp, #8]
 8018f6a:	9201      	str	r2, [sp, #4]
 8018f6c:	9300      	str	r3, [sp, #0]
 8018f6e:	462b      	mov	r3, r5
 8018f70:	4622      	mov	r2, r4
 8018f72:	4601      	mov	r1, r0
 8018f74:	6838      	ldr	r0, [r7, #0]
 8018f76:	f000 faeb 	bl	8019550 <etharp_raw>
      break;
 8018f7a:	e001      	b.n	8018f80 <etharp_input+0xf8>
      break;
 8018f7c:	bf00      	nop
 8018f7e:	e000      	b.n	8018f82 <etharp_input+0xfa>
      break;
 8018f80:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018f82:	6878      	ldr	r0, [r7, #4]
 8018f84:	f7f8 fb92 	bl	80116ac <pbuf_free>
}
 8018f88:	3718      	adds	r7, #24
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	080214b0 	.word	0x080214b0
 8018f94:	08021600 	.word	0x08021600
 8018f98:	08021528 	.word	0x08021528

08018f9c <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	b086      	sub	sp, #24
 8018fa0:	af02      	add	r7, sp, #8
 8018fa2:	60f8      	str	r0, [r7, #12]
 8018fa4:	60b9      	str	r1, [r7, #8]
 8018fa6:	4613      	mov	r3, r2
 8018fa8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018faa:	79fa      	ldrb	r2, [r7, #7]
 8018fac:	4944      	ldr	r1, [pc, #272]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8018fae:	4613      	mov	r3, r2
 8018fb0:	005b      	lsls	r3, r3, #1
 8018fb2:	4413      	add	r3, r2
 8018fb4:	00db      	lsls	r3, r3, #3
 8018fb6:	440b      	add	r3, r1
 8018fb8:	3314      	adds	r3, #20
 8018fba:	781b      	ldrb	r3, [r3, #0]
 8018fbc:	2b01      	cmp	r3, #1
 8018fbe:	d806      	bhi.n	8018fce <etharp_output_to_arp_index+0x32>
 8018fc0:	4b40      	ldr	r3, [pc, #256]	; (80190c4 <etharp_output_to_arp_index+0x128>)
 8018fc2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8018fc6:	4940      	ldr	r1, [pc, #256]	; (80190c8 <etharp_output_to_arp_index+0x12c>)
 8018fc8:	4840      	ldr	r0, [pc, #256]	; (80190cc <etharp_output_to_arp_index+0x130>)
 8018fca:	f002 fe9f 	bl	801bd0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018fce:	79fa      	ldrb	r2, [r7, #7]
 8018fd0:	493b      	ldr	r1, [pc, #236]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8018fd2:	4613      	mov	r3, r2
 8018fd4:	005b      	lsls	r3, r3, #1
 8018fd6:	4413      	add	r3, r2
 8018fd8:	00db      	lsls	r3, r3, #3
 8018fda:	440b      	add	r3, r1
 8018fdc:	3314      	adds	r3, #20
 8018fde:	781b      	ldrb	r3, [r3, #0]
 8018fe0:	2b02      	cmp	r3, #2
 8018fe2:	d153      	bne.n	801908c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018fe4:	79fa      	ldrb	r2, [r7, #7]
 8018fe6:	4936      	ldr	r1, [pc, #216]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8018fe8:	4613      	mov	r3, r2
 8018fea:	005b      	lsls	r3, r3, #1
 8018fec:	4413      	add	r3, r2
 8018fee:	00db      	lsls	r3, r3, #3
 8018ff0:	440b      	add	r3, r1
 8018ff2:	3312      	adds	r3, #18
 8018ff4:	881b      	ldrh	r3, [r3, #0]
 8018ff6:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018ffa:	d919      	bls.n	8019030 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018ffc:	79fa      	ldrb	r2, [r7, #7]
 8018ffe:	4613      	mov	r3, r2
 8019000:	005b      	lsls	r3, r3, #1
 8019002:	4413      	add	r3, r2
 8019004:	00db      	lsls	r3, r3, #3
 8019006:	4a2e      	ldr	r2, [pc, #184]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8019008:	4413      	add	r3, r2
 801900a:	3304      	adds	r3, #4
 801900c:	4619      	mov	r1, r3
 801900e:	68f8      	ldr	r0, [r7, #12]
 8019010:	f000 fb4c 	bl	80196ac <etharp_request>
 8019014:	4603      	mov	r3, r0
 8019016:	2b00      	cmp	r3, #0
 8019018:	d138      	bne.n	801908c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801901a:	79fa      	ldrb	r2, [r7, #7]
 801901c:	4928      	ldr	r1, [pc, #160]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 801901e:	4613      	mov	r3, r2
 8019020:	005b      	lsls	r3, r3, #1
 8019022:	4413      	add	r3, r2
 8019024:	00db      	lsls	r3, r3, #3
 8019026:	440b      	add	r3, r1
 8019028:	3314      	adds	r3, #20
 801902a:	2203      	movs	r2, #3
 801902c:	701a      	strb	r2, [r3, #0]
 801902e:	e02d      	b.n	801908c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8019030:	79fa      	ldrb	r2, [r7, #7]
 8019032:	4923      	ldr	r1, [pc, #140]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8019034:	4613      	mov	r3, r2
 8019036:	005b      	lsls	r3, r3, #1
 8019038:	4413      	add	r3, r2
 801903a:	00db      	lsls	r3, r3, #3
 801903c:	440b      	add	r3, r1
 801903e:	3312      	adds	r3, #18
 8019040:	881b      	ldrh	r3, [r3, #0]
 8019042:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8019046:	d321      	bcc.n	801908c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8019048:	79fa      	ldrb	r2, [r7, #7]
 801904a:	4613      	mov	r3, r2
 801904c:	005b      	lsls	r3, r3, #1
 801904e:	4413      	add	r3, r2
 8019050:	00db      	lsls	r3, r3, #3
 8019052:	4a1b      	ldr	r2, [pc, #108]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8019054:	4413      	add	r3, r2
 8019056:	1d19      	adds	r1, r3, #4
 8019058:	79fa      	ldrb	r2, [r7, #7]
 801905a:	4613      	mov	r3, r2
 801905c:	005b      	lsls	r3, r3, #1
 801905e:	4413      	add	r3, r2
 8019060:	00db      	lsls	r3, r3, #3
 8019062:	3308      	adds	r3, #8
 8019064:	4a16      	ldr	r2, [pc, #88]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 8019066:	4413      	add	r3, r2
 8019068:	3304      	adds	r3, #4
 801906a:	461a      	mov	r2, r3
 801906c:	68f8      	ldr	r0, [r7, #12]
 801906e:	f000 fafb 	bl	8019668 <etharp_request_dst>
 8019072:	4603      	mov	r3, r0
 8019074:	2b00      	cmp	r3, #0
 8019076:	d109      	bne.n	801908c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019078:	79fa      	ldrb	r2, [r7, #7]
 801907a:	4911      	ldr	r1, [pc, #68]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 801907c:	4613      	mov	r3, r2
 801907e:	005b      	lsls	r3, r3, #1
 8019080:	4413      	add	r3, r2
 8019082:	00db      	lsls	r3, r3, #3
 8019084:	440b      	add	r3, r1
 8019086:	3314      	adds	r3, #20
 8019088:	2203      	movs	r2, #3
 801908a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8019092:	79fa      	ldrb	r2, [r7, #7]
 8019094:	4613      	mov	r3, r2
 8019096:	005b      	lsls	r3, r3, #1
 8019098:	4413      	add	r3, r2
 801909a:	00db      	lsls	r3, r3, #3
 801909c:	3308      	adds	r3, #8
 801909e:	4a08      	ldr	r2, [pc, #32]	; (80190c0 <etharp_output_to_arp_index+0x124>)
 80190a0:	4413      	add	r3, r2
 80190a2:	3304      	adds	r3, #4
 80190a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80190a8:	9200      	str	r2, [sp, #0]
 80190aa:	460a      	mov	r2, r1
 80190ac:	68b9      	ldr	r1, [r7, #8]
 80190ae:	68f8      	ldr	r0, [r7, #12]
 80190b0:	f001 ff78 	bl	801afa4 <ethernet_output>
 80190b4:	4603      	mov	r3, r0
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3710      	adds	r7, #16
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}
 80190be:	bf00      	nop
 80190c0:	20004834 	.word	0x20004834
 80190c4:	080214b0 	.word	0x080214b0
 80190c8:	08021620 	.word	0x08021620
 80190cc:	08021528 	.word	0x08021528

080190d0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80190d0:	b580      	push	{r7, lr}
 80190d2:	b08a      	sub	sp, #40	; 0x28
 80190d4:	af02      	add	r7, sp, #8
 80190d6:	60f8      	str	r0, [r7, #12]
 80190d8:	60b9      	str	r1, [r7, #8]
 80190da:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d106      	bne.n	80190f4 <etharp_output+0x24>
 80190e6:	4b73      	ldr	r3, [pc, #460]	; (80192b4 <etharp_output+0x1e4>)
 80190e8:	f240 321e 	movw	r2, #798	; 0x31e
 80190ec:	4972      	ldr	r1, [pc, #456]	; (80192b8 <etharp_output+0x1e8>)
 80190ee:	4873      	ldr	r0, [pc, #460]	; (80192bc <etharp_output+0x1ec>)
 80190f0:	f002 fe0c 	bl	801bd0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80190f4:	68bb      	ldr	r3, [r7, #8]
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d106      	bne.n	8019108 <etharp_output+0x38>
 80190fa:	4b6e      	ldr	r3, [pc, #440]	; (80192b4 <etharp_output+0x1e4>)
 80190fc:	f240 321f 	movw	r2, #799	; 0x31f
 8019100:	496f      	ldr	r1, [pc, #444]	; (80192c0 <etharp_output+0x1f0>)
 8019102:	486e      	ldr	r0, [pc, #440]	; (80192bc <etharp_output+0x1ec>)
 8019104:	f002 fe02 	bl	801bd0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	2b00      	cmp	r3, #0
 801910c:	d106      	bne.n	801911c <etharp_output+0x4c>
 801910e:	4b69      	ldr	r3, [pc, #420]	; (80192b4 <etharp_output+0x1e4>)
 8019110:	f44f 7248 	mov.w	r2, #800	; 0x320
 8019114:	496b      	ldr	r1, [pc, #428]	; (80192c4 <etharp_output+0x1f4>)
 8019116:	4869      	ldr	r0, [pc, #420]	; (80192bc <etharp_output+0x1ec>)
 8019118:	f002 fdf8 	bl	801bd0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801911c:	687b      	ldr	r3, [r7, #4]
 801911e:	681b      	ldr	r3, [r3, #0]
 8019120:	68f9      	ldr	r1, [r7, #12]
 8019122:	4618      	mov	r0, r3
 8019124:	f000 fef8 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8019128:	4603      	mov	r3, r0
 801912a:	2b00      	cmp	r3, #0
 801912c:	d002      	beq.n	8019134 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801912e:	4b66      	ldr	r3, [pc, #408]	; (80192c8 <etharp_output+0x1f8>)
 8019130:	61fb      	str	r3, [r7, #28]
 8019132:	e0af      	b.n	8019294 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8019134:	687b      	ldr	r3, [r7, #4]
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801913c:	2be0      	cmp	r3, #224	; 0xe0
 801913e:	d118      	bne.n	8019172 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8019140:	2301      	movs	r3, #1
 8019142:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8019144:	2300      	movs	r3, #0
 8019146:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8019148:	235e      	movs	r3, #94	; 0x5e
 801914a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	3301      	adds	r3, #1
 8019150:	781b      	ldrb	r3, [r3, #0]
 8019152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019156:	b2db      	uxtb	r3, r3
 8019158:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801915a:	687b      	ldr	r3, [r7, #4]
 801915c:	3302      	adds	r3, #2
 801915e:	781b      	ldrb	r3, [r3, #0]
 8019160:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8019162:	687b      	ldr	r3, [r7, #4]
 8019164:	3303      	adds	r3, #3
 8019166:	781b      	ldrb	r3, [r3, #0]
 8019168:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801916a:	f107 0310 	add.w	r3, r7, #16
 801916e:	61fb      	str	r3, [r7, #28]
 8019170:	e090      	b.n	8019294 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	3304      	adds	r3, #4
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	405a      	eors	r2, r3
 801917e:	68fb      	ldr	r3, [r7, #12]
 8019180:	3308      	adds	r3, #8
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	4013      	ands	r3, r2
 8019186:	2b00      	cmp	r3, #0
 8019188:	d012      	beq.n	80191b0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	681b      	ldr	r3, [r3, #0]
 801918e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019190:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8019194:	4293      	cmp	r3, r2
 8019196:	d00b      	beq.n	80191b0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019198:	68fb      	ldr	r3, [r7, #12]
 801919a:	330c      	adds	r3, #12
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	2b00      	cmp	r3, #0
 80191a0:	d003      	beq.n	80191aa <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	330c      	adds	r3, #12
 80191a6:	61bb      	str	r3, [r7, #24]
 80191a8:	e002      	b.n	80191b0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80191aa:	f06f 0303 	mvn.w	r3, #3
 80191ae:	e07d      	b.n	80192ac <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80191b0:	4b46      	ldr	r3, [pc, #280]	; (80192cc <etharp_output+0x1fc>)
 80191b2:	781b      	ldrb	r3, [r3, #0]
 80191b4:	4619      	mov	r1, r3
 80191b6:	4a46      	ldr	r2, [pc, #280]	; (80192d0 <etharp_output+0x200>)
 80191b8:	460b      	mov	r3, r1
 80191ba:	005b      	lsls	r3, r3, #1
 80191bc:	440b      	add	r3, r1
 80191be:	00db      	lsls	r3, r3, #3
 80191c0:	4413      	add	r3, r2
 80191c2:	3314      	adds	r3, #20
 80191c4:	781b      	ldrb	r3, [r3, #0]
 80191c6:	2b01      	cmp	r3, #1
 80191c8:	d925      	bls.n	8019216 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80191ca:	4b40      	ldr	r3, [pc, #256]	; (80192cc <etharp_output+0x1fc>)
 80191cc:	781b      	ldrb	r3, [r3, #0]
 80191ce:	4619      	mov	r1, r3
 80191d0:	4a3f      	ldr	r2, [pc, #252]	; (80192d0 <etharp_output+0x200>)
 80191d2:	460b      	mov	r3, r1
 80191d4:	005b      	lsls	r3, r3, #1
 80191d6:	440b      	add	r3, r1
 80191d8:	00db      	lsls	r3, r3, #3
 80191da:	4413      	add	r3, r2
 80191dc:	3308      	adds	r3, #8
 80191de:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80191e0:	68fa      	ldr	r2, [r7, #12]
 80191e2:	429a      	cmp	r2, r3
 80191e4:	d117      	bne.n	8019216 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80191e6:	69bb      	ldr	r3, [r7, #24]
 80191e8:	681a      	ldr	r2, [r3, #0]
 80191ea:	4b38      	ldr	r3, [pc, #224]	; (80192cc <etharp_output+0x1fc>)
 80191ec:	781b      	ldrb	r3, [r3, #0]
 80191ee:	4618      	mov	r0, r3
 80191f0:	4937      	ldr	r1, [pc, #220]	; (80192d0 <etharp_output+0x200>)
 80191f2:	4603      	mov	r3, r0
 80191f4:	005b      	lsls	r3, r3, #1
 80191f6:	4403      	add	r3, r0
 80191f8:	00db      	lsls	r3, r3, #3
 80191fa:	440b      	add	r3, r1
 80191fc:	3304      	adds	r3, #4
 80191fe:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019200:	429a      	cmp	r2, r3
 8019202:	d108      	bne.n	8019216 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8019204:	4b31      	ldr	r3, [pc, #196]	; (80192cc <etharp_output+0x1fc>)
 8019206:	781b      	ldrb	r3, [r3, #0]
 8019208:	461a      	mov	r2, r3
 801920a:	68b9      	ldr	r1, [r7, #8]
 801920c:	68f8      	ldr	r0, [r7, #12]
 801920e:	f7ff fec5 	bl	8018f9c <etharp_output_to_arp_index>
 8019212:	4603      	mov	r3, r0
 8019214:	e04a      	b.n	80192ac <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019216:	2300      	movs	r3, #0
 8019218:	75fb      	strb	r3, [r7, #23]
 801921a:	e031      	b.n	8019280 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801921c:	7dfa      	ldrb	r2, [r7, #23]
 801921e:	492c      	ldr	r1, [pc, #176]	; (80192d0 <etharp_output+0x200>)
 8019220:	4613      	mov	r3, r2
 8019222:	005b      	lsls	r3, r3, #1
 8019224:	4413      	add	r3, r2
 8019226:	00db      	lsls	r3, r3, #3
 8019228:	440b      	add	r3, r1
 801922a:	3314      	adds	r3, #20
 801922c:	781b      	ldrb	r3, [r3, #0]
 801922e:	2b01      	cmp	r3, #1
 8019230:	d923      	bls.n	801927a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8019232:	7dfa      	ldrb	r2, [r7, #23]
 8019234:	4926      	ldr	r1, [pc, #152]	; (80192d0 <etharp_output+0x200>)
 8019236:	4613      	mov	r3, r2
 8019238:	005b      	lsls	r3, r3, #1
 801923a:	4413      	add	r3, r2
 801923c:	00db      	lsls	r3, r3, #3
 801923e:	440b      	add	r3, r1
 8019240:	3308      	adds	r3, #8
 8019242:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8019244:	68fa      	ldr	r2, [r7, #12]
 8019246:	429a      	cmp	r2, r3
 8019248:	d117      	bne.n	801927a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801924a:	69bb      	ldr	r3, [r7, #24]
 801924c:	6819      	ldr	r1, [r3, #0]
 801924e:	7dfa      	ldrb	r2, [r7, #23]
 8019250:	481f      	ldr	r0, [pc, #124]	; (80192d0 <etharp_output+0x200>)
 8019252:	4613      	mov	r3, r2
 8019254:	005b      	lsls	r3, r3, #1
 8019256:	4413      	add	r3, r2
 8019258:	00db      	lsls	r3, r3, #3
 801925a:	4403      	add	r3, r0
 801925c:	3304      	adds	r3, #4
 801925e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8019260:	4299      	cmp	r1, r3
 8019262:	d10a      	bne.n	801927a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8019264:	4a19      	ldr	r2, [pc, #100]	; (80192cc <etharp_output+0x1fc>)
 8019266:	7dfb      	ldrb	r3, [r7, #23]
 8019268:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801926a:	7dfb      	ldrb	r3, [r7, #23]
 801926c:	461a      	mov	r2, r3
 801926e:	68b9      	ldr	r1, [r7, #8]
 8019270:	68f8      	ldr	r0, [r7, #12]
 8019272:	f7ff fe93 	bl	8018f9c <etharp_output_to_arp_index>
 8019276:	4603      	mov	r3, r0
 8019278:	e018      	b.n	80192ac <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801927a:	7dfb      	ldrb	r3, [r7, #23]
 801927c:	3301      	adds	r3, #1
 801927e:	75fb      	strb	r3, [r7, #23]
 8019280:	7dfb      	ldrb	r3, [r7, #23]
 8019282:	2b09      	cmp	r3, #9
 8019284:	d9ca      	bls.n	801921c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8019286:	68ba      	ldr	r2, [r7, #8]
 8019288:	69b9      	ldr	r1, [r7, #24]
 801928a:	68f8      	ldr	r0, [r7, #12]
 801928c:	f000 f822 	bl	80192d4 <etharp_query>
 8019290:	4603      	mov	r3, r0
 8019292:	e00b      	b.n	80192ac <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801929a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801929e:	9300      	str	r3, [sp, #0]
 80192a0:	69fb      	ldr	r3, [r7, #28]
 80192a2:	68b9      	ldr	r1, [r7, #8]
 80192a4:	68f8      	ldr	r0, [r7, #12]
 80192a6:	f001 fe7d 	bl	801afa4 <ethernet_output>
 80192aa:	4603      	mov	r3, r0
}
 80192ac:	4618      	mov	r0, r3
 80192ae:	3720      	adds	r7, #32
 80192b0:	46bd      	mov	sp, r7
 80192b2:	bd80      	pop	{r7, pc}
 80192b4:	080214b0 	.word	0x080214b0
 80192b8:	08021600 	.word	0x08021600
 80192bc:	08021528 	.word	0x08021528
 80192c0:	08021650 	.word	0x08021650
 80192c4:	080215f0 	.word	0x080215f0
 80192c8:	08021d60 	.word	0x08021d60
 80192cc:	20004924 	.word	0x20004924
 80192d0:	20004834 	.word	0x20004834

080192d4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80192d4:	b580      	push	{r7, lr}
 80192d6:	b08c      	sub	sp, #48	; 0x30
 80192d8:	af02      	add	r7, sp, #8
 80192da:	60f8      	str	r0, [r7, #12]
 80192dc:	60b9      	str	r1, [r7, #8]
 80192de:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	3326      	adds	r3, #38	; 0x26
 80192e4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80192e6:	23ff      	movs	r3, #255	; 0xff
 80192e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80192ec:	2300      	movs	r3, #0
 80192ee:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80192f0:	68bb      	ldr	r3, [r7, #8]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	68f9      	ldr	r1, [r7, #12]
 80192f6:	4618      	mov	r0, r3
 80192f8:	f000 fe0e 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 80192fc:	4603      	mov	r3, r0
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d10c      	bne.n	801931c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8019302:	68bb      	ldr	r3, [r7, #8]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801930a:	2be0      	cmp	r3, #224	; 0xe0
 801930c:	d006      	beq.n	801931c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801930e:	68bb      	ldr	r3, [r7, #8]
 8019310:	2b00      	cmp	r3, #0
 8019312:	d003      	beq.n	801931c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8019314:	68bb      	ldr	r3, [r7, #8]
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	2b00      	cmp	r3, #0
 801931a:	d102      	bne.n	8019322 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801931c:	f06f 030f 	mvn.w	r3, #15
 8019320:	e101      	b.n	8019526 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8019322:	68fa      	ldr	r2, [r7, #12]
 8019324:	2101      	movs	r1, #1
 8019326:	68b8      	ldr	r0, [r7, #8]
 8019328:	f7ff fb60 	bl	80189ec <etharp_find_entry>
 801932c:	4603      	mov	r3, r0
 801932e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8019330:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8019334:	2b00      	cmp	r3, #0
 8019336:	da02      	bge.n	801933e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8019338:	8a7b      	ldrh	r3, [r7, #18]
 801933a:	b25b      	sxtb	r3, r3
 801933c:	e0f3      	b.n	8019526 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801933e:	8a7b      	ldrh	r3, [r7, #18]
 8019340:	2b7e      	cmp	r3, #126	; 0x7e
 8019342:	d906      	bls.n	8019352 <etharp_query+0x7e>
 8019344:	4b7a      	ldr	r3, [pc, #488]	; (8019530 <etharp_query+0x25c>)
 8019346:	f240 32c1 	movw	r2, #961	; 0x3c1
 801934a:	497a      	ldr	r1, [pc, #488]	; (8019534 <etharp_query+0x260>)
 801934c:	487a      	ldr	r0, [pc, #488]	; (8019538 <etharp_query+0x264>)
 801934e:	f002 fcdd 	bl	801bd0c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8019352:	8a7b      	ldrh	r3, [r7, #18]
 8019354:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8019356:	7c7a      	ldrb	r2, [r7, #17]
 8019358:	4978      	ldr	r1, [pc, #480]	; (801953c <etharp_query+0x268>)
 801935a:	4613      	mov	r3, r2
 801935c:	005b      	lsls	r3, r3, #1
 801935e:	4413      	add	r3, r2
 8019360:	00db      	lsls	r3, r3, #3
 8019362:	440b      	add	r3, r1
 8019364:	3314      	adds	r3, #20
 8019366:	781b      	ldrb	r3, [r3, #0]
 8019368:	2b00      	cmp	r3, #0
 801936a:	d115      	bne.n	8019398 <etharp_query+0xc4>
    is_new_entry = 1;
 801936c:	2301      	movs	r3, #1
 801936e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019370:	7c7a      	ldrb	r2, [r7, #17]
 8019372:	4972      	ldr	r1, [pc, #456]	; (801953c <etharp_query+0x268>)
 8019374:	4613      	mov	r3, r2
 8019376:	005b      	lsls	r3, r3, #1
 8019378:	4413      	add	r3, r2
 801937a:	00db      	lsls	r3, r3, #3
 801937c:	440b      	add	r3, r1
 801937e:	3314      	adds	r3, #20
 8019380:	2201      	movs	r2, #1
 8019382:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8019384:	7c7a      	ldrb	r2, [r7, #17]
 8019386:	496d      	ldr	r1, [pc, #436]	; (801953c <etharp_query+0x268>)
 8019388:	4613      	mov	r3, r2
 801938a:	005b      	lsls	r3, r3, #1
 801938c:	4413      	add	r3, r2
 801938e:	00db      	lsls	r3, r3, #3
 8019390:	440b      	add	r3, r1
 8019392:	3308      	adds	r3, #8
 8019394:	68fa      	ldr	r2, [r7, #12]
 8019396:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019398:	7c7a      	ldrb	r2, [r7, #17]
 801939a:	4968      	ldr	r1, [pc, #416]	; (801953c <etharp_query+0x268>)
 801939c:	4613      	mov	r3, r2
 801939e:	005b      	lsls	r3, r3, #1
 80193a0:	4413      	add	r3, r2
 80193a2:	00db      	lsls	r3, r3, #3
 80193a4:	440b      	add	r3, r1
 80193a6:	3314      	adds	r3, #20
 80193a8:	781b      	ldrb	r3, [r3, #0]
 80193aa:	2b01      	cmp	r3, #1
 80193ac:	d011      	beq.n	80193d2 <etharp_query+0xfe>
 80193ae:	7c7a      	ldrb	r2, [r7, #17]
 80193b0:	4962      	ldr	r1, [pc, #392]	; (801953c <etharp_query+0x268>)
 80193b2:	4613      	mov	r3, r2
 80193b4:	005b      	lsls	r3, r3, #1
 80193b6:	4413      	add	r3, r2
 80193b8:	00db      	lsls	r3, r3, #3
 80193ba:	440b      	add	r3, r1
 80193bc:	3314      	adds	r3, #20
 80193be:	781b      	ldrb	r3, [r3, #0]
 80193c0:	2b01      	cmp	r3, #1
 80193c2:	d806      	bhi.n	80193d2 <etharp_query+0xfe>
 80193c4:	4b5a      	ldr	r3, [pc, #360]	; (8019530 <etharp_query+0x25c>)
 80193c6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80193ca:	495d      	ldr	r1, [pc, #372]	; (8019540 <etharp_query+0x26c>)
 80193cc:	485a      	ldr	r0, [pc, #360]	; (8019538 <etharp_query+0x264>)
 80193ce:	f002 fc9d 	bl	801bd0c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80193d2:	6a3b      	ldr	r3, [r7, #32]
 80193d4:	2b00      	cmp	r3, #0
 80193d6:	d102      	bne.n	80193de <etharp_query+0x10a>
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d10c      	bne.n	80193f8 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80193de:	68b9      	ldr	r1, [r7, #8]
 80193e0:	68f8      	ldr	r0, [r7, #12]
 80193e2:	f000 f963 	bl	80196ac <etharp_request>
 80193e6:	4603      	mov	r3, r0
 80193e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d102      	bne.n	80193f8 <etharp_query+0x124>
      return result;
 80193f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80193f6:	e096      	b.n	8019526 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d106      	bne.n	801940c <etharp_query+0x138>
 80193fe:	4b4c      	ldr	r3, [pc, #304]	; (8019530 <etharp_query+0x25c>)
 8019400:	f240 32e1 	movw	r2, #993	; 0x3e1
 8019404:	494f      	ldr	r1, [pc, #316]	; (8019544 <etharp_query+0x270>)
 8019406:	484c      	ldr	r0, [pc, #304]	; (8019538 <etharp_query+0x264>)
 8019408:	f002 fc80 	bl	801bd0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801940c:	7c7a      	ldrb	r2, [r7, #17]
 801940e:	494b      	ldr	r1, [pc, #300]	; (801953c <etharp_query+0x268>)
 8019410:	4613      	mov	r3, r2
 8019412:	005b      	lsls	r3, r3, #1
 8019414:	4413      	add	r3, r2
 8019416:	00db      	lsls	r3, r3, #3
 8019418:	440b      	add	r3, r1
 801941a:	3314      	adds	r3, #20
 801941c:	781b      	ldrb	r3, [r3, #0]
 801941e:	2b01      	cmp	r3, #1
 8019420:	d917      	bls.n	8019452 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8019422:	4a49      	ldr	r2, [pc, #292]	; (8019548 <etharp_query+0x274>)
 8019424:	7c7b      	ldrb	r3, [r7, #17]
 8019426:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8019428:	7c7a      	ldrb	r2, [r7, #17]
 801942a:	4613      	mov	r3, r2
 801942c:	005b      	lsls	r3, r3, #1
 801942e:	4413      	add	r3, r2
 8019430:	00db      	lsls	r3, r3, #3
 8019432:	3308      	adds	r3, #8
 8019434:	4a41      	ldr	r2, [pc, #260]	; (801953c <etharp_query+0x268>)
 8019436:	4413      	add	r3, r2
 8019438:	3304      	adds	r3, #4
 801943a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801943e:	9200      	str	r2, [sp, #0]
 8019440:	697a      	ldr	r2, [r7, #20]
 8019442:	6879      	ldr	r1, [r7, #4]
 8019444:	68f8      	ldr	r0, [r7, #12]
 8019446:	f001 fdad 	bl	801afa4 <ethernet_output>
 801944a:	4603      	mov	r3, r0
 801944c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019450:	e067      	b.n	8019522 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019452:	7c7a      	ldrb	r2, [r7, #17]
 8019454:	4939      	ldr	r1, [pc, #228]	; (801953c <etharp_query+0x268>)
 8019456:	4613      	mov	r3, r2
 8019458:	005b      	lsls	r3, r3, #1
 801945a:	4413      	add	r3, r2
 801945c:	00db      	lsls	r3, r3, #3
 801945e:	440b      	add	r3, r1
 8019460:	3314      	adds	r3, #20
 8019462:	781b      	ldrb	r3, [r3, #0]
 8019464:	2b01      	cmp	r3, #1
 8019466:	d15c      	bne.n	8019522 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019468:	2300      	movs	r3, #0
 801946a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019470:	e01c      	b.n	80194ac <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8019472:	69fb      	ldr	r3, [r7, #28]
 8019474:	895a      	ldrh	r2, [r3, #10]
 8019476:	69fb      	ldr	r3, [r7, #28]
 8019478:	891b      	ldrh	r3, [r3, #8]
 801947a:	429a      	cmp	r2, r3
 801947c:	d10a      	bne.n	8019494 <etharp_query+0x1c0>
 801947e:	69fb      	ldr	r3, [r7, #28]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	2b00      	cmp	r3, #0
 8019484:	d006      	beq.n	8019494 <etharp_query+0x1c0>
 8019486:	4b2a      	ldr	r3, [pc, #168]	; (8019530 <etharp_query+0x25c>)
 8019488:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801948c:	492f      	ldr	r1, [pc, #188]	; (801954c <etharp_query+0x278>)
 801948e:	482a      	ldr	r0, [pc, #168]	; (8019538 <etharp_query+0x264>)
 8019490:	f002 fc3c 	bl	801bd0c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8019494:	69fb      	ldr	r3, [r7, #28]
 8019496:	7b1b      	ldrb	r3, [r3, #12]
 8019498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801949c:	2b00      	cmp	r3, #0
 801949e:	d002      	beq.n	80194a6 <etharp_query+0x1d2>
        copy_needed = 1;
 80194a0:	2301      	movs	r3, #1
 80194a2:	61bb      	str	r3, [r7, #24]
        break;
 80194a4:	e005      	b.n	80194b2 <etharp_query+0x1de>
      }
      p = p->next;
 80194a6:	69fb      	ldr	r3, [r7, #28]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	61fb      	str	r3, [r7, #28]
    while (p) {
 80194ac:	69fb      	ldr	r3, [r7, #28]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d1df      	bne.n	8019472 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d007      	beq.n	80194c8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80194b8:	687a      	ldr	r2, [r7, #4]
 80194ba:	f44f 7120 	mov.w	r1, #640	; 0x280
 80194be:	200e      	movs	r0, #14
 80194c0:	f7f8 fb6c 	bl	8011b9c <pbuf_clone>
 80194c4:	61f8      	str	r0, [r7, #28]
 80194c6:	e004      	b.n	80194d2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80194cc:	69f8      	ldr	r0, [r7, #28]
 80194ce:	f7f8 f993 	bl	80117f8 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80194d2:	69fb      	ldr	r3, [r7, #28]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d021      	beq.n	801951c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80194d8:	7c7a      	ldrb	r2, [r7, #17]
 80194da:	4918      	ldr	r1, [pc, #96]	; (801953c <etharp_query+0x268>)
 80194dc:	4613      	mov	r3, r2
 80194de:	005b      	lsls	r3, r3, #1
 80194e0:	4413      	add	r3, r2
 80194e2:	00db      	lsls	r3, r3, #3
 80194e4:	440b      	add	r3, r1
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d00a      	beq.n	8019502 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80194ec:	7c7a      	ldrb	r2, [r7, #17]
 80194ee:	4913      	ldr	r1, [pc, #76]	; (801953c <etharp_query+0x268>)
 80194f0:	4613      	mov	r3, r2
 80194f2:	005b      	lsls	r3, r3, #1
 80194f4:	4413      	add	r3, r2
 80194f6:	00db      	lsls	r3, r3, #3
 80194f8:	440b      	add	r3, r1
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7f8 f8d5 	bl	80116ac <pbuf_free>
      }
      arp_table[i].q = p;
 8019502:	7c7a      	ldrb	r2, [r7, #17]
 8019504:	490d      	ldr	r1, [pc, #52]	; (801953c <etharp_query+0x268>)
 8019506:	4613      	mov	r3, r2
 8019508:	005b      	lsls	r3, r3, #1
 801950a:	4413      	add	r3, r2
 801950c:	00db      	lsls	r3, r3, #3
 801950e:	440b      	add	r3, r1
 8019510:	69fa      	ldr	r2, [r7, #28]
 8019512:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8019514:	2300      	movs	r3, #0
 8019516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801951a:	e002      	b.n	8019522 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801951c:	23ff      	movs	r3, #255	; 0xff
 801951e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8019522:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019526:	4618      	mov	r0, r3
 8019528:	3728      	adds	r7, #40	; 0x28
 801952a:	46bd      	mov	sp, r7
 801952c:	bd80      	pop	{r7, pc}
 801952e:	bf00      	nop
 8019530:	080214b0 	.word	0x080214b0
 8019534:	0802165c 	.word	0x0802165c
 8019538:	08021528 	.word	0x08021528
 801953c:	20004834 	.word	0x20004834
 8019540:	0802166c 	.word	0x0802166c
 8019544:	08021650 	.word	0x08021650
 8019548:	20004924 	.word	0x20004924
 801954c:	08021694 	.word	0x08021694

08019550 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8019550:	b580      	push	{r7, lr}
 8019552:	b08a      	sub	sp, #40	; 0x28
 8019554:	af02      	add	r7, sp, #8
 8019556:	60f8      	str	r0, [r7, #12]
 8019558:	60b9      	str	r1, [r7, #8]
 801955a:	607a      	str	r2, [r7, #4]
 801955c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801955e:	2300      	movs	r3, #0
 8019560:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	2b00      	cmp	r3, #0
 8019566:	d106      	bne.n	8019576 <etharp_raw+0x26>
 8019568:	4b3a      	ldr	r3, [pc, #232]	; (8019654 <etharp_raw+0x104>)
 801956a:	f240 4257 	movw	r2, #1111	; 0x457
 801956e:	493a      	ldr	r1, [pc, #232]	; (8019658 <etharp_raw+0x108>)
 8019570:	483a      	ldr	r0, [pc, #232]	; (801965c <etharp_raw+0x10c>)
 8019572:	f002 fbcb 	bl	801bd0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8019576:	f44f 7220 	mov.w	r2, #640	; 0x280
 801957a:	211c      	movs	r1, #28
 801957c:	200e      	movs	r0, #14
 801957e:	f7f7 fd7f 	bl	8011080 <pbuf_alloc>
 8019582:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8019584:	69bb      	ldr	r3, [r7, #24]
 8019586:	2b00      	cmp	r3, #0
 8019588:	d102      	bne.n	8019590 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801958a:	f04f 33ff 	mov.w	r3, #4294967295
 801958e:	e05d      	b.n	801964c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019590:	69bb      	ldr	r3, [r7, #24]
 8019592:	895b      	ldrh	r3, [r3, #10]
 8019594:	2b1b      	cmp	r3, #27
 8019596:	d806      	bhi.n	80195a6 <etharp_raw+0x56>
 8019598:	4b2e      	ldr	r3, [pc, #184]	; (8019654 <etharp_raw+0x104>)
 801959a:	f240 4262 	movw	r2, #1122	; 0x462
 801959e:	4930      	ldr	r1, [pc, #192]	; (8019660 <etharp_raw+0x110>)
 80195a0:	482e      	ldr	r0, [pc, #184]	; (801965c <etharp_raw+0x10c>)
 80195a2:	f002 fbb3 	bl	801bd0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80195a6:	69bb      	ldr	r3, [r7, #24]
 80195a8:	685b      	ldr	r3, [r3, #4]
 80195aa:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80195ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80195ae:	4618      	mov	r0, r3
 80195b0:	f7f6 fc9e 	bl	800fef0 <lwip_htons>
 80195b4:	4603      	mov	r3, r0
 80195b6:	461a      	mov	r2, r3
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80195c2:	2b06      	cmp	r3, #6
 80195c4:	d006      	beq.n	80195d4 <etharp_raw+0x84>
 80195c6:	4b23      	ldr	r3, [pc, #140]	; (8019654 <etharp_raw+0x104>)
 80195c8:	f240 4269 	movw	r2, #1129	; 0x469
 80195cc:	4925      	ldr	r1, [pc, #148]	; (8019664 <etharp_raw+0x114>)
 80195ce:	4823      	ldr	r0, [pc, #140]	; (801965c <etharp_raw+0x10c>)
 80195d0:	f002 fb9c 	bl	801bd0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80195d4:	697b      	ldr	r3, [r7, #20]
 80195d6:	3308      	adds	r3, #8
 80195d8:	2206      	movs	r2, #6
 80195da:	6839      	ldr	r1, [r7, #0]
 80195dc:	4618      	mov	r0, r3
 80195de:	f001 ff3d 	bl	801b45c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80195e2:	697b      	ldr	r3, [r7, #20]
 80195e4:	3312      	adds	r3, #18
 80195e6:	2206      	movs	r2, #6
 80195e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80195ea:	4618      	mov	r0, r3
 80195ec:	f001 ff36 	bl	801b45c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	330e      	adds	r3, #14
 80195f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80195f6:	6812      	ldr	r2, [r2, #0]
 80195f8:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	3318      	adds	r3, #24
 80195fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019600:	6812      	ldr	r2, [r2, #0]
 8019602:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8019604:	697b      	ldr	r3, [r7, #20]
 8019606:	2200      	movs	r2, #0
 8019608:	701a      	strb	r2, [r3, #0]
 801960a:	2200      	movs	r2, #0
 801960c:	f042 0201 	orr.w	r2, r2, #1
 8019610:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8019612:	697b      	ldr	r3, [r7, #20]
 8019614:	2200      	movs	r2, #0
 8019616:	f042 0208 	orr.w	r2, r2, #8
 801961a:	709a      	strb	r2, [r3, #2]
 801961c:	2200      	movs	r2, #0
 801961e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8019620:	697b      	ldr	r3, [r7, #20]
 8019622:	2206      	movs	r2, #6
 8019624:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	2204      	movs	r2, #4
 801962a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801962c:	f640 0306 	movw	r3, #2054	; 0x806
 8019630:	9300      	str	r3, [sp, #0]
 8019632:	687b      	ldr	r3, [r7, #4]
 8019634:	68ba      	ldr	r2, [r7, #8]
 8019636:	69b9      	ldr	r1, [r7, #24]
 8019638:	68f8      	ldr	r0, [r7, #12]
 801963a:	f001 fcb3 	bl	801afa4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801963e:	69b8      	ldr	r0, [r7, #24]
 8019640:	f7f8 f834 	bl	80116ac <pbuf_free>
  p = NULL;
 8019644:	2300      	movs	r3, #0
 8019646:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8019648:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801964c:	4618      	mov	r0, r3
 801964e:	3720      	adds	r7, #32
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	080214b0 	.word	0x080214b0
 8019658:	08021600 	.word	0x08021600
 801965c:	08021528 	.word	0x08021528
 8019660:	080216b0 	.word	0x080216b0
 8019664:	080216e4 	.word	0x080216e4

08019668 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019668:	b580      	push	{r7, lr}
 801966a:	b088      	sub	sp, #32
 801966c:	af04      	add	r7, sp, #16
 801966e:	60f8      	str	r0, [r7, #12]
 8019670:	60b9      	str	r1, [r7, #8]
 8019672:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801967a:	68fb      	ldr	r3, [r7, #12]
 801967c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019680:	68fb      	ldr	r3, [r7, #12]
 8019682:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8019684:	2201      	movs	r2, #1
 8019686:	9203      	str	r2, [sp, #12]
 8019688:	68ba      	ldr	r2, [r7, #8]
 801968a:	9202      	str	r2, [sp, #8]
 801968c:	4a06      	ldr	r2, [pc, #24]	; (80196a8 <etharp_request_dst+0x40>)
 801968e:	9201      	str	r2, [sp, #4]
 8019690:	9300      	str	r3, [sp, #0]
 8019692:	4603      	mov	r3, r0
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	68f8      	ldr	r0, [r7, #12]
 8019698:	f7ff ff5a 	bl	8019550 <etharp_raw>
 801969c:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801969e:	4618      	mov	r0, r3
 80196a0:	3710      	adds	r7, #16
 80196a2:	46bd      	mov	sp, r7
 80196a4:	bd80      	pop	{r7, pc}
 80196a6:	bf00      	nop
 80196a8:	08021d68 	.word	0x08021d68

080196ac <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80196ac:	b580      	push	{r7, lr}
 80196ae:	b082      	sub	sp, #8
 80196b0:	af00      	add	r7, sp, #0
 80196b2:	6078      	str	r0, [r7, #4]
 80196b4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80196b6:	4a05      	ldr	r2, [pc, #20]	; (80196cc <etharp_request+0x20>)
 80196b8:	6839      	ldr	r1, [r7, #0]
 80196ba:	6878      	ldr	r0, [r7, #4]
 80196bc:	f7ff ffd4 	bl	8019668 <etharp_request_dst>
 80196c0:	4603      	mov	r3, r0
}
 80196c2:	4618      	mov	r0, r3
 80196c4:	3708      	adds	r7, #8
 80196c6:	46bd      	mov	sp, r7
 80196c8:	bd80      	pop	{r7, pc}
 80196ca:	bf00      	nop
 80196cc:	08021d60 	.word	0x08021d60

080196d0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80196d0:	b580      	push	{r7, lr}
 80196d2:	b08e      	sub	sp, #56	; 0x38
 80196d4:	af04      	add	r7, sp, #16
 80196d6:	6078      	str	r0, [r7, #4]
 80196d8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80196da:	4b79      	ldr	r3, [pc, #484]	; (80198c0 <icmp_input+0x1f0>)
 80196dc:	689b      	ldr	r3, [r3, #8]
 80196de:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80196e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e2:	781b      	ldrb	r3, [r3, #0]
 80196e4:	f003 030f 	and.w	r3, r3, #15
 80196e8:	b2db      	uxtb	r3, r3
 80196ea:	009b      	lsls	r3, r3, #2
 80196ec:	b2db      	uxtb	r3, r3
 80196ee:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80196f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80196f2:	2b13      	cmp	r3, #19
 80196f4:	f240 80cd 	bls.w	8019892 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	895b      	ldrh	r3, [r3, #10]
 80196fc:	2b03      	cmp	r3, #3
 80196fe:	f240 80ca 	bls.w	8019896 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	685b      	ldr	r3, [r3, #4]
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801970c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019710:	2b00      	cmp	r3, #0
 8019712:	f000 80b7 	beq.w	8019884 <icmp_input+0x1b4>
 8019716:	2b08      	cmp	r3, #8
 8019718:	f040 80b7 	bne.w	801988a <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801971c:	4b69      	ldr	r3, [pc, #420]	; (80198c4 <icmp_input+0x1f4>)
 801971e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019720:	4b67      	ldr	r3, [pc, #412]	; (80198c0 <icmp_input+0x1f0>)
 8019722:	695b      	ldr	r3, [r3, #20]
 8019724:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019728:	2be0      	cmp	r3, #224	; 0xe0
 801972a:	f000 80bb 	beq.w	80198a4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801972e:	4b64      	ldr	r3, [pc, #400]	; (80198c0 <icmp_input+0x1f0>)
 8019730:	695b      	ldr	r3, [r3, #20]
 8019732:	4a63      	ldr	r2, [pc, #396]	; (80198c0 <icmp_input+0x1f0>)
 8019734:	6812      	ldr	r2, [r2, #0]
 8019736:	4611      	mov	r1, r2
 8019738:	4618      	mov	r0, r3
 801973a:	f000 fbed 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 801973e:	4603      	mov	r3, r0
 8019740:	2b00      	cmp	r3, #0
 8019742:	f040 80b1 	bne.w	80198a8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	891b      	ldrh	r3, [r3, #8]
 801974a:	2b07      	cmp	r3, #7
 801974c:	f240 80a5 	bls.w	801989a <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019752:	330e      	adds	r3, #14
 8019754:	4619      	mov	r1, r3
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	f7f7 fee0 	bl	801151c <pbuf_add_header>
 801975c:	4603      	mov	r3, r0
 801975e:	2b00      	cmp	r3, #0
 8019760:	d04b      	beq.n	80197fa <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	891a      	ldrh	r2, [r3, #8]
 8019766:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019768:	4413      	add	r3, r2
 801976a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	891b      	ldrh	r3, [r3, #8]
 8019770:	8b7a      	ldrh	r2, [r7, #26]
 8019772:	429a      	cmp	r2, r3
 8019774:	f0c0 809a 	bcc.w	80198ac <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019778:	8b7b      	ldrh	r3, [r7, #26]
 801977a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801977e:	4619      	mov	r1, r3
 8019780:	200e      	movs	r0, #14
 8019782:	f7f7 fc7d 	bl	8011080 <pbuf_alloc>
 8019786:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019788:	697b      	ldr	r3, [r7, #20]
 801978a:	2b00      	cmp	r3, #0
 801978c:	f000 8090 	beq.w	80198b0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019790:	697b      	ldr	r3, [r7, #20]
 8019792:	895b      	ldrh	r3, [r3, #10]
 8019794:	461a      	mov	r2, r3
 8019796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019798:	3308      	adds	r3, #8
 801979a:	429a      	cmp	r2, r3
 801979c:	d203      	bcs.n	80197a6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801979e:	6978      	ldr	r0, [r7, #20]
 80197a0:	f7f7 ff84 	bl	80116ac <pbuf_free>
          goto icmperr;
 80197a4:	e085      	b.n	80198b2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80197a6:	697b      	ldr	r3, [r7, #20]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80197ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80197ae:	4618      	mov	r0, r3
 80197b0:	f001 fe54 	bl	801b45c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80197b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80197b6:	4619      	mov	r1, r3
 80197b8:	6978      	ldr	r0, [r7, #20]
 80197ba:	f7f7 febf 	bl	801153c <pbuf_remove_header>
 80197be:	4603      	mov	r3, r0
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d009      	beq.n	80197d8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80197c4:	4b40      	ldr	r3, [pc, #256]	; (80198c8 <icmp_input+0x1f8>)
 80197c6:	22b6      	movs	r2, #182	; 0xb6
 80197c8:	4940      	ldr	r1, [pc, #256]	; (80198cc <icmp_input+0x1fc>)
 80197ca:	4841      	ldr	r0, [pc, #260]	; (80198d0 <icmp_input+0x200>)
 80197cc:	f002 fa9e 	bl	801bd0c <iprintf>
          pbuf_free(r);
 80197d0:	6978      	ldr	r0, [r7, #20]
 80197d2:	f7f7 ff6b 	bl	80116ac <pbuf_free>
          goto icmperr;
 80197d6:	e06c      	b.n	80198b2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80197d8:	6879      	ldr	r1, [r7, #4]
 80197da:	6978      	ldr	r0, [r7, #20]
 80197dc:	f7f8 f89a 	bl	8011914 <pbuf_copy>
 80197e0:	4603      	mov	r3, r0
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d003      	beq.n	80197ee <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80197e6:	6978      	ldr	r0, [r7, #20]
 80197e8:	f7f7 ff60 	bl	80116ac <pbuf_free>
          goto icmperr;
 80197ec:	e061      	b.n	80198b2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80197ee:	6878      	ldr	r0, [r7, #4]
 80197f0:	f7f7 ff5c 	bl	80116ac <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	607b      	str	r3, [r7, #4]
 80197f8:	e00f      	b.n	801981a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80197fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80197fc:	330e      	adds	r3, #14
 80197fe:	4619      	mov	r1, r3
 8019800:	6878      	ldr	r0, [r7, #4]
 8019802:	f7f7 fe9b 	bl	801153c <pbuf_remove_header>
 8019806:	4603      	mov	r3, r0
 8019808:	2b00      	cmp	r3, #0
 801980a:	d006      	beq.n	801981a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801980c:	4b2e      	ldr	r3, [pc, #184]	; (80198c8 <icmp_input+0x1f8>)
 801980e:	22c7      	movs	r2, #199	; 0xc7
 8019810:	4930      	ldr	r1, [pc, #192]	; (80198d4 <icmp_input+0x204>)
 8019812:	482f      	ldr	r0, [pc, #188]	; (80198d0 <icmp_input+0x200>)
 8019814:	f002 fa7a 	bl	801bd0c <iprintf>
          goto icmperr;
 8019818:	e04b      	b.n	80198b2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801981a:	687b      	ldr	r3, [r7, #4]
 801981c:	685b      	ldr	r3, [r3, #4]
 801981e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019820:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019822:	4619      	mov	r1, r3
 8019824:	6878      	ldr	r0, [r7, #4]
 8019826:	f7f7 fe79 	bl	801151c <pbuf_add_header>
 801982a:	4603      	mov	r3, r0
 801982c:	2b00      	cmp	r3, #0
 801982e:	d12b      	bne.n	8019888 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	685b      	ldr	r3, [r3, #4]
 8019834:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019836:	69fb      	ldr	r3, [r7, #28]
 8019838:	681a      	ldr	r2, [r3, #0]
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801983e:	4b20      	ldr	r3, [pc, #128]	; (80198c0 <icmp_input+0x1f0>)
 8019840:	691a      	ldr	r2, [r3, #16]
 8019842:	68fb      	ldr	r3, [r7, #12]
 8019844:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019846:	693b      	ldr	r3, [r7, #16]
 8019848:	2200      	movs	r2, #0
 801984a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801984c:	693b      	ldr	r3, [r7, #16]
 801984e:	2200      	movs	r2, #0
 8019850:	709a      	strb	r2, [r3, #2]
 8019852:	2200      	movs	r2, #0
 8019854:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019856:	68fb      	ldr	r3, [r7, #12]
 8019858:	22ff      	movs	r2, #255	; 0xff
 801985a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801985c:	68fb      	ldr	r3, [r7, #12]
 801985e:	2200      	movs	r2, #0
 8019860:	729a      	strb	r2, [r3, #10]
 8019862:	2200      	movs	r2, #0
 8019864:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019866:	683b      	ldr	r3, [r7, #0]
 8019868:	9302      	str	r3, [sp, #8]
 801986a:	2301      	movs	r3, #1
 801986c:	9301      	str	r3, [sp, #4]
 801986e:	2300      	movs	r3, #0
 8019870:	9300      	str	r3, [sp, #0]
 8019872:	23ff      	movs	r3, #255	; 0xff
 8019874:	2200      	movs	r2, #0
 8019876:	69f9      	ldr	r1, [r7, #28]
 8019878:	6878      	ldr	r0, [r7, #4]
 801987a:	f000 fa75 	bl	8019d68 <ip4_output_if>
 801987e:	4603      	mov	r3, r0
 8019880:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019882:	e001      	b.n	8019888 <icmp_input+0x1b8>
      break;
 8019884:	bf00      	nop
 8019886:	e000      	b.n	801988a <icmp_input+0x1ba>
      break;
 8019888:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801988a:	6878      	ldr	r0, [r7, #4]
 801988c:	f7f7 ff0e 	bl	80116ac <pbuf_free>
  return;
 8019890:	e013      	b.n	80198ba <icmp_input+0x1ea>
    goto lenerr;
 8019892:	bf00      	nop
 8019894:	e002      	b.n	801989c <icmp_input+0x1cc>
    goto lenerr;
 8019896:	bf00      	nop
 8019898:	e000      	b.n	801989c <icmp_input+0x1cc>
        goto lenerr;
 801989a:	bf00      	nop
lenerr:
  pbuf_free(p);
 801989c:	6878      	ldr	r0, [r7, #4]
 801989e:	f7f7 ff05 	bl	80116ac <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80198a2:	e00a      	b.n	80198ba <icmp_input+0x1ea>
        goto icmperr;
 80198a4:	bf00      	nop
 80198a6:	e004      	b.n	80198b2 <icmp_input+0x1e2>
        goto icmperr;
 80198a8:	bf00      	nop
 80198aa:	e002      	b.n	80198b2 <icmp_input+0x1e2>
          goto icmperr;
 80198ac:	bf00      	nop
 80198ae:	e000      	b.n	80198b2 <icmp_input+0x1e2>
          goto icmperr;
 80198b0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80198b2:	6878      	ldr	r0, [r7, #4]
 80198b4:	f7f7 fefa 	bl	80116ac <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80198b8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80198ba:	3728      	adds	r7, #40	; 0x28
 80198bc:	46bd      	mov	sp, r7
 80198be:	bd80      	pop	{r7, pc}
 80198c0:	2000a0a8 	.word	0x2000a0a8
 80198c4:	2000a0bc 	.word	0x2000a0bc
 80198c8:	08021728 	.word	0x08021728
 80198cc:	08021760 	.word	0x08021760
 80198d0:	08021798 	.word	0x08021798
 80198d4:	080217c0 	.word	0x080217c0

080198d8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80198d8:	b580      	push	{r7, lr}
 80198da:	b082      	sub	sp, #8
 80198dc:	af00      	add	r7, sp, #0
 80198de:	6078      	str	r0, [r7, #4]
 80198e0:	460b      	mov	r3, r1
 80198e2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80198e4:	78fb      	ldrb	r3, [r7, #3]
 80198e6:	461a      	mov	r2, r3
 80198e8:	2103      	movs	r1, #3
 80198ea:	6878      	ldr	r0, [r7, #4]
 80198ec:	f000 f814 	bl	8019918 <icmp_send_response>
}
 80198f0:	bf00      	nop
 80198f2:	3708      	adds	r7, #8
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}

080198f8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
 8019900:	460b      	mov	r3, r1
 8019902:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019904:	78fb      	ldrb	r3, [r7, #3]
 8019906:	461a      	mov	r2, r3
 8019908:	210b      	movs	r1, #11
 801990a:	6878      	ldr	r0, [r7, #4]
 801990c:	f000 f804 	bl	8019918 <icmp_send_response>
}
 8019910:	bf00      	nop
 8019912:	3708      	adds	r7, #8
 8019914:	46bd      	mov	sp, r7
 8019916:	bd80      	pop	{r7, pc}

08019918 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	b08c      	sub	sp, #48	; 0x30
 801991c:	af04      	add	r7, sp, #16
 801991e:	6078      	str	r0, [r7, #4]
 8019920:	460b      	mov	r3, r1
 8019922:	70fb      	strb	r3, [r7, #3]
 8019924:	4613      	mov	r3, r2
 8019926:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019928:	f44f 7220 	mov.w	r2, #640	; 0x280
 801992c:	2124      	movs	r1, #36	; 0x24
 801992e:	2022      	movs	r0, #34	; 0x22
 8019930:	f7f7 fba6 	bl	8011080 <pbuf_alloc>
 8019934:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019936:	69fb      	ldr	r3, [r7, #28]
 8019938:	2b00      	cmp	r3, #0
 801993a:	d04c      	beq.n	80199d6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801993c:	69fb      	ldr	r3, [r7, #28]
 801993e:	895b      	ldrh	r3, [r3, #10]
 8019940:	2b23      	cmp	r3, #35	; 0x23
 8019942:	d806      	bhi.n	8019952 <icmp_send_response+0x3a>
 8019944:	4b26      	ldr	r3, [pc, #152]	; (80199e0 <icmp_send_response+0xc8>)
 8019946:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801994a:	4926      	ldr	r1, [pc, #152]	; (80199e4 <icmp_send_response+0xcc>)
 801994c:	4826      	ldr	r0, [pc, #152]	; (80199e8 <icmp_send_response+0xd0>)
 801994e:	f002 f9dd 	bl	801bd0c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019952:	687b      	ldr	r3, [r7, #4]
 8019954:	685b      	ldr	r3, [r3, #4]
 8019956:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019958:	69fb      	ldr	r3, [r7, #28]
 801995a:	685b      	ldr	r3, [r3, #4]
 801995c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	78fa      	ldrb	r2, [r7, #3]
 8019962:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019964:	697b      	ldr	r3, [r7, #20]
 8019966:	78ba      	ldrb	r2, [r7, #2]
 8019968:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	2200      	movs	r2, #0
 801996e:	711a      	strb	r2, [r3, #4]
 8019970:	2200      	movs	r2, #0
 8019972:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019974:	697b      	ldr	r3, [r7, #20]
 8019976:	2200      	movs	r2, #0
 8019978:	719a      	strb	r2, [r3, #6]
 801997a:	2200      	movs	r2, #0
 801997c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801997e:	69fb      	ldr	r3, [r7, #28]
 8019980:	685b      	ldr	r3, [r3, #4]
 8019982:	f103 0008 	add.w	r0, r3, #8
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	685b      	ldr	r3, [r3, #4]
 801998a:	221c      	movs	r2, #28
 801998c:	4619      	mov	r1, r3
 801998e:	f001 fd65 	bl	801b45c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019992:	69bb      	ldr	r3, [r7, #24]
 8019994:	68db      	ldr	r3, [r3, #12]
 8019996:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019998:	f107 030c 	add.w	r3, r7, #12
 801999c:	4618      	mov	r0, r3
 801999e:	f000 f825 	bl	80199ec <ip4_route>
 80199a2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80199a4:	693b      	ldr	r3, [r7, #16]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d011      	beq.n	80199ce <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80199aa:	697b      	ldr	r3, [r7, #20]
 80199ac:	2200      	movs	r2, #0
 80199ae:	709a      	strb	r2, [r3, #2]
 80199b0:	2200      	movs	r2, #0
 80199b2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80199b4:	f107 020c 	add.w	r2, r7, #12
 80199b8:	693b      	ldr	r3, [r7, #16]
 80199ba:	9302      	str	r3, [sp, #8]
 80199bc:	2301      	movs	r3, #1
 80199be:	9301      	str	r3, [sp, #4]
 80199c0:	2300      	movs	r3, #0
 80199c2:	9300      	str	r3, [sp, #0]
 80199c4:	23ff      	movs	r3, #255	; 0xff
 80199c6:	2100      	movs	r1, #0
 80199c8:	69f8      	ldr	r0, [r7, #28]
 80199ca:	f000 f9cd 	bl	8019d68 <ip4_output_if>
  }
  pbuf_free(q);
 80199ce:	69f8      	ldr	r0, [r7, #28]
 80199d0:	f7f7 fe6c 	bl	80116ac <pbuf_free>
 80199d4:	e000      	b.n	80199d8 <icmp_send_response+0xc0>
    return;
 80199d6:	bf00      	nop
}
 80199d8:	3720      	adds	r7, #32
 80199da:	46bd      	mov	sp, r7
 80199dc:	bd80      	pop	{r7, pc}
 80199de:	bf00      	nop
 80199e0:	08021728 	.word	0x08021728
 80199e4:	080217f4 	.word	0x080217f4
 80199e8:	08021798 	.word	0x08021798

080199ec <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80199ec:	b480      	push	{r7}
 80199ee:	b085      	sub	sp, #20
 80199f0:	af00      	add	r7, sp, #0
 80199f2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80199f4:	4b33      	ldr	r3, [pc, #204]	; (8019ac4 <ip4_route+0xd8>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	60fb      	str	r3, [r7, #12]
 80199fa:	e036      	b.n	8019a6a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a02:	f003 0301 	and.w	r3, r3, #1
 8019a06:	b2db      	uxtb	r3, r3
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d02b      	beq.n	8019a64 <ip4_route+0x78>
 8019a0c:	68fb      	ldr	r3, [r7, #12]
 8019a0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a12:	089b      	lsrs	r3, r3, #2
 8019a14:	f003 0301 	and.w	r3, r3, #1
 8019a18:	b2db      	uxtb	r3, r3
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d022      	beq.n	8019a64 <ip4_route+0x78>
 8019a1e:	68fb      	ldr	r3, [r7, #12]
 8019a20:	3304      	adds	r3, #4
 8019a22:	681b      	ldr	r3, [r3, #0]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d01d      	beq.n	8019a64 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019a28:	687b      	ldr	r3, [r7, #4]
 8019a2a:	681a      	ldr	r2, [r3, #0]
 8019a2c:	68fb      	ldr	r3, [r7, #12]
 8019a2e:	3304      	adds	r3, #4
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	405a      	eors	r2, r3
 8019a34:	68fb      	ldr	r3, [r7, #12]
 8019a36:	3308      	adds	r3, #8
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	4013      	ands	r3, r2
 8019a3c:	2b00      	cmp	r3, #0
 8019a3e:	d101      	bne.n	8019a44 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019a40:	68fb      	ldr	r3, [r7, #12]
 8019a42:	e038      	b.n	8019ab6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019a44:	68fb      	ldr	r3, [r7, #12]
 8019a46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a4a:	f003 0302 	and.w	r3, r3, #2
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d108      	bne.n	8019a64 <ip4_route+0x78>
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	681a      	ldr	r2, [r3, #0]
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	330c      	adds	r3, #12
 8019a5a:	681b      	ldr	r3, [r3, #0]
 8019a5c:	429a      	cmp	r2, r3
 8019a5e:	d101      	bne.n	8019a64 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019a60:	68fb      	ldr	r3, [r7, #12]
 8019a62:	e028      	b.n	8019ab6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019a64:	68fb      	ldr	r3, [r7, #12]
 8019a66:	681b      	ldr	r3, [r3, #0]
 8019a68:	60fb      	str	r3, [r7, #12]
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d1c5      	bne.n	80199fc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019a70:	4b15      	ldr	r3, [pc, #84]	; (8019ac8 <ip4_route+0xdc>)
 8019a72:	681b      	ldr	r3, [r3, #0]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d01a      	beq.n	8019aae <ip4_route+0xc2>
 8019a78:	4b13      	ldr	r3, [pc, #76]	; (8019ac8 <ip4_route+0xdc>)
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a80:	f003 0301 	and.w	r3, r3, #1
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d012      	beq.n	8019aae <ip4_route+0xc2>
 8019a88:	4b0f      	ldr	r3, [pc, #60]	; (8019ac8 <ip4_route+0xdc>)
 8019a8a:	681b      	ldr	r3, [r3, #0]
 8019a8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019a90:	f003 0304 	and.w	r3, r3, #4
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00a      	beq.n	8019aae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019a98:	4b0b      	ldr	r3, [pc, #44]	; (8019ac8 <ip4_route+0xdc>)
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	3304      	adds	r3, #4
 8019a9e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019aa0:	2b00      	cmp	r3, #0
 8019aa2:	d004      	beq.n	8019aae <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	b2db      	uxtb	r3, r3
 8019aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8019aac:	d101      	bne.n	8019ab2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019aae:	2300      	movs	r3, #0
 8019ab0:	e001      	b.n	8019ab6 <ip4_route+0xca>
  }

  return netif_default;
 8019ab2:	4b05      	ldr	r3, [pc, #20]	; (8019ac8 <ip4_route+0xdc>)
 8019ab4:	681b      	ldr	r3, [r3, #0]
}
 8019ab6:	4618      	mov	r0, r3
 8019ab8:	3714      	adds	r7, #20
 8019aba:	46bd      	mov	sp, r7
 8019abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ac0:	4770      	bx	lr
 8019ac2:	bf00      	nop
 8019ac4:	2000d7ac 	.word	0x2000d7ac
 8019ac8:	2000d7b0 	.word	0x2000d7b0

08019acc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019ada:	f003 0301 	and.w	r3, r3, #1
 8019ade:	b2db      	uxtb	r3, r3
 8019ae0:	2b00      	cmp	r3, #0
 8019ae2:	d016      	beq.n	8019b12 <ip4_input_accept+0x46>
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	3304      	adds	r3, #4
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d011      	beq.n	8019b12 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019aee:	4b0b      	ldr	r3, [pc, #44]	; (8019b1c <ip4_input_accept+0x50>)
 8019af0:	695a      	ldr	r2, [r3, #20]
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	3304      	adds	r3, #4
 8019af6:	681b      	ldr	r3, [r3, #0]
 8019af8:	429a      	cmp	r2, r3
 8019afa:	d008      	beq.n	8019b0e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019afc:	4b07      	ldr	r3, [pc, #28]	; (8019b1c <ip4_input_accept+0x50>)
 8019afe:	695b      	ldr	r3, [r3, #20]
 8019b00:	6879      	ldr	r1, [r7, #4]
 8019b02:	4618      	mov	r0, r3
 8019b04:	f000 fa08 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8019b08:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d001      	beq.n	8019b12 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019b0e:	2301      	movs	r3, #1
 8019b10:	e000      	b.n	8019b14 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019b12:	2300      	movs	r3, #0
}
 8019b14:	4618      	mov	r0, r3
 8019b16:	3708      	adds	r7, #8
 8019b18:	46bd      	mov	sp, r7
 8019b1a:	bd80      	pop	{r7, pc}
 8019b1c:	2000a0a8 	.word	0x2000a0a8

08019b20 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019b20:	b580      	push	{r7, lr}
 8019b22:	b086      	sub	sp, #24
 8019b24:	af00      	add	r7, sp, #0
 8019b26:	6078      	str	r0, [r7, #4]
 8019b28:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	685b      	ldr	r3, [r3, #4]
 8019b2e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019b30:	697b      	ldr	r3, [r7, #20]
 8019b32:	781b      	ldrb	r3, [r3, #0]
 8019b34:	091b      	lsrs	r3, r3, #4
 8019b36:	b2db      	uxtb	r3, r3
 8019b38:	2b04      	cmp	r3, #4
 8019b3a:	d004      	beq.n	8019b46 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019b3c:	6878      	ldr	r0, [r7, #4]
 8019b3e:	f7f7 fdb5 	bl	80116ac <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019b42:	2300      	movs	r3, #0
 8019b44:	e107      	b.n	8019d56 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019b46:	697b      	ldr	r3, [r7, #20]
 8019b48:	781b      	ldrb	r3, [r3, #0]
 8019b4a:	f003 030f 	and.w	r3, r3, #15
 8019b4e:	b2db      	uxtb	r3, r3
 8019b50:	009b      	lsls	r3, r3, #2
 8019b52:	b2db      	uxtb	r3, r3
 8019b54:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019b56:	697b      	ldr	r3, [r7, #20]
 8019b58:	885b      	ldrh	r3, [r3, #2]
 8019b5a:	b29b      	uxth	r3, r3
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7f6 f9c7 	bl	800fef0 <lwip_htons>
 8019b62:	4603      	mov	r3, r0
 8019b64:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	891b      	ldrh	r3, [r3, #8]
 8019b6a:	89ba      	ldrh	r2, [r7, #12]
 8019b6c:	429a      	cmp	r2, r3
 8019b6e:	d204      	bcs.n	8019b7a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019b70:	89bb      	ldrh	r3, [r7, #12]
 8019b72:	4619      	mov	r1, r3
 8019b74:	6878      	ldr	r0, [r7, #4]
 8019b76:	f7f7 fbe1 	bl	801133c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	895b      	ldrh	r3, [r3, #10]
 8019b7e:	89fa      	ldrh	r2, [r7, #14]
 8019b80:	429a      	cmp	r2, r3
 8019b82:	d807      	bhi.n	8019b94 <ip4_input+0x74>
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	891b      	ldrh	r3, [r3, #8]
 8019b88:	89ba      	ldrh	r2, [r7, #12]
 8019b8a:	429a      	cmp	r2, r3
 8019b8c:	d802      	bhi.n	8019b94 <ip4_input+0x74>
 8019b8e:	89fb      	ldrh	r3, [r7, #14]
 8019b90:	2b13      	cmp	r3, #19
 8019b92:	d804      	bhi.n	8019b9e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019b94:	6878      	ldr	r0, [r7, #4]
 8019b96:	f7f7 fd89 	bl	80116ac <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	e0db      	b.n	8019d56 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019b9e:	697b      	ldr	r3, [r7, #20]
 8019ba0:	691b      	ldr	r3, [r3, #16]
 8019ba2:	4a6f      	ldr	r2, [pc, #444]	; (8019d60 <ip4_input+0x240>)
 8019ba4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019ba6:	697b      	ldr	r3, [r7, #20]
 8019ba8:	68db      	ldr	r3, [r3, #12]
 8019baa:	4a6d      	ldr	r2, [pc, #436]	; (8019d60 <ip4_input+0x240>)
 8019bac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019bae:	4b6c      	ldr	r3, [pc, #432]	; (8019d60 <ip4_input+0x240>)
 8019bb0:	695b      	ldr	r3, [r3, #20]
 8019bb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019bb6:	2be0      	cmp	r3, #224	; 0xe0
 8019bb8:	d112      	bne.n	8019be0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019bba:	683b      	ldr	r3, [r7, #0]
 8019bbc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019bc0:	f003 0301 	and.w	r3, r3, #1
 8019bc4:	b2db      	uxtb	r3, r3
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d007      	beq.n	8019bda <ip4_input+0xba>
 8019bca:	683b      	ldr	r3, [r7, #0]
 8019bcc:	3304      	adds	r3, #4
 8019bce:	681b      	ldr	r3, [r3, #0]
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d002      	beq.n	8019bda <ip4_input+0xba>
      netif = inp;
 8019bd4:	683b      	ldr	r3, [r7, #0]
 8019bd6:	613b      	str	r3, [r7, #16]
 8019bd8:	e02a      	b.n	8019c30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019bda:	2300      	movs	r3, #0
 8019bdc:	613b      	str	r3, [r7, #16]
 8019bde:	e027      	b.n	8019c30 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019be0:	6838      	ldr	r0, [r7, #0]
 8019be2:	f7ff ff73 	bl	8019acc <ip4_input_accept>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d002      	beq.n	8019bf2 <ip4_input+0xd2>
      netif = inp;
 8019bec:	683b      	ldr	r3, [r7, #0]
 8019bee:	613b      	str	r3, [r7, #16]
 8019bf0:	e01e      	b.n	8019c30 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019bf6:	4b5a      	ldr	r3, [pc, #360]	; (8019d60 <ip4_input+0x240>)
 8019bf8:	695b      	ldr	r3, [r3, #20]
 8019bfa:	b2db      	uxtb	r3, r3
 8019bfc:	2b7f      	cmp	r3, #127	; 0x7f
 8019bfe:	d017      	beq.n	8019c30 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019c00:	4b58      	ldr	r3, [pc, #352]	; (8019d64 <ip4_input+0x244>)
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	613b      	str	r3, [r7, #16]
 8019c06:	e00e      	b.n	8019c26 <ip4_input+0x106>
          if (netif == inp) {
 8019c08:	693a      	ldr	r2, [r7, #16]
 8019c0a:	683b      	ldr	r3, [r7, #0]
 8019c0c:	429a      	cmp	r2, r3
 8019c0e:	d006      	beq.n	8019c1e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019c10:	6938      	ldr	r0, [r7, #16]
 8019c12:	f7ff ff5b 	bl	8019acc <ip4_input_accept>
 8019c16:	4603      	mov	r3, r0
 8019c18:	2b00      	cmp	r3, #0
 8019c1a:	d108      	bne.n	8019c2e <ip4_input+0x10e>
 8019c1c:	e000      	b.n	8019c20 <ip4_input+0x100>
            continue;
 8019c1e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019c20:	693b      	ldr	r3, [r7, #16]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	613b      	str	r3, [r7, #16]
 8019c26:	693b      	ldr	r3, [r7, #16]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d1ed      	bne.n	8019c08 <ip4_input+0xe8>
 8019c2c:	e000      	b.n	8019c30 <ip4_input+0x110>
            break;
 8019c2e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019c30:	4b4b      	ldr	r3, [pc, #300]	; (8019d60 <ip4_input+0x240>)
 8019c32:	691b      	ldr	r3, [r3, #16]
 8019c34:	6839      	ldr	r1, [r7, #0]
 8019c36:	4618      	mov	r0, r3
 8019c38:	f000 f96e 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d105      	bne.n	8019c4e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019c42:	4b47      	ldr	r3, [pc, #284]	; (8019d60 <ip4_input+0x240>)
 8019c44:	691b      	ldr	r3, [r3, #16]
 8019c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019c4a:	2be0      	cmp	r3, #224	; 0xe0
 8019c4c:	d104      	bne.n	8019c58 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019c4e:	6878      	ldr	r0, [r7, #4]
 8019c50:	f7f7 fd2c 	bl	80116ac <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019c54:	2300      	movs	r3, #0
 8019c56:	e07e      	b.n	8019d56 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019c58:	693b      	ldr	r3, [r7, #16]
 8019c5a:	2b00      	cmp	r3, #0
 8019c5c:	d104      	bne.n	8019c68 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019c5e:	6878      	ldr	r0, [r7, #4]
 8019c60:	f7f7 fd24 	bl	80116ac <pbuf_free>
    return ERR_OK;
 8019c64:	2300      	movs	r3, #0
 8019c66:	e076      	b.n	8019d56 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019c68:	697b      	ldr	r3, [r7, #20]
 8019c6a:	88db      	ldrh	r3, [r3, #6]
 8019c6c:	b29b      	uxth	r3, r3
 8019c6e:	461a      	mov	r2, r3
 8019c70:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019c74:	4013      	ands	r3, r2
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d00b      	beq.n	8019c92 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019c7a:	6878      	ldr	r0, [r7, #4]
 8019c7c:	f000 fdd0 	bl	801a820 <ip4_reass>
 8019c80:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d101      	bne.n	8019c8c <ip4_input+0x16c>
      return ERR_OK;
 8019c88:	2300      	movs	r3, #0
 8019c8a:	e064      	b.n	8019d56 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	685b      	ldr	r3, [r3, #4]
 8019c90:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019c92:	4a33      	ldr	r2, [pc, #204]	; (8019d60 <ip4_input+0x240>)
 8019c94:	693b      	ldr	r3, [r7, #16]
 8019c96:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019c98:	4a31      	ldr	r2, [pc, #196]	; (8019d60 <ip4_input+0x240>)
 8019c9a:	683b      	ldr	r3, [r7, #0]
 8019c9c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019c9e:	4a30      	ldr	r2, [pc, #192]	; (8019d60 <ip4_input+0x240>)
 8019ca0:	697b      	ldr	r3, [r7, #20]
 8019ca2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019ca4:	697b      	ldr	r3, [r7, #20]
 8019ca6:	781b      	ldrb	r3, [r3, #0]
 8019ca8:	f003 030f 	and.w	r3, r3, #15
 8019cac:	b2db      	uxtb	r3, r3
 8019cae:	009b      	lsls	r3, r3, #2
 8019cb0:	b2db      	uxtb	r3, r3
 8019cb2:	b29a      	uxth	r2, r3
 8019cb4:	4b2a      	ldr	r3, [pc, #168]	; (8019d60 <ip4_input+0x240>)
 8019cb6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019cb8:	89fb      	ldrh	r3, [r7, #14]
 8019cba:	4619      	mov	r1, r3
 8019cbc:	6878      	ldr	r0, [r7, #4]
 8019cbe:	f7f7 fc3d 	bl	801153c <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019cc2:	697b      	ldr	r3, [r7, #20]
 8019cc4:	7a5b      	ldrb	r3, [r3, #9]
 8019cc6:	2b11      	cmp	r3, #17
 8019cc8:	d006      	beq.n	8019cd8 <ip4_input+0x1b8>
 8019cca:	2b11      	cmp	r3, #17
 8019ccc:	dc13      	bgt.n	8019cf6 <ip4_input+0x1d6>
 8019cce:	2b01      	cmp	r3, #1
 8019cd0:	d00c      	beq.n	8019cec <ip4_input+0x1cc>
 8019cd2:	2b06      	cmp	r3, #6
 8019cd4:	d005      	beq.n	8019ce2 <ip4_input+0x1c2>
 8019cd6:	e00e      	b.n	8019cf6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019cd8:	6839      	ldr	r1, [r7, #0]
 8019cda:	6878      	ldr	r0, [r7, #4]
 8019cdc:	f7fe f970 	bl	8017fc0 <udp_input>
        break;
 8019ce0:	e026      	b.n	8019d30 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019ce2:	6839      	ldr	r1, [r7, #0]
 8019ce4:	6878      	ldr	r0, [r7, #4]
 8019ce6:	f7f9 fd2d 	bl	8013744 <tcp_input>
        break;
 8019cea:	e021      	b.n	8019d30 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019cec:	6839      	ldr	r1, [r7, #0]
 8019cee:	6878      	ldr	r0, [r7, #4]
 8019cf0:	f7ff fcee 	bl	80196d0 <icmp_input>
        break;
 8019cf4:	e01c      	b.n	8019d30 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019cf6:	4b1a      	ldr	r3, [pc, #104]	; (8019d60 <ip4_input+0x240>)
 8019cf8:	695b      	ldr	r3, [r3, #20]
 8019cfa:	6939      	ldr	r1, [r7, #16]
 8019cfc:	4618      	mov	r0, r3
 8019cfe:	f000 f90b 	bl	8019f18 <ip4_addr_isbroadcast_u32>
 8019d02:	4603      	mov	r3, r0
 8019d04:	2b00      	cmp	r3, #0
 8019d06:	d10f      	bne.n	8019d28 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019d08:	4b15      	ldr	r3, [pc, #84]	; (8019d60 <ip4_input+0x240>)
 8019d0a:	695b      	ldr	r3, [r3, #20]
 8019d0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019d10:	2be0      	cmp	r3, #224	; 0xe0
 8019d12:	d009      	beq.n	8019d28 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019d14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019d18:	4619      	mov	r1, r3
 8019d1a:	6878      	ldr	r0, [r7, #4]
 8019d1c:	f7f7 fc81 	bl	8011622 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8019d20:	2102      	movs	r1, #2
 8019d22:	6878      	ldr	r0, [r7, #4]
 8019d24:	f7ff fdd8 	bl	80198d8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019d28:	6878      	ldr	r0, [r7, #4]
 8019d2a:	f7f7 fcbf 	bl	80116ac <pbuf_free>
        break;
 8019d2e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8019d30:	4b0b      	ldr	r3, [pc, #44]	; (8019d60 <ip4_input+0x240>)
 8019d32:	2200      	movs	r2, #0
 8019d34:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019d36:	4b0a      	ldr	r3, [pc, #40]	; (8019d60 <ip4_input+0x240>)
 8019d38:	2200      	movs	r2, #0
 8019d3a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019d3c:	4b08      	ldr	r3, [pc, #32]	; (8019d60 <ip4_input+0x240>)
 8019d3e:	2200      	movs	r2, #0
 8019d40:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8019d42:	4b07      	ldr	r3, [pc, #28]	; (8019d60 <ip4_input+0x240>)
 8019d44:	2200      	movs	r2, #0
 8019d46:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8019d48:	4b05      	ldr	r3, [pc, #20]	; (8019d60 <ip4_input+0x240>)
 8019d4a:	2200      	movs	r2, #0
 8019d4c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8019d4e:	4b04      	ldr	r3, [pc, #16]	; (8019d60 <ip4_input+0x240>)
 8019d50:	2200      	movs	r2, #0
 8019d52:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8019d54:	2300      	movs	r3, #0
}
 8019d56:	4618      	mov	r0, r3
 8019d58:	3718      	adds	r7, #24
 8019d5a:	46bd      	mov	sp, r7
 8019d5c:	bd80      	pop	{r7, pc}
 8019d5e:	bf00      	nop
 8019d60:	2000a0a8 	.word	0x2000a0a8
 8019d64:	2000d7ac 	.word	0x2000d7ac

08019d68 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8019d68:	b580      	push	{r7, lr}
 8019d6a:	b08a      	sub	sp, #40	; 0x28
 8019d6c:	af04      	add	r7, sp, #16
 8019d6e:	60f8      	str	r0, [r7, #12]
 8019d70:	60b9      	str	r1, [r7, #8]
 8019d72:	607a      	str	r2, [r7, #4]
 8019d74:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8019d76:	68bb      	ldr	r3, [r7, #8]
 8019d78:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	2b00      	cmp	r3, #0
 8019d7e:	d009      	beq.n	8019d94 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019d80:	68bb      	ldr	r3, [r7, #8]
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d003      	beq.n	8019d8e <ip4_output_if+0x26>
 8019d86:	68bb      	ldr	r3, [r7, #8]
 8019d88:	681b      	ldr	r3, [r3, #0]
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d102      	bne.n	8019d94 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d90:	3304      	adds	r3, #4
 8019d92:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019d94:	78fa      	ldrb	r2, [r7, #3]
 8019d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d98:	9302      	str	r3, [sp, #8]
 8019d9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d9e:	9301      	str	r3, [sp, #4]
 8019da0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019da4:	9300      	str	r3, [sp, #0]
 8019da6:	4613      	mov	r3, r2
 8019da8:	687a      	ldr	r2, [r7, #4]
 8019daa:	6979      	ldr	r1, [r7, #20]
 8019dac:	68f8      	ldr	r0, [r7, #12]
 8019dae:	f000 f805 	bl	8019dbc <ip4_output_if_src>
 8019db2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3718      	adds	r7, #24
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}

08019dbc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019dbc:	b580      	push	{r7, lr}
 8019dbe:	b088      	sub	sp, #32
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	607a      	str	r2, [r7, #4]
 8019dc8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019dca:	68fb      	ldr	r3, [r7, #12]
 8019dcc:	7b9b      	ldrb	r3, [r3, #14]
 8019dce:	2b01      	cmp	r3, #1
 8019dd0:	d006      	beq.n	8019de0 <ip4_output_if_src+0x24>
 8019dd2:	4b4b      	ldr	r3, [pc, #300]	; (8019f00 <ip4_output_if_src+0x144>)
 8019dd4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019dd8:	494a      	ldr	r1, [pc, #296]	; (8019f04 <ip4_output_if_src+0x148>)
 8019dda:	484b      	ldr	r0, [pc, #300]	; (8019f08 <ip4_output_if_src+0x14c>)
 8019ddc:	f001 ff96 	bl	801bd0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d060      	beq.n	8019ea8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019de6:	2314      	movs	r3, #20
 8019de8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019dea:	2114      	movs	r1, #20
 8019dec:	68f8      	ldr	r0, [r7, #12]
 8019dee:	f7f7 fb95 	bl	801151c <pbuf_add_header>
 8019df2:	4603      	mov	r3, r0
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d002      	beq.n	8019dfe <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019df8:	f06f 0301 	mvn.w	r3, #1
 8019dfc:	e07c      	b.n	8019ef8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019dfe:	68fb      	ldr	r3, [r7, #12]
 8019e00:	685b      	ldr	r3, [r3, #4]
 8019e02:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	895b      	ldrh	r3, [r3, #10]
 8019e08:	2b13      	cmp	r3, #19
 8019e0a:	d806      	bhi.n	8019e1a <ip4_output_if_src+0x5e>
 8019e0c:	4b3c      	ldr	r3, [pc, #240]	; (8019f00 <ip4_output_if_src+0x144>)
 8019e0e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019e12:	493e      	ldr	r1, [pc, #248]	; (8019f0c <ip4_output_if_src+0x150>)
 8019e14:	483c      	ldr	r0, [pc, #240]	; (8019f08 <ip4_output_if_src+0x14c>)
 8019e16:	f001 ff79 	bl	801bd0c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019e1a:	69fb      	ldr	r3, [r7, #28]
 8019e1c:	78fa      	ldrb	r2, [r7, #3]
 8019e1e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8019e20:	69fb      	ldr	r3, [r7, #28]
 8019e22:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019e26:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681a      	ldr	r2, [r3, #0]
 8019e2c:	69fb      	ldr	r3, [r7, #28]
 8019e2e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8019e30:	8b7b      	ldrh	r3, [r7, #26]
 8019e32:	089b      	lsrs	r3, r3, #2
 8019e34:	b29b      	uxth	r3, r3
 8019e36:	b2db      	uxtb	r3, r3
 8019e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019e3c:	b2da      	uxtb	r2, r3
 8019e3e:	69fb      	ldr	r3, [r7, #28]
 8019e40:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8019e42:	69fb      	ldr	r3, [r7, #28]
 8019e44:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8019e48:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8019e4a:	68fb      	ldr	r3, [r7, #12]
 8019e4c:	891b      	ldrh	r3, [r3, #8]
 8019e4e:	4618      	mov	r0, r3
 8019e50:	f7f6 f84e 	bl	800fef0 <lwip_htons>
 8019e54:	4603      	mov	r3, r0
 8019e56:	461a      	mov	r2, r3
 8019e58:	69fb      	ldr	r3, [r7, #28]
 8019e5a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	2200      	movs	r2, #0
 8019e60:	719a      	strb	r2, [r3, #6]
 8019e62:	2200      	movs	r2, #0
 8019e64:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8019e66:	4b2a      	ldr	r3, [pc, #168]	; (8019f10 <ip4_output_if_src+0x154>)
 8019e68:	881b      	ldrh	r3, [r3, #0]
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7f6 f840 	bl	800fef0 <lwip_htons>
 8019e70:	4603      	mov	r3, r0
 8019e72:	461a      	mov	r2, r3
 8019e74:	69fb      	ldr	r3, [r7, #28]
 8019e76:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8019e78:	4b25      	ldr	r3, [pc, #148]	; (8019f10 <ip4_output_if_src+0x154>)
 8019e7a:	881b      	ldrh	r3, [r3, #0]
 8019e7c:	3301      	adds	r3, #1
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	4b23      	ldr	r3, [pc, #140]	; (8019f10 <ip4_output_if_src+0x154>)
 8019e82:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	2b00      	cmp	r3, #0
 8019e88:	d104      	bne.n	8019e94 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8019e8a:	4b22      	ldr	r3, [pc, #136]	; (8019f14 <ip4_output_if_src+0x158>)
 8019e8c:	681a      	ldr	r2, [r3, #0]
 8019e8e:	69fb      	ldr	r3, [r7, #28]
 8019e90:	60da      	str	r2, [r3, #12]
 8019e92:	e003      	b.n	8019e9c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019e94:	68bb      	ldr	r3, [r7, #8]
 8019e96:	681a      	ldr	r2, [r3, #0]
 8019e98:	69fb      	ldr	r3, [r7, #28]
 8019e9a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019e9c:	69fb      	ldr	r3, [r7, #28]
 8019e9e:	2200      	movs	r2, #0
 8019ea0:	729a      	strb	r2, [r3, #10]
 8019ea2:	2200      	movs	r2, #0
 8019ea4:	72da      	strb	r2, [r3, #11]
 8019ea6:	e00f      	b.n	8019ec8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019ea8:	68fb      	ldr	r3, [r7, #12]
 8019eaa:	895b      	ldrh	r3, [r3, #10]
 8019eac:	2b13      	cmp	r3, #19
 8019eae:	d802      	bhi.n	8019eb6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019eb0:	f06f 0301 	mvn.w	r3, #1
 8019eb4:	e020      	b.n	8019ef8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	685b      	ldr	r3, [r3, #4]
 8019eba:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019ebc:	69fb      	ldr	r3, [r7, #28]
 8019ebe:	691b      	ldr	r3, [r3, #16]
 8019ec0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019ec2:	f107 0314 	add.w	r3, r7, #20
 8019ec6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d00c      	beq.n	8019eea <ip4_output_if_src+0x12e>
 8019ed0:	68fb      	ldr	r3, [r7, #12]
 8019ed2:	891a      	ldrh	r2, [r3, #8]
 8019ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019ed8:	429a      	cmp	r2, r3
 8019eda:	d906      	bls.n	8019eea <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019edc:	687a      	ldr	r2, [r7, #4]
 8019ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019ee0:	68f8      	ldr	r0, [r7, #12]
 8019ee2:	f000 fe8b 	bl	801abfc <ip4_frag>
 8019ee6:	4603      	mov	r3, r0
 8019ee8:	e006      	b.n	8019ef8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019eec:	695b      	ldr	r3, [r3, #20]
 8019eee:	687a      	ldr	r2, [r7, #4]
 8019ef0:	68f9      	ldr	r1, [r7, #12]
 8019ef2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019ef4:	4798      	blx	r3
 8019ef6:	4603      	mov	r3, r0
}
 8019ef8:	4618      	mov	r0, r3
 8019efa:	3720      	adds	r7, #32
 8019efc:	46bd      	mov	sp, r7
 8019efe:	bd80      	pop	{r7, pc}
 8019f00:	08021820 	.word	0x08021820
 8019f04:	08021854 	.word	0x08021854
 8019f08:	08021860 	.word	0x08021860
 8019f0c:	08021888 	.word	0x08021888
 8019f10:	20004926 	.word	0x20004926
 8019f14:	08021d5c 	.word	0x08021d5c

08019f18 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019f18:	b480      	push	{r7}
 8019f1a:	b085      	sub	sp, #20
 8019f1c:	af00      	add	r7, sp, #0
 8019f1e:	6078      	str	r0, [r7, #4]
 8019f20:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019f2c:	d002      	beq.n	8019f34 <ip4_addr_isbroadcast_u32+0x1c>
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d101      	bne.n	8019f38 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019f34:	2301      	movs	r3, #1
 8019f36:	e02a      	b.n	8019f8e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019f38:	683b      	ldr	r3, [r7, #0]
 8019f3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019f3e:	f003 0302 	and.w	r3, r3, #2
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d101      	bne.n	8019f4a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8019f46:	2300      	movs	r3, #0
 8019f48:	e021      	b.n	8019f8e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019f4a:	683b      	ldr	r3, [r7, #0]
 8019f4c:	3304      	adds	r3, #4
 8019f4e:	681b      	ldr	r3, [r3, #0]
 8019f50:	687a      	ldr	r2, [r7, #4]
 8019f52:	429a      	cmp	r2, r3
 8019f54:	d101      	bne.n	8019f5a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8019f56:	2300      	movs	r3, #0
 8019f58:	e019      	b.n	8019f8e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019f5a:	68fa      	ldr	r2, [r7, #12]
 8019f5c:	683b      	ldr	r3, [r7, #0]
 8019f5e:	3304      	adds	r3, #4
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	405a      	eors	r2, r3
 8019f64:	683b      	ldr	r3, [r7, #0]
 8019f66:	3308      	adds	r3, #8
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	4013      	ands	r3, r2
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d10d      	bne.n	8019f8c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019f70:	683b      	ldr	r3, [r7, #0]
 8019f72:	3308      	adds	r3, #8
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	43da      	mvns	r2, r3
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019f7c:	683b      	ldr	r3, [r7, #0]
 8019f7e:	3308      	adds	r3, #8
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019f84:	429a      	cmp	r2, r3
 8019f86:	d101      	bne.n	8019f8c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8019f88:	2301      	movs	r3, #1
 8019f8a:	e000      	b.n	8019f8e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019f8c:	2300      	movs	r3, #0
  }
}
 8019f8e:	4618      	mov	r0, r3
 8019f90:	3714      	adds	r7, #20
 8019f92:	46bd      	mov	sp, r7
 8019f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f98:	4770      	bx	lr

08019f9a <ipaddr_addr>:
 * @param cp IP address in ascii representation (e.g. "127.0.0.1")
 * @return ip address in network order
 */
u32_t
ipaddr_addr(const char *cp)
{
 8019f9a:	b580      	push	{r7, lr}
 8019f9c:	b084      	sub	sp, #16
 8019f9e:	af00      	add	r7, sp, #0
 8019fa0:	6078      	str	r0, [r7, #4]
  ip4_addr_t val;

  if (ip4addr_aton(cp, &val)) {
 8019fa2:	f107 030c 	add.w	r3, r7, #12
 8019fa6:	4619      	mov	r1, r3
 8019fa8:	6878      	ldr	r0, [r7, #4]
 8019faa:	f000 f80b 	bl	8019fc4 <ip4addr_aton>
 8019fae:	4603      	mov	r3, r0
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d001      	beq.n	8019fb8 <ipaddr_addr+0x1e>
    return ip4_addr_get_u32(&val);
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	e001      	b.n	8019fbc <ipaddr_addr+0x22>
  }
  return (IPADDR_NONE);
 8019fb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	3710      	adds	r7, #16
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}

08019fc4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8019fc4:	b580      	push	{r7, lr}
 8019fc6:	b08a      	sub	sp, #40	; 0x28
 8019fc8:	af00      	add	r7, sp, #0
 8019fca:	6078      	str	r0, [r7, #4]
 8019fcc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8019fce:	f107 030c 	add.w	r3, r7, #12
 8019fd2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	781b      	ldrb	r3, [r3, #0]
 8019fd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8019fdc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019fe0:	3301      	adds	r3, #1
 8019fe2:	4a89      	ldr	r2, [pc, #548]	; (801a208 <ip4addr_aton+0x244>)
 8019fe4:	4413      	add	r3, r2
 8019fe6:	781b      	ldrb	r3, [r3, #0]
 8019fe8:	f003 0304 	and.w	r3, r3, #4
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d101      	bne.n	8019ff4 <ip4addr_aton+0x30>
      return 0;
 8019ff0:	2300      	movs	r3, #0
 8019ff2:	e105      	b.n	801a200 <ip4addr_aton+0x23c>
    }
    val = 0;
 8019ff4:	2300      	movs	r3, #0
 8019ff6:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8019ff8:	230a      	movs	r3, #10
 8019ffa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8019ffe:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a002:	2b30      	cmp	r3, #48	; 0x30
 801a004:	d11c      	bne.n	801a040 <ip4addr_aton+0x7c>
      c = *++cp;
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	3301      	adds	r3, #1
 801a00a:	607b      	str	r3, [r7, #4]
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	781b      	ldrb	r3, [r3, #0]
 801a010:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 801a014:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a018:	2b78      	cmp	r3, #120	; 0x78
 801a01a:	d003      	beq.n	801a024 <ip4addr_aton+0x60>
 801a01c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a020:	2b58      	cmp	r3, #88	; 0x58
 801a022:	d10a      	bne.n	801a03a <ip4addr_aton+0x76>
        base = 16;
 801a024:	2310      	movs	r3, #16
 801a026:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	3301      	adds	r3, #1
 801a02e:	607b      	str	r3, [r7, #4]
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	781b      	ldrb	r3, [r3, #0]
 801a034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a038:	e002      	b.n	801a040 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801a03a:	2308      	movs	r3, #8
 801a03c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801a040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a044:	3301      	adds	r3, #1
 801a046:	4a70      	ldr	r2, [pc, #448]	; (801a208 <ip4addr_aton+0x244>)
 801a048:	4413      	add	r3, r2
 801a04a:	781b      	ldrb	r3, [r3, #0]
 801a04c:	f003 0304 	and.w	r3, r3, #4
 801a050:	2b00      	cmp	r3, #0
 801a052:	d011      	beq.n	801a078 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801a054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a05a:	fb02 f203 	mul.w	r2, r2, r3
 801a05e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a062:	4413      	add	r3, r2
 801a064:	3b30      	subs	r3, #48	; 0x30
 801a066:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	3301      	adds	r3, #1
 801a06c:	607b      	str	r3, [r7, #4]
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	781b      	ldrb	r3, [r3, #0]
 801a072:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 801a076:	e7e3      	b.n	801a040 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801a078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a07c:	2b10      	cmp	r3, #16
 801a07e:	d127      	bne.n	801a0d0 <ip4addr_aton+0x10c>
 801a080:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a084:	3301      	adds	r3, #1
 801a086:	4a60      	ldr	r2, [pc, #384]	; (801a208 <ip4addr_aton+0x244>)
 801a088:	4413      	add	r3, r2
 801a08a:	781b      	ldrb	r3, [r3, #0]
 801a08c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801a090:	2b00      	cmp	r3, #0
 801a092:	d01d      	beq.n	801a0d0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801a094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a096:	011b      	lsls	r3, r3, #4
 801a098:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a09c:	f102 010a 	add.w	r1, r2, #10
 801a0a0:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 801a0a4:	3201      	adds	r2, #1
 801a0a6:	4858      	ldr	r0, [pc, #352]	; (801a208 <ip4addr_aton+0x244>)
 801a0a8:	4402      	add	r2, r0
 801a0aa:	7812      	ldrb	r2, [r2, #0]
 801a0ac:	f002 0203 	and.w	r2, r2, #3
 801a0b0:	2a02      	cmp	r2, #2
 801a0b2:	d101      	bne.n	801a0b8 <ip4addr_aton+0xf4>
 801a0b4:	2261      	movs	r2, #97	; 0x61
 801a0b6:	e000      	b.n	801a0ba <ip4addr_aton+0xf6>
 801a0b8:	2241      	movs	r2, #65	; 0x41
 801a0ba:	1a8a      	subs	r2, r1, r2
 801a0bc:	4313      	orrs	r3, r2
 801a0be:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	3301      	adds	r3, #1
 801a0c4:	607b      	str	r3, [r7, #4]
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	781b      	ldrb	r3, [r3, #0]
 801a0ca:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 801a0ce:	e7b7      	b.n	801a040 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801a0d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a0d4:	2b2e      	cmp	r3, #46	; 0x2e
 801a0d6:	d114      	bne.n	801a102 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801a0d8:	f107 030c 	add.w	r3, r7, #12
 801a0dc:	330c      	adds	r3, #12
 801a0de:	69fa      	ldr	r2, [r7, #28]
 801a0e0:	429a      	cmp	r2, r3
 801a0e2:	d301      	bcc.n	801a0e8 <ip4addr_aton+0x124>
        return 0;
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	e08b      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801a0e8:	69fb      	ldr	r3, [r7, #28]
 801a0ea:	1d1a      	adds	r2, r3, #4
 801a0ec:	61fa      	str	r2, [r7, #28]
 801a0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a0f0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	3301      	adds	r3, #1
 801a0f6:	607b      	str	r3, [r7, #4]
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	781b      	ldrb	r3, [r3, #0]
 801a0fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 801a100:	e76c      	b.n	8019fdc <ip4addr_aton+0x18>
    } else {
      break;
 801a102:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801a104:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a108:	2b00      	cmp	r3, #0
 801a10a:	d00b      	beq.n	801a124 <ip4addr_aton+0x160>
 801a10c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801a110:	3301      	adds	r3, #1
 801a112:	4a3d      	ldr	r2, [pc, #244]	; (801a208 <ip4addr_aton+0x244>)
 801a114:	4413      	add	r3, r2
 801a116:	781b      	ldrb	r3, [r3, #0]
 801a118:	f003 0308 	and.w	r3, r3, #8
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d101      	bne.n	801a124 <ip4addr_aton+0x160>
    return 0;
 801a120:	2300      	movs	r3, #0
 801a122:	e06d      	b.n	801a200 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801a124:	f107 030c 	add.w	r3, r7, #12
 801a128:	69fa      	ldr	r2, [r7, #28]
 801a12a:	1ad3      	subs	r3, r2, r3
 801a12c:	109b      	asrs	r3, r3, #2
 801a12e:	3301      	adds	r3, #1
 801a130:	2b04      	cmp	r3, #4
 801a132:	d853      	bhi.n	801a1dc <ip4addr_aton+0x218>
 801a134:	a201      	add	r2, pc, #4	; (adr r2, 801a13c <ip4addr_aton+0x178>)
 801a136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a13a:	bf00      	nop
 801a13c:	0801a151 	.word	0x0801a151
 801a140:	0801a1eb 	.word	0x0801a1eb
 801a144:	0801a155 	.word	0x0801a155
 801a148:	0801a177 	.word	0x0801a177
 801a14c:	0801a1a5 	.word	0x0801a1a5

    case 0:
      return 0;       /* initial nondigit */
 801a150:	2300      	movs	r3, #0
 801a152:	e055      	b.n	801a200 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801a15a:	d301      	bcc.n	801a160 <ip4addr_aton+0x19c>
        return 0;
 801a15c:	2300      	movs	r3, #0
 801a15e:	e04f      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	2bff      	cmp	r3, #255	; 0xff
 801a164:	d901      	bls.n	801a16a <ip4addr_aton+0x1a6>
        return 0;
 801a166:	2300      	movs	r3, #0
 801a168:	e04a      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	061b      	lsls	r3, r3, #24
 801a16e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a170:	4313      	orrs	r3, r2
 801a172:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a174:	e03a      	b.n	801a1ec <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801a176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a17c:	d301      	bcc.n	801a182 <ip4addr_aton+0x1be>
        return 0;
 801a17e:	2300      	movs	r3, #0
 801a180:	e03e      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	2bff      	cmp	r3, #255	; 0xff
 801a186:	d802      	bhi.n	801a18e <ip4addr_aton+0x1ca>
 801a188:	693b      	ldr	r3, [r7, #16]
 801a18a:	2bff      	cmp	r3, #255	; 0xff
 801a18c:	d901      	bls.n	801a192 <ip4addr_aton+0x1ce>
        return 0;
 801a18e:	2300      	movs	r3, #0
 801a190:	e036      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	061a      	lsls	r2, r3, #24
 801a196:	693b      	ldr	r3, [r7, #16]
 801a198:	041b      	lsls	r3, r3, #16
 801a19a:	4313      	orrs	r3, r2
 801a19c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a19e:	4313      	orrs	r3, r2
 801a1a0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a1a2:	e023      	b.n	801a1ec <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801a1a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a1a6:	2bff      	cmp	r3, #255	; 0xff
 801a1a8:	d901      	bls.n	801a1ae <ip4addr_aton+0x1ea>
        return 0;
 801a1aa:	2300      	movs	r3, #0
 801a1ac:	e028      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	2bff      	cmp	r3, #255	; 0xff
 801a1b2:	d805      	bhi.n	801a1c0 <ip4addr_aton+0x1fc>
 801a1b4:	693b      	ldr	r3, [r7, #16]
 801a1b6:	2bff      	cmp	r3, #255	; 0xff
 801a1b8:	d802      	bhi.n	801a1c0 <ip4addr_aton+0x1fc>
 801a1ba:	697b      	ldr	r3, [r7, #20]
 801a1bc:	2bff      	cmp	r3, #255	; 0xff
 801a1be:	d901      	bls.n	801a1c4 <ip4addr_aton+0x200>
        return 0;
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	e01d      	b.n	801a200 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	061a      	lsls	r2, r3, #24
 801a1c8:	693b      	ldr	r3, [r7, #16]
 801a1ca:	041b      	lsls	r3, r3, #16
 801a1cc:	431a      	orrs	r2, r3
 801a1ce:	697b      	ldr	r3, [r7, #20]
 801a1d0:	021b      	lsls	r3, r3, #8
 801a1d2:	4313      	orrs	r3, r2
 801a1d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a1d6:	4313      	orrs	r3, r2
 801a1d8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801a1da:	e007      	b.n	801a1ec <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801a1dc:	4b0b      	ldr	r3, [pc, #44]	; (801a20c <ip4addr_aton+0x248>)
 801a1de:	22f9      	movs	r2, #249	; 0xf9
 801a1e0:	490b      	ldr	r1, [pc, #44]	; (801a210 <ip4addr_aton+0x24c>)
 801a1e2:	480c      	ldr	r0, [pc, #48]	; (801a214 <ip4addr_aton+0x250>)
 801a1e4:	f001 fd92 	bl	801bd0c <iprintf>
      break;
 801a1e8:	e000      	b.n	801a1ec <ip4addr_aton+0x228>
      break;
 801a1ea:	bf00      	nop
  }
  if (addr) {
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d005      	beq.n	801a1fe <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801a1f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a1f4:	f7f5 fe91 	bl	800ff1a <lwip_htonl>
 801a1f8:	4602      	mov	r2, r0
 801a1fa:	683b      	ldr	r3, [r7, #0]
 801a1fc:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801a1fe:	2301      	movs	r3, #1
}
 801a200:	4618      	mov	r0, r3
 801a202:	3728      	adds	r7, #40	; 0x28
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	08021d78 	.word	0x08021d78
 801a20c:	080218b8 	.word	0x080218b8
 801a210:	080218f4 	.word	0x080218f4
 801a214:	08021900 	.word	0x08021900

0801a218 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a218:	b580      	push	{r7, lr}
 801a21a:	b084      	sub	sp, #16
 801a21c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a21e:	2300      	movs	r3, #0
 801a220:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a222:	4b12      	ldr	r3, [pc, #72]	; (801a26c <ip_reass_tmr+0x54>)
 801a224:	681b      	ldr	r3, [r3, #0]
 801a226:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a228:	e018      	b.n	801a25c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	7fdb      	ldrb	r3, [r3, #31]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	d00b      	beq.n	801a24a <ip_reass_tmr+0x32>
      r->timer--;
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	7fdb      	ldrb	r3, [r3, #31]
 801a236:	3b01      	subs	r3, #1
 801a238:	b2da      	uxtb	r2, r3
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	60fb      	str	r3, [r7, #12]
 801a248:	e008      	b.n	801a25c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a24a:	68fb      	ldr	r3, [r7, #12]
 801a24c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a254:	68b9      	ldr	r1, [r7, #8]
 801a256:	6878      	ldr	r0, [r7, #4]
 801a258:	f000 f80a 	bl	801a270 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a25c:	68fb      	ldr	r3, [r7, #12]
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d1e3      	bne.n	801a22a <ip_reass_tmr+0x12>
    }
  }
}
 801a262:	bf00      	nop
 801a264:	bf00      	nop
 801a266:	3710      	adds	r7, #16
 801a268:	46bd      	mov	sp, r7
 801a26a:	bd80      	pop	{r7, pc}
 801a26c:	20004928 	.word	0x20004928

0801a270 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b088      	sub	sp, #32
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
 801a278:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a27a:	2300      	movs	r3, #0
 801a27c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a27e:	683a      	ldr	r2, [r7, #0]
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	429a      	cmp	r2, r3
 801a284:	d105      	bne.n	801a292 <ip_reass_free_complete_datagram+0x22>
 801a286:	4b45      	ldr	r3, [pc, #276]	; (801a39c <ip_reass_free_complete_datagram+0x12c>)
 801a288:	22ab      	movs	r2, #171	; 0xab
 801a28a:	4945      	ldr	r1, [pc, #276]	; (801a3a0 <ip_reass_free_complete_datagram+0x130>)
 801a28c:	4845      	ldr	r0, [pc, #276]	; (801a3a4 <ip_reass_free_complete_datagram+0x134>)
 801a28e:	f001 fd3d 	bl	801bd0c <iprintf>
  if (prev != NULL) {
 801a292:	683b      	ldr	r3, [r7, #0]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d00a      	beq.n	801a2ae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	687a      	ldr	r2, [r7, #4]
 801a29e:	429a      	cmp	r2, r3
 801a2a0:	d005      	beq.n	801a2ae <ip_reass_free_complete_datagram+0x3e>
 801a2a2:	4b3e      	ldr	r3, [pc, #248]	; (801a39c <ip_reass_free_complete_datagram+0x12c>)
 801a2a4:	22ad      	movs	r2, #173	; 0xad
 801a2a6:	4940      	ldr	r1, [pc, #256]	; (801a3a8 <ip_reass_free_complete_datagram+0x138>)
 801a2a8:	483e      	ldr	r0, [pc, #248]	; (801a3a4 <ip_reass_free_complete_datagram+0x134>)
 801a2aa:	f001 fd2f 	bl	801bd0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	685b      	ldr	r3, [r3, #4]
 801a2b2:	685b      	ldr	r3, [r3, #4]
 801a2b4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a2b6:	697b      	ldr	r3, [r7, #20]
 801a2b8:	889b      	ldrh	r3, [r3, #4]
 801a2ba:	b29b      	uxth	r3, r3
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d12a      	bne.n	801a316 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	685b      	ldr	r3, [r3, #4]
 801a2c4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a2c6:	697b      	ldr	r3, [r7, #20]
 801a2c8:	681a      	ldr	r2, [r3, #0]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a2ce:	69bb      	ldr	r3, [r7, #24]
 801a2d0:	6858      	ldr	r0, [r3, #4]
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	3308      	adds	r3, #8
 801a2d6:	2214      	movs	r2, #20
 801a2d8:	4619      	mov	r1, r3
 801a2da:	f001 f8bf 	bl	801b45c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a2de:	2101      	movs	r1, #1
 801a2e0:	69b8      	ldr	r0, [r7, #24]
 801a2e2:	f7ff fb09 	bl	80198f8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a2e6:	69b8      	ldr	r0, [r7, #24]
 801a2e8:	f7f7 fa6e 	bl	80117c8 <pbuf_clen>
 801a2ec:	4603      	mov	r3, r0
 801a2ee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a2f0:	8bfa      	ldrh	r2, [r7, #30]
 801a2f2:	8a7b      	ldrh	r3, [r7, #18]
 801a2f4:	4413      	add	r3, r2
 801a2f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a2fa:	db05      	blt.n	801a308 <ip_reass_free_complete_datagram+0x98>
 801a2fc:	4b27      	ldr	r3, [pc, #156]	; (801a39c <ip_reass_free_complete_datagram+0x12c>)
 801a2fe:	22bc      	movs	r2, #188	; 0xbc
 801a300:	492a      	ldr	r1, [pc, #168]	; (801a3ac <ip_reass_free_complete_datagram+0x13c>)
 801a302:	4828      	ldr	r0, [pc, #160]	; (801a3a4 <ip_reass_free_complete_datagram+0x134>)
 801a304:	f001 fd02 	bl	801bd0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a308:	8bfa      	ldrh	r2, [r7, #30]
 801a30a:	8a7b      	ldrh	r3, [r7, #18]
 801a30c:	4413      	add	r3, r2
 801a30e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a310:	69b8      	ldr	r0, [r7, #24]
 801a312:	f7f7 f9cb 	bl	80116ac <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	685b      	ldr	r3, [r3, #4]
 801a31a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a31c:	e01f      	b.n	801a35e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a31e:	69bb      	ldr	r3, [r7, #24]
 801a320:	685b      	ldr	r3, [r3, #4]
 801a322:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a324:	69bb      	ldr	r3, [r7, #24]
 801a326:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a328:	697b      	ldr	r3, [r7, #20]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a32e:	68f8      	ldr	r0, [r7, #12]
 801a330:	f7f7 fa4a 	bl	80117c8 <pbuf_clen>
 801a334:	4603      	mov	r3, r0
 801a336:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a338:	8bfa      	ldrh	r2, [r7, #30]
 801a33a:	8a7b      	ldrh	r3, [r7, #18]
 801a33c:	4413      	add	r3, r2
 801a33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a342:	db05      	blt.n	801a350 <ip_reass_free_complete_datagram+0xe0>
 801a344:	4b15      	ldr	r3, [pc, #84]	; (801a39c <ip_reass_free_complete_datagram+0x12c>)
 801a346:	22cc      	movs	r2, #204	; 0xcc
 801a348:	4918      	ldr	r1, [pc, #96]	; (801a3ac <ip_reass_free_complete_datagram+0x13c>)
 801a34a:	4816      	ldr	r0, [pc, #88]	; (801a3a4 <ip_reass_free_complete_datagram+0x134>)
 801a34c:	f001 fcde 	bl	801bd0c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a350:	8bfa      	ldrh	r2, [r7, #30]
 801a352:	8a7b      	ldrh	r3, [r7, #18]
 801a354:	4413      	add	r3, r2
 801a356:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a358:	68f8      	ldr	r0, [r7, #12]
 801a35a:	f7f7 f9a7 	bl	80116ac <pbuf_free>
  while (p != NULL) {
 801a35e:	69bb      	ldr	r3, [r7, #24]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d1dc      	bne.n	801a31e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a364:	6839      	ldr	r1, [r7, #0]
 801a366:	6878      	ldr	r0, [r7, #4]
 801a368:	f000 f8c2 	bl	801a4f0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a36c:	4b10      	ldr	r3, [pc, #64]	; (801a3b0 <ip_reass_free_complete_datagram+0x140>)
 801a36e:	881b      	ldrh	r3, [r3, #0]
 801a370:	8bfa      	ldrh	r2, [r7, #30]
 801a372:	429a      	cmp	r2, r3
 801a374:	d905      	bls.n	801a382 <ip_reass_free_complete_datagram+0x112>
 801a376:	4b09      	ldr	r3, [pc, #36]	; (801a39c <ip_reass_free_complete_datagram+0x12c>)
 801a378:	22d2      	movs	r2, #210	; 0xd2
 801a37a:	490e      	ldr	r1, [pc, #56]	; (801a3b4 <ip_reass_free_complete_datagram+0x144>)
 801a37c:	4809      	ldr	r0, [pc, #36]	; (801a3a4 <ip_reass_free_complete_datagram+0x134>)
 801a37e:	f001 fcc5 	bl	801bd0c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a382:	4b0b      	ldr	r3, [pc, #44]	; (801a3b0 <ip_reass_free_complete_datagram+0x140>)
 801a384:	881a      	ldrh	r2, [r3, #0]
 801a386:	8bfb      	ldrh	r3, [r7, #30]
 801a388:	1ad3      	subs	r3, r2, r3
 801a38a:	b29a      	uxth	r2, r3
 801a38c:	4b08      	ldr	r3, [pc, #32]	; (801a3b0 <ip_reass_free_complete_datagram+0x140>)
 801a38e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a390:	8bfb      	ldrh	r3, [r7, #30]
}
 801a392:	4618      	mov	r0, r3
 801a394:	3720      	adds	r7, #32
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	08021928 	.word	0x08021928
 801a3a0:	08021964 	.word	0x08021964
 801a3a4:	08021970 	.word	0x08021970
 801a3a8:	08021998 	.word	0x08021998
 801a3ac:	080219ac 	.word	0x080219ac
 801a3b0:	2000492c 	.word	0x2000492c
 801a3b4:	080219cc 	.word	0x080219cc

0801a3b8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b08a      	sub	sp, #40	; 0x28
 801a3bc:	af00      	add	r7, sp, #0
 801a3be:	6078      	str	r0, [r7, #4]
 801a3c0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a3c2:	2300      	movs	r3, #0
 801a3c4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a3c6:	2300      	movs	r3, #0
 801a3c8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a3ca:	2300      	movs	r3, #0
 801a3cc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a3ce:	2300      	movs	r3, #0
 801a3d0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a3d6:	4b28      	ldr	r3, [pc, #160]	; (801a478 <ip_reass_remove_oldest_datagram+0xc0>)
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a3dc:	e030      	b.n	801a440 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3e0:	695a      	ldr	r2, [r3, #20]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	68db      	ldr	r3, [r3, #12]
 801a3e6:	429a      	cmp	r2, r3
 801a3e8:	d10c      	bne.n	801a404 <ip_reass_remove_oldest_datagram+0x4c>
 801a3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ec:	699a      	ldr	r2, [r3, #24]
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	691b      	ldr	r3, [r3, #16]
 801a3f2:	429a      	cmp	r2, r3
 801a3f4:	d106      	bne.n	801a404 <ip_reass_remove_oldest_datagram+0x4c>
 801a3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3f8:	899a      	ldrh	r2, [r3, #12]
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	889b      	ldrh	r3, [r3, #4]
 801a3fe:	b29b      	uxth	r3, r3
 801a400:	429a      	cmp	r2, r3
 801a402:	d014      	beq.n	801a42e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a404:	693b      	ldr	r3, [r7, #16]
 801a406:	3301      	adds	r3, #1
 801a408:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a40a:	6a3b      	ldr	r3, [r7, #32]
 801a40c:	2b00      	cmp	r3, #0
 801a40e:	d104      	bne.n	801a41a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a412:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a414:	69fb      	ldr	r3, [r7, #28]
 801a416:	61bb      	str	r3, [r7, #24]
 801a418:	e009      	b.n	801a42e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a41c:	7fda      	ldrb	r2, [r3, #31]
 801a41e:	6a3b      	ldr	r3, [r7, #32]
 801a420:	7fdb      	ldrb	r3, [r3, #31]
 801a422:	429a      	cmp	r2, r3
 801a424:	d803      	bhi.n	801a42e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a428:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a42a:	69fb      	ldr	r3, [r7, #28]
 801a42c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a430:	681b      	ldr	r3, [r3, #0]
 801a432:	2b00      	cmp	r3, #0
 801a434:	d001      	beq.n	801a43a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a438:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a43c:	681b      	ldr	r3, [r3, #0]
 801a43e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a442:	2b00      	cmp	r3, #0
 801a444:	d1cb      	bne.n	801a3de <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a446:	6a3b      	ldr	r3, [r7, #32]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d008      	beq.n	801a45e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a44c:	69b9      	ldr	r1, [r7, #24]
 801a44e:	6a38      	ldr	r0, [r7, #32]
 801a450:	f7ff ff0e 	bl	801a270 <ip_reass_free_complete_datagram>
 801a454:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a456:	697a      	ldr	r2, [r7, #20]
 801a458:	68fb      	ldr	r3, [r7, #12]
 801a45a:	4413      	add	r3, r2
 801a45c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a45e:	697a      	ldr	r2, [r7, #20]
 801a460:	683b      	ldr	r3, [r7, #0]
 801a462:	429a      	cmp	r2, r3
 801a464:	da02      	bge.n	801a46c <ip_reass_remove_oldest_datagram+0xb4>
 801a466:	693b      	ldr	r3, [r7, #16]
 801a468:	2b01      	cmp	r3, #1
 801a46a:	dcac      	bgt.n	801a3c6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a46c:	697b      	ldr	r3, [r7, #20]
}
 801a46e:	4618      	mov	r0, r3
 801a470:	3728      	adds	r7, #40	; 0x28
 801a472:	46bd      	mov	sp, r7
 801a474:	bd80      	pop	{r7, pc}
 801a476:	bf00      	nop
 801a478:	20004928 	.word	0x20004928

0801a47c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b084      	sub	sp, #16
 801a480:	af00      	add	r7, sp, #0
 801a482:	6078      	str	r0, [r7, #4]
 801a484:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a486:	2004      	movs	r0, #4
 801a488:	f7f6 f9e8 	bl	801085c <memp_malloc>
 801a48c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d110      	bne.n	801a4b6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a494:	6839      	ldr	r1, [r7, #0]
 801a496:	6878      	ldr	r0, [r7, #4]
 801a498:	f7ff ff8e 	bl	801a3b8 <ip_reass_remove_oldest_datagram>
 801a49c:	4602      	mov	r2, r0
 801a49e:	683b      	ldr	r3, [r7, #0]
 801a4a0:	4293      	cmp	r3, r2
 801a4a2:	dc03      	bgt.n	801a4ac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a4a4:	2004      	movs	r0, #4
 801a4a6:	f7f6 f9d9 	bl	801085c <memp_malloc>
 801a4aa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	2b00      	cmp	r3, #0
 801a4b0:	d101      	bne.n	801a4b6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a4b2:	2300      	movs	r3, #0
 801a4b4:	e016      	b.n	801a4e4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a4b6:	2220      	movs	r2, #32
 801a4b8:	2100      	movs	r1, #0
 801a4ba:	68f8      	ldr	r0, [r7, #12]
 801a4bc:	f000 ffdc 	bl	801b478 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	220f      	movs	r2, #15
 801a4c4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a4c6:	4b09      	ldr	r3, [pc, #36]	; (801a4ec <ip_reass_enqueue_new_datagram+0x70>)
 801a4c8:	681a      	ldr	r2, [r3, #0]
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a4ce:	4a07      	ldr	r2, [pc, #28]	; (801a4ec <ip_reass_enqueue_new_datagram+0x70>)
 801a4d0:	68fb      	ldr	r3, [r7, #12]
 801a4d2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	3308      	adds	r3, #8
 801a4d8:	2214      	movs	r2, #20
 801a4da:	6879      	ldr	r1, [r7, #4]
 801a4dc:	4618      	mov	r0, r3
 801a4de:	f000 ffbd 	bl	801b45c <memcpy>
  return ipr;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
}
 801a4e4:	4618      	mov	r0, r3
 801a4e6:	3710      	adds	r7, #16
 801a4e8:	46bd      	mov	sp, r7
 801a4ea:	bd80      	pop	{r7, pc}
 801a4ec:	20004928 	.word	0x20004928

0801a4f0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b082      	sub	sp, #8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
 801a4f8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a4fa:	4b10      	ldr	r3, [pc, #64]	; (801a53c <ip_reass_dequeue_datagram+0x4c>)
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	687a      	ldr	r2, [r7, #4]
 801a500:	429a      	cmp	r2, r3
 801a502:	d104      	bne.n	801a50e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	681b      	ldr	r3, [r3, #0]
 801a508:	4a0c      	ldr	r2, [pc, #48]	; (801a53c <ip_reass_dequeue_datagram+0x4c>)
 801a50a:	6013      	str	r3, [r2, #0]
 801a50c:	e00d      	b.n	801a52a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a50e:	683b      	ldr	r3, [r7, #0]
 801a510:	2b00      	cmp	r3, #0
 801a512:	d106      	bne.n	801a522 <ip_reass_dequeue_datagram+0x32>
 801a514:	4b0a      	ldr	r3, [pc, #40]	; (801a540 <ip_reass_dequeue_datagram+0x50>)
 801a516:	f240 1245 	movw	r2, #325	; 0x145
 801a51a:	490a      	ldr	r1, [pc, #40]	; (801a544 <ip_reass_dequeue_datagram+0x54>)
 801a51c:	480a      	ldr	r0, [pc, #40]	; (801a548 <ip_reass_dequeue_datagram+0x58>)
 801a51e:	f001 fbf5 	bl	801bd0c <iprintf>
    prev->next = ipr->next;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	681a      	ldr	r2, [r3, #0]
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a52a:	6879      	ldr	r1, [r7, #4]
 801a52c:	2004      	movs	r0, #4
 801a52e:	f7f6 f9e7 	bl	8010900 <memp_free>
}
 801a532:	bf00      	nop
 801a534:	3708      	adds	r7, #8
 801a536:	46bd      	mov	sp, r7
 801a538:	bd80      	pop	{r7, pc}
 801a53a:	bf00      	nop
 801a53c:	20004928 	.word	0x20004928
 801a540:	08021928 	.word	0x08021928
 801a544:	080219f0 	.word	0x080219f0
 801a548:	08021970 	.word	0x08021970

0801a54c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a54c:	b580      	push	{r7, lr}
 801a54e:	b08c      	sub	sp, #48	; 0x30
 801a550:	af00      	add	r7, sp, #0
 801a552:	60f8      	str	r0, [r7, #12]
 801a554:	60b9      	str	r1, [r7, #8]
 801a556:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a558:	2300      	movs	r3, #0
 801a55a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a55c:	2301      	movs	r3, #1
 801a55e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a560:	68bb      	ldr	r3, [r7, #8]
 801a562:	685b      	ldr	r3, [r3, #4]
 801a564:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a566:	69fb      	ldr	r3, [r7, #28]
 801a568:	885b      	ldrh	r3, [r3, #2]
 801a56a:	b29b      	uxth	r3, r3
 801a56c:	4618      	mov	r0, r3
 801a56e:	f7f5 fcbf 	bl	800fef0 <lwip_htons>
 801a572:	4603      	mov	r3, r0
 801a574:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a576:	69fb      	ldr	r3, [r7, #28]
 801a578:	781b      	ldrb	r3, [r3, #0]
 801a57a:	f003 030f 	and.w	r3, r3, #15
 801a57e:	b2db      	uxtb	r3, r3
 801a580:	009b      	lsls	r3, r3, #2
 801a582:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a584:	7e7b      	ldrb	r3, [r7, #25]
 801a586:	b29b      	uxth	r3, r3
 801a588:	8b7a      	ldrh	r2, [r7, #26]
 801a58a:	429a      	cmp	r2, r3
 801a58c:	d202      	bcs.n	801a594 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a58e:	f04f 33ff 	mov.w	r3, #4294967295
 801a592:	e135      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a594:	7e7b      	ldrb	r3, [r7, #25]
 801a596:	b29b      	uxth	r3, r3
 801a598:	8b7a      	ldrh	r2, [r7, #26]
 801a59a:	1ad3      	subs	r3, r2, r3
 801a59c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a59e:	69fb      	ldr	r3, [r7, #28]
 801a5a0:	88db      	ldrh	r3, [r3, #6]
 801a5a2:	b29b      	uxth	r3, r3
 801a5a4:	4618      	mov	r0, r3
 801a5a6:	f7f5 fca3 	bl	800fef0 <lwip_htons>
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5b0:	b29b      	uxth	r3, r3
 801a5b2:	00db      	lsls	r3, r3, #3
 801a5b4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a5b6:	68bb      	ldr	r3, [r7, #8]
 801a5b8:	685b      	ldr	r3, [r3, #4]
 801a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5be:	2200      	movs	r2, #0
 801a5c0:	701a      	strb	r2, [r3, #0]
 801a5c2:	2200      	movs	r2, #0
 801a5c4:	705a      	strb	r2, [r3, #1]
 801a5c6:	2200      	movs	r2, #0
 801a5c8:	709a      	strb	r2, [r3, #2]
 801a5ca:	2200      	movs	r2, #0
 801a5cc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a5ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d0:	8afa      	ldrh	r2, [r7, #22]
 801a5d2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a5d4:	8afa      	ldrh	r2, [r7, #22]
 801a5d6:	8b7b      	ldrh	r3, [r7, #26]
 801a5d8:	4413      	add	r3, r2
 801a5da:	b29a      	uxth	r2, r3
 801a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5de:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5e2:	88db      	ldrh	r3, [r3, #6]
 801a5e4:	b29b      	uxth	r3, r3
 801a5e6:	8afa      	ldrh	r2, [r7, #22]
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	d902      	bls.n	801a5f2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a5ec:	f04f 33ff 	mov.w	r3, #4294967295
 801a5f0:	e106      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	685b      	ldr	r3, [r3, #4]
 801a5f6:	627b      	str	r3, [r7, #36]	; 0x24
 801a5f8:	e068      	b.n	801a6cc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5fc:	685b      	ldr	r3, [r3, #4]
 801a5fe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a602:	889b      	ldrh	r3, [r3, #4]
 801a604:	b29a      	uxth	r2, r3
 801a606:	693b      	ldr	r3, [r7, #16]
 801a608:	889b      	ldrh	r3, [r3, #4]
 801a60a:	b29b      	uxth	r3, r3
 801a60c:	429a      	cmp	r2, r3
 801a60e:	d235      	bcs.n	801a67c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a614:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d020      	beq.n	801a65e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a61c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61e:	889b      	ldrh	r3, [r3, #4]
 801a620:	b29a      	uxth	r2, r3
 801a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a624:	88db      	ldrh	r3, [r3, #6]
 801a626:	b29b      	uxth	r3, r3
 801a628:	429a      	cmp	r2, r3
 801a62a:	d307      	bcc.n	801a63c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a62c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a62e:	88db      	ldrh	r3, [r3, #6]
 801a630:	b29a      	uxth	r2, r3
 801a632:	693b      	ldr	r3, [r7, #16]
 801a634:	889b      	ldrh	r3, [r3, #4]
 801a636:	b29b      	uxth	r3, r3
 801a638:	429a      	cmp	r2, r3
 801a63a:	d902      	bls.n	801a642 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a63c:	f04f 33ff 	mov.w	r3, #4294967295
 801a640:	e0de      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a644:	68ba      	ldr	r2, [r7, #8]
 801a646:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a64a:	88db      	ldrh	r3, [r3, #6]
 801a64c:	b29a      	uxth	r2, r3
 801a64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a650:	889b      	ldrh	r3, [r3, #4]
 801a652:	b29b      	uxth	r3, r3
 801a654:	429a      	cmp	r2, r3
 801a656:	d03d      	beq.n	801a6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a658:	2300      	movs	r3, #0
 801a65a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a65c:	e03a      	b.n	801a6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a65e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a660:	88db      	ldrh	r3, [r3, #6]
 801a662:	b29a      	uxth	r2, r3
 801a664:	693b      	ldr	r3, [r7, #16]
 801a666:	889b      	ldrh	r3, [r3, #4]
 801a668:	b29b      	uxth	r3, r3
 801a66a:	429a      	cmp	r2, r3
 801a66c:	d902      	bls.n	801a674 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a66e:	f04f 33ff 	mov.w	r3, #4294967295
 801a672:	e0c5      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a674:	68fb      	ldr	r3, [r7, #12]
 801a676:	68ba      	ldr	r2, [r7, #8]
 801a678:	605a      	str	r2, [r3, #4]
      break;
 801a67a:	e02b      	b.n	801a6d4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a67c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a67e:	889b      	ldrh	r3, [r3, #4]
 801a680:	b29a      	uxth	r2, r3
 801a682:	693b      	ldr	r3, [r7, #16]
 801a684:	889b      	ldrh	r3, [r3, #4]
 801a686:	b29b      	uxth	r3, r3
 801a688:	429a      	cmp	r2, r3
 801a68a:	d102      	bne.n	801a692 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a68c:	f04f 33ff 	mov.w	r3, #4294967295
 801a690:	e0b6      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a694:	889b      	ldrh	r3, [r3, #4]
 801a696:	b29a      	uxth	r2, r3
 801a698:	693b      	ldr	r3, [r7, #16]
 801a69a:	88db      	ldrh	r3, [r3, #6]
 801a69c:	b29b      	uxth	r3, r3
 801a69e:	429a      	cmp	r2, r3
 801a6a0:	d202      	bcs.n	801a6a8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a6a2:	f04f 33ff 	mov.w	r3, #4294967295
 801a6a6:	e0ab      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d009      	beq.n	801a6c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a6ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6b0:	88db      	ldrh	r3, [r3, #6]
 801a6b2:	b29a      	uxth	r2, r3
 801a6b4:	693b      	ldr	r3, [r7, #16]
 801a6b6:	889b      	ldrh	r3, [r3, #4]
 801a6b8:	b29b      	uxth	r3, r3
 801a6ba:	429a      	cmp	r2, r3
 801a6bc:	d001      	beq.n	801a6c2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a6be:	2300      	movs	r3, #0
 801a6c0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a6c2:	693b      	ldr	r3, [r7, #16]
 801a6c4:	681b      	ldr	r3, [r3, #0]
 801a6c6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a6c8:	693b      	ldr	r3, [r7, #16]
 801a6ca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d193      	bne.n	801a5fa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a6d2:	e000      	b.n	801a6d6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a6d4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a6d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d12d      	bne.n	801a738 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6de:	2b00      	cmp	r3, #0
 801a6e0:	d01c      	beq.n	801a71c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a6e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6e4:	88db      	ldrh	r3, [r3, #6]
 801a6e6:	b29a      	uxth	r2, r3
 801a6e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ea:	889b      	ldrh	r3, [r3, #4]
 801a6ec:	b29b      	uxth	r3, r3
 801a6ee:	429a      	cmp	r2, r3
 801a6f0:	d906      	bls.n	801a700 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a6f2:	4b45      	ldr	r3, [pc, #276]	; (801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a6f4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a6f8:	4944      	ldr	r1, [pc, #272]	; (801a80c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a6fa:	4845      	ldr	r0, [pc, #276]	; (801a810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a6fc:	f001 fb06 	bl	801bd0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a702:	68ba      	ldr	r2, [r7, #8]
 801a704:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a708:	88db      	ldrh	r3, [r3, #6]
 801a70a:	b29a      	uxth	r2, r3
 801a70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a70e:	889b      	ldrh	r3, [r3, #4]
 801a710:	b29b      	uxth	r3, r3
 801a712:	429a      	cmp	r2, r3
 801a714:	d010      	beq.n	801a738 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a716:	2300      	movs	r3, #0
 801a718:	623b      	str	r3, [r7, #32]
 801a71a:	e00d      	b.n	801a738 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a71c:	68fb      	ldr	r3, [r7, #12]
 801a71e:	685b      	ldr	r3, [r3, #4]
 801a720:	2b00      	cmp	r3, #0
 801a722:	d006      	beq.n	801a732 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a724:	4b38      	ldr	r3, [pc, #224]	; (801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a726:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a72a:	493a      	ldr	r1, [pc, #232]	; (801a814 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a72c:	4838      	ldr	r0, [pc, #224]	; (801a810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a72e:	f001 faed 	bl	801bd0c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a732:	68fb      	ldr	r3, [r7, #12]
 801a734:	68ba      	ldr	r2, [r7, #8]
 801a736:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	2b00      	cmp	r3, #0
 801a73c:	d105      	bne.n	801a74a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a73e:	68fb      	ldr	r3, [r7, #12]
 801a740:	7f9b      	ldrb	r3, [r3, #30]
 801a742:	f003 0301 	and.w	r3, r3, #1
 801a746:	2b00      	cmp	r3, #0
 801a748:	d059      	beq.n	801a7fe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a74a:	6a3b      	ldr	r3, [r7, #32]
 801a74c:	2b00      	cmp	r3, #0
 801a74e:	d04f      	beq.n	801a7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	685b      	ldr	r3, [r3, #4]
 801a754:	2b00      	cmp	r3, #0
 801a756:	d006      	beq.n	801a766 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	685b      	ldr	r3, [r3, #4]
 801a75c:	685b      	ldr	r3, [r3, #4]
 801a75e:	889b      	ldrh	r3, [r3, #4]
 801a760:	b29b      	uxth	r3, r3
 801a762:	2b00      	cmp	r3, #0
 801a764:	d002      	beq.n	801a76c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a766:	2300      	movs	r3, #0
 801a768:	623b      	str	r3, [r7, #32]
 801a76a:	e041      	b.n	801a7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a776:	e012      	b.n	801a79e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a77a:	685b      	ldr	r3, [r3, #4]
 801a77c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a780:	88db      	ldrh	r3, [r3, #6]
 801a782:	b29a      	uxth	r2, r3
 801a784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a786:	889b      	ldrh	r3, [r3, #4]
 801a788:	b29b      	uxth	r3, r3
 801a78a:	429a      	cmp	r2, r3
 801a78c:	d002      	beq.n	801a794 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a78e:	2300      	movs	r3, #0
 801a790:	623b      	str	r3, [r7, #32]
            break;
 801a792:	e007      	b.n	801a7a4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a796:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7a0:	2b00      	cmp	r3, #0
 801a7a2:	d1e9      	bne.n	801a778 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a7a4:	6a3b      	ldr	r3, [r7, #32]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d022      	beq.n	801a7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a7aa:	68fb      	ldr	r3, [r7, #12]
 801a7ac:	685b      	ldr	r3, [r3, #4]
 801a7ae:	2b00      	cmp	r3, #0
 801a7b0:	d106      	bne.n	801a7c0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a7b2:	4b15      	ldr	r3, [pc, #84]	; (801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7b4:	f240 12df 	movw	r2, #479	; 0x1df
 801a7b8:	4917      	ldr	r1, [pc, #92]	; (801a818 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a7ba:	4815      	ldr	r0, [pc, #84]	; (801a810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7bc:	f001 faa6 	bl	801bd0c <iprintf>
          LWIP_ASSERT("sanity check",
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	685b      	ldr	r3, [r3, #4]
 801a7c4:	685b      	ldr	r3, [r3, #4]
 801a7c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	d106      	bne.n	801a7da <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a7cc:	4b0e      	ldr	r3, [pc, #56]	; (801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a7d2:	4911      	ldr	r1, [pc, #68]	; (801a818 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a7d4:	480e      	ldr	r0, [pc, #56]	; (801a810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7d6:	f001 fa99 	bl	801bd0c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d006      	beq.n	801a7f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a7e2:	4b09      	ldr	r3, [pc, #36]	; (801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a7e4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a7e8:	490c      	ldr	r1, [pc, #48]	; (801a81c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a7ea:	4809      	ldr	r0, [pc, #36]	; (801a810 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a7ec:	f001 fa8e 	bl	801bd0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a7f0:	6a3b      	ldr	r3, [r7, #32]
 801a7f2:	2b00      	cmp	r3, #0
 801a7f4:	bf14      	ite	ne
 801a7f6:	2301      	movne	r3, #1
 801a7f8:	2300      	moveq	r3, #0
 801a7fa:	b2db      	uxtb	r3, r3
 801a7fc:	e000      	b.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a7fe:	2300      	movs	r3, #0
}
 801a800:	4618      	mov	r0, r3
 801a802:	3730      	adds	r7, #48	; 0x30
 801a804:	46bd      	mov	sp, r7
 801a806:	bd80      	pop	{r7, pc}
 801a808:	08021928 	.word	0x08021928
 801a80c:	08021a0c 	.word	0x08021a0c
 801a810:	08021970 	.word	0x08021970
 801a814:	08021a2c 	.word	0x08021a2c
 801a818:	08021a64 	.word	0x08021a64
 801a81c:	08021a74 	.word	0x08021a74

0801a820 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a820:	b580      	push	{r7, lr}
 801a822:	b08e      	sub	sp, #56	; 0x38
 801a824:	af00      	add	r7, sp, #0
 801a826:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a828:	687b      	ldr	r3, [r7, #4]
 801a82a:	685b      	ldr	r3, [r3, #4]
 801a82c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a830:	781b      	ldrb	r3, [r3, #0]
 801a832:	f003 030f 	and.w	r3, r3, #15
 801a836:	b2db      	uxtb	r3, r3
 801a838:	009b      	lsls	r3, r3, #2
 801a83a:	b2db      	uxtb	r3, r3
 801a83c:	2b14      	cmp	r3, #20
 801a83e:	f040 8167 	bne.w	801ab10 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a844:	88db      	ldrh	r3, [r3, #6]
 801a846:	b29b      	uxth	r3, r3
 801a848:	4618      	mov	r0, r3
 801a84a:	f7f5 fb51 	bl	800fef0 <lwip_htons>
 801a84e:	4603      	mov	r3, r0
 801a850:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a854:	b29b      	uxth	r3, r3
 801a856:	00db      	lsls	r3, r3, #3
 801a858:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a85c:	885b      	ldrh	r3, [r3, #2]
 801a85e:	b29b      	uxth	r3, r3
 801a860:	4618      	mov	r0, r3
 801a862:	f7f5 fb45 	bl	800fef0 <lwip_htons>
 801a866:	4603      	mov	r3, r0
 801a868:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a86a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86c:	781b      	ldrb	r3, [r3, #0]
 801a86e:	f003 030f 	and.w	r3, r3, #15
 801a872:	b2db      	uxtb	r3, r3
 801a874:	009b      	lsls	r3, r3, #2
 801a876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a87a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a87e:	b29b      	uxth	r3, r3
 801a880:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a882:	429a      	cmp	r2, r3
 801a884:	f0c0 8146 	bcc.w	801ab14 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a88c:	b29b      	uxth	r3, r3
 801a88e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a890:	1ad3      	subs	r3, r2, r3
 801a892:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a894:	6878      	ldr	r0, [r7, #4]
 801a896:	f7f6 ff97 	bl	80117c8 <pbuf_clen>
 801a89a:	4603      	mov	r3, r0
 801a89c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a89e:	4b9f      	ldr	r3, [pc, #636]	; (801ab1c <ip4_reass+0x2fc>)
 801a8a0:	881b      	ldrh	r3, [r3, #0]
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	8c3b      	ldrh	r3, [r7, #32]
 801a8a6:	4413      	add	r3, r2
 801a8a8:	2b0a      	cmp	r3, #10
 801a8aa:	dd10      	ble.n	801a8ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a8ac:	8c3b      	ldrh	r3, [r7, #32]
 801a8ae:	4619      	mov	r1, r3
 801a8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a8b2:	f7ff fd81 	bl	801a3b8 <ip_reass_remove_oldest_datagram>
 801a8b6:	4603      	mov	r3, r0
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 812d 	beq.w	801ab18 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a8be:	4b97      	ldr	r3, [pc, #604]	; (801ab1c <ip4_reass+0x2fc>)
 801a8c0:	881b      	ldrh	r3, [r3, #0]
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	8c3b      	ldrh	r3, [r7, #32]
 801a8c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a8c8:	2b0a      	cmp	r3, #10
 801a8ca:	f300 8125 	bgt.w	801ab18 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a8ce:	4b94      	ldr	r3, [pc, #592]	; (801ab20 <ip4_reass+0x300>)
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	633b      	str	r3, [r7, #48]	; 0x30
 801a8d4:	e015      	b.n	801a902 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8d8:	695a      	ldr	r2, [r3, #20]
 801a8da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8dc:	68db      	ldr	r3, [r3, #12]
 801a8de:	429a      	cmp	r2, r3
 801a8e0:	d10c      	bne.n	801a8fc <ip4_reass+0xdc>
 801a8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8e4:	699a      	ldr	r2, [r3, #24]
 801a8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8e8:	691b      	ldr	r3, [r3, #16]
 801a8ea:	429a      	cmp	r2, r3
 801a8ec:	d106      	bne.n	801a8fc <ip4_reass+0xdc>
 801a8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8f0:	899a      	ldrh	r2, [r3, #12]
 801a8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a8f4:	889b      	ldrh	r3, [r3, #4]
 801a8f6:	b29b      	uxth	r3, r3
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	d006      	beq.n	801a90a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a8fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	633b      	str	r3, [r7, #48]	; 0x30
 801a902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a904:	2b00      	cmp	r3, #0
 801a906:	d1e6      	bne.n	801a8d6 <ip4_reass+0xb6>
 801a908:	e000      	b.n	801a90c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a90a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a90e:	2b00      	cmp	r3, #0
 801a910:	d109      	bne.n	801a926 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a912:	8c3b      	ldrh	r3, [r7, #32]
 801a914:	4619      	mov	r1, r3
 801a916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a918:	f7ff fdb0 	bl	801a47c <ip_reass_enqueue_new_datagram>
 801a91c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a920:	2b00      	cmp	r3, #0
 801a922:	d11c      	bne.n	801a95e <ip4_reass+0x13e>
      goto nullreturn;
 801a924:	e109      	b.n	801ab3a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a928:	88db      	ldrh	r3, [r3, #6]
 801a92a:	b29b      	uxth	r3, r3
 801a92c:	4618      	mov	r0, r3
 801a92e:	f7f5 fadf 	bl	800fef0 <lwip_htons>
 801a932:	4603      	mov	r3, r0
 801a934:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a938:	2b00      	cmp	r3, #0
 801a93a:	d110      	bne.n	801a95e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a93e:	89db      	ldrh	r3, [r3, #14]
 801a940:	4618      	mov	r0, r3
 801a942:	f7f5 fad5 	bl	800fef0 <lwip_htons>
 801a946:	4603      	mov	r3, r0
 801a948:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a94c:	2b00      	cmp	r3, #0
 801a94e:	d006      	beq.n	801a95e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a952:	3308      	adds	r3, #8
 801a954:	2214      	movs	r2, #20
 801a956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a958:	4618      	mov	r0, r3
 801a95a:	f000 fd7f 	bl	801b45c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a960:	88db      	ldrh	r3, [r3, #6]
 801a962:	b29b      	uxth	r3, r3
 801a964:	f003 0320 	and.w	r3, r3, #32
 801a968:	2b00      	cmp	r3, #0
 801a96a:	bf0c      	ite	eq
 801a96c:	2301      	moveq	r3, #1
 801a96e:	2300      	movne	r3, #0
 801a970:	b2db      	uxtb	r3, r3
 801a972:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a974:	69fb      	ldr	r3, [r7, #28]
 801a976:	2b00      	cmp	r3, #0
 801a978:	d00e      	beq.n	801a998 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a97a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a97c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a97e:	4413      	add	r3, r2
 801a980:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a982:	8b7a      	ldrh	r2, [r7, #26]
 801a984:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a986:	429a      	cmp	r2, r3
 801a988:	f0c0 80a0 	bcc.w	801aacc <ip4_reass+0x2ac>
 801a98c:	8b7b      	ldrh	r3, [r7, #26]
 801a98e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a992:	4293      	cmp	r3, r2
 801a994:	f200 809a 	bhi.w	801aacc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a998:	69fa      	ldr	r2, [r7, #28]
 801a99a:	6879      	ldr	r1, [r7, #4]
 801a99c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a99e:	f7ff fdd5 	bl	801a54c <ip_reass_chain_frag_into_datagram_and_validate>
 801a9a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a9a4:	697b      	ldr	r3, [r7, #20]
 801a9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a9aa:	f000 8091 	beq.w	801aad0 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a9ae:	4b5b      	ldr	r3, [pc, #364]	; (801ab1c <ip4_reass+0x2fc>)
 801a9b0:	881a      	ldrh	r2, [r3, #0]
 801a9b2:	8c3b      	ldrh	r3, [r7, #32]
 801a9b4:	4413      	add	r3, r2
 801a9b6:	b29a      	uxth	r2, r3
 801a9b8:	4b58      	ldr	r3, [pc, #352]	; (801ab1c <ip4_reass+0x2fc>)
 801a9ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a9bc:	69fb      	ldr	r3, [r7, #28]
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	d00d      	beq.n	801a9de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a9c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a9c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a9c6:	4413      	add	r3, r2
 801a9c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9cc:	8a7a      	ldrh	r2, [r7, #18]
 801a9ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9d2:	7f9b      	ldrb	r3, [r3, #30]
 801a9d4:	f043 0301 	orr.w	r3, r3, #1
 801a9d8:	b2da      	uxtb	r2, r3
 801a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a9de:	697b      	ldr	r3, [r7, #20]
 801a9e0:	2b01      	cmp	r3, #1
 801a9e2:	d171      	bne.n	801aac8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9e6:	8b9b      	ldrh	r3, [r3, #28]
 801a9e8:	3314      	adds	r3, #20
 801a9ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a9ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9ee:	685b      	ldr	r3, [r3, #4]
 801a9f0:	685b      	ldr	r3, [r3, #4]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a9f8:	685b      	ldr	r3, [r3, #4]
 801a9fa:	685b      	ldr	r3, [r3, #4]
 801a9fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa00:	3308      	adds	r3, #8
 801aa02:	2214      	movs	r2, #20
 801aa04:	4619      	mov	r1, r3
 801aa06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa08:	f000 fd28 	bl	801b45c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801aa0c:	8a3b      	ldrh	r3, [r7, #16]
 801aa0e:	4618      	mov	r0, r3
 801aa10:	f7f5 fa6e 	bl	800fef0 <lwip_htons>
 801aa14:	4603      	mov	r3, r0
 801aa16:	461a      	mov	r2, r3
 801aa18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa1a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801aa1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa1e:	2200      	movs	r2, #0
 801aa20:	719a      	strb	r2, [r3, #6]
 801aa22:	2200      	movs	r2, #0
 801aa24:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801aa26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa28:	2200      	movs	r2, #0
 801aa2a:	729a      	strb	r2, [r3, #10]
 801aa2c:	2200      	movs	r2, #0
 801aa2e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801aa30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa32:	685b      	ldr	r3, [r3, #4]
 801aa34:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801aa36:	e00d      	b.n	801aa54 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801aa38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa3a:	685b      	ldr	r3, [r3, #4]
 801aa3c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801aa3e:	2114      	movs	r1, #20
 801aa40:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801aa42:	f7f6 fd7b 	bl	801153c <pbuf_remove_header>
      pbuf_cat(p, r);
 801aa46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801aa48:	6878      	ldr	r0, [r7, #4]
 801aa4a:	f7f6 fefd 	bl	8011848 <pbuf_cat>
      r = iprh->next_pbuf;
 801aa4e:	68fb      	ldr	r3, [r7, #12]
 801aa50:	681b      	ldr	r3, [r3, #0]
 801aa52:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801aa54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801aa56:	2b00      	cmp	r3, #0
 801aa58:	d1ee      	bne.n	801aa38 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801aa5a:	4b31      	ldr	r3, [pc, #196]	; (801ab20 <ip4_reass+0x300>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d102      	bne.n	801aa6a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801aa64:	2300      	movs	r3, #0
 801aa66:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa68:	e010      	b.n	801aa8c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aa6a:	4b2d      	ldr	r3, [pc, #180]	; (801ab20 <ip4_reass+0x300>)
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa70:	e007      	b.n	801aa82 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801aa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa74:	681b      	ldr	r3, [r3, #0]
 801aa76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa78:	429a      	cmp	r2, r3
 801aa7a:	d006      	beq.n	801aa8a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801aa7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa7e:	681b      	ldr	r3, [r3, #0]
 801aa80:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801aa84:	2b00      	cmp	r3, #0
 801aa86:	d1f4      	bne.n	801aa72 <ip4_reass+0x252>
 801aa88:	e000      	b.n	801aa8c <ip4_reass+0x26c>
          break;
 801aa8a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801aa8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aa8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aa90:	f7ff fd2e 	bl	801a4f0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801aa94:	6878      	ldr	r0, [r7, #4]
 801aa96:	f7f6 fe97 	bl	80117c8 <pbuf_clen>
 801aa9a:	4603      	mov	r3, r0
 801aa9c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801aa9e:	4b1f      	ldr	r3, [pc, #124]	; (801ab1c <ip4_reass+0x2fc>)
 801aaa0:	881b      	ldrh	r3, [r3, #0]
 801aaa2:	8c3a      	ldrh	r2, [r7, #32]
 801aaa4:	429a      	cmp	r2, r3
 801aaa6:	d906      	bls.n	801aab6 <ip4_reass+0x296>
 801aaa8:	4b1e      	ldr	r3, [pc, #120]	; (801ab24 <ip4_reass+0x304>)
 801aaaa:	f240 229b 	movw	r2, #667	; 0x29b
 801aaae:	491e      	ldr	r1, [pc, #120]	; (801ab28 <ip4_reass+0x308>)
 801aab0:	481e      	ldr	r0, [pc, #120]	; (801ab2c <ip4_reass+0x30c>)
 801aab2:	f001 f92b 	bl	801bd0c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801aab6:	4b19      	ldr	r3, [pc, #100]	; (801ab1c <ip4_reass+0x2fc>)
 801aab8:	881a      	ldrh	r2, [r3, #0]
 801aaba:	8c3b      	ldrh	r3, [r7, #32]
 801aabc:	1ad3      	subs	r3, r2, r3
 801aabe:	b29a      	uxth	r2, r3
 801aac0:	4b16      	ldr	r3, [pc, #88]	; (801ab1c <ip4_reass+0x2fc>)
 801aac2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	e03c      	b.n	801ab42 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801aac8:	2300      	movs	r3, #0
 801aaca:	e03a      	b.n	801ab42 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801aacc:	bf00      	nop
 801aace:	e000      	b.n	801aad2 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801aad0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	d106      	bne.n	801aae6 <ip4_reass+0x2c6>
 801aad8:	4b12      	ldr	r3, [pc, #72]	; (801ab24 <ip4_reass+0x304>)
 801aada:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801aade:	4914      	ldr	r1, [pc, #80]	; (801ab30 <ip4_reass+0x310>)
 801aae0:	4812      	ldr	r0, [pc, #72]	; (801ab2c <ip4_reass+0x30c>)
 801aae2:	f001 f913 	bl	801bd0c <iprintf>
  if (ipr->p == NULL) {
 801aae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aae8:	685b      	ldr	r3, [r3, #4]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d124      	bne.n	801ab38 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801aaee:	4b0c      	ldr	r3, [pc, #48]	; (801ab20 <ip4_reass+0x300>)
 801aaf0:	681b      	ldr	r3, [r3, #0]
 801aaf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aaf4:	429a      	cmp	r2, r3
 801aaf6:	d006      	beq.n	801ab06 <ip4_reass+0x2e6>
 801aaf8:	4b0a      	ldr	r3, [pc, #40]	; (801ab24 <ip4_reass+0x304>)
 801aafa:	f240 22ab 	movw	r2, #683	; 0x2ab
 801aafe:	490d      	ldr	r1, [pc, #52]	; (801ab34 <ip4_reass+0x314>)
 801ab00:	480a      	ldr	r0, [pc, #40]	; (801ab2c <ip4_reass+0x30c>)
 801ab02:	f001 f903 	bl	801bd0c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ab06:	2100      	movs	r1, #0
 801ab08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab0a:	f7ff fcf1 	bl	801a4f0 <ip_reass_dequeue_datagram>
 801ab0e:	e014      	b.n	801ab3a <ip4_reass+0x31a>
    goto nullreturn;
 801ab10:	bf00      	nop
 801ab12:	e012      	b.n	801ab3a <ip4_reass+0x31a>
    goto nullreturn;
 801ab14:	bf00      	nop
 801ab16:	e010      	b.n	801ab3a <ip4_reass+0x31a>
      goto nullreturn;
 801ab18:	bf00      	nop
 801ab1a:	e00e      	b.n	801ab3a <ip4_reass+0x31a>
 801ab1c:	2000492c 	.word	0x2000492c
 801ab20:	20004928 	.word	0x20004928
 801ab24:	08021928 	.word	0x08021928
 801ab28:	08021a98 	.word	0x08021a98
 801ab2c:	08021970 	.word	0x08021970
 801ab30:	08021ab4 	.word	0x08021ab4
 801ab34:	08021ac0 	.word	0x08021ac0
  }

nullreturn:
 801ab38:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ab3a:	6878      	ldr	r0, [r7, #4]
 801ab3c:	f7f6 fdb6 	bl	80116ac <pbuf_free>
  return NULL;
 801ab40:	2300      	movs	r3, #0
}
 801ab42:	4618      	mov	r0, r3
 801ab44:	3738      	adds	r7, #56	; 0x38
 801ab46:	46bd      	mov	sp, r7
 801ab48:	bd80      	pop	{r7, pc}
 801ab4a:	bf00      	nop

0801ab4c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ab4c:	b580      	push	{r7, lr}
 801ab4e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ab50:	2005      	movs	r0, #5
 801ab52:	f7f5 fe83 	bl	801085c <memp_malloc>
 801ab56:	4603      	mov	r3, r0
}
 801ab58:	4618      	mov	r0, r3
 801ab5a:	bd80      	pop	{r7, pc}

0801ab5c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ab5c:	b580      	push	{r7, lr}
 801ab5e:	b082      	sub	sp, #8
 801ab60:	af00      	add	r7, sp, #0
 801ab62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	d106      	bne.n	801ab78 <ip_frag_free_pbuf_custom_ref+0x1c>
 801ab6a:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801ab6c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801ab70:	4906      	ldr	r1, [pc, #24]	; (801ab8c <ip_frag_free_pbuf_custom_ref+0x30>)
 801ab72:	4807      	ldr	r0, [pc, #28]	; (801ab90 <ip_frag_free_pbuf_custom_ref+0x34>)
 801ab74:	f001 f8ca 	bl	801bd0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ab78:	6879      	ldr	r1, [r7, #4]
 801ab7a:	2005      	movs	r0, #5
 801ab7c:	f7f5 fec0 	bl	8010900 <memp_free>
}
 801ab80:	bf00      	nop
 801ab82:	3708      	adds	r7, #8
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	08021928 	.word	0x08021928
 801ab8c:	08021ae0 	.word	0x08021ae0
 801ab90:	08021970 	.word	0x08021970

0801ab94 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ab94:	b580      	push	{r7, lr}
 801ab96:	b084      	sub	sp, #16
 801ab98:	af00      	add	r7, sp, #0
 801ab9a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801aba0:	68fb      	ldr	r3, [r7, #12]
 801aba2:	2b00      	cmp	r3, #0
 801aba4:	d106      	bne.n	801abb4 <ipfrag_free_pbuf_custom+0x20>
 801aba6:	4b11      	ldr	r3, [pc, #68]	; (801abec <ipfrag_free_pbuf_custom+0x58>)
 801aba8:	f240 22ce 	movw	r2, #718	; 0x2ce
 801abac:	4910      	ldr	r1, [pc, #64]	; (801abf0 <ipfrag_free_pbuf_custom+0x5c>)
 801abae:	4811      	ldr	r0, [pc, #68]	; (801abf4 <ipfrag_free_pbuf_custom+0x60>)
 801abb0:	f001 f8ac 	bl	801bd0c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801abb4:	68fa      	ldr	r2, [r7, #12]
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	429a      	cmp	r2, r3
 801abba:	d006      	beq.n	801abca <ipfrag_free_pbuf_custom+0x36>
 801abbc:	4b0b      	ldr	r3, [pc, #44]	; (801abec <ipfrag_free_pbuf_custom+0x58>)
 801abbe:	f240 22cf 	movw	r2, #719	; 0x2cf
 801abc2:	490d      	ldr	r1, [pc, #52]	; (801abf8 <ipfrag_free_pbuf_custom+0x64>)
 801abc4:	480b      	ldr	r0, [pc, #44]	; (801abf4 <ipfrag_free_pbuf_custom+0x60>)
 801abc6:	f001 f8a1 	bl	801bd0c <iprintf>
  if (pcr->original != NULL) {
 801abca:	68fb      	ldr	r3, [r7, #12]
 801abcc:	695b      	ldr	r3, [r3, #20]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d004      	beq.n	801abdc <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	695b      	ldr	r3, [r3, #20]
 801abd6:	4618      	mov	r0, r3
 801abd8:	f7f6 fd68 	bl	80116ac <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801abdc:	68f8      	ldr	r0, [r7, #12]
 801abde:	f7ff ffbd 	bl	801ab5c <ip_frag_free_pbuf_custom_ref>
}
 801abe2:	bf00      	nop
 801abe4:	3710      	adds	r7, #16
 801abe6:	46bd      	mov	sp, r7
 801abe8:	bd80      	pop	{r7, pc}
 801abea:	bf00      	nop
 801abec:	08021928 	.word	0x08021928
 801abf0:	08021aec 	.word	0x08021aec
 801abf4:	08021970 	.word	0x08021970
 801abf8:	08021af8 	.word	0x08021af8

0801abfc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b094      	sub	sp, #80	; 0x50
 801ac00:	af02      	add	r7, sp, #8
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ac08:	2300      	movs	r3, #0
 801ac0a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ac0e:	68bb      	ldr	r3, [r7, #8]
 801ac10:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ac12:	3b14      	subs	r3, #20
 801ac14:	2b00      	cmp	r3, #0
 801ac16:	da00      	bge.n	801ac1a <ip4_frag+0x1e>
 801ac18:	3307      	adds	r3, #7
 801ac1a:	10db      	asrs	r3, r3, #3
 801ac1c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ac1e:	2314      	movs	r3, #20
 801ac20:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ac22:	68fb      	ldr	r3, [r7, #12]
 801ac24:	685b      	ldr	r3, [r3, #4]
 801ac26:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ac28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ac2a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ac2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac2e:	781b      	ldrb	r3, [r3, #0]
 801ac30:	f003 030f 	and.w	r3, r3, #15
 801ac34:	b2db      	uxtb	r3, r3
 801ac36:	009b      	lsls	r3, r3, #2
 801ac38:	b2db      	uxtb	r3, r3
 801ac3a:	2b14      	cmp	r3, #20
 801ac3c:	d002      	beq.n	801ac44 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ac3e:	f06f 0305 	mvn.w	r3, #5
 801ac42:	e110      	b.n	801ae66 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	895b      	ldrh	r3, [r3, #10]
 801ac48:	2b13      	cmp	r3, #19
 801ac4a:	d809      	bhi.n	801ac60 <ip4_frag+0x64>
 801ac4c:	4b88      	ldr	r3, [pc, #544]	; (801ae70 <ip4_frag+0x274>)
 801ac4e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801ac52:	4988      	ldr	r1, [pc, #544]	; (801ae74 <ip4_frag+0x278>)
 801ac54:	4888      	ldr	r0, [pc, #544]	; (801ae78 <ip4_frag+0x27c>)
 801ac56:	f001 f859 	bl	801bd0c <iprintf>
 801ac5a:	f06f 0305 	mvn.w	r3, #5
 801ac5e:	e102      	b.n	801ae66 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ac60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac62:	88db      	ldrh	r3, [r3, #6]
 801ac64:	b29b      	uxth	r3, r3
 801ac66:	4618      	mov	r0, r3
 801ac68:	f7f5 f942 	bl	800fef0 <lwip_htons>
 801ac6c:	4603      	mov	r3, r0
 801ac6e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801ac70:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ac76:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ac7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ac7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ac80:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ac82:	68fb      	ldr	r3, [r7, #12]
 801ac84:	891b      	ldrh	r3, [r3, #8]
 801ac86:	3b14      	subs	r3, #20
 801ac88:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ac8c:	e0e1      	b.n	801ae52 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ac8e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ac90:	00db      	lsls	r3, r3, #3
 801ac92:	b29b      	uxth	r3, r3
 801ac94:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ac98:	4293      	cmp	r3, r2
 801ac9a:	bf28      	it	cs
 801ac9c:	4613      	movcs	r3, r2
 801ac9e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801aca0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aca4:	2114      	movs	r1, #20
 801aca6:	200e      	movs	r0, #14
 801aca8:	f7f6 f9ea 	bl	8011080 <pbuf_alloc>
 801acac:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801acae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	f000 80d5 	beq.w	801ae60 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acb8:	895b      	ldrh	r3, [r3, #10]
 801acba:	2b13      	cmp	r3, #19
 801acbc:	d806      	bhi.n	801accc <ip4_frag+0xd0>
 801acbe:	4b6c      	ldr	r3, [pc, #432]	; (801ae70 <ip4_frag+0x274>)
 801acc0:	f44f 7249 	mov.w	r2, #804	; 0x324
 801acc4:	496d      	ldr	r1, [pc, #436]	; (801ae7c <ip4_frag+0x280>)
 801acc6:	486c      	ldr	r0, [pc, #432]	; (801ae78 <ip4_frag+0x27c>)
 801acc8:	f001 f820 	bl	801bd0c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801accc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acce:	685b      	ldr	r3, [r3, #4]
 801acd0:	2214      	movs	r2, #20
 801acd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801acd4:	4618      	mov	r0, r3
 801acd6:	f000 fbc1 	bl	801b45c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801acdc:	685b      	ldr	r3, [r3, #4]
 801acde:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ace0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ace2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ace6:	e064      	b.n	801adb2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ace8:	68fb      	ldr	r3, [r7, #12]
 801acea:	895a      	ldrh	r2, [r3, #10]
 801acec:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801acee:	1ad3      	subs	r3, r2, r3
 801acf0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	895b      	ldrh	r3, [r3, #10]
 801acf6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801acf8:	429a      	cmp	r2, r3
 801acfa:	d906      	bls.n	801ad0a <ip4_frag+0x10e>
 801acfc:	4b5c      	ldr	r3, [pc, #368]	; (801ae70 <ip4_frag+0x274>)
 801acfe:	f240 322d 	movw	r2, #813	; 0x32d
 801ad02:	495f      	ldr	r1, [pc, #380]	; (801ae80 <ip4_frag+0x284>)
 801ad04:	485c      	ldr	r0, [pc, #368]	; (801ae78 <ip4_frag+0x27c>)
 801ad06:	f001 f801 	bl	801bd0c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ad0a:	8bfa      	ldrh	r2, [r7, #30]
 801ad0c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ad10:	4293      	cmp	r3, r2
 801ad12:	bf28      	it	cs
 801ad14:	4613      	movcs	r3, r2
 801ad16:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801ad1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d105      	bne.n	801ad2e <ip4_frag+0x132>
        poff = 0;
 801ad22:	2300      	movs	r3, #0
 801ad24:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	681b      	ldr	r3, [r3, #0]
 801ad2a:	60fb      	str	r3, [r7, #12]
        continue;
 801ad2c:	e041      	b.n	801adb2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ad2e:	f7ff ff0d 	bl	801ab4c <ip_frag_alloc_pbuf_custom_ref>
 801ad32:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ad34:	69bb      	ldr	r3, [r7, #24]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d103      	bne.n	801ad42 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801ad3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad3c:	f7f6 fcb6 	bl	80116ac <pbuf_free>
        goto memerr;
 801ad40:	e08f      	b.n	801ae62 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ad42:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801ad44:	68fb      	ldr	r3, [r7, #12]
 801ad46:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ad48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ad4a:	4413      	add	r3, r2
 801ad4c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801ad50:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801ad54:	9201      	str	r2, [sp, #4]
 801ad56:	9300      	str	r3, [sp, #0]
 801ad58:	4603      	mov	r3, r0
 801ad5a:	2241      	movs	r2, #65	; 0x41
 801ad5c:	2000      	movs	r0, #0
 801ad5e:	f7f6 fab9 	bl	80112d4 <pbuf_alloced_custom>
 801ad62:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801ad64:	697b      	ldr	r3, [r7, #20]
 801ad66:	2b00      	cmp	r3, #0
 801ad68:	d106      	bne.n	801ad78 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801ad6a:	69b8      	ldr	r0, [r7, #24]
 801ad6c:	f7ff fef6 	bl	801ab5c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801ad70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad72:	f7f6 fc9b 	bl	80116ac <pbuf_free>
        goto memerr;
 801ad76:	e074      	b.n	801ae62 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801ad78:	68f8      	ldr	r0, [r7, #12]
 801ad7a:	f7f6 fd3d 	bl	80117f8 <pbuf_ref>
      pcr->original = p;
 801ad7e:	69bb      	ldr	r3, [r7, #24]
 801ad80:	68fa      	ldr	r2, [r7, #12]
 801ad82:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801ad84:	69bb      	ldr	r3, [r7, #24]
 801ad86:	4a3f      	ldr	r2, [pc, #252]	; (801ae84 <ip4_frag+0x288>)
 801ad88:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801ad8a:	6979      	ldr	r1, [r7, #20]
 801ad8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ad8e:	f7f6 fd5b 	bl	8011848 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801ad92:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801ad96:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801ad9a:	1ad3      	subs	r3, r2, r3
 801ad9c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801ada0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d004      	beq.n	801adb2 <ip4_frag+0x1b6>
        poff = 0;
 801ada8:	2300      	movs	r3, #0
 801adaa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801adac:	68fb      	ldr	r3, [r7, #12]
 801adae:	681b      	ldr	r3, [r3, #0]
 801adb0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801adb2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801adb6:	2b00      	cmp	r3, #0
 801adb8:	d196      	bne.n	801ace8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801adba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801adbc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801adc0:	4413      	add	r3, r2
 801adc2:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801adc4:	68bb      	ldr	r3, [r7, #8]
 801adc6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801adc8:	f1a3 0213 	sub.w	r2, r3, #19
 801adcc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801add0:	429a      	cmp	r2, r3
 801add2:	bfcc      	ite	gt
 801add4:	2301      	movgt	r3, #1
 801add6:	2300      	movle	r3, #0
 801add8:	b2db      	uxtb	r3, r3
 801adda:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801addc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801ade0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ade4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801ade6:	6a3b      	ldr	r3, [r7, #32]
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d002      	beq.n	801adf2 <ip4_frag+0x1f6>
 801adec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801adee:	2b00      	cmp	r3, #0
 801adf0:	d003      	beq.n	801adfa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801adf2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801adf4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801adf8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801adfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801adfc:	4618      	mov	r0, r3
 801adfe:	f7f5 f877 	bl	800fef0 <lwip_htons>
 801ae02:	4603      	mov	r3, r0
 801ae04:	461a      	mov	r2, r3
 801ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae08:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801ae0a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae0c:	3314      	adds	r3, #20
 801ae0e:	b29b      	uxth	r3, r3
 801ae10:	4618      	mov	r0, r3
 801ae12:	f7f5 f86d 	bl	800fef0 <lwip_htons>
 801ae16:	4603      	mov	r3, r0
 801ae18:	461a      	mov	r2, r3
 801ae1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae1c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801ae1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ae20:	2200      	movs	r2, #0
 801ae22:	729a      	strb	r2, [r3, #10]
 801ae24:	2200      	movs	r2, #0
 801ae26:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801ae28:	68bb      	ldr	r3, [r7, #8]
 801ae2a:	695b      	ldr	r3, [r3, #20]
 801ae2c:	687a      	ldr	r2, [r7, #4]
 801ae2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801ae30:	68b8      	ldr	r0, [r7, #8]
 801ae32:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801ae34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801ae36:	f7f6 fc39 	bl	80116ac <pbuf_free>
    left = (u16_t)(left - fragsize);
 801ae3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae3e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae40:	1ad3      	subs	r3, r2, r3
 801ae42:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801ae46:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801ae4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae4c:	4413      	add	r3, r2
 801ae4e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801ae52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	f47f af19 	bne.w	801ac8e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	e002      	b.n	801ae66 <ip4_frag+0x26a>
      goto memerr;
 801ae60:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801ae62:	f04f 33ff 	mov.w	r3, #4294967295
}
 801ae66:	4618      	mov	r0, r3
 801ae68:	3748      	adds	r7, #72	; 0x48
 801ae6a:	46bd      	mov	sp, r7
 801ae6c:	bd80      	pop	{r7, pc}
 801ae6e:	bf00      	nop
 801ae70:	08021928 	.word	0x08021928
 801ae74:	08021b04 	.word	0x08021b04
 801ae78:	08021970 	.word	0x08021970
 801ae7c:	08021b20 	.word	0x08021b20
 801ae80:	08021b40 	.word	0x08021b40
 801ae84:	0801ab95 	.word	0x0801ab95

0801ae88 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801ae88:	b580      	push	{r7, lr}
 801ae8a:	b086      	sub	sp, #24
 801ae8c:	af00      	add	r7, sp, #0
 801ae8e:	6078      	str	r0, [r7, #4]
 801ae90:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801ae92:	230e      	movs	r3, #14
 801ae94:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801ae96:	687b      	ldr	r3, [r7, #4]
 801ae98:	895b      	ldrh	r3, [r3, #10]
 801ae9a:	2b0e      	cmp	r3, #14
 801ae9c:	d96e      	bls.n	801af7c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	7bdb      	ldrb	r3, [r3, #15]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d106      	bne.n	801aeb4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801aea6:	683b      	ldr	r3, [r7, #0]
 801aea8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801aeac:	3301      	adds	r3, #1
 801aeae:	b2da      	uxtb	r2, r3
 801aeb0:	687b      	ldr	r3, [r7, #4]
 801aeb2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801aeb4:	687b      	ldr	r3, [r7, #4]
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801aeba:	693b      	ldr	r3, [r7, #16]
 801aebc:	7b1a      	ldrb	r2, [r3, #12]
 801aebe:	7b5b      	ldrb	r3, [r3, #13]
 801aec0:	021b      	lsls	r3, r3, #8
 801aec2:	4313      	orrs	r3, r2
 801aec4:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801aec6:	693b      	ldr	r3, [r7, #16]
 801aec8:	781b      	ldrb	r3, [r3, #0]
 801aeca:	f003 0301 	and.w	r3, r3, #1
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d023      	beq.n	801af1a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801aed2:	693b      	ldr	r3, [r7, #16]
 801aed4:	781b      	ldrb	r3, [r3, #0]
 801aed6:	2b01      	cmp	r3, #1
 801aed8:	d10f      	bne.n	801aefa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aeda:	693b      	ldr	r3, [r7, #16]
 801aedc:	785b      	ldrb	r3, [r3, #1]
 801aede:	2b00      	cmp	r3, #0
 801aee0:	d11b      	bne.n	801af1a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801aee2:	693b      	ldr	r3, [r7, #16]
 801aee4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801aee6:	2b5e      	cmp	r3, #94	; 0x5e
 801aee8:	d117      	bne.n	801af1a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	7b5b      	ldrb	r3, [r3, #13]
 801aeee:	f043 0310 	orr.w	r3, r3, #16
 801aef2:	b2da      	uxtb	r2, r3
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	735a      	strb	r2, [r3, #13]
 801aef8:	e00f      	b.n	801af1a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801aefa:	693b      	ldr	r3, [r7, #16]
 801aefc:	2206      	movs	r2, #6
 801aefe:	4928      	ldr	r1, [pc, #160]	; (801afa0 <ethernet_input+0x118>)
 801af00:	4618      	mov	r0, r3
 801af02:	f000 fa9d 	bl	801b440 <memcmp>
 801af06:	4603      	mov	r3, r0
 801af08:	2b00      	cmp	r3, #0
 801af0a:	d106      	bne.n	801af1a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	7b5b      	ldrb	r3, [r3, #13]
 801af10:	f043 0308 	orr.w	r3, r3, #8
 801af14:	b2da      	uxtb	r2, r3
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801af1a:	89fb      	ldrh	r3, [r7, #14]
 801af1c:	2b08      	cmp	r3, #8
 801af1e:	d003      	beq.n	801af28 <ethernet_input+0xa0>
 801af20:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801af24:	d014      	beq.n	801af50 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801af26:	e032      	b.n	801af8e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801af28:	683b      	ldr	r3, [r7, #0]
 801af2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af2e:	f003 0308 	and.w	r3, r3, #8
 801af32:	2b00      	cmp	r3, #0
 801af34:	d024      	beq.n	801af80 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801af36:	8afb      	ldrh	r3, [r7, #22]
 801af38:	4619      	mov	r1, r3
 801af3a:	6878      	ldr	r0, [r7, #4]
 801af3c:	f7f6 fafe 	bl	801153c <pbuf_remove_header>
 801af40:	4603      	mov	r3, r0
 801af42:	2b00      	cmp	r3, #0
 801af44:	d11e      	bne.n	801af84 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801af46:	6839      	ldr	r1, [r7, #0]
 801af48:	6878      	ldr	r0, [r7, #4]
 801af4a:	f7fe fde9 	bl	8019b20 <ip4_input>
      break;
 801af4e:	e013      	b.n	801af78 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801af50:	683b      	ldr	r3, [r7, #0]
 801af52:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801af56:	f003 0308 	and.w	r3, r3, #8
 801af5a:	2b00      	cmp	r3, #0
 801af5c:	d014      	beq.n	801af88 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801af5e:	8afb      	ldrh	r3, [r7, #22]
 801af60:	4619      	mov	r1, r3
 801af62:	6878      	ldr	r0, [r7, #4]
 801af64:	f7f6 faea 	bl	801153c <pbuf_remove_header>
 801af68:	4603      	mov	r3, r0
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d10e      	bne.n	801af8c <ethernet_input+0x104>
        etharp_input(p, netif);
 801af6e:	6839      	ldr	r1, [r7, #0]
 801af70:	6878      	ldr	r0, [r7, #4]
 801af72:	f7fd ff89 	bl	8018e88 <etharp_input>
      break;
 801af76:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801af78:	2300      	movs	r3, #0
 801af7a:	e00c      	b.n	801af96 <ethernet_input+0x10e>
    goto free_and_return;
 801af7c:	bf00      	nop
 801af7e:	e006      	b.n	801af8e <ethernet_input+0x106>
        goto free_and_return;
 801af80:	bf00      	nop
 801af82:	e004      	b.n	801af8e <ethernet_input+0x106>
        goto free_and_return;
 801af84:	bf00      	nop
 801af86:	e002      	b.n	801af8e <ethernet_input+0x106>
        goto free_and_return;
 801af88:	bf00      	nop
 801af8a:	e000      	b.n	801af8e <ethernet_input+0x106>
        goto free_and_return;
 801af8c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801af8e:	6878      	ldr	r0, [r7, #4]
 801af90:	f7f6 fb8c 	bl	80116ac <pbuf_free>
  return ERR_OK;
 801af94:	2300      	movs	r3, #0
}
 801af96:	4618      	mov	r0, r3
 801af98:	3718      	adds	r7, #24
 801af9a:	46bd      	mov	sp, r7
 801af9c:	bd80      	pop	{r7, pc}
 801af9e:	bf00      	nop
 801afa0:	08021d60 	.word	0x08021d60

0801afa4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801afa4:	b580      	push	{r7, lr}
 801afa6:	b086      	sub	sp, #24
 801afa8:	af00      	add	r7, sp, #0
 801afaa:	60f8      	str	r0, [r7, #12]
 801afac:	60b9      	str	r1, [r7, #8]
 801afae:	607a      	str	r2, [r7, #4]
 801afb0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801afb2:	8c3b      	ldrh	r3, [r7, #32]
 801afb4:	4618      	mov	r0, r3
 801afb6:	f7f4 ff9b 	bl	800fef0 <lwip_htons>
 801afba:	4603      	mov	r3, r0
 801afbc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801afbe:	210e      	movs	r1, #14
 801afc0:	68b8      	ldr	r0, [r7, #8]
 801afc2:	f7f6 faab 	bl	801151c <pbuf_add_header>
 801afc6:	4603      	mov	r3, r0
 801afc8:	2b00      	cmp	r3, #0
 801afca:	d125      	bne.n	801b018 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801afcc:	68bb      	ldr	r3, [r7, #8]
 801afce:	685b      	ldr	r3, [r3, #4]
 801afd0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801afd2:	693b      	ldr	r3, [r7, #16]
 801afd4:	8afa      	ldrh	r2, [r7, #22]
 801afd6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801afd8:	693b      	ldr	r3, [r7, #16]
 801afda:	2206      	movs	r2, #6
 801afdc:	6839      	ldr	r1, [r7, #0]
 801afde:	4618      	mov	r0, r3
 801afe0:	f000 fa3c 	bl	801b45c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	3306      	adds	r3, #6
 801afe8:	2206      	movs	r2, #6
 801afea:	6879      	ldr	r1, [r7, #4]
 801afec:	4618      	mov	r0, r3
 801afee:	f000 fa35 	bl	801b45c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801aff2:	68fb      	ldr	r3, [r7, #12]
 801aff4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aff8:	2b06      	cmp	r3, #6
 801affa:	d006      	beq.n	801b00a <ethernet_output+0x66>
 801affc:	4b0a      	ldr	r3, [pc, #40]	; (801b028 <ethernet_output+0x84>)
 801affe:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b002:	490a      	ldr	r1, [pc, #40]	; (801b02c <ethernet_output+0x88>)
 801b004:	480a      	ldr	r0, [pc, #40]	; (801b030 <ethernet_output+0x8c>)
 801b006:	f000 fe81 	bl	801bd0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	699b      	ldr	r3, [r3, #24]
 801b00e:	68b9      	ldr	r1, [r7, #8]
 801b010:	68f8      	ldr	r0, [r7, #12]
 801b012:	4798      	blx	r3
 801b014:	4603      	mov	r3, r0
 801b016:	e002      	b.n	801b01e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b018:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b01a:	f06f 0301 	mvn.w	r3, #1
}
 801b01e:	4618      	mov	r0, r3
 801b020:	3718      	adds	r7, #24
 801b022:	46bd      	mov	sp, r7
 801b024:	bd80      	pop	{r7, pc}
 801b026:	bf00      	nop
 801b028:	08021b50 	.word	0x08021b50
 801b02c:	08021b88 	.word	0x08021b88
 801b030:	08021bbc 	.word	0x08021bbc

0801b034 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b034:	b580      	push	{r7, lr}
 801b036:	b086      	sub	sp, #24
 801b038:	af00      	add	r7, sp, #0
 801b03a:	6078      	str	r0, [r7, #4]
 801b03c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801b03e:	683b      	ldr	r3, [r7, #0]
 801b040:	60bb      	str	r3, [r7, #8]
 801b042:	2304      	movs	r3, #4
 801b044:	60fb      	str	r3, [r7, #12]
 801b046:	2300      	movs	r3, #0
 801b048:	613b      	str	r3, [r7, #16]
 801b04a:	2300      	movs	r3, #0
 801b04c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801b04e:	f107 0308 	add.w	r3, r7, #8
 801b052:	2100      	movs	r1, #0
 801b054:	4618      	mov	r0, r3
 801b056:	f7ee f80e 	bl	8009076 <osMessageCreate>
 801b05a:	4602      	mov	r2, r0
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	2b00      	cmp	r3, #0
 801b066:	d102      	bne.n	801b06e <sys_mbox_new+0x3a>
    return ERR_MEM;
 801b068:	f04f 33ff 	mov.w	r3, #4294967295
 801b06c:	e000      	b.n	801b070 <sys_mbox_new+0x3c>

  return ERR_OK;
 801b06e:	2300      	movs	r3, #0
}
 801b070:	4618      	mov	r0, r3
 801b072:	3718      	adds	r7, #24
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}

0801b078 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801b078:	b580      	push	{r7, lr}
 801b07a:	b082      	sub	sp, #8
 801b07c:	af00      	add	r7, sp, #0
 801b07e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	681b      	ldr	r3, [r3, #0]
 801b084:	4618      	mov	r0, r3
 801b086:	f7ee f8d3 	bl	8009230 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4618      	mov	r0, r3
 801b090:	f7ee f8e4 	bl	800925c <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801b094:	bf00      	nop
 801b096:	3708      	adds	r7, #8
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}

0801b09c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b09c:	b580      	push	{r7, lr}
 801b09e:	b084      	sub	sp, #16
 801b0a0:	af00      	add	r7, sp, #0
 801b0a2:	6078      	str	r0, [r7, #4]
 801b0a4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	6839      	ldr	r1, [r7, #0]
 801b0ac:	2200      	movs	r2, #0
 801b0ae:	4618      	mov	r0, r3
 801b0b0:	f7ee f80a 	bl	80090c8 <osMessagePut>
 801b0b4:	4603      	mov	r3, r0
 801b0b6:	2b00      	cmp	r3, #0
 801b0b8:	d102      	bne.n	801b0c0 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	73fb      	strb	r3, [r7, #15]
 801b0be:	e001      	b.n	801b0c4 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b0c0:	23ff      	movs	r3, #255	; 0xff
 801b0c2:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	3710      	adds	r7, #16
 801b0cc:	46bd      	mov	sp, r7
 801b0ce:	bd80      	pop	{r7, pc}

0801b0d0 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b0d0:	b580      	push	{r7, lr}
 801b0d2:	b08c      	sub	sp, #48	; 0x30
 801b0d4:	af00      	add	r7, sp, #0
 801b0d6:	61f8      	str	r0, [r7, #28]
 801b0d8:	61b9      	str	r1, [r7, #24]
 801b0da:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801b0dc:	f7ed fdf5 	bl	8008cca <osKernelSysTick>
 801b0e0:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d017      	beq.n	801b118 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801b0e8:	69fb      	ldr	r3, [r7, #28]
 801b0ea:	6819      	ldr	r1, [r3, #0]
 801b0ec:	f107 0320 	add.w	r3, r7, #32
 801b0f0:	697a      	ldr	r2, [r7, #20]
 801b0f2:	4618      	mov	r0, r3
 801b0f4:	f7ee f828 	bl	8009148 <osMessageGet>

    if(event.status == osEventMessage)
 801b0f8:	6a3b      	ldr	r3, [r7, #32]
 801b0fa:	2b10      	cmp	r3, #16
 801b0fc:	d109      	bne.n	801b112 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b100:	461a      	mov	r2, r3
 801b102:	69bb      	ldr	r3, [r7, #24]
 801b104:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801b106:	f7ed fde0 	bl	8008cca <osKernelSysTick>
 801b10a:	4602      	mov	r2, r0
 801b10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b10e:	1ad3      	subs	r3, r2, r3
 801b110:	e019      	b.n	801b146 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b112:	f04f 33ff 	mov.w	r3, #4294967295
 801b116:	e016      	b.n	801b146 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801b118:	69fb      	ldr	r3, [r7, #28]
 801b11a:	6819      	ldr	r1, [r3, #0]
 801b11c:	463b      	mov	r3, r7
 801b11e:	f04f 32ff 	mov.w	r2, #4294967295
 801b122:	4618      	mov	r0, r3
 801b124:	f7ee f810 	bl	8009148 <osMessageGet>
 801b128:	f107 0320 	add.w	r3, r7, #32
 801b12c:	463a      	mov	r2, r7
 801b12e:	ca07      	ldmia	r2, {r0, r1, r2}
 801b130:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b136:	461a      	mov	r2, r3
 801b138:	69bb      	ldr	r3, [r7, #24]
 801b13a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801b13c:	f7ed fdc5 	bl	8008cca <osKernelSysTick>
 801b140:	4602      	mov	r2, r0
 801b142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b144:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b146:	4618      	mov	r0, r3
 801b148:	3730      	adds	r7, #48	; 0x30
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}

0801b14e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801b14e:	b580      	push	{r7, lr}
 801b150:	b086      	sub	sp, #24
 801b152:	af00      	add	r7, sp, #0
 801b154:	6078      	str	r0, [r7, #4]
 801b156:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	6819      	ldr	r1, [r3, #0]
 801b15c:	f107 030c 	add.w	r3, r7, #12
 801b160:	2200      	movs	r2, #0
 801b162:	4618      	mov	r0, r3
 801b164:	f7ed fff0 	bl	8009148 <osMessageGet>

  if(event.status == osEventMessage)
 801b168:	68fb      	ldr	r3, [r7, #12]
 801b16a:	2b10      	cmp	r3, #16
 801b16c:	d105      	bne.n	801b17a <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801b16e:	693b      	ldr	r3, [r7, #16]
 801b170:	461a      	mov	r2, r3
 801b172:	683b      	ldr	r3, [r7, #0]
 801b174:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801b176:	2300      	movs	r3, #0
 801b178:	e001      	b.n	801b17e <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801b17a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801b17e:	4618      	mov	r0, r3
 801b180:	3718      	adds	r7, #24
 801b182:	46bd      	mov	sp, r7
 801b184:	bd80      	pop	{r7, pc}

0801b186 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b186:	b480      	push	{r7}
 801b188:	b083      	sub	sp, #12
 801b18a:	af00      	add	r7, sp, #0
 801b18c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b18e:	687b      	ldr	r3, [r7, #4]
 801b190:	681b      	ldr	r3, [r3, #0]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d101      	bne.n	801b19a <sys_mbox_valid+0x14>
    return 0;
 801b196:	2300      	movs	r3, #0
 801b198:	e000      	b.n	801b19c <sys_mbox_valid+0x16>
  else
    return 1;
 801b19a:	2301      	movs	r3, #1
}
 801b19c:	4618      	mov	r0, r3
 801b19e:	370c      	adds	r7, #12
 801b1a0:	46bd      	mov	sp, r7
 801b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1a6:	4770      	bx	lr

0801b1a8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801b1a8:	b480      	push	{r7}
 801b1aa:	b083      	sub	sp, #12
 801b1ac:	af00      	add	r7, sp, #0
 801b1ae:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	601a      	str	r2, [r3, #0]
}
 801b1b6:	bf00      	nop
 801b1b8:	370c      	adds	r7, #12
 801b1ba:	46bd      	mov	sp, r7
 801b1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c0:	4770      	bx	lr

0801b1c2 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801b1c2:	b580      	push	{r7, lr}
 801b1c4:	b084      	sub	sp, #16
 801b1c6:	af00      	add	r7, sp, #0
 801b1c8:	6078      	str	r0, [r7, #4]
 801b1ca:	460b      	mov	r3, r1
 801b1cc:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801b1ce:	2300      	movs	r3, #0
 801b1d0:	60bb      	str	r3, [r7, #8]
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801b1d6:	f107 0308 	add.w	r3, r7, #8
 801b1da:	2101      	movs	r1, #1
 801b1dc:	4618      	mov	r0, r3
 801b1de:	f7ed fe81 	bl	8008ee4 <osSemaphoreCreate>
 801b1e2:	4602      	mov	r2, r0
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d102      	bne.n	801b1f6 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 801b1f4:	e009      	b.n	801b20a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801b1f6:	78fb      	ldrb	r3, [r7, #3]
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d105      	bne.n	801b208 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	2100      	movs	r1, #0
 801b202:	4618      	mov	r0, r3
 801b204:	f7ed fea0 	bl	8008f48 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801b208:	2300      	movs	r3, #0
}
 801b20a:	4618      	mov	r0, r3
 801b20c:	3710      	adds	r7, #16
 801b20e:	46bd      	mov	sp, r7
 801b210:	bd80      	pop	{r7, pc}

0801b212 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801b212:	b580      	push	{r7, lr}
 801b214:	b084      	sub	sp, #16
 801b216:	af00      	add	r7, sp, #0
 801b218:	6078      	str	r0, [r7, #4]
 801b21a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801b21c:	f7ed fd55 	bl	8008cca <osKernelSysTick>
 801b220:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801b222:	683b      	ldr	r3, [r7, #0]
 801b224:	2b00      	cmp	r3, #0
 801b226:	d011      	beq.n	801b24c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801b228:	687b      	ldr	r3, [r7, #4]
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	6839      	ldr	r1, [r7, #0]
 801b22e:	4618      	mov	r0, r3
 801b230:	f7ed fe8a 	bl	8008f48 <osSemaphoreWait>
 801b234:	4603      	mov	r3, r0
 801b236:	2b00      	cmp	r3, #0
 801b238:	d105      	bne.n	801b246 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801b23a:	f7ed fd46 	bl	8008cca <osKernelSysTick>
 801b23e:	4602      	mov	r2, r0
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	1ad3      	subs	r3, r2, r3
 801b244:	e012      	b.n	801b26c <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b246:	f04f 33ff 	mov.w	r3, #4294967295
 801b24a:	e00f      	b.n	801b26c <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801b24c:	bf00      	nop
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	681b      	ldr	r3, [r3, #0]
 801b252:	f04f 31ff 	mov.w	r1, #4294967295
 801b256:	4618      	mov	r0, r3
 801b258:	f7ed fe76 	bl	8008f48 <osSemaphoreWait>
 801b25c:	4603      	mov	r3, r0
 801b25e:	2b00      	cmp	r3, #0
 801b260:	d1f5      	bne.n	801b24e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801b262:	f7ed fd32 	bl	8008cca <osKernelSysTick>
 801b266:	4602      	mov	r2, r0
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801b26c:	4618      	mov	r0, r3
 801b26e:	3710      	adds	r7, #16
 801b270:	46bd      	mov	sp, r7
 801b272:	bd80      	pop	{r7, pc}

0801b274 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801b274:	b580      	push	{r7, lr}
 801b276:	b082      	sub	sp, #8
 801b278:	af00      	add	r7, sp, #0
 801b27a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801b27c:	687b      	ldr	r3, [r7, #4]
 801b27e:	681b      	ldr	r3, [r3, #0]
 801b280:	4618      	mov	r0, r3
 801b282:	f7ed feaf 	bl	8008fe4 <osSemaphoreRelease>
}
 801b286:	bf00      	nop
 801b288:	3708      	adds	r7, #8
 801b28a:	46bd      	mov	sp, r7
 801b28c:	bd80      	pop	{r7, pc}

0801b28e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801b28e:	b580      	push	{r7, lr}
 801b290:	b082      	sub	sp, #8
 801b292:	af00      	add	r7, sp, #0
 801b294:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	4618      	mov	r0, r3
 801b29c:	f7ed fed8 	bl	8009050 <osSemaphoreDelete>
}
 801b2a0:	bf00      	nop
 801b2a2:	3708      	adds	r7, #8
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	bd80      	pop	{r7, pc}

0801b2a8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801b2a8:	b480      	push	{r7}
 801b2aa:	b083      	sub	sp, #12
 801b2ac:	af00      	add	r7, sp, #0
 801b2ae:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801b2b0:	687b      	ldr	r3, [r7, #4]
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d101      	bne.n	801b2bc <sys_sem_valid+0x14>
    return 0;
 801b2b8:	2300      	movs	r3, #0
 801b2ba:	e000      	b.n	801b2be <sys_sem_valid+0x16>
  else
    return 1;
 801b2bc:	2301      	movs	r3, #1
}
 801b2be:	4618      	mov	r0, r3
 801b2c0:	370c      	adds	r7, #12
 801b2c2:	46bd      	mov	sp, r7
 801b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2c8:	4770      	bx	lr

0801b2ca <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801b2ca:	b480      	push	{r7}
 801b2cc:	b083      	sub	sp, #12
 801b2ce:	af00      	add	r7, sp, #0
 801b2d0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	2200      	movs	r2, #0
 801b2d6:	601a      	str	r2, [r3, #0]
}
 801b2d8:	bf00      	nop
 801b2da:	370c      	adds	r7, #12
 801b2dc:	46bd      	mov	sp, r7
 801b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2e2:	4770      	bx	lr

0801b2e4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801b2e8:	4803      	ldr	r0, [pc, #12]	; (801b2f8 <sys_init+0x14>)
 801b2ea:	f7ed fd5e 	bl	8008daa <osMutexCreate>
 801b2ee:	4603      	mov	r3, r0
 801b2f0:	4a02      	ldr	r2, [pc, #8]	; (801b2fc <sys_init+0x18>)
 801b2f2:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801b2f4:	bf00      	nop
 801b2f6:	bd80      	pop	{r7, pc}
 801b2f8:	08021d70 	.word	0x08021d70
 801b2fc:	2000d7dc 	.word	0x2000d7dc

0801b300 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b300:	b580      	push	{r7, lr}
 801b302:	b084      	sub	sp, #16
 801b304:	af00      	add	r7, sp, #0
 801b306:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801b308:	2300      	movs	r3, #0
 801b30a:	60bb      	str	r3, [r7, #8]
 801b30c:	2300      	movs	r3, #0
 801b30e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801b310:	f107 0308 	add.w	r3, r7, #8
 801b314:	4618      	mov	r0, r3
 801b316:	f7ed fd48 	bl	8008daa <osMutexCreate>
 801b31a:	4602      	mov	r2, r0
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	681b      	ldr	r3, [r3, #0]
 801b324:	2b00      	cmp	r3, #0
 801b326:	d102      	bne.n	801b32e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b328:	f04f 33ff 	mov.w	r3, #4294967295
 801b32c:	e000      	b.n	801b330 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b32e:	2300      	movs	r3, #0
}
 801b330:	4618      	mov	r0, r3
 801b332:	3710      	adds	r7, #16
 801b334:	46bd      	mov	sp, r7
 801b336:	bd80      	pop	{r7, pc}

0801b338 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b338:	b580      	push	{r7, lr}
 801b33a:	b082      	sub	sp, #8
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801b340:	687b      	ldr	r3, [r7, #4]
 801b342:	681b      	ldr	r3, [r3, #0]
 801b344:	f04f 31ff 	mov.w	r1, #4294967295
 801b348:	4618      	mov	r0, r3
 801b34a:	f7ed fd47 	bl	8008ddc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801b34e:	bf00      	nop
 801b350:	3708      	adds	r7, #8
 801b352:	46bd      	mov	sp, r7
 801b354:	bd80      	pop	{r7, pc}

0801b356 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b356:	b580      	push	{r7, lr}
 801b358:	b082      	sub	sp, #8
 801b35a:	af00      	add	r7, sp, #0
 801b35c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	681b      	ldr	r3, [r3, #0]
 801b362:	4618      	mov	r0, r3
 801b364:	f7ed fd88 	bl	8008e78 <osMutexRelease>
}
 801b368:	bf00      	nop
 801b36a:	3708      	adds	r7, #8
 801b36c:	46bd      	mov	sp, r7
 801b36e:	bd80      	pop	{r7, pc}

0801b370 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b370:	b580      	push	{r7, lr}
 801b372:	b08c      	sub	sp, #48	; 0x30
 801b374:	af00      	add	r7, sp, #0
 801b376:	60f8      	str	r0, [r7, #12]
 801b378:	60b9      	str	r1, [r7, #8]
 801b37a:	607a      	str	r2, [r7, #4]
 801b37c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801b37e:	f107 0314 	add.w	r3, r7, #20
 801b382:	2200      	movs	r2, #0
 801b384:	601a      	str	r2, [r3, #0]
 801b386:	605a      	str	r2, [r3, #4]
 801b388:	609a      	str	r2, [r3, #8]
 801b38a:	60da      	str	r2, [r3, #12]
 801b38c:	611a      	str	r2, [r3, #16]
 801b38e:	615a      	str	r2, [r3, #20]
 801b390:	619a      	str	r2, [r3, #24]
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	617b      	str	r3, [r7, #20]
 801b396:	68bb      	ldr	r3, [r7, #8]
 801b398:	61bb      	str	r3, [r7, #24]
 801b39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b39c:	b21b      	sxth	r3, r3
 801b39e:	83bb      	strh	r3, [r7, #28]
 801b3a0:	683b      	ldr	r3, [r7, #0]
 801b3a2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801b3a4:	f107 0314 	add.w	r3, r7, #20
 801b3a8:	6879      	ldr	r1, [r7, #4]
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	f7ed fc9d 	bl	8008cea <osThreadCreate>
 801b3b0:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801b3b2:	4618      	mov	r0, r3
 801b3b4:	3730      	adds	r7, #48	; 0x30
 801b3b6:	46bd      	mov	sp, r7
 801b3b8:	bd80      	pop	{r7, pc}
	...

0801b3bc <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b3bc:	b580      	push	{r7, lr}
 801b3be:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801b3c0:	4b04      	ldr	r3, [pc, #16]	; (801b3d4 <sys_arch_protect+0x18>)
 801b3c2:	681b      	ldr	r3, [r3, #0]
 801b3c4:	f04f 31ff 	mov.w	r1, #4294967295
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	f7ed fd07 	bl	8008ddc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801b3ce:	2301      	movs	r3, #1
}
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	bd80      	pop	{r7, pc}
 801b3d4:	2000d7dc 	.word	0x2000d7dc

0801b3d8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b3d8:	b580      	push	{r7, lr}
 801b3da:	b082      	sub	sp, #8
 801b3dc:	af00      	add	r7, sp, #0
 801b3de:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b3e0:	4b04      	ldr	r3, [pc, #16]	; (801b3f4 <sys_arch_unprotect+0x1c>)
 801b3e2:	681b      	ldr	r3, [r3, #0]
 801b3e4:	4618      	mov	r0, r3
 801b3e6:	f7ed fd47 	bl	8008e78 <osMutexRelease>
}
 801b3ea:	bf00      	nop
 801b3ec:	3708      	adds	r7, #8
 801b3ee:	46bd      	mov	sp, r7
 801b3f0:	bd80      	pop	{r7, pc}
 801b3f2:	bf00      	nop
 801b3f4:	2000d7dc 	.word	0x2000d7dc

0801b3f8 <__libc_init_array>:
 801b3f8:	b570      	push	{r4, r5, r6, lr}
 801b3fa:	4d0d      	ldr	r5, [pc, #52]	; (801b430 <__libc_init_array+0x38>)
 801b3fc:	4c0d      	ldr	r4, [pc, #52]	; (801b434 <__libc_init_array+0x3c>)
 801b3fe:	1b64      	subs	r4, r4, r5
 801b400:	10a4      	asrs	r4, r4, #2
 801b402:	2600      	movs	r6, #0
 801b404:	42a6      	cmp	r6, r4
 801b406:	d109      	bne.n	801b41c <__libc_init_array+0x24>
 801b408:	4d0b      	ldr	r5, [pc, #44]	; (801b438 <__libc_init_array+0x40>)
 801b40a:	4c0c      	ldr	r4, [pc, #48]	; (801b43c <__libc_init_array+0x44>)
 801b40c:	f002 fe0a 	bl	801e024 <_init>
 801b410:	1b64      	subs	r4, r4, r5
 801b412:	10a4      	asrs	r4, r4, #2
 801b414:	2600      	movs	r6, #0
 801b416:	42a6      	cmp	r6, r4
 801b418:	d105      	bne.n	801b426 <__libc_init_array+0x2e>
 801b41a:	bd70      	pop	{r4, r5, r6, pc}
 801b41c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b420:	4798      	blx	r3
 801b422:	3601      	adds	r6, #1
 801b424:	e7ee      	b.n	801b404 <__libc_init_array+0xc>
 801b426:	f855 3b04 	ldr.w	r3, [r5], #4
 801b42a:	4798      	blx	r3
 801b42c:	3601      	adds	r6, #1
 801b42e:	e7f2      	b.n	801b416 <__libc_init_array+0x1e>
 801b430:	080221c8 	.word	0x080221c8
 801b434:	080221c8 	.word	0x080221c8
 801b438:	080221c8 	.word	0x080221c8
 801b43c:	080221cc 	.word	0x080221cc

0801b440 <memcmp>:
 801b440:	b530      	push	{r4, r5, lr}
 801b442:	3901      	subs	r1, #1
 801b444:	2400      	movs	r4, #0
 801b446:	42a2      	cmp	r2, r4
 801b448:	d101      	bne.n	801b44e <memcmp+0xe>
 801b44a:	2000      	movs	r0, #0
 801b44c:	e005      	b.n	801b45a <memcmp+0x1a>
 801b44e:	5d03      	ldrb	r3, [r0, r4]
 801b450:	3401      	adds	r4, #1
 801b452:	5d0d      	ldrb	r5, [r1, r4]
 801b454:	42ab      	cmp	r3, r5
 801b456:	d0f6      	beq.n	801b446 <memcmp+0x6>
 801b458:	1b58      	subs	r0, r3, r5
 801b45a:	bd30      	pop	{r4, r5, pc}

0801b45c <memcpy>:
 801b45c:	440a      	add	r2, r1
 801b45e:	4291      	cmp	r1, r2
 801b460:	f100 33ff 	add.w	r3, r0, #4294967295
 801b464:	d100      	bne.n	801b468 <memcpy+0xc>
 801b466:	4770      	bx	lr
 801b468:	b510      	push	{r4, lr}
 801b46a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b46e:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b472:	4291      	cmp	r1, r2
 801b474:	d1f9      	bne.n	801b46a <memcpy+0xe>
 801b476:	bd10      	pop	{r4, pc}

0801b478 <memset>:
 801b478:	4402      	add	r2, r0
 801b47a:	4603      	mov	r3, r0
 801b47c:	4293      	cmp	r3, r2
 801b47e:	d100      	bne.n	801b482 <memset+0xa>
 801b480:	4770      	bx	lr
 801b482:	f803 1b01 	strb.w	r1, [r3], #1
 801b486:	e7f9      	b.n	801b47c <memset+0x4>

0801b488 <__cvt>:
 801b488:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b48a:	ed2d 8b02 	vpush	{d8}
 801b48e:	eeb0 8b40 	vmov.f64	d8, d0
 801b492:	b085      	sub	sp, #20
 801b494:	4617      	mov	r7, r2
 801b496:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801b498:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801b49a:	ee18 2a90 	vmov	r2, s17
 801b49e:	f025 0520 	bic.w	r5, r5, #32
 801b4a2:	2a00      	cmp	r2, #0
 801b4a4:	bfb6      	itet	lt
 801b4a6:	222d      	movlt	r2, #45	; 0x2d
 801b4a8:	2200      	movge	r2, #0
 801b4aa:	eeb1 8b40 	vneglt.f64	d8, d0
 801b4ae:	2d46      	cmp	r5, #70	; 0x46
 801b4b0:	460c      	mov	r4, r1
 801b4b2:	701a      	strb	r2, [r3, #0]
 801b4b4:	d004      	beq.n	801b4c0 <__cvt+0x38>
 801b4b6:	2d45      	cmp	r5, #69	; 0x45
 801b4b8:	d100      	bne.n	801b4bc <__cvt+0x34>
 801b4ba:	3401      	adds	r4, #1
 801b4bc:	2102      	movs	r1, #2
 801b4be:	e000      	b.n	801b4c2 <__cvt+0x3a>
 801b4c0:	2103      	movs	r1, #3
 801b4c2:	ab03      	add	r3, sp, #12
 801b4c4:	9301      	str	r3, [sp, #4]
 801b4c6:	ab02      	add	r3, sp, #8
 801b4c8:	9300      	str	r3, [sp, #0]
 801b4ca:	4622      	mov	r2, r4
 801b4cc:	4633      	mov	r3, r6
 801b4ce:	eeb0 0b48 	vmov.f64	d0, d8
 801b4d2:	f000 ff21 	bl	801c318 <_dtoa_r>
 801b4d6:	2d47      	cmp	r5, #71	; 0x47
 801b4d8:	d109      	bne.n	801b4ee <__cvt+0x66>
 801b4da:	07fb      	lsls	r3, r7, #31
 801b4dc:	d407      	bmi.n	801b4ee <__cvt+0x66>
 801b4de:	9b03      	ldr	r3, [sp, #12]
 801b4e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b4e2:	1a1b      	subs	r3, r3, r0
 801b4e4:	6013      	str	r3, [r2, #0]
 801b4e6:	b005      	add	sp, #20
 801b4e8:	ecbd 8b02 	vpop	{d8}
 801b4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b4ee:	2d46      	cmp	r5, #70	; 0x46
 801b4f0:	eb00 0204 	add.w	r2, r0, r4
 801b4f4:	d10c      	bne.n	801b510 <__cvt+0x88>
 801b4f6:	7803      	ldrb	r3, [r0, #0]
 801b4f8:	2b30      	cmp	r3, #48	; 0x30
 801b4fa:	d107      	bne.n	801b50c <__cvt+0x84>
 801b4fc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b504:	bf1c      	itt	ne
 801b506:	f1c4 0401 	rsbne	r4, r4, #1
 801b50a:	6034      	strne	r4, [r6, #0]
 801b50c:	6833      	ldr	r3, [r6, #0]
 801b50e:	441a      	add	r2, r3
 801b510:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b518:	bf08      	it	eq
 801b51a:	9203      	streq	r2, [sp, #12]
 801b51c:	2130      	movs	r1, #48	; 0x30
 801b51e:	9b03      	ldr	r3, [sp, #12]
 801b520:	4293      	cmp	r3, r2
 801b522:	d2dc      	bcs.n	801b4de <__cvt+0x56>
 801b524:	1c5c      	adds	r4, r3, #1
 801b526:	9403      	str	r4, [sp, #12]
 801b528:	7019      	strb	r1, [r3, #0]
 801b52a:	e7f8      	b.n	801b51e <__cvt+0x96>

0801b52c <__exponent>:
 801b52c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801b52e:	4603      	mov	r3, r0
 801b530:	2900      	cmp	r1, #0
 801b532:	bfb8      	it	lt
 801b534:	4249      	neglt	r1, r1
 801b536:	f803 2b02 	strb.w	r2, [r3], #2
 801b53a:	bfb4      	ite	lt
 801b53c:	222d      	movlt	r2, #45	; 0x2d
 801b53e:	222b      	movge	r2, #43	; 0x2b
 801b540:	2909      	cmp	r1, #9
 801b542:	7042      	strb	r2, [r0, #1]
 801b544:	dd2a      	ble.n	801b59c <__exponent+0x70>
 801b546:	f10d 0407 	add.w	r4, sp, #7
 801b54a:	46a4      	mov	ip, r4
 801b54c:	270a      	movs	r7, #10
 801b54e:	46a6      	mov	lr, r4
 801b550:	460a      	mov	r2, r1
 801b552:	fb91 f6f7 	sdiv	r6, r1, r7
 801b556:	fb07 1516 	mls	r5, r7, r6, r1
 801b55a:	3530      	adds	r5, #48	; 0x30
 801b55c:	2a63      	cmp	r2, #99	; 0x63
 801b55e:	f104 34ff 	add.w	r4, r4, #4294967295
 801b562:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801b566:	4631      	mov	r1, r6
 801b568:	dcf1      	bgt.n	801b54e <__exponent+0x22>
 801b56a:	3130      	adds	r1, #48	; 0x30
 801b56c:	f1ae 0502 	sub.w	r5, lr, #2
 801b570:	f804 1c01 	strb.w	r1, [r4, #-1]
 801b574:	1c44      	adds	r4, r0, #1
 801b576:	4629      	mov	r1, r5
 801b578:	4561      	cmp	r1, ip
 801b57a:	d30a      	bcc.n	801b592 <__exponent+0x66>
 801b57c:	f10d 0209 	add.w	r2, sp, #9
 801b580:	eba2 020e 	sub.w	r2, r2, lr
 801b584:	4565      	cmp	r5, ip
 801b586:	bf88      	it	hi
 801b588:	2200      	movhi	r2, #0
 801b58a:	4413      	add	r3, r2
 801b58c:	1a18      	subs	r0, r3, r0
 801b58e:	b003      	add	sp, #12
 801b590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b592:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b596:	f804 2f01 	strb.w	r2, [r4, #1]!
 801b59a:	e7ed      	b.n	801b578 <__exponent+0x4c>
 801b59c:	2330      	movs	r3, #48	; 0x30
 801b59e:	3130      	adds	r1, #48	; 0x30
 801b5a0:	7083      	strb	r3, [r0, #2]
 801b5a2:	70c1      	strb	r1, [r0, #3]
 801b5a4:	1d03      	adds	r3, r0, #4
 801b5a6:	e7f1      	b.n	801b58c <__exponent+0x60>

0801b5a8 <_printf_float>:
 801b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5ac:	b08b      	sub	sp, #44	; 0x2c
 801b5ae:	460c      	mov	r4, r1
 801b5b0:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801b5b4:	4616      	mov	r6, r2
 801b5b6:	461f      	mov	r7, r3
 801b5b8:	4605      	mov	r5, r0
 801b5ba:	f001 fdf9 	bl	801d1b0 <_localeconv_r>
 801b5be:	f8d0 b000 	ldr.w	fp, [r0]
 801b5c2:	4658      	mov	r0, fp
 801b5c4:	f7e4 fe3c 	bl	8000240 <strlen>
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	9308      	str	r3, [sp, #32]
 801b5cc:	f8d8 3000 	ldr.w	r3, [r8]
 801b5d0:	f894 9018 	ldrb.w	r9, [r4, #24]
 801b5d4:	6822      	ldr	r2, [r4, #0]
 801b5d6:	3307      	adds	r3, #7
 801b5d8:	f023 0307 	bic.w	r3, r3, #7
 801b5dc:	f103 0108 	add.w	r1, r3, #8
 801b5e0:	f8c8 1000 	str.w	r1, [r8]
 801b5e4:	4682      	mov	sl, r0
 801b5e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 801b5ea:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 801b5ee:	ed9f 7b98 	vldr	d7, [pc, #608]	; 801b850 <_printf_float+0x2a8>
 801b5f2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801b5f6:	eeb0 6bc0 	vabs.f64	d6, d0
 801b5fa:	eeb4 6b47 	vcmp.f64	d6, d7
 801b5fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b602:	dd24      	ble.n	801b64e <_printf_float+0xa6>
 801b604:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801b608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b60c:	d502      	bpl.n	801b614 <_printf_float+0x6c>
 801b60e:	232d      	movs	r3, #45	; 0x2d
 801b610:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b614:	4b90      	ldr	r3, [pc, #576]	; (801b858 <_printf_float+0x2b0>)
 801b616:	4891      	ldr	r0, [pc, #580]	; (801b85c <_printf_float+0x2b4>)
 801b618:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801b61c:	bf94      	ite	ls
 801b61e:	4698      	movls	r8, r3
 801b620:	4680      	movhi	r8, r0
 801b622:	2303      	movs	r3, #3
 801b624:	6123      	str	r3, [r4, #16]
 801b626:	f022 0204 	bic.w	r2, r2, #4
 801b62a:	2300      	movs	r3, #0
 801b62c:	6022      	str	r2, [r4, #0]
 801b62e:	9304      	str	r3, [sp, #16]
 801b630:	9700      	str	r7, [sp, #0]
 801b632:	4633      	mov	r3, r6
 801b634:	aa09      	add	r2, sp, #36	; 0x24
 801b636:	4621      	mov	r1, r4
 801b638:	4628      	mov	r0, r5
 801b63a:	f000 f9d3 	bl	801b9e4 <_printf_common>
 801b63e:	3001      	adds	r0, #1
 801b640:	f040 808a 	bne.w	801b758 <_printf_float+0x1b0>
 801b644:	f04f 30ff 	mov.w	r0, #4294967295
 801b648:	b00b      	add	sp, #44	; 0x2c
 801b64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b64e:	eeb4 0b40 	vcmp.f64	d0, d0
 801b652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b656:	d709      	bvc.n	801b66c <_printf_float+0xc4>
 801b658:	ee10 3a90 	vmov	r3, s1
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	bfbc      	itt	lt
 801b660:	232d      	movlt	r3, #45	; 0x2d
 801b662:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801b666:	487e      	ldr	r0, [pc, #504]	; (801b860 <_printf_float+0x2b8>)
 801b668:	4b7e      	ldr	r3, [pc, #504]	; (801b864 <_printf_float+0x2bc>)
 801b66a:	e7d5      	b.n	801b618 <_printf_float+0x70>
 801b66c:	6863      	ldr	r3, [r4, #4]
 801b66e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801b672:	9104      	str	r1, [sp, #16]
 801b674:	1c59      	adds	r1, r3, #1
 801b676:	d13c      	bne.n	801b6f2 <_printf_float+0x14a>
 801b678:	2306      	movs	r3, #6
 801b67a:	6063      	str	r3, [r4, #4]
 801b67c:	2300      	movs	r3, #0
 801b67e:	9303      	str	r3, [sp, #12]
 801b680:	ab08      	add	r3, sp, #32
 801b682:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801b686:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801b68a:	ab07      	add	r3, sp, #28
 801b68c:	6861      	ldr	r1, [r4, #4]
 801b68e:	9300      	str	r3, [sp, #0]
 801b690:	6022      	str	r2, [r4, #0]
 801b692:	f10d 031b 	add.w	r3, sp, #27
 801b696:	4628      	mov	r0, r5
 801b698:	f7ff fef6 	bl	801b488 <__cvt>
 801b69c:	9b04      	ldr	r3, [sp, #16]
 801b69e:	9907      	ldr	r1, [sp, #28]
 801b6a0:	2b47      	cmp	r3, #71	; 0x47
 801b6a2:	4680      	mov	r8, r0
 801b6a4:	d108      	bne.n	801b6b8 <_printf_float+0x110>
 801b6a6:	1cc8      	adds	r0, r1, #3
 801b6a8:	db02      	blt.n	801b6b0 <_printf_float+0x108>
 801b6aa:	6863      	ldr	r3, [r4, #4]
 801b6ac:	4299      	cmp	r1, r3
 801b6ae:	dd41      	ble.n	801b734 <_printf_float+0x18c>
 801b6b0:	f1a9 0902 	sub.w	r9, r9, #2
 801b6b4:	fa5f f989 	uxtb.w	r9, r9
 801b6b8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b6bc:	d820      	bhi.n	801b700 <_printf_float+0x158>
 801b6be:	3901      	subs	r1, #1
 801b6c0:	464a      	mov	r2, r9
 801b6c2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801b6c6:	9107      	str	r1, [sp, #28]
 801b6c8:	f7ff ff30 	bl	801b52c <__exponent>
 801b6cc:	9a08      	ldr	r2, [sp, #32]
 801b6ce:	9004      	str	r0, [sp, #16]
 801b6d0:	1813      	adds	r3, r2, r0
 801b6d2:	2a01      	cmp	r2, #1
 801b6d4:	6123      	str	r3, [r4, #16]
 801b6d6:	dc02      	bgt.n	801b6de <_printf_float+0x136>
 801b6d8:	6822      	ldr	r2, [r4, #0]
 801b6da:	07d2      	lsls	r2, r2, #31
 801b6dc:	d501      	bpl.n	801b6e2 <_printf_float+0x13a>
 801b6de:	3301      	adds	r3, #1
 801b6e0:	6123      	str	r3, [r4, #16]
 801b6e2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d0a2      	beq.n	801b630 <_printf_float+0x88>
 801b6ea:	232d      	movs	r3, #45	; 0x2d
 801b6ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b6f0:	e79e      	b.n	801b630 <_printf_float+0x88>
 801b6f2:	9904      	ldr	r1, [sp, #16]
 801b6f4:	2947      	cmp	r1, #71	; 0x47
 801b6f6:	d1c1      	bne.n	801b67c <_printf_float+0xd4>
 801b6f8:	2b00      	cmp	r3, #0
 801b6fa:	d1bf      	bne.n	801b67c <_printf_float+0xd4>
 801b6fc:	2301      	movs	r3, #1
 801b6fe:	e7bc      	b.n	801b67a <_printf_float+0xd2>
 801b700:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801b704:	d118      	bne.n	801b738 <_printf_float+0x190>
 801b706:	2900      	cmp	r1, #0
 801b708:	6863      	ldr	r3, [r4, #4]
 801b70a:	dd0b      	ble.n	801b724 <_printf_float+0x17c>
 801b70c:	6121      	str	r1, [r4, #16]
 801b70e:	b913      	cbnz	r3, 801b716 <_printf_float+0x16e>
 801b710:	6822      	ldr	r2, [r4, #0]
 801b712:	07d0      	lsls	r0, r2, #31
 801b714:	d502      	bpl.n	801b71c <_printf_float+0x174>
 801b716:	3301      	adds	r3, #1
 801b718:	440b      	add	r3, r1
 801b71a:	6123      	str	r3, [r4, #16]
 801b71c:	2300      	movs	r3, #0
 801b71e:	65a1      	str	r1, [r4, #88]	; 0x58
 801b720:	9304      	str	r3, [sp, #16]
 801b722:	e7de      	b.n	801b6e2 <_printf_float+0x13a>
 801b724:	b913      	cbnz	r3, 801b72c <_printf_float+0x184>
 801b726:	6822      	ldr	r2, [r4, #0]
 801b728:	07d2      	lsls	r2, r2, #31
 801b72a:	d501      	bpl.n	801b730 <_printf_float+0x188>
 801b72c:	3302      	adds	r3, #2
 801b72e:	e7f4      	b.n	801b71a <_printf_float+0x172>
 801b730:	2301      	movs	r3, #1
 801b732:	e7f2      	b.n	801b71a <_printf_float+0x172>
 801b734:	f04f 0967 	mov.w	r9, #103	; 0x67
 801b738:	9b08      	ldr	r3, [sp, #32]
 801b73a:	4299      	cmp	r1, r3
 801b73c:	db05      	blt.n	801b74a <_printf_float+0x1a2>
 801b73e:	6823      	ldr	r3, [r4, #0]
 801b740:	6121      	str	r1, [r4, #16]
 801b742:	07d8      	lsls	r0, r3, #31
 801b744:	d5ea      	bpl.n	801b71c <_printf_float+0x174>
 801b746:	1c4b      	adds	r3, r1, #1
 801b748:	e7e7      	b.n	801b71a <_printf_float+0x172>
 801b74a:	2900      	cmp	r1, #0
 801b74c:	bfd4      	ite	le
 801b74e:	f1c1 0202 	rsble	r2, r1, #2
 801b752:	2201      	movgt	r2, #1
 801b754:	4413      	add	r3, r2
 801b756:	e7e0      	b.n	801b71a <_printf_float+0x172>
 801b758:	6823      	ldr	r3, [r4, #0]
 801b75a:	055a      	lsls	r2, r3, #21
 801b75c:	d407      	bmi.n	801b76e <_printf_float+0x1c6>
 801b75e:	6923      	ldr	r3, [r4, #16]
 801b760:	4642      	mov	r2, r8
 801b762:	4631      	mov	r1, r6
 801b764:	4628      	mov	r0, r5
 801b766:	47b8      	blx	r7
 801b768:	3001      	adds	r0, #1
 801b76a:	d12a      	bne.n	801b7c2 <_printf_float+0x21a>
 801b76c:	e76a      	b.n	801b644 <_printf_float+0x9c>
 801b76e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801b772:	f240 80e2 	bls.w	801b93a <_printf_float+0x392>
 801b776:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b77a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b782:	d133      	bne.n	801b7ec <_printf_float+0x244>
 801b784:	4a38      	ldr	r2, [pc, #224]	; (801b868 <_printf_float+0x2c0>)
 801b786:	2301      	movs	r3, #1
 801b788:	4631      	mov	r1, r6
 801b78a:	4628      	mov	r0, r5
 801b78c:	47b8      	blx	r7
 801b78e:	3001      	adds	r0, #1
 801b790:	f43f af58 	beq.w	801b644 <_printf_float+0x9c>
 801b794:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b798:	429a      	cmp	r2, r3
 801b79a:	db02      	blt.n	801b7a2 <_printf_float+0x1fa>
 801b79c:	6823      	ldr	r3, [r4, #0]
 801b79e:	07d8      	lsls	r0, r3, #31
 801b7a0:	d50f      	bpl.n	801b7c2 <_printf_float+0x21a>
 801b7a2:	4653      	mov	r3, sl
 801b7a4:	465a      	mov	r2, fp
 801b7a6:	4631      	mov	r1, r6
 801b7a8:	4628      	mov	r0, r5
 801b7aa:	47b8      	blx	r7
 801b7ac:	3001      	adds	r0, #1
 801b7ae:	f43f af49 	beq.w	801b644 <_printf_float+0x9c>
 801b7b2:	f04f 0800 	mov.w	r8, #0
 801b7b6:	f104 091a 	add.w	r9, r4, #26
 801b7ba:	9b08      	ldr	r3, [sp, #32]
 801b7bc:	3b01      	subs	r3, #1
 801b7be:	4543      	cmp	r3, r8
 801b7c0:	dc09      	bgt.n	801b7d6 <_printf_float+0x22e>
 801b7c2:	6823      	ldr	r3, [r4, #0]
 801b7c4:	079b      	lsls	r3, r3, #30
 801b7c6:	f100 8108 	bmi.w	801b9da <_printf_float+0x432>
 801b7ca:	68e0      	ldr	r0, [r4, #12]
 801b7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b7ce:	4298      	cmp	r0, r3
 801b7d0:	bfb8      	it	lt
 801b7d2:	4618      	movlt	r0, r3
 801b7d4:	e738      	b.n	801b648 <_printf_float+0xa0>
 801b7d6:	2301      	movs	r3, #1
 801b7d8:	464a      	mov	r2, r9
 801b7da:	4631      	mov	r1, r6
 801b7dc:	4628      	mov	r0, r5
 801b7de:	47b8      	blx	r7
 801b7e0:	3001      	adds	r0, #1
 801b7e2:	f43f af2f 	beq.w	801b644 <_printf_float+0x9c>
 801b7e6:	f108 0801 	add.w	r8, r8, #1
 801b7ea:	e7e6      	b.n	801b7ba <_printf_float+0x212>
 801b7ec:	9b07      	ldr	r3, [sp, #28]
 801b7ee:	2b00      	cmp	r3, #0
 801b7f0:	dc3c      	bgt.n	801b86c <_printf_float+0x2c4>
 801b7f2:	4a1d      	ldr	r2, [pc, #116]	; (801b868 <_printf_float+0x2c0>)
 801b7f4:	2301      	movs	r3, #1
 801b7f6:	4631      	mov	r1, r6
 801b7f8:	4628      	mov	r0, r5
 801b7fa:	47b8      	blx	r7
 801b7fc:	3001      	adds	r0, #1
 801b7fe:	f43f af21 	beq.w	801b644 <_printf_float+0x9c>
 801b802:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b806:	4313      	orrs	r3, r2
 801b808:	d102      	bne.n	801b810 <_printf_float+0x268>
 801b80a:	6823      	ldr	r3, [r4, #0]
 801b80c:	07d9      	lsls	r1, r3, #31
 801b80e:	d5d8      	bpl.n	801b7c2 <_printf_float+0x21a>
 801b810:	4653      	mov	r3, sl
 801b812:	465a      	mov	r2, fp
 801b814:	4631      	mov	r1, r6
 801b816:	4628      	mov	r0, r5
 801b818:	47b8      	blx	r7
 801b81a:	3001      	adds	r0, #1
 801b81c:	f43f af12 	beq.w	801b644 <_printf_float+0x9c>
 801b820:	f04f 0900 	mov.w	r9, #0
 801b824:	f104 0a1a 	add.w	sl, r4, #26
 801b828:	9b07      	ldr	r3, [sp, #28]
 801b82a:	425b      	negs	r3, r3
 801b82c:	454b      	cmp	r3, r9
 801b82e:	dc01      	bgt.n	801b834 <_printf_float+0x28c>
 801b830:	9b08      	ldr	r3, [sp, #32]
 801b832:	e795      	b.n	801b760 <_printf_float+0x1b8>
 801b834:	2301      	movs	r3, #1
 801b836:	4652      	mov	r2, sl
 801b838:	4631      	mov	r1, r6
 801b83a:	4628      	mov	r0, r5
 801b83c:	47b8      	blx	r7
 801b83e:	3001      	adds	r0, #1
 801b840:	f43f af00 	beq.w	801b644 <_printf_float+0x9c>
 801b844:	f109 0901 	add.w	r9, r9, #1
 801b848:	e7ee      	b.n	801b828 <_printf_float+0x280>
 801b84a:	bf00      	nop
 801b84c:	f3af 8000 	nop.w
 801b850:	ffffffff 	.word	0xffffffff
 801b854:	7fefffff 	.word	0x7fefffff
 801b858:	08021e80 	.word	0x08021e80
 801b85c:	08021e84 	.word	0x08021e84
 801b860:	08021e8c 	.word	0x08021e8c
 801b864:	08021e88 	.word	0x08021e88
 801b868:	08021e90 	.word	0x08021e90
 801b86c:	9a08      	ldr	r2, [sp, #32]
 801b86e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b870:	429a      	cmp	r2, r3
 801b872:	bfa8      	it	ge
 801b874:	461a      	movge	r2, r3
 801b876:	2a00      	cmp	r2, #0
 801b878:	4691      	mov	r9, r2
 801b87a:	dc38      	bgt.n	801b8ee <_printf_float+0x346>
 801b87c:	2300      	movs	r3, #0
 801b87e:	9305      	str	r3, [sp, #20]
 801b880:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b884:	f104 021a 	add.w	r2, r4, #26
 801b888:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801b88a:	9905      	ldr	r1, [sp, #20]
 801b88c:	9304      	str	r3, [sp, #16]
 801b88e:	eba3 0309 	sub.w	r3, r3, r9
 801b892:	428b      	cmp	r3, r1
 801b894:	dc33      	bgt.n	801b8fe <_printf_float+0x356>
 801b896:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b89a:	429a      	cmp	r2, r3
 801b89c:	db3c      	blt.n	801b918 <_printf_float+0x370>
 801b89e:	6823      	ldr	r3, [r4, #0]
 801b8a0:	07da      	lsls	r2, r3, #31
 801b8a2:	d439      	bmi.n	801b918 <_printf_float+0x370>
 801b8a4:	9a08      	ldr	r2, [sp, #32]
 801b8a6:	9b04      	ldr	r3, [sp, #16]
 801b8a8:	9907      	ldr	r1, [sp, #28]
 801b8aa:	1ad3      	subs	r3, r2, r3
 801b8ac:	eba2 0901 	sub.w	r9, r2, r1
 801b8b0:	4599      	cmp	r9, r3
 801b8b2:	bfa8      	it	ge
 801b8b4:	4699      	movge	r9, r3
 801b8b6:	f1b9 0f00 	cmp.w	r9, #0
 801b8ba:	dc35      	bgt.n	801b928 <_printf_float+0x380>
 801b8bc:	f04f 0800 	mov.w	r8, #0
 801b8c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801b8c4:	f104 0a1a 	add.w	sl, r4, #26
 801b8c8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801b8cc:	1a9b      	subs	r3, r3, r2
 801b8ce:	eba3 0309 	sub.w	r3, r3, r9
 801b8d2:	4543      	cmp	r3, r8
 801b8d4:	f77f af75 	ble.w	801b7c2 <_printf_float+0x21a>
 801b8d8:	2301      	movs	r3, #1
 801b8da:	4652      	mov	r2, sl
 801b8dc:	4631      	mov	r1, r6
 801b8de:	4628      	mov	r0, r5
 801b8e0:	47b8      	blx	r7
 801b8e2:	3001      	adds	r0, #1
 801b8e4:	f43f aeae 	beq.w	801b644 <_printf_float+0x9c>
 801b8e8:	f108 0801 	add.w	r8, r8, #1
 801b8ec:	e7ec      	b.n	801b8c8 <_printf_float+0x320>
 801b8ee:	4613      	mov	r3, r2
 801b8f0:	4631      	mov	r1, r6
 801b8f2:	4642      	mov	r2, r8
 801b8f4:	4628      	mov	r0, r5
 801b8f6:	47b8      	blx	r7
 801b8f8:	3001      	adds	r0, #1
 801b8fa:	d1bf      	bne.n	801b87c <_printf_float+0x2d4>
 801b8fc:	e6a2      	b.n	801b644 <_printf_float+0x9c>
 801b8fe:	2301      	movs	r3, #1
 801b900:	4631      	mov	r1, r6
 801b902:	4628      	mov	r0, r5
 801b904:	9204      	str	r2, [sp, #16]
 801b906:	47b8      	blx	r7
 801b908:	3001      	adds	r0, #1
 801b90a:	f43f ae9b 	beq.w	801b644 <_printf_float+0x9c>
 801b90e:	9b05      	ldr	r3, [sp, #20]
 801b910:	9a04      	ldr	r2, [sp, #16]
 801b912:	3301      	adds	r3, #1
 801b914:	9305      	str	r3, [sp, #20]
 801b916:	e7b7      	b.n	801b888 <_printf_float+0x2e0>
 801b918:	4653      	mov	r3, sl
 801b91a:	465a      	mov	r2, fp
 801b91c:	4631      	mov	r1, r6
 801b91e:	4628      	mov	r0, r5
 801b920:	47b8      	blx	r7
 801b922:	3001      	adds	r0, #1
 801b924:	d1be      	bne.n	801b8a4 <_printf_float+0x2fc>
 801b926:	e68d      	b.n	801b644 <_printf_float+0x9c>
 801b928:	9a04      	ldr	r2, [sp, #16]
 801b92a:	464b      	mov	r3, r9
 801b92c:	4442      	add	r2, r8
 801b92e:	4631      	mov	r1, r6
 801b930:	4628      	mov	r0, r5
 801b932:	47b8      	blx	r7
 801b934:	3001      	adds	r0, #1
 801b936:	d1c1      	bne.n	801b8bc <_printf_float+0x314>
 801b938:	e684      	b.n	801b644 <_printf_float+0x9c>
 801b93a:	9a08      	ldr	r2, [sp, #32]
 801b93c:	2a01      	cmp	r2, #1
 801b93e:	dc01      	bgt.n	801b944 <_printf_float+0x39c>
 801b940:	07db      	lsls	r3, r3, #31
 801b942:	d537      	bpl.n	801b9b4 <_printf_float+0x40c>
 801b944:	2301      	movs	r3, #1
 801b946:	4642      	mov	r2, r8
 801b948:	4631      	mov	r1, r6
 801b94a:	4628      	mov	r0, r5
 801b94c:	47b8      	blx	r7
 801b94e:	3001      	adds	r0, #1
 801b950:	f43f ae78 	beq.w	801b644 <_printf_float+0x9c>
 801b954:	4653      	mov	r3, sl
 801b956:	465a      	mov	r2, fp
 801b958:	4631      	mov	r1, r6
 801b95a:	4628      	mov	r0, r5
 801b95c:	47b8      	blx	r7
 801b95e:	3001      	adds	r0, #1
 801b960:	f43f ae70 	beq.w	801b644 <_printf_float+0x9c>
 801b964:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801b968:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b96c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b970:	d01b      	beq.n	801b9aa <_printf_float+0x402>
 801b972:	9b08      	ldr	r3, [sp, #32]
 801b974:	f108 0201 	add.w	r2, r8, #1
 801b978:	3b01      	subs	r3, #1
 801b97a:	4631      	mov	r1, r6
 801b97c:	4628      	mov	r0, r5
 801b97e:	47b8      	blx	r7
 801b980:	3001      	adds	r0, #1
 801b982:	d10e      	bne.n	801b9a2 <_printf_float+0x3fa>
 801b984:	e65e      	b.n	801b644 <_printf_float+0x9c>
 801b986:	2301      	movs	r3, #1
 801b988:	464a      	mov	r2, r9
 801b98a:	4631      	mov	r1, r6
 801b98c:	4628      	mov	r0, r5
 801b98e:	47b8      	blx	r7
 801b990:	3001      	adds	r0, #1
 801b992:	f43f ae57 	beq.w	801b644 <_printf_float+0x9c>
 801b996:	f108 0801 	add.w	r8, r8, #1
 801b99a:	9b08      	ldr	r3, [sp, #32]
 801b99c:	3b01      	subs	r3, #1
 801b99e:	4543      	cmp	r3, r8
 801b9a0:	dcf1      	bgt.n	801b986 <_printf_float+0x3de>
 801b9a2:	9b04      	ldr	r3, [sp, #16]
 801b9a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801b9a8:	e6db      	b.n	801b762 <_printf_float+0x1ba>
 801b9aa:	f04f 0800 	mov.w	r8, #0
 801b9ae:	f104 091a 	add.w	r9, r4, #26
 801b9b2:	e7f2      	b.n	801b99a <_printf_float+0x3f2>
 801b9b4:	2301      	movs	r3, #1
 801b9b6:	4642      	mov	r2, r8
 801b9b8:	e7df      	b.n	801b97a <_printf_float+0x3d2>
 801b9ba:	2301      	movs	r3, #1
 801b9bc:	464a      	mov	r2, r9
 801b9be:	4631      	mov	r1, r6
 801b9c0:	4628      	mov	r0, r5
 801b9c2:	47b8      	blx	r7
 801b9c4:	3001      	adds	r0, #1
 801b9c6:	f43f ae3d 	beq.w	801b644 <_printf_float+0x9c>
 801b9ca:	f108 0801 	add.w	r8, r8, #1
 801b9ce:	68e3      	ldr	r3, [r4, #12]
 801b9d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801b9d2:	1a5b      	subs	r3, r3, r1
 801b9d4:	4543      	cmp	r3, r8
 801b9d6:	dcf0      	bgt.n	801b9ba <_printf_float+0x412>
 801b9d8:	e6f7      	b.n	801b7ca <_printf_float+0x222>
 801b9da:	f04f 0800 	mov.w	r8, #0
 801b9de:	f104 0919 	add.w	r9, r4, #25
 801b9e2:	e7f4      	b.n	801b9ce <_printf_float+0x426>

0801b9e4 <_printf_common>:
 801b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9e8:	4616      	mov	r6, r2
 801b9ea:	4699      	mov	r9, r3
 801b9ec:	688a      	ldr	r2, [r1, #8]
 801b9ee:	690b      	ldr	r3, [r1, #16]
 801b9f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b9f4:	4293      	cmp	r3, r2
 801b9f6:	bfb8      	it	lt
 801b9f8:	4613      	movlt	r3, r2
 801b9fa:	6033      	str	r3, [r6, #0]
 801b9fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ba00:	4607      	mov	r7, r0
 801ba02:	460c      	mov	r4, r1
 801ba04:	b10a      	cbz	r2, 801ba0a <_printf_common+0x26>
 801ba06:	3301      	adds	r3, #1
 801ba08:	6033      	str	r3, [r6, #0]
 801ba0a:	6823      	ldr	r3, [r4, #0]
 801ba0c:	0699      	lsls	r1, r3, #26
 801ba0e:	bf42      	ittt	mi
 801ba10:	6833      	ldrmi	r3, [r6, #0]
 801ba12:	3302      	addmi	r3, #2
 801ba14:	6033      	strmi	r3, [r6, #0]
 801ba16:	6825      	ldr	r5, [r4, #0]
 801ba18:	f015 0506 	ands.w	r5, r5, #6
 801ba1c:	d106      	bne.n	801ba2c <_printf_common+0x48>
 801ba1e:	f104 0a19 	add.w	sl, r4, #25
 801ba22:	68e3      	ldr	r3, [r4, #12]
 801ba24:	6832      	ldr	r2, [r6, #0]
 801ba26:	1a9b      	subs	r3, r3, r2
 801ba28:	42ab      	cmp	r3, r5
 801ba2a:	dc26      	bgt.n	801ba7a <_printf_common+0x96>
 801ba2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ba30:	1e13      	subs	r3, r2, #0
 801ba32:	6822      	ldr	r2, [r4, #0]
 801ba34:	bf18      	it	ne
 801ba36:	2301      	movne	r3, #1
 801ba38:	0692      	lsls	r2, r2, #26
 801ba3a:	d42b      	bmi.n	801ba94 <_printf_common+0xb0>
 801ba3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ba40:	4649      	mov	r1, r9
 801ba42:	4638      	mov	r0, r7
 801ba44:	47c0      	blx	r8
 801ba46:	3001      	adds	r0, #1
 801ba48:	d01e      	beq.n	801ba88 <_printf_common+0xa4>
 801ba4a:	6823      	ldr	r3, [r4, #0]
 801ba4c:	68e5      	ldr	r5, [r4, #12]
 801ba4e:	6832      	ldr	r2, [r6, #0]
 801ba50:	f003 0306 	and.w	r3, r3, #6
 801ba54:	2b04      	cmp	r3, #4
 801ba56:	bf08      	it	eq
 801ba58:	1aad      	subeq	r5, r5, r2
 801ba5a:	68a3      	ldr	r3, [r4, #8]
 801ba5c:	6922      	ldr	r2, [r4, #16]
 801ba5e:	bf0c      	ite	eq
 801ba60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ba64:	2500      	movne	r5, #0
 801ba66:	4293      	cmp	r3, r2
 801ba68:	bfc4      	itt	gt
 801ba6a:	1a9b      	subgt	r3, r3, r2
 801ba6c:	18ed      	addgt	r5, r5, r3
 801ba6e:	2600      	movs	r6, #0
 801ba70:	341a      	adds	r4, #26
 801ba72:	42b5      	cmp	r5, r6
 801ba74:	d11a      	bne.n	801baac <_printf_common+0xc8>
 801ba76:	2000      	movs	r0, #0
 801ba78:	e008      	b.n	801ba8c <_printf_common+0xa8>
 801ba7a:	2301      	movs	r3, #1
 801ba7c:	4652      	mov	r2, sl
 801ba7e:	4649      	mov	r1, r9
 801ba80:	4638      	mov	r0, r7
 801ba82:	47c0      	blx	r8
 801ba84:	3001      	adds	r0, #1
 801ba86:	d103      	bne.n	801ba90 <_printf_common+0xac>
 801ba88:	f04f 30ff 	mov.w	r0, #4294967295
 801ba8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ba90:	3501      	adds	r5, #1
 801ba92:	e7c6      	b.n	801ba22 <_printf_common+0x3e>
 801ba94:	18e1      	adds	r1, r4, r3
 801ba96:	1c5a      	adds	r2, r3, #1
 801ba98:	2030      	movs	r0, #48	; 0x30
 801ba9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ba9e:	4422      	add	r2, r4
 801baa0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801baa4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801baa8:	3302      	adds	r3, #2
 801baaa:	e7c7      	b.n	801ba3c <_printf_common+0x58>
 801baac:	2301      	movs	r3, #1
 801baae:	4622      	mov	r2, r4
 801bab0:	4649      	mov	r1, r9
 801bab2:	4638      	mov	r0, r7
 801bab4:	47c0      	blx	r8
 801bab6:	3001      	adds	r0, #1
 801bab8:	d0e6      	beq.n	801ba88 <_printf_common+0xa4>
 801baba:	3601      	adds	r6, #1
 801babc:	e7d9      	b.n	801ba72 <_printf_common+0x8e>
	...

0801bac0 <_printf_i>:
 801bac0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bac4:	460c      	mov	r4, r1
 801bac6:	4691      	mov	r9, r2
 801bac8:	7e27      	ldrb	r7, [r4, #24]
 801baca:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bacc:	2f78      	cmp	r7, #120	; 0x78
 801bace:	4680      	mov	r8, r0
 801bad0:	469a      	mov	sl, r3
 801bad2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bad6:	d807      	bhi.n	801bae8 <_printf_i+0x28>
 801bad8:	2f62      	cmp	r7, #98	; 0x62
 801bada:	d80a      	bhi.n	801baf2 <_printf_i+0x32>
 801badc:	2f00      	cmp	r7, #0
 801bade:	f000 80d8 	beq.w	801bc92 <_printf_i+0x1d2>
 801bae2:	2f58      	cmp	r7, #88	; 0x58
 801bae4:	f000 80a3 	beq.w	801bc2e <_printf_i+0x16e>
 801bae8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801baec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801baf0:	e03a      	b.n	801bb68 <_printf_i+0xa8>
 801baf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801baf6:	2b15      	cmp	r3, #21
 801baf8:	d8f6      	bhi.n	801bae8 <_printf_i+0x28>
 801bafa:	a001      	add	r0, pc, #4	; (adr r0, 801bb00 <_printf_i+0x40>)
 801bafc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801bb00:	0801bb59 	.word	0x0801bb59
 801bb04:	0801bb6d 	.word	0x0801bb6d
 801bb08:	0801bae9 	.word	0x0801bae9
 801bb0c:	0801bae9 	.word	0x0801bae9
 801bb10:	0801bae9 	.word	0x0801bae9
 801bb14:	0801bae9 	.word	0x0801bae9
 801bb18:	0801bb6d 	.word	0x0801bb6d
 801bb1c:	0801bae9 	.word	0x0801bae9
 801bb20:	0801bae9 	.word	0x0801bae9
 801bb24:	0801bae9 	.word	0x0801bae9
 801bb28:	0801bae9 	.word	0x0801bae9
 801bb2c:	0801bc79 	.word	0x0801bc79
 801bb30:	0801bb9d 	.word	0x0801bb9d
 801bb34:	0801bc5b 	.word	0x0801bc5b
 801bb38:	0801bae9 	.word	0x0801bae9
 801bb3c:	0801bae9 	.word	0x0801bae9
 801bb40:	0801bc9b 	.word	0x0801bc9b
 801bb44:	0801bae9 	.word	0x0801bae9
 801bb48:	0801bb9d 	.word	0x0801bb9d
 801bb4c:	0801bae9 	.word	0x0801bae9
 801bb50:	0801bae9 	.word	0x0801bae9
 801bb54:	0801bc63 	.word	0x0801bc63
 801bb58:	680b      	ldr	r3, [r1, #0]
 801bb5a:	1d1a      	adds	r2, r3, #4
 801bb5c:	681b      	ldr	r3, [r3, #0]
 801bb5e:	600a      	str	r2, [r1, #0]
 801bb60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bb64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb68:	2301      	movs	r3, #1
 801bb6a:	e0a3      	b.n	801bcb4 <_printf_i+0x1f4>
 801bb6c:	6825      	ldr	r5, [r4, #0]
 801bb6e:	6808      	ldr	r0, [r1, #0]
 801bb70:	062e      	lsls	r6, r5, #24
 801bb72:	f100 0304 	add.w	r3, r0, #4
 801bb76:	d50a      	bpl.n	801bb8e <_printf_i+0xce>
 801bb78:	6805      	ldr	r5, [r0, #0]
 801bb7a:	600b      	str	r3, [r1, #0]
 801bb7c:	2d00      	cmp	r5, #0
 801bb7e:	da03      	bge.n	801bb88 <_printf_i+0xc8>
 801bb80:	232d      	movs	r3, #45	; 0x2d
 801bb82:	426d      	negs	r5, r5
 801bb84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bb88:	485e      	ldr	r0, [pc, #376]	; (801bd04 <_printf_i+0x244>)
 801bb8a:	230a      	movs	r3, #10
 801bb8c:	e019      	b.n	801bbc2 <_printf_i+0x102>
 801bb8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801bb92:	6805      	ldr	r5, [r0, #0]
 801bb94:	600b      	str	r3, [r1, #0]
 801bb96:	bf18      	it	ne
 801bb98:	b22d      	sxthne	r5, r5
 801bb9a:	e7ef      	b.n	801bb7c <_printf_i+0xbc>
 801bb9c:	680b      	ldr	r3, [r1, #0]
 801bb9e:	6825      	ldr	r5, [r4, #0]
 801bba0:	1d18      	adds	r0, r3, #4
 801bba2:	6008      	str	r0, [r1, #0]
 801bba4:	0628      	lsls	r0, r5, #24
 801bba6:	d501      	bpl.n	801bbac <_printf_i+0xec>
 801bba8:	681d      	ldr	r5, [r3, #0]
 801bbaa:	e002      	b.n	801bbb2 <_printf_i+0xf2>
 801bbac:	0669      	lsls	r1, r5, #25
 801bbae:	d5fb      	bpl.n	801bba8 <_printf_i+0xe8>
 801bbb0:	881d      	ldrh	r5, [r3, #0]
 801bbb2:	4854      	ldr	r0, [pc, #336]	; (801bd04 <_printf_i+0x244>)
 801bbb4:	2f6f      	cmp	r7, #111	; 0x6f
 801bbb6:	bf0c      	ite	eq
 801bbb8:	2308      	moveq	r3, #8
 801bbba:	230a      	movne	r3, #10
 801bbbc:	2100      	movs	r1, #0
 801bbbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801bbc2:	6866      	ldr	r6, [r4, #4]
 801bbc4:	60a6      	str	r6, [r4, #8]
 801bbc6:	2e00      	cmp	r6, #0
 801bbc8:	bfa2      	ittt	ge
 801bbca:	6821      	ldrge	r1, [r4, #0]
 801bbcc:	f021 0104 	bicge.w	r1, r1, #4
 801bbd0:	6021      	strge	r1, [r4, #0]
 801bbd2:	b90d      	cbnz	r5, 801bbd8 <_printf_i+0x118>
 801bbd4:	2e00      	cmp	r6, #0
 801bbd6:	d04d      	beq.n	801bc74 <_printf_i+0x1b4>
 801bbd8:	4616      	mov	r6, r2
 801bbda:	fbb5 f1f3 	udiv	r1, r5, r3
 801bbde:	fb03 5711 	mls	r7, r3, r1, r5
 801bbe2:	5dc7      	ldrb	r7, [r0, r7]
 801bbe4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801bbe8:	462f      	mov	r7, r5
 801bbea:	42bb      	cmp	r3, r7
 801bbec:	460d      	mov	r5, r1
 801bbee:	d9f4      	bls.n	801bbda <_printf_i+0x11a>
 801bbf0:	2b08      	cmp	r3, #8
 801bbf2:	d10b      	bne.n	801bc0c <_printf_i+0x14c>
 801bbf4:	6823      	ldr	r3, [r4, #0]
 801bbf6:	07df      	lsls	r7, r3, #31
 801bbf8:	d508      	bpl.n	801bc0c <_printf_i+0x14c>
 801bbfa:	6923      	ldr	r3, [r4, #16]
 801bbfc:	6861      	ldr	r1, [r4, #4]
 801bbfe:	4299      	cmp	r1, r3
 801bc00:	bfde      	ittt	le
 801bc02:	2330      	movle	r3, #48	; 0x30
 801bc04:	f806 3c01 	strble.w	r3, [r6, #-1]
 801bc08:	f106 36ff 	addle.w	r6, r6, #4294967295
 801bc0c:	1b92      	subs	r2, r2, r6
 801bc0e:	6122      	str	r2, [r4, #16]
 801bc10:	f8cd a000 	str.w	sl, [sp]
 801bc14:	464b      	mov	r3, r9
 801bc16:	aa03      	add	r2, sp, #12
 801bc18:	4621      	mov	r1, r4
 801bc1a:	4640      	mov	r0, r8
 801bc1c:	f7ff fee2 	bl	801b9e4 <_printf_common>
 801bc20:	3001      	adds	r0, #1
 801bc22:	d14c      	bne.n	801bcbe <_printf_i+0x1fe>
 801bc24:	f04f 30ff 	mov.w	r0, #4294967295
 801bc28:	b004      	add	sp, #16
 801bc2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc2e:	4835      	ldr	r0, [pc, #212]	; (801bd04 <_printf_i+0x244>)
 801bc30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801bc34:	6823      	ldr	r3, [r4, #0]
 801bc36:	680e      	ldr	r6, [r1, #0]
 801bc38:	061f      	lsls	r7, r3, #24
 801bc3a:	f856 5b04 	ldr.w	r5, [r6], #4
 801bc3e:	600e      	str	r6, [r1, #0]
 801bc40:	d514      	bpl.n	801bc6c <_printf_i+0x1ac>
 801bc42:	07d9      	lsls	r1, r3, #31
 801bc44:	bf44      	itt	mi
 801bc46:	f043 0320 	orrmi.w	r3, r3, #32
 801bc4a:	6023      	strmi	r3, [r4, #0]
 801bc4c:	b91d      	cbnz	r5, 801bc56 <_printf_i+0x196>
 801bc4e:	6823      	ldr	r3, [r4, #0]
 801bc50:	f023 0320 	bic.w	r3, r3, #32
 801bc54:	6023      	str	r3, [r4, #0]
 801bc56:	2310      	movs	r3, #16
 801bc58:	e7b0      	b.n	801bbbc <_printf_i+0xfc>
 801bc5a:	6823      	ldr	r3, [r4, #0]
 801bc5c:	f043 0320 	orr.w	r3, r3, #32
 801bc60:	6023      	str	r3, [r4, #0]
 801bc62:	2378      	movs	r3, #120	; 0x78
 801bc64:	4828      	ldr	r0, [pc, #160]	; (801bd08 <_printf_i+0x248>)
 801bc66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801bc6a:	e7e3      	b.n	801bc34 <_printf_i+0x174>
 801bc6c:	065e      	lsls	r6, r3, #25
 801bc6e:	bf48      	it	mi
 801bc70:	b2ad      	uxthmi	r5, r5
 801bc72:	e7e6      	b.n	801bc42 <_printf_i+0x182>
 801bc74:	4616      	mov	r6, r2
 801bc76:	e7bb      	b.n	801bbf0 <_printf_i+0x130>
 801bc78:	680b      	ldr	r3, [r1, #0]
 801bc7a:	6826      	ldr	r6, [r4, #0]
 801bc7c:	6960      	ldr	r0, [r4, #20]
 801bc7e:	1d1d      	adds	r5, r3, #4
 801bc80:	600d      	str	r5, [r1, #0]
 801bc82:	0635      	lsls	r5, r6, #24
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	d501      	bpl.n	801bc8c <_printf_i+0x1cc>
 801bc88:	6018      	str	r0, [r3, #0]
 801bc8a:	e002      	b.n	801bc92 <_printf_i+0x1d2>
 801bc8c:	0671      	lsls	r1, r6, #25
 801bc8e:	d5fb      	bpl.n	801bc88 <_printf_i+0x1c8>
 801bc90:	8018      	strh	r0, [r3, #0]
 801bc92:	2300      	movs	r3, #0
 801bc94:	6123      	str	r3, [r4, #16]
 801bc96:	4616      	mov	r6, r2
 801bc98:	e7ba      	b.n	801bc10 <_printf_i+0x150>
 801bc9a:	680b      	ldr	r3, [r1, #0]
 801bc9c:	1d1a      	adds	r2, r3, #4
 801bc9e:	600a      	str	r2, [r1, #0]
 801bca0:	681e      	ldr	r6, [r3, #0]
 801bca2:	6862      	ldr	r2, [r4, #4]
 801bca4:	2100      	movs	r1, #0
 801bca6:	4630      	mov	r0, r6
 801bca8:	f7e4 fad2 	bl	8000250 <memchr>
 801bcac:	b108      	cbz	r0, 801bcb2 <_printf_i+0x1f2>
 801bcae:	1b80      	subs	r0, r0, r6
 801bcb0:	6060      	str	r0, [r4, #4]
 801bcb2:	6863      	ldr	r3, [r4, #4]
 801bcb4:	6123      	str	r3, [r4, #16]
 801bcb6:	2300      	movs	r3, #0
 801bcb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bcbc:	e7a8      	b.n	801bc10 <_printf_i+0x150>
 801bcbe:	6923      	ldr	r3, [r4, #16]
 801bcc0:	4632      	mov	r2, r6
 801bcc2:	4649      	mov	r1, r9
 801bcc4:	4640      	mov	r0, r8
 801bcc6:	47d0      	blx	sl
 801bcc8:	3001      	adds	r0, #1
 801bcca:	d0ab      	beq.n	801bc24 <_printf_i+0x164>
 801bccc:	6823      	ldr	r3, [r4, #0]
 801bcce:	079b      	lsls	r3, r3, #30
 801bcd0:	d413      	bmi.n	801bcfa <_printf_i+0x23a>
 801bcd2:	68e0      	ldr	r0, [r4, #12]
 801bcd4:	9b03      	ldr	r3, [sp, #12]
 801bcd6:	4298      	cmp	r0, r3
 801bcd8:	bfb8      	it	lt
 801bcda:	4618      	movlt	r0, r3
 801bcdc:	e7a4      	b.n	801bc28 <_printf_i+0x168>
 801bcde:	2301      	movs	r3, #1
 801bce0:	4632      	mov	r2, r6
 801bce2:	4649      	mov	r1, r9
 801bce4:	4640      	mov	r0, r8
 801bce6:	47d0      	blx	sl
 801bce8:	3001      	adds	r0, #1
 801bcea:	d09b      	beq.n	801bc24 <_printf_i+0x164>
 801bcec:	3501      	adds	r5, #1
 801bcee:	68e3      	ldr	r3, [r4, #12]
 801bcf0:	9903      	ldr	r1, [sp, #12]
 801bcf2:	1a5b      	subs	r3, r3, r1
 801bcf4:	42ab      	cmp	r3, r5
 801bcf6:	dcf2      	bgt.n	801bcde <_printf_i+0x21e>
 801bcf8:	e7eb      	b.n	801bcd2 <_printf_i+0x212>
 801bcfa:	2500      	movs	r5, #0
 801bcfc:	f104 0619 	add.w	r6, r4, #25
 801bd00:	e7f5      	b.n	801bcee <_printf_i+0x22e>
 801bd02:	bf00      	nop
 801bd04:	08021e92 	.word	0x08021e92
 801bd08:	08021ea3 	.word	0x08021ea3

0801bd0c <iprintf>:
 801bd0c:	b40f      	push	{r0, r1, r2, r3}
 801bd0e:	4b0a      	ldr	r3, [pc, #40]	; (801bd38 <iprintf+0x2c>)
 801bd10:	b513      	push	{r0, r1, r4, lr}
 801bd12:	681c      	ldr	r4, [r3, #0]
 801bd14:	b124      	cbz	r4, 801bd20 <iprintf+0x14>
 801bd16:	69a3      	ldr	r3, [r4, #24]
 801bd18:	b913      	cbnz	r3, 801bd20 <iprintf+0x14>
 801bd1a:	4620      	mov	r0, r4
 801bd1c:	f001 f998 	bl	801d050 <__sinit>
 801bd20:	ab05      	add	r3, sp, #20
 801bd22:	9a04      	ldr	r2, [sp, #16]
 801bd24:	68a1      	ldr	r1, [r4, #8]
 801bd26:	9301      	str	r3, [sp, #4]
 801bd28:	4620      	mov	r0, r4
 801bd2a:	f001 ff17 	bl	801db5c <_vfiprintf_r>
 801bd2e:	b002      	add	sp, #8
 801bd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd34:	b004      	add	sp, #16
 801bd36:	4770      	bx	lr
 801bd38:	2000001c 	.word	0x2000001c

0801bd3c <_puts_r>:
 801bd3c:	b570      	push	{r4, r5, r6, lr}
 801bd3e:	460e      	mov	r6, r1
 801bd40:	4605      	mov	r5, r0
 801bd42:	b118      	cbz	r0, 801bd4c <_puts_r+0x10>
 801bd44:	6983      	ldr	r3, [r0, #24]
 801bd46:	b90b      	cbnz	r3, 801bd4c <_puts_r+0x10>
 801bd48:	f001 f982 	bl	801d050 <__sinit>
 801bd4c:	69ab      	ldr	r3, [r5, #24]
 801bd4e:	68ac      	ldr	r4, [r5, #8]
 801bd50:	b913      	cbnz	r3, 801bd58 <_puts_r+0x1c>
 801bd52:	4628      	mov	r0, r5
 801bd54:	f001 f97c 	bl	801d050 <__sinit>
 801bd58:	4b2c      	ldr	r3, [pc, #176]	; (801be0c <_puts_r+0xd0>)
 801bd5a:	429c      	cmp	r4, r3
 801bd5c:	d120      	bne.n	801bda0 <_puts_r+0x64>
 801bd5e:	686c      	ldr	r4, [r5, #4]
 801bd60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bd62:	07db      	lsls	r3, r3, #31
 801bd64:	d405      	bmi.n	801bd72 <_puts_r+0x36>
 801bd66:	89a3      	ldrh	r3, [r4, #12]
 801bd68:	0598      	lsls	r0, r3, #22
 801bd6a:	d402      	bmi.n	801bd72 <_puts_r+0x36>
 801bd6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bd6e:	f001 fa24 	bl	801d1ba <__retarget_lock_acquire_recursive>
 801bd72:	89a3      	ldrh	r3, [r4, #12]
 801bd74:	0719      	lsls	r1, r3, #28
 801bd76:	d51d      	bpl.n	801bdb4 <_puts_r+0x78>
 801bd78:	6923      	ldr	r3, [r4, #16]
 801bd7a:	b1db      	cbz	r3, 801bdb4 <_puts_r+0x78>
 801bd7c:	3e01      	subs	r6, #1
 801bd7e:	68a3      	ldr	r3, [r4, #8]
 801bd80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801bd84:	3b01      	subs	r3, #1
 801bd86:	60a3      	str	r3, [r4, #8]
 801bd88:	bb39      	cbnz	r1, 801bdda <_puts_r+0x9e>
 801bd8a:	2b00      	cmp	r3, #0
 801bd8c:	da38      	bge.n	801be00 <_puts_r+0xc4>
 801bd8e:	4622      	mov	r2, r4
 801bd90:	210a      	movs	r1, #10
 801bd92:	4628      	mov	r0, r5
 801bd94:	f000 f956 	bl	801c044 <__swbuf_r>
 801bd98:	3001      	adds	r0, #1
 801bd9a:	d011      	beq.n	801bdc0 <_puts_r+0x84>
 801bd9c:	250a      	movs	r5, #10
 801bd9e:	e011      	b.n	801bdc4 <_puts_r+0x88>
 801bda0:	4b1b      	ldr	r3, [pc, #108]	; (801be10 <_puts_r+0xd4>)
 801bda2:	429c      	cmp	r4, r3
 801bda4:	d101      	bne.n	801bdaa <_puts_r+0x6e>
 801bda6:	68ac      	ldr	r4, [r5, #8]
 801bda8:	e7da      	b.n	801bd60 <_puts_r+0x24>
 801bdaa:	4b1a      	ldr	r3, [pc, #104]	; (801be14 <_puts_r+0xd8>)
 801bdac:	429c      	cmp	r4, r3
 801bdae:	bf08      	it	eq
 801bdb0:	68ec      	ldreq	r4, [r5, #12]
 801bdb2:	e7d5      	b.n	801bd60 <_puts_r+0x24>
 801bdb4:	4621      	mov	r1, r4
 801bdb6:	4628      	mov	r0, r5
 801bdb8:	f000 f996 	bl	801c0e8 <__swsetup_r>
 801bdbc:	2800      	cmp	r0, #0
 801bdbe:	d0dd      	beq.n	801bd7c <_puts_r+0x40>
 801bdc0:	f04f 35ff 	mov.w	r5, #4294967295
 801bdc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bdc6:	07da      	lsls	r2, r3, #31
 801bdc8:	d405      	bmi.n	801bdd6 <_puts_r+0x9a>
 801bdca:	89a3      	ldrh	r3, [r4, #12]
 801bdcc:	059b      	lsls	r3, r3, #22
 801bdce:	d402      	bmi.n	801bdd6 <_puts_r+0x9a>
 801bdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bdd2:	f001 f9f3 	bl	801d1bc <__retarget_lock_release_recursive>
 801bdd6:	4628      	mov	r0, r5
 801bdd8:	bd70      	pop	{r4, r5, r6, pc}
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	da04      	bge.n	801bde8 <_puts_r+0xac>
 801bdde:	69a2      	ldr	r2, [r4, #24]
 801bde0:	429a      	cmp	r2, r3
 801bde2:	dc06      	bgt.n	801bdf2 <_puts_r+0xb6>
 801bde4:	290a      	cmp	r1, #10
 801bde6:	d004      	beq.n	801bdf2 <_puts_r+0xb6>
 801bde8:	6823      	ldr	r3, [r4, #0]
 801bdea:	1c5a      	adds	r2, r3, #1
 801bdec:	6022      	str	r2, [r4, #0]
 801bdee:	7019      	strb	r1, [r3, #0]
 801bdf0:	e7c5      	b.n	801bd7e <_puts_r+0x42>
 801bdf2:	4622      	mov	r2, r4
 801bdf4:	4628      	mov	r0, r5
 801bdf6:	f000 f925 	bl	801c044 <__swbuf_r>
 801bdfa:	3001      	adds	r0, #1
 801bdfc:	d1bf      	bne.n	801bd7e <_puts_r+0x42>
 801bdfe:	e7df      	b.n	801bdc0 <_puts_r+0x84>
 801be00:	6823      	ldr	r3, [r4, #0]
 801be02:	250a      	movs	r5, #10
 801be04:	1c5a      	adds	r2, r3, #1
 801be06:	6022      	str	r2, [r4, #0]
 801be08:	701d      	strb	r5, [r3, #0]
 801be0a:	e7db      	b.n	801bdc4 <_puts_r+0x88>
 801be0c:	08022004 	.word	0x08022004
 801be10:	08022024 	.word	0x08022024
 801be14:	08021fe4 	.word	0x08021fe4

0801be18 <puts>:
 801be18:	4b02      	ldr	r3, [pc, #8]	; (801be24 <puts+0xc>)
 801be1a:	4601      	mov	r1, r0
 801be1c:	6818      	ldr	r0, [r3, #0]
 801be1e:	f7ff bf8d 	b.w	801bd3c <_puts_r>
 801be22:	bf00      	nop
 801be24:	2000001c 	.word	0x2000001c

0801be28 <rand>:
 801be28:	4b17      	ldr	r3, [pc, #92]	; (801be88 <rand+0x60>)
 801be2a:	b510      	push	{r4, lr}
 801be2c:	681c      	ldr	r4, [r3, #0]
 801be2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801be30:	b9b3      	cbnz	r3, 801be60 <rand+0x38>
 801be32:	2018      	movs	r0, #24
 801be34:	f001 fa28 	bl	801d288 <malloc>
 801be38:	63a0      	str	r0, [r4, #56]	; 0x38
 801be3a:	b928      	cbnz	r0, 801be48 <rand+0x20>
 801be3c:	4602      	mov	r2, r0
 801be3e:	4b13      	ldr	r3, [pc, #76]	; (801be8c <rand+0x64>)
 801be40:	4813      	ldr	r0, [pc, #76]	; (801be90 <rand+0x68>)
 801be42:	214e      	movs	r1, #78	; 0x4e
 801be44:	f000 f9be 	bl	801c1c4 <__assert_func>
 801be48:	4a12      	ldr	r2, [pc, #72]	; (801be94 <rand+0x6c>)
 801be4a:	4b13      	ldr	r3, [pc, #76]	; (801be98 <rand+0x70>)
 801be4c:	e9c0 2300 	strd	r2, r3, [r0]
 801be50:	4b12      	ldr	r3, [pc, #72]	; (801be9c <rand+0x74>)
 801be52:	6083      	str	r3, [r0, #8]
 801be54:	230b      	movs	r3, #11
 801be56:	8183      	strh	r3, [r0, #12]
 801be58:	2201      	movs	r2, #1
 801be5a:	2300      	movs	r3, #0
 801be5c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801be60:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801be62:	480f      	ldr	r0, [pc, #60]	; (801bea0 <rand+0x78>)
 801be64:	690a      	ldr	r2, [r1, #16]
 801be66:	694b      	ldr	r3, [r1, #20]
 801be68:	4c0e      	ldr	r4, [pc, #56]	; (801bea4 <rand+0x7c>)
 801be6a:	4350      	muls	r0, r2
 801be6c:	fb04 0003 	mla	r0, r4, r3, r0
 801be70:	fba2 3404 	umull	r3, r4, r2, r4
 801be74:	1c5a      	adds	r2, r3, #1
 801be76:	4404      	add	r4, r0
 801be78:	f144 0000 	adc.w	r0, r4, #0
 801be7c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801be80:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801be84:	bd10      	pop	{r4, pc}
 801be86:	bf00      	nop
 801be88:	2000001c 	.word	0x2000001c
 801be8c:	08021eb4 	.word	0x08021eb4
 801be90:	08021ecb 	.word	0x08021ecb
 801be94:	abcd330e 	.word	0xabcd330e
 801be98:	e66d1234 	.word	0xe66d1234
 801be9c:	0005deec 	.word	0x0005deec
 801bea0:	5851f42d 	.word	0x5851f42d
 801bea4:	4c957f2d 	.word	0x4c957f2d

0801bea8 <setbuf>:
 801bea8:	2900      	cmp	r1, #0
 801beaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801beae:	bf0c      	ite	eq
 801beb0:	2202      	moveq	r2, #2
 801beb2:	2200      	movne	r2, #0
 801beb4:	f000 b800 	b.w	801beb8 <setvbuf>

0801beb8 <setvbuf>:
 801beb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bebc:	461d      	mov	r5, r3
 801bebe:	4b5d      	ldr	r3, [pc, #372]	; (801c034 <setvbuf+0x17c>)
 801bec0:	681f      	ldr	r7, [r3, #0]
 801bec2:	4604      	mov	r4, r0
 801bec4:	460e      	mov	r6, r1
 801bec6:	4690      	mov	r8, r2
 801bec8:	b127      	cbz	r7, 801bed4 <setvbuf+0x1c>
 801beca:	69bb      	ldr	r3, [r7, #24]
 801becc:	b913      	cbnz	r3, 801bed4 <setvbuf+0x1c>
 801bece:	4638      	mov	r0, r7
 801bed0:	f001 f8be 	bl	801d050 <__sinit>
 801bed4:	4b58      	ldr	r3, [pc, #352]	; (801c038 <setvbuf+0x180>)
 801bed6:	429c      	cmp	r4, r3
 801bed8:	d167      	bne.n	801bfaa <setvbuf+0xf2>
 801beda:	687c      	ldr	r4, [r7, #4]
 801bedc:	f1b8 0f02 	cmp.w	r8, #2
 801bee0:	d006      	beq.n	801bef0 <setvbuf+0x38>
 801bee2:	f1b8 0f01 	cmp.w	r8, #1
 801bee6:	f200 809f 	bhi.w	801c028 <setvbuf+0x170>
 801beea:	2d00      	cmp	r5, #0
 801beec:	f2c0 809c 	blt.w	801c028 <setvbuf+0x170>
 801bef0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bef2:	07db      	lsls	r3, r3, #31
 801bef4:	d405      	bmi.n	801bf02 <setvbuf+0x4a>
 801bef6:	89a3      	ldrh	r3, [r4, #12]
 801bef8:	0598      	lsls	r0, r3, #22
 801befa:	d402      	bmi.n	801bf02 <setvbuf+0x4a>
 801befc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801befe:	f001 f95c 	bl	801d1ba <__retarget_lock_acquire_recursive>
 801bf02:	4621      	mov	r1, r4
 801bf04:	4638      	mov	r0, r7
 801bf06:	f001 f80f 	bl	801cf28 <_fflush_r>
 801bf0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf0c:	b141      	cbz	r1, 801bf20 <setvbuf+0x68>
 801bf0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf12:	4299      	cmp	r1, r3
 801bf14:	d002      	beq.n	801bf1c <setvbuf+0x64>
 801bf16:	4638      	mov	r0, r7
 801bf18:	f001 fd4c 	bl	801d9b4 <_free_r>
 801bf1c:	2300      	movs	r3, #0
 801bf1e:	6363      	str	r3, [r4, #52]	; 0x34
 801bf20:	2300      	movs	r3, #0
 801bf22:	61a3      	str	r3, [r4, #24]
 801bf24:	6063      	str	r3, [r4, #4]
 801bf26:	89a3      	ldrh	r3, [r4, #12]
 801bf28:	0619      	lsls	r1, r3, #24
 801bf2a:	d503      	bpl.n	801bf34 <setvbuf+0x7c>
 801bf2c:	6921      	ldr	r1, [r4, #16]
 801bf2e:	4638      	mov	r0, r7
 801bf30:	f001 fd40 	bl	801d9b4 <_free_r>
 801bf34:	89a3      	ldrh	r3, [r4, #12]
 801bf36:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 801bf3a:	f023 0303 	bic.w	r3, r3, #3
 801bf3e:	f1b8 0f02 	cmp.w	r8, #2
 801bf42:	81a3      	strh	r3, [r4, #12]
 801bf44:	d06c      	beq.n	801c020 <setvbuf+0x168>
 801bf46:	ab01      	add	r3, sp, #4
 801bf48:	466a      	mov	r2, sp
 801bf4a:	4621      	mov	r1, r4
 801bf4c:	4638      	mov	r0, r7
 801bf4e:	f001 f936 	bl	801d1be <__swhatbuf_r>
 801bf52:	89a3      	ldrh	r3, [r4, #12]
 801bf54:	4318      	orrs	r0, r3
 801bf56:	81a0      	strh	r0, [r4, #12]
 801bf58:	2d00      	cmp	r5, #0
 801bf5a:	d130      	bne.n	801bfbe <setvbuf+0x106>
 801bf5c:	9d00      	ldr	r5, [sp, #0]
 801bf5e:	4628      	mov	r0, r5
 801bf60:	f001 f992 	bl	801d288 <malloc>
 801bf64:	4606      	mov	r6, r0
 801bf66:	2800      	cmp	r0, #0
 801bf68:	d155      	bne.n	801c016 <setvbuf+0x15e>
 801bf6a:	f8dd 9000 	ldr.w	r9, [sp]
 801bf6e:	45a9      	cmp	r9, r5
 801bf70:	d14a      	bne.n	801c008 <setvbuf+0x150>
 801bf72:	f04f 35ff 	mov.w	r5, #4294967295
 801bf76:	2200      	movs	r2, #0
 801bf78:	60a2      	str	r2, [r4, #8]
 801bf7a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 801bf7e:	6022      	str	r2, [r4, #0]
 801bf80:	6122      	str	r2, [r4, #16]
 801bf82:	2201      	movs	r2, #1
 801bf84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bf88:	6162      	str	r2, [r4, #20]
 801bf8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bf8c:	f043 0302 	orr.w	r3, r3, #2
 801bf90:	07d2      	lsls	r2, r2, #31
 801bf92:	81a3      	strh	r3, [r4, #12]
 801bf94:	d405      	bmi.n	801bfa2 <setvbuf+0xea>
 801bf96:	f413 7f00 	tst.w	r3, #512	; 0x200
 801bf9a:	d102      	bne.n	801bfa2 <setvbuf+0xea>
 801bf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bf9e:	f001 f90d 	bl	801d1bc <__retarget_lock_release_recursive>
 801bfa2:	4628      	mov	r0, r5
 801bfa4:	b003      	add	sp, #12
 801bfa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bfaa:	4b24      	ldr	r3, [pc, #144]	; (801c03c <setvbuf+0x184>)
 801bfac:	429c      	cmp	r4, r3
 801bfae:	d101      	bne.n	801bfb4 <setvbuf+0xfc>
 801bfb0:	68bc      	ldr	r4, [r7, #8]
 801bfb2:	e793      	b.n	801bedc <setvbuf+0x24>
 801bfb4:	4b22      	ldr	r3, [pc, #136]	; (801c040 <setvbuf+0x188>)
 801bfb6:	429c      	cmp	r4, r3
 801bfb8:	bf08      	it	eq
 801bfba:	68fc      	ldreq	r4, [r7, #12]
 801bfbc:	e78e      	b.n	801bedc <setvbuf+0x24>
 801bfbe:	2e00      	cmp	r6, #0
 801bfc0:	d0cd      	beq.n	801bf5e <setvbuf+0xa6>
 801bfc2:	69bb      	ldr	r3, [r7, #24]
 801bfc4:	b913      	cbnz	r3, 801bfcc <setvbuf+0x114>
 801bfc6:	4638      	mov	r0, r7
 801bfc8:	f001 f842 	bl	801d050 <__sinit>
 801bfcc:	f1b8 0f01 	cmp.w	r8, #1
 801bfd0:	bf08      	it	eq
 801bfd2:	89a3      	ldrheq	r3, [r4, #12]
 801bfd4:	6026      	str	r6, [r4, #0]
 801bfd6:	bf04      	itt	eq
 801bfd8:	f043 0301 	orreq.w	r3, r3, #1
 801bfdc:	81a3      	strheq	r3, [r4, #12]
 801bfde:	89a2      	ldrh	r2, [r4, #12]
 801bfe0:	f012 0308 	ands.w	r3, r2, #8
 801bfe4:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801bfe8:	d01c      	beq.n	801c024 <setvbuf+0x16c>
 801bfea:	07d3      	lsls	r3, r2, #31
 801bfec:	bf41      	itttt	mi
 801bfee:	2300      	movmi	r3, #0
 801bff0:	426d      	negmi	r5, r5
 801bff2:	60a3      	strmi	r3, [r4, #8]
 801bff4:	61a5      	strmi	r5, [r4, #24]
 801bff6:	bf58      	it	pl
 801bff8:	60a5      	strpl	r5, [r4, #8]
 801bffa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 801bffc:	f015 0501 	ands.w	r5, r5, #1
 801c000:	d115      	bne.n	801c02e <setvbuf+0x176>
 801c002:	f412 7f00 	tst.w	r2, #512	; 0x200
 801c006:	e7c8      	b.n	801bf9a <setvbuf+0xe2>
 801c008:	4648      	mov	r0, r9
 801c00a:	f001 f93d 	bl	801d288 <malloc>
 801c00e:	4606      	mov	r6, r0
 801c010:	2800      	cmp	r0, #0
 801c012:	d0ae      	beq.n	801bf72 <setvbuf+0xba>
 801c014:	464d      	mov	r5, r9
 801c016:	89a3      	ldrh	r3, [r4, #12]
 801c018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c01c:	81a3      	strh	r3, [r4, #12]
 801c01e:	e7d0      	b.n	801bfc2 <setvbuf+0x10a>
 801c020:	2500      	movs	r5, #0
 801c022:	e7a8      	b.n	801bf76 <setvbuf+0xbe>
 801c024:	60a3      	str	r3, [r4, #8]
 801c026:	e7e8      	b.n	801bffa <setvbuf+0x142>
 801c028:	f04f 35ff 	mov.w	r5, #4294967295
 801c02c:	e7b9      	b.n	801bfa2 <setvbuf+0xea>
 801c02e:	2500      	movs	r5, #0
 801c030:	e7b7      	b.n	801bfa2 <setvbuf+0xea>
 801c032:	bf00      	nop
 801c034:	2000001c 	.word	0x2000001c
 801c038:	08022004 	.word	0x08022004
 801c03c:	08022024 	.word	0x08022024
 801c040:	08021fe4 	.word	0x08021fe4

0801c044 <__swbuf_r>:
 801c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c046:	460e      	mov	r6, r1
 801c048:	4614      	mov	r4, r2
 801c04a:	4605      	mov	r5, r0
 801c04c:	b118      	cbz	r0, 801c056 <__swbuf_r+0x12>
 801c04e:	6983      	ldr	r3, [r0, #24]
 801c050:	b90b      	cbnz	r3, 801c056 <__swbuf_r+0x12>
 801c052:	f000 fffd 	bl	801d050 <__sinit>
 801c056:	4b21      	ldr	r3, [pc, #132]	; (801c0dc <__swbuf_r+0x98>)
 801c058:	429c      	cmp	r4, r3
 801c05a:	d12b      	bne.n	801c0b4 <__swbuf_r+0x70>
 801c05c:	686c      	ldr	r4, [r5, #4]
 801c05e:	69a3      	ldr	r3, [r4, #24]
 801c060:	60a3      	str	r3, [r4, #8]
 801c062:	89a3      	ldrh	r3, [r4, #12]
 801c064:	071a      	lsls	r2, r3, #28
 801c066:	d52f      	bpl.n	801c0c8 <__swbuf_r+0x84>
 801c068:	6923      	ldr	r3, [r4, #16]
 801c06a:	b36b      	cbz	r3, 801c0c8 <__swbuf_r+0x84>
 801c06c:	6923      	ldr	r3, [r4, #16]
 801c06e:	6820      	ldr	r0, [r4, #0]
 801c070:	1ac0      	subs	r0, r0, r3
 801c072:	6963      	ldr	r3, [r4, #20]
 801c074:	b2f6      	uxtb	r6, r6
 801c076:	4283      	cmp	r3, r0
 801c078:	4637      	mov	r7, r6
 801c07a:	dc04      	bgt.n	801c086 <__swbuf_r+0x42>
 801c07c:	4621      	mov	r1, r4
 801c07e:	4628      	mov	r0, r5
 801c080:	f000 ff52 	bl	801cf28 <_fflush_r>
 801c084:	bb30      	cbnz	r0, 801c0d4 <__swbuf_r+0x90>
 801c086:	68a3      	ldr	r3, [r4, #8]
 801c088:	3b01      	subs	r3, #1
 801c08a:	60a3      	str	r3, [r4, #8]
 801c08c:	6823      	ldr	r3, [r4, #0]
 801c08e:	1c5a      	adds	r2, r3, #1
 801c090:	6022      	str	r2, [r4, #0]
 801c092:	701e      	strb	r6, [r3, #0]
 801c094:	6963      	ldr	r3, [r4, #20]
 801c096:	3001      	adds	r0, #1
 801c098:	4283      	cmp	r3, r0
 801c09a:	d004      	beq.n	801c0a6 <__swbuf_r+0x62>
 801c09c:	89a3      	ldrh	r3, [r4, #12]
 801c09e:	07db      	lsls	r3, r3, #31
 801c0a0:	d506      	bpl.n	801c0b0 <__swbuf_r+0x6c>
 801c0a2:	2e0a      	cmp	r6, #10
 801c0a4:	d104      	bne.n	801c0b0 <__swbuf_r+0x6c>
 801c0a6:	4621      	mov	r1, r4
 801c0a8:	4628      	mov	r0, r5
 801c0aa:	f000 ff3d 	bl	801cf28 <_fflush_r>
 801c0ae:	b988      	cbnz	r0, 801c0d4 <__swbuf_r+0x90>
 801c0b0:	4638      	mov	r0, r7
 801c0b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c0b4:	4b0a      	ldr	r3, [pc, #40]	; (801c0e0 <__swbuf_r+0x9c>)
 801c0b6:	429c      	cmp	r4, r3
 801c0b8:	d101      	bne.n	801c0be <__swbuf_r+0x7a>
 801c0ba:	68ac      	ldr	r4, [r5, #8]
 801c0bc:	e7cf      	b.n	801c05e <__swbuf_r+0x1a>
 801c0be:	4b09      	ldr	r3, [pc, #36]	; (801c0e4 <__swbuf_r+0xa0>)
 801c0c0:	429c      	cmp	r4, r3
 801c0c2:	bf08      	it	eq
 801c0c4:	68ec      	ldreq	r4, [r5, #12]
 801c0c6:	e7ca      	b.n	801c05e <__swbuf_r+0x1a>
 801c0c8:	4621      	mov	r1, r4
 801c0ca:	4628      	mov	r0, r5
 801c0cc:	f000 f80c 	bl	801c0e8 <__swsetup_r>
 801c0d0:	2800      	cmp	r0, #0
 801c0d2:	d0cb      	beq.n	801c06c <__swbuf_r+0x28>
 801c0d4:	f04f 37ff 	mov.w	r7, #4294967295
 801c0d8:	e7ea      	b.n	801c0b0 <__swbuf_r+0x6c>
 801c0da:	bf00      	nop
 801c0dc:	08022004 	.word	0x08022004
 801c0e0:	08022024 	.word	0x08022024
 801c0e4:	08021fe4 	.word	0x08021fe4

0801c0e8 <__swsetup_r>:
 801c0e8:	4b32      	ldr	r3, [pc, #200]	; (801c1b4 <__swsetup_r+0xcc>)
 801c0ea:	b570      	push	{r4, r5, r6, lr}
 801c0ec:	681d      	ldr	r5, [r3, #0]
 801c0ee:	4606      	mov	r6, r0
 801c0f0:	460c      	mov	r4, r1
 801c0f2:	b125      	cbz	r5, 801c0fe <__swsetup_r+0x16>
 801c0f4:	69ab      	ldr	r3, [r5, #24]
 801c0f6:	b913      	cbnz	r3, 801c0fe <__swsetup_r+0x16>
 801c0f8:	4628      	mov	r0, r5
 801c0fa:	f000 ffa9 	bl	801d050 <__sinit>
 801c0fe:	4b2e      	ldr	r3, [pc, #184]	; (801c1b8 <__swsetup_r+0xd0>)
 801c100:	429c      	cmp	r4, r3
 801c102:	d10f      	bne.n	801c124 <__swsetup_r+0x3c>
 801c104:	686c      	ldr	r4, [r5, #4]
 801c106:	89a3      	ldrh	r3, [r4, #12]
 801c108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c10c:	0719      	lsls	r1, r3, #28
 801c10e:	d42c      	bmi.n	801c16a <__swsetup_r+0x82>
 801c110:	06dd      	lsls	r5, r3, #27
 801c112:	d411      	bmi.n	801c138 <__swsetup_r+0x50>
 801c114:	2309      	movs	r3, #9
 801c116:	6033      	str	r3, [r6, #0]
 801c118:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c11c:	81a3      	strh	r3, [r4, #12]
 801c11e:	f04f 30ff 	mov.w	r0, #4294967295
 801c122:	e03e      	b.n	801c1a2 <__swsetup_r+0xba>
 801c124:	4b25      	ldr	r3, [pc, #148]	; (801c1bc <__swsetup_r+0xd4>)
 801c126:	429c      	cmp	r4, r3
 801c128:	d101      	bne.n	801c12e <__swsetup_r+0x46>
 801c12a:	68ac      	ldr	r4, [r5, #8]
 801c12c:	e7eb      	b.n	801c106 <__swsetup_r+0x1e>
 801c12e:	4b24      	ldr	r3, [pc, #144]	; (801c1c0 <__swsetup_r+0xd8>)
 801c130:	429c      	cmp	r4, r3
 801c132:	bf08      	it	eq
 801c134:	68ec      	ldreq	r4, [r5, #12]
 801c136:	e7e6      	b.n	801c106 <__swsetup_r+0x1e>
 801c138:	0758      	lsls	r0, r3, #29
 801c13a:	d512      	bpl.n	801c162 <__swsetup_r+0x7a>
 801c13c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c13e:	b141      	cbz	r1, 801c152 <__swsetup_r+0x6a>
 801c140:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c144:	4299      	cmp	r1, r3
 801c146:	d002      	beq.n	801c14e <__swsetup_r+0x66>
 801c148:	4630      	mov	r0, r6
 801c14a:	f001 fc33 	bl	801d9b4 <_free_r>
 801c14e:	2300      	movs	r3, #0
 801c150:	6363      	str	r3, [r4, #52]	; 0x34
 801c152:	89a3      	ldrh	r3, [r4, #12]
 801c154:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c158:	81a3      	strh	r3, [r4, #12]
 801c15a:	2300      	movs	r3, #0
 801c15c:	6063      	str	r3, [r4, #4]
 801c15e:	6923      	ldr	r3, [r4, #16]
 801c160:	6023      	str	r3, [r4, #0]
 801c162:	89a3      	ldrh	r3, [r4, #12]
 801c164:	f043 0308 	orr.w	r3, r3, #8
 801c168:	81a3      	strh	r3, [r4, #12]
 801c16a:	6923      	ldr	r3, [r4, #16]
 801c16c:	b94b      	cbnz	r3, 801c182 <__swsetup_r+0x9a>
 801c16e:	89a3      	ldrh	r3, [r4, #12]
 801c170:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c178:	d003      	beq.n	801c182 <__swsetup_r+0x9a>
 801c17a:	4621      	mov	r1, r4
 801c17c:	4630      	mov	r0, r6
 801c17e:	f001 f843 	bl	801d208 <__smakebuf_r>
 801c182:	89a0      	ldrh	r0, [r4, #12]
 801c184:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c188:	f010 0301 	ands.w	r3, r0, #1
 801c18c:	d00a      	beq.n	801c1a4 <__swsetup_r+0xbc>
 801c18e:	2300      	movs	r3, #0
 801c190:	60a3      	str	r3, [r4, #8]
 801c192:	6963      	ldr	r3, [r4, #20]
 801c194:	425b      	negs	r3, r3
 801c196:	61a3      	str	r3, [r4, #24]
 801c198:	6923      	ldr	r3, [r4, #16]
 801c19a:	b943      	cbnz	r3, 801c1ae <__swsetup_r+0xc6>
 801c19c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c1a0:	d1ba      	bne.n	801c118 <__swsetup_r+0x30>
 801c1a2:	bd70      	pop	{r4, r5, r6, pc}
 801c1a4:	0781      	lsls	r1, r0, #30
 801c1a6:	bf58      	it	pl
 801c1a8:	6963      	ldrpl	r3, [r4, #20]
 801c1aa:	60a3      	str	r3, [r4, #8]
 801c1ac:	e7f4      	b.n	801c198 <__swsetup_r+0xb0>
 801c1ae:	2000      	movs	r0, #0
 801c1b0:	e7f7      	b.n	801c1a2 <__swsetup_r+0xba>
 801c1b2:	bf00      	nop
 801c1b4:	2000001c 	.word	0x2000001c
 801c1b8:	08022004 	.word	0x08022004
 801c1bc:	08022024 	.word	0x08022024
 801c1c0:	08021fe4 	.word	0x08021fe4

0801c1c4 <__assert_func>:
 801c1c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801c1c6:	4614      	mov	r4, r2
 801c1c8:	461a      	mov	r2, r3
 801c1ca:	4b09      	ldr	r3, [pc, #36]	; (801c1f0 <__assert_func+0x2c>)
 801c1cc:	681b      	ldr	r3, [r3, #0]
 801c1ce:	4605      	mov	r5, r0
 801c1d0:	68d8      	ldr	r0, [r3, #12]
 801c1d2:	b14c      	cbz	r4, 801c1e8 <__assert_func+0x24>
 801c1d4:	4b07      	ldr	r3, [pc, #28]	; (801c1f4 <__assert_func+0x30>)
 801c1d6:	9100      	str	r1, [sp, #0]
 801c1d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801c1dc:	4906      	ldr	r1, [pc, #24]	; (801c1f8 <__assert_func+0x34>)
 801c1de:	462b      	mov	r3, r5
 801c1e0:	f000 ffb4 	bl	801d14c <fiprintf>
 801c1e4:	f001 fe50 	bl	801de88 <abort>
 801c1e8:	4b04      	ldr	r3, [pc, #16]	; (801c1fc <__assert_func+0x38>)
 801c1ea:	461c      	mov	r4, r3
 801c1ec:	e7f3      	b.n	801c1d6 <__assert_func+0x12>
 801c1ee:	bf00      	nop
 801c1f0:	2000001c 	.word	0x2000001c
 801c1f4:	08021f2a 	.word	0x08021f2a
 801c1f8:	08021f37 	.word	0x08021f37
 801c1fc:	08021f65 	.word	0x08021f65

0801c200 <quorem>:
 801c200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c204:	6903      	ldr	r3, [r0, #16]
 801c206:	690c      	ldr	r4, [r1, #16]
 801c208:	42a3      	cmp	r3, r4
 801c20a:	4607      	mov	r7, r0
 801c20c:	f2c0 8081 	blt.w	801c312 <quorem+0x112>
 801c210:	3c01      	subs	r4, #1
 801c212:	f101 0814 	add.w	r8, r1, #20
 801c216:	f100 0514 	add.w	r5, r0, #20
 801c21a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c21e:	9301      	str	r3, [sp, #4]
 801c220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801c224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c228:	3301      	adds	r3, #1
 801c22a:	429a      	cmp	r2, r3
 801c22c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801c230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801c234:	fbb2 f6f3 	udiv	r6, r2, r3
 801c238:	d331      	bcc.n	801c29e <quorem+0x9e>
 801c23a:	f04f 0e00 	mov.w	lr, #0
 801c23e:	4640      	mov	r0, r8
 801c240:	46ac      	mov	ip, r5
 801c242:	46f2      	mov	sl, lr
 801c244:	f850 2b04 	ldr.w	r2, [r0], #4
 801c248:	b293      	uxth	r3, r2
 801c24a:	fb06 e303 	mla	r3, r6, r3, lr
 801c24e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801c252:	b29b      	uxth	r3, r3
 801c254:	ebaa 0303 	sub.w	r3, sl, r3
 801c258:	0c12      	lsrs	r2, r2, #16
 801c25a:	f8dc a000 	ldr.w	sl, [ip]
 801c25e:	fb06 e202 	mla	r2, r6, r2, lr
 801c262:	fa13 f38a 	uxtah	r3, r3, sl
 801c266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801c26a:	fa1f fa82 	uxth.w	sl, r2
 801c26e:	f8dc 2000 	ldr.w	r2, [ip]
 801c272:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801c276:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c27a:	b29b      	uxth	r3, r3
 801c27c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c280:	4581      	cmp	r9, r0
 801c282:	f84c 3b04 	str.w	r3, [ip], #4
 801c286:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801c28a:	d2db      	bcs.n	801c244 <quorem+0x44>
 801c28c:	f855 300b 	ldr.w	r3, [r5, fp]
 801c290:	b92b      	cbnz	r3, 801c29e <quorem+0x9e>
 801c292:	9b01      	ldr	r3, [sp, #4]
 801c294:	3b04      	subs	r3, #4
 801c296:	429d      	cmp	r5, r3
 801c298:	461a      	mov	r2, r3
 801c29a:	d32e      	bcc.n	801c2fa <quorem+0xfa>
 801c29c:	613c      	str	r4, [r7, #16]
 801c29e:	4638      	mov	r0, r7
 801c2a0:	f001 fa78 	bl	801d794 <__mcmp>
 801c2a4:	2800      	cmp	r0, #0
 801c2a6:	db24      	blt.n	801c2f2 <quorem+0xf2>
 801c2a8:	3601      	adds	r6, #1
 801c2aa:	4628      	mov	r0, r5
 801c2ac:	f04f 0c00 	mov.w	ip, #0
 801c2b0:	f858 2b04 	ldr.w	r2, [r8], #4
 801c2b4:	f8d0 e000 	ldr.w	lr, [r0]
 801c2b8:	b293      	uxth	r3, r2
 801c2ba:	ebac 0303 	sub.w	r3, ip, r3
 801c2be:	0c12      	lsrs	r2, r2, #16
 801c2c0:	fa13 f38e 	uxtah	r3, r3, lr
 801c2c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801c2c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801c2cc:	b29b      	uxth	r3, r3
 801c2ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c2d2:	45c1      	cmp	r9, r8
 801c2d4:	f840 3b04 	str.w	r3, [r0], #4
 801c2d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801c2dc:	d2e8      	bcs.n	801c2b0 <quorem+0xb0>
 801c2de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801c2e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801c2e6:	b922      	cbnz	r2, 801c2f2 <quorem+0xf2>
 801c2e8:	3b04      	subs	r3, #4
 801c2ea:	429d      	cmp	r5, r3
 801c2ec:	461a      	mov	r2, r3
 801c2ee:	d30a      	bcc.n	801c306 <quorem+0x106>
 801c2f0:	613c      	str	r4, [r7, #16]
 801c2f2:	4630      	mov	r0, r6
 801c2f4:	b003      	add	sp, #12
 801c2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2fa:	6812      	ldr	r2, [r2, #0]
 801c2fc:	3b04      	subs	r3, #4
 801c2fe:	2a00      	cmp	r2, #0
 801c300:	d1cc      	bne.n	801c29c <quorem+0x9c>
 801c302:	3c01      	subs	r4, #1
 801c304:	e7c7      	b.n	801c296 <quorem+0x96>
 801c306:	6812      	ldr	r2, [r2, #0]
 801c308:	3b04      	subs	r3, #4
 801c30a:	2a00      	cmp	r2, #0
 801c30c:	d1f0      	bne.n	801c2f0 <quorem+0xf0>
 801c30e:	3c01      	subs	r4, #1
 801c310:	e7eb      	b.n	801c2ea <quorem+0xea>
 801c312:	2000      	movs	r0, #0
 801c314:	e7ee      	b.n	801c2f4 <quorem+0xf4>
	...

0801c318 <_dtoa_r>:
 801c318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c31c:	ec59 8b10 	vmov	r8, r9, d0
 801c320:	b095      	sub	sp, #84	; 0x54
 801c322:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801c324:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801c326:	9107      	str	r1, [sp, #28]
 801c328:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801c32c:	4606      	mov	r6, r0
 801c32e:	9209      	str	r2, [sp, #36]	; 0x24
 801c330:	9310      	str	r3, [sp, #64]	; 0x40
 801c332:	b975      	cbnz	r5, 801c352 <_dtoa_r+0x3a>
 801c334:	2010      	movs	r0, #16
 801c336:	f000 ffa7 	bl	801d288 <malloc>
 801c33a:	4602      	mov	r2, r0
 801c33c:	6270      	str	r0, [r6, #36]	; 0x24
 801c33e:	b920      	cbnz	r0, 801c34a <_dtoa_r+0x32>
 801c340:	4bab      	ldr	r3, [pc, #684]	; (801c5f0 <_dtoa_r+0x2d8>)
 801c342:	21ea      	movs	r1, #234	; 0xea
 801c344:	48ab      	ldr	r0, [pc, #684]	; (801c5f4 <_dtoa_r+0x2dc>)
 801c346:	f7ff ff3d 	bl	801c1c4 <__assert_func>
 801c34a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801c34e:	6005      	str	r5, [r0, #0]
 801c350:	60c5      	str	r5, [r0, #12]
 801c352:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c354:	6819      	ldr	r1, [r3, #0]
 801c356:	b151      	cbz	r1, 801c36e <_dtoa_r+0x56>
 801c358:	685a      	ldr	r2, [r3, #4]
 801c35a:	604a      	str	r2, [r1, #4]
 801c35c:	2301      	movs	r3, #1
 801c35e:	4093      	lsls	r3, r2
 801c360:	608b      	str	r3, [r1, #8]
 801c362:	4630      	mov	r0, r6
 801c364:	f000 ffd8 	bl	801d318 <_Bfree>
 801c368:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c36a:	2200      	movs	r2, #0
 801c36c:	601a      	str	r2, [r3, #0]
 801c36e:	f1b9 0300 	subs.w	r3, r9, #0
 801c372:	bfbb      	ittet	lt
 801c374:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801c378:	9303      	strlt	r3, [sp, #12]
 801c37a:	2300      	movge	r3, #0
 801c37c:	2201      	movlt	r2, #1
 801c37e:	bfac      	ite	ge
 801c380:	6023      	strge	r3, [r4, #0]
 801c382:	6022      	strlt	r2, [r4, #0]
 801c384:	4b9c      	ldr	r3, [pc, #624]	; (801c5f8 <_dtoa_r+0x2e0>)
 801c386:	9c03      	ldr	r4, [sp, #12]
 801c388:	43a3      	bics	r3, r4
 801c38a:	d11a      	bne.n	801c3c2 <_dtoa_r+0xaa>
 801c38c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c38e:	f242 730f 	movw	r3, #9999	; 0x270f
 801c392:	6013      	str	r3, [r2, #0]
 801c394:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801c398:	ea53 0308 	orrs.w	r3, r3, r8
 801c39c:	f000 8512 	beq.w	801cdc4 <_dtoa_r+0xaac>
 801c3a0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c3a2:	b953      	cbnz	r3, 801c3ba <_dtoa_r+0xa2>
 801c3a4:	4b95      	ldr	r3, [pc, #596]	; (801c5fc <_dtoa_r+0x2e4>)
 801c3a6:	e01f      	b.n	801c3e8 <_dtoa_r+0xd0>
 801c3a8:	4b95      	ldr	r3, [pc, #596]	; (801c600 <_dtoa_r+0x2e8>)
 801c3aa:	9300      	str	r3, [sp, #0]
 801c3ac:	3308      	adds	r3, #8
 801c3ae:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801c3b0:	6013      	str	r3, [r2, #0]
 801c3b2:	9800      	ldr	r0, [sp, #0]
 801c3b4:	b015      	add	sp, #84	; 0x54
 801c3b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c3ba:	4b90      	ldr	r3, [pc, #576]	; (801c5fc <_dtoa_r+0x2e4>)
 801c3bc:	9300      	str	r3, [sp, #0]
 801c3be:	3303      	adds	r3, #3
 801c3c0:	e7f5      	b.n	801c3ae <_dtoa_r+0x96>
 801c3c2:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c3c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c3ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 801c3d2:	d10b      	bne.n	801c3ec <_dtoa_r+0xd4>
 801c3d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c3d6:	2301      	movs	r3, #1
 801c3d8:	6013      	str	r3, [r2, #0]
 801c3da:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	f000 84ee 	beq.w	801cdbe <_dtoa_r+0xaa6>
 801c3e2:	4888      	ldr	r0, [pc, #544]	; (801c604 <_dtoa_r+0x2ec>)
 801c3e4:	6018      	str	r0, [r3, #0]
 801c3e6:	1e43      	subs	r3, r0, #1
 801c3e8:	9300      	str	r3, [sp, #0]
 801c3ea:	e7e2      	b.n	801c3b2 <_dtoa_r+0x9a>
 801c3ec:	a913      	add	r1, sp, #76	; 0x4c
 801c3ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801c3f2:	aa12      	add	r2, sp, #72	; 0x48
 801c3f4:	4630      	mov	r0, r6
 801c3f6:	f001 fa71 	bl	801d8dc <__d2b>
 801c3fa:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801c3fe:	4605      	mov	r5, r0
 801c400:	9812      	ldr	r0, [sp, #72]	; 0x48
 801c402:	2900      	cmp	r1, #0
 801c404:	d047      	beq.n	801c496 <_dtoa_r+0x17e>
 801c406:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801c408:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801c40c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801c410:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801c414:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801c418:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801c41c:	2400      	movs	r4, #0
 801c41e:	ec43 2b16 	vmov	d6, r2, r3
 801c422:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801c426:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 801c5d8 <_dtoa_r+0x2c0>
 801c42a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801c42e:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 801c5e0 <_dtoa_r+0x2c8>
 801c432:	eea7 6b05 	vfma.f64	d6, d7, d5
 801c436:	eeb0 7b46 	vmov.f64	d7, d6
 801c43a:	ee06 1a90 	vmov	s13, r1
 801c43e:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801c442:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801c5e8 <_dtoa_r+0x2d0>
 801c446:	eea5 7b06 	vfma.f64	d7, d5, d6
 801c44a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801c44e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801c452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c456:	ee16 ba90 	vmov	fp, s13
 801c45a:	9411      	str	r4, [sp, #68]	; 0x44
 801c45c:	d508      	bpl.n	801c470 <_dtoa_r+0x158>
 801c45e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801c462:	eeb4 6b47 	vcmp.f64	d6, d7
 801c466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c46a:	bf18      	it	ne
 801c46c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801c470:	f1bb 0f16 	cmp.w	fp, #22
 801c474:	d832      	bhi.n	801c4dc <_dtoa_r+0x1c4>
 801c476:	4b64      	ldr	r3, [pc, #400]	; (801c608 <_dtoa_r+0x2f0>)
 801c478:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c47c:	ed93 7b00 	vldr	d7, [r3]
 801c480:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c48c:	d501      	bpl.n	801c492 <_dtoa_r+0x17a>
 801c48e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c492:	2300      	movs	r3, #0
 801c494:	e023      	b.n	801c4de <_dtoa_r+0x1c6>
 801c496:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801c498:	4401      	add	r1, r0
 801c49a:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801c49e:	2b20      	cmp	r3, #32
 801c4a0:	bfc3      	ittte	gt
 801c4a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801c4a6:	fa04 f303 	lslgt.w	r3, r4, r3
 801c4aa:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801c4ae:	f1c3 0320 	rsble	r3, r3, #32
 801c4b2:	bfc6      	itte	gt
 801c4b4:	fa28 f804 	lsrgt.w	r8, r8, r4
 801c4b8:	ea43 0308 	orrgt.w	r3, r3, r8
 801c4bc:	fa08 f303 	lslle.w	r3, r8, r3
 801c4c0:	ee07 3a90 	vmov	s15, r3
 801c4c4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801c4c8:	3901      	subs	r1, #1
 801c4ca:	ed8d 7b00 	vstr	d7, [sp]
 801c4ce:	9c01      	ldr	r4, [sp, #4]
 801c4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801c4d4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801c4d8:	2401      	movs	r4, #1
 801c4da:	e7a0      	b.n	801c41e <_dtoa_r+0x106>
 801c4dc:	2301      	movs	r3, #1
 801c4de:	930f      	str	r3, [sp, #60]	; 0x3c
 801c4e0:	1a43      	subs	r3, r0, r1
 801c4e2:	1e5a      	subs	r2, r3, #1
 801c4e4:	bf45      	ittet	mi
 801c4e6:	f1c3 0301 	rsbmi	r3, r3, #1
 801c4ea:	9305      	strmi	r3, [sp, #20]
 801c4ec:	2300      	movpl	r3, #0
 801c4ee:	2300      	movmi	r3, #0
 801c4f0:	9206      	str	r2, [sp, #24]
 801c4f2:	bf54      	ite	pl
 801c4f4:	9305      	strpl	r3, [sp, #20]
 801c4f6:	9306      	strmi	r3, [sp, #24]
 801c4f8:	f1bb 0f00 	cmp.w	fp, #0
 801c4fc:	db18      	blt.n	801c530 <_dtoa_r+0x218>
 801c4fe:	9b06      	ldr	r3, [sp, #24]
 801c500:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 801c504:	445b      	add	r3, fp
 801c506:	9306      	str	r3, [sp, #24]
 801c508:	2300      	movs	r3, #0
 801c50a:	9a07      	ldr	r2, [sp, #28]
 801c50c:	2a09      	cmp	r2, #9
 801c50e:	d849      	bhi.n	801c5a4 <_dtoa_r+0x28c>
 801c510:	2a05      	cmp	r2, #5
 801c512:	bfc4      	itt	gt
 801c514:	3a04      	subgt	r2, #4
 801c516:	9207      	strgt	r2, [sp, #28]
 801c518:	9a07      	ldr	r2, [sp, #28]
 801c51a:	f1a2 0202 	sub.w	r2, r2, #2
 801c51e:	bfcc      	ite	gt
 801c520:	2400      	movgt	r4, #0
 801c522:	2401      	movle	r4, #1
 801c524:	2a03      	cmp	r2, #3
 801c526:	d848      	bhi.n	801c5ba <_dtoa_r+0x2a2>
 801c528:	e8df f002 	tbb	[pc, r2]
 801c52c:	3a2c2e0b 	.word	0x3a2c2e0b
 801c530:	9b05      	ldr	r3, [sp, #20]
 801c532:	2200      	movs	r2, #0
 801c534:	eba3 030b 	sub.w	r3, r3, fp
 801c538:	9305      	str	r3, [sp, #20]
 801c53a:	920e      	str	r2, [sp, #56]	; 0x38
 801c53c:	f1cb 0300 	rsb	r3, fp, #0
 801c540:	e7e3      	b.n	801c50a <_dtoa_r+0x1f2>
 801c542:	2200      	movs	r2, #0
 801c544:	9208      	str	r2, [sp, #32]
 801c546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c548:	2a00      	cmp	r2, #0
 801c54a:	dc39      	bgt.n	801c5c0 <_dtoa_r+0x2a8>
 801c54c:	f04f 0a01 	mov.w	sl, #1
 801c550:	46d1      	mov	r9, sl
 801c552:	4652      	mov	r2, sl
 801c554:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801c558:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801c55a:	2100      	movs	r1, #0
 801c55c:	6079      	str	r1, [r7, #4]
 801c55e:	2004      	movs	r0, #4
 801c560:	f100 0c14 	add.w	ip, r0, #20
 801c564:	4594      	cmp	ip, r2
 801c566:	6879      	ldr	r1, [r7, #4]
 801c568:	d92f      	bls.n	801c5ca <_dtoa_r+0x2b2>
 801c56a:	4630      	mov	r0, r6
 801c56c:	930c      	str	r3, [sp, #48]	; 0x30
 801c56e:	f000 fe93 	bl	801d298 <_Balloc>
 801c572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c574:	9000      	str	r0, [sp, #0]
 801c576:	4602      	mov	r2, r0
 801c578:	2800      	cmp	r0, #0
 801c57a:	d149      	bne.n	801c610 <_dtoa_r+0x2f8>
 801c57c:	4b23      	ldr	r3, [pc, #140]	; (801c60c <_dtoa_r+0x2f4>)
 801c57e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801c582:	e6df      	b.n	801c344 <_dtoa_r+0x2c>
 801c584:	2201      	movs	r2, #1
 801c586:	e7dd      	b.n	801c544 <_dtoa_r+0x22c>
 801c588:	2200      	movs	r2, #0
 801c58a:	9208      	str	r2, [sp, #32]
 801c58c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c58e:	eb0b 0a02 	add.w	sl, fp, r2
 801c592:	f10a 0901 	add.w	r9, sl, #1
 801c596:	464a      	mov	r2, r9
 801c598:	2a01      	cmp	r2, #1
 801c59a:	bfb8      	it	lt
 801c59c:	2201      	movlt	r2, #1
 801c59e:	e7db      	b.n	801c558 <_dtoa_r+0x240>
 801c5a0:	2201      	movs	r2, #1
 801c5a2:	e7f2      	b.n	801c58a <_dtoa_r+0x272>
 801c5a4:	2401      	movs	r4, #1
 801c5a6:	2200      	movs	r2, #0
 801c5a8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801c5ac:	f04f 3aff 	mov.w	sl, #4294967295
 801c5b0:	2100      	movs	r1, #0
 801c5b2:	46d1      	mov	r9, sl
 801c5b4:	2212      	movs	r2, #18
 801c5b6:	9109      	str	r1, [sp, #36]	; 0x24
 801c5b8:	e7ce      	b.n	801c558 <_dtoa_r+0x240>
 801c5ba:	2201      	movs	r2, #1
 801c5bc:	9208      	str	r2, [sp, #32]
 801c5be:	e7f5      	b.n	801c5ac <_dtoa_r+0x294>
 801c5c0:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 801c5c4:	46d1      	mov	r9, sl
 801c5c6:	4652      	mov	r2, sl
 801c5c8:	e7c6      	b.n	801c558 <_dtoa_r+0x240>
 801c5ca:	3101      	adds	r1, #1
 801c5cc:	6079      	str	r1, [r7, #4]
 801c5ce:	0040      	lsls	r0, r0, #1
 801c5d0:	e7c6      	b.n	801c560 <_dtoa_r+0x248>
 801c5d2:	bf00      	nop
 801c5d4:	f3af 8000 	nop.w
 801c5d8:	636f4361 	.word	0x636f4361
 801c5dc:	3fd287a7 	.word	0x3fd287a7
 801c5e0:	8b60c8b3 	.word	0x8b60c8b3
 801c5e4:	3fc68a28 	.word	0x3fc68a28
 801c5e8:	509f79fb 	.word	0x509f79fb
 801c5ec:	3fd34413 	.word	0x3fd34413
 801c5f0:	08021eb4 	.word	0x08021eb4
 801c5f4:	08021f73 	.word	0x08021f73
 801c5f8:	7ff00000 	.word	0x7ff00000
 801c5fc:	08021f6f 	.word	0x08021f6f
 801c600:	08021f66 	.word	0x08021f66
 801c604:	08021e91 	.word	0x08021e91
 801c608:	080220d0 	.word	0x080220d0
 801c60c:	08021fd2 	.word	0x08021fd2
 801c610:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801c612:	9900      	ldr	r1, [sp, #0]
 801c614:	6011      	str	r1, [r2, #0]
 801c616:	f1b9 0f0e 	cmp.w	r9, #14
 801c61a:	d872      	bhi.n	801c702 <_dtoa_r+0x3ea>
 801c61c:	2c00      	cmp	r4, #0
 801c61e:	d070      	beq.n	801c702 <_dtoa_r+0x3ea>
 801c620:	f1bb 0f00 	cmp.w	fp, #0
 801c624:	f340 80a6 	ble.w	801c774 <_dtoa_r+0x45c>
 801c628:	49ca      	ldr	r1, [pc, #808]	; (801c954 <_dtoa_r+0x63c>)
 801c62a:	f00b 020f 	and.w	r2, fp, #15
 801c62e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801c632:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801c636:	ed92 7b00 	vldr	d7, [r2]
 801c63a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801c63e:	f000 808d 	beq.w	801c75c <_dtoa_r+0x444>
 801c642:	4ac5      	ldr	r2, [pc, #788]	; (801c958 <_dtoa_r+0x640>)
 801c644:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 801c648:	ed92 6b08 	vldr	d6, [r2, #32]
 801c64c:	ee85 6b06 	vdiv.f64	d6, d5, d6
 801c650:	ed8d 6b02 	vstr	d6, [sp, #8]
 801c654:	f001 010f 	and.w	r1, r1, #15
 801c658:	2203      	movs	r2, #3
 801c65a:	48bf      	ldr	r0, [pc, #764]	; (801c958 <_dtoa_r+0x640>)
 801c65c:	2900      	cmp	r1, #0
 801c65e:	d17f      	bne.n	801c760 <_dtoa_r+0x448>
 801c660:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c664:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801c668:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c66c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801c66e:	2900      	cmp	r1, #0
 801c670:	f000 80b2 	beq.w	801c7d8 <_dtoa_r+0x4c0>
 801c674:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801c678:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c67c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c684:	f140 80a8 	bpl.w	801c7d8 <_dtoa_r+0x4c0>
 801c688:	f1b9 0f00 	cmp.w	r9, #0
 801c68c:	f000 80a4 	beq.w	801c7d8 <_dtoa_r+0x4c0>
 801c690:	f1ba 0f00 	cmp.w	sl, #0
 801c694:	dd31      	ble.n	801c6fa <_dtoa_r+0x3e2>
 801c696:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801c69a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c69e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801c6a2:	f10b 37ff 	add.w	r7, fp, #4294967295
 801c6a6:	3201      	adds	r2, #1
 801c6a8:	4650      	mov	r0, sl
 801c6aa:	ed9d 6b02 	vldr	d6, [sp, #8]
 801c6ae:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801c6b2:	ee07 2a90 	vmov	s15, r2
 801c6b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801c6ba:	eea7 5b06 	vfma.f64	d5, d7, d6
 801c6be:	ed8d 5b02 	vstr	d5, [sp, #8]
 801c6c2:	9c03      	ldr	r4, [sp, #12]
 801c6c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c6c8:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801c6cc:	2800      	cmp	r0, #0
 801c6ce:	f040 8086 	bne.w	801c7de <_dtoa_r+0x4c6>
 801c6d2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c6d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801c6da:	ec42 1b17 	vmov	d7, r1, r2
 801c6de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c6e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6e6:	f300 8272 	bgt.w	801cbce <_dtoa_r+0x8b6>
 801c6ea:	eeb1 7b47 	vneg.f64	d7, d7
 801c6ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c6f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6f6:	f100 8267 	bmi.w	801cbc8 <_dtoa_r+0x8b0>
 801c6fa:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 801c6fe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 801c702:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801c704:	2a00      	cmp	r2, #0
 801c706:	f2c0 8129 	blt.w	801c95c <_dtoa_r+0x644>
 801c70a:	f1bb 0f0e 	cmp.w	fp, #14
 801c70e:	f300 8125 	bgt.w	801c95c <_dtoa_r+0x644>
 801c712:	4b90      	ldr	r3, [pc, #576]	; (801c954 <_dtoa_r+0x63c>)
 801c714:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801c718:	ed93 6b00 	vldr	d6, [r3]
 801c71c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c71e:	2b00      	cmp	r3, #0
 801c720:	f280 80c3 	bge.w	801c8aa <_dtoa_r+0x592>
 801c724:	f1b9 0f00 	cmp.w	r9, #0
 801c728:	f300 80bf 	bgt.w	801c8aa <_dtoa_r+0x592>
 801c72c:	f040 824c 	bne.w	801cbc8 <_dtoa_r+0x8b0>
 801c730:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801c734:	ee26 6b07 	vmul.f64	d6, d6, d7
 801c738:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c73c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c744:	464c      	mov	r4, r9
 801c746:	464f      	mov	r7, r9
 801c748:	f280 8222 	bge.w	801cb90 <_dtoa_r+0x878>
 801c74c:	f8dd 8000 	ldr.w	r8, [sp]
 801c750:	2331      	movs	r3, #49	; 0x31
 801c752:	f808 3b01 	strb.w	r3, [r8], #1
 801c756:	f10b 0b01 	add.w	fp, fp, #1
 801c75a:	e21e      	b.n	801cb9a <_dtoa_r+0x882>
 801c75c:	2202      	movs	r2, #2
 801c75e:	e77c      	b.n	801c65a <_dtoa_r+0x342>
 801c760:	07cc      	lsls	r4, r1, #31
 801c762:	d504      	bpl.n	801c76e <_dtoa_r+0x456>
 801c764:	ed90 6b00 	vldr	d6, [r0]
 801c768:	3201      	adds	r2, #1
 801c76a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c76e:	1049      	asrs	r1, r1, #1
 801c770:	3008      	adds	r0, #8
 801c772:	e773      	b.n	801c65c <_dtoa_r+0x344>
 801c774:	d02e      	beq.n	801c7d4 <_dtoa_r+0x4bc>
 801c776:	f1cb 0100 	rsb	r1, fp, #0
 801c77a:	4a76      	ldr	r2, [pc, #472]	; (801c954 <_dtoa_r+0x63c>)
 801c77c:	f001 000f 	and.w	r0, r1, #15
 801c780:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c784:	ed92 7b00 	vldr	d7, [r2]
 801c788:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 801c78c:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c790:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c794:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 801c798:	e9cd 7802 	strd	r7, r8, [sp, #8]
 801c79c:	486e      	ldr	r0, [pc, #440]	; (801c958 <_dtoa_r+0x640>)
 801c79e:	1109      	asrs	r1, r1, #4
 801c7a0:	2400      	movs	r4, #0
 801c7a2:	2202      	movs	r2, #2
 801c7a4:	b939      	cbnz	r1, 801c7b6 <_dtoa_r+0x49e>
 801c7a6:	2c00      	cmp	r4, #0
 801c7a8:	f43f af60 	beq.w	801c66c <_dtoa_r+0x354>
 801c7ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801c7b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c7b4:	e75a      	b.n	801c66c <_dtoa_r+0x354>
 801c7b6:	07cf      	lsls	r7, r1, #31
 801c7b8:	d509      	bpl.n	801c7ce <_dtoa_r+0x4b6>
 801c7ba:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 801c7be:	ed90 7b00 	vldr	d7, [r0]
 801c7c2:	ee26 7b07 	vmul.f64	d7, d6, d7
 801c7c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 801c7ca:	3201      	adds	r2, #1
 801c7cc:	2401      	movs	r4, #1
 801c7ce:	1049      	asrs	r1, r1, #1
 801c7d0:	3008      	adds	r0, #8
 801c7d2:	e7e7      	b.n	801c7a4 <_dtoa_r+0x48c>
 801c7d4:	2202      	movs	r2, #2
 801c7d6:	e749      	b.n	801c66c <_dtoa_r+0x354>
 801c7d8:	465f      	mov	r7, fp
 801c7da:	4648      	mov	r0, r9
 801c7dc:	e765      	b.n	801c6aa <_dtoa_r+0x392>
 801c7de:	ec42 1b17 	vmov	d7, r1, r2
 801c7e2:	4a5c      	ldr	r2, [pc, #368]	; (801c954 <_dtoa_r+0x63c>)
 801c7e4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801c7e8:	ed12 4b02 	vldr	d4, [r2, #-8]
 801c7ec:	9a00      	ldr	r2, [sp, #0]
 801c7ee:	1814      	adds	r4, r2, r0
 801c7f0:	9a08      	ldr	r2, [sp, #32]
 801c7f2:	b352      	cbz	r2, 801c84a <_dtoa_r+0x532>
 801c7f4:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801c7f8:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801c7fc:	f8dd 8000 	ldr.w	r8, [sp]
 801c800:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801c804:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c808:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c80c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c810:	ee14 2a90 	vmov	r2, s9
 801c814:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c818:	3230      	adds	r2, #48	; 0x30
 801c81a:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c81e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c826:	f808 2b01 	strb.w	r2, [r8], #1
 801c82a:	d439      	bmi.n	801c8a0 <_dtoa_r+0x588>
 801c82c:	ee32 5b46 	vsub.f64	d5, d2, d6
 801c830:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801c834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c838:	d472      	bmi.n	801c920 <_dtoa_r+0x608>
 801c83a:	45a0      	cmp	r8, r4
 801c83c:	f43f af5d 	beq.w	801c6fa <_dtoa_r+0x3e2>
 801c840:	ee27 7b03 	vmul.f64	d7, d7, d3
 801c844:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c848:	e7e0      	b.n	801c80c <_dtoa_r+0x4f4>
 801c84a:	f8dd 8000 	ldr.w	r8, [sp]
 801c84e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c852:	4621      	mov	r1, r4
 801c854:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801c858:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801c85c:	ee14 2a90 	vmov	r2, s9
 801c860:	3230      	adds	r2, #48	; 0x30
 801c862:	f808 2b01 	strb.w	r2, [r8], #1
 801c866:	45a0      	cmp	r8, r4
 801c868:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801c86c:	ee36 6b45 	vsub.f64	d6, d6, d5
 801c870:	d118      	bne.n	801c8a4 <_dtoa_r+0x58c>
 801c872:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801c876:	ee37 4b05 	vadd.f64	d4, d7, d5
 801c87a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801c87e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c882:	dc4d      	bgt.n	801c920 <_dtoa_r+0x608>
 801c884:	ee35 7b47 	vsub.f64	d7, d5, d7
 801c888:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c88c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c890:	f57f af33 	bpl.w	801c6fa <_dtoa_r+0x3e2>
 801c894:	4688      	mov	r8, r1
 801c896:	3901      	subs	r1, #1
 801c898:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801c89c:	2b30      	cmp	r3, #48	; 0x30
 801c89e:	d0f9      	beq.n	801c894 <_dtoa_r+0x57c>
 801c8a0:	46bb      	mov	fp, r7
 801c8a2:	e02a      	b.n	801c8fa <_dtoa_r+0x5e2>
 801c8a4:	ee26 6b03 	vmul.f64	d6, d6, d3
 801c8a8:	e7d6      	b.n	801c858 <_dtoa_r+0x540>
 801c8aa:	ed9d 7b02 	vldr	d7, [sp, #8]
 801c8ae:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801c8b2:	f8dd 8000 	ldr.w	r8, [sp]
 801c8b6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801c8ba:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801c8be:	ee15 3a10 	vmov	r3, s10
 801c8c2:	3330      	adds	r3, #48	; 0x30
 801c8c4:	f808 3b01 	strb.w	r3, [r8], #1
 801c8c8:	9b00      	ldr	r3, [sp, #0]
 801c8ca:	eba8 0303 	sub.w	r3, r8, r3
 801c8ce:	4599      	cmp	r9, r3
 801c8d0:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801c8d4:	eea3 7b46 	vfms.f64	d7, d3, d6
 801c8d8:	d133      	bne.n	801c942 <_dtoa_r+0x62a>
 801c8da:	ee37 7b07 	vadd.f64	d7, d7, d7
 801c8de:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8e6:	dc1a      	bgt.n	801c91e <_dtoa_r+0x606>
 801c8e8:	eeb4 7b46 	vcmp.f64	d7, d6
 801c8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c8f0:	d103      	bne.n	801c8fa <_dtoa_r+0x5e2>
 801c8f2:	ee15 3a10 	vmov	r3, s10
 801c8f6:	07d9      	lsls	r1, r3, #31
 801c8f8:	d411      	bmi.n	801c91e <_dtoa_r+0x606>
 801c8fa:	4629      	mov	r1, r5
 801c8fc:	4630      	mov	r0, r6
 801c8fe:	f000 fd0b 	bl	801d318 <_Bfree>
 801c902:	2300      	movs	r3, #0
 801c904:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801c906:	f888 3000 	strb.w	r3, [r8]
 801c90a:	f10b 0301 	add.w	r3, fp, #1
 801c90e:	6013      	str	r3, [r2, #0]
 801c910:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801c912:	2b00      	cmp	r3, #0
 801c914:	f43f ad4d 	beq.w	801c3b2 <_dtoa_r+0x9a>
 801c918:	f8c3 8000 	str.w	r8, [r3]
 801c91c:	e549      	b.n	801c3b2 <_dtoa_r+0x9a>
 801c91e:	465f      	mov	r7, fp
 801c920:	4643      	mov	r3, r8
 801c922:	4698      	mov	r8, r3
 801c924:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c928:	2a39      	cmp	r2, #57	; 0x39
 801c92a:	d106      	bne.n	801c93a <_dtoa_r+0x622>
 801c92c:	9a00      	ldr	r2, [sp, #0]
 801c92e:	429a      	cmp	r2, r3
 801c930:	d1f7      	bne.n	801c922 <_dtoa_r+0x60a>
 801c932:	9900      	ldr	r1, [sp, #0]
 801c934:	2230      	movs	r2, #48	; 0x30
 801c936:	3701      	adds	r7, #1
 801c938:	700a      	strb	r2, [r1, #0]
 801c93a:	781a      	ldrb	r2, [r3, #0]
 801c93c:	3201      	adds	r2, #1
 801c93e:	701a      	strb	r2, [r3, #0]
 801c940:	e7ae      	b.n	801c8a0 <_dtoa_r+0x588>
 801c942:	ee27 7b04 	vmul.f64	d7, d7, d4
 801c946:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801c94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c94e:	d1b2      	bne.n	801c8b6 <_dtoa_r+0x59e>
 801c950:	e7d3      	b.n	801c8fa <_dtoa_r+0x5e2>
 801c952:	bf00      	nop
 801c954:	080220d0 	.word	0x080220d0
 801c958:	080220a8 	.word	0x080220a8
 801c95c:	9908      	ldr	r1, [sp, #32]
 801c95e:	2900      	cmp	r1, #0
 801c960:	f000 80d1 	beq.w	801cb06 <_dtoa_r+0x7ee>
 801c964:	9907      	ldr	r1, [sp, #28]
 801c966:	2901      	cmp	r1, #1
 801c968:	f300 80b4 	bgt.w	801cad4 <_dtoa_r+0x7bc>
 801c96c:	9911      	ldr	r1, [sp, #68]	; 0x44
 801c96e:	2900      	cmp	r1, #0
 801c970:	f000 80ac 	beq.w	801cacc <_dtoa_r+0x7b4>
 801c974:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801c978:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c97c:	461c      	mov	r4, r3
 801c97e:	930a      	str	r3, [sp, #40]	; 0x28
 801c980:	9b05      	ldr	r3, [sp, #20]
 801c982:	4413      	add	r3, r2
 801c984:	9305      	str	r3, [sp, #20]
 801c986:	9b06      	ldr	r3, [sp, #24]
 801c988:	2101      	movs	r1, #1
 801c98a:	4413      	add	r3, r2
 801c98c:	4630      	mov	r0, r6
 801c98e:	9306      	str	r3, [sp, #24]
 801c990:	f000 fd7e 	bl	801d490 <__i2b>
 801c994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c996:	4607      	mov	r7, r0
 801c998:	f1b8 0f00 	cmp.w	r8, #0
 801c99c:	dd0d      	ble.n	801c9ba <_dtoa_r+0x6a2>
 801c99e:	9a06      	ldr	r2, [sp, #24]
 801c9a0:	2a00      	cmp	r2, #0
 801c9a2:	dd0a      	ble.n	801c9ba <_dtoa_r+0x6a2>
 801c9a4:	4542      	cmp	r2, r8
 801c9a6:	9905      	ldr	r1, [sp, #20]
 801c9a8:	bfa8      	it	ge
 801c9aa:	4642      	movge	r2, r8
 801c9ac:	1a89      	subs	r1, r1, r2
 801c9ae:	9105      	str	r1, [sp, #20]
 801c9b0:	9906      	ldr	r1, [sp, #24]
 801c9b2:	eba8 0802 	sub.w	r8, r8, r2
 801c9b6:	1a8a      	subs	r2, r1, r2
 801c9b8:	9206      	str	r2, [sp, #24]
 801c9ba:	b303      	cbz	r3, 801c9fe <_dtoa_r+0x6e6>
 801c9bc:	9a08      	ldr	r2, [sp, #32]
 801c9be:	2a00      	cmp	r2, #0
 801c9c0:	f000 80a6 	beq.w	801cb10 <_dtoa_r+0x7f8>
 801c9c4:	2c00      	cmp	r4, #0
 801c9c6:	dd13      	ble.n	801c9f0 <_dtoa_r+0x6d8>
 801c9c8:	4639      	mov	r1, r7
 801c9ca:	4622      	mov	r2, r4
 801c9cc:	4630      	mov	r0, r6
 801c9ce:	930c      	str	r3, [sp, #48]	; 0x30
 801c9d0:	f000 fe1a 	bl	801d608 <__pow5mult>
 801c9d4:	462a      	mov	r2, r5
 801c9d6:	4601      	mov	r1, r0
 801c9d8:	4607      	mov	r7, r0
 801c9da:	4630      	mov	r0, r6
 801c9dc:	f000 fd6e 	bl	801d4bc <__multiply>
 801c9e0:	4629      	mov	r1, r5
 801c9e2:	900a      	str	r0, [sp, #40]	; 0x28
 801c9e4:	4630      	mov	r0, r6
 801c9e6:	f000 fc97 	bl	801d318 <_Bfree>
 801c9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c9ec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c9ee:	4615      	mov	r5, r2
 801c9f0:	1b1a      	subs	r2, r3, r4
 801c9f2:	d004      	beq.n	801c9fe <_dtoa_r+0x6e6>
 801c9f4:	4629      	mov	r1, r5
 801c9f6:	4630      	mov	r0, r6
 801c9f8:	f000 fe06 	bl	801d608 <__pow5mult>
 801c9fc:	4605      	mov	r5, r0
 801c9fe:	2101      	movs	r1, #1
 801ca00:	4630      	mov	r0, r6
 801ca02:	f000 fd45 	bl	801d490 <__i2b>
 801ca06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	4604      	mov	r4, r0
 801ca0c:	f340 8082 	ble.w	801cb14 <_dtoa_r+0x7fc>
 801ca10:	461a      	mov	r2, r3
 801ca12:	4601      	mov	r1, r0
 801ca14:	4630      	mov	r0, r6
 801ca16:	f000 fdf7 	bl	801d608 <__pow5mult>
 801ca1a:	9b07      	ldr	r3, [sp, #28]
 801ca1c:	2b01      	cmp	r3, #1
 801ca1e:	4604      	mov	r4, r0
 801ca20:	dd7b      	ble.n	801cb1a <_dtoa_r+0x802>
 801ca22:	2300      	movs	r3, #0
 801ca24:	930a      	str	r3, [sp, #40]	; 0x28
 801ca26:	6922      	ldr	r2, [r4, #16]
 801ca28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ca2c:	6910      	ldr	r0, [r2, #16]
 801ca2e:	f000 fcdf 	bl	801d3f0 <__hi0bits>
 801ca32:	f1c0 0020 	rsb	r0, r0, #32
 801ca36:	9b06      	ldr	r3, [sp, #24]
 801ca38:	4418      	add	r0, r3
 801ca3a:	f010 001f 	ands.w	r0, r0, #31
 801ca3e:	f000 808d 	beq.w	801cb5c <_dtoa_r+0x844>
 801ca42:	f1c0 0220 	rsb	r2, r0, #32
 801ca46:	2a04      	cmp	r2, #4
 801ca48:	f340 8086 	ble.w	801cb58 <_dtoa_r+0x840>
 801ca4c:	f1c0 001c 	rsb	r0, r0, #28
 801ca50:	9b05      	ldr	r3, [sp, #20]
 801ca52:	4403      	add	r3, r0
 801ca54:	9305      	str	r3, [sp, #20]
 801ca56:	9b06      	ldr	r3, [sp, #24]
 801ca58:	4403      	add	r3, r0
 801ca5a:	4480      	add	r8, r0
 801ca5c:	9306      	str	r3, [sp, #24]
 801ca5e:	9b05      	ldr	r3, [sp, #20]
 801ca60:	2b00      	cmp	r3, #0
 801ca62:	dd05      	ble.n	801ca70 <_dtoa_r+0x758>
 801ca64:	4629      	mov	r1, r5
 801ca66:	461a      	mov	r2, r3
 801ca68:	4630      	mov	r0, r6
 801ca6a:	f000 fe27 	bl	801d6bc <__lshift>
 801ca6e:	4605      	mov	r5, r0
 801ca70:	9b06      	ldr	r3, [sp, #24]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	dd05      	ble.n	801ca82 <_dtoa_r+0x76a>
 801ca76:	4621      	mov	r1, r4
 801ca78:	461a      	mov	r2, r3
 801ca7a:	4630      	mov	r0, r6
 801ca7c:	f000 fe1e 	bl	801d6bc <__lshift>
 801ca80:	4604      	mov	r4, r0
 801ca82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ca84:	2b00      	cmp	r3, #0
 801ca86:	d06b      	beq.n	801cb60 <_dtoa_r+0x848>
 801ca88:	4621      	mov	r1, r4
 801ca8a:	4628      	mov	r0, r5
 801ca8c:	f000 fe82 	bl	801d794 <__mcmp>
 801ca90:	2800      	cmp	r0, #0
 801ca92:	da65      	bge.n	801cb60 <_dtoa_r+0x848>
 801ca94:	2300      	movs	r3, #0
 801ca96:	4629      	mov	r1, r5
 801ca98:	220a      	movs	r2, #10
 801ca9a:	4630      	mov	r0, r6
 801ca9c:	f000 fc5e 	bl	801d35c <__multadd>
 801caa0:	9b08      	ldr	r3, [sp, #32]
 801caa2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801caa6:	4605      	mov	r5, r0
 801caa8:	2b00      	cmp	r3, #0
 801caaa:	f000 8192 	beq.w	801cdd2 <_dtoa_r+0xaba>
 801caae:	4639      	mov	r1, r7
 801cab0:	2300      	movs	r3, #0
 801cab2:	220a      	movs	r2, #10
 801cab4:	4630      	mov	r0, r6
 801cab6:	f000 fc51 	bl	801d35c <__multadd>
 801caba:	f1ba 0f00 	cmp.w	sl, #0
 801cabe:	4607      	mov	r7, r0
 801cac0:	f300 808e 	bgt.w	801cbe0 <_dtoa_r+0x8c8>
 801cac4:	9b07      	ldr	r3, [sp, #28]
 801cac6:	2b02      	cmp	r3, #2
 801cac8:	dc51      	bgt.n	801cb6e <_dtoa_r+0x856>
 801caca:	e089      	b.n	801cbe0 <_dtoa_r+0x8c8>
 801cacc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cace:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801cad2:	e751      	b.n	801c978 <_dtoa_r+0x660>
 801cad4:	f109 34ff 	add.w	r4, r9, #4294967295
 801cad8:	42a3      	cmp	r3, r4
 801cada:	bfbf      	itttt	lt
 801cadc:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 801cade:	1ae3      	sublt	r3, r4, r3
 801cae0:	18d2      	addlt	r2, r2, r3
 801cae2:	4613      	movlt	r3, r2
 801cae4:	bfb7      	itett	lt
 801cae6:	930e      	strlt	r3, [sp, #56]	; 0x38
 801cae8:	1b1c      	subge	r4, r3, r4
 801caea:	4623      	movlt	r3, r4
 801caec:	2400      	movlt	r4, #0
 801caee:	f1b9 0f00 	cmp.w	r9, #0
 801caf2:	bfb5      	itete	lt
 801caf4:	9a05      	ldrlt	r2, [sp, #20]
 801caf6:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 801cafa:	eba2 0809 	sublt.w	r8, r2, r9
 801cafe:	464a      	movge	r2, r9
 801cb00:	bfb8      	it	lt
 801cb02:	2200      	movlt	r2, #0
 801cb04:	e73b      	b.n	801c97e <_dtoa_r+0x666>
 801cb06:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cb0a:	9f08      	ldr	r7, [sp, #32]
 801cb0c:	461c      	mov	r4, r3
 801cb0e:	e743      	b.n	801c998 <_dtoa_r+0x680>
 801cb10:	461a      	mov	r2, r3
 801cb12:	e76f      	b.n	801c9f4 <_dtoa_r+0x6dc>
 801cb14:	9b07      	ldr	r3, [sp, #28]
 801cb16:	2b01      	cmp	r3, #1
 801cb18:	dc18      	bgt.n	801cb4c <_dtoa_r+0x834>
 801cb1a:	9b02      	ldr	r3, [sp, #8]
 801cb1c:	b9b3      	cbnz	r3, 801cb4c <_dtoa_r+0x834>
 801cb1e:	9b03      	ldr	r3, [sp, #12]
 801cb20:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801cb24:	b9a2      	cbnz	r2, 801cb50 <_dtoa_r+0x838>
 801cb26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801cb2a:	0d12      	lsrs	r2, r2, #20
 801cb2c:	0512      	lsls	r2, r2, #20
 801cb2e:	b18a      	cbz	r2, 801cb54 <_dtoa_r+0x83c>
 801cb30:	9b05      	ldr	r3, [sp, #20]
 801cb32:	3301      	adds	r3, #1
 801cb34:	9305      	str	r3, [sp, #20]
 801cb36:	9b06      	ldr	r3, [sp, #24]
 801cb38:	3301      	adds	r3, #1
 801cb3a:	9306      	str	r3, [sp, #24]
 801cb3c:	2301      	movs	r3, #1
 801cb3e:	930a      	str	r3, [sp, #40]	; 0x28
 801cb40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	f47f af6f 	bne.w	801ca26 <_dtoa_r+0x70e>
 801cb48:	2001      	movs	r0, #1
 801cb4a:	e774      	b.n	801ca36 <_dtoa_r+0x71e>
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	e7f6      	b.n	801cb3e <_dtoa_r+0x826>
 801cb50:	9b02      	ldr	r3, [sp, #8]
 801cb52:	e7f4      	b.n	801cb3e <_dtoa_r+0x826>
 801cb54:	920a      	str	r2, [sp, #40]	; 0x28
 801cb56:	e7f3      	b.n	801cb40 <_dtoa_r+0x828>
 801cb58:	d081      	beq.n	801ca5e <_dtoa_r+0x746>
 801cb5a:	4610      	mov	r0, r2
 801cb5c:	301c      	adds	r0, #28
 801cb5e:	e777      	b.n	801ca50 <_dtoa_r+0x738>
 801cb60:	f1b9 0f00 	cmp.w	r9, #0
 801cb64:	dc37      	bgt.n	801cbd6 <_dtoa_r+0x8be>
 801cb66:	9b07      	ldr	r3, [sp, #28]
 801cb68:	2b02      	cmp	r3, #2
 801cb6a:	dd34      	ble.n	801cbd6 <_dtoa_r+0x8be>
 801cb6c:	46ca      	mov	sl, r9
 801cb6e:	f1ba 0f00 	cmp.w	sl, #0
 801cb72:	d10d      	bne.n	801cb90 <_dtoa_r+0x878>
 801cb74:	4621      	mov	r1, r4
 801cb76:	4653      	mov	r3, sl
 801cb78:	2205      	movs	r2, #5
 801cb7a:	4630      	mov	r0, r6
 801cb7c:	f000 fbee 	bl	801d35c <__multadd>
 801cb80:	4601      	mov	r1, r0
 801cb82:	4604      	mov	r4, r0
 801cb84:	4628      	mov	r0, r5
 801cb86:	f000 fe05 	bl	801d794 <__mcmp>
 801cb8a:	2800      	cmp	r0, #0
 801cb8c:	f73f adde 	bgt.w	801c74c <_dtoa_r+0x434>
 801cb90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cb92:	f8dd 8000 	ldr.w	r8, [sp]
 801cb96:	ea6f 0b03 	mvn.w	fp, r3
 801cb9a:	f04f 0900 	mov.w	r9, #0
 801cb9e:	4621      	mov	r1, r4
 801cba0:	4630      	mov	r0, r6
 801cba2:	f000 fbb9 	bl	801d318 <_Bfree>
 801cba6:	2f00      	cmp	r7, #0
 801cba8:	f43f aea7 	beq.w	801c8fa <_dtoa_r+0x5e2>
 801cbac:	f1b9 0f00 	cmp.w	r9, #0
 801cbb0:	d005      	beq.n	801cbbe <_dtoa_r+0x8a6>
 801cbb2:	45b9      	cmp	r9, r7
 801cbb4:	d003      	beq.n	801cbbe <_dtoa_r+0x8a6>
 801cbb6:	4649      	mov	r1, r9
 801cbb8:	4630      	mov	r0, r6
 801cbba:	f000 fbad 	bl	801d318 <_Bfree>
 801cbbe:	4639      	mov	r1, r7
 801cbc0:	4630      	mov	r0, r6
 801cbc2:	f000 fba9 	bl	801d318 <_Bfree>
 801cbc6:	e698      	b.n	801c8fa <_dtoa_r+0x5e2>
 801cbc8:	2400      	movs	r4, #0
 801cbca:	4627      	mov	r7, r4
 801cbcc:	e7e0      	b.n	801cb90 <_dtoa_r+0x878>
 801cbce:	46bb      	mov	fp, r7
 801cbd0:	4604      	mov	r4, r0
 801cbd2:	4607      	mov	r7, r0
 801cbd4:	e5ba      	b.n	801c74c <_dtoa_r+0x434>
 801cbd6:	9b08      	ldr	r3, [sp, #32]
 801cbd8:	46ca      	mov	sl, r9
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	f000 8100 	beq.w	801cde0 <_dtoa_r+0xac8>
 801cbe0:	f1b8 0f00 	cmp.w	r8, #0
 801cbe4:	dd05      	ble.n	801cbf2 <_dtoa_r+0x8da>
 801cbe6:	4639      	mov	r1, r7
 801cbe8:	4642      	mov	r2, r8
 801cbea:	4630      	mov	r0, r6
 801cbec:	f000 fd66 	bl	801d6bc <__lshift>
 801cbf0:	4607      	mov	r7, r0
 801cbf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d05d      	beq.n	801ccb4 <_dtoa_r+0x99c>
 801cbf8:	6879      	ldr	r1, [r7, #4]
 801cbfa:	4630      	mov	r0, r6
 801cbfc:	f000 fb4c 	bl	801d298 <_Balloc>
 801cc00:	4680      	mov	r8, r0
 801cc02:	b928      	cbnz	r0, 801cc10 <_dtoa_r+0x8f8>
 801cc04:	4b82      	ldr	r3, [pc, #520]	; (801ce10 <_dtoa_r+0xaf8>)
 801cc06:	4602      	mov	r2, r0
 801cc08:	f240 21ea 	movw	r1, #746	; 0x2ea
 801cc0c:	f7ff bb9a 	b.w	801c344 <_dtoa_r+0x2c>
 801cc10:	693a      	ldr	r2, [r7, #16]
 801cc12:	3202      	adds	r2, #2
 801cc14:	0092      	lsls	r2, r2, #2
 801cc16:	f107 010c 	add.w	r1, r7, #12
 801cc1a:	300c      	adds	r0, #12
 801cc1c:	f7fe fc1e 	bl	801b45c <memcpy>
 801cc20:	2201      	movs	r2, #1
 801cc22:	4641      	mov	r1, r8
 801cc24:	4630      	mov	r0, r6
 801cc26:	f000 fd49 	bl	801d6bc <__lshift>
 801cc2a:	9b00      	ldr	r3, [sp, #0]
 801cc2c:	3301      	adds	r3, #1
 801cc2e:	9305      	str	r3, [sp, #20]
 801cc30:	9b00      	ldr	r3, [sp, #0]
 801cc32:	4453      	add	r3, sl
 801cc34:	9309      	str	r3, [sp, #36]	; 0x24
 801cc36:	9b02      	ldr	r3, [sp, #8]
 801cc38:	f003 0301 	and.w	r3, r3, #1
 801cc3c:	46b9      	mov	r9, r7
 801cc3e:	9308      	str	r3, [sp, #32]
 801cc40:	4607      	mov	r7, r0
 801cc42:	9b05      	ldr	r3, [sp, #20]
 801cc44:	4621      	mov	r1, r4
 801cc46:	3b01      	subs	r3, #1
 801cc48:	4628      	mov	r0, r5
 801cc4a:	9302      	str	r3, [sp, #8]
 801cc4c:	f7ff fad8 	bl	801c200 <quorem>
 801cc50:	4603      	mov	r3, r0
 801cc52:	3330      	adds	r3, #48	; 0x30
 801cc54:	9006      	str	r0, [sp, #24]
 801cc56:	4649      	mov	r1, r9
 801cc58:	4628      	mov	r0, r5
 801cc5a:	930a      	str	r3, [sp, #40]	; 0x28
 801cc5c:	f000 fd9a 	bl	801d794 <__mcmp>
 801cc60:	463a      	mov	r2, r7
 801cc62:	4682      	mov	sl, r0
 801cc64:	4621      	mov	r1, r4
 801cc66:	4630      	mov	r0, r6
 801cc68:	f000 fdb0 	bl	801d7cc <__mdiff>
 801cc6c:	68c2      	ldr	r2, [r0, #12]
 801cc6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc70:	4680      	mov	r8, r0
 801cc72:	bb0a      	cbnz	r2, 801ccb8 <_dtoa_r+0x9a0>
 801cc74:	4601      	mov	r1, r0
 801cc76:	4628      	mov	r0, r5
 801cc78:	f000 fd8c 	bl	801d794 <__mcmp>
 801cc7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc7e:	4602      	mov	r2, r0
 801cc80:	4641      	mov	r1, r8
 801cc82:	4630      	mov	r0, r6
 801cc84:	920e      	str	r2, [sp, #56]	; 0x38
 801cc86:	930a      	str	r3, [sp, #40]	; 0x28
 801cc88:	f000 fb46 	bl	801d318 <_Bfree>
 801cc8c:	9b07      	ldr	r3, [sp, #28]
 801cc8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801cc90:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cc94:	ea43 0102 	orr.w	r1, r3, r2
 801cc98:	9b08      	ldr	r3, [sp, #32]
 801cc9a:	430b      	orrs	r3, r1
 801cc9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cc9e:	d10d      	bne.n	801ccbc <_dtoa_r+0x9a4>
 801cca0:	2b39      	cmp	r3, #57	; 0x39
 801cca2:	d029      	beq.n	801ccf8 <_dtoa_r+0x9e0>
 801cca4:	f1ba 0f00 	cmp.w	sl, #0
 801cca8:	dd01      	ble.n	801ccae <_dtoa_r+0x996>
 801ccaa:	9b06      	ldr	r3, [sp, #24]
 801ccac:	3331      	adds	r3, #49	; 0x31
 801ccae:	9a02      	ldr	r2, [sp, #8]
 801ccb0:	7013      	strb	r3, [r2, #0]
 801ccb2:	e774      	b.n	801cb9e <_dtoa_r+0x886>
 801ccb4:	4638      	mov	r0, r7
 801ccb6:	e7b8      	b.n	801cc2a <_dtoa_r+0x912>
 801ccb8:	2201      	movs	r2, #1
 801ccba:	e7e1      	b.n	801cc80 <_dtoa_r+0x968>
 801ccbc:	f1ba 0f00 	cmp.w	sl, #0
 801ccc0:	db06      	blt.n	801ccd0 <_dtoa_r+0x9b8>
 801ccc2:	9907      	ldr	r1, [sp, #28]
 801ccc4:	ea41 0a0a 	orr.w	sl, r1, sl
 801ccc8:	9908      	ldr	r1, [sp, #32]
 801ccca:	ea5a 0101 	orrs.w	r1, sl, r1
 801ccce:	d120      	bne.n	801cd12 <_dtoa_r+0x9fa>
 801ccd0:	2a00      	cmp	r2, #0
 801ccd2:	ddec      	ble.n	801ccae <_dtoa_r+0x996>
 801ccd4:	4629      	mov	r1, r5
 801ccd6:	2201      	movs	r2, #1
 801ccd8:	4630      	mov	r0, r6
 801ccda:	9305      	str	r3, [sp, #20]
 801ccdc:	f000 fcee 	bl	801d6bc <__lshift>
 801cce0:	4621      	mov	r1, r4
 801cce2:	4605      	mov	r5, r0
 801cce4:	f000 fd56 	bl	801d794 <__mcmp>
 801cce8:	2800      	cmp	r0, #0
 801ccea:	9b05      	ldr	r3, [sp, #20]
 801ccec:	dc02      	bgt.n	801ccf4 <_dtoa_r+0x9dc>
 801ccee:	d1de      	bne.n	801ccae <_dtoa_r+0x996>
 801ccf0:	07da      	lsls	r2, r3, #31
 801ccf2:	d5dc      	bpl.n	801ccae <_dtoa_r+0x996>
 801ccf4:	2b39      	cmp	r3, #57	; 0x39
 801ccf6:	d1d8      	bne.n	801ccaa <_dtoa_r+0x992>
 801ccf8:	9a02      	ldr	r2, [sp, #8]
 801ccfa:	2339      	movs	r3, #57	; 0x39
 801ccfc:	7013      	strb	r3, [r2, #0]
 801ccfe:	4643      	mov	r3, r8
 801cd00:	4698      	mov	r8, r3
 801cd02:	3b01      	subs	r3, #1
 801cd04:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801cd08:	2a39      	cmp	r2, #57	; 0x39
 801cd0a:	d051      	beq.n	801cdb0 <_dtoa_r+0xa98>
 801cd0c:	3201      	adds	r2, #1
 801cd0e:	701a      	strb	r2, [r3, #0]
 801cd10:	e745      	b.n	801cb9e <_dtoa_r+0x886>
 801cd12:	2a00      	cmp	r2, #0
 801cd14:	dd03      	ble.n	801cd1e <_dtoa_r+0xa06>
 801cd16:	2b39      	cmp	r3, #57	; 0x39
 801cd18:	d0ee      	beq.n	801ccf8 <_dtoa_r+0x9e0>
 801cd1a:	3301      	adds	r3, #1
 801cd1c:	e7c7      	b.n	801ccae <_dtoa_r+0x996>
 801cd1e:	9a05      	ldr	r2, [sp, #20]
 801cd20:	9909      	ldr	r1, [sp, #36]	; 0x24
 801cd22:	f802 3c01 	strb.w	r3, [r2, #-1]
 801cd26:	428a      	cmp	r2, r1
 801cd28:	d02b      	beq.n	801cd82 <_dtoa_r+0xa6a>
 801cd2a:	4629      	mov	r1, r5
 801cd2c:	2300      	movs	r3, #0
 801cd2e:	220a      	movs	r2, #10
 801cd30:	4630      	mov	r0, r6
 801cd32:	f000 fb13 	bl	801d35c <__multadd>
 801cd36:	45b9      	cmp	r9, r7
 801cd38:	4605      	mov	r5, r0
 801cd3a:	f04f 0300 	mov.w	r3, #0
 801cd3e:	f04f 020a 	mov.w	r2, #10
 801cd42:	4649      	mov	r1, r9
 801cd44:	4630      	mov	r0, r6
 801cd46:	d107      	bne.n	801cd58 <_dtoa_r+0xa40>
 801cd48:	f000 fb08 	bl	801d35c <__multadd>
 801cd4c:	4681      	mov	r9, r0
 801cd4e:	4607      	mov	r7, r0
 801cd50:	9b05      	ldr	r3, [sp, #20]
 801cd52:	3301      	adds	r3, #1
 801cd54:	9305      	str	r3, [sp, #20]
 801cd56:	e774      	b.n	801cc42 <_dtoa_r+0x92a>
 801cd58:	f000 fb00 	bl	801d35c <__multadd>
 801cd5c:	4639      	mov	r1, r7
 801cd5e:	4681      	mov	r9, r0
 801cd60:	2300      	movs	r3, #0
 801cd62:	220a      	movs	r2, #10
 801cd64:	4630      	mov	r0, r6
 801cd66:	f000 faf9 	bl	801d35c <__multadd>
 801cd6a:	4607      	mov	r7, r0
 801cd6c:	e7f0      	b.n	801cd50 <_dtoa_r+0xa38>
 801cd6e:	f1ba 0f00 	cmp.w	sl, #0
 801cd72:	9a00      	ldr	r2, [sp, #0]
 801cd74:	bfcc      	ite	gt
 801cd76:	46d0      	movgt	r8, sl
 801cd78:	f04f 0801 	movle.w	r8, #1
 801cd7c:	4490      	add	r8, r2
 801cd7e:	f04f 0900 	mov.w	r9, #0
 801cd82:	4629      	mov	r1, r5
 801cd84:	2201      	movs	r2, #1
 801cd86:	4630      	mov	r0, r6
 801cd88:	9302      	str	r3, [sp, #8]
 801cd8a:	f000 fc97 	bl	801d6bc <__lshift>
 801cd8e:	4621      	mov	r1, r4
 801cd90:	4605      	mov	r5, r0
 801cd92:	f000 fcff 	bl	801d794 <__mcmp>
 801cd96:	2800      	cmp	r0, #0
 801cd98:	dcb1      	bgt.n	801ccfe <_dtoa_r+0x9e6>
 801cd9a:	d102      	bne.n	801cda2 <_dtoa_r+0xa8a>
 801cd9c:	9b02      	ldr	r3, [sp, #8]
 801cd9e:	07db      	lsls	r3, r3, #31
 801cda0:	d4ad      	bmi.n	801ccfe <_dtoa_r+0x9e6>
 801cda2:	4643      	mov	r3, r8
 801cda4:	4698      	mov	r8, r3
 801cda6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801cdaa:	2a30      	cmp	r2, #48	; 0x30
 801cdac:	d0fa      	beq.n	801cda4 <_dtoa_r+0xa8c>
 801cdae:	e6f6      	b.n	801cb9e <_dtoa_r+0x886>
 801cdb0:	9a00      	ldr	r2, [sp, #0]
 801cdb2:	429a      	cmp	r2, r3
 801cdb4:	d1a4      	bne.n	801cd00 <_dtoa_r+0x9e8>
 801cdb6:	f10b 0b01 	add.w	fp, fp, #1
 801cdba:	2331      	movs	r3, #49	; 0x31
 801cdbc:	e778      	b.n	801ccb0 <_dtoa_r+0x998>
 801cdbe:	4b15      	ldr	r3, [pc, #84]	; (801ce14 <_dtoa_r+0xafc>)
 801cdc0:	f7ff bb12 	b.w	801c3e8 <_dtoa_r+0xd0>
 801cdc4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	f47f aaee 	bne.w	801c3a8 <_dtoa_r+0x90>
 801cdcc:	4b12      	ldr	r3, [pc, #72]	; (801ce18 <_dtoa_r+0xb00>)
 801cdce:	f7ff bb0b 	b.w	801c3e8 <_dtoa_r+0xd0>
 801cdd2:	f1ba 0f00 	cmp.w	sl, #0
 801cdd6:	dc03      	bgt.n	801cde0 <_dtoa_r+0xac8>
 801cdd8:	9b07      	ldr	r3, [sp, #28]
 801cdda:	2b02      	cmp	r3, #2
 801cddc:	f73f aec7 	bgt.w	801cb6e <_dtoa_r+0x856>
 801cde0:	f8dd 8000 	ldr.w	r8, [sp]
 801cde4:	4621      	mov	r1, r4
 801cde6:	4628      	mov	r0, r5
 801cde8:	f7ff fa0a 	bl	801c200 <quorem>
 801cdec:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801cdf0:	f808 3b01 	strb.w	r3, [r8], #1
 801cdf4:	9a00      	ldr	r2, [sp, #0]
 801cdf6:	eba8 0202 	sub.w	r2, r8, r2
 801cdfa:	4592      	cmp	sl, r2
 801cdfc:	ddb7      	ble.n	801cd6e <_dtoa_r+0xa56>
 801cdfe:	4629      	mov	r1, r5
 801ce00:	2300      	movs	r3, #0
 801ce02:	220a      	movs	r2, #10
 801ce04:	4630      	mov	r0, r6
 801ce06:	f000 faa9 	bl	801d35c <__multadd>
 801ce0a:	4605      	mov	r5, r0
 801ce0c:	e7ea      	b.n	801cde4 <_dtoa_r+0xacc>
 801ce0e:	bf00      	nop
 801ce10:	08021fd2 	.word	0x08021fd2
 801ce14:	08021e90 	.word	0x08021e90
 801ce18:	08021f66 	.word	0x08021f66

0801ce1c <__sflush_r>:
 801ce1c:	898a      	ldrh	r2, [r1, #12]
 801ce1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ce22:	4605      	mov	r5, r0
 801ce24:	0710      	lsls	r0, r2, #28
 801ce26:	460c      	mov	r4, r1
 801ce28:	d458      	bmi.n	801cedc <__sflush_r+0xc0>
 801ce2a:	684b      	ldr	r3, [r1, #4]
 801ce2c:	2b00      	cmp	r3, #0
 801ce2e:	dc05      	bgt.n	801ce3c <__sflush_r+0x20>
 801ce30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ce32:	2b00      	cmp	r3, #0
 801ce34:	dc02      	bgt.n	801ce3c <__sflush_r+0x20>
 801ce36:	2000      	movs	r0, #0
 801ce38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ce3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce3e:	2e00      	cmp	r6, #0
 801ce40:	d0f9      	beq.n	801ce36 <__sflush_r+0x1a>
 801ce42:	2300      	movs	r3, #0
 801ce44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ce48:	682f      	ldr	r7, [r5, #0]
 801ce4a:	602b      	str	r3, [r5, #0]
 801ce4c:	d032      	beq.n	801ceb4 <__sflush_r+0x98>
 801ce4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ce50:	89a3      	ldrh	r3, [r4, #12]
 801ce52:	075a      	lsls	r2, r3, #29
 801ce54:	d505      	bpl.n	801ce62 <__sflush_r+0x46>
 801ce56:	6863      	ldr	r3, [r4, #4]
 801ce58:	1ac0      	subs	r0, r0, r3
 801ce5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ce5c:	b10b      	cbz	r3, 801ce62 <__sflush_r+0x46>
 801ce5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ce60:	1ac0      	subs	r0, r0, r3
 801ce62:	2300      	movs	r3, #0
 801ce64:	4602      	mov	r2, r0
 801ce66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ce68:	6a21      	ldr	r1, [r4, #32]
 801ce6a:	4628      	mov	r0, r5
 801ce6c:	47b0      	blx	r6
 801ce6e:	1c43      	adds	r3, r0, #1
 801ce70:	89a3      	ldrh	r3, [r4, #12]
 801ce72:	d106      	bne.n	801ce82 <__sflush_r+0x66>
 801ce74:	6829      	ldr	r1, [r5, #0]
 801ce76:	291d      	cmp	r1, #29
 801ce78:	d82c      	bhi.n	801ced4 <__sflush_r+0xb8>
 801ce7a:	4a2a      	ldr	r2, [pc, #168]	; (801cf24 <__sflush_r+0x108>)
 801ce7c:	40ca      	lsrs	r2, r1
 801ce7e:	07d6      	lsls	r6, r2, #31
 801ce80:	d528      	bpl.n	801ced4 <__sflush_r+0xb8>
 801ce82:	2200      	movs	r2, #0
 801ce84:	6062      	str	r2, [r4, #4]
 801ce86:	04d9      	lsls	r1, r3, #19
 801ce88:	6922      	ldr	r2, [r4, #16]
 801ce8a:	6022      	str	r2, [r4, #0]
 801ce8c:	d504      	bpl.n	801ce98 <__sflush_r+0x7c>
 801ce8e:	1c42      	adds	r2, r0, #1
 801ce90:	d101      	bne.n	801ce96 <__sflush_r+0x7a>
 801ce92:	682b      	ldr	r3, [r5, #0]
 801ce94:	b903      	cbnz	r3, 801ce98 <__sflush_r+0x7c>
 801ce96:	6560      	str	r0, [r4, #84]	; 0x54
 801ce98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ce9a:	602f      	str	r7, [r5, #0]
 801ce9c:	2900      	cmp	r1, #0
 801ce9e:	d0ca      	beq.n	801ce36 <__sflush_r+0x1a>
 801cea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801cea4:	4299      	cmp	r1, r3
 801cea6:	d002      	beq.n	801ceae <__sflush_r+0x92>
 801cea8:	4628      	mov	r0, r5
 801ceaa:	f000 fd83 	bl	801d9b4 <_free_r>
 801ceae:	2000      	movs	r0, #0
 801ceb0:	6360      	str	r0, [r4, #52]	; 0x34
 801ceb2:	e7c1      	b.n	801ce38 <__sflush_r+0x1c>
 801ceb4:	6a21      	ldr	r1, [r4, #32]
 801ceb6:	2301      	movs	r3, #1
 801ceb8:	4628      	mov	r0, r5
 801ceba:	47b0      	blx	r6
 801cebc:	1c41      	adds	r1, r0, #1
 801cebe:	d1c7      	bne.n	801ce50 <__sflush_r+0x34>
 801cec0:	682b      	ldr	r3, [r5, #0]
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d0c4      	beq.n	801ce50 <__sflush_r+0x34>
 801cec6:	2b1d      	cmp	r3, #29
 801cec8:	d001      	beq.n	801cece <__sflush_r+0xb2>
 801ceca:	2b16      	cmp	r3, #22
 801cecc:	d101      	bne.n	801ced2 <__sflush_r+0xb6>
 801cece:	602f      	str	r7, [r5, #0]
 801ced0:	e7b1      	b.n	801ce36 <__sflush_r+0x1a>
 801ced2:	89a3      	ldrh	r3, [r4, #12]
 801ced4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ced8:	81a3      	strh	r3, [r4, #12]
 801ceda:	e7ad      	b.n	801ce38 <__sflush_r+0x1c>
 801cedc:	690f      	ldr	r7, [r1, #16]
 801cede:	2f00      	cmp	r7, #0
 801cee0:	d0a9      	beq.n	801ce36 <__sflush_r+0x1a>
 801cee2:	0793      	lsls	r3, r2, #30
 801cee4:	680e      	ldr	r6, [r1, #0]
 801cee6:	bf08      	it	eq
 801cee8:	694b      	ldreq	r3, [r1, #20]
 801ceea:	600f      	str	r7, [r1, #0]
 801ceec:	bf18      	it	ne
 801ceee:	2300      	movne	r3, #0
 801cef0:	eba6 0807 	sub.w	r8, r6, r7
 801cef4:	608b      	str	r3, [r1, #8]
 801cef6:	f1b8 0f00 	cmp.w	r8, #0
 801cefa:	dd9c      	ble.n	801ce36 <__sflush_r+0x1a>
 801cefc:	6a21      	ldr	r1, [r4, #32]
 801cefe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801cf00:	4643      	mov	r3, r8
 801cf02:	463a      	mov	r2, r7
 801cf04:	4628      	mov	r0, r5
 801cf06:	47b0      	blx	r6
 801cf08:	2800      	cmp	r0, #0
 801cf0a:	dc06      	bgt.n	801cf1a <__sflush_r+0xfe>
 801cf0c:	89a3      	ldrh	r3, [r4, #12]
 801cf0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cf12:	81a3      	strh	r3, [r4, #12]
 801cf14:	f04f 30ff 	mov.w	r0, #4294967295
 801cf18:	e78e      	b.n	801ce38 <__sflush_r+0x1c>
 801cf1a:	4407      	add	r7, r0
 801cf1c:	eba8 0800 	sub.w	r8, r8, r0
 801cf20:	e7e9      	b.n	801cef6 <__sflush_r+0xda>
 801cf22:	bf00      	nop
 801cf24:	20400001 	.word	0x20400001

0801cf28 <_fflush_r>:
 801cf28:	b538      	push	{r3, r4, r5, lr}
 801cf2a:	690b      	ldr	r3, [r1, #16]
 801cf2c:	4605      	mov	r5, r0
 801cf2e:	460c      	mov	r4, r1
 801cf30:	b913      	cbnz	r3, 801cf38 <_fflush_r+0x10>
 801cf32:	2500      	movs	r5, #0
 801cf34:	4628      	mov	r0, r5
 801cf36:	bd38      	pop	{r3, r4, r5, pc}
 801cf38:	b118      	cbz	r0, 801cf42 <_fflush_r+0x1a>
 801cf3a:	6983      	ldr	r3, [r0, #24]
 801cf3c:	b90b      	cbnz	r3, 801cf42 <_fflush_r+0x1a>
 801cf3e:	f000 f887 	bl	801d050 <__sinit>
 801cf42:	4b14      	ldr	r3, [pc, #80]	; (801cf94 <_fflush_r+0x6c>)
 801cf44:	429c      	cmp	r4, r3
 801cf46:	d11b      	bne.n	801cf80 <_fflush_r+0x58>
 801cf48:	686c      	ldr	r4, [r5, #4]
 801cf4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801cf4e:	2b00      	cmp	r3, #0
 801cf50:	d0ef      	beq.n	801cf32 <_fflush_r+0xa>
 801cf52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801cf54:	07d0      	lsls	r0, r2, #31
 801cf56:	d404      	bmi.n	801cf62 <_fflush_r+0x3a>
 801cf58:	0599      	lsls	r1, r3, #22
 801cf5a:	d402      	bmi.n	801cf62 <_fflush_r+0x3a>
 801cf5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf5e:	f000 f92c 	bl	801d1ba <__retarget_lock_acquire_recursive>
 801cf62:	4628      	mov	r0, r5
 801cf64:	4621      	mov	r1, r4
 801cf66:	f7ff ff59 	bl	801ce1c <__sflush_r>
 801cf6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801cf6c:	07da      	lsls	r2, r3, #31
 801cf6e:	4605      	mov	r5, r0
 801cf70:	d4e0      	bmi.n	801cf34 <_fflush_r+0xc>
 801cf72:	89a3      	ldrh	r3, [r4, #12]
 801cf74:	059b      	lsls	r3, r3, #22
 801cf76:	d4dd      	bmi.n	801cf34 <_fflush_r+0xc>
 801cf78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cf7a:	f000 f91f 	bl	801d1bc <__retarget_lock_release_recursive>
 801cf7e:	e7d9      	b.n	801cf34 <_fflush_r+0xc>
 801cf80:	4b05      	ldr	r3, [pc, #20]	; (801cf98 <_fflush_r+0x70>)
 801cf82:	429c      	cmp	r4, r3
 801cf84:	d101      	bne.n	801cf8a <_fflush_r+0x62>
 801cf86:	68ac      	ldr	r4, [r5, #8]
 801cf88:	e7df      	b.n	801cf4a <_fflush_r+0x22>
 801cf8a:	4b04      	ldr	r3, [pc, #16]	; (801cf9c <_fflush_r+0x74>)
 801cf8c:	429c      	cmp	r4, r3
 801cf8e:	bf08      	it	eq
 801cf90:	68ec      	ldreq	r4, [r5, #12]
 801cf92:	e7da      	b.n	801cf4a <_fflush_r+0x22>
 801cf94:	08022004 	.word	0x08022004
 801cf98:	08022024 	.word	0x08022024
 801cf9c:	08021fe4 	.word	0x08021fe4

0801cfa0 <std>:
 801cfa0:	2300      	movs	r3, #0
 801cfa2:	b510      	push	{r4, lr}
 801cfa4:	4604      	mov	r4, r0
 801cfa6:	e9c0 3300 	strd	r3, r3, [r0]
 801cfaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cfae:	6083      	str	r3, [r0, #8]
 801cfb0:	8181      	strh	r1, [r0, #12]
 801cfb2:	6643      	str	r3, [r0, #100]	; 0x64
 801cfb4:	81c2      	strh	r2, [r0, #14]
 801cfb6:	6183      	str	r3, [r0, #24]
 801cfb8:	4619      	mov	r1, r3
 801cfba:	2208      	movs	r2, #8
 801cfbc:	305c      	adds	r0, #92	; 0x5c
 801cfbe:	f7fe fa5b 	bl	801b478 <memset>
 801cfc2:	4b05      	ldr	r3, [pc, #20]	; (801cfd8 <std+0x38>)
 801cfc4:	6263      	str	r3, [r4, #36]	; 0x24
 801cfc6:	4b05      	ldr	r3, [pc, #20]	; (801cfdc <std+0x3c>)
 801cfc8:	62a3      	str	r3, [r4, #40]	; 0x28
 801cfca:	4b05      	ldr	r3, [pc, #20]	; (801cfe0 <std+0x40>)
 801cfcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cfce:	4b05      	ldr	r3, [pc, #20]	; (801cfe4 <std+0x44>)
 801cfd0:	6224      	str	r4, [r4, #32]
 801cfd2:	6323      	str	r3, [r4, #48]	; 0x30
 801cfd4:	bd10      	pop	{r4, pc}
 801cfd6:	bf00      	nop
 801cfd8:	0801dddd 	.word	0x0801dddd
 801cfdc:	0801ddff 	.word	0x0801ddff
 801cfe0:	0801de37 	.word	0x0801de37
 801cfe4:	0801de5b 	.word	0x0801de5b

0801cfe8 <_cleanup_r>:
 801cfe8:	4901      	ldr	r1, [pc, #4]	; (801cff0 <_cleanup_r+0x8>)
 801cfea:	f000 b8c1 	b.w	801d170 <_fwalk_reent>
 801cfee:	bf00      	nop
 801cff0:	0801cf29 	.word	0x0801cf29

0801cff4 <__sfmoreglue>:
 801cff4:	b570      	push	{r4, r5, r6, lr}
 801cff6:	1e4a      	subs	r2, r1, #1
 801cff8:	2568      	movs	r5, #104	; 0x68
 801cffa:	4355      	muls	r5, r2
 801cffc:	460e      	mov	r6, r1
 801cffe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d002:	f000 fd27 	bl	801da54 <_malloc_r>
 801d006:	4604      	mov	r4, r0
 801d008:	b140      	cbz	r0, 801d01c <__sfmoreglue+0x28>
 801d00a:	2100      	movs	r1, #0
 801d00c:	e9c0 1600 	strd	r1, r6, [r0]
 801d010:	300c      	adds	r0, #12
 801d012:	60a0      	str	r0, [r4, #8]
 801d014:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d018:	f7fe fa2e 	bl	801b478 <memset>
 801d01c:	4620      	mov	r0, r4
 801d01e:	bd70      	pop	{r4, r5, r6, pc}

0801d020 <__sfp_lock_acquire>:
 801d020:	4801      	ldr	r0, [pc, #4]	; (801d028 <__sfp_lock_acquire+0x8>)
 801d022:	f000 b8ca 	b.w	801d1ba <__retarget_lock_acquire_recursive>
 801d026:	bf00      	nop
 801d028:	2000d7e8 	.word	0x2000d7e8

0801d02c <__sfp_lock_release>:
 801d02c:	4801      	ldr	r0, [pc, #4]	; (801d034 <__sfp_lock_release+0x8>)
 801d02e:	f000 b8c5 	b.w	801d1bc <__retarget_lock_release_recursive>
 801d032:	bf00      	nop
 801d034:	2000d7e8 	.word	0x2000d7e8

0801d038 <__sinit_lock_acquire>:
 801d038:	4801      	ldr	r0, [pc, #4]	; (801d040 <__sinit_lock_acquire+0x8>)
 801d03a:	f000 b8be 	b.w	801d1ba <__retarget_lock_acquire_recursive>
 801d03e:	bf00      	nop
 801d040:	2000d7e3 	.word	0x2000d7e3

0801d044 <__sinit_lock_release>:
 801d044:	4801      	ldr	r0, [pc, #4]	; (801d04c <__sinit_lock_release+0x8>)
 801d046:	f000 b8b9 	b.w	801d1bc <__retarget_lock_release_recursive>
 801d04a:	bf00      	nop
 801d04c:	2000d7e3 	.word	0x2000d7e3

0801d050 <__sinit>:
 801d050:	b510      	push	{r4, lr}
 801d052:	4604      	mov	r4, r0
 801d054:	f7ff fff0 	bl	801d038 <__sinit_lock_acquire>
 801d058:	69a3      	ldr	r3, [r4, #24]
 801d05a:	b11b      	cbz	r3, 801d064 <__sinit+0x14>
 801d05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d060:	f7ff bff0 	b.w	801d044 <__sinit_lock_release>
 801d064:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d068:	6523      	str	r3, [r4, #80]	; 0x50
 801d06a:	4b13      	ldr	r3, [pc, #76]	; (801d0b8 <__sinit+0x68>)
 801d06c:	4a13      	ldr	r2, [pc, #76]	; (801d0bc <__sinit+0x6c>)
 801d06e:	681b      	ldr	r3, [r3, #0]
 801d070:	62a2      	str	r2, [r4, #40]	; 0x28
 801d072:	42a3      	cmp	r3, r4
 801d074:	bf04      	itt	eq
 801d076:	2301      	moveq	r3, #1
 801d078:	61a3      	streq	r3, [r4, #24]
 801d07a:	4620      	mov	r0, r4
 801d07c:	f000 f820 	bl	801d0c0 <__sfp>
 801d080:	6060      	str	r0, [r4, #4]
 801d082:	4620      	mov	r0, r4
 801d084:	f000 f81c 	bl	801d0c0 <__sfp>
 801d088:	60a0      	str	r0, [r4, #8]
 801d08a:	4620      	mov	r0, r4
 801d08c:	f000 f818 	bl	801d0c0 <__sfp>
 801d090:	2200      	movs	r2, #0
 801d092:	60e0      	str	r0, [r4, #12]
 801d094:	2104      	movs	r1, #4
 801d096:	6860      	ldr	r0, [r4, #4]
 801d098:	f7ff ff82 	bl	801cfa0 <std>
 801d09c:	68a0      	ldr	r0, [r4, #8]
 801d09e:	2201      	movs	r2, #1
 801d0a0:	2109      	movs	r1, #9
 801d0a2:	f7ff ff7d 	bl	801cfa0 <std>
 801d0a6:	68e0      	ldr	r0, [r4, #12]
 801d0a8:	2202      	movs	r2, #2
 801d0aa:	2112      	movs	r1, #18
 801d0ac:	f7ff ff78 	bl	801cfa0 <std>
 801d0b0:	2301      	movs	r3, #1
 801d0b2:	61a3      	str	r3, [r4, #24]
 801d0b4:	e7d2      	b.n	801d05c <__sinit+0xc>
 801d0b6:	bf00      	nop
 801d0b8:	08021e7c 	.word	0x08021e7c
 801d0bc:	0801cfe9 	.word	0x0801cfe9

0801d0c0 <__sfp>:
 801d0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d0c2:	4607      	mov	r7, r0
 801d0c4:	f7ff ffac 	bl	801d020 <__sfp_lock_acquire>
 801d0c8:	4b1e      	ldr	r3, [pc, #120]	; (801d144 <__sfp+0x84>)
 801d0ca:	681e      	ldr	r6, [r3, #0]
 801d0cc:	69b3      	ldr	r3, [r6, #24]
 801d0ce:	b913      	cbnz	r3, 801d0d6 <__sfp+0x16>
 801d0d0:	4630      	mov	r0, r6
 801d0d2:	f7ff ffbd 	bl	801d050 <__sinit>
 801d0d6:	3648      	adds	r6, #72	; 0x48
 801d0d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d0dc:	3b01      	subs	r3, #1
 801d0de:	d503      	bpl.n	801d0e8 <__sfp+0x28>
 801d0e0:	6833      	ldr	r3, [r6, #0]
 801d0e2:	b30b      	cbz	r3, 801d128 <__sfp+0x68>
 801d0e4:	6836      	ldr	r6, [r6, #0]
 801d0e6:	e7f7      	b.n	801d0d8 <__sfp+0x18>
 801d0e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d0ec:	b9d5      	cbnz	r5, 801d124 <__sfp+0x64>
 801d0ee:	4b16      	ldr	r3, [pc, #88]	; (801d148 <__sfp+0x88>)
 801d0f0:	60e3      	str	r3, [r4, #12]
 801d0f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d0f6:	6665      	str	r5, [r4, #100]	; 0x64
 801d0f8:	f000 f85e 	bl	801d1b8 <__retarget_lock_init_recursive>
 801d0fc:	f7ff ff96 	bl	801d02c <__sfp_lock_release>
 801d100:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d104:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d108:	6025      	str	r5, [r4, #0]
 801d10a:	61a5      	str	r5, [r4, #24]
 801d10c:	2208      	movs	r2, #8
 801d10e:	4629      	mov	r1, r5
 801d110:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d114:	f7fe f9b0 	bl	801b478 <memset>
 801d118:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d11c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d120:	4620      	mov	r0, r4
 801d122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d124:	3468      	adds	r4, #104	; 0x68
 801d126:	e7d9      	b.n	801d0dc <__sfp+0x1c>
 801d128:	2104      	movs	r1, #4
 801d12a:	4638      	mov	r0, r7
 801d12c:	f7ff ff62 	bl	801cff4 <__sfmoreglue>
 801d130:	4604      	mov	r4, r0
 801d132:	6030      	str	r0, [r6, #0]
 801d134:	2800      	cmp	r0, #0
 801d136:	d1d5      	bne.n	801d0e4 <__sfp+0x24>
 801d138:	f7ff ff78 	bl	801d02c <__sfp_lock_release>
 801d13c:	230c      	movs	r3, #12
 801d13e:	603b      	str	r3, [r7, #0]
 801d140:	e7ee      	b.n	801d120 <__sfp+0x60>
 801d142:	bf00      	nop
 801d144:	08021e7c 	.word	0x08021e7c
 801d148:	ffff0001 	.word	0xffff0001

0801d14c <fiprintf>:
 801d14c:	b40e      	push	{r1, r2, r3}
 801d14e:	b503      	push	{r0, r1, lr}
 801d150:	4601      	mov	r1, r0
 801d152:	ab03      	add	r3, sp, #12
 801d154:	4805      	ldr	r0, [pc, #20]	; (801d16c <fiprintf+0x20>)
 801d156:	f853 2b04 	ldr.w	r2, [r3], #4
 801d15a:	6800      	ldr	r0, [r0, #0]
 801d15c:	9301      	str	r3, [sp, #4]
 801d15e:	f000 fcfd 	bl	801db5c <_vfiprintf_r>
 801d162:	b002      	add	sp, #8
 801d164:	f85d eb04 	ldr.w	lr, [sp], #4
 801d168:	b003      	add	sp, #12
 801d16a:	4770      	bx	lr
 801d16c:	2000001c 	.word	0x2000001c

0801d170 <_fwalk_reent>:
 801d170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d174:	4606      	mov	r6, r0
 801d176:	4688      	mov	r8, r1
 801d178:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d17c:	2700      	movs	r7, #0
 801d17e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d182:	f1b9 0901 	subs.w	r9, r9, #1
 801d186:	d505      	bpl.n	801d194 <_fwalk_reent+0x24>
 801d188:	6824      	ldr	r4, [r4, #0]
 801d18a:	2c00      	cmp	r4, #0
 801d18c:	d1f7      	bne.n	801d17e <_fwalk_reent+0xe>
 801d18e:	4638      	mov	r0, r7
 801d190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d194:	89ab      	ldrh	r3, [r5, #12]
 801d196:	2b01      	cmp	r3, #1
 801d198:	d907      	bls.n	801d1aa <_fwalk_reent+0x3a>
 801d19a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d19e:	3301      	adds	r3, #1
 801d1a0:	d003      	beq.n	801d1aa <_fwalk_reent+0x3a>
 801d1a2:	4629      	mov	r1, r5
 801d1a4:	4630      	mov	r0, r6
 801d1a6:	47c0      	blx	r8
 801d1a8:	4307      	orrs	r7, r0
 801d1aa:	3568      	adds	r5, #104	; 0x68
 801d1ac:	e7e9      	b.n	801d182 <_fwalk_reent+0x12>
	...

0801d1b0 <_localeconv_r>:
 801d1b0:	4800      	ldr	r0, [pc, #0]	; (801d1b4 <_localeconv_r+0x4>)
 801d1b2:	4770      	bx	lr
 801d1b4:	20000170 	.word	0x20000170

0801d1b8 <__retarget_lock_init_recursive>:
 801d1b8:	4770      	bx	lr

0801d1ba <__retarget_lock_acquire_recursive>:
 801d1ba:	4770      	bx	lr

0801d1bc <__retarget_lock_release_recursive>:
 801d1bc:	4770      	bx	lr

0801d1be <__swhatbuf_r>:
 801d1be:	b570      	push	{r4, r5, r6, lr}
 801d1c0:	460e      	mov	r6, r1
 801d1c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d1c6:	2900      	cmp	r1, #0
 801d1c8:	b096      	sub	sp, #88	; 0x58
 801d1ca:	4614      	mov	r4, r2
 801d1cc:	461d      	mov	r5, r3
 801d1ce:	da07      	bge.n	801d1e0 <__swhatbuf_r+0x22>
 801d1d0:	2300      	movs	r3, #0
 801d1d2:	602b      	str	r3, [r5, #0]
 801d1d4:	89b3      	ldrh	r3, [r6, #12]
 801d1d6:	061a      	lsls	r2, r3, #24
 801d1d8:	d410      	bmi.n	801d1fc <__swhatbuf_r+0x3e>
 801d1da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d1de:	e00e      	b.n	801d1fe <__swhatbuf_r+0x40>
 801d1e0:	466a      	mov	r2, sp
 801d1e2:	f000 fe69 	bl	801deb8 <_fstat_r>
 801d1e6:	2800      	cmp	r0, #0
 801d1e8:	dbf2      	blt.n	801d1d0 <__swhatbuf_r+0x12>
 801d1ea:	9a01      	ldr	r2, [sp, #4]
 801d1ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801d1f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801d1f4:	425a      	negs	r2, r3
 801d1f6:	415a      	adcs	r2, r3
 801d1f8:	602a      	str	r2, [r5, #0]
 801d1fa:	e7ee      	b.n	801d1da <__swhatbuf_r+0x1c>
 801d1fc:	2340      	movs	r3, #64	; 0x40
 801d1fe:	2000      	movs	r0, #0
 801d200:	6023      	str	r3, [r4, #0]
 801d202:	b016      	add	sp, #88	; 0x58
 801d204:	bd70      	pop	{r4, r5, r6, pc}
	...

0801d208 <__smakebuf_r>:
 801d208:	898b      	ldrh	r3, [r1, #12]
 801d20a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d20c:	079d      	lsls	r5, r3, #30
 801d20e:	4606      	mov	r6, r0
 801d210:	460c      	mov	r4, r1
 801d212:	d507      	bpl.n	801d224 <__smakebuf_r+0x1c>
 801d214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d218:	6023      	str	r3, [r4, #0]
 801d21a:	6123      	str	r3, [r4, #16]
 801d21c:	2301      	movs	r3, #1
 801d21e:	6163      	str	r3, [r4, #20]
 801d220:	b002      	add	sp, #8
 801d222:	bd70      	pop	{r4, r5, r6, pc}
 801d224:	ab01      	add	r3, sp, #4
 801d226:	466a      	mov	r2, sp
 801d228:	f7ff ffc9 	bl	801d1be <__swhatbuf_r>
 801d22c:	9900      	ldr	r1, [sp, #0]
 801d22e:	4605      	mov	r5, r0
 801d230:	4630      	mov	r0, r6
 801d232:	f000 fc0f 	bl	801da54 <_malloc_r>
 801d236:	b948      	cbnz	r0, 801d24c <__smakebuf_r+0x44>
 801d238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d23c:	059a      	lsls	r2, r3, #22
 801d23e:	d4ef      	bmi.n	801d220 <__smakebuf_r+0x18>
 801d240:	f023 0303 	bic.w	r3, r3, #3
 801d244:	f043 0302 	orr.w	r3, r3, #2
 801d248:	81a3      	strh	r3, [r4, #12]
 801d24a:	e7e3      	b.n	801d214 <__smakebuf_r+0xc>
 801d24c:	4b0d      	ldr	r3, [pc, #52]	; (801d284 <__smakebuf_r+0x7c>)
 801d24e:	62b3      	str	r3, [r6, #40]	; 0x28
 801d250:	89a3      	ldrh	r3, [r4, #12]
 801d252:	6020      	str	r0, [r4, #0]
 801d254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d258:	81a3      	strh	r3, [r4, #12]
 801d25a:	9b00      	ldr	r3, [sp, #0]
 801d25c:	6163      	str	r3, [r4, #20]
 801d25e:	9b01      	ldr	r3, [sp, #4]
 801d260:	6120      	str	r0, [r4, #16]
 801d262:	b15b      	cbz	r3, 801d27c <__smakebuf_r+0x74>
 801d264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d268:	4630      	mov	r0, r6
 801d26a:	f000 fe37 	bl	801dedc <_isatty_r>
 801d26e:	b128      	cbz	r0, 801d27c <__smakebuf_r+0x74>
 801d270:	89a3      	ldrh	r3, [r4, #12]
 801d272:	f023 0303 	bic.w	r3, r3, #3
 801d276:	f043 0301 	orr.w	r3, r3, #1
 801d27a:	81a3      	strh	r3, [r4, #12]
 801d27c:	89a0      	ldrh	r0, [r4, #12]
 801d27e:	4305      	orrs	r5, r0
 801d280:	81a5      	strh	r5, [r4, #12]
 801d282:	e7cd      	b.n	801d220 <__smakebuf_r+0x18>
 801d284:	0801cfe9 	.word	0x0801cfe9

0801d288 <malloc>:
 801d288:	4b02      	ldr	r3, [pc, #8]	; (801d294 <malloc+0xc>)
 801d28a:	4601      	mov	r1, r0
 801d28c:	6818      	ldr	r0, [r3, #0]
 801d28e:	f000 bbe1 	b.w	801da54 <_malloc_r>
 801d292:	bf00      	nop
 801d294:	2000001c 	.word	0x2000001c

0801d298 <_Balloc>:
 801d298:	b570      	push	{r4, r5, r6, lr}
 801d29a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d29c:	4604      	mov	r4, r0
 801d29e:	460d      	mov	r5, r1
 801d2a0:	b976      	cbnz	r6, 801d2c0 <_Balloc+0x28>
 801d2a2:	2010      	movs	r0, #16
 801d2a4:	f7ff fff0 	bl	801d288 <malloc>
 801d2a8:	4602      	mov	r2, r0
 801d2aa:	6260      	str	r0, [r4, #36]	; 0x24
 801d2ac:	b920      	cbnz	r0, 801d2b8 <_Balloc+0x20>
 801d2ae:	4b18      	ldr	r3, [pc, #96]	; (801d310 <_Balloc+0x78>)
 801d2b0:	4818      	ldr	r0, [pc, #96]	; (801d314 <_Balloc+0x7c>)
 801d2b2:	2166      	movs	r1, #102	; 0x66
 801d2b4:	f7fe ff86 	bl	801c1c4 <__assert_func>
 801d2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d2bc:	6006      	str	r6, [r0, #0]
 801d2be:	60c6      	str	r6, [r0, #12]
 801d2c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801d2c2:	68f3      	ldr	r3, [r6, #12]
 801d2c4:	b183      	cbz	r3, 801d2e8 <_Balloc+0x50>
 801d2c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2c8:	68db      	ldr	r3, [r3, #12]
 801d2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801d2ce:	b9b8      	cbnz	r0, 801d300 <_Balloc+0x68>
 801d2d0:	2101      	movs	r1, #1
 801d2d2:	fa01 f605 	lsl.w	r6, r1, r5
 801d2d6:	1d72      	adds	r2, r6, #5
 801d2d8:	0092      	lsls	r2, r2, #2
 801d2da:	4620      	mov	r0, r4
 801d2dc:	f000 fb5a 	bl	801d994 <_calloc_r>
 801d2e0:	b160      	cbz	r0, 801d2fc <_Balloc+0x64>
 801d2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801d2e6:	e00e      	b.n	801d306 <_Balloc+0x6e>
 801d2e8:	2221      	movs	r2, #33	; 0x21
 801d2ea:	2104      	movs	r1, #4
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	f000 fb51 	bl	801d994 <_calloc_r>
 801d2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d2f4:	60f0      	str	r0, [r6, #12]
 801d2f6:	68db      	ldr	r3, [r3, #12]
 801d2f8:	2b00      	cmp	r3, #0
 801d2fa:	d1e4      	bne.n	801d2c6 <_Balloc+0x2e>
 801d2fc:	2000      	movs	r0, #0
 801d2fe:	bd70      	pop	{r4, r5, r6, pc}
 801d300:	6802      	ldr	r2, [r0, #0]
 801d302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801d306:	2300      	movs	r3, #0
 801d308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801d30c:	e7f7      	b.n	801d2fe <_Balloc+0x66>
 801d30e:	bf00      	nop
 801d310:	08021eb4 	.word	0x08021eb4
 801d314:	08022044 	.word	0x08022044

0801d318 <_Bfree>:
 801d318:	b570      	push	{r4, r5, r6, lr}
 801d31a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801d31c:	4605      	mov	r5, r0
 801d31e:	460c      	mov	r4, r1
 801d320:	b976      	cbnz	r6, 801d340 <_Bfree+0x28>
 801d322:	2010      	movs	r0, #16
 801d324:	f7ff ffb0 	bl	801d288 <malloc>
 801d328:	4602      	mov	r2, r0
 801d32a:	6268      	str	r0, [r5, #36]	; 0x24
 801d32c:	b920      	cbnz	r0, 801d338 <_Bfree+0x20>
 801d32e:	4b09      	ldr	r3, [pc, #36]	; (801d354 <_Bfree+0x3c>)
 801d330:	4809      	ldr	r0, [pc, #36]	; (801d358 <_Bfree+0x40>)
 801d332:	218a      	movs	r1, #138	; 0x8a
 801d334:	f7fe ff46 	bl	801c1c4 <__assert_func>
 801d338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801d33c:	6006      	str	r6, [r0, #0]
 801d33e:	60c6      	str	r6, [r0, #12]
 801d340:	b13c      	cbz	r4, 801d352 <_Bfree+0x3a>
 801d342:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801d344:	6862      	ldr	r2, [r4, #4]
 801d346:	68db      	ldr	r3, [r3, #12]
 801d348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801d34c:	6021      	str	r1, [r4, #0]
 801d34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801d352:	bd70      	pop	{r4, r5, r6, pc}
 801d354:	08021eb4 	.word	0x08021eb4
 801d358:	08022044 	.word	0x08022044

0801d35c <__multadd>:
 801d35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d360:	690e      	ldr	r6, [r1, #16]
 801d362:	4607      	mov	r7, r0
 801d364:	4698      	mov	r8, r3
 801d366:	460c      	mov	r4, r1
 801d368:	f101 0014 	add.w	r0, r1, #20
 801d36c:	2300      	movs	r3, #0
 801d36e:	6805      	ldr	r5, [r0, #0]
 801d370:	b2a9      	uxth	r1, r5
 801d372:	fb02 8101 	mla	r1, r2, r1, r8
 801d376:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801d37a:	0c2d      	lsrs	r5, r5, #16
 801d37c:	fb02 c505 	mla	r5, r2, r5, ip
 801d380:	b289      	uxth	r1, r1
 801d382:	3301      	adds	r3, #1
 801d384:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 801d388:	429e      	cmp	r6, r3
 801d38a:	f840 1b04 	str.w	r1, [r0], #4
 801d38e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801d392:	dcec      	bgt.n	801d36e <__multadd+0x12>
 801d394:	f1b8 0f00 	cmp.w	r8, #0
 801d398:	d022      	beq.n	801d3e0 <__multadd+0x84>
 801d39a:	68a3      	ldr	r3, [r4, #8]
 801d39c:	42b3      	cmp	r3, r6
 801d39e:	dc19      	bgt.n	801d3d4 <__multadd+0x78>
 801d3a0:	6861      	ldr	r1, [r4, #4]
 801d3a2:	4638      	mov	r0, r7
 801d3a4:	3101      	adds	r1, #1
 801d3a6:	f7ff ff77 	bl	801d298 <_Balloc>
 801d3aa:	4605      	mov	r5, r0
 801d3ac:	b928      	cbnz	r0, 801d3ba <__multadd+0x5e>
 801d3ae:	4602      	mov	r2, r0
 801d3b0:	4b0d      	ldr	r3, [pc, #52]	; (801d3e8 <__multadd+0x8c>)
 801d3b2:	480e      	ldr	r0, [pc, #56]	; (801d3ec <__multadd+0x90>)
 801d3b4:	21b5      	movs	r1, #181	; 0xb5
 801d3b6:	f7fe ff05 	bl	801c1c4 <__assert_func>
 801d3ba:	6922      	ldr	r2, [r4, #16]
 801d3bc:	3202      	adds	r2, #2
 801d3be:	f104 010c 	add.w	r1, r4, #12
 801d3c2:	0092      	lsls	r2, r2, #2
 801d3c4:	300c      	adds	r0, #12
 801d3c6:	f7fe f849 	bl	801b45c <memcpy>
 801d3ca:	4621      	mov	r1, r4
 801d3cc:	4638      	mov	r0, r7
 801d3ce:	f7ff ffa3 	bl	801d318 <_Bfree>
 801d3d2:	462c      	mov	r4, r5
 801d3d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801d3d8:	3601      	adds	r6, #1
 801d3da:	f8c3 8014 	str.w	r8, [r3, #20]
 801d3de:	6126      	str	r6, [r4, #16]
 801d3e0:	4620      	mov	r0, r4
 801d3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3e6:	bf00      	nop
 801d3e8:	08021fd2 	.word	0x08021fd2
 801d3ec:	08022044 	.word	0x08022044

0801d3f0 <__hi0bits>:
 801d3f0:	0c03      	lsrs	r3, r0, #16
 801d3f2:	041b      	lsls	r3, r3, #16
 801d3f4:	b9d3      	cbnz	r3, 801d42c <__hi0bits+0x3c>
 801d3f6:	0400      	lsls	r0, r0, #16
 801d3f8:	2310      	movs	r3, #16
 801d3fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801d3fe:	bf04      	itt	eq
 801d400:	0200      	lsleq	r0, r0, #8
 801d402:	3308      	addeq	r3, #8
 801d404:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801d408:	bf04      	itt	eq
 801d40a:	0100      	lsleq	r0, r0, #4
 801d40c:	3304      	addeq	r3, #4
 801d40e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801d412:	bf04      	itt	eq
 801d414:	0080      	lsleq	r0, r0, #2
 801d416:	3302      	addeq	r3, #2
 801d418:	2800      	cmp	r0, #0
 801d41a:	db05      	blt.n	801d428 <__hi0bits+0x38>
 801d41c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801d420:	f103 0301 	add.w	r3, r3, #1
 801d424:	bf08      	it	eq
 801d426:	2320      	moveq	r3, #32
 801d428:	4618      	mov	r0, r3
 801d42a:	4770      	bx	lr
 801d42c:	2300      	movs	r3, #0
 801d42e:	e7e4      	b.n	801d3fa <__hi0bits+0xa>

0801d430 <__lo0bits>:
 801d430:	6803      	ldr	r3, [r0, #0]
 801d432:	f013 0207 	ands.w	r2, r3, #7
 801d436:	4601      	mov	r1, r0
 801d438:	d00b      	beq.n	801d452 <__lo0bits+0x22>
 801d43a:	07da      	lsls	r2, r3, #31
 801d43c:	d424      	bmi.n	801d488 <__lo0bits+0x58>
 801d43e:	0798      	lsls	r0, r3, #30
 801d440:	bf49      	itett	mi
 801d442:	085b      	lsrmi	r3, r3, #1
 801d444:	089b      	lsrpl	r3, r3, #2
 801d446:	2001      	movmi	r0, #1
 801d448:	600b      	strmi	r3, [r1, #0]
 801d44a:	bf5c      	itt	pl
 801d44c:	600b      	strpl	r3, [r1, #0]
 801d44e:	2002      	movpl	r0, #2
 801d450:	4770      	bx	lr
 801d452:	b298      	uxth	r0, r3
 801d454:	b9b0      	cbnz	r0, 801d484 <__lo0bits+0x54>
 801d456:	0c1b      	lsrs	r3, r3, #16
 801d458:	2010      	movs	r0, #16
 801d45a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801d45e:	bf04      	itt	eq
 801d460:	0a1b      	lsreq	r3, r3, #8
 801d462:	3008      	addeq	r0, #8
 801d464:	071a      	lsls	r2, r3, #28
 801d466:	bf04      	itt	eq
 801d468:	091b      	lsreq	r3, r3, #4
 801d46a:	3004      	addeq	r0, #4
 801d46c:	079a      	lsls	r2, r3, #30
 801d46e:	bf04      	itt	eq
 801d470:	089b      	lsreq	r3, r3, #2
 801d472:	3002      	addeq	r0, #2
 801d474:	07da      	lsls	r2, r3, #31
 801d476:	d403      	bmi.n	801d480 <__lo0bits+0x50>
 801d478:	085b      	lsrs	r3, r3, #1
 801d47a:	f100 0001 	add.w	r0, r0, #1
 801d47e:	d005      	beq.n	801d48c <__lo0bits+0x5c>
 801d480:	600b      	str	r3, [r1, #0]
 801d482:	4770      	bx	lr
 801d484:	4610      	mov	r0, r2
 801d486:	e7e8      	b.n	801d45a <__lo0bits+0x2a>
 801d488:	2000      	movs	r0, #0
 801d48a:	4770      	bx	lr
 801d48c:	2020      	movs	r0, #32
 801d48e:	4770      	bx	lr

0801d490 <__i2b>:
 801d490:	b510      	push	{r4, lr}
 801d492:	460c      	mov	r4, r1
 801d494:	2101      	movs	r1, #1
 801d496:	f7ff feff 	bl	801d298 <_Balloc>
 801d49a:	4602      	mov	r2, r0
 801d49c:	b928      	cbnz	r0, 801d4aa <__i2b+0x1a>
 801d49e:	4b05      	ldr	r3, [pc, #20]	; (801d4b4 <__i2b+0x24>)
 801d4a0:	4805      	ldr	r0, [pc, #20]	; (801d4b8 <__i2b+0x28>)
 801d4a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801d4a6:	f7fe fe8d 	bl	801c1c4 <__assert_func>
 801d4aa:	2301      	movs	r3, #1
 801d4ac:	6144      	str	r4, [r0, #20]
 801d4ae:	6103      	str	r3, [r0, #16]
 801d4b0:	bd10      	pop	{r4, pc}
 801d4b2:	bf00      	nop
 801d4b4:	08021fd2 	.word	0x08021fd2
 801d4b8:	08022044 	.word	0x08022044

0801d4bc <__multiply>:
 801d4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d4c0:	4614      	mov	r4, r2
 801d4c2:	690a      	ldr	r2, [r1, #16]
 801d4c4:	6923      	ldr	r3, [r4, #16]
 801d4c6:	429a      	cmp	r2, r3
 801d4c8:	bfb8      	it	lt
 801d4ca:	460b      	movlt	r3, r1
 801d4cc:	460d      	mov	r5, r1
 801d4ce:	bfbc      	itt	lt
 801d4d0:	4625      	movlt	r5, r4
 801d4d2:	461c      	movlt	r4, r3
 801d4d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801d4d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801d4dc:	68ab      	ldr	r3, [r5, #8]
 801d4de:	6869      	ldr	r1, [r5, #4]
 801d4e0:	eb0a 0709 	add.w	r7, sl, r9
 801d4e4:	42bb      	cmp	r3, r7
 801d4e6:	b085      	sub	sp, #20
 801d4e8:	bfb8      	it	lt
 801d4ea:	3101      	addlt	r1, #1
 801d4ec:	f7ff fed4 	bl	801d298 <_Balloc>
 801d4f0:	b930      	cbnz	r0, 801d500 <__multiply+0x44>
 801d4f2:	4602      	mov	r2, r0
 801d4f4:	4b42      	ldr	r3, [pc, #264]	; (801d600 <__multiply+0x144>)
 801d4f6:	4843      	ldr	r0, [pc, #268]	; (801d604 <__multiply+0x148>)
 801d4f8:	f240 115d 	movw	r1, #349	; 0x15d
 801d4fc:	f7fe fe62 	bl	801c1c4 <__assert_func>
 801d500:	f100 0614 	add.w	r6, r0, #20
 801d504:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801d508:	4633      	mov	r3, r6
 801d50a:	2200      	movs	r2, #0
 801d50c:	4543      	cmp	r3, r8
 801d50e:	d31e      	bcc.n	801d54e <__multiply+0x92>
 801d510:	f105 0c14 	add.w	ip, r5, #20
 801d514:	f104 0314 	add.w	r3, r4, #20
 801d518:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801d51c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 801d520:	9202      	str	r2, [sp, #8]
 801d522:	ebac 0205 	sub.w	r2, ip, r5
 801d526:	3a15      	subs	r2, #21
 801d528:	f022 0203 	bic.w	r2, r2, #3
 801d52c:	3204      	adds	r2, #4
 801d52e:	f105 0115 	add.w	r1, r5, #21
 801d532:	458c      	cmp	ip, r1
 801d534:	bf38      	it	cc
 801d536:	2204      	movcc	r2, #4
 801d538:	9201      	str	r2, [sp, #4]
 801d53a:	9a02      	ldr	r2, [sp, #8]
 801d53c:	9303      	str	r3, [sp, #12]
 801d53e:	429a      	cmp	r2, r3
 801d540:	d808      	bhi.n	801d554 <__multiply+0x98>
 801d542:	2f00      	cmp	r7, #0
 801d544:	dc55      	bgt.n	801d5f2 <__multiply+0x136>
 801d546:	6107      	str	r7, [r0, #16]
 801d548:	b005      	add	sp, #20
 801d54a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d54e:	f843 2b04 	str.w	r2, [r3], #4
 801d552:	e7db      	b.n	801d50c <__multiply+0x50>
 801d554:	f8b3 a000 	ldrh.w	sl, [r3]
 801d558:	f1ba 0f00 	cmp.w	sl, #0
 801d55c:	d020      	beq.n	801d5a0 <__multiply+0xe4>
 801d55e:	f105 0e14 	add.w	lr, r5, #20
 801d562:	46b1      	mov	r9, r6
 801d564:	2200      	movs	r2, #0
 801d566:	f85e 4b04 	ldr.w	r4, [lr], #4
 801d56a:	f8d9 b000 	ldr.w	fp, [r9]
 801d56e:	b2a1      	uxth	r1, r4
 801d570:	fa1f fb8b 	uxth.w	fp, fp
 801d574:	fb0a b101 	mla	r1, sl, r1, fp
 801d578:	4411      	add	r1, r2
 801d57a:	f8d9 2000 	ldr.w	r2, [r9]
 801d57e:	0c24      	lsrs	r4, r4, #16
 801d580:	0c12      	lsrs	r2, r2, #16
 801d582:	fb0a 2404 	mla	r4, sl, r4, r2
 801d586:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801d58a:	b289      	uxth	r1, r1
 801d58c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 801d590:	45f4      	cmp	ip, lr
 801d592:	f849 1b04 	str.w	r1, [r9], #4
 801d596:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801d59a:	d8e4      	bhi.n	801d566 <__multiply+0xaa>
 801d59c:	9901      	ldr	r1, [sp, #4]
 801d59e:	5072      	str	r2, [r6, r1]
 801d5a0:	9a03      	ldr	r2, [sp, #12]
 801d5a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801d5a6:	3304      	adds	r3, #4
 801d5a8:	f1b9 0f00 	cmp.w	r9, #0
 801d5ac:	d01f      	beq.n	801d5ee <__multiply+0x132>
 801d5ae:	6834      	ldr	r4, [r6, #0]
 801d5b0:	f105 0114 	add.w	r1, r5, #20
 801d5b4:	46b6      	mov	lr, r6
 801d5b6:	f04f 0a00 	mov.w	sl, #0
 801d5ba:	880a      	ldrh	r2, [r1, #0]
 801d5bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 801d5c0:	fb09 b202 	mla	r2, r9, r2, fp
 801d5c4:	4492      	add	sl, r2
 801d5c6:	b2a4      	uxth	r4, r4
 801d5c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801d5cc:	f84e 4b04 	str.w	r4, [lr], #4
 801d5d0:	f851 4b04 	ldr.w	r4, [r1], #4
 801d5d4:	f8be 2000 	ldrh.w	r2, [lr]
 801d5d8:	0c24      	lsrs	r4, r4, #16
 801d5da:	fb09 2404 	mla	r4, r9, r4, r2
 801d5de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801d5e2:	458c      	cmp	ip, r1
 801d5e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801d5e8:	d8e7      	bhi.n	801d5ba <__multiply+0xfe>
 801d5ea:	9a01      	ldr	r2, [sp, #4]
 801d5ec:	50b4      	str	r4, [r6, r2]
 801d5ee:	3604      	adds	r6, #4
 801d5f0:	e7a3      	b.n	801d53a <__multiply+0x7e>
 801d5f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801d5f6:	2b00      	cmp	r3, #0
 801d5f8:	d1a5      	bne.n	801d546 <__multiply+0x8a>
 801d5fa:	3f01      	subs	r7, #1
 801d5fc:	e7a1      	b.n	801d542 <__multiply+0x86>
 801d5fe:	bf00      	nop
 801d600:	08021fd2 	.word	0x08021fd2
 801d604:	08022044 	.word	0x08022044

0801d608 <__pow5mult>:
 801d608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d60c:	4615      	mov	r5, r2
 801d60e:	f012 0203 	ands.w	r2, r2, #3
 801d612:	4606      	mov	r6, r0
 801d614:	460f      	mov	r7, r1
 801d616:	d007      	beq.n	801d628 <__pow5mult+0x20>
 801d618:	4c25      	ldr	r4, [pc, #148]	; (801d6b0 <__pow5mult+0xa8>)
 801d61a:	3a01      	subs	r2, #1
 801d61c:	2300      	movs	r3, #0
 801d61e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801d622:	f7ff fe9b 	bl	801d35c <__multadd>
 801d626:	4607      	mov	r7, r0
 801d628:	10ad      	asrs	r5, r5, #2
 801d62a:	d03d      	beq.n	801d6a8 <__pow5mult+0xa0>
 801d62c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801d62e:	b97c      	cbnz	r4, 801d650 <__pow5mult+0x48>
 801d630:	2010      	movs	r0, #16
 801d632:	f7ff fe29 	bl	801d288 <malloc>
 801d636:	4602      	mov	r2, r0
 801d638:	6270      	str	r0, [r6, #36]	; 0x24
 801d63a:	b928      	cbnz	r0, 801d648 <__pow5mult+0x40>
 801d63c:	4b1d      	ldr	r3, [pc, #116]	; (801d6b4 <__pow5mult+0xac>)
 801d63e:	481e      	ldr	r0, [pc, #120]	; (801d6b8 <__pow5mult+0xb0>)
 801d640:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801d644:	f7fe fdbe 	bl	801c1c4 <__assert_func>
 801d648:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801d64c:	6004      	str	r4, [r0, #0]
 801d64e:	60c4      	str	r4, [r0, #12]
 801d650:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801d654:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801d658:	b94c      	cbnz	r4, 801d66e <__pow5mult+0x66>
 801d65a:	f240 2171 	movw	r1, #625	; 0x271
 801d65e:	4630      	mov	r0, r6
 801d660:	f7ff ff16 	bl	801d490 <__i2b>
 801d664:	2300      	movs	r3, #0
 801d666:	f8c8 0008 	str.w	r0, [r8, #8]
 801d66a:	4604      	mov	r4, r0
 801d66c:	6003      	str	r3, [r0, #0]
 801d66e:	f04f 0900 	mov.w	r9, #0
 801d672:	07eb      	lsls	r3, r5, #31
 801d674:	d50a      	bpl.n	801d68c <__pow5mult+0x84>
 801d676:	4639      	mov	r1, r7
 801d678:	4622      	mov	r2, r4
 801d67a:	4630      	mov	r0, r6
 801d67c:	f7ff ff1e 	bl	801d4bc <__multiply>
 801d680:	4639      	mov	r1, r7
 801d682:	4680      	mov	r8, r0
 801d684:	4630      	mov	r0, r6
 801d686:	f7ff fe47 	bl	801d318 <_Bfree>
 801d68a:	4647      	mov	r7, r8
 801d68c:	106d      	asrs	r5, r5, #1
 801d68e:	d00b      	beq.n	801d6a8 <__pow5mult+0xa0>
 801d690:	6820      	ldr	r0, [r4, #0]
 801d692:	b938      	cbnz	r0, 801d6a4 <__pow5mult+0x9c>
 801d694:	4622      	mov	r2, r4
 801d696:	4621      	mov	r1, r4
 801d698:	4630      	mov	r0, r6
 801d69a:	f7ff ff0f 	bl	801d4bc <__multiply>
 801d69e:	6020      	str	r0, [r4, #0]
 801d6a0:	f8c0 9000 	str.w	r9, [r0]
 801d6a4:	4604      	mov	r4, r0
 801d6a6:	e7e4      	b.n	801d672 <__pow5mult+0x6a>
 801d6a8:	4638      	mov	r0, r7
 801d6aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d6ae:	bf00      	nop
 801d6b0:	08022198 	.word	0x08022198
 801d6b4:	08021eb4 	.word	0x08021eb4
 801d6b8:	08022044 	.word	0x08022044

0801d6bc <__lshift>:
 801d6bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d6c0:	460c      	mov	r4, r1
 801d6c2:	6849      	ldr	r1, [r1, #4]
 801d6c4:	6923      	ldr	r3, [r4, #16]
 801d6c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801d6ca:	68a3      	ldr	r3, [r4, #8]
 801d6cc:	4607      	mov	r7, r0
 801d6ce:	4691      	mov	r9, r2
 801d6d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801d6d4:	f108 0601 	add.w	r6, r8, #1
 801d6d8:	42b3      	cmp	r3, r6
 801d6da:	db0b      	blt.n	801d6f4 <__lshift+0x38>
 801d6dc:	4638      	mov	r0, r7
 801d6de:	f7ff fddb 	bl	801d298 <_Balloc>
 801d6e2:	4605      	mov	r5, r0
 801d6e4:	b948      	cbnz	r0, 801d6fa <__lshift+0x3e>
 801d6e6:	4602      	mov	r2, r0
 801d6e8:	4b28      	ldr	r3, [pc, #160]	; (801d78c <__lshift+0xd0>)
 801d6ea:	4829      	ldr	r0, [pc, #164]	; (801d790 <__lshift+0xd4>)
 801d6ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 801d6f0:	f7fe fd68 	bl	801c1c4 <__assert_func>
 801d6f4:	3101      	adds	r1, #1
 801d6f6:	005b      	lsls	r3, r3, #1
 801d6f8:	e7ee      	b.n	801d6d8 <__lshift+0x1c>
 801d6fa:	2300      	movs	r3, #0
 801d6fc:	f100 0114 	add.w	r1, r0, #20
 801d700:	f100 0210 	add.w	r2, r0, #16
 801d704:	4618      	mov	r0, r3
 801d706:	4553      	cmp	r3, sl
 801d708:	db33      	blt.n	801d772 <__lshift+0xb6>
 801d70a:	6920      	ldr	r0, [r4, #16]
 801d70c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801d710:	f104 0314 	add.w	r3, r4, #20
 801d714:	f019 091f 	ands.w	r9, r9, #31
 801d718:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801d71c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801d720:	d02b      	beq.n	801d77a <__lshift+0xbe>
 801d722:	f1c9 0e20 	rsb	lr, r9, #32
 801d726:	468a      	mov	sl, r1
 801d728:	2200      	movs	r2, #0
 801d72a:	6818      	ldr	r0, [r3, #0]
 801d72c:	fa00 f009 	lsl.w	r0, r0, r9
 801d730:	4302      	orrs	r2, r0
 801d732:	f84a 2b04 	str.w	r2, [sl], #4
 801d736:	f853 2b04 	ldr.w	r2, [r3], #4
 801d73a:	459c      	cmp	ip, r3
 801d73c:	fa22 f20e 	lsr.w	r2, r2, lr
 801d740:	d8f3      	bhi.n	801d72a <__lshift+0x6e>
 801d742:	ebac 0304 	sub.w	r3, ip, r4
 801d746:	3b15      	subs	r3, #21
 801d748:	f023 0303 	bic.w	r3, r3, #3
 801d74c:	3304      	adds	r3, #4
 801d74e:	f104 0015 	add.w	r0, r4, #21
 801d752:	4584      	cmp	ip, r0
 801d754:	bf38      	it	cc
 801d756:	2304      	movcc	r3, #4
 801d758:	50ca      	str	r2, [r1, r3]
 801d75a:	b10a      	cbz	r2, 801d760 <__lshift+0xa4>
 801d75c:	f108 0602 	add.w	r6, r8, #2
 801d760:	3e01      	subs	r6, #1
 801d762:	4638      	mov	r0, r7
 801d764:	612e      	str	r6, [r5, #16]
 801d766:	4621      	mov	r1, r4
 801d768:	f7ff fdd6 	bl	801d318 <_Bfree>
 801d76c:	4628      	mov	r0, r5
 801d76e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d772:	f842 0f04 	str.w	r0, [r2, #4]!
 801d776:	3301      	adds	r3, #1
 801d778:	e7c5      	b.n	801d706 <__lshift+0x4a>
 801d77a:	3904      	subs	r1, #4
 801d77c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d780:	f841 2f04 	str.w	r2, [r1, #4]!
 801d784:	459c      	cmp	ip, r3
 801d786:	d8f9      	bhi.n	801d77c <__lshift+0xc0>
 801d788:	e7ea      	b.n	801d760 <__lshift+0xa4>
 801d78a:	bf00      	nop
 801d78c:	08021fd2 	.word	0x08021fd2
 801d790:	08022044 	.word	0x08022044

0801d794 <__mcmp>:
 801d794:	b530      	push	{r4, r5, lr}
 801d796:	6902      	ldr	r2, [r0, #16]
 801d798:	690c      	ldr	r4, [r1, #16]
 801d79a:	1b12      	subs	r2, r2, r4
 801d79c:	d10e      	bne.n	801d7bc <__mcmp+0x28>
 801d79e:	f100 0314 	add.w	r3, r0, #20
 801d7a2:	3114      	adds	r1, #20
 801d7a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801d7a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801d7ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801d7b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801d7b4:	42a5      	cmp	r5, r4
 801d7b6:	d003      	beq.n	801d7c0 <__mcmp+0x2c>
 801d7b8:	d305      	bcc.n	801d7c6 <__mcmp+0x32>
 801d7ba:	2201      	movs	r2, #1
 801d7bc:	4610      	mov	r0, r2
 801d7be:	bd30      	pop	{r4, r5, pc}
 801d7c0:	4283      	cmp	r3, r0
 801d7c2:	d3f3      	bcc.n	801d7ac <__mcmp+0x18>
 801d7c4:	e7fa      	b.n	801d7bc <__mcmp+0x28>
 801d7c6:	f04f 32ff 	mov.w	r2, #4294967295
 801d7ca:	e7f7      	b.n	801d7bc <__mcmp+0x28>

0801d7cc <__mdiff>:
 801d7cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7d0:	460c      	mov	r4, r1
 801d7d2:	4606      	mov	r6, r0
 801d7d4:	4611      	mov	r1, r2
 801d7d6:	4620      	mov	r0, r4
 801d7d8:	4617      	mov	r7, r2
 801d7da:	f7ff ffdb 	bl	801d794 <__mcmp>
 801d7de:	1e05      	subs	r5, r0, #0
 801d7e0:	d110      	bne.n	801d804 <__mdiff+0x38>
 801d7e2:	4629      	mov	r1, r5
 801d7e4:	4630      	mov	r0, r6
 801d7e6:	f7ff fd57 	bl	801d298 <_Balloc>
 801d7ea:	b930      	cbnz	r0, 801d7fa <__mdiff+0x2e>
 801d7ec:	4b39      	ldr	r3, [pc, #228]	; (801d8d4 <__mdiff+0x108>)
 801d7ee:	4602      	mov	r2, r0
 801d7f0:	f240 2132 	movw	r1, #562	; 0x232
 801d7f4:	4838      	ldr	r0, [pc, #224]	; (801d8d8 <__mdiff+0x10c>)
 801d7f6:	f7fe fce5 	bl	801c1c4 <__assert_func>
 801d7fa:	2301      	movs	r3, #1
 801d7fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801d800:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d804:	bfa4      	itt	ge
 801d806:	463b      	movge	r3, r7
 801d808:	4627      	movge	r7, r4
 801d80a:	4630      	mov	r0, r6
 801d80c:	6879      	ldr	r1, [r7, #4]
 801d80e:	bfa6      	itte	ge
 801d810:	461c      	movge	r4, r3
 801d812:	2500      	movge	r5, #0
 801d814:	2501      	movlt	r5, #1
 801d816:	f7ff fd3f 	bl	801d298 <_Balloc>
 801d81a:	b920      	cbnz	r0, 801d826 <__mdiff+0x5a>
 801d81c:	4b2d      	ldr	r3, [pc, #180]	; (801d8d4 <__mdiff+0x108>)
 801d81e:	4602      	mov	r2, r0
 801d820:	f44f 7110 	mov.w	r1, #576	; 0x240
 801d824:	e7e6      	b.n	801d7f4 <__mdiff+0x28>
 801d826:	693e      	ldr	r6, [r7, #16]
 801d828:	60c5      	str	r5, [r0, #12]
 801d82a:	6925      	ldr	r5, [r4, #16]
 801d82c:	f107 0114 	add.w	r1, r7, #20
 801d830:	f104 0914 	add.w	r9, r4, #20
 801d834:	f100 0e14 	add.w	lr, r0, #20
 801d838:	f107 0210 	add.w	r2, r7, #16
 801d83c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 801d840:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801d844:	46f2      	mov	sl, lr
 801d846:	2700      	movs	r7, #0
 801d848:	f859 3b04 	ldr.w	r3, [r9], #4
 801d84c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801d850:	fa1f f883 	uxth.w	r8, r3
 801d854:	fa17 f78b 	uxtah	r7, r7, fp
 801d858:	0c1b      	lsrs	r3, r3, #16
 801d85a:	eba7 0808 	sub.w	r8, r7, r8
 801d85e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801d862:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801d866:	fa1f f888 	uxth.w	r8, r8
 801d86a:	141f      	asrs	r7, r3, #16
 801d86c:	454d      	cmp	r5, r9
 801d86e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801d872:	f84a 3b04 	str.w	r3, [sl], #4
 801d876:	d8e7      	bhi.n	801d848 <__mdiff+0x7c>
 801d878:	1b2b      	subs	r3, r5, r4
 801d87a:	3b15      	subs	r3, #21
 801d87c:	f023 0303 	bic.w	r3, r3, #3
 801d880:	3304      	adds	r3, #4
 801d882:	3415      	adds	r4, #21
 801d884:	42a5      	cmp	r5, r4
 801d886:	bf38      	it	cc
 801d888:	2304      	movcc	r3, #4
 801d88a:	4419      	add	r1, r3
 801d88c:	4473      	add	r3, lr
 801d88e:	469e      	mov	lr, r3
 801d890:	460d      	mov	r5, r1
 801d892:	4565      	cmp	r5, ip
 801d894:	d30e      	bcc.n	801d8b4 <__mdiff+0xe8>
 801d896:	f10c 0203 	add.w	r2, ip, #3
 801d89a:	1a52      	subs	r2, r2, r1
 801d89c:	f022 0203 	bic.w	r2, r2, #3
 801d8a0:	3903      	subs	r1, #3
 801d8a2:	458c      	cmp	ip, r1
 801d8a4:	bf38      	it	cc
 801d8a6:	2200      	movcc	r2, #0
 801d8a8:	441a      	add	r2, r3
 801d8aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801d8ae:	b17b      	cbz	r3, 801d8d0 <__mdiff+0x104>
 801d8b0:	6106      	str	r6, [r0, #16]
 801d8b2:	e7a5      	b.n	801d800 <__mdiff+0x34>
 801d8b4:	f855 8b04 	ldr.w	r8, [r5], #4
 801d8b8:	fa17 f488 	uxtah	r4, r7, r8
 801d8bc:	1422      	asrs	r2, r4, #16
 801d8be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801d8c2:	b2a4      	uxth	r4, r4
 801d8c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801d8c8:	f84e 4b04 	str.w	r4, [lr], #4
 801d8cc:	1417      	asrs	r7, r2, #16
 801d8ce:	e7e0      	b.n	801d892 <__mdiff+0xc6>
 801d8d0:	3e01      	subs	r6, #1
 801d8d2:	e7ea      	b.n	801d8aa <__mdiff+0xde>
 801d8d4:	08021fd2 	.word	0x08021fd2
 801d8d8:	08022044 	.word	0x08022044

0801d8dc <__d2b>:
 801d8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801d8e0:	4689      	mov	r9, r1
 801d8e2:	2101      	movs	r1, #1
 801d8e4:	ec57 6b10 	vmov	r6, r7, d0
 801d8e8:	4690      	mov	r8, r2
 801d8ea:	f7ff fcd5 	bl	801d298 <_Balloc>
 801d8ee:	4604      	mov	r4, r0
 801d8f0:	b930      	cbnz	r0, 801d900 <__d2b+0x24>
 801d8f2:	4602      	mov	r2, r0
 801d8f4:	4b25      	ldr	r3, [pc, #148]	; (801d98c <__d2b+0xb0>)
 801d8f6:	4826      	ldr	r0, [pc, #152]	; (801d990 <__d2b+0xb4>)
 801d8f8:	f240 310a 	movw	r1, #778	; 0x30a
 801d8fc:	f7fe fc62 	bl	801c1c4 <__assert_func>
 801d900:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801d904:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801d908:	bb35      	cbnz	r5, 801d958 <__d2b+0x7c>
 801d90a:	2e00      	cmp	r6, #0
 801d90c:	9301      	str	r3, [sp, #4]
 801d90e:	d028      	beq.n	801d962 <__d2b+0x86>
 801d910:	4668      	mov	r0, sp
 801d912:	9600      	str	r6, [sp, #0]
 801d914:	f7ff fd8c 	bl	801d430 <__lo0bits>
 801d918:	9900      	ldr	r1, [sp, #0]
 801d91a:	b300      	cbz	r0, 801d95e <__d2b+0x82>
 801d91c:	9a01      	ldr	r2, [sp, #4]
 801d91e:	f1c0 0320 	rsb	r3, r0, #32
 801d922:	fa02 f303 	lsl.w	r3, r2, r3
 801d926:	430b      	orrs	r3, r1
 801d928:	40c2      	lsrs	r2, r0
 801d92a:	6163      	str	r3, [r4, #20]
 801d92c:	9201      	str	r2, [sp, #4]
 801d92e:	9b01      	ldr	r3, [sp, #4]
 801d930:	61a3      	str	r3, [r4, #24]
 801d932:	2b00      	cmp	r3, #0
 801d934:	bf14      	ite	ne
 801d936:	2202      	movne	r2, #2
 801d938:	2201      	moveq	r2, #1
 801d93a:	6122      	str	r2, [r4, #16]
 801d93c:	b1d5      	cbz	r5, 801d974 <__d2b+0x98>
 801d93e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801d942:	4405      	add	r5, r0
 801d944:	f8c9 5000 	str.w	r5, [r9]
 801d948:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801d94c:	f8c8 0000 	str.w	r0, [r8]
 801d950:	4620      	mov	r0, r4
 801d952:	b003      	add	sp, #12
 801d954:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d958:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801d95c:	e7d5      	b.n	801d90a <__d2b+0x2e>
 801d95e:	6161      	str	r1, [r4, #20]
 801d960:	e7e5      	b.n	801d92e <__d2b+0x52>
 801d962:	a801      	add	r0, sp, #4
 801d964:	f7ff fd64 	bl	801d430 <__lo0bits>
 801d968:	9b01      	ldr	r3, [sp, #4]
 801d96a:	6163      	str	r3, [r4, #20]
 801d96c:	2201      	movs	r2, #1
 801d96e:	6122      	str	r2, [r4, #16]
 801d970:	3020      	adds	r0, #32
 801d972:	e7e3      	b.n	801d93c <__d2b+0x60>
 801d974:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d978:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801d97c:	f8c9 0000 	str.w	r0, [r9]
 801d980:	6918      	ldr	r0, [r3, #16]
 801d982:	f7ff fd35 	bl	801d3f0 <__hi0bits>
 801d986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801d98a:	e7df      	b.n	801d94c <__d2b+0x70>
 801d98c:	08021fd2 	.word	0x08021fd2
 801d990:	08022044 	.word	0x08022044

0801d994 <_calloc_r>:
 801d994:	b513      	push	{r0, r1, r4, lr}
 801d996:	434a      	muls	r2, r1
 801d998:	4611      	mov	r1, r2
 801d99a:	9201      	str	r2, [sp, #4]
 801d99c:	f000 f85a 	bl	801da54 <_malloc_r>
 801d9a0:	4604      	mov	r4, r0
 801d9a2:	b118      	cbz	r0, 801d9ac <_calloc_r+0x18>
 801d9a4:	9a01      	ldr	r2, [sp, #4]
 801d9a6:	2100      	movs	r1, #0
 801d9a8:	f7fd fd66 	bl	801b478 <memset>
 801d9ac:	4620      	mov	r0, r4
 801d9ae:	b002      	add	sp, #8
 801d9b0:	bd10      	pop	{r4, pc}
	...

0801d9b4 <_free_r>:
 801d9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d9b6:	2900      	cmp	r1, #0
 801d9b8:	d048      	beq.n	801da4c <_free_r+0x98>
 801d9ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d9be:	9001      	str	r0, [sp, #4]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	f1a1 0404 	sub.w	r4, r1, #4
 801d9c6:	bfb8      	it	lt
 801d9c8:	18e4      	addlt	r4, r4, r3
 801d9ca:	f000 fabb 	bl	801df44 <__malloc_lock>
 801d9ce:	4a20      	ldr	r2, [pc, #128]	; (801da50 <_free_r+0x9c>)
 801d9d0:	9801      	ldr	r0, [sp, #4]
 801d9d2:	6813      	ldr	r3, [r2, #0]
 801d9d4:	4615      	mov	r5, r2
 801d9d6:	b933      	cbnz	r3, 801d9e6 <_free_r+0x32>
 801d9d8:	6063      	str	r3, [r4, #4]
 801d9da:	6014      	str	r4, [r2, #0]
 801d9dc:	b003      	add	sp, #12
 801d9de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d9e2:	f000 bab5 	b.w	801df50 <__malloc_unlock>
 801d9e6:	42a3      	cmp	r3, r4
 801d9e8:	d90b      	bls.n	801da02 <_free_r+0x4e>
 801d9ea:	6821      	ldr	r1, [r4, #0]
 801d9ec:	1862      	adds	r2, r4, r1
 801d9ee:	4293      	cmp	r3, r2
 801d9f0:	bf04      	itt	eq
 801d9f2:	681a      	ldreq	r2, [r3, #0]
 801d9f4:	685b      	ldreq	r3, [r3, #4]
 801d9f6:	6063      	str	r3, [r4, #4]
 801d9f8:	bf04      	itt	eq
 801d9fa:	1852      	addeq	r2, r2, r1
 801d9fc:	6022      	streq	r2, [r4, #0]
 801d9fe:	602c      	str	r4, [r5, #0]
 801da00:	e7ec      	b.n	801d9dc <_free_r+0x28>
 801da02:	461a      	mov	r2, r3
 801da04:	685b      	ldr	r3, [r3, #4]
 801da06:	b10b      	cbz	r3, 801da0c <_free_r+0x58>
 801da08:	42a3      	cmp	r3, r4
 801da0a:	d9fa      	bls.n	801da02 <_free_r+0x4e>
 801da0c:	6811      	ldr	r1, [r2, #0]
 801da0e:	1855      	adds	r5, r2, r1
 801da10:	42a5      	cmp	r5, r4
 801da12:	d10b      	bne.n	801da2c <_free_r+0x78>
 801da14:	6824      	ldr	r4, [r4, #0]
 801da16:	4421      	add	r1, r4
 801da18:	1854      	adds	r4, r2, r1
 801da1a:	42a3      	cmp	r3, r4
 801da1c:	6011      	str	r1, [r2, #0]
 801da1e:	d1dd      	bne.n	801d9dc <_free_r+0x28>
 801da20:	681c      	ldr	r4, [r3, #0]
 801da22:	685b      	ldr	r3, [r3, #4]
 801da24:	6053      	str	r3, [r2, #4]
 801da26:	4421      	add	r1, r4
 801da28:	6011      	str	r1, [r2, #0]
 801da2a:	e7d7      	b.n	801d9dc <_free_r+0x28>
 801da2c:	d902      	bls.n	801da34 <_free_r+0x80>
 801da2e:	230c      	movs	r3, #12
 801da30:	6003      	str	r3, [r0, #0]
 801da32:	e7d3      	b.n	801d9dc <_free_r+0x28>
 801da34:	6825      	ldr	r5, [r4, #0]
 801da36:	1961      	adds	r1, r4, r5
 801da38:	428b      	cmp	r3, r1
 801da3a:	bf04      	itt	eq
 801da3c:	6819      	ldreq	r1, [r3, #0]
 801da3e:	685b      	ldreq	r3, [r3, #4]
 801da40:	6063      	str	r3, [r4, #4]
 801da42:	bf04      	itt	eq
 801da44:	1949      	addeq	r1, r1, r5
 801da46:	6021      	streq	r1, [r4, #0]
 801da48:	6054      	str	r4, [r2, #4]
 801da4a:	e7c7      	b.n	801d9dc <_free_r+0x28>
 801da4c:	b003      	add	sp, #12
 801da4e:	bd30      	pop	{r4, r5, pc}
 801da50:	20004930 	.word	0x20004930

0801da54 <_malloc_r>:
 801da54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da56:	1ccd      	adds	r5, r1, #3
 801da58:	f025 0503 	bic.w	r5, r5, #3
 801da5c:	3508      	adds	r5, #8
 801da5e:	2d0c      	cmp	r5, #12
 801da60:	bf38      	it	cc
 801da62:	250c      	movcc	r5, #12
 801da64:	2d00      	cmp	r5, #0
 801da66:	4606      	mov	r6, r0
 801da68:	db01      	blt.n	801da6e <_malloc_r+0x1a>
 801da6a:	42a9      	cmp	r1, r5
 801da6c:	d903      	bls.n	801da76 <_malloc_r+0x22>
 801da6e:	230c      	movs	r3, #12
 801da70:	6033      	str	r3, [r6, #0]
 801da72:	2000      	movs	r0, #0
 801da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da76:	f000 fa65 	bl	801df44 <__malloc_lock>
 801da7a:	4921      	ldr	r1, [pc, #132]	; (801db00 <_malloc_r+0xac>)
 801da7c:	680a      	ldr	r2, [r1, #0]
 801da7e:	4614      	mov	r4, r2
 801da80:	b99c      	cbnz	r4, 801daaa <_malloc_r+0x56>
 801da82:	4f20      	ldr	r7, [pc, #128]	; (801db04 <_malloc_r+0xb0>)
 801da84:	683b      	ldr	r3, [r7, #0]
 801da86:	b923      	cbnz	r3, 801da92 <_malloc_r+0x3e>
 801da88:	4621      	mov	r1, r4
 801da8a:	4630      	mov	r0, r6
 801da8c:	f000 f996 	bl	801ddbc <_sbrk_r>
 801da90:	6038      	str	r0, [r7, #0]
 801da92:	4629      	mov	r1, r5
 801da94:	4630      	mov	r0, r6
 801da96:	f000 f991 	bl	801ddbc <_sbrk_r>
 801da9a:	1c43      	adds	r3, r0, #1
 801da9c:	d123      	bne.n	801dae6 <_malloc_r+0x92>
 801da9e:	230c      	movs	r3, #12
 801daa0:	6033      	str	r3, [r6, #0]
 801daa2:	4630      	mov	r0, r6
 801daa4:	f000 fa54 	bl	801df50 <__malloc_unlock>
 801daa8:	e7e3      	b.n	801da72 <_malloc_r+0x1e>
 801daaa:	6823      	ldr	r3, [r4, #0]
 801daac:	1b5b      	subs	r3, r3, r5
 801daae:	d417      	bmi.n	801dae0 <_malloc_r+0x8c>
 801dab0:	2b0b      	cmp	r3, #11
 801dab2:	d903      	bls.n	801dabc <_malloc_r+0x68>
 801dab4:	6023      	str	r3, [r4, #0]
 801dab6:	441c      	add	r4, r3
 801dab8:	6025      	str	r5, [r4, #0]
 801daba:	e004      	b.n	801dac6 <_malloc_r+0x72>
 801dabc:	6863      	ldr	r3, [r4, #4]
 801dabe:	42a2      	cmp	r2, r4
 801dac0:	bf0c      	ite	eq
 801dac2:	600b      	streq	r3, [r1, #0]
 801dac4:	6053      	strne	r3, [r2, #4]
 801dac6:	4630      	mov	r0, r6
 801dac8:	f000 fa42 	bl	801df50 <__malloc_unlock>
 801dacc:	f104 000b 	add.w	r0, r4, #11
 801dad0:	1d23      	adds	r3, r4, #4
 801dad2:	f020 0007 	bic.w	r0, r0, #7
 801dad6:	1ac2      	subs	r2, r0, r3
 801dad8:	d0cc      	beq.n	801da74 <_malloc_r+0x20>
 801dada:	1a1b      	subs	r3, r3, r0
 801dadc:	50a3      	str	r3, [r4, r2]
 801dade:	e7c9      	b.n	801da74 <_malloc_r+0x20>
 801dae0:	4622      	mov	r2, r4
 801dae2:	6864      	ldr	r4, [r4, #4]
 801dae4:	e7cc      	b.n	801da80 <_malloc_r+0x2c>
 801dae6:	1cc4      	adds	r4, r0, #3
 801dae8:	f024 0403 	bic.w	r4, r4, #3
 801daec:	42a0      	cmp	r0, r4
 801daee:	d0e3      	beq.n	801dab8 <_malloc_r+0x64>
 801daf0:	1a21      	subs	r1, r4, r0
 801daf2:	4630      	mov	r0, r6
 801daf4:	f000 f962 	bl	801ddbc <_sbrk_r>
 801daf8:	3001      	adds	r0, #1
 801dafa:	d1dd      	bne.n	801dab8 <_malloc_r+0x64>
 801dafc:	e7cf      	b.n	801da9e <_malloc_r+0x4a>
 801dafe:	bf00      	nop
 801db00:	20004930 	.word	0x20004930
 801db04:	20004934 	.word	0x20004934

0801db08 <__sfputc_r>:
 801db08:	6893      	ldr	r3, [r2, #8]
 801db0a:	3b01      	subs	r3, #1
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	b410      	push	{r4}
 801db10:	6093      	str	r3, [r2, #8]
 801db12:	da08      	bge.n	801db26 <__sfputc_r+0x1e>
 801db14:	6994      	ldr	r4, [r2, #24]
 801db16:	42a3      	cmp	r3, r4
 801db18:	db01      	blt.n	801db1e <__sfputc_r+0x16>
 801db1a:	290a      	cmp	r1, #10
 801db1c:	d103      	bne.n	801db26 <__sfputc_r+0x1e>
 801db1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db22:	f7fe ba8f 	b.w	801c044 <__swbuf_r>
 801db26:	6813      	ldr	r3, [r2, #0]
 801db28:	1c58      	adds	r0, r3, #1
 801db2a:	6010      	str	r0, [r2, #0]
 801db2c:	7019      	strb	r1, [r3, #0]
 801db2e:	4608      	mov	r0, r1
 801db30:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db34:	4770      	bx	lr

0801db36 <__sfputs_r>:
 801db36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db38:	4606      	mov	r6, r0
 801db3a:	460f      	mov	r7, r1
 801db3c:	4614      	mov	r4, r2
 801db3e:	18d5      	adds	r5, r2, r3
 801db40:	42ac      	cmp	r4, r5
 801db42:	d101      	bne.n	801db48 <__sfputs_r+0x12>
 801db44:	2000      	movs	r0, #0
 801db46:	e007      	b.n	801db58 <__sfputs_r+0x22>
 801db48:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db4c:	463a      	mov	r2, r7
 801db4e:	4630      	mov	r0, r6
 801db50:	f7ff ffda 	bl	801db08 <__sfputc_r>
 801db54:	1c43      	adds	r3, r0, #1
 801db56:	d1f3      	bne.n	801db40 <__sfputs_r+0xa>
 801db58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801db5c <_vfiprintf_r>:
 801db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db60:	460d      	mov	r5, r1
 801db62:	b09d      	sub	sp, #116	; 0x74
 801db64:	4614      	mov	r4, r2
 801db66:	4698      	mov	r8, r3
 801db68:	4606      	mov	r6, r0
 801db6a:	b118      	cbz	r0, 801db74 <_vfiprintf_r+0x18>
 801db6c:	6983      	ldr	r3, [r0, #24]
 801db6e:	b90b      	cbnz	r3, 801db74 <_vfiprintf_r+0x18>
 801db70:	f7ff fa6e 	bl	801d050 <__sinit>
 801db74:	4b89      	ldr	r3, [pc, #548]	; (801dd9c <_vfiprintf_r+0x240>)
 801db76:	429d      	cmp	r5, r3
 801db78:	d11b      	bne.n	801dbb2 <_vfiprintf_r+0x56>
 801db7a:	6875      	ldr	r5, [r6, #4]
 801db7c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db7e:	07d9      	lsls	r1, r3, #31
 801db80:	d405      	bmi.n	801db8e <_vfiprintf_r+0x32>
 801db82:	89ab      	ldrh	r3, [r5, #12]
 801db84:	059a      	lsls	r2, r3, #22
 801db86:	d402      	bmi.n	801db8e <_vfiprintf_r+0x32>
 801db88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db8a:	f7ff fb16 	bl	801d1ba <__retarget_lock_acquire_recursive>
 801db8e:	89ab      	ldrh	r3, [r5, #12]
 801db90:	071b      	lsls	r3, r3, #28
 801db92:	d501      	bpl.n	801db98 <_vfiprintf_r+0x3c>
 801db94:	692b      	ldr	r3, [r5, #16]
 801db96:	b9eb      	cbnz	r3, 801dbd4 <_vfiprintf_r+0x78>
 801db98:	4629      	mov	r1, r5
 801db9a:	4630      	mov	r0, r6
 801db9c:	f7fe faa4 	bl	801c0e8 <__swsetup_r>
 801dba0:	b1c0      	cbz	r0, 801dbd4 <_vfiprintf_r+0x78>
 801dba2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dba4:	07dc      	lsls	r4, r3, #31
 801dba6:	d50e      	bpl.n	801dbc6 <_vfiprintf_r+0x6a>
 801dba8:	f04f 30ff 	mov.w	r0, #4294967295
 801dbac:	b01d      	add	sp, #116	; 0x74
 801dbae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dbb2:	4b7b      	ldr	r3, [pc, #492]	; (801dda0 <_vfiprintf_r+0x244>)
 801dbb4:	429d      	cmp	r5, r3
 801dbb6:	d101      	bne.n	801dbbc <_vfiprintf_r+0x60>
 801dbb8:	68b5      	ldr	r5, [r6, #8]
 801dbba:	e7df      	b.n	801db7c <_vfiprintf_r+0x20>
 801dbbc:	4b79      	ldr	r3, [pc, #484]	; (801dda4 <_vfiprintf_r+0x248>)
 801dbbe:	429d      	cmp	r5, r3
 801dbc0:	bf08      	it	eq
 801dbc2:	68f5      	ldreq	r5, [r6, #12]
 801dbc4:	e7da      	b.n	801db7c <_vfiprintf_r+0x20>
 801dbc6:	89ab      	ldrh	r3, [r5, #12]
 801dbc8:	0598      	lsls	r0, r3, #22
 801dbca:	d4ed      	bmi.n	801dba8 <_vfiprintf_r+0x4c>
 801dbcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbce:	f7ff faf5 	bl	801d1bc <__retarget_lock_release_recursive>
 801dbd2:	e7e9      	b.n	801dba8 <_vfiprintf_r+0x4c>
 801dbd4:	2300      	movs	r3, #0
 801dbd6:	9309      	str	r3, [sp, #36]	; 0x24
 801dbd8:	2320      	movs	r3, #32
 801dbda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801dbde:	f8cd 800c 	str.w	r8, [sp, #12]
 801dbe2:	2330      	movs	r3, #48	; 0x30
 801dbe4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801dda8 <_vfiprintf_r+0x24c>
 801dbe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801dbec:	f04f 0901 	mov.w	r9, #1
 801dbf0:	4623      	mov	r3, r4
 801dbf2:	469a      	mov	sl, r3
 801dbf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801dbf8:	b10a      	cbz	r2, 801dbfe <_vfiprintf_r+0xa2>
 801dbfa:	2a25      	cmp	r2, #37	; 0x25
 801dbfc:	d1f9      	bne.n	801dbf2 <_vfiprintf_r+0x96>
 801dbfe:	ebba 0b04 	subs.w	fp, sl, r4
 801dc02:	d00b      	beq.n	801dc1c <_vfiprintf_r+0xc0>
 801dc04:	465b      	mov	r3, fp
 801dc06:	4622      	mov	r2, r4
 801dc08:	4629      	mov	r1, r5
 801dc0a:	4630      	mov	r0, r6
 801dc0c:	f7ff ff93 	bl	801db36 <__sfputs_r>
 801dc10:	3001      	adds	r0, #1
 801dc12:	f000 80aa 	beq.w	801dd6a <_vfiprintf_r+0x20e>
 801dc16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801dc18:	445a      	add	r2, fp
 801dc1a:	9209      	str	r2, [sp, #36]	; 0x24
 801dc1c:	f89a 3000 	ldrb.w	r3, [sl]
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	f000 80a2 	beq.w	801dd6a <_vfiprintf_r+0x20e>
 801dc26:	2300      	movs	r3, #0
 801dc28:	f04f 32ff 	mov.w	r2, #4294967295
 801dc2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dc30:	f10a 0a01 	add.w	sl, sl, #1
 801dc34:	9304      	str	r3, [sp, #16]
 801dc36:	9307      	str	r3, [sp, #28]
 801dc38:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801dc3c:	931a      	str	r3, [sp, #104]	; 0x68
 801dc3e:	4654      	mov	r4, sl
 801dc40:	2205      	movs	r2, #5
 801dc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dc46:	4858      	ldr	r0, [pc, #352]	; (801dda8 <_vfiprintf_r+0x24c>)
 801dc48:	f7e2 fb02 	bl	8000250 <memchr>
 801dc4c:	9a04      	ldr	r2, [sp, #16]
 801dc4e:	b9d8      	cbnz	r0, 801dc88 <_vfiprintf_r+0x12c>
 801dc50:	06d1      	lsls	r1, r2, #27
 801dc52:	bf44      	itt	mi
 801dc54:	2320      	movmi	r3, #32
 801dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc5a:	0713      	lsls	r3, r2, #28
 801dc5c:	bf44      	itt	mi
 801dc5e:	232b      	movmi	r3, #43	; 0x2b
 801dc60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801dc64:	f89a 3000 	ldrb.w	r3, [sl]
 801dc68:	2b2a      	cmp	r3, #42	; 0x2a
 801dc6a:	d015      	beq.n	801dc98 <_vfiprintf_r+0x13c>
 801dc6c:	9a07      	ldr	r2, [sp, #28]
 801dc6e:	4654      	mov	r4, sl
 801dc70:	2000      	movs	r0, #0
 801dc72:	f04f 0c0a 	mov.w	ip, #10
 801dc76:	4621      	mov	r1, r4
 801dc78:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dc7c:	3b30      	subs	r3, #48	; 0x30
 801dc7e:	2b09      	cmp	r3, #9
 801dc80:	d94e      	bls.n	801dd20 <_vfiprintf_r+0x1c4>
 801dc82:	b1b0      	cbz	r0, 801dcb2 <_vfiprintf_r+0x156>
 801dc84:	9207      	str	r2, [sp, #28]
 801dc86:	e014      	b.n	801dcb2 <_vfiprintf_r+0x156>
 801dc88:	eba0 0308 	sub.w	r3, r0, r8
 801dc8c:	fa09 f303 	lsl.w	r3, r9, r3
 801dc90:	4313      	orrs	r3, r2
 801dc92:	9304      	str	r3, [sp, #16]
 801dc94:	46a2      	mov	sl, r4
 801dc96:	e7d2      	b.n	801dc3e <_vfiprintf_r+0xe2>
 801dc98:	9b03      	ldr	r3, [sp, #12]
 801dc9a:	1d19      	adds	r1, r3, #4
 801dc9c:	681b      	ldr	r3, [r3, #0]
 801dc9e:	9103      	str	r1, [sp, #12]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	bfbb      	ittet	lt
 801dca4:	425b      	neglt	r3, r3
 801dca6:	f042 0202 	orrlt.w	r2, r2, #2
 801dcaa:	9307      	strge	r3, [sp, #28]
 801dcac:	9307      	strlt	r3, [sp, #28]
 801dcae:	bfb8      	it	lt
 801dcb0:	9204      	strlt	r2, [sp, #16]
 801dcb2:	7823      	ldrb	r3, [r4, #0]
 801dcb4:	2b2e      	cmp	r3, #46	; 0x2e
 801dcb6:	d10c      	bne.n	801dcd2 <_vfiprintf_r+0x176>
 801dcb8:	7863      	ldrb	r3, [r4, #1]
 801dcba:	2b2a      	cmp	r3, #42	; 0x2a
 801dcbc:	d135      	bne.n	801dd2a <_vfiprintf_r+0x1ce>
 801dcbe:	9b03      	ldr	r3, [sp, #12]
 801dcc0:	1d1a      	adds	r2, r3, #4
 801dcc2:	681b      	ldr	r3, [r3, #0]
 801dcc4:	9203      	str	r2, [sp, #12]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	bfb8      	it	lt
 801dcca:	f04f 33ff 	movlt.w	r3, #4294967295
 801dcce:	3402      	adds	r4, #2
 801dcd0:	9305      	str	r3, [sp, #20]
 801dcd2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801ddb8 <_vfiprintf_r+0x25c>
 801dcd6:	7821      	ldrb	r1, [r4, #0]
 801dcd8:	2203      	movs	r2, #3
 801dcda:	4650      	mov	r0, sl
 801dcdc:	f7e2 fab8 	bl	8000250 <memchr>
 801dce0:	b140      	cbz	r0, 801dcf4 <_vfiprintf_r+0x198>
 801dce2:	2340      	movs	r3, #64	; 0x40
 801dce4:	eba0 000a 	sub.w	r0, r0, sl
 801dce8:	fa03 f000 	lsl.w	r0, r3, r0
 801dcec:	9b04      	ldr	r3, [sp, #16]
 801dcee:	4303      	orrs	r3, r0
 801dcf0:	3401      	adds	r4, #1
 801dcf2:	9304      	str	r3, [sp, #16]
 801dcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dcf8:	482c      	ldr	r0, [pc, #176]	; (801ddac <_vfiprintf_r+0x250>)
 801dcfa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801dcfe:	2206      	movs	r2, #6
 801dd00:	f7e2 faa6 	bl	8000250 <memchr>
 801dd04:	2800      	cmp	r0, #0
 801dd06:	d03f      	beq.n	801dd88 <_vfiprintf_r+0x22c>
 801dd08:	4b29      	ldr	r3, [pc, #164]	; (801ddb0 <_vfiprintf_r+0x254>)
 801dd0a:	bb1b      	cbnz	r3, 801dd54 <_vfiprintf_r+0x1f8>
 801dd0c:	9b03      	ldr	r3, [sp, #12]
 801dd0e:	3307      	adds	r3, #7
 801dd10:	f023 0307 	bic.w	r3, r3, #7
 801dd14:	3308      	adds	r3, #8
 801dd16:	9303      	str	r3, [sp, #12]
 801dd18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dd1a:	443b      	add	r3, r7
 801dd1c:	9309      	str	r3, [sp, #36]	; 0x24
 801dd1e:	e767      	b.n	801dbf0 <_vfiprintf_r+0x94>
 801dd20:	fb0c 3202 	mla	r2, ip, r2, r3
 801dd24:	460c      	mov	r4, r1
 801dd26:	2001      	movs	r0, #1
 801dd28:	e7a5      	b.n	801dc76 <_vfiprintf_r+0x11a>
 801dd2a:	2300      	movs	r3, #0
 801dd2c:	3401      	adds	r4, #1
 801dd2e:	9305      	str	r3, [sp, #20]
 801dd30:	4619      	mov	r1, r3
 801dd32:	f04f 0c0a 	mov.w	ip, #10
 801dd36:	4620      	mov	r0, r4
 801dd38:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dd3c:	3a30      	subs	r2, #48	; 0x30
 801dd3e:	2a09      	cmp	r2, #9
 801dd40:	d903      	bls.n	801dd4a <_vfiprintf_r+0x1ee>
 801dd42:	2b00      	cmp	r3, #0
 801dd44:	d0c5      	beq.n	801dcd2 <_vfiprintf_r+0x176>
 801dd46:	9105      	str	r1, [sp, #20]
 801dd48:	e7c3      	b.n	801dcd2 <_vfiprintf_r+0x176>
 801dd4a:	fb0c 2101 	mla	r1, ip, r1, r2
 801dd4e:	4604      	mov	r4, r0
 801dd50:	2301      	movs	r3, #1
 801dd52:	e7f0      	b.n	801dd36 <_vfiprintf_r+0x1da>
 801dd54:	ab03      	add	r3, sp, #12
 801dd56:	9300      	str	r3, [sp, #0]
 801dd58:	462a      	mov	r2, r5
 801dd5a:	4b16      	ldr	r3, [pc, #88]	; (801ddb4 <_vfiprintf_r+0x258>)
 801dd5c:	a904      	add	r1, sp, #16
 801dd5e:	4630      	mov	r0, r6
 801dd60:	f7fd fc22 	bl	801b5a8 <_printf_float>
 801dd64:	4607      	mov	r7, r0
 801dd66:	1c78      	adds	r0, r7, #1
 801dd68:	d1d6      	bne.n	801dd18 <_vfiprintf_r+0x1bc>
 801dd6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dd6c:	07d9      	lsls	r1, r3, #31
 801dd6e:	d405      	bmi.n	801dd7c <_vfiprintf_r+0x220>
 801dd70:	89ab      	ldrh	r3, [r5, #12]
 801dd72:	059a      	lsls	r2, r3, #22
 801dd74:	d402      	bmi.n	801dd7c <_vfiprintf_r+0x220>
 801dd76:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dd78:	f7ff fa20 	bl	801d1bc <__retarget_lock_release_recursive>
 801dd7c:	89ab      	ldrh	r3, [r5, #12]
 801dd7e:	065b      	lsls	r3, r3, #25
 801dd80:	f53f af12 	bmi.w	801dba8 <_vfiprintf_r+0x4c>
 801dd84:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dd86:	e711      	b.n	801dbac <_vfiprintf_r+0x50>
 801dd88:	ab03      	add	r3, sp, #12
 801dd8a:	9300      	str	r3, [sp, #0]
 801dd8c:	462a      	mov	r2, r5
 801dd8e:	4b09      	ldr	r3, [pc, #36]	; (801ddb4 <_vfiprintf_r+0x258>)
 801dd90:	a904      	add	r1, sp, #16
 801dd92:	4630      	mov	r0, r6
 801dd94:	f7fd fe94 	bl	801bac0 <_printf_i>
 801dd98:	e7e4      	b.n	801dd64 <_vfiprintf_r+0x208>
 801dd9a:	bf00      	nop
 801dd9c:	08022004 	.word	0x08022004
 801dda0:	08022024 	.word	0x08022024
 801dda4:	08021fe4 	.word	0x08021fe4
 801dda8:	080221a4 	.word	0x080221a4
 801ddac:	080221ae 	.word	0x080221ae
 801ddb0:	0801b5a9 	.word	0x0801b5a9
 801ddb4:	0801db37 	.word	0x0801db37
 801ddb8:	080221aa 	.word	0x080221aa

0801ddbc <_sbrk_r>:
 801ddbc:	b538      	push	{r3, r4, r5, lr}
 801ddbe:	4d06      	ldr	r5, [pc, #24]	; (801ddd8 <_sbrk_r+0x1c>)
 801ddc0:	2300      	movs	r3, #0
 801ddc2:	4604      	mov	r4, r0
 801ddc4:	4608      	mov	r0, r1
 801ddc6:	602b      	str	r3, [r5, #0]
 801ddc8:	f7e4 f88a 	bl	8001ee0 <_sbrk>
 801ddcc:	1c43      	adds	r3, r0, #1
 801ddce:	d102      	bne.n	801ddd6 <_sbrk_r+0x1a>
 801ddd0:	682b      	ldr	r3, [r5, #0]
 801ddd2:	b103      	cbz	r3, 801ddd6 <_sbrk_r+0x1a>
 801ddd4:	6023      	str	r3, [r4, #0]
 801ddd6:	bd38      	pop	{r3, r4, r5, pc}
 801ddd8:	2000d7d8 	.word	0x2000d7d8

0801dddc <__sread>:
 801dddc:	b510      	push	{r4, lr}
 801ddde:	460c      	mov	r4, r1
 801dde0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dde4:	f000 f8ba 	bl	801df5c <_read_r>
 801dde8:	2800      	cmp	r0, #0
 801ddea:	bfab      	itete	ge
 801ddec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801ddee:	89a3      	ldrhlt	r3, [r4, #12]
 801ddf0:	181b      	addge	r3, r3, r0
 801ddf2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801ddf6:	bfac      	ite	ge
 801ddf8:	6563      	strge	r3, [r4, #84]	; 0x54
 801ddfa:	81a3      	strhlt	r3, [r4, #12]
 801ddfc:	bd10      	pop	{r4, pc}

0801ddfe <__swrite>:
 801ddfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de02:	461f      	mov	r7, r3
 801de04:	898b      	ldrh	r3, [r1, #12]
 801de06:	05db      	lsls	r3, r3, #23
 801de08:	4605      	mov	r5, r0
 801de0a:	460c      	mov	r4, r1
 801de0c:	4616      	mov	r6, r2
 801de0e:	d505      	bpl.n	801de1c <__swrite+0x1e>
 801de10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de14:	2302      	movs	r3, #2
 801de16:	2200      	movs	r2, #0
 801de18:	f000 f870 	bl	801defc <_lseek_r>
 801de1c:	89a3      	ldrh	r3, [r4, #12]
 801de1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801de26:	81a3      	strh	r3, [r4, #12]
 801de28:	4632      	mov	r2, r6
 801de2a:	463b      	mov	r3, r7
 801de2c:	4628      	mov	r0, r5
 801de2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de32:	f000 b817 	b.w	801de64 <_write_r>

0801de36 <__sseek>:
 801de36:	b510      	push	{r4, lr}
 801de38:	460c      	mov	r4, r1
 801de3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de3e:	f000 f85d 	bl	801defc <_lseek_r>
 801de42:	1c43      	adds	r3, r0, #1
 801de44:	89a3      	ldrh	r3, [r4, #12]
 801de46:	bf15      	itete	ne
 801de48:	6560      	strne	r0, [r4, #84]	; 0x54
 801de4a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801de4e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801de52:	81a3      	strheq	r3, [r4, #12]
 801de54:	bf18      	it	ne
 801de56:	81a3      	strhne	r3, [r4, #12]
 801de58:	bd10      	pop	{r4, pc}

0801de5a <__sclose>:
 801de5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de5e:	f000 b81b 	b.w	801de98 <_close_r>
	...

0801de64 <_write_r>:
 801de64:	b538      	push	{r3, r4, r5, lr}
 801de66:	4d07      	ldr	r5, [pc, #28]	; (801de84 <_write_r+0x20>)
 801de68:	4604      	mov	r4, r0
 801de6a:	4608      	mov	r0, r1
 801de6c:	4611      	mov	r1, r2
 801de6e:	2200      	movs	r2, #0
 801de70:	602a      	str	r2, [r5, #0]
 801de72:	461a      	mov	r2, r3
 801de74:	f7e3 ffe3 	bl	8001e3e <_write>
 801de78:	1c43      	adds	r3, r0, #1
 801de7a:	d102      	bne.n	801de82 <_write_r+0x1e>
 801de7c:	682b      	ldr	r3, [r5, #0]
 801de7e:	b103      	cbz	r3, 801de82 <_write_r+0x1e>
 801de80:	6023      	str	r3, [r4, #0]
 801de82:	bd38      	pop	{r3, r4, r5, pc}
 801de84:	2000d7d8 	.word	0x2000d7d8

0801de88 <abort>:
 801de88:	b508      	push	{r3, lr}
 801de8a:	2006      	movs	r0, #6
 801de8c:	f000 f8a0 	bl	801dfd0 <raise>
 801de90:	2001      	movs	r0, #1
 801de92:	f7e3 ffad 	bl	8001df0 <_exit>
	...

0801de98 <_close_r>:
 801de98:	b538      	push	{r3, r4, r5, lr}
 801de9a:	4d06      	ldr	r5, [pc, #24]	; (801deb4 <_close_r+0x1c>)
 801de9c:	2300      	movs	r3, #0
 801de9e:	4604      	mov	r4, r0
 801dea0:	4608      	mov	r0, r1
 801dea2:	602b      	str	r3, [r5, #0]
 801dea4:	f7e3 ffe7 	bl	8001e76 <_close>
 801dea8:	1c43      	adds	r3, r0, #1
 801deaa:	d102      	bne.n	801deb2 <_close_r+0x1a>
 801deac:	682b      	ldr	r3, [r5, #0]
 801deae:	b103      	cbz	r3, 801deb2 <_close_r+0x1a>
 801deb0:	6023      	str	r3, [r4, #0]
 801deb2:	bd38      	pop	{r3, r4, r5, pc}
 801deb4:	2000d7d8 	.word	0x2000d7d8

0801deb8 <_fstat_r>:
 801deb8:	b538      	push	{r3, r4, r5, lr}
 801deba:	4d07      	ldr	r5, [pc, #28]	; (801ded8 <_fstat_r+0x20>)
 801debc:	2300      	movs	r3, #0
 801debe:	4604      	mov	r4, r0
 801dec0:	4608      	mov	r0, r1
 801dec2:	4611      	mov	r1, r2
 801dec4:	602b      	str	r3, [r5, #0]
 801dec6:	f7e3 ffe2 	bl	8001e8e <_fstat>
 801deca:	1c43      	adds	r3, r0, #1
 801decc:	d102      	bne.n	801ded4 <_fstat_r+0x1c>
 801dece:	682b      	ldr	r3, [r5, #0]
 801ded0:	b103      	cbz	r3, 801ded4 <_fstat_r+0x1c>
 801ded2:	6023      	str	r3, [r4, #0]
 801ded4:	bd38      	pop	{r3, r4, r5, pc}
 801ded6:	bf00      	nop
 801ded8:	2000d7d8 	.word	0x2000d7d8

0801dedc <_isatty_r>:
 801dedc:	b538      	push	{r3, r4, r5, lr}
 801dede:	4d06      	ldr	r5, [pc, #24]	; (801def8 <_isatty_r+0x1c>)
 801dee0:	2300      	movs	r3, #0
 801dee2:	4604      	mov	r4, r0
 801dee4:	4608      	mov	r0, r1
 801dee6:	602b      	str	r3, [r5, #0]
 801dee8:	f7e3 ffe1 	bl	8001eae <_isatty>
 801deec:	1c43      	adds	r3, r0, #1
 801deee:	d102      	bne.n	801def6 <_isatty_r+0x1a>
 801def0:	682b      	ldr	r3, [r5, #0]
 801def2:	b103      	cbz	r3, 801def6 <_isatty_r+0x1a>
 801def4:	6023      	str	r3, [r4, #0]
 801def6:	bd38      	pop	{r3, r4, r5, pc}
 801def8:	2000d7d8 	.word	0x2000d7d8

0801defc <_lseek_r>:
 801defc:	b538      	push	{r3, r4, r5, lr}
 801defe:	4d07      	ldr	r5, [pc, #28]	; (801df1c <_lseek_r+0x20>)
 801df00:	4604      	mov	r4, r0
 801df02:	4608      	mov	r0, r1
 801df04:	4611      	mov	r1, r2
 801df06:	2200      	movs	r2, #0
 801df08:	602a      	str	r2, [r5, #0]
 801df0a:	461a      	mov	r2, r3
 801df0c:	f7e3 ffda 	bl	8001ec4 <_lseek>
 801df10:	1c43      	adds	r3, r0, #1
 801df12:	d102      	bne.n	801df1a <_lseek_r+0x1e>
 801df14:	682b      	ldr	r3, [r5, #0]
 801df16:	b103      	cbz	r3, 801df1a <_lseek_r+0x1e>
 801df18:	6023      	str	r3, [r4, #0]
 801df1a:	bd38      	pop	{r3, r4, r5, pc}
 801df1c:	2000d7d8 	.word	0x2000d7d8

0801df20 <__ascii_mbtowc>:
 801df20:	b082      	sub	sp, #8
 801df22:	b901      	cbnz	r1, 801df26 <__ascii_mbtowc+0x6>
 801df24:	a901      	add	r1, sp, #4
 801df26:	b142      	cbz	r2, 801df3a <__ascii_mbtowc+0x1a>
 801df28:	b14b      	cbz	r3, 801df3e <__ascii_mbtowc+0x1e>
 801df2a:	7813      	ldrb	r3, [r2, #0]
 801df2c:	600b      	str	r3, [r1, #0]
 801df2e:	7812      	ldrb	r2, [r2, #0]
 801df30:	1e10      	subs	r0, r2, #0
 801df32:	bf18      	it	ne
 801df34:	2001      	movne	r0, #1
 801df36:	b002      	add	sp, #8
 801df38:	4770      	bx	lr
 801df3a:	4610      	mov	r0, r2
 801df3c:	e7fb      	b.n	801df36 <__ascii_mbtowc+0x16>
 801df3e:	f06f 0001 	mvn.w	r0, #1
 801df42:	e7f8      	b.n	801df36 <__ascii_mbtowc+0x16>

0801df44 <__malloc_lock>:
 801df44:	4801      	ldr	r0, [pc, #4]	; (801df4c <__malloc_lock+0x8>)
 801df46:	f7ff b938 	b.w	801d1ba <__retarget_lock_acquire_recursive>
 801df4a:	bf00      	nop
 801df4c:	2000d7e4 	.word	0x2000d7e4

0801df50 <__malloc_unlock>:
 801df50:	4801      	ldr	r0, [pc, #4]	; (801df58 <__malloc_unlock+0x8>)
 801df52:	f7ff b933 	b.w	801d1bc <__retarget_lock_release_recursive>
 801df56:	bf00      	nop
 801df58:	2000d7e4 	.word	0x2000d7e4

0801df5c <_read_r>:
 801df5c:	b538      	push	{r3, r4, r5, lr}
 801df5e:	4d07      	ldr	r5, [pc, #28]	; (801df7c <_read_r+0x20>)
 801df60:	4604      	mov	r4, r0
 801df62:	4608      	mov	r0, r1
 801df64:	4611      	mov	r1, r2
 801df66:	2200      	movs	r2, #0
 801df68:	602a      	str	r2, [r5, #0]
 801df6a:	461a      	mov	r2, r3
 801df6c:	f7e3 ff4a 	bl	8001e04 <_read>
 801df70:	1c43      	adds	r3, r0, #1
 801df72:	d102      	bne.n	801df7a <_read_r+0x1e>
 801df74:	682b      	ldr	r3, [r5, #0]
 801df76:	b103      	cbz	r3, 801df7a <_read_r+0x1e>
 801df78:	6023      	str	r3, [r4, #0]
 801df7a:	bd38      	pop	{r3, r4, r5, pc}
 801df7c:	2000d7d8 	.word	0x2000d7d8

0801df80 <_raise_r>:
 801df80:	291f      	cmp	r1, #31
 801df82:	b538      	push	{r3, r4, r5, lr}
 801df84:	4604      	mov	r4, r0
 801df86:	460d      	mov	r5, r1
 801df88:	d904      	bls.n	801df94 <_raise_r+0x14>
 801df8a:	2316      	movs	r3, #22
 801df8c:	6003      	str	r3, [r0, #0]
 801df8e:	f04f 30ff 	mov.w	r0, #4294967295
 801df92:	bd38      	pop	{r3, r4, r5, pc}
 801df94:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801df96:	b112      	cbz	r2, 801df9e <_raise_r+0x1e>
 801df98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801df9c:	b94b      	cbnz	r3, 801dfb2 <_raise_r+0x32>
 801df9e:	4620      	mov	r0, r4
 801dfa0:	f000 f830 	bl	801e004 <_getpid_r>
 801dfa4:	462a      	mov	r2, r5
 801dfa6:	4601      	mov	r1, r0
 801dfa8:	4620      	mov	r0, r4
 801dfaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801dfae:	f000 b817 	b.w	801dfe0 <_kill_r>
 801dfb2:	2b01      	cmp	r3, #1
 801dfb4:	d00a      	beq.n	801dfcc <_raise_r+0x4c>
 801dfb6:	1c59      	adds	r1, r3, #1
 801dfb8:	d103      	bne.n	801dfc2 <_raise_r+0x42>
 801dfba:	2316      	movs	r3, #22
 801dfbc:	6003      	str	r3, [r0, #0]
 801dfbe:	2001      	movs	r0, #1
 801dfc0:	e7e7      	b.n	801df92 <_raise_r+0x12>
 801dfc2:	2400      	movs	r4, #0
 801dfc4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801dfc8:	4628      	mov	r0, r5
 801dfca:	4798      	blx	r3
 801dfcc:	2000      	movs	r0, #0
 801dfce:	e7e0      	b.n	801df92 <_raise_r+0x12>

0801dfd0 <raise>:
 801dfd0:	4b02      	ldr	r3, [pc, #8]	; (801dfdc <raise+0xc>)
 801dfd2:	4601      	mov	r1, r0
 801dfd4:	6818      	ldr	r0, [r3, #0]
 801dfd6:	f7ff bfd3 	b.w	801df80 <_raise_r>
 801dfda:	bf00      	nop
 801dfdc:	2000001c 	.word	0x2000001c

0801dfe0 <_kill_r>:
 801dfe0:	b538      	push	{r3, r4, r5, lr}
 801dfe2:	4d07      	ldr	r5, [pc, #28]	; (801e000 <_kill_r+0x20>)
 801dfe4:	2300      	movs	r3, #0
 801dfe6:	4604      	mov	r4, r0
 801dfe8:	4608      	mov	r0, r1
 801dfea:	4611      	mov	r1, r2
 801dfec:	602b      	str	r3, [r5, #0]
 801dfee:	f7e3 feed 	bl	8001dcc <_kill>
 801dff2:	1c43      	adds	r3, r0, #1
 801dff4:	d102      	bne.n	801dffc <_kill_r+0x1c>
 801dff6:	682b      	ldr	r3, [r5, #0]
 801dff8:	b103      	cbz	r3, 801dffc <_kill_r+0x1c>
 801dffa:	6023      	str	r3, [r4, #0]
 801dffc:	bd38      	pop	{r3, r4, r5, pc}
 801dffe:	bf00      	nop
 801e000:	2000d7d8 	.word	0x2000d7d8

0801e004 <_getpid_r>:
 801e004:	f7e3 beda 	b.w	8001dbc <_getpid>

0801e008 <__ascii_wctomb>:
 801e008:	b149      	cbz	r1, 801e01e <__ascii_wctomb+0x16>
 801e00a:	2aff      	cmp	r2, #255	; 0xff
 801e00c:	bf85      	ittet	hi
 801e00e:	238a      	movhi	r3, #138	; 0x8a
 801e010:	6003      	strhi	r3, [r0, #0]
 801e012:	700a      	strbls	r2, [r1, #0]
 801e014:	f04f 30ff 	movhi.w	r0, #4294967295
 801e018:	bf98      	it	ls
 801e01a:	2001      	movls	r0, #1
 801e01c:	4770      	bx	lr
 801e01e:	4608      	mov	r0, r1
 801e020:	4770      	bx	lr
	...

0801e024 <_init>:
 801e024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e026:	bf00      	nop
 801e028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e02a:	bc08      	pop	{r3}
 801e02c:	469e      	mov	lr, r3
 801e02e:	4770      	bx	lr

0801e030 <_fini>:
 801e030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e032:	bf00      	nop
 801e034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e036:	bc08      	pop	{r3}
 801e038:	469e      	mov	lr, r3
 801e03a:	4770      	bx	lr
